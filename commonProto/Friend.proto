import "ModID.proto";
package FriendProto;

message stSynFriendInfo
{
	optional uint32 charID = 1;			//角色ID
	optional string name = 2;			//角色名字
	optional uint32 level = 3;			//等级
	optional uint32 job = 4;			//职业
	optional uint32 sex = 5;			//性别
	optional bool   online = 6;			//是否在线
	optional uint32 battlePower = 7;	//战力
	optional string lastLoginTime = 8;	//最近一次登录时间
	optional uint32 photoID = 9;		//头像ID
}

//上线同步所有好友 s  ---> c
message stSynAllFriend
{
	repeated stSynFriendInfo allFriend = 1;			//所有好友信息
	optional uint32  fetchLilianNum = 2;			//领取历练次数
	repeated uint32  hasGiveLilianCharID = 3;		//已经发送历练的角色ID

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 1;	
	}		
}

//请求添加一个好友c ---> s
message stReqAddOneFriend
{
	optional uint32 charID = 1;		//添加者的角色ID

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 2;	
	}	
}

//通知客户端增加了一个好友 s ---> c
message stNotifyAddOneFriend
{
	optional stSynFriendInfo  data = 1;  //好友的信息

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 3;	
	}	
}

//提示某人别人增加了你为好友  s ---> c
message stAddFriendTip
{
	optional uint32 charID = 1;		//添加者的角色ID
	optional string name = 2;		//添加者的角色名字

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 4;	
	}		
}

//删除好友 c<-----> s
message stDelFriend
{
	optional uint32 charID = 1; //角色ID

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 5;	
	}		
}

//查询增加好友 c ---> s
message stFindAndAddFriend
{
	optional string name = 1;		//查询的名字

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 6;	
	}		
}

//查询添加的结果 s ---> c
message stFindAndAddFriendResult
{
	optional uint32 result = 1;			//0失败,1成功
	optional string name  = 2;			//被添加者的名字

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 7;	
	}		
}

//请求申请者列表 c ---> s
message stReqApplyAddFriendList
{
	optional uint32 flag = 1;
	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 8;	
	}		
}

//申请者的信息
message stSynApplyerInfo
{
	optional uint32 charID = 1;			//申请者角色ID
	optional string name = 2;			//申请者的名字
	optional uint32 level = 3;			//申请者的等级
	optional uint32 job = 4;			//申请者的职业
	optional uint32 sex = 5;			//申请者性别
	optional uint32 applyDiffTime = 6;  //申请时间
	optional uint32 battlePower = 7;	//战力
	optional uint32 photoID = 8;		//头像ID
}

//返回申请者的信息列表 s ---> c
message stRetApplyAddFriendList
{
	repeated stSynApplyerInfo applyerList = 1;		//申请列表
	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 8;	
	}		
}

enum NotifyFriendType
{
	NOTIFY_ONLINE = 1;              //通知上线
	NOTIFY_OFFLINE = 2;             //通知下线
}

//通知好友信息 s ---> c
message stNotifyFriend
{
	optional uint32 charID = 1;			//角色ID
	optional NotifyFriendType type = 2;	//类型

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 9;	
	}		
}

message stSynRecommondChar
{
	optional uint32 charID = 1;		//角色ID
	optional string name = 2;		//角色名字
	optional uint32 job = 3;		//职业
	optional uint32 sex = 4;		//性别
	optional uint32 battlePower = 5;//战力
	optional uint32 level = 6;		//等级
	optional uint32 photoID = 7;	//头像ID
}

//请求推荐好友列表 c ---> s
message stReqRecommondFriend
{
	optional uint32 charID = 1;		//自己的角色ID
	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 10;	
	}		
}

//返回好友推荐
message stRecommondFriendList
{
	repeated stSynRecommondChar charList = 1;		//角色列表

	enum ProtoModID
	{
		ModID = 5;	
	}

	enum ProtoFunID
	{
		FunID = 11;	
	}	
}

//请求发送历练 c ---> s
message stGiveLilian2Friend
{
	optional uint32 charID = 1;			//好友的角色ID

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 12;	
	}		
}

//赠送历练结果 s ---> c
message stGiveLilianResult
{
	enum eResult
	{
		eSUCCESS = 1;			//成功
		eFAIL = 2;				//失败
	}
	
	optional uint32 charID = 1;		//接受历练的角色ID
	optional eResult result = 2;	//结果

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 13;	
	}	
}

//请求收到的历练列表 c --->s 
message stReqReceiveLilian
{
	optional uint32 charID = 1;
	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 14;	
	}	
}

//返回送到的历练列表 s ---> c
message stReceiveLilianList
{
	repeated uint32 charIDs = 1;		//所有发送历练的好友charID

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 15;	
	}	
}

enum eFetchLilianType
{
	FETCH_ONE = 1;			//领取一个
	FETCH_ALL = 2;			//领取所有
}

//领取历练 c ---> s ,成功会发送历练同步协议,在role.proto里面
message stFetchLilian
{
	optional eFetchLilianType type = 1;		//领取类型
	optional uint32 charID = 2;				//领取某个玩家赠送的历练
	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 16;	
	}		
}

//领取历练结果 s ---> c
message stFetchLilianResult
{
	enum eResult
	{
		eSUCCESS = 1;		//成功
		eNUM_USE_OUT = 2;	//次数完了
		eNOT_GIVE_LILIAN= 3;//没有赠送历练
	}
	
	optional uint32 result = 1;	//结果
	optional uint32 charID = 2;	//领取的角色的历练
	optional eFetchLilianType type = 3;     //领取类型

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 16;	
	}		
}

//申请成为好友 c ---> s
message stReqAdd2ApplyList
{
	optional uint32 otherID = 1;		//要求添加otherID的申请列表

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 17;	
	}		
}

//申请成为好友结果 s ---> c
message stAdd2ApplyListResult
{
	enum eResult
	{
		eSUCCESS = 1;		//成功
		eFAIL = 2;			//失败
	}
	
	optional eResult result = 1;

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 18;	
	}	
}

//拒绝加好友 c ---> s
message stRefuseAddFriend
{
	optional uint32 charID = 1;		//拒绝charID添加我为好友

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 19;	
	}		
}

//约战  c -----> s
message stInvitePKWithFriend
{
	optional uint32 charID = 1;		//好友的角色ID
	
	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 20;	
	}	
}

//询问是否同意约战 s ----> c
message stAskAgreePKWithFriend
{
	optional uint32 charID = 1;		//邀请者的角色ID
	optional string name   = 2;		//邀请者的名字

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 21;	
	}		
}

//答复约战邀请 c  ----> s
message stReplyFriendPKInvite
{
	optional bool agree = 1;		//true同意,false不同意
	optional uint32 charID = 2;		//邀请者的ID

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 22;	
	}		
}

//约战的结果  s ----> c
message stInvitePKResult
{
	enum eResult
	{
		eRefuse = 1;		//拒绝
		eAgree = 2;			//同意
		eNotYourFriend = 3; //不是你的好友
		eNotOnline = 4;		//不在线
		eInviteSuccess = 5;	//发送请求成功
	}

	optional eResult result = 1;

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 22;	
	}		
}

//答复约战结果 s ----->
message stReplyFriendPKInviteResult
{
	enum eResult
	{
		eNot_Invited_Has_Enter = 1;		//被邀请一方已经进入	
	}

	optional eResult result = 1;

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 23;	
	}			
}

//某个玩家申请了你 s ----> c
message stSomeOneApplyAddFriend
{
	optional stSynApplyerInfo one = 1;

	enum ProtoModID
	{
		ModID = 5;	
	}
	enum ProtoFunID
	{
		FunID = 24;	
	}		
}

message MarryObjInfo
{
	optional uint32 charID = 1;				//角色ID
	optional string name = 2;				//名字
	optional uint32 level = 3;				//等级
	optional uint32 job  = 4;				//职业
	optional uint32 sex = 5;				//性别
	optional uint32 battlePower = 6;		//战力
	optional uint32 headID = 7;				//头部ID
	optional uint32 bodyID = 8;		    	//衣服ID
	optional uint32 weaponID = 9;			//武器ID
	optional uint32	cloackID = 10;			//披风ID
	optional uint32	wingID = 11;			//翅膀ID
	optional uint32 shoeID = 12;			//鞋子
	optional uint32 fashionHair = 13;		//发型
	optional uint32 fashionFace = 14;		//表情
	optional uint32	fashionBody = 15;		//衣服
	optional uint32	fashionWeapon = 16;		//武器
	optional uint32	fashionShoe = 17;		//鞋子
	optional uint32	fashionDecoration = 18; //脸饰品
	optional uint32 effectID = 19;			//特效ID 
	optional uint32 wingBreakLv = 20;		//翅膀突破等级
	optional uint32 fashionWingID = 21;		//时装翅膀ID
}

// c <-> s
// 求婚 公用协议
// 求婚方发给服务器
// 服务器发给被求婚方
message stReqPropose
{
	optional uint32 id = 1;              // 对方的ID
	optional MarryObjInfo info = 2;      // 求婚人信息

	enum ProtoModID
	{
		ModID = 5;
	}

	enum ProtoFunID
	{
		FunID = 25;
	}
}

// s -> c
// 因为求婚有等待 所以多了包
message RejectMarry
{
	enum Result
    {
		RESULT_SUCCESS = 1;            // 成功发送请求->等待对方回应
		RESULT_ERROR_FRIEND = 2;       // 不是好友,失败
		RESULT_ERROR_ONLINE = 3;       // 不在线,失败
		RESULT_ERROR_SEX = 4;          // 不支持同性结婚,失败
		RESULT_ERROR_MARRIED = 5;      // 你或者对方已婚不能再婚,失败
		RESULT_ERROR_TICK1 = 6;         // 主动方在离婚倒计时
		RESULT_ERROR_TICK2 = 7;         // 对方在离婚倒计时
    }

	optional Result result = 1;		   // 服务器过滤不符合的可能
	optional uint32 tick1 = 2;          // 非0的时候不能结婚因为在离婚冷却时间 单位为秒 主动方
	optional uint32 tick2 = 3;          // 非0的时候不能结婚因为在离婚冷却时间 单位为秒 被动方

	enum ProtoModID
	{
		ModID = 5;
	}

	enum ProtoFunID
	{
		FunID = 26;
	}
}

// s -> c
// 求婚结果
message ProposeResult
{
	enum Result
    {
        RESULT_SUCCESS = 1;            // 成功
		RESULT_REFUSE = 2;             // 对方拒绝
    }

	optional Result result = 1;		   // 求婚结果
	optional MarryObjInfo info = 2;      // 对方信息

	enum ProtoModID
	{
		ModID = 5;
	}

	enum ProtoFunID
	{
		FunID = 27;
	}
}

// c -> s
// 被求婚方返回服务器答应不答应求婚
message stReqAgreeMarry
{
	enum Result
    {
        RESULT_AGREE = 1;        // 同意
		RESULT_REFUSE = 2;       // 拒绝
    }

	optional Result result = 1;	  // 答应不答应
	optional uint32 id = 2;       // 对方id

	enum ProtoModID
	{
		ModID = 5;
	}

	enum ProtoFunID
	{
		FunID = 28;
	}
}

// c -> s
// 任何一方按了大叉取消求婚
message stReqCancelMarry
{
	optional uint32 id = 1;       // 对方id,被求婚方ID

	enum ProtoModID
	{
		ModID = 5;
	}

	enum ProtoFunID
	{
		FunID = 29;
	}
}

// s -> c
// 通知另一方取消求婚
message NotifyCancelMarry
{
	optional uint32 id = 1;       // 另一方ID

	enum ProtoModID
	{
		ModID = 5;
	}

	enum ProtoFunID
	{
		FunID = 30;
	}
}

// s -> c
// 发给被动方错误码
message NotifyAgree
{
	enum Result
    {
		RESULT_SUCCESS = 1;    // 成功
		RESULT_ONLINE = 2;     // 对方不在线了
		RESULT_CANCEL = 3;     // 对方取消
		RESULT_WEDDING = 4;    // 对方正在(和别人)举行婚礼
    }

	optional Result result = 1;

	enum ProtoModID
	{
		ModID = 5;
	}

	enum ProtoFunID
	{
		FunID = 31;
	}
}

