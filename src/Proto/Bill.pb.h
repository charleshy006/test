// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bill.proto

#ifndef PROTOBUF_Bill_2eproto__INCLUDED
#define PROTOBUF_Bill_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Bill {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Bill_2eproto();
void protobuf_AssignDesc_Bill_2eproto();
void protobuf_ShutdownFile_Bill_2eproto();

class stLoginBill;
class stNotifyUserRecharge;

enum stLoginBill_ProtoModID {
  stLoginBill_ProtoModID_ModID = 1
};
bool stLoginBill_ProtoModID_IsValid(int value);
const stLoginBill_ProtoModID stLoginBill_ProtoModID_ProtoModID_MIN = stLoginBill_ProtoModID_ModID;
const stLoginBill_ProtoModID stLoginBill_ProtoModID_ProtoModID_MAX = stLoginBill_ProtoModID_ModID;
const int stLoginBill_ProtoModID_ProtoModID_ARRAYSIZE = stLoginBill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginBill_ProtoModID_descriptor();
inline const ::std::string& stLoginBill_ProtoModID_Name(stLoginBill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginBill_ProtoModID_descriptor(), value);
}
inline bool stLoginBill_ProtoModID_Parse(
    const ::std::string& name, stLoginBill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginBill_ProtoModID>(
    stLoginBill_ProtoModID_descriptor(), name, value);
}
enum stLoginBill_ProtoFunID {
  stLoginBill_ProtoFunID_FunID = 1
};
bool stLoginBill_ProtoFunID_IsValid(int value);
const stLoginBill_ProtoFunID stLoginBill_ProtoFunID_ProtoFunID_MIN = stLoginBill_ProtoFunID_FunID;
const stLoginBill_ProtoFunID stLoginBill_ProtoFunID_ProtoFunID_MAX = stLoginBill_ProtoFunID_FunID;
const int stLoginBill_ProtoFunID_ProtoFunID_ARRAYSIZE = stLoginBill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLoginBill_ProtoFunID_descriptor();
inline const ::std::string& stLoginBill_ProtoFunID_Name(stLoginBill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLoginBill_ProtoFunID_descriptor(), value);
}
inline bool stLoginBill_ProtoFunID_Parse(
    const ::std::string& name, stLoginBill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLoginBill_ProtoFunID>(
    stLoginBill_ProtoFunID_descriptor(), name, value);
}
enum stNotifyUserRecharge_ProtoModID {
  stNotifyUserRecharge_ProtoModID_ModID = 2
};
bool stNotifyUserRecharge_ProtoModID_IsValid(int value);
const stNotifyUserRecharge_ProtoModID stNotifyUserRecharge_ProtoModID_ProtoModID_MIN = stNotifyUserRecharge_ProtoModID_ModID;
const stNotifyUserRecharge_ProtoModID stNotifyUserRecharge_ProtoModID_ProtoModID_MAX = stNotifyUserRecharge_ProtoModID_ModID;
const int stNotifyUserRecharge_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyUserRecharge_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserRecharge_ProtoModID_descriptor();
inline const ::std::string& stNotifyUserRecharge_ProtoModID_Name(stNotifyUserRecharge_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserRecharge_ProtoModID_descriptor(), value);
}
inline bool stNotifyUserRecharge_ProtoModID_Parse(
    const ::std::string& name, stNotifyUserRecharge_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserRecharge_ProtoModID>(
    stNotifyUserRecharge_ProtoModID_descriptor(), name, value);
}
enum stNotifyUserRecharge_ProtoFunID {
  stNotifyUserRecharge_ProtoFunID_FunID = 1
};
bool stNotifyUserRecharge_ProtoFunID_IsValid(int value);
const stNotifyUserRecharge_ProtoFunID stNotifyUserRecharge_ProtoFunID_ProtoFunID_MIN = stNotifyUserRecharge_ProtoFunID_FunID;
const stNotifyUserRecharge_ProtoFunID stNotifyUserRecharge_ProtoFunID_ProtoFunID_MAX = stNotifyUserRecharge_ProtoFunID_FunID;
const int stNotifyUserRecharge_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyUserRecharge_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserRecharge_ProtoFunID_descriptor();
inline const ::std::string& stNotifyUserRecharge_ProtoFunID_Name(stNotifyUserRecharge_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserRecharge_ProtoFunID_descriptor(), value);
}
inline bool stNotifyUserRecharge_ProtoFunID_Parse(
    const ::std::string& name, stNotifyUserRecharge_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserRecharge_ProtoFunID>(
    stNotifyUserRecharge_ProtoFunID_descriptor(), name, value);
}
enum BillModID {
  LOGIN_MOD = 1,
  GLOBAL2BILL_MOD = 2
};
bool BillModID_IsValid(int value);
const BillModID BillModID_MIN = LOGIN_MOD;
const BillModID BillModID_MAX = GLOBAL2BILL_MOD;
const int BillModID_ARRAYSIZE = BillModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* BillModID_descriptor();
inline const ::std::string& BillModID_Name(BillModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    BillModID_descriptor(), value);
}
inline bool BillModID_Parse(
    const ::std::string& name, BillModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BillModID>(
    BillModID_descriptor(), name, value);
}
// ===================================================================

class stLoginBill : public ::google::protobuf::Message {
 public:
  stLoginBill();
  virtual ~stLoginBill();

  stLoginBill(const stLoginBill& from);

  inline stLoginBill& operator=(const stLoginBill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLoginBill& default_instance();

  void Swap(stLoginBill* other);

  // implements Message ----------------------------------------------

  stLoginBill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLoginBill& from);
  void MergeFrom(const stLoginBill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLoginBill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLoginBill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLoginBill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLoginBill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLoginBill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLoginBill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLoginBill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLoginBill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLoginBill_ProtoModID_Parse(name, value);
  }

  typedef stLoginBill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLoginBill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLoginBill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLoginBill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLoginBill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLoginBill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLoginBill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLoginBill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLoginBill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 svrType = 1;
  inline bool has_svrtype() const;
  inline void clear_svrtype();
  static const int kSvrTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 svrtype() const;
  inline void set_svrtype(::google::protobuf::uint32 value);

  // optional uint32 svrID = 2;
  inline bool has_svrid() const;
  inline void clear_svrid();
  static const int kSvrIDFieldNumber = 2;
  inline ::google::protobuf::uint32 svrid() const;
  inline void set_svrid(::google::protobuf::uint32 value);

  // optional string ip = 3;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 3;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // optional uint32 port = 4;
  inline bool has_port() const;
  inline void clear_port();
  static const int kPortFieldNumber = 4;
  inline ::google::protobuf::uint32 port() const;
  inline void set_port(::google::protobuf::uint32 value);

  // optional uint32 zoneID = 5;
  inline bool has_zoneid() const;
  inline void clear_zoneid();
  static const int kZoneIDFieldNumber = 5;
  inline ::google::protobuf::uint32 zoneid() const;
  inline void set_zoneid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Bill.stLoginBill)
 private:
  inline void set_has_svrtype();
  inline void clear_has_svrtype();
  inline void set_has_svrid();
  inline void clear_has_svrid();
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_port();
  inline void clear_has_port();
  inline void set_has_zoneid();
  inline void clear_has_zoneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 svrtype_;
  ::google::protobuf::uint32 svrid_;
  ::std::string* ip_;
  ::google::protobuf::uint32 port_;
  ::google::protobuf::uint32 zoneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Bill_2eproto();
  friend void protobuf_AssignDesc_Bill_2eproto();
  friend void protobuf_ShutdownFile_Bill_2eproto();

  void InitAsDefaultInstance();
  static stLoginBill* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyUserRecharge : public ::google::protobuf::Message {
 public:
  stNotifyUserRecharge();
  virtual ~stNotifyUserRecharge();

  stNotifyUserRecharge(const stNotifyUserRecharge& from);

  inline stNotifyUserRecharge& operator=(const stNotifyUserRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyUserRecharge& default_instance();

  void Swap(stNotifyUserRecharge* other);

  // implements Message ----------------------------------------------

  stNotifyUserRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyUserRecharge& from);
  void MergeFrom(const stNotifyUserRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyUserRecharge_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyUserRecharge_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyUserRecharge_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyUserRecharge_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyUserRecharge_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyUserRecharge_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyUserRecharge_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyUserRecharge_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyUserRecharge_ProtoModID_Parse(name, value);
  }

  typedef stNotifyUserRecharge_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyUserRecharge_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyUserRecharge_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyUserRecharge_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyUserRecharge_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyUserRecharge_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyUserRecharge_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyUserRecharge_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyUserRecharge_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Bill.stNotifyUserRecharge)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Bill_2eproto();
  friend void protobuf_AssignDesc_Bill_2eproto();
  friend void protobuf_ShutdownFile_Bill_2eproto();

  void InitAsDefaultInstance();
  static stNotifyUserRecharge* default_instance_;
};
// ===================================================================


// ===================================================================

// stLoginBill

// optional uint32 svrType = 1;
inline bool stLoginBill::has_svrtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLoginBill::set_has_svrtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLoginBill::clear_has_svrtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLoginBill::clear_svrtype() {
  svrtype_ = 0u;
  clear_has_svrtype();
}
inline ::google::protobuf::uint32 stLoginBill::svrtype() const {
  return svrtype_;
}
inline void stLoginBill::set_svrtype(::google::protobuf::uint32 value) {
  set_has_svrtype();
  svrtype_ = value;
}

// optional uint32 svrID = 2;
inline bool stLoginBill::has_svrid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLoginBill::set_has_svrid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLoginBill::clear_has_svrid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLoginBill::clear_svrid() {
  svrid_ = 0u;
  clear_has_svrid();
}
inline ::google::protobuf::uint32 stLoginBill::svrid() const {
  return svrid_;
}
inline void stLoginBill::set_svrid(::google::protobuf::uint32 value) {
  set_has_svrid();
  svrid_ = value;
}

// optional string ip = 3;
inline bool stLoginBill::has_ip() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stLoginBill::set_has_ip() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stLoginBill::clear_has_ip() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stLoginBill::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stLoginBill::ip() const {
  return *ip_;
}
inline void stLoginBill::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stLoginBill::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stLoginBill::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stLoginBill::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stLoginBill::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stLoginBill::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 port = 4;
inline bool stLoginBill::has_port() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stLoginBill::set_has_port() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stLoginBill::clear_has_port() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stLoginBill::clear_port() {
  port_ = 0u;
  clear_has_port();
}
inline ::google::protobuf::uint32 stLoginBill::port() const {
  return port_;
}
inline void stLoginBill::set_port(::google::protobuf::uint32 value) {
  set_has_port();
  port_ = value;
}

// optional uint32 zoneID = 5;
inline bool stLoginBill::has_zoneid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stLoginBill::set_has_zoneid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stLoginBill::clear_has_zoneid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stLoginBill::clear_zoneid() {
  zoneid_ = 0u;
  clear_has_zoneid();
}
inline ::google::protobuf::uint32 stLoginBill::zoneid() const {
  return zoneid_;
}
inline void stLoginBill::set_zoneid(::google::protobuf::uint32 value) {
  set_has_zoneid();
  zoneid_ = value;
}

// -------------------------------------------------------------------

// stNotifyUserRecharge

// optional uint32 charID = 1;
inline bool stNotifyUserRecharge::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyUserRecharge::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyUserRecharge::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyUserRecharge::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyUserRecharge::charid() const {
  return charid_;
}
inline void stNotifyUserRecharge::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Bill

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Bill::stLoginBill_ProtoModID>() {
  return ::Bill::stLoginBill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Bill::stLoginBill_ProtoFunID>() {
  return ::Bill::stLoginBill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Bill::stNotifyUserRecharge_ProtoModID>() {
  return ::Bill::stNotifyUserRecharge_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Bill::stNotifyUserRecharge_ProtoFunID>() {
  return ::Bill::stNotifyUserRecharge_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Bill::BillModID>() {
  return ::Bill::BillModID_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Bill_2eproto__INCLUDED
