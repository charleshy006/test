// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SortList.proto

#ifndef PROTOBUF_SortList_2eproto__INCLUDED
#define PROTOBUF_SortList_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ModID.pb.h"
// @@protoc_insertion_point(includes)

namespace SortProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SortList_2eproto();
void protobuf_AssignDesc_SortList_2eproto();
void protobuf_ShutdownFile_SortList_2eproto();

class stReqLevelSortList;
class stSynLevelSortItem;
class stRetLevelSortList;
class stReqBattlePowerSortList;
class stSynBattlePowerSortItem;
class stRetBattlePowerSortList;
class stReqCopymapSortList;
class stCopyMapSortItem;
class stRetCopyMapSortList;
class stSynArenaSortInfo;
class stReqArenaPKList;
class stRetArenaPKList;
class stReqArenaSortList;
class stRetArenaSortList;
class stSynOne2OnePVPInfo;
class stReqOne2OnePVPSortList;
class stRetOne2OnePVPSortList;
class stChallengeArenaUser;
class stChallengeArenaUserResult;
class stChallegeLeitaiUser;
class stChallegeLeitaiUserResult;
class stOpenLeitaiWindow;
class stSynHeroHP;
class stRetLeitaiInfo;
class stReqLeitaiSortList;
class stLeitaiSortListItem;
class stRetLeitaiSortList;
class stSendLeitaiResult;
class stRetSendLeitaiResult;
class stNotifySelectLeitaiMode;
class stSelectLeiTaiMode;
class stSelectLeiTaiModeResult;
class stResetLeitaiInfo;
class stResetLeitaiInfoResult;
class stReqDrawHeroSortList;
class stDrawHeroSortItem;
class stDrawHeroSortList;
class stReqOne2OnePVPMatch;
class stOne2OnePVPMatchResult;
class stCancelOne2OnePVPMatch;
class stCancelOne2OnePVPResult;
class stReqMySortListInfo;
class stRetMySortListInfo;
class stLeitaiMoveHero2BattlePos;
class stLeitaiMoveHero2BattlePosError;
class stLeitaiCancelGoOutForBattle;
class stLeitaiCancelGoOutForBattleResult;
class stCommitArenaResult;
class stRetCommintArenaResult;
class stReqEnterLeitaiScene;
class stReqResetLeitaiBuff;
class stResetLeitaiBuffResult;
class stReqBuffResetTime;
class stRetBuffResetTime;
class stArenaReachNewRank;
class stReqResetArenaChallengeNum;
class stResetArenaChallengeNunResult;
class stReqClearArenaCD;
class stClearArenaCDResult;
class stReqOpenSvrBPRank;
class stBPRankItemInfo;
class stRetOpenSvrBPRank;
class stReqExpeditionInfo;
class stExpeditionItem;
class stRetExpeditionInfo;
class stReqExpedition;
class stRetExpedition;
class stReqExpeditionReward;
class stRetExpeditionReward;
class stReqFastExpedition;
class stRetFastExpedition;
class stReqCancelExpedition;
class stRetCancelExpedition;
class stReqExpeditionSummary;
class stRetExpeditionSummary;
class stReqGloryfashionSortList;
class stGloryfashionSortList;
class stReqEnterEmeraldDream;
class stEnterEmeraldDreamResult;
class stResetFightNum;
class stResetFightNumResult;
class stReqEmeraldDreamSortList;
class SortListInfo;
class stEmeraldDreamSortList;
class stSendRankInfo;
class stReqSurplusNum;
class userSortInfo;
class stSurplusNumResult;
class stSynChampionInfo;
class stMyIntegralAndNum;
class stReqOpenLeagueWindow;
class stOpenLeagueWindowResult;
class stReqHeroLeagueMatch;
class stHeroLeagueMatchResult;
class stReqMenberInfo;
class stMemberinfo;
class stCancelHeroLeagueMatch;
class stCanceHeroLeagueResult;
class stReqQualifiedList;
class stRoleBasicInfo;
class stTeam;
class stQualifiedListResult;
class stReqWorship;
class stWorskipResult;
class stReqHeroList;
class stRankInfo;
class stHeroListResult;
class stReqRegister;
class stRegisrerResult;
class stArenaResultNotify;
class stReqPubLogIn;
class stReqPubLogOut;
class stRemoveModel;
class stLeitaiResultNotify;
class stReqRedPoint;
class stRedPointResult;
class stReqDragonNest;
class stRetDragonNest;
class stReqChallengeDragonNest;
class stRetChallengeDragonNest;
class stReqResetChallengeDragonNest;
class stRetResetChallengeDragonNest;
class stReqEnterResBattle;
class stRetEnterResBattle;
class stReqCurResBattleGloryRank;
class stResBattleGloryRankMemInfo;
class stRetCurResBattleGloryRank;
class stReqResBattleRank;
class stRetResBattleRank;
class stReqResBattleKing;
class stResBattleRankMemInfo;
class stRetResBattleKing;
class stReqResBattleProstate;
class stRetResBattleProstate;
class stReqResBattleRelive;
class stRetResBattleRelive;
class stReqLeaveResBattle;
class stRetLeaveResBattle;
class stReqRecvResBattleRes;
class stResBattleResItem;
class stRetRecvResBattleRes;
class stSendResBattleStreakNum;
class stSendResBattleNotice;
class stNotityResBattleKillInfo;
class stBattleResRefreshItem;
class stNotityResBattleResRefresh;
class stNotityResBattleResEmpty;
class stNotityResBattleGlory;
class stBroadCastResBattleInvite;
class stRetResBattleReceiveInvite;
class stResBattleReplyInviteJoin;
class stResBattleInviteJoinRes;
class stReqStoneCopyMapInfo;
class stStoneCopyMapInfoResult;
class stReqChallengeStoneCopyMap;
class stChallengeStoneCopyMap;
class stReqResetStoneCopyMapNum;
class stResetStoneCopyMapNum;
class stReqResBattleResource;
class stRetResBattleResource;
class stResBattleEnd;

enum stReqLevelSortList_ProtoModID {
  stReqLevelSortList_ProtoModID_ModID = 6
};
bool stReqLevelSortList_ProtoModID_IsValid(int value);
const stReqLevelSortList_ProtoModID stReqLevelSortList_ProtoModID_ProtoModID_MIN = stReqLevelSortList_ProtoModID_ModID;
const stReqLevelSortList_ProtoModID stReqLevelSortList_ProtoModID_ProtoModID_MAX = stReqLevelSortList_ProtoModID_ModID;
const int stReqLevelSortList_ProtoModID_ProtoModID_ARRAYSIZE = stReqLevelSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelSortList_ProtoModID_descriptor();
inline const ::std::string& stReqLevelSortList_ProtoModID_Name(stReqLevelSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelSortList_ProtoModID_descriptor(), value);
}
inline bool stReqLevelSortList_ProtoModID_Parse(
    const ::std::string& name, stReqLevelSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelSortList_ProtoModID>(
    stReqLevelSortList_ProtoModID_descriptor(), name, value);
}
enum stReqLevelSortList_ProtoFunID {
  stReqLevelSortList_ProtoFunID_FunID = 1
};
bool stReqLevelSortList_ProtoFunID_IsValid(int value);
const stReqLevelSortList_ProtoFunID stReqLevelSortList_ProtoFunID_ProtoFunID_MIN = stReqLevelSortList_ProtoFunID_FunID;
const stReqLevelSortList_ProtoFunID stReqLevelSortList_ProtoFunID_ProtoFunID_MAX = stReqLevelSortList_ProtoFunID_FunID;
const int stReqLevelSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLevelSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelSortList_ProtoFunID_descriptor();
inline const ::std::string& stReqLevelSortList_ProtoFunID_Name(stReqLevelSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelSortList_ProtoFunID_descriptor(), value);
}
inline bool stReqLevelSortList_ProtoFunID_Parse(
    const ::std::string& name, stReqLevelSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelSortList_ProtoFunID>(
    stReqLevelSortList_ProtoFunID_descriptor(), name, value);
}
enum stRetLevelSortList_ProtoModID {
  stRetLevelSortList_ProtoModID_ModID = 6
};
bool stRetLevelSortList_ProtoModID_IsValid(int value);
const stRetLevelSortList_ProtoModID stRetLevelSortList_ProtoModID_ProtoModID_MIN = stRetLevelSortList_ProtoModID_ModID;
const stRetLevelSortList_ProtoModID stRetLevelSortList_ProtoModID_ProtoModID_MAX = stRetLevelSortList_ProtoModID_ModID;
const int stRetLevelSortList_ProtoModID_ProtoModID_ARRAYSIZE = stRetLevelSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLevelSortList_ProtoModID_descriptor();
inline const ::std::string& stRetLevelSortList_ProtoModID_Name(stRetLevelSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLevelSortList_ProtoModID_descriptor(), value);
}
inline bool stRetLevelSortList_ProtoModID_Parse(
    const ::std::string& name, stRetLevelSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLevelSortList_ProtoModID>(
    stRetLevelSortList_ProtoModID_descriptor(), name, value);
}
enum stRetLevelSortList_ProtoFunID {
  stRetLevelSortList_ProtoFunID_FunID = 2
};
bool stRetLevelSortList_ProtoFunID_IsValid(int value);
const stRetLevelSortList_ProtoFunID stRetLevelSortList_ProtoFunID_ProtoFunID_MIN = stRetLevelSortList_ProtoFunID_FunID;
const stRetLevelSortList_ProtoFunID stRetLevelSortList_ProtoFunID_ProtoFunID_MAX = stRetLevelSortList_ProtoFunID_FunID;
const int stRetLevelSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetLevelSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLevelSortList_ProtoFunID_descriptor();
inline const ::std::string& stRetLevelSortList_ProtoFunID_Name(stRetLevelSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLevelSortList_ProtoFunID_descriptor(), value);
}
inline bool stRetLevelSortList_ProtoFunID_Parse(
    const ::std::string& name, stRetLevelSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLevelSortList_ProtoFunID>(
    stRetLevelSortList_ProtoFunID_descriptor(), name, value);
}
enum stReqBattlePowerSortList_ProtoModID {
  stReqBattlePowerSortList_ProtoModID_ModID = 6
};
bool stReqBattlePowerSortList_ProtoModID_IsValid(int value);
const stReqBattlePowerSortList_ProtoModID stReqBattlePowerSortList_ProtoModID_ProtoModID_MIN = stReqBattlePowerSortList_ProtoModID_ModID;
const stReqBattlePowerSortList_ProtoModID stReqBattlePowerSortList_ProtoModID_ProtoModID_MAX = stReqBattlePowerSortList_ProtoModID_ModID;
const int stReqBattlePowerSortList_ProtoModID_ProtoModID_ARRAYSIZE = stReqBattlePowerSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBattlePowerSortList_ProtoModID_descriptor();
inline const ::std::string& stReqBattlePowerSortList_ProtoModID_Name(stReqBattlePowerSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBattlePowerSortList_ProtoModID_descriptor(), value);
}
inline bool stReqBattlePowerSortList_ProtoModID_Parse(
    const ::std::string& name, stReqBattlePowerSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBattlePowerSortList_ProtoModID>(
    stReqBattlePowerSortList_ProtoModID_descriptor(), name, value);
}
enum stReqBattlePowerSortList_ProtoFunID {
  stReqBattlePowerSortList_ProtoFunID_FunID = 3
};
bool stReqBattlePowerSortList_ProtoFunID_IsValid(int value);
const stReqBattlePowerSortList_ProtoFunID stReqBattlePowerSortList_ProtoFunID_ProtoFunID_MIN = stReqBattlePowerSortList_ProtoFunID_FunID;
const stReqBattlePowerSortList_ProtoFunID stReqBattlePowerSortList_ProtoFunID_ProtoFunID_MAX = stReqBattlePowerSortList_ProtoFunID_FunID;
const int stReqBattlePowerSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBattlePowerSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBattlePowerSortList_ProtoFunID_descriptor();
inline const ::std::string& stReqBattlePowerSortList_ProtoFunID_Name(stReqBattlePowerSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBattlePowerSortList_ProtoFunID_descriptor(), value);
}
inline bool stReqBattlePowerSortList_ProtoFunID_Parse(
    const ::std::string& name, stReqBattlePowerSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBattlePowerSortList_ProtoFunID>(
    stReqBattlePowerSortList_ProtoFunID_descriptor(), name, value);
}
enum stRetBattlePowerSortList_ProtoModID {
  stRetBattlePowerSortList_ProtoModID_ModID = 6
};
bool stRetBattlePowerSortList_ProtoModID_IsValid(int value);
const stRetBattlePowerSortList_ProtoModID stRetBattlePowerSortList_ProtoModID_ProtoModID_MIN = stRetBattlePowerSortList_ProtoModID_ModID;
const stRetBattlePowerSortList_ProtoModID stRetBattlePowerSortList_ProtoModID_ProtoModID_MAX = stRetBattlePowerSortList_ProtoModID_ModID;
const int stRetBattlePowerSortList_ProtoModID_ProtoModID_ARRAYSIZE = stRetBattlePowerSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetBattlePowerSortList_ProtoModID_descriptor();
inline const ::std::string& stRetBattlePowerSortList_ProtoModID_Name(stRetBattlePowerSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetBattlePowerSortList_ProtoModID_descriptor(), value);
}
inline bool stRetBattlePowerSortList_ProtoModID_Parse(
    const ::std::string& name, stRetBattlePowerSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetBattlePowerSortList_ProtoModID>(
    stRetBattlePowerSortList_ProtoModID_descriptor(), name, value);
}
enum stRetBattlePowerSortList_ProtoFunID {
  stRetBattlePowerSortList_ProtoFunID_FunID = 4
};
bool stRetBattlePowerSortList_ProtoFunID_IsValid(int value);
const stRetBattlePowerSortList_ProtoFunID stRetBattlePowerSortList_ProtoFunID_ProtoFunID_MIN = stRetBattlePowerSortList_ProtoFunID_FunID;
const stRetBattlePowerSortList_ProtoFunID stRetBattlePowerSortList_ProtoFunID_ProtoFunID_MAX = stRetBattlePowerSortList_ProtoFunID_FunID;
const int stRetBattlePowerSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetBattlePowerSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetBattlePowerSortList_ProtoFunID_descriptor();
inline const ::std::string& stRetBattlePowerSortList_ProtoFunID_Name(stRetBattlePowerSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetBattlePowerSortList_ProtoFunID_descriptor(), value);
}
inline bool stRetBattlePowerSortList_ProtoFunID_Parse(
    const ::std::string& name, stRetBattlePowerSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetBattlePowerSortList_ProtoFunID>(
    stRetBattlePowerSortList_ProtoFunID_descriptor(), name, value);
}
enum stReqCopymapSortList_ProtoModID {
  stReqCopymapSortList_ProtoModID_ModID = 6
};
bool stReqCopymapSortList_ProtoModID_IsValid(int value);
const stReqCopymapSortList_ProtoModID stReqCopymapSortList_ProtoModID_ProtoModID_MIN = stReqCopymapSortList_ProtoModID_ModID;
const stReqCopymapSortList_ProtoModID stReqCopymapSortList_ProtoModID_ProtoModID_MAX = stReqCopymapSortList_ProtoModID_ModID;
const int stReqCopymapSortList_ProtoModID_ProtoModID_ARRAYSIZE = stReqCopymapSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCopymapSortList_ProtoModID_descriptor();
inline const ::std::string& stReqCopymapSortList_ProtoModID_Name(stReqCopymapSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCopymapSortList_ProtoModID_descriptor(), value);
}
inline bool stReqCopymapSortList_ProtoModID_Parse(
    const ::std::string& name, stReqCopymapSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCopymapSortList_ProtoModID>(
    stReqCopymapSortList_ProtoModID_descriptor(), name, value);
}
enum stReqCopymapSortList_ProtoFunID {
  stReqCopymapSortList_ProtoFunID_FunID = 5
};
bool stReqCopymapSortList_ProtoFunID_IsValid(int value);
const stReqCopymapSortList_ProtoFunID stReqCopymapSortList_ProtoFunID_ProtoFunID_MIN = stReqCopymapSortList_ProtoFunID_FunID;
const stReqCopymapSortList_ProtoFunID stReqCopymapSortList_ProtoFunID_ProtoFunID_MAX = stReqCopymapSortList_ProtoFunID_FunID;
const int stReqCopymapSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCopymapSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCopymapSortList_ProtoFunID_descriptor();
inline const ::std::string& stReqCopymapSortList_ProtoFunID_Name(stReqCopymapSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCopymapSortList_ProtoFunID_descriptor(), value);
}
inline bool stReqCopymapSortList_ProtoFunID_Parse(
    const ::std::string& name, stReqCopymapSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCopymapSortList_ProtoFunID>(
    stReqCopymapSortList_ProtoFunID_descriptor(), name, value);
}
enum stRetCopyMapSortList_ProtoModID {
  stRetCopyMapSortList_ProtoModID_ModID = 6
};
bool stRetCopyMapSortList_ProtoModID_IsValid(int value);
const stRetCopyMapSortList_ProtoModID stRetCopyMapSortList_ProtoModID_ProtoModID_MIN = stRetCopyMapSortList_ProtoModID_ModID;
const stRetCopyMapSortList_ProtoModID stRetCopyMapSortList_ProtoModID_ProtoModID_MAX = stRetCopyMapSortList_ProtoModID_ModID;
const int stRetCopyMapSortList_ProtoModID_ProtoModID_ARRAYSIZE = stRetCopyMapSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCopyMapSortList_ProtoModID_descriptor();
inline const ::std::string& stRetCopyMapSortList_ProtoModID_Name(stRetCopyMapSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCopyMapSortList_ProtoModID_descriptor(), value);
}
inline bool stRetCopyMapSortList_ProtoModID_Parse(
    const ::std::string& name, stRetCopyMapSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCopyMapSortList_ProtoModID>(
    stRetCopyMapSortList_ProtoModID_descriptor(), name, value);
}
enum stRetCopyMapSortList_ProtoFunID {
  stRetCopyMapSortList_ProtoFunID_FunID = 6
};
bool stRetCopyMapSortList_ProtoFunID_IsValid(int value);
const stRetCopyMapSortList_ProtoFunID stRetCopyMapSortList_ProtoFunID_ProtoFunID_MIN = stRetCopyMapSortList_ProtoFunID_FunID;
const stRetCopyMapSortList_ProtoFunID stRetCopyMapSortList_ProtoFunID_ProtoFunID_MAX = stRetCopyMapSortList_ProtoFunID_FunID;
const int stRetCopyMapSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetCopyMapSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCopyMapSortList_ProtoFunID_descriptor();
inline const ::std::string& stRetCopyMapSortList_ProtoFunID_Name(stRetCopyMapSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCopyMapSortList_ProtoFunID_descriptor(), value);
}
inline bool stRetCopyMapSortList_ProtoFunID_Parse(
    const ::std::string& name, stRetCopyMapSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCopyMapSortList_ProtoFunID>(
    stRetCopyMapSortList_ProtoFunID_descriptor(), name, value);
}
enum stReqArenaPKList_ProtoModID {
  stReqArenaPKList_ProtoModID_ModID = 6
};
bool stReqArenaPKList_ProtoModID_IsValid(int value);
const stReqArenaPKList_ProtoModID stReqArenaPKList_ProtoModID_ProtoModID_MIN = stReqArenaPKList_ProtoModID_ModID;
const stReqArenaPKList_ProtoModID stReqArenaPKList_ProtoModID_ProtoModID_MAX = stReqArenaPKList_ProtoModID_ModID;
const int stReqArenaPKList_ProtoModID_ProtoModID_ARRAYSIZE = stReqArenaPKList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqArenaPKList_ProtoModID_descriptor();
inline const ::std::string& stReqArenaPKList_ProtoModID_Name(stReqArenaPKList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqArenaPKList_ProtoModID_descriptor(), value);
}
inline bool stReqArenaPKList_ProtoModID_Parse(
    const ::std::string& name, stReqArenaPKList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqArenaPKList_ProtoModID>(
    stReqArenaPKList_ProtoModID_descriptor(), name, value);
}
enum stReqArenaPKList_ProtoFunID {
  stReqArenaPKList_ProtoFunID_FunID = 7
};
bool stReqArenaPKList_ProtoFunID_IsValid(int value);
const stReqArenaPKList_ProtoFunID stReqArenaPKList_ProtoFunID_ProtoFunID_MIN = stReqArenaPKList_ProtoFunID_FunID;
const stReqArenaPKList_ProtoFunID stReqArenaPKList_ProtoFunID_ProtoFunID_MAX = stReqArenaPKList_ProtoFunID_FunID;
const int stReqArenaPKList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqArenaPKList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqArenaPKList_ProtoFunID_descriptor();
inline const ::std::string& stReqArenaPKList_ProtoFunID_Name(stReqArenaPKList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqArenaPKList_ProtoFunID_descriptor(), value);
}
inline bool stReqArenaPKList_ProtoFunID_Parse(
    const ::std::string& name, stReqArenaPKList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqArenaPKList_ProtoFunID>(
    stReqArenaPKList_ProtoFunID_descriptor(), name, value);
}
enum stRetArenaPKList_ProtoModID {
  stRetArenaPKList_ProtoModID_ModID = 6
};
bool stRetArenaPKList_ProtoModID_IsValid(int value);
const stRetArenaPKList_ProtoModID stRetArenaPKList_ProtoModID_ProtoModID_MIN = stRetArenaPKList_ProtoModID_ModID;
const stRetArenaPKList_ProtoModID stRetArenaPKList_ProtoModID_ProtoModID_MAX = stRetArenaPKList_ProtoModID_ModID;
const int stRetArenaPKList_ProtoModID_ProtoModID_ARRAYSIZE = stRetArenaPKList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetArenaPKList_ProtoModID_descriptor();
inline const ::std::string& stRetArenaPKList_ProtoModID_Name(stRetArenaPKList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetArenaPKList_ProtoModID_descriptor(), value);
}
inline bool stRetArenaPKList_ProtoModID_Parse(
    const ::std::string& name, stRetArenaPKList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetArenaPKList_ProtoModID>(
    stRetArenaPKList_ProtoModID_descriptor(), name, value);
}
enum stRetArenaPKList_ProtoFunID {
  stRetArenaPKList_ProtoFunID_FunID = 8
};
bool stRetArenaPKList_ProtoFunID_IsValid(int value);
const stRetArenaPKList_ProtoFunID stRetArenaPKList_ProtoFunID_ProtoFunID_MIN = stRetArenaPKList_ProtoFunID_FunID;
const stRetArenaPKList_ProtoFunID stRetArenaPKList_ProtoFunID_ProtoFunID_MAX = stRetArenaPKList_ProtoFunID_FunID;
const int stRetArenaPKList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetArenaPKList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetArenaPKList_ProtoFunID_descriptor();
inline const ::std::string& stRetArenaPKList_ProtoFunID_Name(stRetArenaPKList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetArenaPKList_ProtoFunID_descriptor(), value);
}
inline bool stRetArenaPKList_ProtoFunID_Parse(
    const ::std::string& name, stRetArenaPKList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetArenaPKList_ProtoFunID>(
    stRetArenaPKList_ProtoFunID_descriptor(), name, value);
}
enum stReqArenaSortList_ProtoModID {
  stReqArenaSortList_ProtoModID_ModID = 6
};
bool stReqArenaSortList_ProtoModID_IsValid(int value);
const stReqArenaSortList_ProtoModID stReqArenaSortList_ProtoModID_ProtoModID_MIN = stReqArenaSortList_ProtoModID_ModID;
const stReqArenaSortList_ProtoModID stReqArenaSortList_ProtoModID_ProtoModID_MAX = stReqArenaSortList_ProtoModID_ModID;
const int stReqArenaSortList_ProtoModID_ProtoModID_ARRAYSIZE = stReqArenaSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqArenaSortList_ProtoModID_descriptor();
inline const ::std::string& stReqArenaSortList_ProtoModID_Name(stReqArenaSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqArenaSortList_ProtoModID_descriptor(), value);
}
inline bool stReqArenaSortList_ProtoModID_Parse(
    const ::std::string& name, stReqArenaSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqArenaSortList_ProtoModID>(
    stReqArenaSortList_ProtoModID_descriptor(), name, value);
}
enum stReqArenaSortList_ProtoFunID {
  stReqArenaSortList_ProtoFunID_FunID = 9
};
bool stReqArenaSortList_ProtoFunID_IsValid(int value);
const stReqArenaSortList_ProtoFunID stReqArenaSortList_ProtoFunID_ProtoFunID_MIN = stReqArenaSortList_ProtoFunID_FunID;
const stReqArenaSortList_ProtoFunID stReqArenaSortList_ProtoFunID_ProtoFunID_MAX = stReqArenaSortList_ProtoFunID_FunID;
const int stReqArenaSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqArenaSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqArenaSortList_ProtoFunID_descriptor();
inline const ::std::string& stReqArenaSortList_ProtoFunID_Name(stReqArenaSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqArenaSortList_ProtoFunID_descriptor(), value);
}
inline bool stReqArenaSortList_ProtoFunID_Parse(
    const ::std::string& name, stReqArenaSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqArenaSortList_ProtoFunID>(
    stReqArenaSortList_ProtoFunID_descriptor(), name, value);
}
enum stRetArenaSortList_ProtoModID {
  stRetArenaSortList_ProtoModID_ModID = 6
};
bool stRetArenaSortList_ProtoModID_IsValid(int value);
const stRetArenaSortList_ProtoModID stRetArenaSortList_ProtoModID_ProtoModID_MIN = stRetArenaSortList_ProtoModID_ModID;
const stRetArenaSortList_ProtoModID stRetArenaSortList_ProtoModID_ProtoModID_MAX = stRetArenaSortList_ProtoModID_ModID;
const int stRetArenaSortList_ProtoModID_ProtoModID_ARRAYSIZE = stRetArenaSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetArenaSortList_ProtoModID_descriptor();
inline const ::std::string& stRetArenaSortList_ProtoModID_Name(stRetArenaSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetArenaSortList_ProtoModID_descriptor(), value);
}
inline bool stRetArenaSortList_ProtoModID_Parse(
    const ::std::string& name, stRetArenaSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetArenaSortList_ProtoModID>(
    stRetArenaSortList_ProtoModID_descriptor(), name, value);
}
enum stRetArenaSortList_ProtoFunID {
  stRetArenaSortList_ProtoFunID_FunID = 10
};
bool stRetArenaSortList_ProtoFunID_IsValid(int value);
const stRetArenaSortList_ProtoFunID stRetArenaSortList_ProtoFunID_ProtoFunID_MIN = stRetArenaSortList_ProtoFunID_FunID;
const stRetArenaSortList_ProtoFunID stRetArenaSortList_ProtoFunID_ProtoFunID_MAX = stRetArenaSortList_ProtoFunID_FunID;
const int stRetArenaSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetArenaSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetArenaSortList_ProtoFunID_descriptor();
inline const ::std::string& stRetArenaSortList_ProtoFunID_Name(stRetArenaSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetArenaSortList_ProtoFunID_descriptor(), value);
}
inline bool stRetArenaSortList_ProtoFunID_Parse(
    const ::std::string& name, stRetArenaSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetArenaSortList_ProtoFunID>(
    stRetArenaSortList_ProtoFunID_descriptor(), name, value);
}
enum stReqOne2OnePVPSortList_ProtoModID {
  stReqOne2OnePVPSortList_ProtoModID_ModID = 6
};
bool stReqOne2OnePVPSortList_ProtoModID_IsValid(int value);
const stReqOne2OnePVPSortList_ProtoModID stReqOne2OnePVPSortList_ProtoModID_ProtoModID_MIN = stReqOne2OnePVPSortList_ProtoModID_ModID;
const stReqOne2OnePVPSortList_ProtoModID stReqOne2OnePVPSortList_ProtoModID_ProtoModID_MAX = stReqOne2OnePVPSortList_ProtoModID_ModID;
const int stReqOne2OnePVPSortList_ProtoModID_ProtoModID_ARRAYSIZE = stReqOne2OnePVPSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPSortList_ProtoModID_descriptor();
inline const ::std::string& stReqOne2OnePVPSortList_ProtoModID_Name(stReqOne2OnePVPSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOne2OnePVPSortList_ProtoModID_descriptor(), value);
}
inline bool stReqOne2OnePVPSortList_ProtoModID_Parse(
    const ::std::string& name, stReqOne2OnePVPSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOne2OnePVPSortList_ProtoModID>(
    stReqOne2OnePVPSortList_ProtoModID_descriptor(), name, value);
}
enum stReqOne2OnePVPSortList_ProtoFunID {
  stReqOne2OnePVPSortList_ProtoFunID_FunID = 11
};
bool stReqOne2OnePVPSortList_ProtoFunID_IsValid(int value);
const stReqOne2OnePVPSortList_ProtoFunID stReqOne2OnePVPSortList_ProtoFunID_ProtoFunID_MIN = stReqOne2OnePVPSortList_ProtoFunID_FunID;
const stReqOne2OnePVPSortList_ProtoFunID stReqOne2OnePVPSortList_ProtoFunID_ProtoFunID_MAX = stReqOne2OnePVPSortList_ProtoFunID_FunID;
const int stReqOne2OnePVPSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOne2OnePVPSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPSortList_ProtoFunID_descriptor();
inline const ::std::string& stReqOne2OnePVPSortList_ProtoFunID_Name(stReqOne2OnePVPSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOne2OnePVPSortList_ProtoFunID_descriptor(), value);
}
inline bool stReqOne2OnePVPSortList_ProtoFunID_Parse(
    const ::std::string& name, stReqOne2OnePVPSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOne2OnePVPSortList_ProtoFunID>(
    stReqOne2OnePVPSortList_ProtoFunID_descriptor(), name, value);
}
enum stRetOne2OnePVPSortList_ProtoModID {
  stRetOne2OnePVPSortList_ProtoModID_ModID = 6
};
bool stRetOne2OnePVPSortList_ProtoModID_IsValid(int value);
const stRetOne2OnePVPSortList_ProtoModID stRetOne2OnePVPSortList_ProtoModID_ProtoModID_MIN = stRetOne2OnePVPSortList_ProtoModID_ModID;
const stRetOne2OnePVPSortList_ProtoModID stRetOne2OnePVPSortList_ProtoModID_ProtoModID_MAX = stRetOne2OnePVPSortList_ProtoModID_ModID;
const int stRetOne2OnePVPSortList_ProtoModID_ProtoModID_ARRAYSIZE = stRetOne2OnePVPSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOne2OnePVPSortList_ProtoModID_descriptor();
inline const ::std::string& stRetOne2OnePVPSortList_ProtoModID_Name(stRetOne2OnePVPSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOne2OnePVPSortList_ProtoModID_descriptor(), value);
}
inline bool stRetOne2OnePVPSortList_ProtoModID_Parse(
    const ::std::string& name, stRetOne2OnePVPSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOne2OnePVPSortList_ProtoModID>(
    stRetOne2OnePVPSortList_ProtoModID_descriptor(), name, value);
}
enum stRetOne2OnePVPSortList_ProtoFunID {
  stRetOne2OnePVPSortList_ProtoFunID_FunID = 12
};
bool stRetOne2OnePVPSortList_ProtoFunID_IsValid(int value);
const stRetOne2OnePVPSortList_ProtoFunID stRetOne2OnePVPSortList_ProtoFunID_ProtoFunID_MIN = stRetOne2OnePVPSortList_ProtoFunID_FunID;
const stRetOne2OnePVPSortList_ProtoFunID stRetOne2OnePVPSortList_ProtoFunID_ProtoFunID_MAX = stRetOne2OnePVPSortList_ProtoFunID_FunID;
const int stRetOne2OnePVPSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetOne2OnePVPSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOne2OnePVPSortList_ProtoFunID_descriptor();
inline const ::std::string& stRetOne2OnePVPSortList_ProtoFunID_Name(stRetOne2OnePVPSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOne2OnePVPSortList_ProtoFunID_descriptor(), value);
}
inline bool stRetOne2OnePVPSortList_ProtoFunID_Parse(
    const ::std::string& name, stRetOne2OnePVPSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOne2OnePVPSortList_ProtoFunID>(
    stRetOne2OnePVPSortList_ProtoFunID_descriptor(), name, value);
}
enum stChallengeArenaUser_ProtoModID {
  stChallengeArenaUser_ProtoModID_ModID = 6
};
bool stChallengeArenaUser_ProtoModID_IsValid(int value);
const stChallengeArenaUser_ProtoModID stChallengeArenaUser_ProtoModID_ProtoModID_MIN = stChallengeArenaUser_ProtoModID_ModID;
const stChallengeArenaUser_ProtoModID stChallengeArenaUser_ProtoModID_ProtoModID_MAX = stChallengeArenaUser_ProtoModID_ModID;
const int stChallengeArenaUser_ProtoModID_ProtoModID_ARRAYSIZE = stChallengeArenaUser_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallengeArenaUser_ProtoModID_descriptor();
inline const ::std::string& stChallengeArenaUser_ProtoModID_Name(stChallengeArenaUser_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallengeArenaUser_ProtoModID_descriptor(), value);
}
inline bool stChallengeArenaUser_ProtoModID_Parse(
    const ::std::string& name, stChallengeArenaUser_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallengeArenaUser_ProtoModID>(
    stChallengeArenaUser_ProtoModID_descriptor(), name, value);
}
enum stChallengeArenaUser_ProtoFunID {
  stChallengeArenaUser_ProtoFunID_FunID = 13
};
bool stChallengeArenaUser_ProtoFunID_IsValid(int value);
const stChallengeArenaUser_ProtoFunID stChallengeArenaUser_ProtoFunID_ProtoFunID_MIN = stChallengeArenaUser_ProtoFunID_FunID;
const stChallengeArenaUser_ProtoFunID stChallengeArenaUser_ProtoFunID_ProtoFunID_MAX = stChallengeArenaUser_ProtoFunID_FunID;
const int stChallengeArenaUser_ProtoFunID_ProtoFunID_ARRAYSIZE = stChallengeArenaUser_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallengeArenaUser_ProtoFunID_descriptor();
inline const ::std::string& stChallengeArenaUser_ProtoFunID_Name(stChallengeArenaUser_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallengeArenaUser_ProtoFunID_descriptor(), value);
}
inline bool stChallengeArenaUser_ProtoFunID_Parse(
    const ::std::string& name, stChallengeArenaUser_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallengeArenaUser_ProtoFunID>(
    stChallengeArenaUser_ProtoFunID_descriptor(), name, value);
}
enum stChallengeArenaUserResult_eResult {
  stChallengeArenaUserResult_eResult_eSuccess = 1,
  stChallengeArenaUserResult_eResult_eLilian_Not_Enough = 2,
  stChallengeArenaUserResult_eResult_eInner_Error = 3,
  stChallengeArenaUserResult_eResult_eLevel_Limit = 4,
  stChallengeArenaUserResult_eResult_eBagFull = 5,
  stChallengeArenaUserResult_eResult_eCoolDown = 6,
  stChallengeArenaUserResult_eResult_eTimeUseOut = 7,
  stChallengeArenaUserResult_eResult_eEquip = 8
};
bool stChallengeArenaUserResult_eResult_IsValid(int value);
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult_eResult_eResult_MIN = stChallengeArenaUserResult_eResult_eSuccess;
const stChallengeArenaUserResult_eResult stChallengeArenaUserResult_eResult_eResult_MAX = stChallengeArenaUserResult_eResult_eEquip;
const int stChallengeArenaUserResult_eResult_eResult_ARRAYSIZE = stChallengeArenaUserResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallengeArenaUserResult_eResult_descriptor();
inline const ::std::string& stChallengeArenaUserResult_eResult_Name(stChallengeArenaUserResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallengeArenaUserResult_eResult_descriptor(), value);
}
inline bool stChallengeArenaUserResult_eResult_Parse(
    const ::std::string& name, stChallengeArenaUserResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallengeArenaUserResult_eResult>(
    stChallengeArenaUserResult_eResult_descriptor(), name, value);
}
enum stChallengeArenaUserResult_ProtoModID {
  stChallengeArenaUserResult_ProtoModID_ModID = 6
};
bool stChallengeArenaUserResult_ProtoModID_IsValid(int value);
const stChallengeArenaUserResult_ProtoModID stChallengeArenaUserResult_ProtoModID_ProtoModID_MIN = stChallengeArenaUserResult_ProtoModID_ModID;
const stChallengeArenaUserResult_ProtoModID stChallengeArenaUserResult_ProtoModID_ProtoModID_MAX = stChallengeArenaUserResult_ProtoModID_ModID;
const int stChallengeArenaUserResult_ProtoModID_ProtoModID_ARRAYSIZE = stChallengeArenaUserResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallengeArenaUserResult_ProtoModID_descriptor();
inline const ::std::string& stChallengeArenaUserResult_ProtoModID_Name(stChallengeArenaUserResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallengeArenaUserResult_ProtoModID_descriptor(), value);
}
inline bool stChallengeArenaUserResult_ProtoModID_Parse(
    const ::std::string& name, stChallengeArenaUserResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallengeArenaUserResult_ProtoModID>(
    stChallengeArenaUserResult_ProtoModID_descriptor(), name, value);
}
enum stChallengeArenaUserResult_ProtoFunID {
  stChallengeArenaUserResult_ProtoFunID_FunID = 14
};
bool stChallengeArenaUserResult_ProtoFunID_IsValid(int value);
const stChallengeArenaUserResult_ProtoFunID stChallengeArenaUserResult_ProtoFunID_ProtoFunID_MIN = stChallengeArenaUserResult_ProtoFunID_FunID;
const stChallengeArenaUserResult_ProtoFunID stChallengeArenaUserResult_ProtoFunID_ProtoFunID_MAX = stChallengeArenaUserResult_ProtoFunID_FunID;
const int stChallengeArenaUserResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stChallengeArenaUserResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallengeArenaUserResult_ProtoFunID_descriptor();
inline const ::std::string& stChallengeArenaUserResult_ProtoFunID_Name(stChallengeArenaUserResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallengeArenaUserResult_ProtoFunID_descriptor(), value);
}
inline bool stChallengeArenaUserResult_ProtoFunID_Parse(
    const ::std::string& name, stChallengeArenaUserResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallengeArenaUserResult_ProtoFunID>(
    stChallengeArenaUserResult_ProtoFunID_descriptor(), name, value);
}
enum stChallegeLeitaiUser_ProtoModID {
  stChallegeLeitaiUser_ProtoModID_ModID = 6
};
bool stChallegeLeitaiUser_ProtoModID_IsValid(int value);
const stChallegeLeitaiUser_ProtoModID stChallegeLeitaiUser_ProtoModID_ProtoModID_MIN = stChallegeLeitaiUser_ProtoModID_ModID;
const stChallegeLeitaiUser_ProtoModID stChallegeLeitaiUser_ProtoModID_ProtoModID_MAX = stChallegeLeitaiUser_ProtoModID_ModID;
const int stChallegeLeitaiUser_ProtoModID_ProtoModID_ARRAYSIZE = stChallegeLeitaiUser_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUser_ProtoModID_descriptor();
inline const ::std::string& stChallegeLeitaiUser_ProtoModID_Name(stChallegeLeitaiUser_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallegeLeitaiUser_ProtoModID_descriptor(), value);
}
inline bool stChallegeLeitaiUser_ProtoModID_Parse(
    const ::std::string& name, stChallegeLeitaiUser_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallegeLeitaiUser_ProtoModID>(
    stChallegeLeitaiUser_ProtoModID_descriptor(), name, value);
}
enum stChallegeLeitaiUser_ProtoFunID {
  stChallegeLeitaiUser_ProtoFunID_FunID = 15
};
bool stChallegeLeitaiUser_ProtoFunID_IsValid(int value);
const stChallegeLeitaiUser_ProtoFunID stChallegeLeitaiUser_ProtoFunID_ProtoFunID_MIN = stChallegeLeitaiUser_ProtoFunID_FunID;
const stChallegeLeitaiUser_ProtoFunID stChallegeLeitaiUser_ProtoFunID_ProtoFunID_MAX = stChallegeLeitaiUser_ProtoFunID_FunID;
const int stChallegeLeitaiUser_ProtoFunID_ProtoFunID_ARRAYSIZE = stChallegeLeitaiUser_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUser_ProtoFunID_descriptor();
inline const ::std::string& stChallegeLeitaiUser_ProtoFunID_Name(stChallegeLeitaiUser_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallegeLeitaiUser_ProtoFunID_descriptor(), value);
}
inline bool stChallegeLeitaiUser_ProtoFunID_Parse(
    const ::std::string& name, stChallegeLeitaiUser_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallegeLeitaiUser_ProtoFunID>(
    stChallegeLeitaiUser_ProtoFunID_descriptor(), name, value);
}
enum stChallegeLeitaiUserResult_eResult {
  stChallegeLeitaiUserResult_eResult_eSuccess = 1,
  stChallegeLeitaiUserResult_eResult_eLilian_Not_Enough = 2,
  stChallegeLeitaiUserResult_eResult_eInner_Error = 3,
  stChallegeLeitaiUserResult_eResult_eLevel_Limit = 4,
  stChallegeLeitaiUserResult_eResult_eBagFull = 5
};
bool stChallegeLeitaiUserResult_eResult_IsValid(int value);
const stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult_eResult_eResult_MIN = stChallegeLeitaiUserResult_eResult_eSuccess;
const stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult_eResult_eResult_MAX = stChallegeLeitaiUserResult_eResult_eBagFull;
const int stChallegeLeitaiUserResult_eResult_eResult_ARRAYSIZE = stChallegeLeitaiUserResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUserResult_eResult_descriptor();
inline const ::std::string& stChallegeLeitaiUserResult_eResult_Name(stChallegeLeitaiUserResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallegeLeitaiUserResult_eResult_descriptor(), value);
}
inline bool stChallegeLeitaiUserResult_eResult_Parse(
    const ::std::string& name, stChallegeLeitaiUserResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallegeLeitaiUserResult_eResult>(
    stChallegeLeitaiUserResult_eResult_descriptor(), name, value);
}
enum stChallegeLeitaiUserResult_ProtoModID {
  stChallegeLeitaiUserResult_ProtoModID_ModID = 6
};
bool stChallegeLeitaiUserResult_ProtoModID_IsValid(int value);
const stChallegeLeitaiUserResult_ProtoModID stChallegeLeitaiUserResult_ProtoModID_ProtoModID_MIN = stChallegeLeitaiUserResult_ProtoModID_ModID;
const stChallegeLeitaiUserResult_ProtoModID stChallegeLeitaiUserResult_ProtoModID_ProtoModID_MAX = stChallegeLeitaiUserResult_ProtoModID_ModID;
const int stChallegeLeitaiUserResult_ProtoModID_ProtoModID_ARRAYSIZE = stChallegeLeitaiUserResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUserResult_ProtoModID_descriptor();
inline const ::std::string& stChallegeLeitaiUserResult_ProtoModID_Name(stChallegeLeitaiUserResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallegeLeitaiUserResult_ProtoModID_descriptor(), value);
}
inline bool stChallegeLeitaiUserResult_ProtoModID_Parse(
    const ::std::string& name, stChallegeLeitaiUserResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallegeLeitaiUserResult_ProtoModID>(
    stChallegeLeitaiUserResult_ProtoModID_descriptor(), name, value);
}
enum stChallegeLeitaiUserResult_ProtoFunID {
  stChallegeLeitaiUserResult_ProtoFunID_FunID = 16
};
bool stChallegeLeitaiUserResult_ProtoFunID_IsValid(int value);
const stChallegeLeitaiUserResult_ProtoFunID stChallegeLeitaiUserResult_ProtoFunID_ProtoFunID_MIN = stChallegeLeitaiUserResult_ProtoFunID_FunID;
const stChallegeLeitaiUserResult_ProtoFunID stChallegeLeitaiUserResult_ProtoFunID_ProtoFunID_MAX = stChallegeLeitaiUserResult_ProtoFunID_FunID;
const int stChallegeLeitaiUserResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stChallegeLeitaiUserResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallegeLeitaiUserResult_ProtoFunID_descriptor();
inline const ::std::string& stChallegeLeitaiUserResult_ProtoFunID_Name(stChallegeLeitaiUserResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallegeLeitaiUserResult_ProtoFunID_descriptor(), value);
}
inline bool stChallegeLeitaiUserResult_ProtoFunID_Parse(
    const ::std::string& name, stChallegeLeitaiUserResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallegeLeitaiUserResult_ProtoFunID>(
    stChallegeLeitaiUserResult_ProtoFunID_descriptor(), name, value);
}
enum stOpenLeitaiWindow_ProtoModID {
  stOpenLeitaiWindow_ProtoModID_ModID = 6
};
bool stOpenLeitaiWindow_ProtoModID_IsValid(int value);
const stOpenLeitaiWindow_ProtoModID stOpenLeitaiWindow_ProtoModID_ProtoModID_MIN = stOpenLeitaiWindow_ProtoModID_ModID;
const stOpenLeitaiWindow_ProtoModID stOpenLeitaiWindow_ProtoModID_ProtoModID_MAX = stOpenLeitaiWindow_ProtoModID_ModID;
const int stOpenLeitaiWindow_ProtoModID_ProtoModID_ARRAYSIZE = stOpenLeitaiWindow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenLeitaiWindow_ProtoModID_descriptor();
inline const ::std::string& stOpenLeitaiWindow_ProtoModID_Name(stOpenLeitaiWindow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenLeitaiWindow_ProtoModID_descriptor(), value);
}
inline bool stOpenLeitaiWindow_ProtoModID_Parse(
    const ::std::string& name, stOpenLeitaiWindow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenLeitaiWindow_ProtoModID>(
    stOpenLeitaiWindow_ProtoModID_descriptor(), name, value);
}
enum stOpenLeitaiWindow_ProtoFunID {
  stOpenLeitaiWindow_ProtoFunID_FunID = 17
};
bool stOpenLeitaiWindow_ProtoFunID_IsValid(int value);
const stOpenLeitaiWindow_ProtoFunID stOpenLeitaiWindow_ProtoFunID_ProtoFunID_MIN = stOpenLeitaiWindow_ProtoFunID_FunID;
const stOpenLeitaiWindow_ProtoFunID stOpenLeitaiWindow_ProtoFunID_ProtoFunID_MAX = stOpenLeitaiWindow_ProtoFunID_FunID;
const int stOpenLeitaiWindow_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpenLeitaiWindow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenLeitaiWindow_ProtoFunID_descriptor();
inline const ::std::string& stOpenLeitaiWindow_ProtoFunID_Name(stOpenLeitaiWindow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenLeitaiWindow_ProtoFunID_descriptor(), value);
}
inline bool stOpenLeitaiWindow_ProtoFunID_Parse(
    const ::std::string& name, stOpenLeitaiWindow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenLeitaiWindow_ProtoFunID>(
    stOpenLeitaiWindow_ProtoFunID_descriptor(), name, value);
}
enum stRetLeitaiInfo_ProtoModID {
  stRetLeitaiInfo_ProtoModID_ModID = 6
};
bool stRetLeitaiInfo_ProtoModID_IsValid(int value);
const stRetLeitaiInfo_ProtoModID stRetLeitaiInfo_ProtoModID_ProtoModID_MIN = stRetLeitaiInfo_ProtoModID_ModID;
const stRetLeitaiInfo_ProtoModID stRetLeitaiInfo_ProtoModID_ProtoModID_MAX = stRetLeitaiInfo_ProtoModID_ModID;
const int stRetLeitaiInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetLeitaiInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLeitaiInfo_ProtoModID_descriptor();
inline const ::std::string& stRetLeitaiInfo_ProtoModID_Name(stRetLeitaiInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLeitaiInfo_ProtoModID_descriptor(), value);
}
inline bool stRetLeitaiInfo_ProtoModID_Parse(
    const ::std::string& name, stRetLeitaiInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLeitaiInfo_ProtoModID>(
    stRetLeitaiInfo_ProtoModID_descriptor(), name, value);
}
enum stRetLeitaiInfo_ProtoFunID {
  stRetLeitaiInfo_ProtoFunID_FunID = 18
};
bool stRetLeitaiInfo_ProtoFunID_IsValid(int value);
const stRetLeitaiInfo_ProtoFunID stRetLeitaiInfo_ProtoFunID_ProtoFunID_MIN = stRetLeitaiInfo_ProtoFunID_FunID;
const stRetLeitaiInfo_ProtoFunID stRetLeitaiInfo_ProtoFunID_ProtoFunID_MAX = stRetLeitaiInfo_ProtoFunID_FunID;
const int stRetLeitaiInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetLeitaiInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLeitaiInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetLeitaiInfo_ProtoFunID_Name(stRetLeitaiInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLeitaiInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetLeitaiInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetLeitaiInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLeitaiInfo_ProtoFunID>(
    stRetLeitaiInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqLeitaiSortList_ProtoModID {
  stReqLeitaiSortList_ProtoModID_ModID = 6
};
bool stReqLeitaiSortList_ProtoModID_IsValid(int value);
const stReqLeitaiSortList_ProtoModID stReqLeitaiSortList_ProtoModID_ProtoModID_MIN = stReqLeitaiSortList_ProtoModID_ModID;
const stReqLeitaiSortList_ProtoModID stReqLeitaiSortList_ProtoModID_ProtoModID_MAX = stReqLeitaiSortList_ProtoModID_ModID;
const int stReqLeitaiSortList_ProtoModID_ProtoModID_ARRAYSIZE = stReqLeitaiSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeitaiSortList_ProtoModID_descriptor();
inline const ::std::string& stReqLeitaiSortList_ProtoModID_Name(stReqLeitaiSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeitaiSortList_ProtoModID_descriptor(), value);
}
inline bool stReqLeitaiSortList_ProtoModID_Parse(
    const ::std::string& name, stReqLeitaiSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeitaiSortList_ProtoModID>(
    stReqLeitaiSortList_ProtoModID_descriptor(), name, value);
}
enum stReqLeitaiSortList_ProtoFunID {
  stReqLeitaiSortList_ProtoFunID_FunID = 19
};
bool stReqLeitaiSortList_ProtoFunID_IsValid(int value);
const stReqLeitaiSortList_ProtoFunID stReqLeitaiSortList_ProtoFunID_ProtoFunID_MIN = stReqLeitaiSortList_ProtoFunID_FunID;
const stReqLeitaiSortList_ProtoFunID stReqLeitaiSortList_ProtoFunID_ProtoFunID_MAX = stReqLeitaiSortList_ProtoFunID_FunID;
const int stReqLeitaiSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLeitaiSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeitaiSortList_ProtoFunID_descriptor();
inline const ::std::string& stReqLeitaiSortList_ProtoFunID_Name(stReqLeitaiSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeitaiSortList_ProtoFunID_descriptor(), value);
}
inline bool stReqLeitaiSortList_ProtoFunID_Parse(
    const ::std::string& name, stReqLeitaiSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeitaiSortList_ProtoFunID>(
    stReqLeitaiSortList_ProtoFunID_descriptor(), name, value);
}
enum stRetLeitaiSortList_ProtoModID {
  stRetLeitaiSortList_ProtoModID_ModID = 6
};
bool stRetLeitaiSortList_ProtoModID_IsValid(int value);
const stRetLeitaiSortList_ProtoModID stRetLeitaiSortList_ProtoModID_ProtoModID_MIN = stRetLeitaiSortList_ProtoModID_ModID;
const stRetLeitaiSortList_ProtoModID stRetLeitaiSortList_ProtoModID_ProtoModID_MAX = stRetLeitaiSortList_ProtoModID_ModID;
const int stRetLeitaiSortList_ProtoModID_ProtoModID_ARRAYSIZE = stRetLeitaiSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLeitaiSortList_ProtoModID_descriptor();
inline const ::std::string& stRetLeitaiSortList_ProtoModID_Name(stRetLeitaiSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLeitaiSortList_ProtoModID_descriptor(), value);
}
inline bool stRetLeitaiSortList_ProtoModID_Parse(
    const ::std::string& name, stRetLeitaiSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLeitaiSortList_ProtoModID>(
    stRetLeitaiSortList_ProtoModID_descriptor(), name, value);
}
enum stRetLeitaiSortList_ProtoFunID {
  stRetLeitaiSortList_ProtoFunID_FunID = 20
};
bool stRetLeitaiSortList_ProtoFunID_IsValid(int value);
const stRetLeitaiSortList_ProtoFunID stRetLeitaiSortList_ProtoFunID_ProtoFunID_MIN = stRetLeitaiSortList_ProtoFunID_FunID;
const stRetLeitaiSortList_ProtoFunID stRetLeitaiSortList_ProtoFunID_ProtoFunID_MAX = stRetLeitaiSortList_ProtoFunID_FunID;
const int stRetLeitaiSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetLeitaiSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLeitaiSortList_ProtoFunID_descriptor();
inline const ::std::string& stRetLeitaiSortList_ProtoFunID_Name(stRetLeitaiSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLeitaiSortList_ProtoFunID_descriptor(), value);
}
inline bool stRetLeitaiSortList_ProtoFunID_Parse(
    const ::std::string& name, stRetLeitaiSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLeitaiSortList_ProtoFunID>(
    stRetLeitaiSortList_ProtoFunID_descriptor(), name, value);
}
enum stSendLeitaiResult_ProtoModID {
  stSendLeitaiResult_ProtoModID_ModID = 6
};
bool stSendLeitaiResult_ProtoModID_IsValid(int value);
const stSendLeitaiResult_ProtoModID stSendLeitaiResult_ProtoModID_ProtoModID_MIN = stSendLeitaiResult_ProtoModID_ModID;
const stSendLeitaiResult_ProtoModID stSendLeitaiResult_ProtoModID_ProtoModID_MAX = stSendLeitaiResult_ProtoModID_ModID;
const int stSendLeitaiResult_ProtoModID_ProtoModID_ARRAYSIZE = stSendLeitaiResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendLeitaiResult_ProtoModID_descriptor();
inline const ::std::string& stSendLeitaiResult_ProtoModID_Name(stSendLeitaiResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendLeitaiResult_ProtoModID_descriptor(), value);
}
inline bool stSendLeitaiResult_ProtoModID_Parse(
    const ::std::string& name, stSendLeitaiResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendLeitaiResult_ProtoModID>(
    stSendLeitaiResult_ProtoModID_descriptor(), name, value);
}
enum stSendLeitaiResult_ProtoFunID {
  stSendLeitaiResult_ProtoFunID_FunID = 21
};
bool stSendLeitaiResult_ProtoFunID_IsValid(int value);
const stSendLeitaiResult_ProtoFunID stSendLeitaiResult_ProtoFunID_ProtoFunID_MIN = stSendLeitaiResult_ProtoFunID_FunID;
const stSendLeitaiResult_ProtoFunID stSendLeitaiResult_ProtoFunID_ProtoFunID_MAX = stSendLeitaiResult_ProtoFunID_FunID;
const int stSendLeitaiResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendLeitaiResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendLeitaiResult_ProtoFunID_descriptor();
inline const ::std::string& stSendLeitaiResult_ProtoFunID_Name(stSendLeitaiResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendLeitaiResult_ProtoFunID_descriptor(), value);
}
inline bool stSendLeitaiResult_ProtoFunID_Parse(
    const ::std::string& name, stSendLeitaiResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendLeitaiResult_ProtoFunID>(
    stSendLeitaiResult_ProtoFunID_descriptor(), name, value);
}
enum stRetSendLeitaiResult_eResult {
  stRetSendLeitaiResult_eResult_SUCCESS = 1,
  stRetSendLeitaiResult_eResult_COND_NOT_MEET = 2,
  stRetSendLeitaiResult_eResult_INNER_ERROR = 3,
  stRetSendLeitaiResult_eResult_ROLE_LV_TOO_LOW = 4,
  stRetSendLeitaiResult_eResult_LILIAN_NOT_ENOUGH = 5
};
bool stRetSendLeitaiResult_eResult_IsValid(int value);
const stRetSendLeitaiResult_eResult stRetSendLeitaiResult_eResult_eResult_MIN = stRetSendLeitaiResult_eResult_SUCCESS;
const stRetSendLeitaiResult_eResult stRetSendLeitaiResult_eResult_eResult_MAX = stRetSendLeitaiResult_eResult_LILIAN_NOT_ENOUGH;
const int stRetSendLeitaiResult_eResult_eResult_ARRAYSIZE = stRetSendLeitaiResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetSendLeitaiResult_eResult_descriptor();
inline const ::std::string& stRetSendLeitaiResult_eResult_Name(stRetSendLeitaiResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetSendLeitaiResult_eResult_descriptor(), value);
}
inline bool stRetSendLeitaiResult_eResult_Parse(
    const ::std::string& name, stRetSendLeitaiResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetSendLeitaiResult_eResult>(
    stRetSendLeitaiResult_eResult_descriptor(), name, value);
}
enum stRetSendLeitaiResult_ProtoModID {
  stRetSendLeitaiResult_ProtoModID_ModID = 6
};
bool stRetSendLeitaiResult_ProtoModID_IsValid(int value);
const stRetSendLeitaiResult_ProtoModID stRetSendLeitaiResult_ProtoModID_ProtoModID_MIN = stRetSendLeitaiResult_ProtoModID_ModID;
const stRetSendLeitaiResult_ProtoModID stRetSendLeitaiResult_ProtoModID_ProtoModID_MAX = stRetSendLeitaiResult_ProtoModID_ModID;
const int stRetSendLeitaiResult_ProtoModID_ProtoModID_ARRAYSIZE = stRetSendLeitaiResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetSendLeitaiResult_ProtoModID_descriptor();
inline const ::std::string& stRetSendLeitaiResult_ProtoModID_Name(stRetSendLeitaiResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetSendLeitaiResult_ProtoModID_descriptor(), value);
}
inline bool stRetSendLeitaiResult_ProtoModID_Parse(
    const ::std::string& name, stRetSendLeitaiResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetSendLeitaiResult_ProtoModID>(
    stRetSendLeitaiResult_ProtoModID_descriptor(), name, value);
}
enum stRetSendLeitaiResult_ProtoFunID {
  stRetSendLeitaiResult_ProtoFunID_FunID = 22
};
bool stRetSendLeitaiResult_ProtoFunID_IsValid(int value);
const stRetSendLeitaiResult_ProtoFunID stRetSendLeitaiResult_ProtoFunID_ProtoFunID_MIN = stRetSendLeitaiResult_ProtoFunID_FunID;
const stRetSendLeitaiResult_ProtoFunID stRetSendLeitaiResult_ProtoFunID_ProtoFunID_MAX = stRetSendLeitaiResult_ProtoFunID_FunID;
const int stRetSendLeitaiResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetSendLeitaiResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetSendLeitaiResult_ProtoFunID_descriptor();
inline const ::std::string& stRetSendLeitaiResult_ProtoFunID_Name(stRetSendLeitaiResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetSendLeitaiResult_ProtoFunID_descriptor(), value);
}
inline bool stRetSendLeitaiResult_ProtoFunID_Parse(
    const ::std::string& name, stRetSendLeitaiResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetSendLeitaiResult_ProtoFunID>(
    stRetSendLeitaiResult_ProtoFunID_descriptor(), name, value);
}
enum stNotifySelectLeitaiMode_ProtoModID {
  stNotifySelectLeitaiMode_ProtoModID_ModID = 6
};
bool stNotifySelectLeitaiMode_ProtoModID_IsValid(int value);
const stNotifySelectLeitaiMode_ProtoModID stNotifySelectLeitaiMode_ProtoModID_ProtoModID_MIN = stNotifySelectLeitaiMode_ProtoModID_ModID;
const stNotifySelectLeitaiMode_ProtoModID stNotifySelectLeitaiMode_ProtoModID_ProtoModID_MAX = stNotifySelectLeitaiMode_ProtoModID_ModID;
const int stNotifySelectLeitaiMode_ProtoModID_ProtoModID_ARRAYSIZE = stNotifySelectLeitaiMode_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifySelectLeitaiMode_ProtoModID_descriptor();
inline const ::std::string& stNotifySelectLeitaiMode_ProtoModID_Name(stNotifySelectLeitaiMode_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifySelectLeitaiMode_ProtoModID_descriptor(), value);
}
inline bool stNotifySelectLeitaiMode_ProtoModID_Parse(
    const ::std::string& name, stNotifySelectLeitaiMode_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifySelectLeitaiMode_ProtoModID>(
    stNotifySelectLeitaiMode_ProtoModID_descriptor(), name, value);
}
enum stNotifySelectLeitaiMode_ProtoFunID {
  stNotifySelectLeitaiMode_ProtoFunID_FunID = 23
};
bool stNotifySelectLeitaiMode_ProtoFunID_IsValid(int value);
const stNotifySelectLeitaiMode_ProtoFunID stNotifySelectLeitaiMode_ProtoFunID_ProtoFunID_MIN = stNotifySelectLeitaiMode_ProtoFunID_FunID;
const stNotifySelectLeitaiMode_ProtoFunID stNotifySelectLeitaiMode_ProtoFunID_ProtoFunID_MAX = stNotifySelectLeitaiMode_ProtoFunID_FunID;
const int stNotifySelectLeitaiMode_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifySelectLeitaiMode_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifySelectLeitaiMode_ProtoFunID_descriptor();
inline const ::std::string& stNotifySelectLeitaiMode_ProtoFunID_Name(stNotifySelectLeitaiMode_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifySelectLeitaiMode_ProtoFunID_descriptor(), value);
}
inline bool stNotifySelectLeitaiMode_ProtoFunID_Parse(
    const ::std::string& name, stNotifySelectLeitaiMode_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifySelectLeitaiMode_ProtoFunID>(
    stNotifySelectLeitaiMode_ProtoFunID_descriptor(), name, value);
}
enum stSelectLeiTaiMode_ProtoModID {
  stSelectLeiTaiMode_ProtoModID_ModID = 6
};
bool stSelectLeiTaiMode_ProtoModID_IsValid(int value);
const stSelectLeiTaiMode_ProtoModID stSelectLeiTaiMode_ProtoModID_ProtoModID_MIN = stSelectLeiTaiMode_ProtoModID_ModID;
const stSelectLeiTaiMode_ProtoModID stSelectLeiTaiMode_ProtoModID_ProtoModID_MAX = stSelectLeiTaiMode_ProtoModID_ModID;
const int stSelectLeiTaiMode_ProtoModID_ProtoModID_ARRAYSIZE = stSelectLeiTaiMode_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSelectLeiTaiMode_ProtoModID_descriptor();
inline const ::std::string& stSelectLeiTaiMode_ProtoModID_Name(stSelectLeiTaiMode_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSelectLeiTaiMode_ProtoModID_descriptor(), value);
}
inline bool stSelectLeiTaiMode_ProtoModID_Parse(
    const ::std::string& name, stSelectLeiTaiMode_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSelectLeiTaiMode_ProtoModID>(
    stSelectLeiTaiMode_ProtoModID_descriptor(), name, value);
}
enum stSelectLeiTaiMode_ProtoFunID {
  stSelectLeiTaiMode_ProtoFunID_FunID = 24
};
bool stSelectLeiTaiMode_ProtoFunID_IsValid(int value);
const stSelectLeiTaiMode_ProtoFunID stSelectLeiTaiMode_ProtoFunID_ProtoFunID_MIN = stSelectLeiTaiMode_ProtoFunID_FunID;
const stSelectLeiTaiMode_ProtoFunID stSelectLeiTaiMode_ProtoFunID_ProtoFunID_MAX = stSelectLeiTaiMode_ProtoFunID_FunID;
const int stSelectLeiTaiMode_ProtoFunID_ProtoFunID_ARRAYSIZE = stSelectLeiTaiMode_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSelectLeiTaiMode_ProtoFunID_descriptor();
inline const ::std::string& stSelectLeiTaiMode_ProtoFunID_Name(stSelectLeiTaiMode_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSelectLeiTaiMode_ProtoFunID_descriptor(), value);
}
inline bool stSelectLeiTaiMode_ProtoFunID_Parse(
    const ::std::string& name, stSelectLeiTaiMode_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSelectLeiTaiMode_ProtoFunID>(
    stSelectLeiTaiMode_ProtoFunID_descriptor(), name, value);
}
enum stSelectLeiTaiModeResult_eResult {
  stSelectLeiTaiModeResult_eResult_eSuccess = 1,
  stSelectLeiTaiModeResult_eResult_eFail = 2
};
bool stSelectLeiTaiModeResult_eResult_IsValid(int value);
const stSelectLeiTaiModeResult_eResult stSelectLeiTaiModeResult_eResult_eResult_MIN = stSelectLeiTaiModeResult_eResult_eSuccess;
const stSelectLeiTaiModeResult_eResult stSelectLeiTaiModeResult_eResult_eResult_MAX = stSelectLeiTaiModeResult_eResult_eFail;
const int stSelectLeiTaiModeResult_eResult_eResult_ARRAYSIZE = stSelectLeiTaiModeResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSelectLeiTaiModeResult_eResult_descriptor();
inline const ::std::string& stSelectLeiTaiModeResult_eResult_Name(stSelectLeiTaiModeResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSelectLeiTaiModeResult_eResult_descriptor(), value);
}
inline bool stSelectLeiTaiModeResult_eResult_Parse(
    const ::std::string& name, stSelectLeiTaiModeResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSelectLeiTaiModeResult_eResult>(
    stSelectLeiTaiModeResult_eResult_descriptor(), name, value);
}
enum stSelectLeiTaiModeResult_ProtoModID {
  stSelectLeiTaiModeResult_ProtoModID_ModID = 6
};
bool stSelectLeiTaiModeResult_ProtoModID_IsValid(int value);
const stSelectLeiTaiModeResult_ProtoModID stSelectLeiTaiModeResult_ProtoModID_ProtoModID_MIN = stSelectLeiTaiModeResult_ProtoModID_ModID;
const stSelectLeiTaiModeResult_ProtoModID stSelectLeiTaiModeResult_ProtoModID_ProtoModID_MAX = stSelectLeiTaiModeResult_ProtoModID_ModID;
const int stSelectLeiTaiModeResult_ProtoModID_ProtoModID_ARRAYSIZE = stSelectLeiTaiModeResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSelectLeiTaiModeResult_ProtoModID_descriptor();
inline const ::std::string& stSelectLeiTaiModeResult_ProtoModID_Name(stSelectLeiTaiModeResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSelectLeiTaiModeResult_ProtoModID_descriptor(), value);
}
inline bool stSelectLeiTaiModeResult_ProtoModID_Parse(
    const ::std::string& name, stSelectLeiTaiModeResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSelectLeiTaiModeResult_ProtoModID>(
    stSelectLeiTaiModeResult_ProtoModID_descriptor(), name, value);
}
enum stSelectLeiTaiModeResult_ProtoFunID {
  stSelectLeiTaiModeResult_ProtoFunID_FunID = 25
};
bool stSelectLeiTaiModeResult_ProtoFunID_IsValid(int value);
const stSelectLeiTaiModeResult_ProtoFunID stSelectLeiTaiModeResult_ProtoFunID_ProtoFunID_MIN = stSelectLeiTaiModeResult_ProtoFunID_FunID;
const stSelectLeiTaiModeResult_ProtoFunID stSelectLeiTaiModeResult_ProtoFunID_ProtoFunID_MAX = stSelectLeiTaiModeResult_ProtoFunID_FunID;
const int stSelectLeiTaiModeResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSelectLeiTaiModeResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSelectLeiTaiModeResult_ProtoFunID_descriptor();
inline const ::std::string& stSelectLeiTaiModeResult_ProtoFunID_Name(stSelectLeiTaiModeResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSelectLeiTaiModeResult_ProtoFunID_descriptor(), value);
}
inline bool stSelectLeiTaiModeResult_ProtoFunID_Parse(
    const ::std::string& name, stSelectLeiTaiModeResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSelectLeiTaiModeResult_ProtoFunID>(
    stSelectLeiTaiModeResult_ProtoFunID_descriptor(), name, value);
}
enum stResetLeitaiInfo_ProtoModID {
  stResetLeitaiInfo_ProtoModID_ModID = 6
};
bool stResetLeitaiInfo_ProtoModID_IsValid(int value);
const stResetLeitaiInfo_ProtoModID stResetLeitaiInfo_ProtoModID_ProtoModID_MIN = stResetLeitaiInfo_ProtoModID_ModID;
const stResetLeitaiInfo_ProtoModID stResetLeitaiInfo_ProtoModID_ProtoModID_MAX = stResetLeitaiInfo_ProtoModID_ModID;
const int stResetLeitaiInfo_ProtoModID_ProtoModID_ARRAYSIZE = stResetLeitaiInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetLeitaiInfo_ProtoModID_descriptor();
inline const ::std::string& stResetLeitaiInfo_ProtoModID_Name(stResetLeitaiInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetLeitaiInfo_ProtoModID_descriptor(), value);
}
inline bool stResetLeitaiInfo_ProtoModID_Parse(
    const ::std::string& name, stResetLeitaiInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetLeitaiInfo_ProtoModID>(
    stResetLeitaiInfo_ProtoModID_descriptor(), name, value);
}
enum stResetLeitaiInfo_ProtoFunID {
  stResetLeitaiInfo_ProtoFunID_FunID = 26
};
bool stResetLeitaiInfo_ProtoFunID_IsValid(int value);
const stResetLeitaiInfo_ProtoFunID stResetLeitaiInfo_ProtoFunID_ProtoFunID_MIN = stResetLeitaiInfo_ProtoFunID_FunID;
const stResetLeitaiInfo_ProtoFunID stResetLeitaiInfo_ProtoFunID_ProtoFunID_MAX = stResetLeitaiInfo_ProtoFunID_FunID;
const int stResetLeitaiInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetLeitaiInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetLeitaiInfo_ProtoFunID_descriptor();
inline const ::std::string& stResetLeitaiInfo_ProtoFunID_Name(stResetLeitaiInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetLeitaiInfo_ProtoFunID_descriptor(), value);
}
inline bool stResetLeitaiInfo_ProtoFunID_Parse(
    const ::std::string& name, stResetLeitaiInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetLeitaiInfo_ProtoFunID>(
    stResetLeitaiInfo_ProtoFunID_descriptor(), name, value);
}
enum stResetLeitaiInfoResult_eResult {
  stResetLeitaiInfoResult_eResult_eSuccess = 1,
  stResetLeitaiInfoResult_eResult_eNot_Enough_Diamond = 2,
  stResetLeitaiInfoResult_eResult_eNot_Time_Use_Out = 3
};
bool stResetLeitaiInfoResult_eResult_IsValid(int value);
const stResetLeitaiInfoResult_eResult stResetLeitaiInfoResult_eResult_eResult_MIN = stResetLeitaiInfoResult_eResult_eSuccess;
const stResetLeitaiInfoResult_eResult stResetLeitaiInfoResult_eResult_eResult_MAX = stResetLeitaiInfoResult_eResult_eNot_Time_Use_Out;
const int stResetLeitaiInfoResult_eResult_eResult_ARRAYSIZE = stResetLeitaiInfoResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetLeitaiInfoResult_eResult_descriptor();
inline const ::std::string& stResetLeitaiInfoResult_eResult_Name(stResetLeitaiInfoResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetLeitaiInfoResult_eResult_descriptor(), value);
}
inline bool stResetLeitaiInfoResult_eResult_Parse(
    const ::std::string& name, stResetLeitaiInfoResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetLeitaiInfoResult_eResult>(
    stResetLeitaiInfoResult_eResult_descriptor(), name, value);
}
enum stResetLeitaiInfoResult_ProtoModID {
  stResetLeitaiInfoResult_ProtoModID_ModID = 6
};
bool stResetLeitaiInfoResult_ProtoModID_IsValid(int value);
const stResetLeitaiInfoResult_ProtoModID stResetLeitaiInfoResult_ProtoModID_ProtoModID_MIN = stResetLeitaiInfoResult_ProtoModID_ModID;
const stResetLeitaiInfoResult_ProtoModID stResetLeitaiInfoResult_ProtoModID_ProtoModID_MAX = stResetLeitaiInfoResult_ProtoModID_ModID;
const int stResetLeitaiInfoResult_ProtoModID_ProtoModID_ARRAYSIZE = stResetLeitaiInfoResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetLeitaiInfoResult_ProtoModID_descriptor();
inline const ::std::string& stResetLeitaiInfoResult_ProtoModID_Name(stResetLeitaiInfoResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetLeitaiInfoResult_ProtoModID_descriptor(), value);
}
inline bool stResetLeitaiInfoResult_ProtoModID_Parse(
    const ::std::string& name, stResetLeitaiInfoResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetLeitaiInfoResult_ProtoModID>(
    stResetLeitaiInfoResult_ProtoModID_descriptor(), name, value);
}
enum stResetLeitaiInfoResult_ProtoFunID {
  stResetLeitaiInfoResult_ProtoFunID_FunID = 27
};
bool stResetLeitaiInfoResult_ProtoFunID_IsValid(int value);
const stResetLeitaiInfoResult_ProtoFunID stResetLeitaiInfoResult_ProtoFunID_ProtoFunID_MIN = stResetLeitaiInfoResult_ProtoFunID_FunID;
const stResetLeitaiInfoResult_ProtoFunID stResetLeitaiInfoResult_ProtoFunID_ProtoFunID_MAX = stResetLeitaiInfoResult_ProtoFunID_FunID;
const int stResetLeitaiInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetLeitaiInfoResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetLeitaiInfoResult_ProtoFunID_descriptor();
inline const ::std::string& stResetLeitaiInfoResult_ProtoFunID_Name(stResetLeitaiInfoResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetLeitaiInfoResult_ProtoFunID_descriptor(), value);
}
inline bool stResetLeitaiInfoResult_ProtoFunID_Parse(
    const ::std::string& name, stResetLeitaiInfoResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetLeitaiInfoResult_ProtoFunID>(
    stResetLeitaiInfoResult_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawHeroSortList_ProtoModID {
  stReqDrawHeroSortList_ProtoModID_ModID = 6
};
bool stReqDrawHeroSortList_ProtoModID_IsValid(int value);
const stReqDrawHeroSortList_ProtoModID stReqDrawHeroSortList_ProtoModID_ProtoModID_MIN = stReqDrawHeroSortList_ProtoModID_ModID;
const stReqDrawHeroSortList_ProtoModID stReqDrawHeroSortList_ProtoModID_ProtoModID_MAX = stReqDrawHeroSortList_ProtoModID_ModID;
const int stReqDrawHeroSortList_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawHeroSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawHeroSortList_ProtoModID_descriptor();
inline const ::std::string& stReqDrawHeroSortList_ProtoModID_Name(stReqDrawHeroSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawHeroSortList_ProtoModID_descriptor(), value);
}
inline bool stReqDrawHeroSortList_ProtoModID_Parse(
    const ::std::string& name, stReqDrawHeroSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawHeroSortList_ProtoModID>(
    stReqDrawHeroSortList_ProtoModID_descriptor(), name, value);
}
enum stReqDrawHeroSortList_ProtoFunID {
  stReqDrawHeroSortList_ProtoFunID_FunID = 28
};
bool stReqDrawHeroSortList_ProtoFunID_IsValid(int value);
const stReqDrawHeroSortList_ProtoFunID stReqDrawHeroSortList_ProtoFunID_ProtoFunID_MIN = stReqDrawHeroSortList_ProtoFunID_FunID;
const stReqDrawHeroSortList_ProtoFunID stReqDrawHeroSortList_ProtoFunID_ProtoFunID_MAX = stReqDrawHeroSortList_ProtoFunID_FunID;
const int stReqDrawHeroSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawHeroSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawHeroSortList_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawHeroSortList_ProtoFunID_Name(stReqDrawHeroSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawHeroSortList_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawHeroSortList_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawHeroSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawHeroSortList_ProtoFunID>(
    stReqDrawHeroSortList_ProtoFunID_descriptor(), name, value);
}
enum stDrawHeroSortList_ProtoModID {
  stDrawHeroSortList_ProtoModID_ModID = 6
};
bool stDrawHeroSortList_ProtoModID_IsValid(int value);
const stDrawHeroSortList_ProtoModID stDrawHeroSortList_ProtoModID_ProtoModID_MIN = stDrawHeroSortList_ProtoModID_ModID;
const stDrawHeroSortList_ProtoModID stDrawHeroSortList_ProtoModID_ProtoModID_MAX = stDrawHeroSortList_ProtoModID_ModID;
const int stDrawHeroSortList_ProtoModID_ProtoModID_ARRAYSIZE = stDrawHeroSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroSortList_ProtoModID_descriptor();
inline const ::std::string& stDrawHeroSortList_ProtoModID_Name(stDrawHeroSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroSortList_ProtoModID_descriptor(), value);
}
inline bool stDrawHeroSortList_ProtoModID_Parse(
    const ::std::string& name, stDrawHeroSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroSortList_ProtoModID>(
    stDrawHeroSortList_ProtoModID_descriptor(), name, value);
}
enum stDrawHeroSortList_ProtoFunID {
  stDrawHeroSortList_ProtoFunID_FunID = 29
};
bool stDrawHeroSortList_ProtoFunID_IsValid(int value);
const stDrawHeroSortList_ProtoFunID stDrawHeroSortList_ProtoFunID_ProtoFunID_MIN = stDrawHeroSortList_ProtoFunID_FunID;
const stDrawHeroSortList_ProtoFunID stDrawHeroSortList_ProtoFunID_ProtoFunID_MAX = stDrawHeroSortList_ProtoFunID_FunID;
const int stDrawHeroSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stDrawHeroSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDrawHeroSortList_ProtoFunID_descriptor();
inline const ::std::string& stDrawHeroSortList_ProtoFunID_Name(stDrawHeroSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDrawHeroSortList_ProtoFunID_descriptor(), value);
}
inline bool stDrawHeroSortList_ProtoFunID_Parse(
    const ::std::string& name, stDrawHeroSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDrawHeroSortList_ProtoFunID>(
    stDrawHeroSortList_ProtoFunID_descriptor(), name, value);
}
enum stReqOne2OnePVPMatch_ProtoModID {
  stReqOne2OnePVPMatch_ProtoModID_ModID = 6
};
bool stReqOne2OnePVPMatch_ProtoModID_IsValid(int value);
const stReqOne2OnePVPMatch_ProtoModID stReqOne2OnePVPMatch_ProtoModID_ProtoModID_MIN = stReqOne2OnePVPMatch_ProtoModID_ModID;
const stReqOne2OnePVPMatch_ProtoModID stReqOne2OnePVPMatch_ProtoModID_ProtoModID_MAX = stReqOne2OnePVPMatch_ProtoModID_ModID;
const int stReqOne2OnePVPMatch_ProtoModID_ProtoModID_ARRAYSIZE = stReqOne2OnePVPMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPMatch_ProtoModID_descriptor();
inline const ::std::string& stReqOne2OnePVPMatch_ProtoModID_Name(stReqOne2OnePVPMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOne2OnePVPMatch_ProtoModID_descriptor(), value);
}
inline bool stReqOne2OnePVPMatch_ProtoModID_Parse(
    const ::std::string& name, stReqOne2OnePVPMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOne2OnePVPMatch_ProtoModID>(
    stReqOne2OnePVPMatch_ProtoModID_descriptor(), name, value);
}
enum stReqOne2OnePVPMatch_ProtoFunID {
  stReqOne2OnePVPMatch_ProtoFunID_FunID = 30
};
bool stReqOne2OnePVPMatch_ProtoFunID_IsValid(int value);
const stReqOne2OnePVPMatch_ProtoFunID stReqOne2OnePVPMatch_ProtoFunID_ProtoFunID_MIN = stReqOne2OnePVPMatch_ProtoFunID_FunID;
const stReqOne2OnePVPMatch_ProtoFunID stReqOne2OnePVPMatch_ProtoFunID_ProtoFunID_MAX = stReqOne2OnePVPMatch_ProtoFunID_FunID;
const int stReqOne2OnePVPMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOne2OnePVPMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOne2OnePVPMatch_ProtoFunID_descriptor();
inline const ::std::string& stReqOne2OnePVPMatch_ProtoFunID_Name(stReqOne2OnePVPMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOne2OnePVPMatch_ProtoFunID_descriptor(), value);
}
inline bool stReqOne2OnePVPMatch_ProtoFunID_Parse(
    const ::std::string& name, stReqOne2OnePVPMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOne2OnePVPMatch_ProtoFunID>(
    stReqOne2OnePVPMatch_ProtoFunID_descriptor(), name, value);
}
enum stOne2OnePVPMatchResult_eResult {
  stOne2OnePVPMatchResult_eResult_eSucess = 1,
  stOne2OnePVPMatchResult_eResult_eWait = 2,
  stOne2OnePVPMatchResult_eResult_eFail = 3,
  stOne2OnePVPMatchResult_eResult_eNot_In_Time = 4,
  stOne2OnePVPMatchResult_eResult_eEquip = 5
};
bool stOne2OnePVPMatchResult_eResult_IsValid(int value);
const stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult_eResult_eResult_MIN = stOne2OnePVPMatchResult_eResult_eSucess;
const stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult_eResult_eResult_MAX = stOne2OnePVPMatchResult_eResult_eEquip;
const int stOne2OnePVPMatchResult_eResult_eResult_ARRAYSIZE = stOne2OnePVPMatchResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPMatchResult_eResult_descriptor();
inline const ::std::string& stOne2OnePVPMatchResult_eResult_Name(stOne2OnePVPMatchResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPMatchResult_eResult_descriptor(), value);
}
inline bool stOne2OnePVPMatchResult_eResult_Parse(
    const ::std::string& name, stOne2OnePVPMatchResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPMatchResult_eResult>(
    stOne2OnePVPMatchResult_eResult_descriptor(), name, value);
}
enum stOne2OnePVPMatchResult_ProtoModID {
  stOne2OnePVPMatchResult_ProtoModID_ModID = 6
};
bool stOne2OnePVPMatchResult_ProtoModID_IsValid(int value);
const stOne2OnePVPMatchResult_ProtoModID stOne2OnePVPMatchResult_ProtoModID_ProtoModID_MIN = stOne2OnePVPMatchResult_ProtoModID_ModID;
const stOne2OnePVPMatchResult_ProtoModID stOne2OnePVPMatchResult_ProtoModID_ProtoModID_MAX = stOne2OnePVPMatchResult_ProtoModID_ModID;
const int stOne2OnePVPMatchResult_ProtoModID_ProtoModID_ARRAYSIZE = stOne2OnePVPMatchResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPMatchResult_ProtoModID_descriptor();
inline const ::std::string& stOne2OnePVPMatchResult_ProtoModID_Name(stOne2OnePVPMatchResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPMatchResult_ProtoModID_descriptor(), value);
}
inline bool stOne2OnePVPMatchResult_ProtoModID_Parse(
    const ::std::string& name, stOne2OnePVPMatchResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPMatchResult_ProtoModID>(
    stOne2OnePVPMatchResult_ProtoModID_descriptor(), name, value);
}
enum stOne2OnePVPMatchResult_ProtoFunID {
  stOne2OnePVPMatchResult_ProtoFunID_FunID = 31
};
bool stOne2OnePVPMatchResult_ProtoFunID_IsValid(int value);
const stOne2OnePVPMatchResult_ProtoFunID stOne2OnePVPMatchResult_ProtoFunID_ProtoFunID_MIN = stOne2OnePVPMatchResult_ProtoFunID_FunID;
const stOne2OnePVPMatchResult_ProtoFunID stOne2OnePVPMatchResult_ProtoFunID_ProtoFunID_MAX = stOne2OnePVPMatchResult_ProtoFunID_FunID;
const int stOne2OnePVPMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stOne2OnePVPMatchResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPMatchResult_ProtoFunID_descriptor();
inline const ::std::string& stOne2OnePVPMatchResult_ProtoFunID_Name(stOne2OnePVPMatchResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPMatchResult_ProtoFunID_descriptor(), value);
}
inline bool stOne2OnePVPMatchResult_ProtoFunID_Parse(
    const ::std::string& name, stOne2OnePVPMatchResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPMatchResult_ProtoFunID>(
    stOne2OnePVPMatchResult_ProtoFunID_descriptor(), name, value);
}
enum stCancelOne2OnePVPMatch_ProtoModID {
  stCancelOne2OnePVPMatch_ProtoModID_ModID = 6
};
bool stCancelOne2OnePVPMatch_ProtoModID_IsValid(int value);
const stCancelOne2OnePVPMatch_ProtoModID stCancelOne2OnePVPMatch_ProtoModID_ProtoModID_MIN = stCancelOne2OnePVPMatch_ProtoModID_ModID;
const stCancelOne2OnePVPMatch_ProtoModID stCancelOne2OnePVPMatch_ProtoModID_ProtoModID_MAX = stCancelOne2OnePVPMatch_ProtoModID_ModID;
const int stCancelOne2OnePVPMatch_ProtoModID_ProtoModID_ARRAYSIZE = stCancelOne2OnePVPMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPMatch_ProtoModID_descriptor();
inline const ::std::string& stCancelOne2OnePVPMatch_ProtoModID_Name(stCancelOne2OnePVPMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelOne2OnePVPMatch_ProtoModID_descriptor(), value);
}
inline bool stCancelOne2OnePVPMatch_ProtoModID_Parse(
    const ::std::string& name, stCancelOne2OnePVPMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelOne2OnePVPMatch_ProtoModID>(
    stCancelOne2OnePVPMatch_ProtoModID_descriptor(), name, value);
}
enum stCancelOne2OnePVPMatch_ProtoFunID {
  stCancelOne2OnePVPMatch_ProtoFunID_FunID = 32
};
bool stCancelOne2OnePVPMatch_ProtoFunID_IsValid(int value);
const stCancelOne2OnePVPMatch_ProtoFunID stCancelOne2OnePVPMatch_ProtoFunID_ProtoFunID_MIN = stCancelOne2OnePVPMatch_ProtoFunID_FunID;
const stCancelOne2OnePVPMatch_ProtoFunID stCancelOne2OnePVPMatch_ProtoFunID_ProtoFunID_MAX = stCancelOne2OnePVPMatch_ProtoFunID_FunID;
const int stCancelOne2OnePVPMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelOne2OnePVPMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPMatch_ProtoFunID_descriptor();
inline const ::std::string& stCancelOne2OnePVPMatch_ProtoFunID_Name(stCancelOne2OnePVPMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelOne2OnePVPMatch_ProtoFunID_descriptor(), value);
}
inline bool stCancelOne2OnePVPMatch_ProtoFunID_Parse(
    const ::std::string& name, stCancelOne2OnePVPMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelOne2OnePVPMatch_ProtoFunID>(
    stCancelOne2OnePVPMatch_ProtoFunID_descriptor(), name, value);
}
enum stCancelOne2OnePVPResult_eResult {
  stCancelOne2OnePVPResult_eResult_eSuccess = 1,
  stCancelOne2OnePVPResult_eResult_eFail = 2
};
bool stCancelOne2OnePVPResult_eResult_IsValid(int value);
const stCancelOne2OnePVPResult_eResult stCancelOne2OnePVPResult_eResult_eResult_MIN = stCancelOne2OnePVPResult_eResult_eSuccess;
const stCancelOne2OnePVPResult_eResult stCancelOne2OnePVPResult_eResult_eResult_MAX = stCancelOne2OnePVPResult_eResult_eFail;
const int stCancelOne2OnePVPResult_eResult_eResult_ARRAYSIZE = stCancelOne2OnePVPResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPResult_eResult_descriptor();
inline const ::std::string& stCancelOne2OnePVPResult_eResult_Name(stCancelOne2OnePVPResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelOne2OnePVPResult_eResult_descriptor(), value);
}
inline bool stCancelOne2OnePVPResult_eResult_Parse(
    const ::std::string& name, stCancelOne2OnePVPResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelOne2OnePVPResult_eResult>(
    stCancelOne2OnePVPResult_eResult_descriptor(), name, value);
}
enum stCancelOne2OnePVPResult_ProtoModID {
  stCancelOne2OnePVPResult_ProtoModID_ModID = 6
};
bool stCancelOne2OnePVPResult_ProtoModID_IsValid(int value);
const stCancelOne2OnePVPResult_ProtoModID stCancelOne2OnePVPResult_ProtoModID_ProtoModID_MIN = stCancelOne2OnePVPResult_ProtoModID_ModID;
const stCancelOne2OnePVPResult_ProtoModID stCancelOne2OnePVPResult_ProtoModID_ProtoModID_MAX = stCancelOne2OnePVPResult_ProtoModID_ModID;
const int stCancelOne2OnePVPResult_ProtoModID_ProtoModID_ARRAYSIZE = stCancelOne2OnePVPResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPResult_ProtoModID_descriptor();
inline const ::std::string& stCancelOne2OnePVPResult_ProtoModID_Name(stCancelOne2OnePVPResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelOne2OnePVPResult_ProtoModID_descriptor(), value);
}
inline bool stCancelOne2OnePVPResult_ProtoModID_Parse(
    const ::std::string& name, stCancelOne2OnePVPResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelOne2OnePVPResult_ProtoModID>(
    stCancelOne2OnePVPResult_ProtoModID_descriptor(), name, value);
}
enum stCancelOne2OnePVPResult_ProtoFunID {
  stCancelOne2OnePVPResult_ProtoFunID_FunID = 33
};
bool stCancelOne2OnePVPResult_ProtoFunID_IsValid(int value);
const stCancelOne2OnePVPResult_ProtoFunID stCancelOne2OnePVPResult_ProtoFunID_ProtoFunID_MIN = stCancelOne2OnePVPResult_ProtoFunID_FunID;
const stCancelOne2OnePVPResult_ProtoFunID stCancelOne2OnePVPResult_ProtoFunID_ProtoFunID_MAX = stCancelOne2OnePVPResult_ProtoFunID_FunID;
const int stCancelOne2OnePVPResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelOne2OnePVPResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelOne2OnePVPResult_ProtoFunID_descriptor();
inline const ::std::string& stCancelOne2OnePVPResult_ProtoFunID_Name(stCancelOne2OnePVPResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelOne2OnePVPResult_ProtoFunID_descriptor(), value);
}
inline bool stCancelOne2OnePVPResult_ProtoFunID_Parse(
    const ::std::string& name, stCancelOne2OnePVPResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelOne2OnePVPResult_ProtoFunID>(
    stCancelOne2OnePVPResult_ProtoFunID_descriptor(), name, value);
}
enum stReqMySortListInfo_ProtoModID {
  stReqMySortListInfo_ProtoModID_ModID = 6
};
bool stReqMySortListInfo_ProtoModID_IsValid(int value);
const stReqMySortListInfo_ProtoModID stReqMySortListInfo_ProtoModID_ProtoModID_MIN = stReqMySortListInfo_ProtoModID_ModID;
const stReqMySortListInfo_ProtoModID stReqMySortListInfo_ProtoModID_ProtoModID_MAX = stReqMySortListInfo_ProtoModID_ModID;
const int stReqMySortListInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqMySortListInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMySortListInfo_ProtoModID_descriptor();
inline const ::std::string& stReqMySortListInfo_ProtoModID_Name(stReqMySortListInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMySortListInfo_ProtoModID_descriptor(), value);
}
inline bool stReqMySortListInfo_ProtoModID_Parse(
    const ::std::string& name, stReqMySortListInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMySortListInfo_ProtoModID>(
    stReqMySortListInfo_ProtoModID_descriptor(), name, value);
}
enum stReqMySortListInfo_ProtoFunID {
  stReqMySortListInfo_ProtoFunID_FunID = 34
};
bool stReqMySortListInfo_ProtoFunID_IsValid(int value);
const stReqMySortListInfo_ProtoFunID stReqMySortListInfo_ProtoFunID_ProtoFunID_MIN = stReqMySortListInfo_ProtoFunID_FunID;
const stReqMySortListInfo_ProtoFunID stReqMySortListInfo_ProtoFunID_ProtoFunID_MAX = stReqMySortListInfo_ProtoFunID_FunID;
const int stReqMySortListInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqMySortListInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMySortListInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqMySortListInfo_ProtoFunID_Name(stReqMySortListInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMySortListInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqMySortListInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqMySortListInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMySortListInfo_ProtoFunID>(
    stReqMySortListInfo_ProtoFunID_descriptor(), name, value);
}
enum stRetMySortListInfo_ProtoModID {
  stRetMySortListInfo_ProtoModID_ModID = 6
};
bool stRetMySortListInfo_ProtoModID_IsValid(int value);
const stRetMySortListInfo_ProtoModID stRetMySortListInfo_ProtoModID_ProtoModID_MIN = stRetMySortListInfo_ProtoModID_ModID;
const stRetMySortListInfo_ProtoModID stRetMySortListInfo_ProtoModID_ProtoModID_MAX = stRetMySortListInfo_ProtoModID_ModID;
const int stRetMySortListInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetMySortListInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetMySortListInfo_ProtoModID_descriptor();
inline const ::std::string& stRetMySortListInfo_ProtoModID_Name(stRetMySortListInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetMySortListInfo_ProtoModID_descriptor(), value);
}
inline bool stRetMySortListInfo_ProtoModID_Parse(
    const ::std::string& name, stRetMySortListInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetMySortListInfo_ProtoModID>(
    stRetMySortListInfo_ProtoModID_descriptor(), name, value);
}
enum stRetMySortListInfo_ProtoFunID {
  stRetMySortListInfo_ProtoFunID_FunID = 35
};
bool stRetMySortListInfo_ProtoFunID_IsValid(int value);
const stRetMySortListInfo_ProtoFunID stRetMySortListInfo_ProtoFunID_ProtoFunID_MIN = stRetMySortListInfo_ProtoFunID_FunID;
const stRetMySortListInfo_ProtoFunID stRetMySortListInfo_ProtoFunID_ProtoFunID_MAX = stRetMySortListInfo_ProtoFunID_FunID;
const int stRetMySortListInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetMySortListInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetMySortListInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetMySortListInfo_ProtoFunID_Name(stRetMySortListInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetMySortListInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetMySortListInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetMySortListInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetMySortListInfo_ProtoFunID>(
    stRetMySortListInfo_ProtoFunID_descriptor(), name, value);
}
enum stLeitaiMoveHero2BattlePos_ProtoModID {
  stLeitaiMoveHero2BattlePos_ProtoModID_ModID = 6
};
bool stLeitaiMoveHero2BattlePos_ProtoModID_IsValid(int value);
const stLeitaiMoveHero2BattlePos_ProtoModID stLeitaiMoveHero2BattlePos_ProtoModID_ProtoModID_MIN = stLeitaiMoveHero2BattlePos_ProtoModID_ModID;
const stLeitaiMoveHero2BattlePos_ProtoModID stLeitaiMoveHero2BattlePos_ProtoModID_ProtoModID_MAX = stLeitaiMoveHero2BattlePos_ProtoModID_ModID;
const int stLeitaiMoveHero2BattlePos_ProtoModID_ProtoModID_ARRAYSIZE = stLeitaiMoveHero2BattlePos_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePos_ProtoModID_descriptor();
inline const ::std::string& stLeitaiMoveHero2BattlePos_ProtoModID_Name(stLeitaiMoveHero2BattlePos_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiMoveHero2BattlePos_ProtoModID_descriptor(), value);
}
inline bool stLeitaiMoveHero2BattlePos_ProtoModID_Parse(
    const ::std::string& name, stLeitaiMoveHero2BattlePos_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiMoveHero2BattlePos_ProtoModID>(
    stLeitaiMoveHero2BattlePos_ProtoModID_descriptor(), name, value);
}
enum stLeitaiMoveHero2BattlePos_ProtoFunID {
  stLeitaiMoveHero2BattlePos_ProtoFunID_FunID = 36
};
bool stLeitaiMoveHero2BattlePos_ProtoFunID_IsValid(int value);
const stLeitaiMoveHero2BattlePos_ProtoFunID stLeitaiMoveHero2BattlePos_ProtoFunID_ProtoFunID_MIN = stLeitaiMoveHero2BattlePos_ProtoFunID_FunID;
const stLeitaiMoveHero2BattlePos_ProtoFunID stLeitaiMoveHero2BattlePos_ProtoFunID_ProtoFunID_MAX = stLeitaiMoveHero2BattlePos_ProtoFunID_FunID;
const int stLeitaiMoveHero2BattlePos_ProtoFunID_ProtoFunID_ARRAYSIZE = stLeitaiMoveHero2BattlePos_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePos_ProtoFunID_descriptor();
inline const ::std::string& stLeitaiMoveHero2BattlePos_ProtoFunID_Name(stLeitaiMoveHero2BattlePos_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiMoveHero2BattlePos_ProtoFunID_descriptor(), value);
}
inline bool stLeitaiMoveHero2BattlePos_ProtoFunID_Parse(
    const ::std::string& name, stLeitaiMoveHero2BattlePos_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiMoveHero2BattlePos_ProtoFunID>(
    stLeitaiMoveHero2BattlePos_ProtoFunID_descriptor(), name, value);
}
enum stLeitaiMoveHero2BattlePosError_eResult {
  stLeitaiMoveHero2BattlePosError_eResult_eSend_Msg_Param_Error = 1,
  stLeitaiMoveHero2BattlePosError_eResult_ePos_The_Same = 2
};
bool stLeitaiMoveHero2BattlePosError_eResult_IsValid(int value);
const stLeitaiMoveHero2BattlePosError_eResult stLeitaiMoveHero2BattlePosError_eResult_eResult_MIN = stLeitaiMoveHero2BattlePosError_eResult_eSend_Msg_Param_Error;
const stLeitaiMoveHero2BattlePosError_eResult stLeitaiMoveHero2BattlePosError_eResult_eResult_MAX = stLeitaiMoveHero2BattlePosError_eResult_ePos_The_Same;
const int stLeitaiMoveHero2BattlePosError_eResult_eResult_ARRAYSIZE = stLeitaiMoveHero2BattlePosError_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePosError_eResult_descriptor();
inline const ::std::string& stLeitaiMoveHero2BattlePosError_eResult_Name(stLeitaiMoveHero2BattlePosError_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiMoveHero2BattlePosError_eResult_descriptor(), value);
}
inline bool stLeitaiMoveHero2BattlePosError_eResult_Parse(
    const ::std::string& name, stLeitaiMoveHero2BattlePosError_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiMoveHero2BattlePosError_eResult>(
    stLeitaiMoveHero2BattlePosError_eResult_descriptor(), name, value);
}
enum stLeitaiMoveHero2BattlePosError_ProtoModID {
  stLeitaiMoveHero2BattlePosError_ProtoModID_ModID = 6
};
bool stLeitaiMoveHero2BattlePosError_ProtoModID_IsValid(int value);
const stLeitaiMoveHero2BattlePosError_ProtoModID stLeitaiMoveHero2BattlePosError_ProtoModID_ProtoModID_MIN = stLeitaiMoveHero2BattlePosError_ProtoModID_ModID;
const stLeitaiMoveHero2BattlePosError_ProtoModID stLeitaiMoveHero2BattlePosError_ProtoModID_ProtoModID_MAX = stLeitaiMoveHero2BattlePosError_ProtoModID_ModID;
const int stLeitaiMoveHero2BattlePosError_ProtoModID_ProtoModID_ARRAYSIZE = stLeitaiMoveHero2BattlePosError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePosError_ProtoModID_descriptor();
inline const ::std::string& stLeitaiMoveHero2BattlePosError_ProtoModID_Name(stLeitaiMoveHero2BattlePosError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiMoveHero2BattlePosError_ProtoModID_descriptor(), value);
}
inline bool stLeitaiMoveHero2BattlePosError_ProtoModID_Parse(
    const ::std::string& name, stLeitaiMoveHero2BattlePosError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiMoveHero2BattlePosError_ProtoModID>(
    stLeitaiMoveHero2BattlePosError_ProtoModID_descriptor(), name, value);
}
enum stLeitaiMoveHero2BattlePosError_ProtoFunID {
  stLeitaiMoveHero2BattlePosError_ProtoFunID_FunID = 37
};
bool stLeitaiMoveHero2BattlePosError_ProtoFunID_IsValid(int value);
const stLeitaiMoveHero2BattlePosError_ProtoFunID stLeitaiMoveHero2BattlePosError_ProtoFunID_ProtoFunID_MIN = stLeitaiMoveHero2BattlePosError_ProtoFunID_FunID;
const stLeitaiMoveHero2BattlePosError_ProtoFunID stLeitaiMoveHero2BattlePosError_ProtoFunID_ProtoFunID_MAX = stLeitaiMoveHero2BattlePosError_ProtoFunID_FunID;
const int stLeitaiMoveHero2BattlePosError_ProtoFunID_ProtoFunID_ARRAYSIZE = stLeitaiMoveHero2BattlePosError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiMoveHero2BattlePosError_ProtoFunID_descriptor();
inline const ::std::string& stLeitaiMoveHero2BattlePosError_ProtoFunID_Name(stLeitaiMoveHero2BattlePosError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiMoveHero2BattlePosError_ProtoFunID_descriptor(), value);
}
inline bool stLeitaiMoveHero2BattlePosError_ProtoFunID_Parse(
    const ::std::string& name, stLeitaiMoveHero2BattlePosError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiMoveHero2BattlePosError_ProtoFunID>(
    stLeitaiMoveHero2BattlePosError_ProtoFunID_descriptor(), name, value);
}
enum stLeitaiCancelGoOutForBattle_ProtoModID {
  stLeitaiCancelGoOutForBattle_ProtoModID_ModID = 6
};
bool stLeitaiCancelGoOutForBattle_ProtoModID_IsValid(int value);
const stLeitaiCancelGoOutForBattle_ProtoModID stLeitaiCancelGoOutForBattle_ProtoModID_ProtoModID_MIN = stLeitaiCancelGoOutForBattle_ProtoModID_ModID;
const stLeitaiCancelGoOutForBattle_ProtoModID stLeitaiCancelGoOutForBattle_ProtoModID_ProtoModID_MAX = stLeitaiCancelGoOutForBattle_ProtoModID_ModID;
const int stLeitaiCancelGoOutForBattle_ProtoModID_ProtoModID_ARRAYSIZE = stLeitaiCancelGoOutForBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattle_ProtoModID_descriptor();
inline const ::std::string& stLeitaiCancelGoOutForBattle_ProtoModID_Name(stLeitaiCancelGoOutForBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiCancelGoOutForBattle_ProtoModID_descriptor(), value);
}
inline bool stLeitaiCancelGoOutForBattle_ProtoModID_Parse(
    const ::std::string& name, stLeitaiCancelGoOutForBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiCancelGoOutForBattle_ProtoModID>(
    stLeitaiCancelGoOutForBattle_ProtoModID_descriptor(), name, value);
}
enum stLeitaiCancelGoOutForBattle_ProtoFunID {
  stLeitaiCancelGoOutForBattle_ProtoFunID_FunID = 38
};
bool stLeitaiCancelGoOutForBattle_ProtoFunID_IsValid(int value);
const stLeitaiCancelGoOutForBattle_ProtoFunID stLeitaiCancelGoOutForBattle_ProtoFunID_ProtoFunID_MIN = stLeitaiCancelGoOutForBattle_ProtoFunID_FunID;
const stLeitaiCancelGoOutForBattle_ProtoFunID stLeitaiCancelGoOutForBattle_ProtoFunID_ProtoFunID_MAX = stLeitaiCancelGoOutForBattle_ProtoFunID_FunID;
const int stLeitaiCancelGoOutForBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stLeitaiCancelGoOutForBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattle_ProtoFunID_descriptor();
inline const ::std::string& stLeitaiCancelGoOutForBattle_ProtoFunID_Name(stLeitaiCancelGoOutForBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiCancelGoOutForBattle_ProtoFunID_descriptor(), value);
}
inline bool stLeitaiCancelGoOutForBattle_ProtoFunID_Parse(
    const ::std::string& name, stLeitaiCancelGoOutForBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiCancelGoOutForBattle_ProtoFunID>(
    stLeitaiCancelGoOutForBattle_ProtoFunID_descriptor(), name, value);
}
enum stLeitaiCancelGoOutForBattleResult_eResult {
  stLeitaiCancelGoOutForBattleResult_eResult_sSUCCESS = 1,
  stLeitaiCancelGoOutForBattleResult_eResult_eHAS_NO_HERO_IN_THE_POS = 2
};
bool stLeitaiCancelGoOutForBattleResult_eResult_IsValid(int value);
const stLeitaiCancelGoOutForBattleResult_eResult stLeitaiCancelGoOutForBattleResult_eResult_eResult_MIN = stLeitaiCancelGoOutForBattleResult_eResult_sSUCCESS;
const stLeitaiCancelGoOutForBattleResult_eResult stLeitaiCancelGoOutForBattleResult_eResult_eResult_MAX = stLeitaiCancelGoOutForBattleResult_eResult_eHAS_NO_HERO_IN_THE_POS;
const int stLeitaiCancelGoOutForBattleResult_eResult_eResult_ARRAYSIZE = stLeitaiCancelGoOutForBattleResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattleResult_eResult_descriptor();
inline const ::std::string& stLeitaiCancelGoOutForBattleResult_eResult_Name(stLeitaiCancelGoOutForBattleResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiCancelGoOutForBattleResult_eResult_descriptor(), value);
}
inline bool stLeitaiCancelGoOutForBattleResult_eResult_Parse(
    const ::std::string& name, stLeitaiCancelGoOutForBattleResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiCancelGoOutForBattleResult_eResult>(
    stLeitaiCancelGoOutForBattleResult_eResult_descriptor(), name, value);
}
enum stLeitaiCancelGoOutForBattleResult_ProtoModID {
  stLeitaiCancelGoOutForBattleResult_ProtoModID_ModID = 6
};
bool stLeitaiCancelGoOutForBattleResult_ProtoModID_IsValid(int value);
const stLeitaiCancelGoOutForBattleResult_ProtoModID stLeitaiCancelGoOutForBattleResult_ProtoModID_ProtoModID_MIN = stLeitaiCancelGoOutForBattleResult_ProtoModID_ModID;
const stLeitaiCancelGoOutForBattleResult_ProtoModID stLeitaiCancelGoOutForBattleResult_ProtoModID_ProtoModID_MAX = stLeitaiCancelGoOutForBattleResult_ProtoModID_ModID;
const int stLeitaiCancelGoOutForBattleResult_ProtoModID_ProtoModID_ARRAYSIZE = stLeitaiCancelGoOutForBattleResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattleResult_ProtoModID_descriptor();
inline const ::std::string& stLeitaiCancelGoOutForBattleResult_ProtoModID_Name(stLeitaiCancelGoOutForBattleResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiCancelGoOutForBattleResult_ProtoModID_descriptor(), value);
}
inline bool stLeitaiCancelGoOutForBattleResult_ProtoModID_Parse(
    const ::std::string& name, stLeitaiCancelGoOutForBattleResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiCancelGoOutForBattleResult_ProtoModID>(
    stLeitaiCancelGoOutForBattleResult_ProtoModID_descriptor(), name, value);
}
enum stLeitaiCancelGoOutForBattleResult_ProtoFunID {
  stLeitaiCancelGoOutForBattleResult_ProtoFunID_FunID = 39
};
bool stLeitaiCancelGoOutForBattleResult_ProtoFunID_IsValid(int value);
const stLeitaiCancelGoOutForBattleResult_ProtoFunID stLeitaiCancelGoOutForBattleResult_ProtoFunID_ProtoFunID_MIN = stLeitaiCancelGoOutForBattleResult_ProtoFunID_FunID;
const stLeitaiCancelGoOutForBattleResult_ProtoFunID stLeitaiCancelGoOutForBattleResult_ProtoFunID_ProtoFunID_MAX = stLeitaiCancelGoOutForBattleResult_ProtoFunID_FunID;
const int stLeitaiCancelGoOutForBattleResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLeitaiCancelGoOutForBattleResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiCancelGoOutForBattleResult_ProtoFunID_descriptor();
inline const ::std::string& stLeitaiCancelGoOutForBattleResult_ProtoFunID_Name(stLeitaiCancelGoOutForBattleResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiCancelGoOutForBattleResult_ProtoFunID_descriptor(), value);
}
inline bool stLeitaiCancelGoOutForBattleResult_ProtoFunID_Parse(
    const ::std::string& name, stLeitaiCancelGoOutForBattleResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiCancelGoOutForBattleResult_ProtoFunID>(
    stLeitaiCancelGoOutForBattleResult_ProtoFunID_descriptor(), name, value);
}
enum stCommitArenaResult_ProtoModID {
  stCommitArenaResult_ProtoModID_ModID = 6
};
bool stCommitArenaResult_ProtoModID_IsValid(int value);
const stCommitArenaResult_ProtoModID stCommitArenaResult_ProtoModID_ProtoModID_MIN = stCommitArenaResult_ProtoModID_ModID;
const stCommitArenaResult_ProtoModID stCommitArenaResult_ProtoModID_ProtoModID_MAX = stCommitArenaResult_ProtoModID_ModID;
const int stCommitArenaResult_ProtoModID_ProtoModID_ARRAYSIZE = stCommitArenaResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCommitArenaResult_ProtoModID_descriptor();
inline const ::std::string& stCommitArenaResult_ProtoModID_Name(stCommitArenaResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCommitArenaResult_ProtoModID_descriptor(), value);
}
inline bool stCommitArenaResult_ProtoModID_Parse(
    const ::std::string& name, stCommitArenaResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCommitArenaResult_ProtoModID>(
    stCommitArenaResult_ProtoModID_descriptor(), name, value);
}
enum stCommitArenaResult_ProtoFunID {
  stCommitArenaResult_ProtoFunID_FunID = 40
};
bool stCommitArenaResult_ProtoFunID_IsValid(int value);
const stCommitArenaResult_ProtoFunID stCommitArenaResult_ProtoFunID_ProtoFunID_MIN = stCommitArenaResult_ProtoFunID_FunID;
const stCommitArenaResult_ProtoFunID stCommitArenaResult_ProtoFunID_ProtoFunID_MAX = stCommitArenaResult_ProtoFunID_FunID;
const int stCommitArenaResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCommitArenaResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCommitArenaResult_ProtoFunID_descriptor();
inline const ::std::string& stCommitArenaResult_ProtoFunID_Name(stCommitArenaResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCommitArenaResult_ProtoFunID_descriptor(), value);
}
inline bool stCommitArenaResult_ProtoFunID_Parse(
    const ::std::string& name, stCommitArenaResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCommitArenaResult_ProtoFunID>(
    stCommitArenaResult_ProtoFunID_descriptor(), name, value);
}
enum stRetCommintArenaResult_eResult {
  stRetCommintArenaResult_eResult_SUCCESS = 1,
  stRetCommintArenaResult_eResult_COND_NOT_MEET = 2,
  stRetCommintArenaResult_eResult_INNER_ERROR = 3,
  stRetCommintArenaResult_eResult_ROLE_LV_TOO_LOW = 4,
  stRetCommintArenaResult_eResult_LILIAN_NOT_ENOUGH = 5
};
bool stRetCommintArenaResult_eResult_IsValid(int value);
const stRetCommintArenaResult_eResult stRetCommintArenaResult_eResult_eResult_MIN = stRetCommintArenaResult_eResult_SUCCESS;
const stRetCommintArenaResult_eResult stRetCommintArenaResult_eResult_eResult_MAX = stRetCommintArenaResult_eResult_LILIAN_NOT_ENOUGH;
const int stRetCommintArenaResult_eResult_eResult_ARRAYSIZE = stRetCommintArenaResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCommintArenaResult_eResult_descriptor();
inline const ::std::string& stRetCommintArenaResult_eResult_Name(stRetCommintArenaResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCommintArenaResult_eResult_descriptor(), value);
}
inline bool stRetCommintArenaResult_eResult_Parse(
    const ::std::string& name, stRetCommintArenaResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCommintArenaResult_eResult>(
    stRetCommintArenaResult_eResult_descriptor(), name, value);
}
enum stRetCommintArenaResult_ProtoModID {
  stRetCommintArenaResult_ProtoModID_ModID = 6
};
bool stRetCommintArenaResult_ProtoModID_IsValid(int value);
const stRetCommintArenaResult_ProtoModID stRetCommintArenaResult_ProtoModID_ProtoModID_MIN = stRetCommintArenaResult_ProtoModID_ModID;
const stRetCommintArenaResult_ProtoModID stRetCommintArenaResult_ProtoModID_ProtoModID_MAX = stRetCommintArenaResult_ProtoModID_ModID;
const int stRetCommintArenaResult_ProtoModID_ProtoModID_ARRAYSIZE = stRetCommintArenaResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCommintArenaResult_ProtoModID_descriptor();
inline const ::std::string& stRetCommintArenaResult_ProtoModID_Name(stRetCommintArenaResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCommintArenaResult_ProtoModID_descriptor(), value);
}
inline bool stRetCommintArenaResult_ProtoModID_Parse(
    const ::std::string& name, stRetCommintArenaResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCommintArenaResult_ProtoModID>(
    stRetCommintArenaResult_ProtoModID_descriptor(), name, value);
}
enum stRetCommintArenaResult_ProtoFunID {
  stRetCommintArenaResult_ProtoFunID_FunID = 40
};
bool stRetCommintArenaResult_ProtoFunID_IsValid(int value);
const stRetCommintArenaResult_ProtoFunID stRetCommintArenaResult_ProtoFunID_ProtoFunID_MIN = stRetCommintArenaResult_ProtoFunID_FunID;
const stRetCommintArenaResult_ProtoFunID stRetCommintArenaResult_ProtoFunID_ProtoFunID_MAX = stRetCommintArenaResult_ProtoFunID_FunID;
const int stRetCommintArenaResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetCommintArenaResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCommintArenaResult_ProtoFunID_descriptor();
inline const ::std::string& stRetCommintArenaResult_ProtoFunID_Name(stRetCommintArenaResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCommintArenaResult_ProtoFunID_descriptor(), value);
}
inline bool stRetCommintArenaResult_ProtoFunID_Parse(
    const ::std::string& name, stRetCommintArenaResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCommintArenaResult_ProtoFunID>(
    stRetCommintArenaResult_ProtoFunID_descriptor(), name, value);
}
enum stReqEnterLeitaiScene_ProtoModID {
  stReqEnterLeitaiScene_ProtoModID_ModID = 6
};
bool stReqEnterLeitaiScene_ProtoModID_IsValid(int value);
const stReqEnterLeitaiScene_ProtoModID stReqEnterLeitaiScene_ProtoModID_ProtoModID_MIN = stReqEnterLeitaiScene_ProtoModID_ModID;
const stReqEnterLeitaiScene_ProtoModID stReqEnterLeitaiScene_ProtoModID_ProtoModID_MAX = stReqEnterLeitaiScene_ProtoModID_ModID;
const int stReqEnterLeitaiScene_ProtoModID_ProtoModID_ARRAYSIZE = stReqEnterLeitaiScene_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterLeitaiScene_ProtoModID_descriptor();
inline const ::std::string& stReqEnterLeitaiScene_ProtoModID_Name(stReqEnterLeitaiScene_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterLeitaiScene_ProtoModID_descriptor(), value);
}
inline bool stReqEnterLeitaiScene_ProtoModID_Parse(
    const ::std::string& name, stReqEnterLeitaiScene_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterLeitaiScene_ProtoModID>(
    stReqEnterLeitaiScene_ProtoModID_descriptor(), name, value);
}
enum stReqEnterLeitaiScene_ProtoFunID {
  stReqEnterLeitaiScene_ProtoFunID_FunID = 41
};
bool stReqEnterLeitaiScene_ProtoFunID_IsValid(int value);
const stReqEnterLeitaiScene_ProtoFunID stReqEnterLeitaiScene_ProtoFunID_ProtoFunID_MIN = stReqEnterLeitaiScene_ProtoFunID_FunID;
const stReqEnterLeitaiScene_ProtoFunID stReqEnterLeitaiScene_ProtoFunID_ProtoFunID_MAX = stReqEnterLeitaiScene_ProtoFunID_FunID;
const int stReqEnterLeitaiScene_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEnterLeitaiScene_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterLeitaiScene_ProtoFunID_descriptor();
inline const ::std::string& stReqEnterLeitaiScene_ProtoFunID_Name(stReqEnterLeitaiScene_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterLeitaiScene_ProtoFunID_descriptor(), value);
}
inline bool stReqEnterLeitaiScene_ProtoFunID_Parse(
    const ::std::string& name, stReqEnterLeitaiScene_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterLeitaiScene_ProtoFunID>(
    stReqEnterLeitaiScene_ProtoFunID_descriptor(), name, value);
}
enum stReqResetLeitaiBuff_ProtoModID {
  stReqResetLeitaiBuff_ProtoModID_ModID = 6
};
bool stReqResetLeitaiBuff_ProtoModID_IsValid(int value);
const stReqResetLeitaiBuff_ProtoModID stReqResetLeitaiBuff_ProtoModID_ProtoModID_MIN = stReqResetLeitaiBuff_ProtoModID_ModID;
const stReqResetLeitaiBuff_ProtoModID stReqResetLeitaiBuff_ProtoModID_ProtoModID_MAX = stReqResetLeitaiBuff_ProtoModID_ModID;
const int stReqResetLeitaiBuff_ProtoModID_ProtoModID_ARRAYSIZE = stReqResetLeitaiBuff_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetLeitaiBuff_ProtoModID_descriptor();
inline const ::std::string& stReqResetLeitaiBuff_ProtoModID_Name(stReqResetLeitaiBuff_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetLeitaiBuff_ProtoModID_descriptor(), value);
}
inline bool stReqResetLeitaiBuff_ProtoModID_Parse(
    const ::std::string& name, stReqResetLeitaiBuff_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetLeitaiBuff_ProtoModID>(
    stReqResetLeitaiBuff_ProtoModID_descriptor(), name, value);
}
enum stReqResetLeitaiBuff_ProtoFunID {
  stReqResetLeitaiBuff_ProtoFunID_FunID = 42
};
bool stReqResetLeitaiBuff_ProtoFunID_IsValid(int value);
const stReqResetLeitaiBuff_ProtoFunID stReqResetLeitaiBuff_ProtoFunID_ProtoFunID_MIN = stReqResetLeitaiBuff_ProtoFunID_FunID;
const stReqResetLeitaiBuff_ProtoFunID stReqResetLeitaiBuff_ProtoFunID_ProtoFunID_MAX = stReqResetLeitaiBuff_ProtoFunID_FunID;
const int stReqResetLeitaiBuff_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResetLeitaiBuff_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetLeitaiBuff_ProtoFunID_descriptor();
inline const ::std::string& stReqResetLeitaiBuff_ProtoFunID_Name(stReqResetLeitaiBuff_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetLeitaiBuff_ProtoFunID_descriptor(), value);
}
inline bool stReqResetLeitaiBuff_ProtoFunID_Parse(
    const ::std::string& name, stReqResetLeitaiBuff_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetLeitaiBuff_ProtoFunID>(
    stReqResetLeitaiBuff_ProtoFunID_descriptor(), name, value);
}
enum stResetLeitaiBuffResult_eResult {
  stResetLeitaiBuffResult_eResult_eSuccess = 1,
  stResetLeitaiBuffResult_eResult_eDiamond_Not_Enough = 2,
  stResetLeitaiBuffResult_eResult_eInner_Error = 3
};
bool stResetLeitaiBuffResult_eResult_IsValid(int value);
const stResetLeitaiBuffResult_eResult stResetLeitaiBuffResult_eResult_eResult_MIN = stResetLeitaiBuffResult_eResult_eSuccess;
const stResetLeitaiBuffResult_eResult stResetLeitaiBuffResult_eResult_eResult_MAX = stResetLeitaiBuffResult_eResult_eInner_Error;
const int stResetLeitaiBuffResult_eResult_eResult_ARRAYSIZE = stResetLeitaiBuffResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetLeitaiBuffResult_eResult_descriptor();
inline const ::std::string& stResetLeitaiBuffResult_eResult_Name(stResetLeitaiBuffResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetLeitaiBuffResult_eResult_descriptor(), value);
}
inline bool stResetLeitaiBuffResult_eResult_Parse(
    const ::std::string& name, stResetLeitaiBuffResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetLeitaiBuffResult_eResult>(
    stResetLeitaiBuffResult_eResult_descriptor(), name, value);
}
enum stResetLeitaiBuffResult_ProtoModID {
  stResetLeitaiBuffResult_ProtoModID_ModID = 6
};
bool stResetLeitaiBuffResult_ProtoModID_IsValid(int value);
const stResetLeitaiBuffResult_ProtoModID stResetLeitaiBuffResult_ProtoModID_ProtoModID_MIN = stResetLeitaiBuffResult_ProtoModID_ModID;
const stResetLeitaiBuffResult_ProtoModID stResetLeitaiBuffResult_ProtoModID_ProtoModID_MAX = stResetLeitaiBuffResult_ProtoModID_ModID;
const int stResetLeitaiBuffResult_ProtoModID_ProtoModID_ARRAYSIZE = stResetLeitaiBuffResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetLeitaiBuffResult_ProtoModID_descriptor();
inline const ::std::string& stResetLeitaiBuffResult_ProtoModID_Name(stResetLeitaiBuffResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetLeitaiBuffResult_ProtoModID_descriptor(), value);
}
inline bool stResetLeitaiBuffResult_ProtoModID_Parse(
    const ::std::string& name, stResetLeitaiBuffResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetLeitaiBuffResult_ProtoModID>(
    stResetLeitaiBuffResult_ProtoModID_descriptor(), name, value);
}
enum stResetLeitaiBuffResult_ProtoFunID {
  stResetLeitaiBuffResult_ProtoFunID_FunID = 43
};
bool stResetLeitaiBuffResult_ProtoFunID_IsValid(int value);
const stResetLeitaiBuffResult_ProtoFunID stResetLeitaiBuffResult_ProtoFunID_ProtoFunID_MIN = stResetLeitaiBuffResult_ProtoFunID_FunID;
const stResetLeitaiBuffResult_ProtoFunID stResetLeitaiBuffResult_ProtoFunID_ProtoFunID_MAX = stResetLeitaiBuffResult_ProtoFunID_FunID;
const int stResetLeitaiBuffResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetLeitaiBuffResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetLeitaiBuffResult_ProtoFunID_descriptor();
inline const ::std::string& stResetLeitaiBuffResult_ProtoFunID_Name(stResetLeitaiBuffResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetLeitaiBuffResult_ProtoFunID_descriptor(), value);
}
inline bool stResetLeitaiBuffResult_ProtoFunID_Parse(
    const ::std::string& name, stResetLeitaiBuffResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetLeitaiBuffResult_ProtoFunID>(
    stResetLeitaiBuffResult_ProtoFunID_descriptor(), name, value);
}
enum stReqBuffResetTime_ProtoModID {
  stReqBuffResetTime_ProtoModID_ModID = 6
};
bool stReqBuffResetTime_ProtoModID_IsValid(int value);
const stReqBuffResetTime_ProtoModID stReqBuffResetTime_ProtoModID_ProtoModID_MIN = stReqBuffResetTime_ProtoModID_ModID;
const stReqBuffResetTime_ProtoModID stReqBuffResetTime_ProtoModID_ProtoModID_MAX = stReqBuffResetTime_ProtoModID_ModID;
const int stReqBuffResetTime_ProtoModID_ProtoModID_ARRAYSIZE = stReqBuffResetTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuffResetTime_ProtoModID_descriptor();
inline const ::std::string& stReqBuffResetTime_ProtoModID_Name(stReqBuffResetTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuffResetTime_ProtoModID_descriptor(), value);
}
inline bool stReqBuffResetTime_ProtoModID_Parse(
    const ::std::string& name, stReqBuffResetTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuffResetTime_ProtoModID>(
    stReqBuffResetTime_ProtoModID_descriptor(), name, value);
}
enum stReqBuffResetTime_ProtoFunID {
  stReqBuffResetTime_ProtoFunID_FunID = 44
};
bool stReqBuffResetTime_ProtoFunID_IsValid(int value);
const stReqBuffResetTime_ProtoFunID stReqBuffResetTime_ProtoFunID_ProtoFunID_MIN = stReqBuffResetTime_ProtoFunID_FunID;
const stReqBuffResetTime_ProtoFunID stReqBuffResetTime_ProtoFunID_ProtoFunID_MAX = stReqBuffResetTime_ProtoFunID_FunID;
const int stReqBuffResetTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBuffResetTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuffResetTime_ProtoFunID_descriptor();
inline const ::std::string& stReqBuffResetTime_ProtoFunID_Name(stReqBuffResetTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuffResetTime_ProtoFunID_descriptor(), value);
}
inline bool stReqBuffResetTime_ProtoFunID_Parse(
    const ::std::string& name, stReqBuffResetTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuffResetTime_ProtoFunID>(
    stReqBuffResetTime_ProtoFunID_descriptor(), name, value);
}
enum stRetBuffResetTime_ProtoModID {
  stRetBuffResetTime_ProtoModID_ModID = 6
};
bool stRetBuffResetTime_ProtoModID_IsValid(int value);
const stRetBuffResetTime_ProtoModID stRetBuffResetTime_ProtoModID_ProtoModID_MIN = stRetBuffResetTime_ProtoModID_ModID;
const stRetBuffResetTime_ProtoModID stRetBuffResetTime_ProtoModID_ProtoModID_MAX = stRetBuffResetTime_ProtoModID_ModID;
const int stRetBuffResetTime_ProtoModID_ProtoModID_ARRAYSIZE = stRetBuffResetTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetBuffResetTime_ProtoModID_descriptor();
inline const ::std::string& stRetBuffResetTime_ProtoModID_Name(stRetBuffResetTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetBuffResetTime_ProtoModID_descriptor(), value);
}
inline bool stRetBuffResetTime_ProtoModID_Parse(
    const ::std::string& name, stRetBuffResetTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetBuffResetTime_ProtoModID>(
    stRetBuffResetTime_ProtoModID_descriptor(), name, value);
}
enum stRetBuffResetTime_ProtoFunID {
  stRetBuffResetTime_ProtoFunID_FunID = 45
};
bool stRetBuffResetTime_ProtoFunID_IsValid(int value);
const stRetBuffResetTime_ProtoFunID stRetBuffResetTime_ProtoFunID_ProtoFunID_MIN = stRetBuffResetTime_ProtoFunID_FunID;
const stRetBuffResetTime_ProtoFunID stRetBuffResetTime_ProtoFunID_ProtoFunID_MAX = stRetBuffResetTime_ProtoFunID_FunID;
const int stRetBuffResetTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetBuffResetTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetBuffResetTime_ProtoFunID_descriptor();
inline const ::std::string& stRetBuffResetTime_ProtoFunID_Name(stRetBuffResetTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetBuffResetTime_ProtoFunID_descriptor(), value);
}
inline bool stRetBuffResetTime_ProtoFunID_Parse(
    const ::std::string& name, stRetBuffResetTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetBuffResetTime_ProtoFunID>(
    stRetBuffResetTime_ProtoFunID_descriptor(), name, value);
}
enum stArenaReachNewRank_ProtoModID {
  stArenaReachNewRank_ProtoModID_ModID = 6
};
bool stArenaReachNewRank_ProtoModID_IsValid(int value);
const stArenaReachNewRank_ProtoModID stArenaReachNewRank_ProtoModID_ProtoModID_MIN = stArenaReachNewRank_ProtoModID_ModID;
const stArenaReachNewRank_ProtoModID stArenaReachNewRank_ProtoModID_ProtoModID_MAX = stArenaReachNewRank_ProtoModID_ModID;
const int stArenaReachNewRank_ProtoModID_ProtoModID_ARRAYSIZE = stArenaReachNewRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stArenaReachNewRank_ProtoModID_descriptor();
inline const ::std::string& stArenaReachNewRank_ProtoModID_Name(stArenaReachNewRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stArenaReachNewRank_ProtoModID_descriptor(), value);
}
inline bool stArenaReachNewRank_ProtoModID_Parse(
    const ::std::string& name, stArenaReachNewRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stArenaReachNewRank_ProtoModID>(
    stArenaReachNewRank_ProtoModID_descriptor(), name, value);
}
enum stArenaReachNewRank_ProtoFunID {
  stArenaReachNewRank_ProtoFunID_FunID = 46
};
bool stArenaReachNewRank_ProtoFunID_IsValid(int value);
const stArenaReachNewRank_ProtoFunID stArenaReachNewRank_ProtoFunID_ProtoFunID_MIN = stArenaReachNewRank_ProtoFunID_FunID;
const stArenaReachNewRank_ProtoFunID stArenaReachNewRank_ProtoFunID_ProtoFunID_MAX = stArenaReachNewRank_ProtoFunID_FunID;
const int stArenaReachNewRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stArenaReachNewRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stArenaReachNewRank_ProtoFunID_descriptor();
inline const ::std::string& stArenaReachNewRank_ProtoFunID_Name(stArenaReachNewRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stArenaReachNewRank_ProtoFunID_descriptor(), value);
}
inline bool stArenaReachNewRank_ProtoFunID_Parse(
    const ::std::string& name, stArenaReachNewRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stArenaReachNewRank_ProtoFunID>(
    stArenaReachNewRank_ProtoFunID_descriptor(), name, value);
}
enum stReqResetArenaChallengeNum_ProtoModID {
  stReqResetArenaChallengeNum_ProtoModID_ModID = 6
};
bool stReqResetArenaChallengeNum_ProtoModID_IsValid(int value);
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MIN = stReqResetArenaChallengeNum_ProtoModID_ModID;
const stReqResetArenaChallengeNum_ProtoModID stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MAX = stReqResetArenaChallengeNum_ProtoModID_ModID;
const int stReqResetArenaChallengeNum_ProtoModID_ProtoModID_ARRAYSIZE = stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoModID_descriptor();
inline const ::std::string& stReqResetArenaChallengeNum_ProtoModID_Name(stReqResetArenaChallengeNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetArenaChallengeNum_ProtoModID_descriptor(), value);
}
inline bool stReqResetArenaChallengeNum_ProtoModID_Parse(
    const ::std::string& name, stReqResetArenaChallengeNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetArenaChallengeNum_ProtoModID>(
    stReqResetArenaChallengeNum_ProtoModID_descriptor(), name, value);
}
enum stReqResetArenaChallengeNum_ProtoFunID {
  stReqResetArenaChallengeNum_ProtoFunID_FunID = 47
};
bool stReqResetArenaChallengeNum_ProtoFunID_IsValid(int value);
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MIN = stReqResetArenaChallengeNum_ProtoFunID_FunID;
const stReqResetArenaChallengeNum_ProtoFunID stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MAX = stReqResetArenaChallengeNum_ProtoFunID_FunID;
const int stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetArenaChallengeNum_ProtoFunID_descriptor();
inline const ::std::string& stReqResetArenaChallengeNum_ProtoFunID_Name(stReqResetArenaChallengeNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetArenaChallengeNum_ProtoFunID_descriptor(), value);
}
inline bool stReqResetArenaChallengeNum_ProtoFunID_Parse(
    const ::std::string& name, stReqResetArenaChallengeNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetArenaChallengeNum_ProtoFunID>(
    stReqResetArenaChallengeNum_ProtoFunID_descriptor(), name, value);
}
enum stResetArenaChallengeNunResult_eResult {
  stResetArenaChallengeNunResult_eResult_eSuccess = 1,
  stResetArenaChallengeNunResult_eResult_eResetNum_Use_Out = 2,
  stResetArenaChallengeNunResult_eResult_eDiamond_Not_Enough = 3,
  stResetArenaChallengeNunResult_eResult_eInner_Error = 4
};
bool stResetArenaChallengeNunResult_eResult_IsValid(int value);
const stResetArenaChallengeNunResult_eResult stResetArenaChallengeNunResult_eResult_eResult_MIN = stResetArenaChallengeNunResult_eResult_eSuccess;
const stResetArenaChallengeNunResult_eResult stResetArenaChallengeNunResult_eResult_eResult_MAX = stResetArenaChallengeNunResult_eResult_eInner_Error;
const int stResetArenaChallengeNunResult_eResult_eResult_ARRAYSIZE = stResetArenaChallengeNunResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetArenaChallengeNunResult_eResult_descriptor();
inline const ::std::string& stResetArenaChallengeNunResult_eResult_Name(stResetArenaChallengeNunResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetArenaChallengeNunResult_eResult_descriptor(), value);
}
inline bool stResetArenaChallengeNunResult_eResult_Parse(
    const ::std::string& name, stResetArenaChallengeNunResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetArenaChallengeNunResult_eResult>(
    stResetArenaChallengeNunResult_eResult_descriptor(), name, value);
}
enum stResetArenaChallengeNunResult_ProtoModID {
  stResetArenaChallengeNunResult_ProtoModID_ModID = 6
};
bool stResetArenaChallengeNunResult_ProtoModID_IsValid(int value);
const stResetArenaChallengeNunResult_ProtoModID stResetArenaChallengeNunResult_ProtoModID_ProtoModID_MIN = stResetArenaChallengeNunResult_ProtoModID_ModID;
const stResetArenaChallengeNunResult_ProtoModID stResetArenaChallengeNunResult_ProtoModID_ProtoModID_MAX = stResetArenaChallengeNunResult_ProtoModID_ModID;
const int stResetArenaChallengeNunResult_ProtoModID_ProtoModID_ARRAYSIZE = stResetArenaChallengeNunResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetArenaChallengeNunResult_ProtoModID_descriptor();
inline const ::std::string& stResetArenaChallengeNunResult_ProtoModID_Name(stResetArenaChallengeNunResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetArenaChallengeNunResult_ProtoModID_descriptor(), value);
}
inline bool stResetArenaChallengeNunResult_ProtoModID_Parse(
    const ::std::string& name, stResetArenaChallengeNunResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetArenaChallengeNunResult_ProtoModID>(
    stResetArenaChallengeNunResult_ProtoModID_descriptor(), name, value);
}
enum stResetArenaChallengeNunResult_ProtoFunID {
  stResetArenaChallengeNunResult_ProtoFunID_FunID = 48
};
bool stResetArenaChallengeNunResult_ProtoFunID_IsValid(int value);
const stResetArenaChallengeNunResult_ProtoFunID stResetArenaChallengeNunResult_ProtoFunID_ProtoFunID_MIN = stResetArenaChallengeNunResult_ProtoFunID_FunID;
const stResetArenaChallengeNunResult_ProtoFunID stResetArenaChallengeNunResult_ProtoFunID_ProtoFunID_MAX = stResetArenaChallengeNunResult_ProtoFunID_FunID;
const int stResetArenaChallengeNunResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetArenaChallengeNunResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetArenaChallengeNunResult_ProtoFunID_descriptor();
inline const ::std::string& stResetArenaChallengeNunResult_ProtoFunID_Name(stResetArenaChallengeNunResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetArenaChallengeNunResult_ProtoFunID_descriptor(), value);
}
inline bool stResetArenaChallengeNunResult_ProtoFunID_Parse(
    const ::std::string& name, stResetArenaChallengeNunResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetArenaChallengeNunResult_ProtoFunID>(
    stResetArenaChallengeNunResult_ProtoFunID_descriptor(), name, value);
}
enum stReqClearArenaCD_ProtoModID {
  stReqClearArenaCD_ProtoModID_ModID = 6
};
bool stReqClearArenaCD_ProtoModID_IsValid(int value);
const stReqClearArenaCD_ProtoModID stReqClearArenaCD_ProtoModID_ProtoModID_MIN = stReqClearArenaCD_ProtoModID_ModID;
const stReqClearArenaCD_ProtoModID stReqClearArenaCD_ProtoModID_ProtoModID_MAX = stReqClearArenaCD_ProtoModID_ModID;
const int stReqClearArenaCD_ProtoModID_ProtoModID_ARRAYSIZE = stReqClearArenaCD_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqClearArenaCD_ProtoModID_descriptor();
inline const ::std::string& stReqClearArenaCD_ProtoModID_Name(stReqClearArenaCD_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqClearArenaCD_ProtoModID_descriptor(), value);
}
inline bool stReqClearArenaCD_ProtoModID_Parse(
    const ::std::string& name, stReqClearArenaCD_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqClearArenaCD_ProtoModID>(
    stReqClearArenaCD_ProtoModID_descriptor(), name, value);
}
enum stReqClearArenaCD_ProtoFunID {
  stReqClearArenaCD_ProtoFunID_FunID = 49
};
bool stReqClearArenaCD_ProtoFunID_IsValid(int value);
const stReqClearArenaCD_ProtoFunID stReqClearArenaCD_ProtoFunID_ProtoFunID_MIN = stReqClearArenaCD_ProtoFunID_FunID;
const stReqClearArenaCD_ProtoFunID stReqClearArenaCD_ProtoFunID_ProtoFunID_MAX = stReqClearArenaCD_ProtoFunID_FunID;
const int stReqClearArenaCD_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqClearArenaCD_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqClearArenaCD_ProtoFunID_descriptor();
inline const ::std::string& stReqClearArenaCD_ProtoFunID_Name(stReqClearArenaCD_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqClearArenaCD_ProtoFunID_descriptor(), value);
}
inline bool stReqClearArenaCD_ProtoFunID_Parse(
    const ::std::string& name, stReqClearArenaCD_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqClearArenaCD_ProtoFunID>(
    stReqClearArenaCD_ProtoFunID_descriptor(), name, value);
}
enum stClearArenaCDResult_eResult {
  stClearArenaCDResult_eResult_eSuccess = 1,
  stClearArenaCDResult_eResult_eInner_Error = 2,
  stClearArenaCDResult_eResult_eDiamond_Not_Enough = 3
};
bool stClearArenaCDResult_eResult_IsValid(int value);
const stClearArenaCDResult_eResult stClearArenaCDResult_eResult_eResult_MIN = stClearArenaCDResult_eResult_eSuccess;
const stClearArenaCDResult_eResult stClearArenaCDResult_eResult_eResult_MAX = stClearArenaCDResult_eResult_eDiamond_Not_Enough;
const int stClearArenaCDResult_eResult_eResult_ARRAYSIZE = stClearArenaCDResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClearArenaCDResult_eResult_descriptor();
inline const ::std::string& stClearArenaCDResult_eResult_Name(stClearArenaCDResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClearArenaCDResult_eResult_descriptor(), value);
}
inline bool stClearArenaCDResult_eResult_Parse(
    const ::std::string& name, stClearArenaCDResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClearArenaCDResult_eResult>(
    stClearArenaCDResult_eResult_descriptor(), name, value);
}
enum stClearArenaCDResult_ProtoModID {
  stClearArenaCDResult_ProtoModID_ModID = 6
};
bool stClearArenaCDResult_ProtoModID_IsValid(int value);
const stClearArenaCDResult_ProtoModID stClearArenaCDResult_ProtoModID_ProtoModID_MIN = stClearArenaCDResult_ProtoModID_ModID;
const stClearArenaCDResult_ProtoModID stClearArenaCDResult_ProtoModID_ProtoModID_MAX = stClearArenaCDResult_ProtoModID_ModID;
const int stClearArenaCDResult_ProtoModID_ProtoModID_ARRAYSIZE = stClearArenaCDResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClearArenaCDResult_ProtoModID_descriptor();
inline const ::std::string& stClearArenaCDResult_ProtoModID_Name(stClearArenaCDResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClearArenaCDResult_ProtoModID_descriptor(), value);
}
inline bool stClearArenaCDResult_ProtoModID_Parse(
    const ::std::string& name, stClearArenaCDResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClearArenaCDResult_ProtoModID>(
    stClearArenaCDResult_ProtoModID_descriptor(), name, value);
}
enum stClearArenaCDResult_ProtoFunID {
  stClearArenaCDResult_ProtoFunID_FunID = 50
};
bool stClearArenaCDResult_ProtoFunID_IsValid(int value);
const stClearArenaCDResult_ProtoFunID stClearArenaCDResult_ProtoFunID_ProtoFunID_MIN = stClearArenaCDResult_ProtoFunID_FunID;
const stClearArenaCDResult_ProtoFunID stClearArenaCDResult_ProtoFunID_ProtoFunID_MAX = stClearArenaCDResult_ProtoFunID_FunID;
const int stClearArenaCDResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stClearArenaCDResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClearArenaCDResult_ProtoFunID_descriptor();
inline const ::std::string& stClearArenaCDResult_ProtoFunID_Name(stClearArenaCDResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClearArenaCDResult_ProtoFunID_descriptor(), value);
}
inline bool stClearArenaCDResult_ProtoFunID_Parse(
    const ::std::string& name, stClearArenaCDResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClearArenaCDResult_ProtoFunID>(
    stClearArenaCDResult_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenSvrBPRank_ProtoModID {
  stReqOpenSvrBPRank_ProtoModID_ModID = 6
};
bool stReqOpenSvrBPRank_ProtoModID_IsValid(int value);
const stReqOpenSvrBPRank_ProtoModID stReqOpenSvrBPRank_ProtoModID_ProtoModID_MIN = stReqOpenSvrBPRank_ProtoModID_ModID;
const stReqOpenSvrBPRank_ProtoModID stReqOpenSvrBPRank_ProtoModID_ProtoModID_MAX = stReqOpenSvrBPRank_ProtoModID_ModID;
const int stReqOpenSvrBPRank_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenSvrBPRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenSvrBPRank_ProtoModID_descriptor();
inline const ::std::string& stReqOpenSvrBPRank_ProtoModID_Name(stReqOpenSvrBPRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenSvrBPRank_ProtoModID_descriptor(), value);
}
inline bool stReqOpenSvrBPRank_ProtoModID_Parse(
    const ::std::string& name, stReqOpenSvrBPRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenSvrBPRank_ProtoModID>(
    stReqOpenSvrBPRank_ProtoModID_descriptor(), name, value);
}
enum stReqOpenSvrBPRank_ProtoFunID {
  stReqOpenSvrBPRank_ProtoFunID_FunID = 51
};
bool stReqOpenSvrBPRank_ProtoFunID_IsValid(int value);
const stReqOpenSvrBPRank_ProtoFunID stReqOpenSvrBPRank_ProtoFunID_ProtoFunID_MIN = stReqOpenSvrBPRank_ProtoFunID_FunID;
const stReqOpenSvrBPRank_ProtoFunID stReqOpenSvrBPRank_ProtoFunID_ProtoFunID_MAX = stReqOpenSvrBPRank_ProtoFunID_FunID;
const int stReqOpenSvrBPRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenSvrBPRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenSvrBPRank_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenSvrBPRank_ProtoFunID_Name(stReqOpenSvrBPRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenSvrBPRank_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenSvrBPRank_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenSvrBPRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenSvrBPRank_ProtoFunID>(
    stReqOpenSvrBPRank_ProtoFunID_descriptor(), name, value);
}
enum stRetOpenSvrBPRank_ProtoModID {
  stRetOpenSvrBPRank_ProtoModID_ModID = 6
};
bool stRetOpenSvrBPRank_ProtoModID_IsValid(int value);
const stRetOpenSvrBPRank_ProtoModID stRetOpenSvrBPRank_ProtoModID_ProtoModID_MIN = stRetOpenSvrBPRank_ProtoModID_ModID;
const stRetOpenSvrBPRank_ProtoModID stRetOpenSvrBPRank_ProtoModID_ProtoModID_MAX = stRetOpenSvrBPRank_ProtoModID_ModID;
const int stRetOpenSvrBPRank_ProtoModID_ProtoModID_ARRAYSIZE = stRetOpenSvrBPRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOpenSvrBPRank_ProtoModID_descriptor();
inline const ::std::string& stRetOpenSvrBPRank_ProtoModID_Name(stRetOpenSvrBPRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOpenSvrBPRank_ProtoModID_descriptor(), value);
}
inline bool stRetOpenSvrBPRank_ProtoModID_Parse(
    const ::std::string& name, stRetOpenSvrBPRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOpenSvrBPRank_ProtoModID>(
    stRetOpenSvrBPRank_ProtoModID_descriptor(), name, value);
}
enum stRetOpenSvrBPRank_ProtoFunID {
  stRetOpenSvrBPRank_ProtoFunID_FunID = 52
};
bool stRetOpenSvrBPRank_ProtoFunID_IsValid(int value);
const stRetOpenSvrBPRank_ProtoFunID stRetOpenSvrBPRank_ProtoFunID_ProtoFunID_MIN = stRetOpenSvrBPRank_ProtoFunID_FunID;
const stRetOpenSvrBPRank_ProtoFunID stRetOpenSvrBPRank_ProtoFunID_ProtoFunID_MAX = stRetOpenSvrBPRank_ProtoFunID_FunID;
const int stRetOpenSvrBPRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetOpenSvrBPRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetOpenSvrBPRank_ProtoFunID_descriptor();
inline const ::std::string& stRetOpenSvrBPRank_ProtoFunID_Name(stRetOpenSvrBPRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetOpenSvrBPRank_ProtoFunID_descriptor(), value);
}
inline bool stRetOpenSvrBPRank_ProtoFunID_Parse(
    const ::std::string& name, stRetOpenSvrBPRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetOpenSvrBPRank_ProtoFunID>(
    stRetOpenSvrBPRank_ProtoFunID_descriptor(), name, value);
}
enum stReqExpeditionInfo_ProtoModID {
  stReqExpeditionInfo_ProtoModID_ModID = 6
};
bool stReqExpeditionInfo_ProtoModID_IsValid(int value);
const stReqExpeditionInfo_ProtoModID stReqExpeditionInfo_ProtoModID_ProtoModID_MIN = stReqExpeditionInfo_ProtoModID_ModID;
const stReqExpeditionInfo_ProtoModID stReqExpeditionInfo_ProtoModID_ProtoModID_MAX = stReqExpeditionInfo_ProtoModID_ModID;
const int stReqExpeditionInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqExpeditionInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExpeditionInfo_ProtoModID_descriptor();
inline const ::std::string& stReqExpeditionInfo_ProtoModID_Name(stReqExpeditionInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExpeditionInfo_ProtoModID_descriptor(), value);
}
inline bool stReqExpeditionInfo_ProtoModID_Parse(
    const ::std::string& name, stReqExpeditionInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExpeditionInfo_ProtoModID>(
    stReqExpeditionInfo_ProtoModID_descriptor(), name, value);
}
enum stReqExpeditionInfo_ProtoFunID {
  stReqExpeditionInfo_ProtoFunID_FunID = 53
};
bool stReqExpeditionInfo_ProtoFunID_IsValid(int value);
const stReqExpeditionInfo_ProtoFunID stReqExpeditionInfo_ProtoFunID_ProtoFunID_MIN = stReqExpeditionInfo_ProtoFunID_FunID;
const stReqExpeditionInfo_ProtoFunID stReqExpeditionInfo_ProtoFunID_ProtoFunID_MAX = stReqExpeditionInfo_ProtoFunID_FunID;
const int stReqExpeditionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqExpeditionInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExpeditionInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqExpeditionInfo_ProtoFunID_Name(stReqExpeditionInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExpeditionInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqExpeditionInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqExpeditionInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExpeditionInfo_ProtoFunID>(
    stReqExpeditionInfo_ProtoFunID_descriptor(), name, value);
}
enum stRetExpeditionInfo_eResult {
  stRetExpeditionInfo_eResult_eSuccess = 1,
  stRetExpeditionInfo_eResult_eLvl_Limit = 2
};
bool stRetExpeditionInfo_eResult_IsValid(int value);
const stRetExpeditionInfo_eResult stRetExpeditionInfo_eResult_eResult_MIN = stRetExpeditionInfo_eResult_eSuccess;
const stRetExpeditionInfo_eResult stRetExpeditionInfo_eResult_eResult_MAX = stRetExpeditionInfo_eResult_eLvl_Limit;
const int stRetExpeditionInfo_eResult_eResult_ARRAYSIZE = stRetExpeditionInfo_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpeditionInfo_eResult_descriptor();
inline const ::std::string& stRetExpeditionInfo_eResult_Name(stRetExpeditionInfo_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpeditionInfo_eResult_descriptor(), value);
}
inline bool stRetExpeditionInfo_eResult_Parse(
    const ::std::string& name, stRetExpeditionInfo_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpeditionInfo_eResult>(
    stRetExpeditionInfo_eResult_descriptor(), name, value);
}
enum stRetExpeditionInfo_ProtoModID {
  stRetExpeditionInfo_ProtoModID_ModID = 6
};
bool stRetExpeditionInfo_ProtoModID_IsValid(int value);
const stRetExpeditionInfo_ProtoModID stRetExpeditionInfo_ProtoModID_ProtoModID_MIN = stRetExpeditionInfo_ProtoModID_ModID;
const stRetExpeditionInfo_ProtoModID stRetExpeditionInfo_ProtoModID_ProtoModID_MAX = stRetExpeditionInfo_ProtoModID_ModID;
const int stRetExpeditionInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRetExpeditionInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpeditionInfo_ProtoModID_descriptor();
inline const ::std::string& stRetExpeditionInfo_ProtoModID_Name(stRetExpeditionInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpeditionInfo_ProtoModID_descriptor(), value);
}
inline bool stRetExpeditionInfo_ProtoModID_Parse(
    const ::std::string& name, stRetExpeditionInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpeditionInfo_ProtoModID>(
    stRetExpeditionInfo_ProtoModID_descriptor(), name, value);
}
enum stRetExpeditionInfo_ProtoFunID {
  stRetExpeditionInfo_ProtoFunID_FunID = 54
};
bool stRetExpeditionInfo_ProtoFunID_IsValid(int value);
const stRetExpeditionInfo_ProtoFunID stRetExpeditionInfo_ProtoFunID_ProtoFunID_MIN = stRetExpeditionInfo_ProtoFunID_FunID;
const stRetExpeditionInfo_ProtoFunID stRetExpeditionInfo_ProtoFunID_ProtoFunID_MAX = stRetExpeditionInfo_ProtoFunID_FunID;
const int stRetExpeditionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetExpeditionInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpeditionInfo_ProtoFunID_descriptor();
inline const ::std::string& stRetExpeditionInfo_ProtoFunID_Name(stRetExpeditionInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpeditionInfo_ProtoFunID_descriptor(), value);
}
inline bool stRetExpeditionInfo_ProtoFunID_Parse(
    const ::std::string& name, stRetExpeditionInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpeditionInfo_ProtoFunID>(
    stRetExpeditionInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqExpedition_ProtoModID {
  stReqExpedition_ProtoModID_ModID = 6
};
bool stReqExpedition_ProtoModID_IsValid(int value);
const stReqExpedition_ProtoModID stReqExpedition_ProtoModID_ProtoModID_MIN = stReqExpedition_ProtoModID_ModID;
const stReqExpedition_ProtoModID stReqExpedition_ProtoModID_ProtoModID_MAX = stReqExpedition_ProtoModID_ModID;
const int stReqExpedition_ProtoModID_ProtoModID_ARRAYSIZE = stReqExpedition_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExpedition_ProtoModID_descriptor();
inline const ::std::string& stReqExpedition_ProtoModID_Name(stReqExpedition_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExpedition_ProtoModID_descriptor(), value);
}
inline bool stReqExpedition_ProtoModID_Parse(
    const ::std::string& name, stReqExpedition_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExpedition_ProtoModID>(
    stReqExpedition_ProtoModID_descriptor(), name, value);
}
enum stReqExpedition_ProtoFunID {
  stReqExpedition_ProtoFunID_FunID = 55
};
bool stReqExpedition_ProtoFunID_IsValid(int value);
const stReqExpedition_ProtoFunID stReqExpedition_ProtoFunID_ProtoFunID_MIN = stReqExpedition_ProtoFunID_FunID;
const stReqExpedition_ProtoFunID stReqExpedition_ProtoFunID_ProtoFunID_MAX = stReqExpedition_ProtoFunID_FunID;
const int stReqExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqExpedition_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExpedition_ProtoFunID_descriptor();
inline const ::std::string& stReqExpedition_ProtoFunID_Name(stReqExpedition_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExpedition_ProtoFunID_descriptor(), value);
}
inline bool stReqExpedition_ProtoFunID_Parse(
    const ::std::string& name, stReqExpedition_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExpedition_ProtoFunID>(
    stReqExpedition_ProtoFunID_descriptor(), name, value);
}
enum stRetExpedition_eResult {
  stRetExpedition_eResult_eSuccess = 1,
  stRetExpedition_eResult_eHero_In_Used = 2,
  stRetExpedition_eResult_eHero_Num_Limit = 3,
  stRetExpedition_eResult_eLvl_Limit = 4,
  stRetExpedition_eResult_eTime_Used_Out = 5,
  stRetExpedition_eResult_eInvalid_Id = 6,
  stRetExpedition_eResult_eSame_Type = 7
};
bool stRetExpedition_eResult_IsValid(int value);
const stRetExpedition_eResult stRetExpedition_eResult_eResult_MIN = stRetExpedition_eResult_eSuccess;
const stRetExpedition_eResult stRetExpedition_eResult_eResult_MAX = stRetExpedition_eResult_eSame_Type;
const int stRetExpedition_eResult_eResult_ARRAYSIZE = stRetExpedition_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpedition_eResult_descriptor();
inline const ::std::string& stRetExpedition_eResult_Name(stRetExpedition_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpedition_eResult_descriptor(), value);
}
inline bool stRetExpedition_eResult_Parse(
    const ::std::string& name, stRetExpedition_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpedition_eResult>(
    stRetExpedition_eResult_descriptor(), name, value);
}
enum stRetExpedition_ProtoModID {
  stRetExpedition_ProtoModID_ModID = 6
};
bool stRetExpedition_ProtoModID_IsValid(int value);
const stRetExpedition_ProtoModID stRetExpedition_ProtoModID_ProtoModID_MIN = stRetExpedition_ProtoModID_ModID;
const stRetExpedition_ProtoModID stRetExpedition_ProtoModID_ProtoModID_MAX = stRetExpedition_ProtoModID_ModID;
const int stRetExpedition_ProtoModID_ProtoModID_ARRAYSIZE = stRetExpedition_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpedition_ProtoModID_descriptor();
inline const ::std::string& stRetExpedition_ProtoModID_Name(stRetExpedition_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpedition_ProtoModID_descriptor(), value);
}
inline bool stRetExpedition_ProtoModID_Parse(
    const ::std::string& name, stRetExpedition_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpedition_ProtoModID>(
    stRetExpedition_ProtoModID_descriptor(), name, value);
}
enum stRetExpedition_ProtoFunID {
  stRetExpedition_ProtoFunID_FunID = 56
};
bool stRetExpedition_ProtoFunID_IsValid(int value);
const stRetExpedition_ProtoFunID stRetExpedition_ProtoFunID_ProtoFunID_MIN = stRetExpedition_ProtoFunID_FunID;
const stRetExpedition_ProtoFunID stRetExpedition_ProtoFunID_ProtoFunID_MAX = stRetExpedition_ProtoFunID_FunID;
const int stRetExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetExpedition_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpedition_ProtoFunID_descriptor();
inline const ::std::string& stRetExpedition_ProtoFunID_Name(stRetExpedition_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpedition_ProtoFunID_descriptor(), value);
}
inline bool stRetExpedition_ProtoFunID_Parse(
    const ::std::string& name, stRetExpedition_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpedition_ProtoFunID>(
    stRetExpedition_ProtoFunID_descriptor(), name, value);
}
enum stReqExpeditionReward_ProtoModID {
  stReqExpeditionReward_ProtoModID_ModID = 6
};
bool stReqExpeditionReward_ProtoModID_IsValid(int value);
const stReqExpeditionReward_ProtoModID stReqExpeditionReward_ProtoModID_ProtoModID_MIN = stReqExpeditionReward_ProtoModID_ModID;
const stReqExpeditionReward_ProtoModID stReqExpeditionReward_ProtoModID_ProtoModID_MAX = stReqExpeditionReward_ProtoModID_ModID;
const int stReqExpeditionReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqExpeditionReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExpeditionReward_ProtoModID_descriptor();
inline const ::std::string& stReqExpeditionReward_ProtoModID_Name(stReqExpeditionReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExpeditionReward_ProtoModID_descriptor(), value);
}
inline bool stReqExpeditionReward_ProtoModID_Parse(
    const ::std::string& name, stReqExpeditionReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExpeditionReward_ProtoModID>(
    stReqExpeditionReward_ProtoModID_descriptor(), name, value);
}
enum stReqExpeditionReward_ProtoFunID {
  stReqExpeditionReward_ProtoFunID_FunID = 57
};
bool stReqExpeditionReward_ProtoFunID_IsValid(int value);
const stReqExpeditionReward_ProtoFunID stReqExpeditionReward_ProtoFunID_ProtoFunID_MIN = stReqExpeditionReward_ProtoFunID_FunID;
const stReqExpeditionReward_ProtoFunID stReqExpeditionReward_ProtoFunID_ProtoFunID_MAX = stReqExpeditionReward_ProtoFunID_FunID;
const int stReqExpeditionReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqExpeditionReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExpeditionReward_ProtoFunID_descriptor();
inline const ::std::string& stReqExpeditionReward_ProtoFunID_Name(stReqExpeditionReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExpeditionReward_ProtoFunID_descriptor(), value);
}
inline bool stReqExpeditionReward_ProtoFunID_Parse(
    const ::std::string& name, stReqExpeditionReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExpeditionReward_ProtoFunID>(
    stReqExpeditionReward_ProtoFunID_descriptor(), name, value);
}
enum stRetExpeditionReward_eResult {
  stRetExpeditionReward_eResult_eSuccess = 1,
  stRetExpeditionReward_eResult_eTime_Not_Up = 2,
  stRetExpeditionReward_eResult_eInvalid_Id = 3
};
bool stRetExpeditionReward_eResult_IsValid(int value);
const stRetExpeditionReward_eResult stRetExpeditionReward_eResult_eResult_MIN = stRetExpeditionReward_eResult_eSuccess;
const stRetExpeditionReward_eResult stRetExpeditionReward_eResult_eResult_MAX = stRetExpeditionReward_eResult_eInvalid_Id;
const int stRetExpeditionReward_eResult_eResult_ARRAYSIZE = stRetExpeditionReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpeditionReward_eResult_descriptor();
inline const ::std::string& stRetExpeditionReward_eResult_Name(stRetExpeditionReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpeditionReward_eResult_descriptor(), value);
}
inline bool stRetExpeditionReward_eResult_Parse(
    const ::std::string& name, stRetExpeditionReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpeditionReward_eResult>(
    stRetExpeditionReward_eResult_descriptor(), name, value);
}
enum stRetExpeditionReward_ProtoModID {
  stRetExpeditionReward_ProtoModID_ModID = 6
};
bool stRetExpeditionReward_ProtoModID_IsValid(int value);
const stRetExpeditionReward_ProtoModID stRetExpeditionReward_ProtoModID_ProtoModID_MIN = stRetExpeditionReward_ProtoModID_ModID;
const stRetExpeditionReward_ProtoModID stRetExpeditionReward_ProtoModID_ProtoModID_MAX = stRetExpeditionReward_ProtoModID_ModID;
const int stRetExpeditionReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetExpeditionReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpeditionReward_ProtoModID_descriptor();
inline const ::std::string& stRetExpeditionReward_ProtoModID_Name(stRetExpeditionReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpeditionReward_ProtoModID_descriptor(), value);
}
inline bool stRetExpeditionReward_ProtoModID_Parse(
    const ::std::string& name, stRetExpeditionReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpeditionReward_ProtoModID>(
    stRetExpeditionReward_ProtoModID_descriptor(), name, value);
}
enum stRetExpeditionReward_ProtoFunID {
  stRetExpeditionReward_ProtoFunID_FunID = 58
};
bool stRetExpeditionReward_ProtoFunID_IsValid(int value);
const stRetExpeditionReward_ProtoFunID stRetExpeditionReward_ProtoFunID_ProtoFunID_MIN = stRetExpeditionReward_ProtoFunID_FunID;
const stRetExpeditionReward_ProtoFunID stRetExpeditionReward_ProtoFunID_ProtoFunID_MAX = stRetExpeditionReward_ProtoFunID_FunID;
const int stRetExpeditionReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetExpeditionReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpeditionReward_ProtoFunID_descriptor();
inline const ::std::string& stRetExpeditionReward_ProtoFunID_Name(stRetExpeditionReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpeditionReward_ProtoFunID_descriptor(), value);
}
inline bool stRetExpeditionReward_ProtoFunID_Parse(
    const ::std::string& name, stRetExpeditionReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpeditionReward_ProtoFunID>(
    stRetExpeditionReward_ProtoFunID_descriptor(), name, value);
}
enum stReqFastExpedition_ProtoModID {
  stReqFastExpedition_ProtoModID_ModID = 6
};
bool stReqFastExpedition_ProtoModID_IsValid(int value);
const stReqFastExpedition_ProtoModID stReqFastExpedition_ProtoModID_ProtoModID_MIN = stReqFastExpedition_ProtoModID_ModID;
const stReqFastExpedition_ProtoModID stReqFastExpedition_ProtoModID_ProtoModID_MAX = stReqFastExpedition_ProtoModID_ModID;
const int stReqFastExpedition_ProtoModID_ProtoModID_ARRAYSIZE = stReqFastExpedition_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFastExpedition_ProtoModID_descriptor();
inline const ::std::string& stReqFastExpedition_ProtoModID_Name(stReqFastExpedition_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFastExpedition_ProtoModID_descriptor(), value);
}
inline bool stReqFastExpedition_ProtoModID_Parse(
    const ::std::string& name, stReqFastExpedition_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFastExpedition_ProtoModID>(
    stReqFastExpedition_ProtoModID_descriptor(), name, value);
}
enum stReqFastExpedition_ProtoFunID {
  stReqFastExpedition_ProtoFunID_FunID = 59
};
bool stReqFastExpedition_ProtoFunID_IsValid(int value);
const stReqFastExpedition_ProtoFunID stReqFastExpedition_ProtoFunID_ProtoFunID_MIN = stReqFastExpedition_ProtoFunID_FunID;
const stReqFastExpedition_ProtoFunID stReqFastExpedition_ProtoFunID_ProtoFunID_MAX = stReqFastExpedition_ProtoFunID_FunID;
const int stReqFastExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqFastExpedition_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFastExpedition_ProtoFunID_descriptor();
inline const ::std::string& stReqFastExpedition_ProtoFunID_Name(stReqFastExpedition_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFastExpedition_ProtoFunID_descriptor(), value);
}
inline bool stReqFastExpedition_ProtoFunID_Parse(
    const ::std::string& name, stReqFastExpedition_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFastExpedition_ProtoFunID>(
    stReqFastExpedition_ProtoFunID_descriptor(), name, value);
}
enum stRetFastExpedition_eResult {
  stRetFastExpedition_eResult_eSuccess = 1,
  stRetFastExpedition_eResult_eTime_Out = 2,
  stRetFastExpedition_eResult_eInvalid_Id = 3,
  stRetFastExpedition_eResult_eLess_Of_Diamond = 4
};
bool stRetFastExpedition_eResult_IsValid(int value);
const stRetFastExpedition_eResult stRetFastExpedition_eResult_eResult_MIN = stRetFastExpedition_eResult_eSuccess;
const stRetFastExpedition_eResult stRetFastExpedition_eResult_eResult_MAX = stRetFastExpedition_eResult_eLess_Of_Diamond;
const int stRetFastExpedition_eResult_eResult_ARRAYSIZE = stRetFastExpedition_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFastExpedition_eResult_descriptor();
inline const ::std::string& stRetFastExpedition_eResult_Name(stRetFastExpedition_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFastExpedition_eResult_descriptor(), value);
}
inline bool stRetFastExpedition_eResult_Parse(
    const ::std::string& name, stRetFastExpedition_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFastExpedition_eResult>(
    stRetFastExpedition_eResult_descriptor(), name, value);
}
enum stRetFastExpedition_ProtoModID {
  stRetFastExpedition_ProtoModID_ModID = 6
};
bool stRetFastExpedition_ProtoModID_IsValid(int value);
const stRetFastExpedition_ProtoModID stRetFastExpedition_ProtoModID_ProtoModID_MIN = stRetFastExpedition_ProtoModID_ModID;
const stRetFastExpedition_ProtoModID stRetFastExpedition_ProtoModID_ProtoModID_MAX = stRetFastExpedition_ProtoModID_ModID;
const int stRetFastExpedition_ProtoModID_ProtoModID_ARRAYSIZE = stRetFastExpedition_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFastExpedition_ProtoModID_descriptor();
inline const ::std::string& stRetFastExpedition_ProtoModID_Name(stRetFastExpedition_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFastExpedition_ProtoModID_descriptor(), value);
}
inline bool stRetFastExpedition_ProtoModID_Parse(
    const ::std::string& name, stRetFastExpedition_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFastExpedition_ProtoModID>(
    stRetFastExpedition_ProtoModID_descriptor(), name, value);
}
enum stRetFastExpedition_ProtoFunID {
  stRetFastExpedition_ProtoFunID_FunID = 60
};
bool stRetFastExpedition_ProtoFunID_IsValid(int value);
const stRetFastExpedition_ProtoFunID stRetFastExpedition_ProtoFunID_ProtoFunID_MIN = stRetFastExpedition_ProtoFunID_FunID;
const stRetFastExpedition_ProtoFunID stRetFastExpedition_ProtoFunID_ProtoFunID_MAX = stRetFastExpedition_ProtoFunID_FunID;
const int stRetFastExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetFastExpedition_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFastExpedition_ProtoFunID_descriptor();
inline const ::std::string& stRetFastExpedition_ProtoFunID_Name(stRetFastExpedition_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFastExpedition_ProtoFunID_descriptor(), value);
}
inline bool stRetFastExpedition_ProtoFunID_Parse(
    const ::std::string& name, stRetFastExpedition_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFastExpedition_ProtoFunID>(
    stRetFastExpedition_ProtoFunID_descriptor(), name, value);
}
enum stReqCancelExpedition_ProtoModID {
  stReqCancelExpedition_ProtoModID_ModID = 6
};
bool stReqCancelExpedition_ProtoModID_IsValid(int value);
const stReqCancelExpedition_ProtoModID stReqCancelExpedition_ProtoModID_ProtoModID_MIN = stReqCancelExpedition_ProtoModID_ModID;
const stReqCancelExpedition_ProtoModID stReqCancelExpedition_ProtoModID_ProtoModID_MAX = stReqCancelExpedition_ProtoModID_ModID;
const int stReqCancelExpedition_ProtoModID_ProtoModID_ARRAYSIZE = stReqCancelExpedition_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCancelExpedition_ProtoModID_descriptor();
inline const ::std::string& stReqCancelExpedition_ProtoModID_Name(stReqCancelExpedition_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCancelExpedition_ProtoModID_descriptor(), value);
}
inline bool stReqCancelExpedition_ProtoModID_Parse(
    const ::std::string& name, stReqCancelExpedition_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCancelExpedition_ProtoModID>(
    stReqCancelExpedition_ProtoModID_descriptor(), name, value);
}
enum stReqCancelExpedition_ProtoFunID {
  stReqCancelExpedition_ProtoFunID_FunID = 61
};
bool stReqCancelExpedition_ProtoFunID_IsValid(int value);
const stReqCancelExpedition_ProtoFunID stReqCancelExpedition_ProtoFunID_ProtoFunID_MIN = stReqCancelExpedition_ProtoFunID_FunID;
const stReqCancelExpedition_ProtoFunID stReqCancelExpedition_ProtoFunID_ProtoFunID_MAX = stReqCancelExpedition_ProtoFunID_FunID;
const int stReqCancelExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCancelExpedition_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCancelExpedition_ProtoFunID_descriptor();
inline const ::std::string& stReqCancelExpedition_ProtoFunID_Name(stReqCancelExpedition_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCancelExpedition_ProtoFunID_descriptor(), value);
}
inline bool stReqCancelExpedition_ProtoFunID_Parse(
    const ::std::string& name, stReqCancelExpedition_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCancelExpedition_ProtoFunID>(
    stReqCancelExpedition_ProtoFunID_descriptor(), name, value);
}
enum stRetCancelExpedition_eResult {
  stRetCancelExpedition_eResult_eSuccess = 1,
  stRetCancelExpedition_eResult_eTime_Out = 2,
  stRetCancelExpedition_eResult_eInvalid_Id = 3
};
bool stRetCancelExpedition_eResult_IsValid(int value);
const stRetCancelExpedition_eResult stRetCancelExpedition_eResult_eResult_MIN = stRetCancelExpedition_eResult_eSuccess;
const stRetCancelExpedition_eResult stRetCancelExpedition_eResult_eResult_MAX = stRetCancelExpedition_eResult_eInvalid_Id;
const int stRetCancelExpedition_eResult_eResult_ARRAYSIZE = stRetCancelExpedition_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCancelExpedition_eResult_descriptor();
inline const ::std::string& stRetCancelExpedition_eResult_Name(stRetCancelExpedition_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCancelExpedition_eResult_descriptor(), value);
}
inline bool stRetCancelExpedition_eResult_Parse(
    const ::std::string& name, stRetCancelExpedition_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCancelExpedition_eResult>(
    stRetCancelExpedition_eResult_descriptor(), name, value);
}
enum stRetCancelExpedition_ProtoModID {
  stRetCancelExpedition_ProtoModID_ModID = 6
};
bool stRetCancelExpedition_ProtoModID_IsValid(int value);
const stRetCancelExpedition_ProtoModID stRetCancelExpedition_ProtoModID_ProtoModID_MIN = stRetCancelExpedition_ProtoModID_ModID;
const stRetCancelExpedition_ProtoModID stRetCancelExpedition_ProtoModID_ProtoModID_MAX = stRetCancelExpedition_ProtoModID_ModID;
const int stRetCancelExpedition_ProtoModID_ProtoModID_ARRAYSIZE = stRetCancelExpedition_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCancelExpedition_ProtoModID_descriptor();
inline const ::std::string& stRetCancelExpedition_ProtoModID_Name(stRetCancelExpedition_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCancelExpedition_ProtoModID_descriptor(), value);
}
inline bool stRetCancelExpedition_ProtoModID_Parse(
    const ::std::string& name, stRetCancelExpedition_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCancelExpedition_ProtoModID>(
    stRetCancelExpedition_ProtoModID_descriptor(), name, value);
}
enum stRetCancelExpedition_ProtoFunID {
  stRetCancelExpedition_ProtoFunID_FunID = 62
};
bool stRetCancelExpedition_ProtoFunID_IsValid(int value);
const stRetCancelExpedition_ProtoFunID stRetCancelExpedition_ProtoFunID_ProtoFunID_MIN = stRetCancelExpedition_ProtoFunID_FunID;
const stRetCancelExpedition_ProtoFunID stRetCancelExpedition_ProtoFunID_ProtoFunID_MAX = stRetCancelExpedition_ProtoFunID_FunID;
const int stRetCancelExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetCancelExpedition_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCancelExpedition_ProtoFunID_descriptor();
inline const ::std::string& stRetCancelExpedition_ProtoFunID_Name(stRetCancelExpedition_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCancelExpedition_ProtoFunID_descriptor(), value);
}
inline bool stRetCancelExpedition_ProtoFunID_Parse(
    const ::std::string& name, stRetCancelExpedition_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCancelExpedition_ProtoFunID>(
    stRetCancelExpedition_ProtoFunID_descriptor(), name, value);
}
enum stReqExpeditionSummary_ProtoModID {
  stReqExpeditionSummary_ProtoModID_ModID = 6
};
bool stReqExpeditionSummary_ProtoModID_IsValid(int value);
const stReqExpeditionSummary_ProtoModID stReqExpeditionSummary_ProtoModID_ProtoModID_MIN = stReqExpeditionSummary_ProtoModID_ModID;
const stReqExpeditionSummary_ProtoModID stReqExpeditionSummary_ProtoModID_ProtoModID_MAX = stReqExpeditionSummary_ProtoModID_ModID;
const int stReqExpeditionSummary_ProtoModID_ProtoModID_ARRAYSIZE = stReqExpeditionSummary_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExpeditionSummary_ProtoModID_descriptor();
inline const ::std::string& stReqExpeditionSummary_ProtoModID_Name(stReqExpeditionSummary_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExpeditionSummary_ProtoModID_descriptor(), value);
}
inline bool stReqExpeditionSummary_ProtoModID_Parse(
    const ::std::string& name, stReqExpeditionSummary_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExpeditionSummary_ProtoModID>(
    stReqExpeditionSummary_ProtoModID_descriptor(), name, value);
}
enum stReqExpeditionSummary_ProtoFunID {
  stReqExpeditionSummary_ProtoFunID_FunID = 63
};
bool stReqExpeditionSummary_ProtoFunID_IsValid(int value);
const stReqExpeditionSummary_ProtoFunID stReqExpeditionSummary_ProtoFunID_ProtoFunID_MIN = stReqExpeditionSummary_ProtoFunID_FunID;
const stReqExpeditionSummary_ProtoFunID stReqExpeditionSummary_ProtoFunID_ProtoFunID_MAX = stReqExpeditionSummary_ProtoFunID_FunID;
const int stReqExpeditionSummary_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqExpeditionSummary_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExpeditionSummary_ProtoFunID_descriptor();
inline const ::std::string& stReqExpeditionSummary_ProtoFunID_Name(stReqExpeditionSummary_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExpeditionSummary_ProtoFunID_descriptor(), value);
}
inline bool stReqExpeditionSummary_ProtoFunID_Parse(
    const ::std::string& name, stReqExpeditionSummary_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExpeditionSummary_ProtoFunID>(
    stReqExpeditionSummary_ProtoFunID_descriptor(), name, value);
}
enum stRetExpeditionSummary_eResult {
  stRetExpeditionSummary_eResult_eSuccess = 1,
  stRetExpeditionSummary_eResult_eLvl_Limit = 2
};
bool stRetExpeditionSummary_eResult_IsValid(int value);
const stRetExpeditionSummary_eResult stRetExpeditionSummary_eResult_eResult_MIN = stRetExpeditionSummary_eResult_eSuccess;
const stRetExpeditionSummary_eResult stRetExpeditionSummary_eResult_eResult_MAX = stRetExpeditionSummary_eResult_eLvl_Limit;
const int stRetExpeditionSummary_eResult_eResult_ARRAYSIZE = stRetExpeditionSummary_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpeditionSummary_eResult_descriptor();
inline const ::std::string& stRetExpeditionSummary_eResult_Name(stRetExpeditionSummary_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpeditionSummary_eResult_descriptor(), value);
}
inline bool stRetExpeditionSummary_eResult_Parse(
    const ::std::string& name, stRetExpeditionSummary_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpeditionSummary_eResult>(
    stRetExpeditionSummary_eResult_descriptor(), name, value);
}
enum stRetExpeditionSummary_ProtoModID {
  stRetExpeditionSummary_ProtoModID_ModID = 6
};
bool stRetExpeditionSummary_ProtoModID_IsValid(int value);
const stRetExpeditionSummary_ProtoModID stRetExpeditionSummary_ProtoModID_ProtoModID_MIN = stRetExpeditionSummary_ProtoModID_ModID;
const stRetExpeditionSummary_ProtoModID stRetExpeditionSummary_ProtoModID_ProtoModID_MAX = stRetExpeditionSummary_ProtoModID_ModID;
const int stRetExpeditionSummary_ProtoModID_ProtoModID_ARRAYSIZE = stRetExpeditionSummary_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpeditionSummary_ProtoModID_descriptor();
inline const ::std::string& stRetExpeditionSummary_ProtoModID_Name(stRetExpeditionSummary_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpeditionSummary_ProtoModID_descriptor(), value);
}
inline bool stRetExpeditionSummary_ProtoModID_Parse(
    const ::std::string& name, stRetExpeditionSummary_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpeditionSummary_ProtoModID>(
    stRetExpeditionSummary_ProtoModID_descriptor(), name, value);
}
enum stRetExpeditionSummary_ProtoFunID {
  stRetExpeditionSummary_ProtoFunID_FunID = 64
};
bool stRetExpeditionSummary_ProtoFunID_IsValid(int value);
const stRetExpeditionSummary_ProtoFunID stRetExpeditionSummary_ProtoFunID_ProtoFunID_MIN = stRetExpeditionSummary_ProtoFunID_FunID;
const stRetExpeditionSummary_ProtoFunID stRetExpeditionSummary_ProtoFunID_ProtoFunID_MAX = stRetExpeditionSummary_ProtoFunID_FunID;
const int stRetExpeditionSummary_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetExpeditionSummary_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetExpeditionSummary_ProtoFunID_descriptor();
inline const ::std::string& stRetExpeditionSummary_ProtoFunID_Name(stRetExpeditionSummary_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetExpeditionSummary_ProtoFunID_descriptor(), value);
}
inline bool stRetExpeditionSummary_ProtoFunID_Parse(
    const ::std::string& name, stRetExpeditionSummary_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetExpeditionSummary_ProtoFunID>(
    stRetExpeditionSummary_ProtoFunID_descriptor(), name, value);
}
enum stReqGloryfashionSortList_ProtoModID {
  stReqGloryfashionSortList_ProtoModID_ModID = 6
};
bool stReqGloryfashionSortList_ProtoModID_IsValid(int value);
const stReqGloryfashionSortList_ProtoModID stReqGloryfashionSortList_ProtoModID_ProtoModID_MIN = stReqGloryfashionSortList_ProtoModID_ModID;
const stReqGloryfashionSortList_ProtoModID stReqGloryfashionSortList_ProtoModID_ProtoModID_MAX = stReqGloryfashionSortList_ProtoModID_ModID;
const int stReqGloryfashionSortList_ProtoModID_ProtoModID_ARRAYSIZE = stReqGloryfashionSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGloryfashionSortList_ProtoModID_descriptor();
inline const ::std::string& stReqGloryfashionSortList_ProtoModID_Name(stReqGloryfashionSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGloryfashionSortList_ProtoModID_descriptor(), value);
}
inline bool stReqGloryfashionSortList_ProtoModID_Parse(
    const ::std::string& name, stReqGloryfashionSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGloryfashionSortList_ProtoModID>(
    stReqGloryfashionSortList_ProtoModID_descriptor(), name, value);
}
enum stReqGloryfashionSortList_ProtoFunID {
  stReqGloryfashionSortList_ProtoFunID_FunID = 65
};
bool stReqGloryfashionSortList_ProtoFunID_IsValid(int value);
const stReqGloryfashionSortList_ProtoFunID stReqGloryfashionSortList_ProtoFunID_ProtoFunID_MIN = stReqGloryfashionSortList_ProtoFunID_FunID;
const stReqGloryfashionSortList_ProtoFunID stReqGloryfashionSortList_ProtoFunID_ProtoFunID_MAX = stReqGloryfashionSortList_ProtoFunID_FunID;
const int stReqGloryfashionSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGloryfashionSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGloryfashionSortList_ProtoFunID_descriptor();
inline const ::std::string& stReqGloryfashionSortList_ProtoFunID_Name(stReqGloryfashionSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGloryfashionSortList_ProtoFunID_descriptor(), value);
}
inline bool stReqGloryfashionSortList_ProtoFunID_Parse(
    const ::std::string& name, stReqGloryfashionSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGloryfashionSortList_ProtoFunID>(
    stReqGloryfashionSortList_ProtoFunID_descriptor(), name, value);
}
enum stGloryfashionSortList_ProtoModID {
  stGloryfashionSortList_ProtoModID_ModID = 6
};
bool stGloryfashionSortList_ProtoModID_IsValid(int value);
const stGloryfashionSortList_ProtoModID stGloryfashionSortList_ProtoModID_ProtoModID_MIN = stGloryfashionSortList_ProtoModID_ModID;
const stGloryfashionSortList_ProtoModID stGloryfashionSortList_ProtoModID_ProtoModID_MAX = stGloryfashionSortList_ProtoModID_ModID;
const int stGloryfashionSortList_ProtoModID_ProtoModID_ARRAYSIZE = stGloryfashionSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGloryfashionSortList_ProtoModID_descriptor();
inline const ::std::string& stGloryfashionSortList_ProtoModID_Name(stGloryfashionSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGloryfashionSortList_ProtoModID_descriptor(), value);
}
inline bool stGloryfashionSortList_ProtoModID_Parse(
    const ::std::string& name, stGloryfashionSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGloryfashionSortList_ProtoModID>(
    stGloryfashionSortList_ProtoModID_descriptor(), name, value);
}
enum stGloryfashionSortList_ProtoFunID {
  stGloryfashionSortList_ProtoFunID_FunID = 66
};
bool stGloryfashionSortList_ProtoFunID_IsValid(int value);
const stGloryfashionSortList_ProtoFunID stGloryfashionSortList_ProtoFunID_ProtoFunID_MIN = stGloryfashionSortList_ProtoFunID_FunID;
const stGloryfashionSortList_ProtoFunID stGloryfashionSortList_ProtoFunID_ProtoFunID_MAX = stGloryfashionSortList_ProtoFunID_FunID;
const int stGloryfashionSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stGloryfashionSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGloryfashionSortList_ProtoFunID_descriptor();
inline const ::std::string& stGloryfashionSortList_ProtoFunID_Name(stGloryfashionSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGloryfashionSortList_ProtoFunID_descriptor(), value);
}
inline bool stGloryfashionSortList_ProtoFunID_Parse(
    const ::std::string& name, stGloryfashionSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGloryfashionSortList_ProtoFunID>(
    stGloryfashionSortList_ProtoFunID_descriptor(), name, value);
}
enum stReqEnterEmeraldDream_ProtoModID {
  stReqEnterEmeraldDream_ProtoModID_ModID = 6
};
bool stReqEnterEmeraldDream_ProtoModID_IsValid(int value);
const stReqEnterEmeraldDream_ProtoModID stReqEnterEmeraldDream_ProtoModID_ProtoModID_MIN = stReqEnterEmeraldDream_ProtoModID_ModID;
const stReqEnterEmeraldDream_ProtoModID stReqEnterEmeraldDream_ProtoModID_ProtoModID_MAX = stReqEnterEmeraldDream_ProtoModID_ModID;
const int stReqEnterEmeraldDream_ProtoModID_ProtoModID_ARRAYSIZE = stReqEnterEmeraldDream_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterEmeraldDream_ProtoModID_descriptor();
inline const ::std::string& stReqEnterEmeraldDream_ProtoModID_Name(stReqEnterEmeraldDream_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterEmeraldDream_ProtoModID_descriptor(), value);
}
inline bool stReqEnterEmeraldDream_ProtoModID_Parse(
    const ::std::string& name, stReqEnterEmeraldDream_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterEmeraldDream_ProtoModID>(
    stReqEnterEmeraldDream_ProtoModID_descriptor(), name, value);
}
enum stReqEnterEmeraldDream_ProtoFunID {
  stReqEnterEmeraldDream_ProtoFunID_FunID = 67
};
bool stReqEnterEmeraldDream_ProtoFunID_IsValid(int value);
const stReqEnterEmeraldDream_ProtoFunID stReqEnterEmeraldDream_ProtoFunID_ProtoFunID_MIN = stReqEnterEmeraldDream_ProtoFunID_FunID;
const stReqEnterEmeraldDream_ProtoFunID stReqEnterEmeraldDream_ProtoFunID_ProtoFunID_MAX = stReqEnterEmeraldDream_ProtoFunID_FunID;
const int stReqEnterEmeraldDream_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEnterEmeraldDream_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterEmeraldDream_ProtoFunID_descriptor();
inline const ::std::string& stReqEnterEmeraldDream_ProtoFunID_Name(stReqEnterEmeraldDream_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterEmeraldDream_ProtoFunID_descriptor(), value);
}
inline bool stReqEnterEmeraldDream_ProtoFunID_Parse(
    const ::std::string& name, stReqEnterEmeraldDream_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterEmeraldDream_ProtoFunID>(
    stReqEnterEmeraldDream_ProtoFunID_descriptor(), name, value);
}
enum stEnterEmeraldDreamResult_eResult {
  stEnterEmeraldDreamResult_eResult_eSuccess = 1,
  stEnterEmeraldDreamResult_eResult_eLvl_Limit = 2,
  stEnterEmeraldDreamResult_eResult_Fight_Num_Not_Enough = 3,
  stEnterEmeraldDreamResult_eResult_SVR_CFG_ERROR = 4,
  stEnterEmeraldDreamResult_eResult_BAG_FULL = 5,
  stEnterEmeraldDreamResult_eResult_NOT_OPEN_TIME = 6
};
bool stEnterEmeraldDreamResult_eResult_IsValid(int value);
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult_eResult_eResult_MIN = stEnterEmeraldDreamResult_eResult_eSuccess;
const stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult_eResult_eResult_MAX = stEnterEmeraldDreamResult_eResult_NOT_OPEN_TIME;
const int stEnterEmeraldDreamResult_eResult_eResult_ARRAYSIZE = stEnterEmeraldDreamResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterEmeraldDreamResult_eResult_descriptor();
inline const ::std::string& stEnterEmeraldDreamResult_eResult_Name(stEnterEmeraldDreamResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterEmeraldDreamResult_eResult_descriptor(), value);
}
inline bool stEnterEmeraldDreamResult_eResult_Parse(
    const ::std::string& name, stEnterEmeraldDreamResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterEmeraldDreamResult_eResult>(
    stEnterEmeraldDreamResult_eResult_descriptor(), name, value);
}
enum stEnterEmeraldDreamResult_ProtoModID {
  stEnterEmeraldDreamResult_ProtoModID_ModID = 6
};
bool stEnterEmeraldDreamResult_ProtoModID_IsValid(int value);
const stEnterEmeraldDreamResult_ProtoModID stEnterEmeraldDreamResult_ProtoModID_ProtoModID_MIN = stEnterEmeraldDreamResult_ProtoModID_ModID;
const stEnterEmeraldDreamResult_ProtoModID stEnterEmeraldDreamResult_ProtoModID_ProtoModID_MAX = stEnterEmeraldDreamResult_ProtoModID_ModID;
const int stEnterEmeraldDreamResult_ProtoModID_ProtoModID_ARRAYSIZE = stEnterEmeraldDreamResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterEmeraldDreamResult_ProtoModID_descriptor();
inline const ::std::string& stEnterEmeraldDreamResult_ProtoModID_Name(stEnterEmeraldDreamResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterEmeraldDreamResult_ProtoModID_descriptor(), value);
}
inline bool stEnterEmeraldDreamResult_ProtoModID_Parse(
    const ::std::string& name, stEnterEmeraldDreamResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterEmeraldDreamResult_ProtoModID>(
    stEnterEmeraldDreamResult_ProtoModID_descriptor(), name, value);
}
enum stEnterEmeraldDreamResult_ProtoFunID {
  stEnterEmeraldDreamResult_ProtoFunID_FunID = 68
};
bool stEnterEmeraldDreamResult_ProtoFunID_IsValid(int value);
const stEnterEmeraldDreamResult_ProtoFunID stEnterEmeraldDreamResult_ProtoFunID_ProtoFunID_MIN = stEnterEmeraldDreamResult_ProtoFunID_FunID;
const stEnterEmeraldDreamResult_ProtoFunID stEnterEmeraldDreamResult_ProtoFunID_ProtoFunID_MAX = stEnterEmeraldDreamResult_ProtoFunID_FunID;
const int stEnterEmeraldDreamResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterEmeraldDreamResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterEmeraldDreamResult_ProtoFunID_descriptor();
inline const ::std::string& stEnterEmeraldDreamResult_ProtoFunID_Name(stEnterEmeraldDreamResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterEmeraldDreamResult_ProtoFunID_descriptor(), value);
}
inline bool stEnterEmeraldDreamResult_ProtoFunID_Parse(
    const ::std::string& name, stEnterEmeraldDreamResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterEmeraldDreamResult_ProtoFunID>(
    stEnterEmeraldDreamResult_ProtoFunID_descriptor(), name, value);
}
enum stResetFightNum_ProtoModID {
  stResetFightNum_ProtoModID_ModID = 6
};
bool stResetFightNum_ProtoModID_IsValid(int value);
const stResetFightNum_ProtoModID stResetFightNum_ProtoModID_ProtoModID_MIN = stResetFightNum_ProtoModID_ModID;
const stResetFightNum_ProtoModID stResetFightNum_ProtoModID_ProtoModID_MAX = stResetFightNum_ProtoModID_ModID;
const int stResetFightNum_ProtoModID_ProtoModID_ARRAYSIZE = stResetFightNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetFightNum_ProtoModID_descriptor();
inline const ::std::string& stResetFightNum_ProtoModID_Name(stResetFightNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetFightNum_ProtoModID_descriptor(), value);
}
inline bool stResetFightNum_ProtoModID_Parse(
    const ::std::string& name, stResetFightNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetFightNum_ProtoModID>(
    stResetFightNum_ProtoModID_descriptor(), name, value);
}
enum stResetFightNum_ProtoFunID {
  stResetFightNum_ProtoFunID_FunID = 69
};
bool stResetFightNum_ProtoFunID_IsValid(int value);
const stResetFightNum_ProtoFunID stResetFightNum_ProtoFunID_ProtoFunID_MIN = stResetFightNum_ProtoFunID_FunID;
const stResetFightNum_ProtoFunID stResetFightNum_ProtoFunID_ProtoFunID_MAX = stResetFightNum_ProtoFunID_FunID;
const int stResetFightNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetFightNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetFightNum_ProtoFunID_descriptor();
inline const ::std::string& stResetFightNum_ProtoFunID_Name(stResetFightNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetFightNum_ProtoFunID_descriptor(), value);
}
inline bool stResetFightNum_ProtoFunID_Parse(
    const ::std::string& name, stResetFightNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetFightNum_ProtoFunID>(
    stResetFightNum_ProtoFunID_descriptor(), name, value);
}
enum stResetFightNumResult_eResult {
  stResetFightNumResult_eResult_SUCCESS = 1,
  stResetFightNumResult_eResult_eGoldCoin_Not_Enough = 2,
  stResetFightNumResult_eResult_eNot_Time_Use_Out = 3
};
bool stResetFightNumResult_eResult_IsValid(int value);
const stResetFightNumResult_eResult stResetFightNumResult_eResult_eResult_MIN = stResetFightNumResult_eResult_SUCCESS;
const stResetFightNumResult_eResult stResetFightNumResult_eResult_eResult_MAX = stResetFightNumResult_eResult_eNot_Time_Use_Out;
const int stResetFightNumResult_eResult_eResult_ARRAYSIZE = stResetFightNumResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetFightNumResult_eResult_descriptor();
inline const ::std::string& stResetFightNumResult_eResult_Name(stResetFightNumResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetFightNumResult_eResult_descriptor(), value);
}
inline bool stResetFightNumResult_eResult_Parse(
    const ::std::string& name, stResetFightNumResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetFightNumResult_eResult>(
    stResetFightNumResult_eResult_descriptor(), name, value);
}
enum stResetFightNumResult_ProtoModID {
  stResetFightNumResult_ProtoModID_ModID = 6
};
bool stResetFightNumResult_ProtoModID_IsValid(int value);
const stResetFightNumResult_ProtoModID stResetFightNumResult_ProtoModID_ProtoModID_MIN = stResetFightNumResult_ProtoModID_ModID;
const stResetFightNumResult_ProtoModID stResetFightNumResult_ProtoModID_ProtoModID_MAX = stResetFightNumResult_ProtoModID_ModID;
const int stResetFightNumResult_ProtoModID_ProtoModID_ARRAYSIZE = stResetFightNumResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetFightNumResult_ProtoModID_descriptor();
inline const ::std::string& stResetFightNumResult_ProtoModID_Name(stResetFightNumResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetFightNumResult_ProtoModID_descriptor(), value);
}
inline bool stResetFightNumResult_ProtoModID_Parse(
    const ::std::string& name, stResetFightNumResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetFightNumResult_ProtoModID>(
    stResetFightNumResult_ProtoModID_descriptor(), name, value);
}
enum stResetFightNumResult_ProtoFunID {
  stResetFightNumResult_ProtoFunID_FunID = 70
};
bool stResetFightNumResult_ProtoFunID_IsValid(int value);
const stResetFightNumResult_ProtoFunID stResetFightNumResult_ProtoFunID_ProtoFunID_MIN = stResetFightNumResult_ProtoFunID_FunID;
const stResetFightNumResult_ProtoFunID stResetFightNumResult_ProtoFunID_ProtoFunID_MAX = stResetFightNumResult_ProtoFunID_FunID;
const int stResetFightNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetFightNumResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetFightNumResult_ProtoFunID_descriptor();
inline const ::std::string& stResetFightNumResult_ProtoFunID_Name(stResetFightNumResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetFightNumResult_ProtoFunID_descriptor(), value);
}
inline bool stResetFightNumResult_ProtoFunID_Parse(
    const ::std::string& name, stResetFightNumResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetFightNumResult_ProtoFunID>(
    stResetFightNumResult_ProtoFunID_descriptor(), name, value);
}
enum stReqEmeraldDreamSortList_ProtoModID {
  stReqEmeraldDreamSortList_ProtoModID_ModID = 6
};
bool stReqEmeraldDreamSortList_ProtoModID_IsValid(int value);
const stReqEmeraldDreamSortList_ProtoModID stReqEmeraldDreamSortList_ProtoModID_ProtoModID_MIN = stReqEmeraldDreamSortList_ProtoModID_ModID;
const stReqEmeraldDreamSortList_ProtoModID stReqEmeraldDreamSortList_ProtoModID_ProtoModID_MAX = stReqEmeraldDreamSortList_ProtoModID_ModID;
const int stReqEmeraldDreamSortList_ProtoModID_ProtoModID_ARRAYSIZE = stReqEmeraldDreamSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEmeraldDreamSortList_ProtoModID_descriptor();
inline const ::std::string& stReqEmeraldDreamSortList_ProtoModID_Name(stReqEmeraldDreamSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEmeraldDreamSortList_ProtoModID_descriptor(), value);
}
inline bool stReqEmeraldDreamSortList_ProtoModID_Parse(
    const ::std::string& name, stReqEmeraldDreamSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEmeraldDreamSortList_ProtoModID>(
    stReqEmeraldDreamSortList_ProtoModID_descriptor(), name, value);
}
enum stReqEmeraldDreamSortList_ProtoFunID {
  stReqEmeraldDreamSortList_ProtoFunID_FunID = 71
};
bool stReqEmeraldDreamSortList_ProtoFunID_IsValid(int value);
const stReqEmeraldDreamSortList_ProtoFunID stReqEmeraldDreamSortList_ProtoFunID_ProtoFunID_MIN = stReqEmeraldDreamSortList_ProtoFunID_FunID;
const stReqEmeraldDreamSortList_ProtoFunID stReqEmeraldDreamSortList_ProtoFunID_ProtoFunID_MAX = stReqEmeraldDreamSortList_ProtoFunID_FunID;
const int stReqEmeraldDreamSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEmeraldDreamSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEmeraldDreamSortList_ProtoFunID_descriptor();
inline const ::std::string& stReqEmeraldDreamSortList_ProtoFunID_Name(stReqEmeraldDreamSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEmeraldDreamSortList_ProtoFunID_descriptor(), value);
}
inline bool stReqEmeraldDreamSortList_ProtoFunID_Parse(
    const ::std::string& name, stReqEmeraldDreamSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEmeraldDreamSortList_ProtoFunID>(
    stReqEmeraldDreamSortList_ProtoFunID_descriptor(), name, value);
}
enum stEmeraldDreamSortList_ProtoModID {
  stEmeraldDreamSortList_ProtoModID_ModID = 6
};
bool stEmeraldDreamSortList_ProtoModID_IsValid(int value);
const stEmeraldDreamSortList_ProtoModID stEmeraldDreamSortList_ProtoModID_ProtoModID_MIN = stEmeraldDreamSortList_ProtoModID_ModID;
const stEmeraldDreamSortList_ProtoModID stEmeraldDreamSortList_ProtoModID_ProtoModID_MAX = stEmeraldDreamSortList_ProtoModID_ModID;
const int stEmeraldDreamSortList_ProtoModID_ProtoModID_ARRAYSIZE = stEmeraldDreamSortList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEmeraldDreamSortList_ProtoModID_descriptor();
inline const ::std::string& stEmeraldDreamSortList_ProtoModID_Name(stEmeraldDreamSortList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEmeraldDreamSortList_ProtoModID_descriptor(), value);
}
inline bool stEmeraldDreamSortList_ProtoModID_Parse(
    const ::std::string& name, stEmeraldDreamSortList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEmeraldDreamSortList_ProtoModID>(
    stEmeraldDreamSortList_ProtoModID_descriptor(), name, value);
}
enum stEmeraldDreamSortList_ProtoFunID {
  stEmeraldDreamSortList_ProtoFunID_FunID = 72
};
bool stEmeraldDreamSortList_ProtoFunID_IsValid(int value);
const stEmeraldDreamSortList_ProtoFunID stEmeraldDreamSortList_ProtoFunID_ProtoFunID_MIN = stEmeraldDreamSortList_ProtoFunID_FunID;
const stEmeraldDreamSortList_ProtoFunID stEmeraldDreamSortList_ProtoFunID_ProtoFunID_MAX = stEmeraldDreamSortList_ProtoFunID_FunID;
const int stEmeraldDreamSortList_ProtoFunID_ProtoFunID_ARRAYSIZE = stEmeraldDreamSortList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEmeraldDreamSortList_ProtoFunID_descriptor();
inline const ::std::string& stEmeraldDreamSortList_ProtoFunID_Name(stEmeraldDreamSortList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEmeraldDreamSortList_ProtoFunID_descriptor(), value);
}
inline bool stEmeraldDreamSortList_ProtoFunID_Parse(
    const ::std::string& name, stEmeraldDreamSortList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEmeraldDreamSortList_ProtoFunID>(
    stEmeraldDreamSortList_ProtoFunID_descriptor(), name, value);
}
enum stSendRankInfo_ProtoModID {
  stSendRankInfo_ProtoModID_ModID = 6
};
bool stSendRankInfo_ProtoModID_IsValid(int value);
const stSendRankInfo_ProtoModID stSendRankInfo_ProtoModID_ProtoModID_MIN = stSendRankInfo_ProtoModID_ModID;
const stSendRankInfo_ProtoModID stSendRankInfo_ProtoModID_ProtoModID_MAX = stSendRankInfo_ProtoModID_ModID;
const int stSendRankInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSendRankInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendRankInfo_ProtoModID_descriptor();
inline const ::std::string& stSendRankInfo_ProtoModID_Name(stSendRankInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendRankInfo_ProtoModID_descriptor(), value);
}
inline bool stSendRankInfo_ProtoModID_Parse(
    const ::std::string& name, stSendRankInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendRankInfo_ProtoModID>(
    stSendRankInfo_ProtoModID_descriptor(), name, value);
}
enum stSendRankInfo_ProtoFunID {
  stSendRankInfo_ProtoFunID_FunID = 73
};
bool stSendRankInfo_ProtoFunID_IsValid(int value);
const stSendRankInfo_ProtoFunID stSendRankInfo_ProtoFunID_ProtoFunID_MIN = stSendRankInfo_ProtoFunID_FunID;
const stSendRankInfo_ProtoFunID stSendRankInfo_ProtoFunID_ProtoFunID_MAX = stSendRankInfo_ProtoFunID_FunID;
const int stSendRankInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendRankInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendRankInfo_ProtoFunID_descriptor();
inline const ::std::string& stSendRankInfo_ProtoFunID_Name(stSendRankInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendRankInfo_ProtoFunID_descriptor(), value);
}
inline bool stSendRankInfo_ProtoFunID_Parse(
    const ::std::string& name, stSendRankInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendRankInfo_ProtoFunID>(
    stSendRankInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqSurplusNum_ProtoModID {
  stReqSurplusNum_ProtoModID_ModID = 6
};
bool stReqSurplusNum_ProtoModID_IsValid(int value);
const stReqSurplusNum_ProtoModID stReqSurplusNum_ProtoModID_ProtoModID_MIN = stReqSurplusNum_ProtoModID_ModID;
const stReqSurplusNum_ProtoModID stReqSurplusNum_ProtoModID_ProtoModID_MAX = stReqSurplusNum_ProtoModID_ModID;
const int stReqSurplusNum_ProtoModID_ProtoModID_ARRAYSIZE = stReqSurplusNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSurplusNum_ProtoModID_descriptor();
inline const ::std::string& stReqSurplusNum_ProtoModID_Name(stReqSurplusNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSurplusNum_ProtoModID_descriptor(), value);
}
inline bool stReqSurplusNum_ProtoModID_Parse(
    const ::std::string& name, stReqSurplusNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSurplusNum_ProtoModID>(
    stReqSurplusNum_ProtoModID_descriptor(), name, value);
}
enum stReqSurplusNum_ProtoFunID {
  stReqSurplusNum_ProtoFunID_FunID = 74
};
bool stReqSurplusNum_ProtoFunID_IsValid(int value);
const stReqSurplusNum_ProtoFunID stReqSurplusNum_ProtoFunID_ProtoFunID_MIN = stReqSurplusNum_ProtoFunID_FunID;
const stReqSurplusNum_ProtoFunID stReqSurplusNum_ProtoFunID_ProtoFunID_MAX = stReqSurplusNum_ProtoFunID_FunID;
const int stReqSurplusNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSurplusNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSurplusNum_ProtoFunID_descriptor();
inline const ::std::string& stReqSurplusNum_ProtoFunID_Name(stReqSurplusNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSurplusNum_ProtoFunID_descriptor(), value);
}
inline bool stReqSurplusNum_ProtoFunID_Parse(
    const ::std::string& name, stReqSurplusNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSurplusNum_ProtoFunID>(
    stReqSurplusNum_ProtoFunID_descriptor(), name, value);
}
enum stSurplusNumResult_ProtoModID {
  stSurplusNumResult_ProtoModID_ModID = 6
};
bool stSurplusNumResult_ProtoModID_IsValid(int value);
const stSurplusNumResult_ProtoModID stSurplusNumResult_ProtoModID_ProtoModID_MIN = stSurplusNumResult_ProtoModID_ModID;
const stSurplusNumResult_ProtoModID stSurplusNumResult_ProtoModID_ProtoModID_MAX = stSurplusNumResult_ProtoModID_ModID;
const int stSurplusNumResult_ProtoModID_ProtoModID_ARRAYSIZE = stSurplusNumResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSurplusNumResult_ProtoModID_descriptor();
inline const ::std::string& stSurplusNumResult_ProtoModID_Name(stSurplusNumResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSurplusNumResult_ProtoModID_descriptor(), value);
}
inline bool stSurplusNumResult_ProtoModID_Parse(
    const ::std::string& name, stSurplusNumResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSurplusNumResult_ProtoModID>(
    stSurplusNumResult_ProtoModID_descriptor(), name, value);
}
enum stSurplusNumResult_ProtoFunID {
  stSurplusNumResult_ProtoFunID_FunID = 75
};
bool stSurplusNumResult_ProtoFunID_IsValid(int value);
const stSurplusNumResult_ProtoFunID stSurplusNumResult_ProtoFunID_ProtoFunID_MIN = stSurplusNumResult_ProtoFunID_FunID;
const stSurplusNumResult_ProtoFunID stSurplusNumResult_ProtoFunID_ProtoFunID_MAX = stSurplusNumResult_ProtoFunID_FunID;
const int stSurplusNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSurplusNumResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSurplusNumResult_ProtoFunID_descriptor();
inline const ::std::string& stSurplusNumResult_ProtoFunID_Name(stSurplusNumResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSurplusNumResult_ProtoFunID_descriptor(), value);
}
inline bool stSurplusNumResult_ProtoFunID_Parse(
    const ::std::string& name, stSurplusNumResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSurplusNumResult_ProtoFunID>(
    stSurplusNumResult_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenLeagueWindow_ProtoModID {
  stReqOpenLeagueWindow_ProtoModID_ModID = 6
};
bool stReqOpenLeagueWindow_ProtoModID_IsValid(int value);
const stReqOpenLeagueWindow_ProtoModID stReqOpenLeagueWindow_ProtoModID_ProtoModID_MIN = stReqOpenLeagueWindow_ProtoModID_ModID;
const stReqOpenLeagueWindow_ProtoModID stReqOpenLeagueWindow_ProtoModID_ProtoModID_MAX = stReqOpenLeagueWindow_ProtoModID_ModID;
const int stReqOpenLeagueWindow_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenLeagueWindow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenLeagueWindow_ProtoModID_descriptor();
inline const ::std::string& stReqOpenLeagueWindow_ProtoModID_Name(stReqOpenLeagueWindow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenLeagueWindow_ProtoModID_descriptor(), value);
}
inline bool stReqOpenLeagueWindow_ProtoModID_Parse(
    const ::std::string& name, stReqOpenLeagueWindow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenLeagueWindow_ProtoModID>(
    stReqOpenLeagueWindow_ProtoModID_descriptor(), name, value);
}
enum stReqOpenLeagueWindow_ProtoFunID {
  stReqOpenLeagueWindow_ProtoFunID_FunID = 76
};
bool stReqOpenLeagueWindow_ProtoFunID_IsValid(int value);
const stReqOpenLeagueWindow_ProtoFunID stReqOpenLeagueWindow_ProtoFunID_ProtoFunID_MIN = stReqOpenLeagueWindow_ProtoFunID_FunID;
const stReqOpenLeagueWindow_ProtoFunID stReqOpenLeagueWindow_ProtoFunID_ProtoFunID_MAX = stReqOpenLeagueWindow_ProtoFunID_FunID;
const int stReqOpenLeagueWindow_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenLeagueWindow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenLeagueWindow_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenLeagueWindow_ProtoFunID_Name(stReqOpenLeagueWindow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenLeagueWindow_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenLeagueWindow_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenLeagueWindow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenLeagueWindow_ProtoFunID>(
    stReqOpenLeagueWindow_ProtoFunID_descriptor(), name, value);
}
enum stOpenLeagueWindowResult_eStatus {
  stOpenLeagueWindowResult_eStatus_eQualified = 1,
  stOpenLeagueWindowResult_eStatus_eNoQualified = 2
};
bool stOpenLeagueWindowResult_eStatus_IsValid(int value);
const stOpenLeagueWindowResult_eStatus stOpenLeagueWindowResult_eStatus_eStatus_MIN = stOpenLeagueWindowResult_eStatus_eQualified;
const stOpenLeagueWindowResult_eStatus stOpenLeagueWindowResult_eStatus_eStatus_MAX = stOpenLeagueWindowResult_eStatus_eNoQualified;
const int stOpenLeagueWindowResult_eStatus_eStatus_ARRAYSIZE = stOpenLeagueWindowResult_eStatus_eStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_eStatus_descriptor();
inline const ::std::string& stOpenLeagueWindowResult_eStatus_Name(stOpenLeagueWindowResult_eStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenLeagueWindowResult_eStatus_descriptor(), value);
}
inline bool stOpenLeagueWindowResult_eStatus_Parse(
    const ::std::string& name, stOpenLeagueWindowResult_eStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenLeagueWindowResult_eStatus>(
    stOpenLeagueWindowResult_eStatus_descriptor(), name, value);
}
enum stOpenLeagueWindowResult_eSession {
  stOpenLeagueWindowResult_eSession_eSixteen = 1,
  stOpenLeagueWindowResult_eSession_eEight = 2,
  stOpenLeagueWindowResult_eSession_eFour = 3,
  stOpenLeagueWindowResult_eSession_eTwo = 4
};
bool stOpenLeagueWindowResult_eSession_IsValid(int value);
const stOpenLeagueWindowResult_eSession stOpenLeagueWindowResult_eSession_eSession_MIN = stOpenLeagueWindowResult_eSession_eSixteen;
const stOpenLeagueWindowResult_eSession stOpenLeagueWindowResult_eSession_eSession_MAX = stOpenLeagueWindowResult_eSession_eTwo;
const int stOpenLeagueWindowResult_eSession_eSession_ARRAYSIZE = stOpenLeagueWindowResult_eSession_eSession_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_eSession_descriptor();
inline const ::std::string& stOpenLeagueWindowResult_eSession_Name(stOpenLeagueWindowResult_eSession value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenLeagueWindowResult_eSession_descriptor(), value);
}
inline bool stOpenLeagueWindowResult_eSession_Parse(
    const ::std::string& name, stOpenLeagueWindowResult_eSession* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenLeagueWindowResult_eSession>(
    stOpenLeagueWindowResult_eSession_descriptor(), name, value);
}
enum stOpenLeagueWindowResult_ProtoModID {
  stOpenLeagueWindowResult_ProtoModID_ModID = 6
};
bool stOpenLeagueWindowResult_ProtoModID_IsValid(int value);
const stOpenLeagueWindowResult_ProtoModID stOpenLeagueWindowResult_ProtoModID_ProtoModID_MIN = stOpenLeagueWindowResult_ProtoModID_ModID;
const stOpenLeagueWindowResult_ProtoModID stOpenLeagueWindowResult_ProtoModID_ProtoModID_MAX = stOpenLeagueWindowResult_ProtoModID_ModID;
const int stOpenLeagueWindowResult_ProtoModID_ProtoModID_ARRAYSIZE = stOpenLeagueWindowResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_ProtoModID_descriptor();
inline const ::std::string& stOpenLeagueWindowResult_ProtoModID_Name(stOpenLeagueWindowResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenLeagueWindowResult_ProtoModID_descriptor(), value);
}
inline bool stOpenLeagueWindowResult_ProtoModID_Parse(
    const ::std::string& name, stOpenLeagueWindowResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenLeagueWindowResult_ProtoModID>(
    stOpenLeagueWindowResult_ProtoModID_descriptor(), name, value);
}
enum stOpenLeagueWindowResult_ProtoFunID {
  stOpenLeagueWindowResult_ProtoFunID_FunID = 77
};
bool stOpenLeagueWindowResult_ProtoFunID_IsValid(int value);
const stOpenLeagueWindowResult_ProtoFunID stOpenLeagueWindowResult_ProtoFunID_ProtoFunID_MIN = stOpenLeagueWindowResult_ProtoFunID_FunID;
const stOpenLeagueWindowResult_ProtoFunID stOpenLeagueWindowResult_ProtoFunID_ProtoFunID_MAX = stOpenLeagueWindowResult_ProtoFunID_FunID;
const int stOpenLeagueWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpenLeagueWindowResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenLeagueWindowResult_ProtoFunID_descriptor();
inline const ::std::string& stOpenLeagueWindowResult_ProtoFunID_Name(stOpenLeagueWindowResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenLeagueWindowResult_ProtoFunID_descriptor(), value);
}
inline bool stOpenLeagueWindowResult_ProtoFunID_Parse(
    const ::std::string& name, stOpenLeagueWindowResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenLeagueWindowResult_ProtoFunID>(
    stOpenLeagueWindowResult_ProtoFunID_descriptor(), name, value);
}
enum stReqHeroLeagueMatch_ProtoModID {
  stReqHeroLeagueMatch_ProtoModID_ModID = 6
};
bool stReqHeroLeagueMatch_ProtoModID_IsValid(int value);
const stReqHeroLeagueMatch_ProtoModID stReqHeroLeagueMatch_ProtoModID_ProtoModID_MIN = stReqHeroLeagueMatch_ProtoModID_ModID;
const stReqHeroLeagueMatch_ProtoModID stReqHeroLeagueMatch_ProtoModID_ProtoModID_MAX = stReqHeroLeagueMatch_ProtoModID_ModID;
const int stReqHeroLeagueMatch_ProtoModID_ProtoModID_ARRAYSIZE = stReqHeroLeagueMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroLeagueMatch_ProtoModID_descriptor();
inline const ::std::string& stReqHeroLeagueMatch_ProtoModID_Name(stReqHeroLeagueMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroLeagueMatch_ProtoModID_descriptor(), value);
}
inline bool stReqHeroLeagueMatch_ProtoModID_Parse(
    const ::std::string& name, stReqHeroLeagueMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroLeagueMatch_ProtoModID>(
    stReqHeroLeagueMatch_ProtoModID_descriptor(), name, value);
}
enum stReqHeroLeagueMatch_ProtoFunID {
  stReqHeroLeagueMatch_ProtoFunID_FunID = 78
};
bool stReqHeroLeagueMatch_ProtoFunID_IsValid(int value);
const stReqHeroLeagueMatch_ProtoFunID stReqHeroLeagueMatch_ProtoFunID_ProtoFunID_MIN = stReqHeroLeagueMatch_ProtoFunID_FunID;
const stReqHeroLeagueMatch_ProtoFunID stReqHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX = stReqHeroLeagueMatch_ProtoFunID_FunID;
const int stReqHeroLeagueMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroLeagueMatch_ProtoFunID_descriptor();
inline const ::std::string& stReqHeroLeagueMatch_ProtoFunID_Name(stReqHeroLeagueMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroLeagueMatch_ProtoFunID_descriptor(), value);
}
inline bool stReqHeroLeagueMatch_ProtoFunID_Parse(
    const ::std::string& name, stReqHeroLeagueMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroLeagueMatch_ProtoFunID>(
    stReqHeroLeagueMatch_ProtoFunID_descriptor(), name, value);
}
enum stHeroLeagueMatchResult_eResult {
  stHeroLeagueMatchResult_eResult_eSucess = 1,
  stHeroLeagueMatchResult_eResult_eWait = 2,
  stHeroLeagueMatchResult_eResult_eFail = 3,
  stHeroLeagueMatchResult_eResult_eNot_In_Time = 4,
  stHeroLeagueMatchResult_eResult_eLv_Limit = 5,
  stHeroLeagueMatchResult_eResult_eRegister_Num_Lack = 6,
  stHeroLeagueMatchResult_eResult_eNo_Qualification = 7
};
bool stHeroLeagueMatchResult_eResult_IsValid(int value);
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult_eResult_eResult_MIN = stHeroLeagueMatchResult_eResult_eSucess;
const stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult_eResult_eResult_MAX = stHeroLeagueMatchResult_eResult_eNo_Qualification;
const int stHeroLeagueMatchResult_eResult_eResult_ARRAYSIZE = stHeroLeagueMatchResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatchResult_eResult_descriptor();
inline const ::std::string& stHeroLeagueMatchResult_eResult_Name(stHeroLeagueMatchResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueMatchResult_eResult_descriptor(), value);
}
inline bool stHeroLeagueMatchResult_eResult_Parse(
    const ::std::string& name, stHeroLeagueMatchResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueMatchResult_eResult>(
    stHeroLeagueMatchResult_eResult_descriptor(), name, value);
}
enum stHeroLeagueMatchResult_ProtoModID {
  stHeroLeagueMatchResult_ProtoModID_ModID = 6
};
bool stHeroLeagueMatchResult_ProtoModID_IsValid(int value);
const stHeroLeagueMatchResult_ProtoModID stHeroLeagueMatchResult_ProtoModID_ProtoModID_MIN = stHeroLeagueMatchResult_ProtoModID_ModID;
const stHeroLeagueMatchResult_ProtoModID stHeroLeagueMatchResult_ProtoModID_ProtoModID_MAX = stHeroLeagueMatchResult_ProtoModID_ModID;
const int stHeroLeagueMatchResult_ProtoModID_ProtoModID_ARRAYSIZE = stHeroLeagueMatchResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatchResult_ProtoModID_descriptor();
inline const ::std::string& stHeroLeagueMatchResult_ProtoModID_Name(stHeroLeagueMatchResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueMatchResult_ProtoModID_descriptor(), value);
}
inline bool stHeroLeagueMatchResult_ProtoModID_Parse(
    const ::std::string& name, stHeroLeagueMatchResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueMatchResult_ProtoModID>(
    stHeroLeagueMatchResult_ProtoModID_descriptor(), name, value);
}
enum stHeroLeagueMatchResult_ProtoFunID {
  stHeroLeagueMatchResult_ProtoFunID_FunID = 79
};
bool stHeroLeagueMatchResult_ProtoFunID_IsValid(int value);
const stHeroLeagueMatchResult_ProtoFunID stHeroLeagueMatchResult_ProtoFunID_ProtoFunID_MIN = stHeroLeagueMatchResult_ProtoFunID_FunID;
const stHeroLeagueMatchResult_ProtoFunID stHeroLeagueMatchResult_ProtoFunID_ProtoFunID_MAX = stHeroLeagueMatchResult_ProtoFunID_FunID;
const int stHeroLeagueMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroLeagueMatchResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroLeagueMatchResult_ProtoFunID_descriptor();
inline const ::std::string& stHeroLeagueMatchResult_ProtoFunID_Name(stHeroLeagueMatchResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroLeagueMatchResult_ProtoFunID_descriptor(), value);
}
inline bool stHeroLeagueMatchResult_ProtoFunID_Parse(
    const ::std::string& name, stHeroLeagueMatchResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroLeagueMatchResult_ProtoFunID>(
    stHeroLeagueMatchResult_ProtoFunID_descriptor(), name, value);
}
enum stReqMenberInfo_ProtoModID {
  stReqMenberInfo_ProtoModID_ModID = 6
};
bool stReqMenberInfo_ProtoModID_IsValid(int value);
const stReqMenberInfo_ProtoModID stReqMenberInfo_ProtoModID_ProtoModID_MIN = stReqMenberInfo_ProtoModID_ModID;
const stReqMenberInfo_ProtoModID stReqMenberInfo_ProtoModID_ProtoModID_MAX = stReqMenberInfo_ProtoModID_ModID;
const int stReqMenberInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqMenberInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoModID_descriptor();
inline const ::std::string& stReqMenberInfo_ProtoModID_Name(stReqMenberInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMenberInfo_ProtoModID_descriptor(), value);
}
inline bool stReqMenberInfo_ProtoModID_Parse(
    const ::std::string& name, stReqMenberInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMenberInfo_ProtoModID>(
    stReqMenberInfo_ProtoModID_descriptor(), name, value);
}
enum stReqMenberInfo_ProtoFunID {
  stReqMenberInfo_ProtoFunID_FunID = 80
};
bool stReqMenberInfo_ProtoFunID_IsValid(int value);
const stReqMenberInfo_ProtoFunID stReqMenberInfo_ProtoFunID_ProtoFunID_MIN = stReqMenberInfo_ProtoFunID_FunID;
const stReqMenberInfo_ProtoFunID stReqMenberInfo_ProtoFunID_ProtoFunID_MAX = stReqMenberInfo_ProtoFunID_FunID;
const int stReqMenberInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqMenberInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMenberInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqMenberInfo_ProtoFunID_Name(stReqMenberInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMenberInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqMenberInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqMenberInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMenberInfo_ProtoFunID>(
    stReqMenberInfo_ProtoFunID_descriptor(), name, value);
}
enum stMemberinfo_ProtoModID {
  stMemberinfo_ProtoModID_ModID = 6
};
bool stMemberinfo_ProtoModID_IsValid(int value);
const stMemberinfo_ProtoModID stMemberinfo_ProtoModID_ProtoModID_MIN = stMemberinfo_ProtoModID_ModID;
const stMemberinfo_ProtoModID stMemberinfo_ProtoModID_ProtoModID_MAX = stMemberinfo_ProtoModID_ModID;
const int stMemberinfo_ProtoModID_ProtoModID_ARRAYSIZE = stMemberinfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMemberinfo_ProtoModID_descriptor();
inline const ::std::string& stMemberinfo_ProtoModID_Name(stMemberinfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMemberinfo_ProtoModID_descriptor(), value);
}
inline bool stMemberinfo_ProtoModID_Parse(
    const ::std::string& name, stMemberinfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMemberinfo_ProtoModID>(
    stMemberinfo_ProtoModID_descriptor(), name, value);
}
enum stMemberinfo_ProtoFunID {
  stMemberinfo_ProtoFunID_FunID = 81
};
bool stMemberinfo_ProtoFunID_IsValid(int value);
const stMemberinfo_ProtoFunID stMemberinfo_ProtoFunID_ProtoFunID_MIN = stMemberinfo_ProtoFunID_FunID;
const stMemberinfo_ProtoFunID stMemberinfo_ProtoFunID_ProtoFunID_MAX = stMemberinfo_ProtoFunID_FunID;
const int stMemberinfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stMemberinfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMemberinfo_ProtoFunID_descriptor();
inline const ::std::string& stMemberinfo_ProtoFunID_Name(stMemberinfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMemberinfo_ProtoFunID_descriptor(), value);
}
inline bool stMemberinfo_ProtoFunID_Parse(
    const ::std::string& name, stMemberinfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMemberinfo_ProtoFunID>(
    stMemberinfo_ProtoFunID_descriptor(), name, value);
}
enum stCancelHeroLeagueMatch_ProtoModID {
  stCancelHeroLeagueMatch_ProtoModID_ModID = 6
};
bool stCancelHeroLeagueMatch_ProtoModID_IsValid(int value);
const stCancelHeroLeagueMatch_ProtoModID stCancelHeroLeagueMatch_ProtoModID_ProtoModID_MIN = stCancelHeroLeagueMatch_ProtoModID_ModID;
const stCancelHeroLeagueMatch_ProtoModID stCancelHeroLeagueMatch_ProtoModID_ProtoModID_MAX = stCancelHeroLeagueMatch_ProtoModID_ModID;
const int stCancelHeroLeagueMatch_ProtoModID_ProtoModID_ARRAYSIZE = stCancelHeroLeagueMatch_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelHeroLeagueMatch_ProtoModID_descriptor();
inline const ::std::string& stCancelHeroLeagueMatch_ProtoModID_Name(stCancelHeroLeagueMatch_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelHeroLeagueMatch_ProtoModID_descriptor(), value);
}
inline bool stCancelHeroLeagueMatch_ProtoModID_Parse(
    const ::std::string& name, stCancelHeroLeagueMatch_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelHeroLeagueMatch_ProtoModID>(
    stCancelHeroLeagueMatch_ProtoModID_descriptor(), name, value);
}
enum stCancelHeroLeagueMatch_ProtoFunID {
  stCancelHeroLeagueMatch_ProtoFunID_FunID = 82
};
bool stCancelHeroLeagueMatch_ProtoFunID_IsValid(int value);
const stCancelHeroLeagueMatch_ProtoFunID stCancelHeroLeagueMatch_ProtoFunID_ProtoFunID_MIN = stCancelHeroLeagueMatch_ProtoFunID_FunID;
const stCancelHeroLeagueMatch_ProtoFunID stCancelHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX = stCancelHeroLeagueMatch_ProtoFunID_FunID;
const int stCancelHeroLeagueMatch_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelHeroLeagueMatch_ProtoFunID_descriptor();
inline const ::std::string& stCancelHeroLeagueMatch_ProtoFunID_Name(stCancelHeroLeagueMatch_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelHeroLeagueMatch_ProtoFunID_descriptor(), value);
}
inline bool stCancelHeroLeagueMatch_ProtoFunID_Parse(
    const ::std::string& name, stCancelHeroLeagueMatch_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelHeroLeagueMatch_ProtoFunID>(
    stCancelHeroLeagueMatch_ProtoFunID_descriptor(), name, value);
}
enum stCanceHeroLeagueResult_eResult {
  stCanceHeroLeagueResult_eResult_eSuccess = 1,
  stCanceHeroLeagueResult_eResult_eFail = 2
};
bool stCanceHeroLeagueResult_eResult_IsValid(int value);
const stCanceHeroLeagueResult_eResult stCanceHeroLeagueResult_eResult_eResult_MIN = stCanceHeroLeagueResult_eResult_eSuccess;
const stCanceHeroLeagueResult_eResult stCanceHeroLeagueResult_eResult_eResult_MAX = stCanceHeroLeagueResult_eResult_eFail;
const int stCanceHeroLeagueResult_eResult_eResult_ARRAYSIZE = stCanceHeroLeagueResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCanceHeroLeagueResult_eResult_descriptor();
inline const ::std::string& stCanceHeroLeagueResult_eResult_Name(stCanceHeroLeagueResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCanceHeroLeagueResult_eResult_descriptor(), value);
}
inline bool stCanceHeroLeagueResult_eResult_Parse(
    const ::std::string& name, stCanceHeroLeagueResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCanceHeroLeagueResult_eResult>(
    stCanceHeroLeagueResult_eResult_descriptor(), name, value);
}
enum stCanceHeroLeagueResult_ProtoModID {
  stCanceHeroLeagueResult_ProtoModID_ModID = 6
};
bool stCanceHeroLeagueResult_ProtoModID_IsValid(int value);
const stCanceHeroLeagueResult_ProtoModID stCanceHeroLeagueResult_ProtoModID_ProtoModID_MIN = stCanceHeroLeagueResult_ProtoModID_ModID;
const stCanceHeroLeagueResult_ProtoModID stCanceHeroLeagueResult_ProtoModID_ProtoModID_MAX = stCanceHeroLeagueResult_ProtoModID_ModID;
const int stCanceHeroLeagueResult_ProtoModID_ProtoModID_ARRAYSIZE = stCanceHeroLeagueResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCanceHeroLeagueResult_ProtoModID_descriptor();
inline const ::std::string& stCanceHeroLeagueResult_ProtoModID_Name(stCanceHeroLeagueResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCanceHeroLeagueResult_ProtoModID_descriptor(), value);
}
inline bool stCanceHeroLeagueResult_ProtoModID_Parse(
    const ::std::string& name, stCanceHeroLeagueResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCanceHeroLeagueResult_ProtoModID>(
    stCanceHeroLeagueResult_ProtoModID_descriptor(), name, value);
}
enum stCanceHeroLeagueResult_ProtoFunID {
  stCanceHeroLeagueResult_ProtoFunID_FunID = 83
};
bool stCanceHeroLeagueResult_ProtoFunID_IsValid(int value);
const stCanceHeroLeagueResult_ProtoFunID stCanceHeroLeagueResult_ProtoFunID_ProtoFunID_MIN = stCanceHeroLeagueResult_ProtoFunID_FunID;
const stCanceHeroLeagueResult_ProtoFunID stCanceHeroLeagueResult_ProtoFunID_ProtoFunID_MAX = stCanceHeroLeagueResult_ProtoFunID_FunID;
const int stCanceHeroLeagueResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCanceHeroLeagueResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCanceHeroLeagueResult_ProtoFunID_descriptor();
inline const ::std::string& stCanceHeroLeagueResult_ProtoFunID_Name(stCanceHeroLeagueResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCanceHeroLeagueResult_ProtoFunID_descriptor(), value);
}
inline bool stCanceHeroLeagueResult_ProtoFunID_Parse(
    const ::std::string& name, stCanceHeroLeagueResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCanceHeroLeagueResult_ProtoFunID>(
    stCanceHeroLeagueResult_ProtoFunID_descriptor(), name, value);
}
enum stReqQualifiedList_eSession {
  stReqQualifiedList_eSession_eSixteen = 1,
  stReqQualifiedList_eSession_eEight = 2,
  stReqQualifiedList_eSession_eFour = 3,
  stReqQualifiedList_eSession_eTwo = 4
};
bool stReqQualifiedList_eSession_IsValid(int value);
const stReqQualifiedList_eSession stReqQualifiedList_eSession_eSession_MIN = stReqQualifiedList_eSession_eSixteen;
const stReqQualifiedList_eSession stReqQualifiedList_eSession_eSession_MAX = stReqQualifiedList_eSession_eTwo;
const int stReqQualifiedList_eSession_eSession_ARRAYSIZE = stReqQualifiedList_eSession_eSession_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqQualifiedList_eSession_descriptor();
inline const ::std::string& stReqQualifiedList_eSession_Name(stReqQualifiedList_eSession value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqQualifiedList_eSession_descriptor(), value);
}
inline bool stReqQualifiedList_eSession_Parse(
    const ::std::string& name, stReqQualifiedList_eSession* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqQualifiedList_eSession>(
    stReqQualifiedList_eSession_descriptor(), name, value);
}
enum stReqQualifiedList_ProtoModID {
  stReqQualifiedList_ProtoModID_ModID = 6
};
bool stReqQualifiedList_ProtoModID_IsValid(int value);
const stReqQualifiedList_ProtoModID stReqQualifiedList_ProtoModID_ProtoModID_MIN = stReqQualifiedList_ProtoModID_ModID;
const stReqQualifiedList_ProtoModID stReqQualifiedList_ProtoModID_ProtoModID_MAX = stReqQualifiedList_ProtoModID_ModID;
const int stReqQualifiedList_ProtoModID_ProtoModID_ARRAYSIZE = stReqQualifiedList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqQualifiedList_ProtoModID_descriptor();
inline const ::std::string& stReqQualifiedList_ProtoModID_Name(stReqQualifiedList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqQualifiedList_ProtoModID_descriptor(), value);
}
inline bool stReqQualifiedList_ProtoModID_Parse(
    const ::std::string& name, stReqQualifiedList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqQualifiedList_ProtoModID>(
    stReqQualifiedList_ProtoModID_descriptor(), name, value);
}
enum stReqQualifiedList_ProtoFunID {
  stReqQualifiedList_ProtoFunID_FunID = 84
};
bool stReqQualifiedList_ProtoFunID_IsValid(int value);
const stReqQualifiedList_ProtoFunID stReqQualifiedList_ProtoFunID_ProtoFunID_MIN = stReqQualifiedList_ProtoFunID_FunID;
const stReqQualifiedList_ProtoFunID stReqQualifiedList_ProtoFunID_ProtoFunID_MAX = stReqQualifiedList_ProtoFunID_FunID;
const int stReqQualifiedList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqQualifiedList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqQualifiedList_ProtoFunID_descriptor();
inline const ::std::string& stReqQualifiedList_ProtoFunID_Name(stReqQualifiedList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqQualifiedList_ProtoFunID_descriptor(), value);
}
inline bool stReqQualifiedList_ProtoFunID_Parse(
    const ::std::string& name, stReqQualifiedList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqQualifiedList_ProtoFunID>(
    stReqQualifiedList_ProtoFunID_descriptor(), name, value);
}
enum stRoleBasicInfo_eCompleteState {
  stRoleBasicInfo_eCompleteState_eSTATE_WIN = 1,
  stRoleBasicInfo_eCompleteState_eSTATE_LOSS = 2,
  stRoleBasicInfo_eCompleteState_esTATE_NOT_ATTEND = 3
};
bool stRoleBasicInfo_eCompleteState_IsValid(int value);
const stRoleBasicInfo_eCompleteState stRoleBasicInfo_eCompleteState_eCompleteState_MIN = stRoleBasicInfo_eCompleteState_eSTATE_WIN;
const stRoleBasicInfo_eCompleteState stRoleBasicInfo_eCompleteState_eCompleteState_MAX = stRoleBasicInfo_eCompleteState_esTATE_NOT_ATTEND;
const int stRoleBasicInfo_eCompleteState_eCompleteState_ARRAYSIZE = stRoleBasicInfo_eCompleteState_eCompleteState_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRoleBasicInfo_eCompleteState_descriptor();
inline const ::std::string& stRoleBasicInfo_eCompleteState_Name(stRoleBasicInfo_eCompleteState value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRoleBasicInfo_eCompleteState_descriptor(), value);
}
inline bool stRoleBasicInfo_eCompleteState_Parse(
    const ::std::string& name, stRoleBasicInfo_eCompleteState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRoleBasicInfo_eCompleteState>(
    stRoleBasicInfo_eCompleteState_descriptor(), name, value);
}
enum stQualifiedListResult_ProtoModID {
  stQualifiedListResult_ProtoModID_ModID = 6
};
bool stQualifiedListResult_ProtoModID_IsValid(int value);
const stQualifiedListResult_ProtoModID stQualifiedListResult_ProtoModID_ProtoModID_MIN = stQualifiedListResult_ProtoModID_ModID;
const stQualifiedListResult_ProtoModID stQualifiedListResult_ProtoModID_ProtoModID_MAX = stQualifiedListResult_ProtoModID_ModID;
const int stQualifiedListResult_ProtoModID_ProtoModID_ARRAYSIZE = stQualifiedListResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQualifiedListResult_ProtoModID_descriptor();
inline const ::std::string& stQualifiedListResult_ProtoModID_Name(stQualifiedListResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQualifiedListResult_ProtoModID_descriptor(), value);
}
inline bool stQualifiedListResult_ProtoModID_Parse(
    const ::std::string& name, stQualifiedListResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQualifiedListResult_ProtoModID>(
    stQualifiedListResult_ProtoModID_descriptor(), name, value);
}
enum stQualifiedListResult_ProtoFunID {
  stQualifiedListResult_ProtoFunID_FunID = 85
};
bool stQualifiedListResult_ProtoFunID_IsValid(int value);
const stQualifiedListResult_ProtoFunID stQualifiedListResult_ProtoFunID_ProtoFunID_MIN = stQualifiedListResult_ProtoFunID_FunID;
const stQualifiedListResult_ProtoFunID stQualifiedListResult_ProtoFunID_ProtoFunID_MAX = stQualifiedListResult_ProtoFunID_FunID;
const int stQualifiedListResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stQualifiedListResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stQualifiedListResult_ProtoFunID_descriptor();
inline const ::std::string& stQualifiedListResult_ProtoFunID_Name(stQualifiedListResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stQualifiedListResult_ProtoFunID_descriptor(), value);
}
inline bool stQualifiedListResult_ProtoFunID_Parse(
    const ::std::string& name, stQualifiedListResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stQualifiedListResult_ProtoFunID>(
    stQualifiedListResult_ProtoFunID_descriptor(), name, value);
}
enum stReqWorship_ProtoModID {
  stReqWorship_ProtoModID_ModID = 6
};
bool stReqWorship_ProtoModID_IsValid(int value);
const stReqWorship_ProtoModID stReqWorship_ProtoModID_ProtoModID_MIN = stReqWorship_ProtoModID_ModID;
const stReqWorship_ProtoModID stReqWorship_ProtoModID_ProtoModID_MAX = stReqWorship_ProtoModID_ModID;
const int stReqWorship_ProtoModID_ProtoModID_ARRAYSIZE = stReqWorship_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqWorship_ProtoModID_descriptor();
inline const ::std::string& stReqWorship_ProtoModID_Name(stReqWorship_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqWorship_ProtoModID_descriptor(), value);
}
inline bool stReqWorship_ProtoModID_Parse(
    const ::std::string& name, stReqWorship_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqWorship_ProtoModID>(
    stReqWorship_ProtoModID_descriptor(), name, value);
}
enum stReqWorship_ProtoFunID {
  stReqWorship_ProtoFunID_FunID = 86
};
bool stReqWorship_ProtoFunID_IsValid(int value);
const stReqWorship_ProtoFunID stReqWorship_ProtoFunID_ProtoFunID_MIN = stReqWorship_ProtoFunID_FunID;
const stReqWorship_ProtoFunID stReqWorship_ProtoFunID_ProtoFunID_MAX = stReqWorship_ProtoFunID_FunID;
const int stReqWorship_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqWorship_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqWorship_ProtoFunID_descriptor();
inline const ::std::string& stReqWorship_ProtoFunID_Name(stReqWorship_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqWorship_ProtoFunID_descriptor(), value);
}
inline bool stReqWorship_ProtoFunID_Parse(
    const ::std::string& name, stReqWorship_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqWorship_ProtoFunID>(
    stReqWorship_ProtoFunID_descriptor(), name, value);
}
enum stWorskipResult_eResult {
  stWorskipResult_eResult_eSuccess = 1,
  stWorskipResult_eResult_eInner_Error = 2,
  stWorskipResult_eResult_eTimeUseOut = 3,
  stWorskipResult_eResult_eNoBody = 4
};
bool stWorskipResult_eResult_IsValid(int value);
const stWorskipResult_eResult stWorskipResult_eResult_eResult_MIN = stWorskipResult_eResult_eSuccess;
const stWorskipResult_eResult stWorskipResult_eResult_eResult_MAX = stWorskipResult_eResult_eNoBody;
const int stWorskipResult_eResult_eResult_ARRAYSIZE = stWorskipResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorskipResult_eResult_descriptor();
inline const ::std::string& stWorskipResult_eResult_Name(stWorskipResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorskipResult_eResult_descriptor(), value);
}
inline bool stWorskipResult_eResult_Parse(
    const ::std::string& name, stWorskipResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorskipResult_eResult>(
    stWorskipResult_eResult_descriptor(), name, value);
}
enum stWorskipResult_ProtoModID {
  stWorskipResult_ProtoModID_ModID = 6
};
bool stWorskipResult_ProtoModID_IsValid(int value);
const stWorskipResult_ProtoModID stWorskipResult_ProtoModID_ProtoModID_MIN = stWorskipResult_ProtoModID_ModID;
const stWorskipResult_ProtoModID stWorskipResult_ProtoModID_ProtoModID_MAX = stWorskipResult_ProtoModID_ModID;
const int stWorskipResult_ProtoModID_ProtoModID_ARRAYSIZE = stWorskipResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoModID_descriptor();
inline const ::std::string& stWorskipResult_ProtoModID_Name(stWorskipResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorskipResult_ProtoModID_descriptor(), value);
}
inline bool stWorskipResult_ProtoModID_Parse(
    const ::std::string& name, stWorskipResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorskipResult_ProtoModID>(
    stWorskipResult_ProtoModID_descriptor(), name, value);
}
enum stWorskipResult_ProtoFunID {
  stWorskipResult_ProtoFunID_FunID = 87
};
bool stWorskipResult_ProtoFunID_IsValid(int value);
const stWorskipResult_ProtoFunID stWorskipResult_ProtoFunID_ProtoFunID_MIN = stWorskipResult_ProtoFunID_FunID;
const stWorskipResult_ProtoFunID stWorskipResult_ProtoFunID_ProtoFunID_MAX = stWorskipResult_ProtoFunID_FunID;
const int stWorskipResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stWorskipResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stWorskipResult_ProtoFunID_descriptor();
inline const ::std::string& stWorskipResult_ProtoFunID_Name(stWorskipResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stWorskipResult_ProtoFunID_descriptor(), value);
}
inline bool stWorskipResult_ProtoFunID_Parse(
    const ::std::string& name, stWorskipResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stWorskipResult_ProtoFunID>(
    stWorskipResult_ProtoFunID_descriptor(), name, value);
}
enum stReqHeroList_stType {
  stReqHeroList_stType_eUpperBounds1 = 1,
  stReqHeroList_stType_eUpperBounds2 = 2,
  stReqHeroList_stType_eUpperBounds3 = 3
};
bool stReqHeroList_stType_IsValid(int value);
const stReqHeroList_stType stReqHeroList_stType_stType_MIN = stReqHeroList_stType_eUpperBounds1;
const stReqHeroList_stType stReqHeroList_stType_stType_MAX = stReqHeroList_stType_eUpperBounds3;
const int stReqHeroList_stType_stType_ARRAYSIZE = stReqHeroList_stType_stType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroList_stType_descriptor();
inline const ::std::string& stReqHeroList_stType_Name(stReqHeroList_stType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroList_stType_descriptor(), value);
}
inline bool stReqHeroList_stType_Parse(
    const ::std::string& name, stReqHeroList_stType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroList_stType>(
    stReqHeroList_stType_descriptor(), name, value);
}
enum stReqHeroList_ProtoModID {
  stReqHeroList_ProtoModID_ModID = 6
};
bool stReqHeroList_ProtoModID_IsValid(int value);
const stReqHeroList_ProtoModID stReqHeroList_ProtoModID_ProtoModID_MIN = stReqHeroList_ProtoModID_ModID;
const stReqHeroList_ProtoModID stReqHeroList_ProtoModID_ProtoModID_MAX = stReqHeroList_ProtoModID_ModID;
const int stReqHeroList_ProtoModID_ProtoModID_ARRAYSIZE = stReqHeroList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroList_ProtoModID_descriptor();
inline const ::std::string& stReqHeroList_ProtoModID_Name(stReqHeroList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroList_ProtoModID_descriptor(), value);
}
inline bool stReqHeroList_ProtoModID_Parse(
    const ::std::string& name, stReqHeroList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroList_ProtoModID>(
    stReqHeroList_ProtoModID_descriptor(), name, value);
}
enum stReqHeroList_ProtoFunID {
  stReqHeroList_ProtoFunID_FunID = 88
};
bool stReqHeroList_ProtoFunID_IsValid(int value);
const stReqHeroList_ProtoFunID stReqHeroList_ProtoFunID_ProtoFunID_MIN = stReqHeroList_ProtoFunID_FunID;
const stReqHeroList_ProtoFunID stReqHeroList_ProtoFunID_ProtoFunID_MAX = stReqHeroList_ProtoFunID_FunID;
const int stReqHeroList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqHeroList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroList_ProtoFunID_descriptor();
inline const ::std::string& stReqHeroList_ProtoFunID_Name(stReqHeroList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroList_ProtoFunID_descriptor(), value);
}
inline bool stReqHeroList_ProtoFunID_Parse(
    const ::std::string& name, stReqHeroList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroList_ProtoFunID>(
    stReqHeroList_ProtoFunID_descriptor(), name, value);
}
enum stHeroListResult_ProtoModID {
  stHeroListResult_ProtoModID_ModID = 6
};
bool stHeroListResult_ProtoModID_IsValid(int value);
const stHeroListResult_ProtoModID stHeroListResult_ProtoModID_ProtoModID_MIN = stHeroListResult_ProtoModID_ModID;
const stHeroListResult_ProtoModID stHeroListResult_ProtoModID_ProtoModID_MAX = stHeroListResult_ProtoModID_ModID;
const int stHeroListResult_ProtoModID_ProtoModID_ARRAYSIZE = stHeroListResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroListResult_ProtoModID_descriptor();
inline const ::std::string& stHeroListResult_ProtoModID_Name(stHeroListResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroListResult_ProtoModID_descriptor(), value);
}
inline bool stHeroListResult_ProtoModID_Parse(
    const ::std::string& name, stHeroListResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroListResult_ProtoModID>(
    stHeroListResult_ProtoModID_descriptor(), name, value);
}
enum stHeroListResult_ProtoFunID {
  stHeroListResult_ProtoFunID_FunID = 89
};
bool stHeroListResult_ProtoFunID_IsValid(int value);
const stHeroListResult_ProtoFunID stHeroListResult_ProtoFunID_ProtoFunID_MIN = stHeroListResult_ProtoFunID_FunID;
const stHeroListResult_ProtoFunID stHeroListResult_ProtoFunID_ProtoFunID_MAX = stHeroListResult_ProtoFunID_FunID;
const int stHeroListResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroListResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroListResult_ProtoFunID_descriptor();
inline const ::std::string& stHeroListResult_ProtoFunID_Name(stHeroListResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroListResult_ProtoFunID_descriptor(), value);
}
inline bool stHeroListResult_ProtoFunID_Parse(
    const ::std::string& name, stHeroListResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroListResult_ProtoFunID>(
    stHeroListResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRegister_ProtoModID {
  stReqRegister_ProtoModID_ModID = 6
};
bool stReqRegister_ProtoModID_IsValid(int value);
const stReqRegister_ProtoModID stReqRegister_ProtoModID_ProtoModID_MIN = stReqRegister_ProtoModID_ModID;
const stReqRegister_ProtoModID stReqRegister_ProtoModID_ProtoModID_MAX = stReqRegister_ProtoModID_ModID;
const int stReqRegister_ProtoModID_ProtoModID_ARRAYSIZE = stReqRegister_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRegister_ProtoModID_descriptor();
inline const ::std::string& stReqRegister_ProtoModID_Name(stReqRegister_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRegister_ProtoModID_descriptor(), value);
}
inline bool stReqRegister_ProtoModID_Parse(
    const ::std::string& name, stReqRegister_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRegister_ProtoModID>(
    stReqRegister_ProtoModID_descriptor(), name, value);
}
enum stReqRegister_ProtoFunID {
  stReqRegister_ProtoFunID_FunID = 90
};
bool stReqRegister_ProtoFunID_IsValid(int value);
const stReqRegister_ProtoFunID stReqRegister_ProtoFunID_ProtoFunID_MIN = stReqRegister_ProtoFunID_FunID;
const stReqRegister_ProtoFunID stReqRegister_ProtoFunID_ProtoFunID_MAX = stReqRegister_ProtoFunID_FunID;
const int stReqRegister_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRegister_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRegister_ProtoFunID_descriptor();
inline const ::std::string& stReqRegister_ProtoFunID_Name(stReqRegister_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRegister_ProtoFunID_descriptor(), value);
}
inline bool stReqRegister_ProtoFunID_Parse(
    const ::std::string& name, stReqRegister_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRegister_ProtoFunID>(
    stReqRegister_ProtoFunID_descriptor(), name, value);
}
enum stRegisrerResult_ProtoModID {
  stRegisrerResult_ProtoModID_ModID = 6
};
bool stRegisrerResult_ProtoModID_IsValid(int value);
const stRegisrerResult_ProtoModID stRegisrerResult_ProtoModID_ProtoModID_MIN = stRegisrerResult_ProtoModID_ModID;
const stRegisrerResult_ProtoModID stRegisrerResult_ProtoModID_ProtoModID_MAX = stRegisrerResult_ProtoModID_ModID;
const int stRegisrerResult_ProtoModID_ProtoModID_ARRAYSIZE = stRegisrerResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRegisrerResult_ProtoModID_descriptor();
inline const ::std::string& stRegisrerResult_ProtoModID_Name(stRegisrerResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRegisrerResult_ProtoModID_descriptor(), value);
}
inline bool stRegisrerResult_ProtoModID_Parse(
    const ::std::string& name, stRegisrerResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRegisrerResult_ProtoModID>(
    stRegisrerResult_ProtoModID_descriptor(), name, value);
}
enum stRegisrerResult_ProtoFunID {
  stRegisrerResult_ProtoFunID_FunID = 91
};
bool stRegisrerResult_ProtoFunID_IsValid(int value);
const stRegisrerResult_ProtoFunID stRegisrerResult_ProtoFunID_ProtoFunID_MIN = stRegisrerResult_ProtoFunID_FunID;
const stRegisrerResult_ProtoFunID stRegisrerResult_ProtoFunID_ProtoFunID_MAX = stRegisrerResult_ProtoFunID_FunID;
const int stRegisrerResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRegisrerResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRegisrerResult_ProtoFunID_descriptor();
inline const ::std::string& stRegisrerResult_ProtoFunID_Name(stRegisrerResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRegisrerResult_ProtoFunID_descriptor(), value);
}
inline bool stRegisrerResult_ProtoFunID_Parse(
    const ::std::string& name, stRegisrerResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRegisrerResult_ProtoFunID>(
    stRegisrerResult_ProtoFunID_descriptor(), name, value);
}
enum stArenaResultNotify_eResult {
  stArenaResultNotify_eResult_WIN = 1,
  stArenaResultNotify_eResult_LOSE = 2,
  stArenaResultNotify_eResult_TIMEOUT = 3
};
bool stArenaResultNotify_eResult_IsValid(int value);
const stArenaResultNotify_eResult stArenaResultNotify_eResult_eResult_MIN = stArenaResultNotify_eResult_WIN;
const stArenaResultNotify_eResult stArenaResultNotify_eResult_eResult_MAX = stArenaResultNotify_eResult_TIMEOUT;
const int stArenaResultNotify_eResult_eResult_ARRAYSIZE = stArenaResultNotify_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stArenaResultNotify_eResult_descriptor();
inline const ::std::string& stArenaResultNotify_eResult_Name(stArenaResultNotify_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stArenaResultNotify_eResult_descriptor(), value);
}
inline bool stArenaResultNotify_eResult_Parse(
    const ::std::string& name, stArenaResultNotify_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stArenaResultNotify_eResult>(
    stArenaResultNotify_eResult_descriptor(), name, value);
}
enum stArenaResultNotify_ProtoModID {
  stArenaResultNotify_ProtoModID_ModID = 6
};
bool stArenaResultNotify_ProtoModID_IsValid(int value);
const stArenaResultNotify_ProtoModID stArenaResultNotify_ProtoModID_ProtoModID_MIN = stArenaResultNotify_ProtoModID_ModID;
const stArenaResultNotify_ProtoModID stArenaResultNotify_ProtoModID_ProtoModID_MAX = stArenaResultNotify_ProtoModID_ModID;
const int stArenaResultNotify_ProtoModID_ProtoModID_ARRAYSIZE = stArenaResultNotify_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stArenaResultNotify_ProtoModID_descriptor();
inline const ::std::string& stArenaResultNotify_ProtoModID_Name(stArenaResultNotify_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stArenaResultNotify_ProtoModID_descriptor(), value);
}
inline bool stArenaResultNotify_ProtoModID_Parse(
    const ::std::string& name, stArenaResultNotify_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stArenaResultNotify_ProtoModID>(
    stArenaResultNotify_ProtoModID_descriptor(), name, value);
}
enum stArenaResultNotify_ProtoFunID {
  stArenaResultNotify_ProtoFunID_FunID = 92
};
bool stArenaResultNotify_ProtoFunID_IsValid(int value);
const stArenaResultNotify_ProtoFunID stArenaResultNotify_ProtoFunID_ProtoFunID_MIN = stArenaResultNotify_ProtoFunID_FunID;
const stArenaResultNotify_ProtoFunID stArenaResultNotify_ProtoFunID_ProtoFunID_MAX = stArenaResultNotify_ProtoFunID_FunID;
const int stArenaResultNotify_ProtoFunID_ProtoFunID_ARRAYSIZE = stArenaResultNotify_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stArenaResultNotify_ProtoFunID_descriptor();
inline const ::std::string& stArenaResultNotify_ProtoFunID_Name(stArenaResultNotify_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stArenaResultNotify_ProtoFunID_descriptor(), value);
}
inline bool stArenaResultNotify_ProtoFunID_Parse(
    const ::std::string& name, stArenaResultNotify_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stArenaResultNotify_ProtoFunID>(
    stArenaResultNotify_ProtoFunID_descriptor(), name, value);
}
enum stReqPubLogIn_ProtoModID {
  stReqPubLogIn_ProtoModID_ModID = 6
};
bool stReqPubLogIn_ProtoModID_IsValid(int value);
const stReqPubLogIn_ProtoModID stReqPubLogIn_ProtoModID_ProtoModID_MIN = stReqPubLogIn_ProtoModID_ModID;
const stReqPubLogIn_ProtoModID stReqPubLogIn_ProtoModID_ProtoModID_MAX = stReqPubLogIn_ProtoModID_ModID;
const int stReqPubLogIn_ProtoModID_ProtoModID_ARRAYSIZE = stReqPubLogIn_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPubLogIn_ProtoModID_descriptor();
inline const ::std::string& stReqPubLogIn_ProtoModID_Name(stReqPubLogIn_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPubLogIn_ProtoModID_descriptor(), value);
}
inline bool stReqPubLogIn_ProtoModID_Parse(
    const ::std::string& name, stReqPubLogIn_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPubLogIn_ProtoModID>(
    stReqPubLogIn_ProtoModID_descriptor(), name, value);
}
enum stReqPubLogIn_ProtoFunID {
  stReqPubLogIn_ProtoFunID_FunID = 93
};
bool stReqPubLogIn_ProtoFunID_IsValid(int value);
const stReqPubLogIn_ProtoFunID stReqPubLogIn_ProtoFunID_ProtoFunID_MIN = stReqPubLogIn_ProtoFunID_FunID;
const stReqPubLogIn_ProtoFunID stReqPubLogIn_ProtoFunID_ProtoFunID_MAX = stReqPubLogIn_ProtoFunID_FunID;
const int stReqPubLogIn_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPubLogIn_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPubLogIn_ProtoFunID_descriptor();
inline const ::std::string& stReqPubLogIn_ProtoFunID_Name(stReqPubLogIn_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPubLogIn_ProtoFunID_descriptor(), value);
}
inline bool stReqPubLogIn_ProtoFunID_Parse(
    const ::std::string& name, stReqPubLogIn_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPubLogIn_ProtoFunID>(
    stReqPubLogIn_ProtoFunID_descriptor(), name, value);
}
enum stReqPubLogOut_ProtoModID {
  stReqPubLogOut_ProtoModID_ModID = 6
};
bool stReqPubLogOut_ProtoModID_IsValid(int value);
const stReqPubLogOut_ProtoModID stReqPubLogOut_ProtoModID_ProtoModID_MIN = stReqPubLogOut_ProtoModID_ModID;
const stReqPubLogOut_ProtoModID stReqPubLogOut_ProtoModID_ProtoModID_MAX = stReqPubLogOut_ProtoModID_ModID;
const int stReqPubLogOut_ProtoModID_ProtoModID_ARRAYSIZE = stReqPubLogOut_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPubLogOut_ProtoModID_descriptor();
inline const ::std::string& stReqPubLogOut_ProtoModID_Name(stReqPubLogOut_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPubLogOut_ProtoModID_descriptor(), value);
}
inline bool stReqPubLogOut_ProtoModID_Parse(
    const ::std::string& name, stReqPubLogOut_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPubLogOut_ProtoModID>(
    stReqPubLogOut_ProtoModID_descriptor(), name, value);
}
enum stReqPubLogOut_ProtoFunID {
  stReqPubLogOut_ProtoFunID_FunID = 94
};
bool stReqPubLogOut_ProtoFunID_IsValid(int value);
const stReqPubLogOut_ProtoFunID stReqPubLogOut_ProtoFunID_ProtoFunID_MIN = stReqPubLogOut_ProtoFunID_FunID;
const stReqPubLogOut_ProtoFunID stReqPubLogOut_ProtoFunID_ProtoFunID_MAX = stReqPubLogOut_ProtoFunID_FunID;
const int stReqPubLogOut_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqPubLogOut_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqPubLogOut_ProtoFunID_descriptor();
inline const ::std::string& stReqPubLogOut_ProtoFunID_Name(stReqPubLogOut_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqPubLogOut_ProtoFunID_descriptor(), value);
}
inline bool stReqPubLogOut_ProtoFunID_Parse(
    const ::std::string& name, stReqPubLogOut_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqPubLogOut_ProtoFunID>(
    stReqPubLogOut_ProtoFunID_descriptor(), name, value);
}
enum stRemoveModel_ProtoModID {
  stRemoveModel_ProtoModID_ModID = 6
};
bool stRemoveModel_ProtoModID_IsValid(int value);
const stRemoveModel_ProtoModID stRemoveModel_ProtoModID_ProtoModID_MIN = stRemoveModel_ProtoModID_ModID;
const stRemoveModel_ProtoModID stRemoveModel_ProtoModID_ProtoModID_MAX = stRemoveModel_ProtoModID_ModID;
const int stRemoveModel_ProtoModID_ProtoModID_ARRAYSIZE = stRemoveModel_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRemoveModel_ProtoModID_descriptor();
inline const ::std::string& stRemoveModel_ProtoModID_Name(stRemoveModel_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRemoveModel_ProtoModID_descriptor(), value);
}
inline bool stRemoveModel_ProtoModID_Parse(
    const ::std::string& name, stRemoveModel_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRemoveModel_ProtoModID>(
    stRemoveModel_ProtoModID_descriptor(), name, value);
}
enum stRemoveModel_ProtoFunID {
  stRemoveModel_ProtoFunID_FunID = 95
};
bool stRemoveModel_ProtoFunID_IsValid(int value);
const stRemoveModel_ProtoFunID stRemoveModel_ProtoFunID_ProtoFunID_MIN = stRemoveModel_ProtoFunID_FunID;
const stRemoveModel_ProtoFunID stRemoveModel_ProtoFunID_ProtoFunID_MAX = stRemoveModel_ProtoFunID_FunID;
const int stRemoveModel_ProtoFunID_ProtoFunID_ARRAYSIZE = stRemoveModel_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRemoveModel_ProtoFunID_descriptor();
inline const ::std::string& stRemoveModel_ProtoFunID_Name(stRemoveModel_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRemoveModel_ProtoFunID_descriptor(), value);
}
inline bool stRemoveModel_ProtoFunID_Parse(
    const ::std::string& name, stRemoveModel_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRemoveModel_ProtoFunID>(
    stRemoveModel_ProtoFunID_descriptor(), name, value);
}
enum stLeitaiResultNotify_eResult {
  stLeitaiResultNotify_eResult_WIN = 1,
  stLeitaiResultNotify_eResult_LOSE = 2,
  stLeitaiResultNotify_eResult_TIMEOUT = 3
};
bool stLeitaiResultNotify_eResult_IsValid(int value);
const stLeitaiResultNotify_eResult stLeitaiResultNotify_eResult_eResult_MIN = stLeitaiResultNotify_eResult_WIN;
const stLeitaiResultNotify_eResult stLeitaiResultNotify_eResult_eResult_MAX = stLeitaiResultNotify_eResult_TIMEOUT;
const int stLeitaiResultNotify_eResult_eResult_ARRAYSIZE = stLeitaiResultNotify_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiResultNotify_eResult_descriptor();
inline const ::std::string& stLeitaiResultNotify_eResult_Name(stLeitaiResultNotify_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiResultNotify_eResult_descriptor(), value);
}
inline bool stLeitaiResultNotify_eResult_Parse(
    const ::std::string& name, stLeitaiResultNotify_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiResultNotify_eResult>(
    stLeitaiResultNotify_eResult_descriptor(), name, value);
}
enum stLeitaiResultNotify_ProtoModID {
  stLeitaiResultNotify_ProtoModID_ModID = 6
};
bool stLeitaiResultNotify_ProtoModID_IsValid(int value);
const stLeitaiResultNotify_ProtoModID stLeitaiResultNotify_ProtoModID_ProtoModID_MIN = stLeitaiResultNotify_ProtoModID_ModID;
const stLeitaiResultNotify_ProtoModID stLeitaiResultNotify_ProtoModID_ProtoModID_MAX = stLeitaiResultNotify_ProtoModID_ModID;
const int stLeitaiResultNotify_ProtoModID_ProtoModID_ARRAYSIZE = stLeitaiResultNotify_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiResultNotify_ProtoModID_descriptor();
inline const ::std::string& stLeitaiResultNotify_ProtoModID_Name(stLeitaiResultNotify_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiResultNotify_ProtoModID_descriptor(), value);
}
inline bool stLeitaiResultNotify_ProtoModID_Parse(
    const ::std::string& name, stLeitaiResultNotify_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiResultNotify_ProtoModID>(
    stLeitaiResultNotify_ProtoModID_descriptor(), name, value);
}
enum stLeitaiResultNotify_ProtoFunID {
  stLeitaiResultNotify_ProtoFunID_FunID = 96
};
bool stLeitaiResultNotify_ProtoFunID_IsValid(int value);
const stLeitaiResultNotify_ProtoFunID stLeitaiResultNotify_ProtoFunID_ProtoFunID_MIN = stLeitaiResultNotify_ProtoFunID_FunID;
const stLeitaiResultNotify_ProtoFunID stLeitaiResultNotify_ProtoFunID_ProtoFunID_MAX = stLeitaiResultNotify_ProtoFunID_FunID;
const int stLeitaiResultNotify_ProtoFunID_ProtoFunID_ARRAYSIZE = stLeitaiResultNotify_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeitaiResultNotify_ProtoFunID_descriptor();
inline const ::std::string& stLeitaiResultNotify_ProtoFunID_Name(stLeitaiResultNotify_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeitaiResultNotify_ProtoFunID_descriptor(), value);
}
inline bool stLeitaiResultNotify_ProtoFunID_Parse(
    const ::std::string& name, stLeitaiResultNotify_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeitaiResultNotify_ProtoFunID>(
    stLeitaiResultNotify_ProtoFunID_descriptor(), name, value);
}
enum stReqRedPoint_ProtoModID {
  stReqRedPoint_ProtoModID_ModID = 6
};
bool stReqRedPoint_ProtoModID_IsValid(int value);
const stReqRedPoint_ProtoModID stReqRedPoint_ProtoModID_ProtoModID_MIN = stReqRedPoint_ProtoModID_ModID;
const stReqRedPoint_ProtoModID stReqRedPoint_ProtoModID_ProtoModID_MAX = stReqRedPoint_ProtoModID_ModID;
const int stReqRedPoint_ProtoModID_ProtoModID_ARRAYSIZE = stReqRedPoint_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoModID_descriptor();
inline const ::std::string& stReqRedPoint_ProtoModID_Name(stReqRedPoint_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRedPoint_ProtoModID_descriptor(), value);
}
inline bool stReqRedPoint_ProtoModID_Parse(
    const ::std::string& name, stReqRedPoint_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRedPoint_ProtoModID>(
    stReqRedPoint_ProtoModID_descriptor(), name, value);
}
enum stReqRedPoint_ProtoFunID {
  stReqRedPoint_ProtoFunID_FunID = 97
};
bool stReqRedPoint_ProtoFunID_IsValid(int value);
const stReqRedPoint_ProtoFunID stReqRedPoint_ProtoFunID_ProtoFunID_MIN = stReqRedPoint_ProtoFunID_FunID;
const stReqRedPoint_ProtoFunID stReqRedPoint_ProtoFunID_ProtoFunID_MAX = stReqRedPoint_ProtoFunID_FunID;
const int stReqRedPoint_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRedPoint_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRedPoint_ProtoFunID_descriptor();
inline const ::std::string& stReqRedPoint_ProtoFunID_Name(stReqRedPoint_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRedPoint_ProtoFunID_descriptor(), value);
}
inline bool stReqRedPoint_ProtoFunID_Parse(
    const ::std::string& name, stReqRedPoint_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRedPoint_ProtoFunID>(
    stReqRedPoint_ProtoFunID_descriptor(), name, value);
}
enum stRedPointResult_ProtoModID {
  stRedPointResult_ProtoModID_ModID = 6
};
bool stRedPointResult_ProtoModID_IsValid(int value);
const stRedPointResult_ProtoModID stRedPointResult_ProtoModID_ProtoModID_MIN = stRedPointResult_ProtoModID_ModID;
const stRedPointResult_ProtoModID stRedPointResult_ProtoModID_ProtoModID_MAX = stRedPointResult_ProtoModID_ModID;
const int stRedPointResult_ProtoModID_ProtoModID_ARRAYSIZE = stRedPointResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoModID_descriptor();
inline const ::std::string& stRedPointResult_ProtoModID_Name(stRedPointResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRedPointResult_ProtoModID_descriptor(), value);
}
inline bool stRedPointResult_ProtoModID_Parse(
    const ::std::string& name, stRedPointResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRedPointResult_ProtoModID>(
    stRedPointResult_ProtoModID_descriptor(), name, value);
}
enum stRedPointResult_ProtoFunID {
  stRedPointResult_ProtoFunID_FunID = 98
};
bool stRedPointResult_ProtoFunID_IsValid(int value);
const stRedPointResult_ProtoFunID stRedPointResult_ProtoFunID_ProtoFunID_MIN = stRedPointResult_ProtoFunID_FunID;
const stRedPointResult_ProtoFunID stRedPointResult_ProtoFunID_ProtoFunID_MAX = stRedPointResult_ProtoFunID_FunID;
const int stRedPointResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRedPointResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRedPointResult_ProtoFunID_descriptor();
inline const ::std::string& stRedPointResult_ProtoFunID_Name(stRedPointResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRedPointResult_ProtoFunID_descriptor(), value);
}
inline bool stRedPointResult_ProtoFunID_Parse(
    const ::std::string& name, stRedPointResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRedPointResult_ProtoFunID>(
    stRedPointResult_ProtoFunID_descriptor(), name, value);
}
enum stReqDragonNest_ProtoModID {
  stReqDragonNest_ProtoModID_ModID = 6
};
bool stReqDragonNest_ProtoModID_IsValid(int value);
const stReqDragonNest_ProtoModID stReqDragonNest_ProtoModID_ProtoModID_MIN = stReqDragonNest_ProtoModID_ModID;
const stReqDragonNest_ProtoModID stReqDragonNest_ProtoModID_ProtoModID_MAX = stReqDragonNest_ProtoModID_ModID;
const int stReqDragonNest_ProtoModID_ProtoModID_ARRAYSIZE = stReqDragonNest_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDragonNest_ProtoModID_descriptor();
inline const ::std::string& stReqDragonNest_ProtoModID_Name(stReqDragonNest_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDragonNest_ProtoModID_descriptor(), value);
}
inline bool stReqDragonNest_ProtoModID_Parse(
    const ::std::string& name, stReqDragonNest_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDragonNest_ProtoModID>(
    stReqDragonNest_ProtoModID_descriptor(), name, value);
}
enum stReqDragonNest_ProtoFunID {
  stReqDragonNest_ProtoFunID_FunID = 99
};
bool stReqDragonNest_ProtoFunID_IsValid(int value);
const stReqDragonNest_ProtoFunID stReqDragonNest_ProtoFunID_ProtoFunID_MIN = stReqDragonNest_ProtoFunID_FunID;
const stReqDragonNest_ProtoFunID stReqDragonNest_ProtoFunID_ProtoFunID_MAX = stReqDragonNest_ProtoFunID_FunID;
const int stReqDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDragonNest_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDragonNest_ProtoFunID_descriptor();
inline const ::std::string& stReqDragonNest_ProtoFunID_Name(stReqDragonNest_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDragonNest_ProtoFunID_descriptor(), value);
}
inline bool stReqDragonNest_ProtoFunID_Parse(
    const ::std::string& name, stReqDragonNest_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDragonNest_ProtoFunID>(
    stReqDragonNest_ProtoFunID_descriptor(), name, value);
}
enum stRetDragonNest_ProtoModID {
  stRetDragonNest_ProtoModID_ModID = 6
};
bool stRetDragonNest_ProtoModID_IsValid(int value);
const stRetDragonNest_ProtoModID stRetDragonNest_ProtoModID_ProtoModID_MIN = stRetDragonNest_ProtoModID_ModID;
const stRetDragonNest_ProtoModID stRetDragonNest_ProtoModID_ProtoModID_MAX = stRetDragonNest_ProtoModID_ModID;
const int stRetDragonNest_ProtoModID_ProtoModID_ARRAYSIZE = stRetDragonNest_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDragonNest_ProtoModID_descriptor();
inline const ::std::string& stRetDragonNest_ProtoModID_Name(stRetDragonNest_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDragonNest_ProtoModID_descriptor(), value);
}
inline bool stRetDragonNest_ProtoModID_Parse(
    const ::std::string& name, stRetDragonNest_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDragonNest_ProtoModID>(
    stRetDragonNest_ProtoModID_descriptor(), name, value);
}
enum stRetDragonNest_ProtoFunID {
  stRetDragonNest_ProtoFunID_FunID = 100
};
bool stRetDragonNest_ProtoFunID_IsValid(int value);
const stRetDragonNest_ProtoFunID stRetDragonNest_ProtoFunID_ProtoFunID_MIN = stRetDragonNest_ProtoFunID_FunID;
const stRetDragonNest_ProtoFunID stRetDragonNest_ProtoFunID_ProtoFunID_MAX = stRetDragonNest_ProtoFunID_FunID;
const int stRetDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDragonNest_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDragonNest_ProtoFunID_descriptor();
inline const ::std::string& stRetDragonNest_ProtoFunID_Name(stRetDragonNest_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDragonNest_ProtoFunID_descriptor(), value);
}
inline bool stRetDragonNest_ProtoFunID_Parse(
    const ::std::string& name, stRetDragonNest_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDragonNest_ProtoFunID>(
    stRetDragonNest_ProtoFunID_descriptor(), name, value);
}
enum stReqChallengeDragonNest_eDragonType {
  stReqChallengeDragonNest_eDragonType_eDragon_Fire = 1,
  stReqChallengeDragonNest_eDragonType_eDragon_Water = 2,
  stReqChallengeDragonNest_eDragonType_eDragon_Soil = 3
};
bool stReqChallengeDragonNest_eDragonType_IsValid(int value);
const stReqChallengeDragonNest_eDragonType stReqChallengeDragonNest_eDragonType_eDragonType_MIN = stReqChallengeDragonNest_eDragonType_eDragon_Fire;
const stReqChallengeDragonNest_eDragonType stReqChallengeDragonNest_eDragonType_eDragonType_MAX = stReqChallengeDragonNest_eDragonType_eDragon_Soil;
const int stReqChallengeDragonNest_eDragonType_eDragonType_ARRAYSIZE = stReqChallengeDragonNest_eDragonType_eDragonType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_eDragonType_descriptor();
inline const ::std::string& stReqChallengeDragonNest_eDragonType_Name(stReqChallengeDragonNest_eDragonType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChallengeDragonNest_eDragonType_descriptor(), value);
}
inline bool stReqChallengeDragonNest_eDragonType_Parse(
    const ::std::string& name, stReqChallengeDragonNest_eDragonType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChallengeDragonNest_eDragonType>(
    stReqChallengeDragonNest_eDragonType_descriptor(), name, value);
}
enum stReqChallengeDragonNest_eDifficultyType {
  stReqChallengeDragonNest_eDifficultyType_eDifficulty_Common = 1,
  stReqChallengeDragonNest_eDifficultyType_eDifficulty_Hard = 2,
  stReqChallengeDragonNest_eDifficultyType_eDifficulty_Horrible = 3,
  stReqChallengeDragonNest_eDifficultyType_eDifficulty_EndDay = 4,
  stReqChallengeDragonNest_eDifficultyType_eDifficulty_Hell = 5
};
bool stReqChallengeDragonNest_eDifficultyType_IsValid(int value);
const stReqChallengeDragonNest_eDifficultyType stReqChallengeDragonNest_eDifficultyType_eDifficultyType_MIN = stReqChallengeDragonNest_eDifficultyType_eDifficulty_Common;
const stReqChallengeDragonNest_eDifficultyType stReqChallengeDragonNest_eDifficultyType_eDifficultyType_MAX = stReqChallengeDragonNest_eDifficultyType_eDifficulty_Hell;
const int stReqChallengeDragonNest_eDifficultyType_eDifficultyType_ARRAYSIZE = stReqChallengeDragonNest_eDifficultyType_eDifficultyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_eDifficultyType_descriptor();
inline const ::std::string& stReqChallengeDragonNest_eDifficultyType_Name(stReqChallengeDragonNest_eDifficultyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChallengeDragonNest_eDifficultyType_descriptor(), value);
}
inline bool stReqChallengeDragonNest_eDifficultyType_Parse(
    const ::std::string& name, stReqChallengeDragonNest_eDifficultyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChallengeDragonNest_eDifficultyType>(
    stReqChallengeDragonNest_eDifficultyType_descriptor(), name, value);
}
enum stReqChallengeDragonNest_ProtoModID {
  stReqChallengeDragonNest_ProtoModID_ModID = 6
};
bool stReqChallengeDragonNest_ProtoModID_IsValid(int value);
const stReqChallengeDragonNest_ProtoModID stReqChallengeDragonNest_ProtoModID_ProtoModID_MIN = stReqChallengeDragonNest_ProtoModID_ModID;
const stReqChallengeDragonNest_ProtoModID stReqChallengeDragonNest_ProtoModID_ProtoModID_MAX = stReqChallengeDragonNest_ProtoModID_ModID;
const int stReqChallengeDragonNest_ProtoModID_ProtoModID_ARRAYSIZE = stReqChallengeDragonNest_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_ProtoModID_descriptor();
inline const ::std::string& stReqChallengeDragonNest_ProtoModID_Name(stReqChallengeDragonNest_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChallengeDragonNest_ProtoModID_descriptor(), value);
}
inline bool stReqChallengeDragonNest_ProtoModID_Parse(
    const ::std::string& name, stReqChallengeDragonNest_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChallengeDragonNest_ProtoModID>(
    stReqChallengeDragonNest_ProtoModID_descriptor(), name, value);
}
enum stReqChallengeDragonNest_ProtoFunID {
  stReqChallengeDragonNest_ProtoFunID_FunID = 101
};
bool stReqChallengeDragonNest_ProtoFunID_IsValid(int value);
const stReqChallengeDragonNest_ProtoFunID stReqChallengeDragonNest_ProtoFunID_ProtoFunID_MIN = stReqChallengeDragonNest_ProtoFunID_FunID;
const stReqChallengeDragonNest_ProtoFunID stReqChallengeDragonNest_ProtoFunID_ProtoFunID_MAX = stReqChallengeDragonNest_ProtoFunID_FunID;
const int stReqChallengeDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChallengeDragonNest_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChallengeDragonNest_ProtoFunID_descriptor();
inline const ::std::string& stReqChallengeDragonNest_ProtoFunID_Name(stReqChallengeDragonNest_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChallengeDragonNest_ProtoFunID_descriptor(), value);
}
inline bool stReqChallengeDragonNest_ProtoFunID_Parse(
    const ::std::string& name, stReqChallengeDragonNest_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChallengeDragonNest_ProtoFunID>(
    stReqChallengeDragonNest_ProtoFunID_descriptor(), name, value);
}
enum stRetChallengeDragonNest_eResult {
  stRetChallengeDragonNest_eResult_eSuccess = 1,
  stRetChallengeDragonNest_eResult_eLvl_Id_Not_Exist = 2,
  stRetChallengeDragonNest_eResult_eTime_not_Open = 3,
  stRetChallengeDragonNest_eResult_eLess_Of_Challenge_Time = 4,
  stRetChallengeDragonNest_eResult_eLess_Of_Sp = 5,
  stRetChallengeDragonNest_eResult_eLess_Of_Lilian = 6,
  stRetChallengeDragonNest_eResult_eLvl_Limit = 7,
  stRetChallengeDragonNest_eResult_eBag_Full = 8,
  stRetChallengeDragonNest_eResult_ePre_Lvl_Id_Not_Pass = 9,
  stRetChallengeDragonNest_eResult_ePre_Lvl_Id_Not_Exists = 10
};
bool stRetChallengeDragonNest_eResult_IsValid(int value);
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest_eResult_eResult_MIN = stRetChallengeDragonNest_eResult_eSuccess;
const stRetChallengeDragonNest_eResult stRetChallengeDragonNest_eResult_eResult_MAX = stRetChallengeDragonNest_eResult_ePre_Lvl_Id_Not_Exists;
const int stRetChallengeDragonNest_eResult_eResult_ARRAYSIZE = stRetChallengeDragonNest_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChallengeDragonNest_eResult_descriptor();
inline const ::std::string& stRetChallengeDragonNest_eResult_Name(stRetChallengeDragonNest_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChallengeDragonNest_eResult_descriptor(), value);
}
inline bool stRetChallengeDragonNest_eResult_Parse(
    const ::std::string& name, stRetChallengeDragonNest_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChallengeDragonNest_eResult>(
    stRetChallengeDragonNest_eResult_descriptor(), name, value);
}
enum stRetChallengeDragonNest_ProtoModID {
  stRetChallengeDragonNest_ProtoModID_ModID = 6
};
bool stRetChallengeDragonNest_ProtoModID_IsValid(int value);
const stRetChallengeDragonNest_ProtoModID stRetChallengeDragonNest_ProtoModID_ProtoModID_MIN = stRetChallengeDragonNest_ProtoModID_ModID;
const stRetChallengeDragonNest_ProtoModID stRetChallengeDragonNest_ProtoModID_ProtoModID_MAX = stRetChallengeDragonNest_ProtoModID_ModID;
const int stRetChallengeDragonNest_ProtoModID_ProtoModID_ARRAYSIZE = stRetChallengeDragonNest_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChallengeDragonNest_ProtoModID_descriptor();
inline const ::std::string& stRetChallengeDragonNest_ProtoModID_Name(stRetChallengeDragonNest_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChallengeDragonNest_ProtoModID_descriptor(), value);
}
inline bool stRetChallengeDragonNest_ProtoModID_Parse(
    const ::std::string& name, stRetChallengeDragonNest_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChallengeDragonNest_ProtoModID>(
    stRetChallengeDragonNest_ProtoModID_descriptor(), name, value);
}
enum stRetChallengeDragonNest_ProtoFunID {
  stRetChallengeDragonNest_ProtoFunID_FunID = 102
};
bool stRetChallengeDragonNest_ProtoFunID_IsValid(int value);
const stRetChallengeDragonNest_ProtoFunID stRetChallengeDragonNest_ProtoFunID_ProtoFunID_MIN = stRetChallengeDragonNest_ProtoFunID_FunID;
const stRetChallengeDragonNest_ProtoFunID stRetChallengeDragonNest_ProtoFunID_ProtoFunID_MAX = stRetChallengeDragonNest_ProtoFunID_FunID;
const int stRetChallengeDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetChallengeDragonNest_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChallengeDragonNest_ProtoFunID_descriptor();
inline const ::std::string& stRetChallengeDragonNest_ProtoFunID_Name(stRetChallengeDragonNest_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChallengeDragonNest_ProtoFunID_descriptor(), value);
}
inline bool stRetChallengeDragonNest_ProtoFunID_Parse(
    const ::std::string& name, stRetChallengeDragonNest_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChallengeDragonNest_ProtoFunID>(
    stRetChallengeDragonNest_ProtoFunID_descriptor(), name, value);
}
enum stReqResetChallengeDragonNest_ProtoModID {
  stReqResetChallengeDragonNest_ProtoModID_ModID = 6
};
bool stReqResetChallengeDragonNest_ProtoModID_IsValid(int value);
const stReqResetChallengeDragonNest_ProtoModID stReqResetChallengeDragonNest_ProtoModID_ProtoModID_MIN = stReqResetChallengeDragonNest_ProtoModID_ModID;
const stReqResetChallengeDragonNest_ProtoModID stReqResetChallengeDragonNest_ProtoModID_ProtoModID_MAX = stReqResetChallengeDragonNest_ProtoModID_ModID;
const int stReqResetChallengeDragonNest_ProtoModID_ProtoModID_ARRAYSIZE = stReqResetChallengeDragonNest_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetChallengeDragonNest_ProtoModID_descriptor();
inline const ::std::string& stReqResetChallengeDragonNest_ProtoModID_Name(stReqResetChallengeDragonNest_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetChallengeDragonNest_ProtoModID_descriptor(), value);
}
inline bool stReqResetChallengeDragonNest_ProtoModID_Parse(
    const ::std::string& name, stReqResetChallengeDragonNest_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetChallengeDragonNest_ProtoModID>(
    stReqResetChallengeDragonNest_ProtoModID_descriptor(), name, value);
}
enum stReqResetChallengeDragonNest_ProtoFunID {
  stReqResetChallengeDragonNest_ProtoFunID_FunID = 103
};
bool stReqResetChallengeDragonNest_ProtoFunID_IsValid(int value);
const stReqResetChallengeDragonNest_ProtoFunID stReqResetChallengeDragonNest_ProtoFunID_ProtoFunID_MIN = stReqResetChallengeDragonNest_ProtoFunID_FunID;
const stReqResetChallengeDragonNest_ProtoFunID stReqResetChallengeDragonNest_ProtoFunID_ProtoFunID_MAX = stReqResetChallengeDragonNest_ProtoFunID_FunID;
const int stReqResetChallengeDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResetChallengeDragonNest_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetChallengeDragonNest_ProtoFunID_descriptor();
inline const ::std::string& stReqResetChallengeDragonNest_ProtoFunID_Name(stReqResetChallengeDragonNest_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetChallengeDragonNest_ProtoFunID_descriptor(), value);
}
inline bool stReqResetChallengeDragonNest_ProtoFunID_Parse(
    const ::std::string& name, stReqResetChallengeDragonNest_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetChallengeDragonNest_ProtoFunID>(
    stReqResetChallengeDragonNest_ProtoFunID_descriptor(), name, value);
}
enum stRetResetChallengeDragonNest_eResult {
  stRetResetChallengeDragonNest_eResult_eSuccess = 1,
  stRetResetChallengeDragonNest_eResult_eLess_of_Diamond = 2,
  stRetResetChallengeDragonNest_eResult_eTimes_Remain = 3
};
bool stRetResetChallengeDragonNest_eResult_IsValid(int value);
const stRetResetChallengeDragonNest_eResult stRetResetChallengeDragonNest_eResult_eResult_MIN = stRetResetChallengeDragonNest_eResult_eSuccess;
const stRetResetChallengeDragonNest_eResult stRetResetChallengeDragonNest_eResult_eResult_MAX = stRetResetChallengeDragonNest_eResult_eTimes_Remain;
const int stRetResetChallengeDragonNest_eResult_eResult_ARRAYSIZE = stRetResetChallengeDragonNest_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResetChallengeDragonNest_eResult_descriptor();
inline const ::std::string& stRetResetChallengeDragonNest_eResult_Name(stRetResetChallengeDragonNest_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResetChallengeDragonNest_eResult_descriptor(), value);
}
inline bool stRetResetChallengeDragonNest_eResult_Parse(
    const ::std::string& name, stRetResetChallengeDragonNest_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResetChallengeDragonNest_eResult>(
    stRetResetChallengeDragonNest_eResult_descriptor(), name, value);
}
enum stRetResetChallengeDragonNest_ProtoModID {
  stRetResetChallengeDragonNest_ProtoModID_ModID = 6
};
bool stRetResetChallengeDragonNest_ProtoModID_IsValid(int value);
const stRetResetChallengeDragonNest_ProtoModID stRetResetChallengeDragonNest_ProtoModID_ProtoModID_MIN = stRetResetChallengeDragonNest_ProtoModID_ModID;
const stRetResetChallengeDragonNest_ProtoModID stRetResetChallengeDragonNest_ProtoModID_ProtoModID_MAX = stRetResetChallengeDragonNest_ProtoModID_ModID;
const int stRetResetChallengeDragonNest_ProtoModID_ProtoModID_ARRAYSIZE = stRetResetChallengeDragonNest_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResetChallengeDragonNest_ProtoModID_descriptor();
inline const ::std::string& stRetResetChallengeDragonNest_ProtoModID_Name(stRetResetChallengeDragonNest_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResetChallengeDragonNest_ProtoModID_descriptor(), value);
}
inline bool stRetResetChallengeDragonNest_ProtoModID_Parse(
    const ::std::string& name, stRetResetChallengeDragonNest_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResetChallengeDragonNest_ProtoModID>(
    stRetResetChallengeDragonNest_ProtoModID_descriptor(), name, value);
}
enum stRetResetChallengeDragonNest_ProtoFunID {
  stRetResetChallengeDragonNest_ProtoFunID_FunID = 104
};
bool stRetResetChallengeDragonNest_ProtoFunID_IsValid(int value);
const stRetResetChallengeDragonNest_ProtoFunID stRetResetChallengeDragonNest_ProtoFunID_ProtoFunID_MIN = stRetResetChallengeDragonNest_ProtoFunID_FunID;
const stRetResetChallengeDragonNest_ProtoFunID stRetResetChallengeDragonNest_ProtoFunID_ProtoFunID_MAX = stRetResetChallengeDragonNest_ProtoFunID_FunID;
const int stRetResetChallengeDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetResetChallengeDragonNest_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResetChallengeDragonNest_ProtoFunID_descriptor();
inline const ::std::string& stRetResetChallengeDragonNest_ProtoFunID_Name(stRetResetChallengeDragonNest_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResetChallengeDragonNest_ProtoFunID_descriptor(), value);
}
inline bool stRetResetChallengeDragonNest_ProtoFunID_Parse(
    const ::std::string& name, stRetResetChallengeDragonNest_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResetChallengeDragonNest_ProtoFunID>(
    stRetResetChallengeDragonNest_ProtoFunID_descriptor(), name, value);
}
enum stReqEnterResBattle_ProtoModID {
  stReqEnterResBattle_ProtoModID_ModID = 6
};
bool stReqEnterResBattle_ProtoModID_IsValid(int value);
const stReqEnterResBattle_ProtoModID stReqEnterResBattle_ProtoModID_ProtoModID_MIN = stReqEnterResBattle_ProtoModID_ModID;
const stReqEnterResBattle_ProtoModID stReqEnterResBattle_ProtoModID_ProtoModID_MAX = stReqEnterResBattle_ProtoModID_ModID;
const int stReqEnterResBattle_ProtoModID_ProtoModID_ARRAYSIZE = stReqEnterResBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterResBattle_ProtoModID_descriptor();
inline const ::std::string& stReqEnterResBattle_ProtoModID_Name(stReqEnterResBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterResBattle_ProtoModID_descriptor(), value);
}
inline bool stReqEnterResBattle_ProtoModID_Parse(
    const ::std::string& name, stReqEnterResBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterResBattle_ProtoModID>(
    stReqEnterResBattle_ProtoModID_descriptor(), name, value);
}
enum stReqEnterResBattle_ProtoFunID {
  stReqEnterResBattle_ProtoFunID_FunID = 105
};
bool stReqEnterResBattle_ProtoFunID_IsValid(int value);
const stReqEnterResBattle_ProtoFunID stReqEnterResBattle_ProtoFunID_ProtoFunID_MIN = stReqEnterResBattle_ProtoFunID_FunID;
const stReqEnterResBattle_ProtoFunID stReqEnterResBattle_ProtoFunID_ProtoFunID_MAX = stReqEnterResBattle_ProtoFunID_FunID;
const int stReqEnterResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEnterResBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterResBattle_ProtoFunID_descriptor();
inline const ::std::string& stReqEnterResBattle_ProtoFunID_Name(stReqEnterResBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterResBattle_ProtoFunID_descriptor(), value);
}
inline bool stReqEnterResBattle_ProtoFunID_Parse(
    const ::std::string& name, stReqEnterResBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterResBattle_ProtoFunID>(
    stReqEnterResBattle_ProtoFunID_descriptor(), name, value);
}
enum stRetEnterResBattle_eResult {
  stRetEnterResBattle_eResult_eSuccess = 1,
  stRetEnterResBattle_eResult_eTime_Not_Open = 2,
  stRetEnterResBattle_eResult_eNo_Such_Level = 3,
  stRetEnterResBattle_eResult_eInner_Error = 4
};
bool stRetEnterResBattle_eResult_IsValid(int value);
const stRetEnterResBattle_eResult stRetEnterResBattle_eResult_eResult_MIN = stRetEnterResBattle_eResult_eSuccess;
const stRetEnterResBattle_eResult stRetEnterResBattle_eResult_eResult_MAX = stRetEnterResBattle_eResult_eInner_Error;
const int stRetEnterResBattle_eResult_eResult_ARRAYSIZE = stRetEnterResBattle_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetEnterResBattle_eResult_descriptor();
inline const ::std::string& stRetEnterResBattle_eResult_Name(stRetEnterResBattle_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetEnterResBattle_eResult_descriptor(), value);
}
inline bool stRetEnterResBattle_eResult_Parse(
    const ::std::string& name, stRetEnterResBattle_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetEnterResBattle_eResult>(
    stRetEnterResBattle_eResult_descriptor(), name, value);
}
enum stRetEnterResBattle_ProtoModID {
  stRetEnterResBattle_ProtoModID_ModID = 6
};
bool stRetEnterResBattle_ProtoModID_IsValid(int value);
const stRetEnterResBattle_ProtoModID stRetEnterResBattle_ProtoModID_ProtoModID_MIN = stRetEnterResBattle_ProtoModID_ModID;
const stRetEnterResBattle_ProtoModID stRetEnterResBattle_ProtoModID_ProtoModID_MAX = stRetEnterResBattle_ProtoModID_ModID;
const int stRetEnterResBattle_ProtoModID_ProtoModID_ARRAYSIZE = stRetEnterResBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetEnterResBattle_ProtoModID_descriptor();
inline const ::std::string& stRetEnterResBattle_ProtoModID_Name(stRetEnterResBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetEnterResBattle_ProtoModID_descriptor(), value);
}
inline bool stRetEnterResBattle_ProtoModID_Parse(
    const ::std::string& name, stRetEnterResBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetEnterResBattle_ProtoModID>(
    stRetEnterResBattle_ProtoModID_descriptor(), name, value);
}
enum stRetEnterResBattle_ProtoFunID {
  stRetEnterResBattle_ProtoFunID_FunID = 106
};
bool stRetEnterResBattle_ProtoFunID_IsValid(int value);
const stRetEnterResBattle_ProtoFunID stRetEnterResBattle_ProtoFunID_ProtoFunID_MIN = stRetEnterResBattle_ProtoFunID_FunID;
const stRetEnterResBattle_ProtoFunID stRetEnterResBattle_ProtoFunID_ProtoFunID_MAX = stRetEnterResBattle_ProtoFunID_FunID;
const int stRetEnterResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetEnterResBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetEnterResBattle_ProtoFunID_descriptor();
inline const ::std::string& stRetEnterResBattle_ProtoFunID_Name(stRetEnterResBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetEnterResBattle_ProtoFunID_descriptor(), value);
}
inline bool stRetEnterResBattle_ProtoFunID_Parse(
    const ::std::string& name, stRetEnterResBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetEnterResBattle_ProtoFunID>(
    stRetEnterResBattle_ProtoFunID_descriptor(), name, value);
}
enum stReqCurResBattleGloryRank_ProtoModID {
  stReqCurResBattleGloryRank_ProtoModID_ModID = 6
};
bool stReqCurResBattleGloryRank_ProtoModID_IsValid(int value);
const stReqCurResBattleGloryRank_ProtoModID stReqCurResBattleGloryRank_ProtoModID_ProtoModID_MIN = stReqCurResBattleGloryRank_ProtoModID_ModID;
const stReqCurResBattleGloryRank_ProtoModID stReqCurResBattleGloryRank_ProtoModID_ProtoModID_MAX = stReqCurResBattleGloryRank_ProtoModID_ModID;
const int stReqCurResBattleGloryRank_ProtoModID_ProtoModID_ARRAYSIZE = stReqCurResBattleGloryRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCurResBattleGloryRank_ProtoModID_descriptor();
inline const ::std::string& stReqCurResBattleGloryRank_ProtoModID_Name(stReqCurResBattleGloryRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCurResBattleGloryRank_ProtoModID_descriptor(), value);
}
inline bool stReqCurResBattleGloryRank_ProtoModID_Parse(
    const ::std::string& name, stReqCurResBattleGloryRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCurResBattleGloryRank_ProtoModID>(
    stReqCurResBattleGloryRank_ProtoModID_descriptor(), name, value);
}
enum stReqCurResBattleGloryRank_ProtoFunID {
  stReqCurResBattleGloryRank_ProtoFunID_FunID = 107
};
bool stReqCurResBattleGloryRank_ProtoFunID_IsValid(int value);
const stReqCurResBattleGloryRank_ProtoFunID stReqCurResBattleGloryRank_ProtoFunID_ProtoFunID_MIN = stReqCurResBattleGloryRank_ProtoFunID_FunID;
const stReqCurResBattleGloryRank_ProtoFunID stReqCurResBattleGloryRank_ProtoFunID_ProtoFunID_MAX = stReqCurResBattleGloryRank_ProtoFunID_FunID;
const int stReqCurResBattleGloryRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCurResBattleGloryRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCurResBattleGloryRank_ProtoFunID_descriptor();
inline const ::std::string& stReqCurResBattleGloryRank_ProtoFunID_Name(stReqCurResBattleGloryRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCurResBattleGloryRank_ProtoFunID_descriptor(), value);
}
inline bool stReqCurResBattleGloryRank_ProtoFunID_Parse(
    const ::std::string& name, stReqCurResBattleGloryRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCurResBattleGloryRank_ProtoFunID>(
    stReqCurResBattleGloryRank_ProtoFunID_descriptor(), name, value);
}
enum stRetCurResBattleGloryRank_ProtoModID {
  stRetCurResBattleGloryRank_ProtoModID_ModID = 6
};
bool stRetCurResBattleGloryRank_ProtoModID_IsValid(int value);
const stRetCurResBattleGloryRank_ProtoModID stRetCurResBattleGloryRank_ProtoModID_ProtoModID_MIN = stRetCurResBattleGloryRank_ProtoModID_ModID;
const stRetCurResBattleGloryRank_ProtoModID stRetCurResBattleGloryRank_ProtoModID_ProtoModID_MAX = stRetCurResBattleGloryRank_ProtoModID_ModID;
const int stRetCurResBattleGloryRank_ProtoModID_ProtoModID_ARRAYSIZE = stRetCurResBattleGloryRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCurResBattleGloryRank_ProtoModID_descriptor();
inline const ::std::string& stRetCurResBattleGloryRank_ProtoModID_Name(stRetCurResBattleGloryRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCurResBattleGloryRank_ProtoModID_descriptor(), value);
}
inline bool stRetCurResBattleGloryRank_ProtoModID_Parse(
    const ::std::string& name, stRetCurResBattleGloryRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCurResBattleGloryRank_ProtoModID>(
    stRetCurResBattleGloryRank_ProtoModID_descriptor(), name, value);
}
enum stRetCurResBattleGloryRank_ProtoFunID {
  stRetCurResBattleGloryRank_ProtoFunID_FunID = 108
};
bool stRetCurResBattleGloryRank_ProtoFunID_IsValid(int value);
const stRetCurResBattleGloryRank_ProtoFunID stRetCurResBattleGloryRank_ProtoFunID_ProtoFunID_MIN = stRetCurResBattleGloryRank_ProtoFunID_FunID;
const stRetCurResBattleGloryRank_ProtoFunID stRetCurResBattleGloryRank_ProtoFunID_ProtoFunID_MAX = stRetCurResBattleGloryRank_ProtoFunID_FunID;
const int stRetCurResBattleGloryRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetCurResBattleGloryRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetCurResBattleGloryRank_ProtoFunID_descriptor();
inline const ::std::string& stRetCurResBattleGloryRank_ProtoFunID_Name(stRetCurResBattleGloryRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetCurResBattleGloryRank_ProtoFunID_descriptor(), value);
}
inline bool stRetCurResBattleGloryRank_ProtoFunID_Parse(
    const ::std::string& name, stRetCurResBattleGloryRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetCurResBattleGloryRank_ProtoFunID>(
    stRetCurResBattleGloryRank_ProtoFunID_descriptor(), name, value);
}
enum stReqResBattleRank_ProtoModID {
  stReqResBattleRank_ProtoModID_ModID = 6
};
bool stReqResBattleRank_ProtoModID_IsValid(int value);
const stReqResBattleRank_ProtoModID stReqResBattleRank_ProtoModID_ProtoModID_MIN = stReqResBattleRank_ProtoModID_ModID;
const stReqResBattleRank_ProtoModID stReqResBattleRank_ProtoModID_ProtoModID_MAX = stReqResBattleRank_ProtoModID_ModID;
const int stReqResBattleRank_ProtoModID_ProtoModID_ARRAYSIZE = stReqResBattleRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleRank_ProtoModID_descriptor();
inline const ::std::string& stReqResBattleRank_ProtoModID_Name(stReqResBattleRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleRank_ProtoModID_descriptor(), value);
}
inline bool stReqResBattleRank_ProtoModID_Parse(
    const ::std::string& name, stReqResBattleRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleRank_ProtoModID>(
    stReqResBattleRank_ProtoModID_descriptor(), name, value);
}
enum stReqResBattleRank_ProtoFunID {
  stReqResBattleRank_ProtoFunID_FunID = 109
};
bool stReqResBattleRank_ProtoFunID_IsValid(int value);
const stReqResBattleRank_ProtoFunID stReqResBattleRank_ProtoFunID_ProtoFunID_MIN = stReqResBattleRank_ProtoFunID_FunID;
const stReqResBattleRank_ProtoFunID stReqResBattleRank_ProtoFunID_ProtoFunID_MAX = stReqResBattleRank_ProtoFunID_FunID;
const int stReqResBattleRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResBattleRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleRank_ProtoFunID_descriptor();
inline const ::std::string& stReqResBattleRank_ProtoFunID_Name(stReqResBattleRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleRank_ProtoFunID_descriptor(), value);
}
inline bool stReqResBattleRank_ProtoFunID_Parse(
    const ::std::string& name, stReqResBattleRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleRank_ProtoFunID>(
    stReqResBattleRank_ProtoFunID_descriptor(), name, value);
}
enum stRetResBattleRank_ProtoModID {
  stRetResBattleRank_ProtoModID_ModID = 6
};
bool stRetResBattleRank_ProtoModID_IsValid(int value);
const stRetResBattleRank_ProtoModID stRetResBattleRank_ProtoModID_ProtoModID_MIN = stRetResBattleRank_ProtoModID_ModID;
const stRetResBattleRank_ProtoModID stRetResBattleRank_ProtoModID_ProtoModID_MAX = stRetResBattleRank_ProtoModID_ModID;
const int stRetResBattleRank_ProtoModID_ProtoModID_ARRAYSIZE = stRetResBattleRank_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleRank_ProtoModID_descriptor();
inline const ::std::string& stRetResBattleRank_ProtoModID_Name(stRetResBattleRank_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleRank_ProtoModID_descriptor(), value);
}
inline bool stRetResBattleRank_ProtoModID_Parse(
    const ::std::string& name, stRetResBattleRank_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleRank_ProtoModID>(
    stRetResBattleRank_ProtoModID_descriptor(), name, value);
}
enum stRetResBattleRank_ProtoFunID {
  stRetResBattleRank_ProtoFunID_FunID = 110
};
bool stRetResBattleRank_ProtoFunID_IsValid(int value);
const stRetResBattleRank_ProtoFunID stRetResBattleRank_ProtoFunID_ProtoFunID_MIN = stRetResBattleRank_ProtoFunID_FunID;
const stRetResBattleRank_ProtoFunID stRetResBattleRank_ProtoFunID_ProtoFunID_MAX = stRetResBattleRank_ProtoFunID_FunID;
const int stRetResBattleRank_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetResBattleRank_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleRank_ProtoFunID_descriptor();
inline const ::std::string& stRetResBattleRank_ProtoFunID_Name(stRetResBattleRank_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleRank_ProtoFunID_descriptor(), value);
}
inline bool stRetResBattleRank_ProtoFunID_Parse(
    const ::std::string& name, stRetResBattleRank_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleRank_ProtoFunID>(
    stRetResBattleRank_ProtoFunID_descriptor(), name, value);
}
enum stReqResBattleKing_ProtoModID {
  stReqResBattleKing_ProtoModID_ModID = 6
};
bool stReqResBattleKing_ProtoModID_IsValid(int value);
const stReqResBattleKing_ProtoModID stReqResBattleKing_ProtoModID_ProtoModID_MIN = stReqResBattleKing_ProtoModID_ModID;
const stReqResBattleKing_ProtoModID stReqResBattleKing_ProtoModID_ProtoModID_MAX = stReqResBattleKing_ProtoModID_ModID;
const int stReqResBattleKing_ProtoModID_ProtoModID_ARRAYSIZE = stReqResBattleKing_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleKing_ProtoModID_descriptor();
inline const ::std::string& stReqResBattleKing_ProtoModID_Name(stReqResBattleKing_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleKing_ProtoModID_descriptor(), value);
}
inline bool stReqResBattleKing_ProtoModID_Parse(
    const ::std::string& name, stReqResBattleKing_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleKing_ProtoModID>(
    stReqResBattleKing_ProtoModID_descriptor(), name, value);
}
enum stReqResBattleKing_ProtoFunID {
  stReqResBattleKing_ProtoFunID_FunID = 111
};
bool stReqResBattleKing_ProtoFunID_IsValid(int value);
const stReqResBattleKing_ProtoFunID stReqResBattleKing_ProtoFunID_ProtoFunID_MIN = stReqResBattleKing_ProtoFunID_FunID;
const stReqResBattleKing_ProtoFunID stReqResBattleKing_ProtoFunID_ProtoFunID_MAX = stReqResBattleKing_ProtoFunID_FunID;
const int stReqResBattleKing_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResBattleKing_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleKing_ProtoFunID_descriptor();
inline const ::std::string& stReqResBattleKing_ProtoFunID_Name(stReqResBattleKing_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleKing_ProtoFunID_descriptor(), value);
}
inline bool stReqResBattleKing_ProtoFunID_Parse(
    const ::std::string& name, stReqResBattleKing_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleKing_ProtoFunID>(
    stReqResBattleKing_ProtoFunID_descriptor(), name, value);
}
enum stRetResBattleKing_ProtoModID {
  stRetResBattleKing_ProtoModID_ModID = 6
};
bool stRetResBattleKing_ProtoModID_IsValid(int value);
const stRetResBattleKing_ProtoModID stRetResBattleKing_ProtoModID_ProtoModID_MIN = stRetResBattleKing_ProtoModID_ModID;
const stRetResBattleKing_ProtoModID stRetResBattleKing_ProtoModID_ProtoModID_MAX = stRetResBattleKing_ProtoModID_ModID;
const int stRetResBattleKing_ProtoModID_ProtoModID_ARRAYSIZE = stRetResBattleKing_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleKing_ProtoModID_descriptor();
inline const ::std::string& stRetResBattleKing_ProtoModID_Name(stRetResBattleKing_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleKing_ProtoModID_descriptor(), value);
}
inline bool stRetResBattleKing_ProtoModID_Parse(
    const ::std::string& name, stRetResBattleKing_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleKing_ProtoModID>(
    stRetResBattleKing_ProtoModID_descriptor(), name, value);
}
enum stRetResBattleKing_ProtoFunID {
  stRetResBattleKing_ProtoFunID_FunID = 112
};
bool stRetResBattleKing_ProtoFunID_IsValid(int value);
const stRetResBattleKing_ProtoFunID stRetResBattleKing_ProtoFunID_ProtoFunID_MIN = stRetResBattleKing_ProtoFunID_FunID;
const stRetResBattleKing_ProtoFunID stRetResBattleKing_ProtoFunID_ProtoFunID_MAX = stRetResBattleKing_ProtoFunID_FunID;
const int stRetResBattleKing_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetResBattleKing_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleKing_ProtoFunID_descriptor();
inline const ::std::string& stRetResBattleKing_ProtoFunID_Name(stRetResBattleKing_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleKing_ProtoFunID_descriptor(), value);
}
inline bool stRetResBattleKing_ProtoFunID_Parse(
    const ::std::string& name, stRetResBattleKing_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleKing_ProtoFunID>(
    stRetResBattleKing_ProtoFunID_descriptor(), name, value);
}
enum stReqResBattleProstate_ProtoModID {
  stReqResBattleProstate_ProtoModID_ModID = 6
};
bool stReqResBattleProstate_ProtoModID_IsValid(int value);
const stReqResBattleProstate_ProtoModID stReqResBattleProstate_ProtoModID_ProtoModID_MIN = stReqResBattleProstate_ProtoModID_ModID;
const stReqResBattleProstate_ProtoModID stReqResBattleProstate_ProtoModID_ProtoModID_MAX = stReqResBattleProstate_ProtoModID_ModID;
const int stReqResBattleProstate_ProtoModID_ProtoModID_ARRAYSIZE = stReqResBattleProstate_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleProstate_ProtoModID_descriptor();
inline const ::std::string& stReqResBattleProstate_ProtoModID_Name(stReqResBattleProstate_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleProstate_ProtoModID_descriptor(), value);
}
inline bool stReqResBattleProstate_ProtoModID_Parse(
    const ::std::string& name, stReqResBattleProstate_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleProstate_ProtoModID>(
    stReqResBattleProstate_ProtoModID_descriptor(), name, value);
}
enum stReqResBattleProstate_ProtoFunID {
  stReqResBattleProstate_ProtoFunID_FunID = 113
};
bool stReqResBattleProstate_ProtoFunID_IsValid(int value);
const stReqResBattleProstate_ProtoFunID stReqResBattleProstate_ProtoFunID_ProtoFunID_MIN = stReqResBattleProstate_ProtoFunID_FunID;
const stReqResBattleProstate_ProtoFunID stReqResBattleProstate_ProtoFunID_ProtoFunID_MAX = stReqResBattleProstate_ProtoFunID_FunID;
const int stReqResBattleProstate_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResBattleProstate_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleProstate_ProtoFunID_descriptor();
inline const ::std::string& stReqResBattleProstate_ProtoFunID_Name(stReqResBattleProstate_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleProstate_ProtoFunID_descriptor(), value);
}
inline bool stReqResBattleProstate_ProtoFunID_Parse(
    const ::std::string& name, stReqResBattleProstate_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleProstate_ProtoFunID>(
    stReqResBattleProstate_ProtoFunID_descriptor(), name, value);
}
enum stRetResBattleProstate_eResult {
  stRetResBattleProstate_eResult_eSuccess = 1,
  stRetResBattleProstate_eResult_eAlready_Done = 2,
  stRetResBattleProstate_eResult_eNo_King = 3
};
bool stRetResBattleProstate_eResult_IsValid(int value);
const stRetResBattleProstate_eResult stRetResBattleProstate_eResult_eResult_MIN = stRetResBattleProstate_eResult_eSuccess;
const stRetResBattleProstate_eResult stRetResBattleProstate_eResult_eResult_MAX = stRetResBattleProstate_eResult_eNo_King;
const int stRetResBattleProstate_eResult_eResult_ARRAYSIZE = stRetResBattleProstate_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleProstate_eResult_descriptor();
inline const ::std::string& stRetResBattleProstate_eResult_Name(stRetResBattleProstate_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleProstate_eResult_descriptor(), value);
}
inline bool stRetResBattleProstate_eResult_Parse(
    const ::std::string& name, stRetResBattleProstate_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleProstate_eResult>(
    stRetResBattleProstate_eResult_descriptor(), name, value);
}
enum stRetResBattleProstate_ProtoModID {
  stRetResBattleProstate_ProtoModID_ModID = 6
};
bool stRetResBattleProstate_ProtoModID_IsValid(int value);
const stRetResBattleProstate_ProtoModID stRetResBattleProstate_ProtoModID_ProtoModID_MIN = stRetResBattleProstate_ProtoModID_ModID;
const stRetResBattleProstate_ProtoModID stRetResBattleProstate_ProtoModID_ProtoModID_MAX = stRetResBattleProstate_ProtoModID_ModID;
const int stRetResBattleProstate_ProtoModID_ProtoModID_ARRAYSIZE = stRetResBattleProstate_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleProstate_ProtoModID_descriptor();
inline const ::std::string& stRetResBattleProstate_ProtoModID_Name(stRetResBattleProstate_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleProstate_ProtoModID_descriptor(), value);
}
inline bool stRetResBattleProstate_ProtoModID_Parse(
    const ::std::string& name, stRetResBattleProstate_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleProstate_ProtoModID>(
    stRetResBattleProstate_ProtoModID_descriptor(), name, value);
}
enum stRetResBattleProstate_ProtoFunID {
  stRetResBattleProstate_ProtoFunID_FunID = 114
};
bool stRetResBattleProstate_ProtoFunID_IsValid(int value);
const stRetResBattleProstate_ProtoFunID stRetResBattleProstate_ProtoFunID_ProtoFunID_MIN = stRetResBattleProstate_ProtoFunID_FunID;
const stRetResBattleProstate_ProtoFunID stRetResBattleProstate_ProtoFunID_ProtoFunID_MAX = stRetResBattleProstate_ProtoFunID_FunID;
const int stRetResBattleProstate_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetResBattleProstate_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleProstate_ProtoFunID_descriptor();
inline const ::std::string& stRetResBattleProstate_ProtoFunID_Name(stRetResBattleProstate_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleProstate_ProtoFunID_descriptor(), value);
}
inline bool stRetResBattleProstate_ProtoFunID_Parse(
    const ::std::string& name, stRetResBattleProstate_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleProstate_ProtoFunID>(
    stRetResBattleProstate_ProtoFunID_descriptor(), name, value);
}
enum stReqResBattleRelive_ProtoModID {
  stReqResBattleRelive_ProtoModID_ModID = 6
};
bool stReqResBattleRelive_ProtoModID_IsValid(int value);
const stReqResBattleRelive_ProtoModID stReqResBattleRelive_ProtoModID_ProtoModID_MIN = stReqResBattleRelive_ProtoModID_ModID;
const stReqResBattleRelive_ProtoModID stReqResBattleRelive_ProtoModID_ProtoModID_MAX = stReqResBattleRelive_ProtoModID_ModID;
const int stReqResBattleRelive_ProtoModID_ProtoModID_ARRAYSIZE = stReqResBattleRelive_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleRelive_ProtoModID_descriptor();
inline const ::std::string& stReqResBattleRelive_ProtoModID_Name(stReqResBattleRelive_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleRelive_ProtoModID_descriptor(), value);
}
inline bool stReqResBattleRelive_ProtoModID_Parse(
    const ::std::string& name, stReqResBattleRelive_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleRelive_ProtoModID>(
    stReqResBattleRelive_ProtoModID_descriptor(), name, value);
}
enum stReqResBattleRelive_ProtoFunID {
  stReqResBattleRelive_ProtoFunID_FunID = 115
};
bool stReqResBattleRelive_ProtoFunID_IsValid(int value);
const stReqResBattleRelive_ProtoFunID stReqResBattleRelive_ProtoFunID_ProtoFunID_MIN = stReqResBattleRelive_ProtoFunID_FunID;
const stReqResBattleRelive_ProtoFunID stReqResBattleRelive_ProtoFunID_ProtoFunID_MAX = stReqResBattleRelive_ProtoFunID_FunID;
const int stReqResBattleRelive_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResBattleRelive_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleRelive_ProtoFunID_descriptor();
inline const ::std::string& stReqResBattleRelive_ProtoFunID_Name(stReqResBattleRelive_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleRelive_ProtoFunID_descriptor(), value);
}
inline bool stReqResBattleRelive_ProtoFunID_Parse(
    const ::std::string& name, stReqResBattleRelive_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleRelive_ProtoFunID>(
    stReqResBattleRelive_ProtoFunID_descriptor(), name, value);
}
enum stRetResBattleRelive_eResult {
  stRetResBattleRelive_eResult_eSuccess = 1,
  stRetResBattleRelive_eResult_eLess_Of_Diamond = 2,
  stRetResBattleRelive_eResult_eNot_Died = 3,
  stRetResBattleRelive_eResult_eNot_In_CopyMap = 4
};
bool stRetResBattleRelive_eResult_IsValid(int value);
const stRetResBattleRelive_eResult stRetResBattleRelive_eResult_eResult_MIN = stRetResBattleRelive_eResult_eSuccess;
const stRetResBattleRelive_eResult stRetResBattleRelive_eResult_eResult_MAX = stRetResBattleRelive_eResult_eNot_In_CopyMap;
const int stRetResBattleRelive_eResult_eResult_ARRAYSIZE = stRetResBattleRelive_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleRelive_eResult_descriptor();
inline const ::std::string& stRetResBattleRelive_eResult_Name(stRetResBattleRelive_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleRelive_eResult_descriptor(), value);
}
inline bool stRetResBattleRelive_eResult_Parse(
    const ::std::string& name, stRetResBattleRelive_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleRelive_eResult>(
    stRetResBattleRelive_eResult_descriptor(), name, value);
}
enum stRetResBattleRelive_ProtoModID {
  stRetResBattleRelive_ProtoModID_ModID = 6
};
bool stRetResBattleRelive_ProtoModID_IsValid(int value);
const stRetResBattleRelive_ProtoModID stRetResBattleRelive_ProtoModID_ProtoModID_MIN = stRetResBattleRelive_ProtoModID_ModID;
const stRetResBattleRelive_ProtoModID stRetResBattleRelive_ProtoModID_ProtoModID_MAX = stRetResBattleRelive_ProtoModID_ModID;
const int stRetResBattleRelive_ProtoModID_ProtoModID_ARRAYSIZE = stRetResBattleRelive_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleRelive_ProtoModID_descriptor();
inline const ::std::string& stRetResBattleRelive_ProtoModID_Name(stRetResBattleRelive_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleRelive_ProtoModID_descriptor(), value);
}
inline bool stRetResBattleRelive_ProtoModID_Parse(
    const ::std::string& name, stRetResBattleRelive_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleRelive_ProtoModID>(
    stRetResBattleRelive_ProtoModID_descriptor(), name, value);
}
enum stRetResBattleRelive_ProtoFunID {
  stRetResBattleRelive_ProtoFunID_FunID = 116
};
bool stRetResBattleRelive_ProtoFunID_IsValid(int value);
const stRetResBattleRelive_ProtoFunID stRetResBattleRelive_ProtoFunID_ProtoFunID_MIN = stRetResBattleRelive_ProtoFunID_FunID;
const stRetResBattleRelive_ProtoFunID stRetResBattleRelive_ProtoFunID_ProtoFunID_MAX = stRetResBattleRelive_ProtoFunID_FunID;
const int stRetResBattleRelive_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetResBattleRelive_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleRelive_ProtoFunID_descriptor();
inline const ::std::string& stRetResBattleRelive_ProtoFunID_Name(stRetResBattleRelive_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleRelive_ProtoFunID_descriptor(), value);
}
inline bool stRetResBattleRelive_ProtoFunID_Parse(
    const ::std::string& name, stRetResBattleRelive_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleRelive_ProtoFunID>(
    stRetResBattleRelive_ProtoFunID_descriptor(), name, value);
}
enum stReqLeaveResBattle_ProtoModID {
  stReqLeaveResBattle_ProtoModID_ModID = 6
};
bool stReqLeaveResBattle_ProtoModID_IsValid(int value);
const stReqLeaveResBattle_ProtoModID stReqLeaveResBattle_ProtoModID_ProtoModID_MIN = stReqLeaveResBattle_ProtoModID_ModID;
const stReqLeaveResBattle_ProtoModID stReqLeaveResBattle_ProtoModID_ProtoModID_MAX = stReqLeaveResBattle_ProtoModID_ModID;
const int stReqLeaveResBattle_ProtoModID_ProtoModID_ARRAYSIZE = stReqLeaveResBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeaveResBattle_ProtoModID_descriptor();
inline const ::std::string& stReqLeaveResBattle_ProtoModID_Name(stReqLeaveResBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeaveResBattle_ProtoModID_descriptor(), value);
}
inline bool stReqLeaveResBattle_ProtoModID_Parse(
    const ::std::string& name, stReqLeaveResBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeaveResBattle_ProtoModID>(
    stReqLeaveResBattle_ProtoModID_descriptor(), name, value);
}
enum stReqLeaveResBattle_ProtoFunID {
  stReqLeaveResBattle_ProtoFunID_FunID = 117
};
bool stReqLeaveResBattle_ProtoFunID_IsValid(int value);
const stReqLeaveResBattle_ProtoFunID stReqLeaveResBattle_ProtoFunID_ProtoFunID_MIN = stReqLeaveResBattle_ProtoFunID_FunID;
const stReqLeaveResBattle_ProtoFunID stReqLeaveResBattle_ProtoFunID_ProtoFunID_MAX = stReqLeaveResBattle_ProtoFunID_FunID;
const int stReqLeaveResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLeaveResBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeaveResBattle_ProtoFunID_descriptor();
inline const ::std::string& stReqLeaveResBattle_ProtoFunID_Name(stReqLeaveResBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeaveResBattle_ProtoFunID_descriptor(), value);
}
inline bool stReqLeaveResBattle_ProtoFunID_Parse(
    const ::std::string& name, stReqLeaveResBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeaveResBattle_ProtoFunID>(
    stReqLeaveResBattle_ProtoFunID_descriptor(), name, value);
}
enum stRetLeaveResBattle_eResult {
  stRetLeaveResBattle_eResult_eSuccess = 1,
  stRetLeaveResBattle_eResult_eNot_In_CopyMap = 2
};
bool stRetLeaveResBattle_eResult_IsValid(int value);
const stRetLeaveResBattle_eResult stRetLeaveResBattle_eResult_eResult_MIN = stRetLeaveResBattle_eResult_eSuccess;
const stRetLeaveResBattle_eResult stRetLeaveResBattle_eResult_eResult_MAX = stRetLeaveResBattle_eResult_eNot_In_CopyMap;
const int stRetLeaveResBattle_eResult_eResult_ARRAYSIZE = stRetLeaveResBattle_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLeaveResBattle_eResult_descriptor();
inline const ::std::string& stRetLeaveResBattle_eResult_Name(stRetLeaveResBattle_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLeaveResBattle_eResult_descriptor(), value);
}
inline bool stRetLeaveResBattle_eResult_Parse(
    const ::std::string& name, stRetLeaveResBattle_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLeaveResBattle_eResult>(
    stRetLeaveResBattle_eResult_descriptor(), name, value);
}
enum stRetLeaveResBattle_ProtoModID {
  stRetLeaveResBattle_ProtoModID_ModID = 6
};
bool stRetLeaveResBattle_ProtoModID_IsValid(int value);
const stRetLeaveResBattle_ProtoModID stRetLeaveResBattle_ProtoModID_ProtoModID_MIN = stRetLeaveResBattle_ProtoModID_ModID;
const stRetLeaveResBattle_ProtoModID stRetLeaveResBattle_ProtoModID_ProtoModID_MAX = stRetLeaveResBattle_ProtoModID_ModID;
const int stRetLeaveResBattle_ProtoModID_ProtoModID_ARRAYSIZE = stRetLeaveResBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLeaveResBattle_ProtoModID_descriptor();
inline const ::std::string& stRetLeaveResBattle_ProtoModID_Name(stRetLeaveResBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLeaveResBattle_ProtoModID_descriptor(), value);
}
inline bool stRetLeaveResBattle_ProtoModID_Parse(
    const ::std::string& name, stRetLeaveResBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLeaveResBattle_ProtoModID>(
    stRetLeaveResBattle_ProtoModID_descriptor(), name, value);
}
enum stRetLeaveResBattle_ProtoFunID {
  stRetLeaveResBattle_ProtoFunID_FunID = 118
};
bool stRetLeaveResBattle_ProtoFunID_IsValid(int value);
const stRetLeaveResBattle_ProtoFunID stRetLeaveResBattle_ProtoFunID_ProtoFunID_MIN = stRetLeaveResBattle_ProtoFunID_FunID;
const stRetLeaveResBattle_ProtoFunID stRetLeaveResBattle_ProtoFunID_ProtoFunID_MAX = stRetLeaveResBattle_ProtoFunID_FunID;
const int stRetLeaveResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetLeaveResBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLeaveResBattle_ProtoFunID_descriptor();
inline const ::std::string& stRetLeaveResBattle_ProtoFunID_Name(stRetLeaveResBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLeaveResBattle_ProtoFunID_descriptor(), value);
}
inline bool stRetLeaveResBattle_ProtoFunID_Parse(
    const ::std::string& name, stRetLeaveResBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLeaveResBattle_ProtoFunID>(
    stRetLeaveResBattle_ProtoFunID_descriptor(), name, value);
}
enum stReqRecvResBattleRes_ProtoModID {
  stReqRecvResBattleRes_ProtoModID_ModID = 6
};
bool stReqRecvResBattleRes_ProtoModID_IsValid(int value);
const stReqRecvResBattleRes_ProtoModID stReqRecvResBattleRes_ProtoModID_ProtoModID_MIN = stReqRecvResBattleRes_ProtoModID_ModID;
const stReqRecvResBattleRes_ProtoModID stReqRecvResBattleRes_ProtoModID_ProtoModID_MAX = stReqRecvResBattleRes_ProtoModID_ModID;
const int stReqRecvResBattleRes_ProtoModID_ProtoModID_ARRAYSIZE = stReqRecvResBattleRes_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecvResBattleRes_ProtoModID_descriptor();
inline const ::std::string& stReqRecvResBattleRes_ProtoModID_Name(stReqRecvResBattleRes_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecvResBattleRes_ProtoModID_descriptor(), value);
}
inline bool stReqRecvResBattleRes_ProtoModID_Parse(
    const ::std::string& name, stReqRecvResBattleRes_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecvResBattleRes_ProtoModID>(
    stReqRecvResBattleRes_ProtoModID_descriptor(), name, value);
}
enum stReqRecvResBattleRes_ProtoFunID {
  stReqRecvResBattleRes_ProtoFunID_FunID = 119
};
bool stReqRecvResBattleRes_ProtoFunID_IsValid(int value);
const stReqRecvResBattleRes_ProtoFunID stReqRecvResBattleRes_ProtoFunID_ProtoFunID_MIN = stReqRecvResBattleRes_ProtoFunID_FunID;
const stReqRecvResBattleRes_ProtoFunID stReqRecvResBattleRes_ProtoFunID_ProtoFunID_MAX = stReqRecvResBattleRes_ProtoFunID_FunID;
const int stReqRecvResBattleRes_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRecvResBattleRes_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecvResBattleRes_ProtoFunID_descriptor();
inline const ::std::string& stReqRecvResBattleRes_ProtoFunID_Name(stReqRecvResBattleRes_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecvResBattleRes_ProtoFunID_descriptor(), value);
}
inline bool stReqRecvResBattleRes_ProtoFunID_Parse(
    const ::std::string& name, stReqRecvResBattleRes_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecvResBattleRes_ProtoFunID>(
    stReqRecvResBattleRes_ProtoFunID_descriptor(), name, value);
}
enum stRetRecvResBattleRes_ProtoModID {
  stRetRecvResBattleRes_ProtoModID_ModID = 6
};
bool stRetRecvResBattleRes_ProtoModID_IsValid(int value);
const stRetRecvResBattleRes_ProtoModID stRetRecvResBattleRes_ProtoModID_ProtoModID_MIN = stRetRecvResBattleRes_ProtoModID_ModID;
const stRetRecvResBattleRes_ProtoModID stRetRecvResBattleRes_ProtoModID_ProtoModID_MAX = stRetRecvResBattleRes_ProtoModID_ModID;
const int stRetRecvResBattleRes_ProtoModID_ProtoModID_ARRAYSIZE = stRetRecvResBattleRes_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRecvResBattleRes_ProtoModID_descriptor();
inline const ::std::string& stRetRecvResBattleRes_ProtoModID_Name(stRetRecvResBattleRes_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRecvResBattleRes_ProtoModID_descriptor(), value);
}
inline bool stRetRecvResBattleRes_ProtoModID_Parse(
    const ::std::string& name, stRetRecvResBattleRes_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRecvResBattleRes_ProtoModID>(
    stRetRecvResBattleRes_ProtoModID_descriptor(), name, value);
}
enum stRetRecvResBattleRes_ProtoFunID {
  stRetRecvResBattleRes_ProtoFunID_FunID = 120
};
bool stRetRecvResBattleRes_ProtoFunID_IsValid(int value);
const stRetRecvResBattleRes_ProtoFunID stRetRecvResBattleRes_ProtoFunID_ProtoFunID_MIN = stRetRecvResBattleRes_ProtoFunID_FunID;
const stRetRecvResBattleRes_ProtoFunID stRetRecvResBattleRes_ProtoFunID_ProtoFunID_MAX = stRetRecvResBattleRes_ProtoFunID_FunID;
const int stRetRecvResBattleRes_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRecvResBattleRes_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRecvResBattleRes_ProtoFunID_descriptor();
inline const ::std::string& stRetRecvResBattleRes_ProtoFunID_Name(stRetRecvResBattleRes_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRecvResBattleRes_ProtoFunID_descriptor(), value);
}
inline bool stRetRecvResBattleRes_ProtoFunID_Parse(
    const ::std::string& name, stRetRecvResBattleRes_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRecvResBattleRes_ProtoFunID>(
    stRetRecvResBattleRes_ProtoFunID_descriptor(), name, value);
}
enum stSendResBattleStreakNum_ProtoModID {
  stSendResBattleStreakNum_ProtoModID_ModID = 6
};
bool stSendResBattleStreakNum_ProtoModID_IsValid(int value);
const stSendResBattleStreakNum_ProtoModID stSendResBattleStreakNum_ProtoModID_ProtoModID_MIN = stSendResBattleStreakNum_ProtoModID_ModID;
const stSendResBattleStreakNum_ProtoModID stSendResBattleStreakNum_ProtoModID_ProtoModID_MAX = stSendResBattleStreakNum_ProtoModID_ModID;
const int stSendResBattleStreakNum_ProtoModID_ProtoModID_ARRAYSIZE = stSendResBattleStreakNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendResBattleStreakNum_ProtoModID_descriptor();
inline const ::std::string& stSendResBattleStreakNum_ProtoModID_Name(stSendResBattleStreakNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendResBattleStreakNum_ProtoModID_descriptor(), value);
}
inline bool stSendResBattleStreakNum_ProtoModID_Parse(
    const ::std::string& name, stSendResBattleStreakNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendResBattleStreakNum_ProtoModID>(
    stSendResBattleStreakNum_ProtoModID_descriptor(), name, value);
}
enum stSendResBattleStreakNum_ProtoFunID {
  stSendResBattleStreakNum_ProtoFunID_FunID = 121
};
bool stSendResBattleStreakNum_ProtoFunID_IsValid(int value);
const stSendResBattleStreakNum_ProtoFunID stSendResBattleStreakNum_ProtoFunID_ProtoFunID_MIN = stSendResBattleStreakNum_ProtoFunID_FunID;
const stSendResBattleStreakNum_ProtoFunID stSendResBattleStreakNum_ProtoFunID_ProtoFunID_MAX = stSendResBattleStreakNum_ProtoFunID_FunID;
const int stSendResBattleStreakNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendResBattleStreakNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendResBattleStreakNum_ProtoFunID_descriptor();
inline const ::std::string& stSendResBattleStreakNum_ProtoFunID_Name(stSendResBattleStreakNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendResBattleStreakNum_ProtoFunID_descriptor(), value);
}
inline bool stSendResBattleStreakNum_ProtoFunID_Parse(
    const ::std::string& name, stSendResBattleStreakNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendResBattleStreakNum_ProtoFunID>(
    stSendResBattleStreakNum_ProtoFunID_descriptor(), name, value);
}
enum stSendResBattleNotice_eNotice {
  stSendResBattleNotice_eNotice_eActivity_Start = 1,
  stSendResBattleNotice_eNotice_eActivity_End = 2,
  stSendResBattleNotice_eNotice_eRes_Is_Refresh = 3,
  stSendResBattleNotice_eNotice_eRes_Has_Refresh = 4
};
bool stSendResBattleNotice_eNotice_IsValid(int value);
const stSendResBattleNotice_eNotice stSendResBattleNotice_eNotice_eNotice_MIN = stSendResBattleNotice_eNotice_eActivity_Start;
const stSendResBattleNotice_eNotice stSendResBattleNotice_eNotice_eNotice_MAX = stSendResBattleNotice_eNotice_eRes_Has_Refresh;
const int stSendResBattleNotice_eNotice_eNotice_ARRAYSIZE = stSendResBattleNotice_eNotice_eNotice_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendResBattleNotice_eNotice_descriptor();
inline const ::std::string& stSendResBattleNotice_eNotice_Name(stSendResBattleNotice_eNotice value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendResBattleNotice_eNotice_descriptor(), value);
}
inline bool stSendResBattleNotice_eNotice_Parse(
    const ::std::string& name, stSendResBattleNotice_eNotice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendResBattleNotice_eNotice>(
    stSendResBattleNotice_eNotice_descriptor(), name, value);
}
enum stSendResBattleNotice_ProtoModID {
  stSendResBattleNotice_ProtoModID_ModID = 6
};
bool stSendResBattleNotice_ProtoModID_IsValid(int value);
const stSendResBattleNotice_ProtoModID stSendResBattleNotice_ProtoModID_ProtoModID_MIN = stSendResBattleNotice_ProtoModID_ModID;
const stSendResBattleNotice_ProtoModID stSendResBattleNotice_ProtoModID_ProtoModID_MAX = stSendResBattleNotice_ProtoModID_ModID;
const int stSendResBattleNotice_ProtoModID_ProtoModID_ARRAYSIZE = stSendResBattleNotice_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendResBattleNotice_ProtoModID_descriptor();
inline const ::std::string& stSendResBattleNotice_ProtoModID_Name(stSendResBattleNotice_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendResBattleNotice_ProtoModID_descriptor(), value);
}
inline bool stSendResBattleNotice_ProtoModID_Parse(
    const ::std::string& name, stSendResBattleNotice_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendResBattleNotice_ProtoModID>(
    stSendResBattleNotice_ProtoModID_descriptor(), name, value);
}
enum stSendResBattleNotice_ProtoFunID {
  stSendResBattleNotice_ProtoFunID_FunID = 122
};
bool stSendResBattleNotice_ProtoFunID_IsValid(int value);
const stSendResBattleNotice_ProtoFunID stSendResBattleNotice_ProtoFunID_ProtoFunID_MIN = stSendResBattleNotice_ProtoFunID_FunID;
const stSendResBattleNotice_ProtoFunID stSendResBattleNotice_ProtoFunID_ProtoFunID_MAX = stSendResBattleNotice_ProtoFunID_FunID;
const int stSendResBattleNotice_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendResBattleNotice_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendResBattleNotice_ProtoFunID_descriptor();
inline const ::std::string& stSendResBattleNotice_ProtoFunID_Name(stSendResBattleNotice_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendResBattleNotice_ProtoFunID_descriptor(), value);
}
inline bool stSendResBattleNotice_ProtoFunID_Parse(
    const ::std::string& name, stSendResBattleNotice_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendResBattleNotice_ProtoFunID>(
    stSendResBattleNotice_ProtoFunID_descriptor(), name, value);
}
enum stNotityResBattleKillInfo_ProtoModID {
  stNotityResBattleKillInfo_ProtoModID_ModID = 6
};
bool stNotityResBattleKillInfo_ProtoModID_IsValid(int value);
const stNotityResBattleKillInfo_ProtoModID stNotityResBattleKillInfo_ProtoModID_ProtoModID_MIN = stNotityResBattleKillInfo_ProtoModID_ModID;
const stNotityResBattleKillInfo_ProtoModID stNotityResBattleKillInfo_ProtoModID_ProtoModID_MAX = stNotityResBattleKillInfo_ProtoModID_ModID;
const int stNotityResBattleKillInfo_ProtoModID_ProtoModID_ARRAYSIZE = stNotityResBattleKillInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotityResBattleKillInfo_ProtoModID_descriptor();
inline const ::std::string& stNotityResBattleKillInfo_ProtoModID_Name(stNotityResBattleKillInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotityResBattleKillInfo_ProtoModID_descriptor(), value);
}
inline bool stNotityResBattleKillInfo_ProtoModID_Parse(
    const ::std::string& name, stNotityResBattleKillInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotityResBattleKillInfo_ProtoModID>(
    stNotityResBattleKillInfo_ProtoModID_descriptor(), name, value);
}
enum stNotityResBattleKillInfo_ProtoFunID {
  stNotityResBattleKillInfo_ProtoFunID_FunID = 123
};
bool stNotityResBattleKillInfo_ProtoFunID_IsValid(int value);
const stNotityResBattleKillInfo_ProtoFunID stNotityResBattleKillInfo_ProtoFunID_ProtoFunID_MIN = stNotityResBattleKillInfo_ProtoFunID_FunID;
const stNotityResBattleKillInfo_ProtoFunID stNotityResBattleKillInfo_ProtoFunID_ProtoFunID_MAX = stNotityResBattleKillInfo_ProtoFunID_FunID;
const int stNotityResBattleKillInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotityResBattleKillInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotityResBattleKillInfo_ProtoFunID_descriptor();
inline const ::std::string& stNotityResBattleKillInfo_ProtoFunID_Name(stNotityResBattleKillInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotityResBattleKillInfo_ProtoFunID_descriptor(), value);
}
inline bool stNotityResBattleKillInfo_ProtoFunID_Parse(
    const ::std::string& name, stNotityResBattleKillInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotityResBattleKillInfo_ProtoFunID>(
    stNotityResBattleKillInfo_ProtoFunID_descriptor(), name, value);
}
enum stNotityResBattleResRefresh_ProtoModID {
  stNotityResBattleResRefresh_ProtoModID_ModID = 6
};
bool stNotityResBattleResRefresh_ProtoModID_IsValid(int value);
const stNotityResBattleResRefresh_ProtoModID stNotityResBattleResRefresh_ProtoModID_ProtoModID_MIN = stNotityResBattleResRefresh_ProtoModID_ModID;
const stNotityResBattleResRefresh_ProtoModID stNotityResBattleResRefresh_ProtoModID_ProtoModID_MAX = stNotityResBattleResRefresh_ProtoModID_ModID;
const int stNotityResBattleResRefresh_ProtoModID_ProtoModID_ARRAYSIZE = stNotityResBattleResRefresh_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotityResBattleResRefresh_ProtoModID_descriptor();
inline const ::std::string& stNotityResBattleResRefresh_ProtoModID_Name(stNotityResBattleResRefresh_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotityResBattleResRefresh_ProtoModID_descriptor(), value);
}
inline bool stNotityResBattleResRefresh_ProtoModID_Parse(
    const ::std::string& name, stNotityResBattleResRefresh_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotityResBattleResRefresh_ProtoModID>(
    stNotityResBattleResRefresh_ProtoModID_descriptor(), name, value);
}
enum stNotityResBattleResRefresh_ProtoFunID {
  stNotityResBattleResRefresh_ProtoFunID_FunID = 124
};
bool stNotityResBattleResRefresh_ProtoFunID_IsValid(int value);
const stNotityResBattleResRefresh_ProtoFunID stNotityResBattleResRefresh_ProtoFunID_ProtoFunID_MIN = stNotityResBattleResRefresh_ProtoFunID_FunID;
const stNotityResBattleResRefresh_ProtoFunID stNotityResBattleResRefresh_ProtoFunID_ProtoFunID_MAX = stNotityResBattleResRefresh_ProtoFunID_FunID;
const int stNotityResBattleResRefresh_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotityResBattleResRefresh_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotityResBattleResRefresh_ProtoFunID_descriptor();
inline const ::std::string& stNotityResBattleResRefresh_ProtoFunID_Name(stNotityResBattleResRefresh_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotityResBattleResRefresh_ProtoFunID_descriptor(), value);
}
inline bool stNotityResBattleResRefresh_ProtoFunID_Parse(
    const ::std::string& name, stNotityResBattleResRefresh_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotityResBattleResRefresh_ProtoFunID>(
    stNotityResBattleResRefresh_ProtoFunID_descriptor(), name, value);
}
enum stNotityResBattleResEmpty_ProtoModID {
  stNotityResBattleResEmpty_ProtoModID_ModID = 6
};
bool stNotityResBattleResEmpty_ProtoModID_IsValid(int value);
const stNotityResBattleResEmpty_ProtoModID stNotityResBattleResEmpty_ProtoModID_ProtoModID_MIN = stNotityResBattleResEmpty_ProtoModID_ModID;
const stNotityResBattleResEmpty_ProtoModID stNotityResBattleResEmpty_ProtoModID_ProtoModID_MAX = stNotityResBattleResEmpty_ProtoModID_ModID;
const int stNotityResBattleResEmpty_ProtoModID_ProtoModID_ARRAYSIZE = stNotityResBattleResEmpty_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotityResBattleResEmpty_ProtoModID_descriptor();
inline const ::std::string& stNotityResBattleResEmpty_ProtoModID_Name(stNotityResBattleResEmpty_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotityResBattleResEmpty_ProtoModID_descriptor(), value);
}
inline bool stNotityResBattleResEmpty_ProtoModID_Parse(
    const ::std::string& name, stNotityResBattleResEmpty_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotityResBattleResEmpty_ProtoModID>(
    stNotityResBattleResEmpty_ProtoModID_descriptor(), name, value);
}
enum stNotityResBattleResEmpty_ProtoFunID {
  stNotityResBattleResEmpty_ProtoFunID_FunID = 125
};
bool stNotityResBattleResEmpty_ProtoFunID_IsValid(int value);
const stNotityResBattleResEmpty_ProtoFunID stNotityResBattleResEmpty_ProtoFunID_ProtoFunID_MIN = stNotityResBattleResEmpty_ProtoFunID_FunID;
const stNotityResBattleResEmpty_ProtoFunID stNotityResBattleResEmpty_ProtoFunID_ProtoFunID_MAX = stNotityResBattleResEmpty_ProtoFunID_FunID;
const int stNotityResBattleResEmpty_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotityResBattleResEmpty_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotityResBattleResEmpty_ProtoFunID_descriptor();
inline const ::std::string& stNotityResBattleResEmpty_ProtoFunID_Name(stNotityResBattleResEmpty_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotityResBattleResEmpty_ProtoFunID_descriptor(), value);
}
inline bool stNotityResBattleResEmpty_ProtoFunID_Parse(
    const ::std::string& name, stNotityResBattleResEmpty_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotityResBattleResEmpty_ProtoFunID>(
    stNotityResBattleResEmpty_ProtoFunID_descriptor(), name, value);
}
enum stNotityResBattleGlory_ProtoModID {
  stNotityResBattleGlory_ProtoModID_ModID = 6
};
bool stNotityResBattleGlory_ProtoModID_IsValid(int value);
const stNotityResBattleGlory_ProtoModID stNotityResBattleGlory_ProtoModID_ProtoModID_MIN = stNotityResBattleGlory_ProtoModID_ModID;
const stNotityResBattleGlory_ProtoModID stNotityResBattleGlory_ProtoModID_ProtoModID_MAX = stNotityResBattleGlory_ProtoModID_ModID;
const int stNotityResBattleGlory_ProtoModID_ProtoModID_ARRAYSIZE = stNotityResBattleGlory_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotityResBattleGlory_ProtoModID_descriptor();
inline const ::std::string& stNotityResBattleGlory_ProtoModID_Name(stNotityResBattleGlory_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotityResBattleGlory_ProtoModID_descriptor(), value);
}
inline bool stNotityResBattleGlory_ProtoModID_Parse(
    const ::std::string& name, stNotityResBattleGlory_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotityResBattleGlory_ProtoModID>(
    stNotityResBattleGlory_ProtoModID_descriptor(), name, value);
}
enum stNotityResBattleGlory_ProtoFunID {
  stNotityResBattleGlory_ProtoFunID_FunID = 126
};
bool stNotityResBattleGlory_ProtoFunID_IsValid(int value);
const stNotityResBattleGlory_ProtoFunID stNotityResBattleGlory_ProtoFunID_ProtoFunID_MIN = stNotityResBattleGlory_ProtoFunID_FunID;
const stNotityResBattleGlory_ProtoFunID stNotityResBattleGlory_ProtoFunID_ProtoFunID_MAX = stNotityResBattleGlory_ProtoFunID_FunID;
const int stNotityResBattleGlory_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotityResBattleGlory_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotityResBattleGlory_ProtoFunID_descriptor();
inline const ::std::string& stNotityResBattleGlory_ProtoFunID_Name(stNotityResBattleGlory_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotityResBattleGlory_ProtoFunID_descriptor(), value);
}
inline bool stNotityResBattleGlory_ProtoFunID_Parse(
    const ::std::string& name, stNotityResBattleGlory_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotityResBattleGlory_ProtoFunID>(
    stNotityResBattleGlory_ProtoFunID_descriptor(), name, value);
}
enum stBroadCastResBattleInvite_ProtoModID {
  stBroadCastResBattleInvite_ProtoModID_ModID = 6
};
bool stBroadCastResBattleInvite_ProtoModID_IsValid(int value);
const stBroadCastResBattleInvite_ProtoModID stBroadCastResBattleInvite_ProtoModID_ProtoModID_MIN = stBroadCastResBattleInvite_ProtoModID_ModID;
const stBroadCastResBattleInvite_ProtoModID stBroadCastResBattleInvite_ProtoModID_ProtoModID_MAX = stBroadCastResBattleInvite_ProtoModID_ModID;
const int stBroadCastResBattleInvite_ProtoModID_ProtoModID_ARRAYSIZE = stBroadCastResBattleInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadCastResBattleInvite_ProtoModID_descriptor();
inline const ::std::string& stBroadCastResBattleInvite_ProtoModID_Name(stBroadCastResBattleInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadCastResBattleInvite_ProtoModID_descriptor(), value);
}
inline bool stBroadCastResBattleInvite_ProtoModID_Parse(
    const ::std::string& name, stBroadCastResBattleInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadCastResBattleInvite_ProtoModID>(
    stBroadCastResBattleInvite_ProtoModID_descriptor(), name, value);
}
enum stBroadCastResBattleInvite_ProtoFunID {
  stBroadCastResBattleInvite_ProtoFunID_FunID = 127
};
bool stBroadCastResBattleInvite_ProtoFunID_IsValid(int value);
const stBroadCastResBattleInvite_ProtoFunID stBroadCastResBattleInvite_ProtoFunID_ProtoFunID_MIN = stBroadCastResBattleInvite_ProtoFunID_FunID;
const stBroadCastResBattleInvite_ProtoFunID stBroadCastResBattleInvite_ProtoFunID_ProtoFunID_MAX = stBroadCastResBattleInvite_ProtoFunID_FunID;
const int stBroadCastResBattleInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stBroadCastResBattleInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBroadCastResBattleInvite_ProtoFunID_descriptor();
inline const ::std::string& stBroadCastResBattleInvite_ProtoFunID_Name(stBroadCastResBattleInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBroadCastResBattleInvite_ProtoFunID_descriptor(), value);
}
inline bool stBroadCastResBattleInvite_ProtoFunID_Parse(
    const ::std::string& name, stBroadCastResBattleInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBroadCastResBattleInvite_ProtoFunID>(
    stBroadCastResBattleInvite_ProtoFunID_descriptor(), name, value);
}
enum stRetResBattleReceiveInvite_ProtoModID {
  stRetResBattleReceiveInvite_ProtoModID_ModID = 6
};
bool stRetResBattleReceiveInvite_ProtoModID_IsValid(int value);
const stRetResBattleReceiveInvite_ProtoModID stRetResBattleReceiveInvite_ProtoModID_ProtoModID_MIN = stRetResBattleReceiveInvite_ProtoModID_ModID;
const stRetResBattleReceiveInvite_ProtoModID stRetResBattleReceiveInvite_ProtoModID_ProtoModID_MAX = stRetResBattleReceiveInvite_ProtoModID_ModID;
const int stRetResBattleReceiveInvite_ProtoModID_ProtoModID_ARRAYSIZE = stRetResBattleReceiveInvite_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleReceiveInvite_ProtoModID_descriptor();
inline const ::std::string& stRetResBattleReceiveInvite_ProtoModID_Name(stRetResBattleReceiveInvite_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleReceiveInvite_ProtoModID_descriptor(), value);
}
inline bool stRetResBattleReceiveInvite_ProtoModID_Parse(
    const ::std::string& name, stRetResBattleReceiveInvite_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleReceiveInvite_ProtoModID>(
    stRetResBattleReceiveInvite_ProtoModID_descriptor(), name, value);
}
enum stRetResBattleReceiveInvite_ProtoFunID {
  stRetResBattleReceiveInvite_ProtoFunID_FunID = 128
};
bool stRetResBattleReceiveInvite_ProtoFunID_IsValid(int value);
const stRetResBattleReceiveInvite_ProtoFunID stRetResBattleReceiveInvite_ProtoFunID_ProtoFunID_MIN = stRetResBattleReceiveInvite_ProtoFunID_FunID;
const stRetResBattleReceiveInvite_ProtoFunID stRetResBattleReceiveInvite_ProtoFunID_ProtoFunID_MAX = stRetResBattleReceiveInvite_ProtoFunID_FunID;
const int stRetResBattleReceiveInvite_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetResBattleReceiveInvite_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleReceiveInvite_ProtoFunID_descriptor();
inline const ::std::string& stRetResBattleReceiveInvite_ProtoFunID_Name(stRetResBattleReceiveInvite_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleReceiveInvite_ProtoFunID_descriptor(), value);
}
inline bool stRetResBattleReceiveInvite_ProtoFunID_Parse(
    const ::std::string& name, stRetResBattleReceiveInvite_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleReceiveInvite_ProtoFunID>(
    stRetResBattleReceiveInvite_ProtoFunID_descriptor(), name, value);
}
enum stResBattleReplyInviteJoin_ProtoModID {
  stResBattleReplyInviteJoin_ProtoModID_ModID = 6
};
bool stResBattleReplyInviteJoin_ProtoModID_IsValid(int value);
const stResBattleReplyInviteJoin_ProtoModID stResBattleReplyInviteJoin_ProtoModID_ProtoModID_MIN = stResBattleReplyInviteJoin_ProtoModID_ModID;
const stResBattleReplyInviteJoin_ProtoModID stResBattleReplyInviteJoin_ProtoModID_ProtoModID_MAX = stResBattleReplyInviteJoin_ProtoModID_ModID;
const int stResBattleReplyInviteJoin_ProtoModID_ProtoModID_ARRAYSIZE = stResBattleReplyInviteJoin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleReplyInviteJoin_ProtoModID_descriptor();
inline const ::std::string& stResBattleReplyInviteJoin_ProtoModID_Name(stResBattleReplyInviteJoin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleReplyInviteJoin_ProtoModID_descriptor(), value);
}
inline bool stResBattleReplyInviteJoin_ProtoModID_Parse(
    const ::std::string& name, stResBattleReplyInviteJoin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleReplyInviteJoin_ProtoModID>(
    stResBattleReplyInviteJoin_ProtoModID_descriptor(), name, value);
}
enum stResBattleReplyInviteJoin_ProtoFunID {
  stResBattleReplyInviteJoin_ProtoFunID_FunID = 129
};
bool stResBattleReplyInviteJoin_ProtoFunID_IsValid(int value);
const stResBattleReplyInviteJoin_ProtoFunID stResBattleReplyInviteJoin_ProtoFunID_ProtoFunID_MIN = stResBattleReplyInviteJoin_ProtoFunID_FunID;
const stResBattleReplyInviteJoin_ProtoFunID stResBattleReplyInviteJoin_ProtoFunID_ProtoFunID_MAX = stResBattleReplyInviteJoin_ProtoFunID_FunID;
const int stResBattleReplyInviteJoin_ProtoFunID_ProtoFunID_ARRAYSIZE = stResBattleReplyInviteJoin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleReplyInviteJoin_ProtoFunID_descriptor();
inline const ::std::string& stResBattleReplyInviteJoin_ProtoFunID_Name(stResBattleReplyInviteJoin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleReplyInviteJoin_ProtoFunID_descriptor(), value);
}
inline bool stResBattleReplyInviteJoin_ProtoFunID_Parse(
    const ::std::string& name, stResBattleReplyInviteJoin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleReplyInviteJoin_ProtoFunID>(
    stResBattleReplyInviteJoin_ProtoFunID_descriptor(), name, value);
}
enum stResBattleInviteJoinRes_eResult {
  stResBattleInviteJoinRes_eResult_TEAM_NOT_EXSIT = 1,
  stResBattleInviteJoinRes_eResult_TEAM_FULL = 2,
  stResBattleInviteJoinRes_eResult_INNER_ERROR = 3
};
bool stResBattleInviteJoinRes_eResult_IsValid(int value);
const stResBattleInviteJoinRes_eResult stResBattleInviteJoinRes_eResult_eResult_MIN = stResBattleInviteJoinRes_eResult_TEAM_NOT_EXSIT;
const stResBattleInviteJoinRes_eResult stResBattleInviteJoinRes_eResult_eResult_MAX = stResBattleInviteJoinRes_eResult_INNER_ERROR;
const int stResBattleInviteJoinRes_eResult_eResult_ARRAYSIZE = stResBattleInviteJoinRes_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleInviteJoinRes_eResult_descriptor();
inline const ::std::string& stResBattleInviteJoinRes_eResult_Name(stResBattleInviteJoinRes_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleInviteJoinRes_eResult_descriptor(), value);
}
inline bool stResBattleInviteJoinRes_eResult_Parse(
    const ::std::string& name, stResBattleInviteJoinRes_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleInviteJoinRes_eResult>(
    stResBattleInviteJoinRes_eResult_descriptor(), name, value);
}
enum stResBattleInviteJoinRes_ProtoModID {
  stResBattleInviteJoinRes_ProtoModID_ModID = 6
};
bool stResBattleInviteJoinRes_ProtoModID_IsValid(int value);
const stResBattleInviteJoinRes_ProtoModID stResBattleInviteJoinRes_ProtoModID_ProtoModID_MIN = stResBattleInviteJoinRes_ProtoModID_ModID;
const stResBattleInviteJoinRes_ProtoModID stResBattleInviteJoinRes_ProtoModID_ProtoModID_MAX = stResBattleInviteJoinRes_ProtoModID_ModID;
const int stResBattleInviteJoinRes_ProtoModID_ProtoModID_ARRAYSIZE = stResBattleInviteJoinRes_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleInviteJoinRes_ProtoModID_descriptor();
inline const ::std::string& stResBattleInviteJoinRes_ProtoModID_Name(stResBattleInviteJoinRes_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleInviteJoinRes_ProtoModID_descriptor(), value);
}
inline bool stResBattleInviteJoinRes_ProtoModID_Parse(
    const ::std::string& name, stResBattleInviteJoinRes_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleInviteJoinRes_ProtoModID>(
    stResBattleInviteJoinRes_ProtoModID_descriptor(), name, value);
}
enum stResBattleInviteJoinRes_ProtoFunID {
  stResBattleInviteJoinRes_ProtoFunID_FunID = 130
};
bool stResBattleInviteJoinRes_ProtoFunID_IsValid(int value);
const stResBattleInviteJoinRes_ProtoFunID stResBattleInviteJoinRes_ProtoFunID_ProtoFunID_MIN = stResBattleInviteJoinRes_ProtoFunID_FunID;
const stResBattleInviteJoinRes_ProtoFunID stResBattleInviteJoinRes_ProtoFunID_ProtoFunID_MAX = stResBattleInviteJoinRes_ProtoFunID_FunID;
const int stResBattleInviteJoinRes_ProtoFunID_ProtoFunID_ARRAYSIZE = stResBattleInviteJoinRes_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleInviteJoinRes_ProtoFunID_descriptor();
inline const ::std::string& stResBattleInviteJoinRes_ProtoFunID_Name(stResBattleInviteJoinRes_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleInviteJoinRes_ProtoFunID_descriptor(), value);
}
inline bool stResBattleInviteJoinRes_ProtoFunID_Parse(
    const ::std::string& name, stResBattleInviteJoinRes_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleInviteJoinRes_ProtoFunID>(
    stResBattleInviteJoinRes_ProtoFunID_descriptor(), name, value);
}
enum stReqStoneCopyMapInfo_ProtoModID {
  stReqStoneCopyMapInfo_ProtoModID_ModID = 6
};
bool stReqStoneCopyMapInfo_ProtoModID_IsValid(int value);
const stReqStoneCopyMapInfo_ProtoModID stReqStoneCopyMapInfo_ProtoModID_ProtoModID_MIN = stReqStoneCopyMapInfo_ProtoModID_ModID;
const stReqStoneCopyMapInfo_ProtoModID stReqStoneCopyMapInfo_ProtoModID_ProtoModID_MAX = stReqStoneCopyMapInfo_ProtoModID_ModID;
const int stReqStoneCopyMapInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqStoneCopyMapInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqStoneCopyMapInfo_ProtoModID_descriptor();
inline const ::std::string& stReqStoneCopyMapInfo_ProtoModID_Name(stReqStoneCopyMapInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqStoneCopyMapInfo_ProtoModID_descriptor(), value);
}
inline bool stReqStoneCopyMapInfo_ProtoModID_Parse(
    const ::std::string& name, stReqStoneCopyMapInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqStoneCopyMapInfo_ProtoModID>(
    stReqStoneCopyMapInfo_ProtoModID_descriptor(), name, value);
}
enum stReqStoneCopyMapInfo_ProtoFunID {
  stReqStoneCopyMapInfo_ProtoFunID_FunID = 131
};
bool stReqStoneCopyMapInfo_ProtoFunID_IsValid(int value);
const stReqStoneCopyMapInfo_ProtoFunID stReqStoneCopyMapInfo_ProtoFunID_ProtoFunID_MIN = stReqStoneCopyMapInfo_ProtoFunID_FunID;
const stReqStoneCopyMapInfo_ProtoFunID stReqStoneCopyMapInfo_ProtoFunID_ProtoFunID_MAX = stReqStoneCopyMapInfo_ProtoFunID_FunID;
const int stReqStoneCopyMapInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqStoneCopyMapInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqStoneCopyMapInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqStoneCopyMapInfo_ProtoFunID_Name(stReqStoneCopyMapInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqStoneCopyMapInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqStoneCopyMapInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqStoneCopyMapInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqStoneCopyMapInfo_ProtoFunID>(
    stReqStoneCopyMapInfo_ProtoFunID_descriptor(), name, value);
}
enum stStoneCopyMapInfoResult_ProtoModID {
  stStoneCopyMapInfoResult_ProtoModID_ModID = 6
};
bool stStoneCopyMapInfoResult_ProtoModID_IsValid(int value);
const stStoneCopyMapInfoResult_ProtoModID stStoneCopyMapInfoResult_ProtoModID_ProtoModID_MIN = stStoneCopyMapInfoResult_ProtoModID_ModID;
const stStoneCopyMapInfoResult_ProtoModID stStoneCopyMapInfoResult_ProtoModID_ProtoModID_MAX = stStoneCopyMapInfoResult_ProtoModID_ModID;
const int stStoneCopyMapInfoResult_ProtoModID_ProtoModID_ARRAYSIZE = stStoneCopyMapInfoResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStoneCopyMapInfoResult_ProtoModID_descriptor();
inline const ::std::string& stStoneCopyMapInfoResult_ProtoModID_Name(stStoneCopyMapInfoResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStoneCopyMapInfoResult_ProtoModID_descriptor(), value);
}
inline bool stStoneCopyMapInfoResult_ProtoModID_Parse(
    const ::std::string& name, stStoneCopyMapInfoResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStoneCopyMapInfoResult_ProtoModID>(
    stStoneCopyMapInfoResult_ProtoModID_descriptor(), name, value);
}
enum stStoneCopyMapInfoResult_ProtoFunID {
  stStoneCopyMapInfoResult_ProtoFunID_FunID = 132
};
bool stStoneCopyMapInfoResult_ProtoFunID_IsValid(int value);
const stStoneCopyMapInfoResult_ProtoFunID stStoneCopyMapInfoResult_ProtoFunID_ProtoFunID_MIN = stStoneCopyMapInfoResult_ProtoFunID_FunID;
const stStoneCopyMapInfoResult_ProtoFunID stStoneCopyMapInfoResult_ProtoFunID_ProtoFunID_MAX = stStoneCopyMapInfoResult_ProtoFunID_FunID;
const int stStoneCopyMapInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stStoneCopyMapInfoResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStoneCopyMapInfoResult_ProtoFunID_descriptor();
inline const ::std::string& stStoneCopyMapInfoResult_ProtoFunID_Name(stStoneCopyMapInfoResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStoneCopyMapInfoResult_ProtoFunID_descriptor(), value);
}
inline bool stStoneCopyMapInfoResult_ProtoFunID_Parse(
    const ::std::string& name, stStoneCopyMapInfoResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStoneCopyMapInfoResult_ProtoFunID>(
    stStoneCopyMapInfoResult_ProtoFunID_descriptor(), name, value);
}
enum stReqChallengeStoneCopyMap_ProtoModID {
  stReqChallengeStoneCopyMap_ProtoModID_ModID = 6
};
bool stReqChallengeStoneCopyMap_ProtoModID_IsValid(int value);
const stReqChallengeStoneCopyMap_ProtoModID stReqChallengeStoneCopyMap_ProtoModID_ProtoModID_MIN = stReqChallengeStoneCopyMap_ProtoModID_ModID;
const stReqChallengeStoneCopyMap_ProtoModID stReqChallengeStoneCopyMap_ProtoModID_ProtoModID_MAX = stReqChallengeStoneCopyMap_ProtoModID_ModID;
const int stReqChallengeStoneCopyMap_ProtoModID_ProtoModID_ARRAYSIZE = stReqChallengeStoneCopyMap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChallengeStoneCopyMap_ProtoModID_descriptor();
inline const ::std::string& stReqChallengeStoneCopyMap_ProtoModID_Name(stReqChallengeStoneCopyMap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChallengeStoneCopyMap_ProtoModID_descriptor(), value);
}
inline bool stReqChallengeStoneCopyMap_ProtoModID_Parse(
    const ::std::string& name, stReqChallengeStoneCopyMap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChallengeStoneCopyMap_ProtoModID>(
    stReqChallengeStoneCopyMap_ProtoModID_descriptor(), name, value);
}
enum stReqChallengeStoneCopyMap_ProtoFunID {
  stReqChallengeStoneCopyMap_ProtoFunID_FunID = 133
};
bool stReqChallengeStoneCopyMap_ProtoFunID_IsValid(int value);
const stReqChallengeStoneCopyMap_ProtoFunID stReqChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MIN = stReqChallengeStoneCopyMap_ProtoFunID_FunID;
const stReqChallengeStoneCopyMap_ProtoFunID stReqChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MAX = stReqChallengeStoneCopyMap_ProtoFunID_FunID;
const int stReqChallengeStoneCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChallengeStoneCopyMap_ProtoFunID_descriptor();
inline const ::std::string& stReqChallengeStoneCopyMap_ProtoFunID_Name(stReqChallengeStoneCopyMap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChallengeStoneCopyMap_ProtoFunID_descriptor(), value);
}
inline bool stReqChallengeStoneCopyMap_ProtoFunID_Parse(
    const ::std::string& name, stReqChallengeStoneCopyMap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChallengeStoneCopyMap_ProtoFunID>(
    stReqChallengeStoneCopyMap_ProtoFunID_descriptor(), name, value);
}
enum stChallengeStoneCopyMap_eResult {
  stChallengeStoneCopyMap_eResult_eSuccess = 1,
  stChallengeStoneCopyMap_eResult_eLvl_Id_Not_Exist = 2,
  stChallengeStoneCopyMap_eResult_eTime_not_Open = 3,
  stChallengeStoneCopyMap_eResult_eLess_Of_Challenge_Time = 4,
  stChallengeStoneCopyMap_eResult_eLess_Of_Sp = 5,
  stChallengeStoneCopyMap_eResult_eLess_Of_Lilian = 6,
  stChallengeStoneCopyMap_eResult_eLvl_Limit = 7,
  stChallengeStoneCopyMap_eResult_eBag_Full = 8,
  stChallengeStoneCopyMap_eResult_ePre_Lvl_Id_Not_Pass = 9,
  stChallengeStoneCopyMap_eResult_ePre_Lvl_Id_Not_Exists = 10
};
bool stChallengeStoneCopyMap_eResult_IsValid(int value);
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap_eResult_eResult_MIN = stChallengeStoneCopyMap_eResult_eSuccess;
const stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap_eResult_eResult_MAX = stChallengeStoneCopyMap_eResult_ePre_Lvl_Id_Not_Exists;
const int stChallengeStoneCopyMap_eResult_eResult_ARRAYSIZE = stChallengeStoneCopyMap_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallengeStoneCopyMap_eResult_descriptor();
inline const ::std::string& stChallengeStoneCopyMap_eResult_Name(stChallengeStoneCopyMap_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallengeStoneCopyMap_eResult_descriptor(), value);
}
inline bool stChallengeStoneCopyMap_eResult_Parse(
    const ::std::string& name, stChallengeStoneCopyMap_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallengeStoneCopyMap_eResult>(
    stChallengeStoneCopyMap_eResult_descriptor(), name, value);
}
enum stChallengeStoneCopyMap_ProtoModID {
  stChallengeStoneCopyMap_ProtoModID_ModID = 6
};
bool stChallengeStoneCopyMap_ProtoModID_IsValid(int value);
const stChallengeStoneCopyMap_ProtoModID stChallengeStoneCopyMap_ProtoModID_ProtoModID_MIN = stChallengeStoneCopyMap_ProtoModID_ModID;
const stChallengeStoneCopyMap_ProtoModID stChallengeStoneCopyMap_ProtoModID_ProtoModID_MAX = stChallengeStoneCopyMap_ProtoModID_ModID;
const int stChallengeStoneCopyMap_ProtoModID_ProtoModID_ARRAYSIZE = stChallengeStoneCopyMap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallengeStoneCopyMap_ProtoModID_descriptor();
inline const ::std::string& stChallengeStoneCopyMap_ProtoModID_Name(stChallengeStoneCopyMap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallengeStoneCopyMap_ProtoModID_descriptor(), value);
}
inline bool stChallengeStoneCopyMap_ProtoModID_Parse(
    const ::std::string& name, stChallengeStoneCopyMap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallengeStoneCopyMap_ProtoModID>(
    stChallengeStoneCopyMap_ProtoModID_descriptor(), name, value);
}
enum stChallengeStoneCopyMap_ProtoFunID {
  stChallengeStoneCopyMap_ProtoFunID_FunID = 134
};
bool stChallengeStoneCopyMap_ProtoFunID_IsValid(int value);
const stChallengeStoneCopyMap_ProtoFunID stChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MIN = stChallengeStoneCopyMap_ProtoFunID_FunID;
const stChallengeStoneCopyMap_ProtoFunID stChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MAX = stChallengeStoneCopyMap_ProtoFunID_FunID;
const int stChallengeStoneCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE = stChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChallengeStoneCopyMap_ProtoFunID_descriptor();
inline const ::std::string& stChallengeStoneCopyMap_ProtoFunID_Name(stChallengeStoneCopyMap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChallengeStoneCopyMap_ProtoFunID_descriptor(), value);
}
inline bool stChallengeStoneCopyMap_ProtoFunID_Parse(
    const ::std::string& name, stChallengeStoneCopyMap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChallengeStoneCopyMap_ProtoFunID>(
    stChallengeStoneCopyMap_ProtoFunID_descriptor(), name, value);
}
enum stReqResetStoneCopyMapNum_ProtoModID {
  stReqResetStoneCopyMapNum_ProtoModID_ModID = 6
};
bool stReqResetStoneCopyMapNum_ProtoModID_IsValid(int value);
const stReqResetStoneCopyMapNum_ProtoModID stReqResetStoneCopyMapNum_ProtoModID_ProtoModID_MIN = stReqResetStoneCopyMapNum_ProtoModID_ModID;
const stReqResetStoneCopyMapNum_ProtoModID stReqResetStoneCopyMapNum_ProtoModID_ProtoModID_MAX = stReqResetStoneCopyMapNum_ProtoModID_ModID;
const int stReqResetStoneCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE = stReqResetStoneCopyMapNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetStoneCopyMapNum_ProtoModID_descriptor();
inline const ::std::string& stReqResetStoneCopyMapNum_ProtoModID_Name(stReqResetStoneCopyMapNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetStoneCopyMapNum_ProtoModID_descriptor(), value);
}
inline bool stReqResetStoneCopyMapNum_ProtoModID_Parse(
    const ::std::string& name, stReqResetStoneCopyMapNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetStoneCopyMapNum_ProtoModID>(
    stReqResetStoneCopyMapNum_ProtoModID_descriptor(), name, value);
}
enum stReqResetStoneCopyMapNum_ProtoFunID {
  stReqResetStoneCopyMapNum_ProtoFunID_FunID = 135
};
bool stReqResetStoneCopyMapNum_ProtoFunID_IsValid(int value);
const stReqResetStoneCopyMapNum_ProtoFunID stReqResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MIN = stReqResetStoneCopyMapNum_ProtoFunID_FunID;
const stReqResetStoneCopyMapNum_ProtoFunID stReqResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MAX = stReqResetStoneCopyMapNum_ProtoFunID_FunID;
const int stReqResetStoneCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetStoneCopyMapNum_ProtoFunID_descriptor();
inline const ::std::string& stReqResetStoneCopyMapNum_ProtoFunID_Name(stReqResetStoneCopyMapNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetStoneCopyMapNum_ProtoFunID_descriptor(), value);
}
inline bool stReqResetStoneCopyMapNum_ProtoFunID_Parse(
    const ::std::string& name, stReqResetStoneCopyMapNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetStoneCopyMapNum_ProtoFunID>(
    stReqResetStoneCopyMapNum_ProtoFunID_descriptor(), name, value);
}
enum stResetStoneCopyMapNum_eResult {
  stResetStoneCopyMapNum_eResult_eSuccess = 1,
  stResetStoneCopyMapNum_eResult_eLess_of_Diamond = 2,
  stResetStoneCopyMapNum_eResult_eTimes_Remain = 3
};
bool stResetStoneCopyMapNum_eResult_IsValid(int value);
const stResetStoneCopyMapNum_eResult stResetStoneCopyMapNum_eResult_eResult_MIN = stResetStoneCopyMapNum_eResult_eSuccess;
const stResetStoneCopyMapNum_eResult stResetStoneCopyMapNum_eResult_eResult_MAX = stResetStoneCopyMapNum_eResult_eTimes_Remain;
const int stResetStoneCopyMapNum_eResult_eResult_ARRAYSIZE = stResetStoneCopyMapNum_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetStoneCopyMapNum_eResult_descriptor();
inline const ::std::string& stResetStoneCopyMapNum_eResult_Name(stResetStoneCopyMapNum_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetStoneCopyMapNum_eResult_descriptor(), value);
}
inline bool stResetStoneCopyMapNum_eResult_Parse(
    const ::std::string& name, stResetStoneCopyMapNum_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetStoneCopyMapNum_eResult>(
    stResetStoneCopyMapNum_eResult_descriptor(), name, value);
}
enum stResetStoneCopyMapNum_ProtoModID {
  stResetStoneCopyMapNum_ProtoModID_ModID = 6
};
bool stResetStoneCopyMapNum_ProtoModID_IsValid(int value);
const stResetStoneCopyMapNum_ProtoModID stResetStoneCopyMapNum_ProtoModID_ProtoModID_MIN = stResetStoneCopyMapNum_ProtoModID_ModID;
const stResetStoneCopyMapNum_ProtoModID stResetStoneCopyMapNum_ProtoModID_ProtoModID_MAX = stResetStoneCopyMapNum_ProtoModID_ModID;
const int stResetStoneCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE = stResetStoneCopyMapNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetStoneCopyMapNum_ProtoModID_descriptor();
inline const ::std::string& stResetStoneCopyMapNum_ProtoModID_Name(stResetStoneCopyMapNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetStoneCopyMapNum_ProtoModID_descriptor(), value);
}
inline bool stResetStoneCopyMapNum_ProtoModID_Parse(
    const ::std::string& name, stResetStoneCopyMapNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetStoneCopyMapNum_ProtoModID>(
    stResetStoneCopyMapNum_ProtoModID_descriptor(), name, value);
}
enum stResetStoneCopyMapNum_ProtoFunID {
  stResetStoneCopyMapNum_ProtoFunID_FunID = 136
};
bool stResetStoneCopyMapNum_ProtoFunID_IsValid(int value);
const stResetStoneCopyMapNum_ProtoFunID stResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MIN = stResetStoneCopyMapNum_ProtoFunID_FunID;
const stResetStoneCopyMapNum_ProtoFunID stResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MAX = stResetStoneCopyMapNum_ProtoFunID_FunID;
const int stResetStoneCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetStoneCopyMapNum_ProtoFunID_descriptor();
inline const ::std::string& stResetStoneCopyMapNum_ProtoFunID_Name(stResetStoneCopyMapNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetStoneCopyMapNum_ProtoFunID_descriptor(), value);
}
inline bool stResetStoneCopyMapNum_ProtoFunID_Parse(
    const ::std::string& name, stResetStoneCopyMapNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetStoneCopyMapNum_ProtoFunID>(
    stResetStoneCopyMapNum_ProtoFunID_descriptor(), name, value);
}
enum stReqResBattleResource_ProtoModID {
  stReqResBattleResource_ProtoModID_ModID = 6
};
bool stReqResBattleResource_ProtoModID_IsValid(int value);
const stReqResBattleResource_ProtoModID stReqResBattleResource_ProtoModID_ProtoModID_MIN = stReqResBattleResource_ProtoModID_ModID;
const stReqResBattleResource_ProtoModID stReqResBattleResource_ProtoModID_ProtoModID_MAX = stReqResBattleResource_ProtoModID_ModID;
const int stReqResBattleResource_ProtoModID_ProtoModID_ARRAYSIZE = stReqResBattleResource_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleResource_ProtoModID_descriptor();
inline const ::std::string& stReqResBattleResource_ProtoModID_Name(stReqResBattleResource_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleResource_ProtoModID_descriptor(), value);
}
inline bool stReqResBattleResource_ProtoModID_Parse(
    const ::std::string& name, stReqResBattleResource_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleResource_ProtoModID>(
    stReqResBattleResource_ProtoModID_descriptor(), name, value);
}
enum stReqResBattleResource_ProtoFunID {
  stReqResBattleResource_ProtoFunID_FunID = 137
};
bool stReqResBattleResource_ProtoFunID_IsValid(int value);
const stReqResBattleResource_ProtoFunID stReqResBattleResource_ProtoFunID_ProtoFunID_MIN = stReqResBattleResource_ProtoFunID_FunID;
const stReqResBattleResource_ProtoFunID stReqResBattleResource_ProtoFunID_ProtoFunID_MAX = stReqResBattleResource_ProtoFunID_FunID;
const int stReqResBattleResource_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResBattleResource_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResBattleResource_ProtoFunID_descriptor();
inline const ::std::string& stReqResBattleResource_ProtoFunID_Name(stReqResBattleResource_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResBattleResource_ProtoFunID_descriptor(), value);
}
inline bool stReqResBattleResource_ProtoFunID_Parse(
    const ::std::string& name, stReqResBattleResource_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResBattleResource_ProtoFunID>(
    stReqResBattleResource_ProtoFunID_descriptor(), name, value);
}
enum stRetResBattleResource_eResult {
  stRetResBattleResource_eResult_eSuccess = 1,
  stRetResBattleResource_eResult_eNot_In_Battle = 2
};
bool stRetResBattleResource_eResult_IsValid(int value);
const stRetResBattleResource_eResult stRetResBattleResource_eResult_eResult_MIN = stRetResBattleResource_eResult_eSuccess;
const stRetResBattleResource_eResult stRetResBattleResource_eResult_eResult_MAX = stRetResBattleResource_eResult_eNot_In_Battle;
const int stRetResBattleResource_eResult_eResult_ARRAYSIZE = stRetResBattleResource_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleResource_eResult_descriptor();
inline const ::std::string& stRetResBattleResource_eResult_Name(stRetResBattleResource_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleResource_eResult_descriptor(), value);
}
inline bool stRetResBattleResource_eResult_Parse(
    const ::std::string& name, stRetResBattleResource_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleResource_eResult>(
    stRetResBattleResource_eResult_descriptor(), name, value);
}
enum stRetResBattleResource_ProtoModID {
  stRetResBattleResource_ProtoModID_ModID = 6
};
bool stRetResBattleResource_ProtoModID_IsValid(int value);
const stRetResBattleResource_ProtoModID stRetResBattleResource_ProtoModID_ProtoModID_MIN = stRetResBattleResource_ProtoModID_ModID;
const stRetResBattleResource_ProtoModID stRetResBattleResource_ProtoModID_ProtoModID_MAX = stRetResBattleResource_ProtoModID_ModID;
const int stRetResBattleResource_ProtoModID_ProtoModID_ARRAYSIZE = stRetResBattleResource_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleResource_ProtoModID_descriptor();
inline const ::std::string& stRetResBattleResource_ProtoModID_Name(stRetResBattleResource_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleResource_ProtoModID_descriptor(), value);
}
inline bool stRetResBattleResource_ProtoModID_Parse(
    const ::std::string& name, stRetResBattleResource_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleResource_ProtoModID>(
    stRetResBattleResource_ProtoModID_descriptor(), name, value);
}
enum stRetResBattleResource_ProtoFunID {
  stRetResBattleResource_ProtoFunID_FunID = 138
};
bool stRetResBattleResource_ProtoFunID_IsValid(int value);
const stRetResBattleResource_ProtoFunID stRetResBattleResource_ProtoFunID_ProtoFunID_MIN = stRetResBattleResource_ProtoFunID_FunID;
const stRetResBattleResource_ProtoFunID stRetResBattleResource_ProtoFunID_ProtoFunID_MAX = stRetResBattleResource_ProtoFunID_FunID;
const int stRetResBattleResource_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetResBattleResource_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetResBattleResource_ProtoFunID_descriptor();
inline const ::std::string& stRetResBattleResource_ProtoFunID_Name(stRetResBattleResource_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetResBattleResource_ProtoFunID_descriptor(), value);
}
inline bool stRetResBattleResource_ProtoFunID_Parse(
    const ::std::string& name, stRetResBattleResource_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetResBattleResource_ProtoFunID>(
    stRetResBattleResource_ProtoFunID_descriptor(), name, value);
}
enum stResBattleEnd_ProtoModID {
  stResBattleEnd_ProtoModID_ModID = 6
};
bool stResBattleEnd_ProtoModID_IsValid(int value);
const stResBattleEnd_ProtoModID stResBattleEnd_ProtoModID_ProtoModID_MIN = stResBattleEnd_ProtoModID_ModID;
const stResBattleEnd_ProtoModID stResBattleEnd_ProtoModID_ProtoModID_MAX = stResBattleEnd_ProtoModID_ModID;
const int stResBattleEnd_ProtoModID_ProtoModID_ARRAYSIZE = stResBattleEnd_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleEnd_ProtoModID_descriptor();
inline const ::std::string& stResBattleEnd_ProtoModID_Name(stResBattleEnd_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleEnd_ProtoModID_descriptor(), value);
}
inline bool stResBattleEnd_ProtoModID_Parse(
    const ::std::string& name, stResBattleEnd_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleEnd_ProtoModID>(
    stResBattleEnd_ProtoModID_descriptor(), name, value);
}
enum stResBattleEnd_ProtoFunID {
  stResBattleEnd_ProtoFunID_FunID = 139
};
bool stResBattleEnd_ProtoFunID_IsValid(int value);
const stResBattleEnd_ProtoFunID stResBattleEnd_ProtoFunID_ProtoFunID_MIN = stResBattleEnd_ProtoFunID_FunID;
const stResBattleEnd_ProtoFunID stResBattleEnd_ProtoFunID_ProtoFunID_MAX = stResBattleEnd_ProtoFunID_FunID;
const int stResBattleEnd_ProtoFunID_ProtoFunID_ARRAYSIZE = stResBattleEnd_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResBattleEnd_ProtoFunID_descriptor();
inline const ::std::string& stResBattleEnd_ProtoFunID_Name(stResBattleEnd_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResBattleEnd_ProtoFunID_descriptor(), value);
}
inline bool stResBattleEnd_ProtoFunID_Parse(
    const ::std::string& name, stResBattleEnd_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResBattleEnd_ProtoFunID>(
    stResBattleEnd_ProtoFunID_descriptor(), name, value);
}
enum eOne2OneSortListType {
  eOne2OneMyRank = 1,
  eOne2OneFromRank = 2
};
bool eOne2OneSortListType_IsValid(int value);
const eOne2OneSortListType eOne2OneSortListType_MIN = eOne2OneMyRank;
const eOne2OneSortListType eOne2OneSortListType_MAX = eOne2OneFromRank;
const int eOne2OneSortListType_ARRAYSIZE = eOne2OneSortListType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eOne2OneSortListType_descriptor();
inline const ::std::string& eOne2OneSortListType_Name(eOne2OneSortListType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eOne2OneSortListType_descriptor(), value);
}
inline bool eOne2OneSortListType_Parse(
    const ::std::string& name, eOne2OneSortListType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eOne2OneSortListType>(
    eOne2OneSortListType_descriptor(), name, value);
}
enum eLeitaiMode {
  eLeitaiMode_Normal = 1,
  eLeitaiMode_Difficult = 2
};
bool eLeitaiMode_IsValid(int value);
const eLeitaiMode eLeitaiMode_MIN = eLeitaiMode_Normal;
const eLeitaiMode eLeitaiMode_MAX = eLeitaiMode_Difficult;
const int eLeitaiMode_ARRAYSIZE = eLeitaiMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* eLeitaiMode_descriptor();
inline const ::std::string& eLeitaiMode_Name(eLeitaiMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    eLeitaiMode_descriptor(), value);
}
inline bool eLeitaiMode_Parse(
    const ::std::string& name, eLeitaiMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eLeitaiMode>(
    eLeitaiMode_descriptor(), name, value);
}
// ===================================================================

class stReqLevelSortList : public ::google::protobuf::Message {
 public:
  stReqLevelSortList();
  virtual ~stReqLevelSortList();

  stReqLevelSortList(const stReqLevelSortList& from);

  inline stReqLevelSortList& operator=(const stReqLevelSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLevelSortList& default_instance();

  void Swap(stReqLevelSortList* other);

  // implements Message ----------------------------------------------

  stReqLevelSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLevelSortList& from);
  void MergeFrom(const stReqLevelSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLevelSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLevelSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLevelSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLevelSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLevelSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLevelSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLevelSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLevelSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLevelSortList_ProtoModID_Parse(name, value);
  }

  typedef stReqLevelSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLevelSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLevelSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLevelSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLevelSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLevelSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLevelSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLevelSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLevelSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 fromRank = 1;
  inline bool has_fromrank() const;
  inline void clear_fromrank();
  static const int kFromRankFieldNumber = 1;
  inline ::google::protobuf::uint32 fromrank() const;
  inline void set_fromrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqLevelSortList)
 private:
  inline void set_has_fromrank();
  inline void clear_has_fromrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fromrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqLevelSortList* default_instance_;
};
// -------------------------------------------------------------------

class stSynLevelSortItem : public ::google::protobuf::Message {
 public:
  stSynLevelSortItem();
  virtual ~stSynLevelSortItem();

  stSynLevelSortItem(const stSynLevelSortItem& from);

  inline stSynLevelSortItem& operator=(const stSynLevelSortItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynLevelSortItem& default_instance();

  void Swap(stSynLevelSortItem* other);

  // implements Message ----------------------------------------------

  stSynLevelSortItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynLevelSortItem& from);
  void MergeFrom(const stSynLevelSortItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string guildName = 3;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 3;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 photoID = 7;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 7;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stSynLevelSortItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSynLevelSortItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetLevelSortList : public ::google::protobuf::Message {
 public:
  stRetLevelSortList();
  virtual ~stRetLevelSortList();

  stRetLevelSortList(const stRetLevelSortList& from);

  inline stRetLevelSortList& operator=(const stRetLevelSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetLevelSortList& default_instance();

  void Swap(stRetLevelSortList* other);

  // implements Message ----------------------------------------------

  stRetLevelSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetLevelSortList& from);
  void MergeFrom(const stRetLevelSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetLevelSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetLevelSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetLevelSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetLevelSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetLevelSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetLevelSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetLevelSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetLevelSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetLevelSortList_ProtoModID_Parse(name, value);
  }

  typedef stRetLevelSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetLevelSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetLevelSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetLevelSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetLevelSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetLevelSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetLevelSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetLevelSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetLevelSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // optional uint32 myRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // repeated .SortProto.stSynLevelSortItem sortItem = 3;
  inline int sortitem_size() const;
  inline void clear_sortitem();
  static const int kSortItemFieldNumber = 3;
  inline const ::SortProto::stSynLevelSortItem& sortitem(int index) const;
  inline ::SortProto::stSynLevelSortItem* mutable_sortitem(int index);
  inline ::SortProto::stSynLevelSortItem* add_sortitem();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynLevelSortItem >&
      sortitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynLevelSortItem >*
      mutable_sortitem();

  // @@protoc_insertion_point(class_scope:SortProto.stRetLevelSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beginrank_;
  ::google::protobuf::uint32 myrank_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynLevelSortItem > sortitem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetLevelSortList* default_instance_;
};
// -------------------------------------------------------------------

class stReqBattlePowerSortList : public ::google::protobuf::Message {
 public:
  stReqBattlePowerSortList();
  virtual ~stReqBattlePowerSortList();

  stReqBattlePowerSortList(const stReqBattlePowerSortList& from);

  inline stReqBattlePowerSortList& operator=(const stReqBattlePowerSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBattlePowerSortList& default_instance();

  void Swap(stReqBattlePowerSortList* other);

  // implements Message ----------------------------------------------

  stReqBattlePowerSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBattlePowerSortList& from);
  void MergeFrom(const stReqBattlePowerSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBattlePowerSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBattlePowerSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBattlePowerSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBattlePowerSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBattlePowerSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBattlePowerSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBattlePowerSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBattlePowerSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBattlePowerSortList_ProtoModID_Parse(name, value);
  }

  typedef stReqBattlePowerSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBattlePowerSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBattlePowerSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBattlePowerSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBattlePowerSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBattlePowerSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBattlePowerSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBattlePowerSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBattlePowerSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 fromRank = 1;
  inline bool has_fromrank() const;
  inline void clear_fromrank();
  static const int kFromRankFieldNumber = 1;
  inline ::google::protobuf::uint32 fromrank() const;
  inline void set_fromrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqBattlePowerSortList)
 private:
  inline void set_has_fromrank();
  inline void clear_has_fromrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fromrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqBattlePowerSortList* default_instance_;
};
// -------------------------------------------------------------------

class stSynBattlePowerSortItem : public ::google::protobuf::Message {
 public:
  stSynBattlePowerSortItem();
  virtual ~stSynBattlePowerSortItem();

  stSynBattlePowerSortItem(const stSynBattlePowerSortItem& from);

  inline stSynBattlePowerSortItem& operator=(const stSynBattlePowerSortItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynBattlePowerSortItem& default_instance();

  void Swap(stSynBattlePowerSortItem* other);

  // implements Message ----------------------------------------------

  stSynBattlePowerSortItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynBattlePowerSortItem& from);
  void MergeFrom(const stSynBattlePowerSortItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string guildName = 3;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 3;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 battlePower = 4;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 4;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 photoID = 8;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 8;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stSynBattlePowerSortItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 battlepower_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSynBattlePowerSortItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetBattlePowerSortList : public ::google::protobuf::Message {
 public:
  stRetBattlePowerSortList();
  virtual ~stRetBattlePowerSortList();

  stRetBattlePowerSortList(const stRetBattlePowerSortList& from);

  inline stRetBattlePowerSortList& operator=(const stRetBattlePowerSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetBattlePowerSortList& default_instance();

  void Swap(stRetBattlePowerSortList* other);

  // implements Message ----------------------------------------------

  stRetBattlePowerSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetBattlePowerSortList& from);
  void MergeFrom(const stRetBattlePowerSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetBattlePowerSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetBattlePowerSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetBattlePowerSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetBattlePowerSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetBattlePowerSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetBattlePowerSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetBattlePowerSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetBattlePowerSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetBattlePowerSortList_ProtoModID_Parse(name, value);
  }

  typedef stRetBattlePowerSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetBattlePowerSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetBattlePowerSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetBattlePowerSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetBattlePowerSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetBattlePowerSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetBattlePowerSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetBattlePowerSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetBattlePowerSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // optional uint32 myRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // repeated .SortProto.stSynBattlePowerSortItem sortItem = 3;
  inline int sortitem_size() const;
  inline void clear_sortitem();
  static const int kSortItemFieldNumber = 3;
  inline const ::SortProto::stSynBattlePowerSortItem& sortitem(int index) const;
  inline ::SortProto::stSynBattlePowerSortItem* mutable_sortitem(int index);
  inline ::SortProto::stSynBattlePowerSortItem* add_sortitem();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynBattlePowerSortItem >&
      sortitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynBattlePowerSortItem >*
      mutable_sortitem();

  // @@protoc_insertion_point(class_scope:SortProto.stRetBattlePowerSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beginrank_;
  ::google::protobuf::uint32 myrank_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynBattlePowerSortItem > sortitem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetBattlePowerSortList* default_instance_;
};
// -------------------------------------------------------------------

class stReqCopymapSortList : public ::google::protobuf::Message {
 public:
  stReqCopymapSortList();
  virtual ~stReqCopymapSortList();

  stReqCopymapSortList(const stReqCopymapSortList& from);

  inline stReqCopymapSortList& operator=(const stReqCopymapSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCopymapSortList& default_instance();

  void Swap(stReqCopymapSortList* other);

  // implements Message ----------------------------------------------

  stReqCopymapSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCopymapSortList& from);
  void MergeFrom(const stReqCopymapSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCopymapSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCopymapSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCopymapSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCopymapSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCopymapSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCopymapSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCopymapSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCopymapSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCopymapSortList_ProtoModID_Parse(name, value);
  }

  typedef stReqCopymapSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCopymapSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCopymapSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCopymapSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCopymapSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCopymapSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCopymapSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCopymapSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCopymapSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 fromRank = 1;
  inline bool has_fromrank() const;
  inline void clear_fromrank();
  static const int kFromRankFieldNumber = 1;
  inline ::google::protobuf::uint32 fromrank() const;
  inline void set_fromrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqCopymapSortList)
 private:
  inline void set_has_fromrank();
  inline void clear_has_fromrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fromrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqCopymapSortList* default_instance_;
};
// -------------------------------------------------------------------

class stCopyMapSortItem : public ::google::protobuf::Message {
 public:
  stCopyMapSortItem();
  virtual ~stCopyMapSortItem();

  stCopyMapSortItem(const stCopyMapSortItem& from);

  inline stCopyMapSortItem& operator=(const stCopyMapSortItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCopyMapSortItem& default_instance();

  void Swap(stCopyMapSortItem* other);

  // implements Message ----------------------------------------------

  stCopyMapSortItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCopyMapSortItem& from);
  void MergeFrom(const stCopyMapSortItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional string guildName = 3;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 3;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional uint32 starNum = 4;
  inline bool has_starnum() const;
  inline void clear_starnum();
  static const int kStarNumFieldNumber = 4;
  inline ::google::protobuf::uint32 starnum() const;
  inline void set_starnum(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 photoID = 8;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 8;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stCopyMapSortItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_starnum();
  inline void clear_has_starnum();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 starnum_;
  ::std::string* guildname_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stCopyMapSortItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetCopyMapSortList : public ::google::protobuf::Message {
 public:
  stRetCopyMapSortList();
  virtual ~stRetCopyMapSortList();

  stRetCopyMapSortList(const stRetCopyMapSortList& from);

  inline stRetCopyMapSortList& operator=(const stRetCopyMapSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetCopyMapSortList& default_instance();

  void Swap(stRetCopyMapSortList* other);

  // implements Message ----------------------------------------------

  stRetCopyMapSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetCopyMapSortList& from);
  void MergeFrom(const stRetCopyMapSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetCopyMapSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetCopyMapSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetCopyMapSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetCopyMapSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetCopyMapSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetCopyMapSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetCopyMapSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetCopyMapSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetCopyMapSortList_ProtoModID_Parse(name, value);
  }

  typedef stRetCopyMapSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetCopyMapSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetCopyMapSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetCopyMapSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetCopyMapSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetCopyMapSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetCopyMapSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetCopyMapSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetCopyMapSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // optional uint32 myRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // repeated .SortProto.stCopyMapSortItem sortItem = 3;
  inline int sortitem_size() const;
  inline void clear_sortitem();
  static const int kSortItemFieldNumber = 3;
  inline const ::SortProto::stCopyMapSortItem& sortitem(int index) const;
  inline ::SortProto::stCopyMapSortItem* mutable_sortitem(int index);
  inline ::SortProto::stCopyMapSortItem* add_sortitem();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stCopyMapSortItem >&
      sortitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stCopyMapSortItem >*
      mutable_sortitem();

  // @@protoc_insertion_point(class_scope:SortProto.stRetCopyMapSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beginrank_;
  ::google::protobuf::uint32 myrank_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stCopyMapSortItem > sortitem_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetCopyMapSortList* default_instance_;
};
// -------------------------------------------------------------------

class stSynArenaSortInfo : public ::google::protobuf::Message {
 public:
  stSynArenaSortInfo();
  virtual ~stSynArenaSortInfo();

  stSynArenaSortInfo(const stSynArenaSortInfo& from);

  inline stSynArenaSortInfo& operator=(const stSynArenaSortInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynArenaSortInfo& default_instance();

  void Swap(stSynArenaSortInfo* other);

  // implements Message ----------------------------------------------

  stSynArenaSortInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynArenaSortInfo& from);
  void MergeFrom(const stSynArenaSortInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 photoID = 7;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 7;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stSynArenaSortInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSynArenaSortInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqArenaPKList : public ::google::protobuf::Message {
 public:
  stReqArenaPKList();
  virtual ~stReqArenaPKList();

  stReqArenaPKList(const stReqArenaPKList& from);

  inline stReqArenaPKList& operator=(const stReqArenaPKList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqArenaPKList& default_instance();

  void Swap(stReqArenaPKList* other);

  // implements Message ----------------------------------------------

  stReqArenaPKList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqArenaPKList& from);
  void MergeFrom(const stReqArenaPKList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqArenaPKList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqArenaPKList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqArenaPKList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqArenaPKList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqArenaPKList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqArenaPKList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqArenaPKList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqArenaPKList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqArenaPKList_ProtoModID_Parse(name, value);
  }

  typedef stReqArenaPKList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqArenaPKList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqArenaPKList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqArenaPKList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqArenaPKList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqArenaPKList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqArenaPKList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqArenaPKList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqArenaPKList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqArenaPKList)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqArenaPKList* default_instance_;
};
// -------------------------------------------------------------------

class stRetArenaPKList : public ::google::protobuf::Message {
 public:
  stRetArenaPKList();
  virtual ~stRetArenaPKList();

  stRetArenaPKList(const stRetArenaPKList& from);

  inline stRetArenaPKList& operator=(const stRetArenaPKList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetArenaPKList& default_instance();

  void Swap(stRetArenaPKList* other);

  // implements Message ----------------------------------------------

  stRetArenaPKList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetArenaPKList& from);
  void MergeFrom(const stRetArenaPKList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetArenaPKList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetArenaPKList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetArenaPKList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetArenaPKList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetArenaPKList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetArenaPKList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetArenaPKList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetArenaPKList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetArenaPKList_ProtoModID_Parse(name, value);
  }

  typedef stRetArenaPKList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetArenaPKList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetArenaPKList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetArenaPKList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetArenaPKList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetArenaPKList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetArenaPKList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetArenaPKList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetArenaPKList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stSynArenaSortInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::SortProto::stSynArenaSortInfo& data(int index) const;
  inline ::SortProto::stSynArenaSortInfo* mutable_data(int index);
  inline ::SortProto::stSynArenaSortInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >*
      mutable_data();

  // optional uint32 myRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // repeated .SortProto.stSynArenaSortInfo topTen = 3;
  inline int topten_size() const;
  inline void clear_topten();
  static const int kTopTenFieldNumber = 3;
  inline const ::SortProto::stSynArenaSortInfo& topten(int index) const;
  inline ::SortProto::stSynArenaSortInfo* mutable_topten(int index);
  inline ::SortProto::stSynArenaSortInfo* add_topten();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >&
      topten() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >*
      mutable_topten();

  // optional uint32 cd = 4;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 4;
  inline ::google::protobuf::uint32 cd() const;
  inline void set_cd(::google::protobuf::uint32 value);

  // optional uint32 challengeNum = 5;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 5;
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 resetNum = 6;
  inline bool has_resetnum() const;
  inline void clear_resetnum();
  static const int kResetNumFieldNumber = 6;
  inline ::google::protobuf::uint32 resetnum() const;
  inline void set_resetnum(::google::protobuf::uint32 value);

  // optional uint32 totalUserNum = 7;
  inline bool has_totalusernum() const;
  inline void clear_totalusernum();
  static const int kTotalUserNumFieldNumber = 7;
  inline ::google::protobuf::uint32 totalusernum() const;
  inline void set_totalusernum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetArenaPKList)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_resetnum();
  inline void clear_has_resetnum();
  inline void set_has_totalusernum();
  inline void clear_has_totalusernum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo > data_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo > topten_;
  ::google::protobuf::uint32 myrank_;
  ::google::protobuf::uint32 cd_;
  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 resetnum_;
  ::google::protobuf::uint32 totalusernum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetArenaPKList* default_instance_;
};
// -------------------------------------------------------------------

class stReqArenaSortList : public ::google::protobuf::Message {
 public:
  stReqArenaSortList();
  virtual ~stReqArenaSortList();

  stReqArenaSortList(const stReqArenaSortList& from);

  inline stReqArenaSortList& operator=(const stReqArenaSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqArenaSortList& default_instance();

  void Swap(stReqArenaSortList* other);

  // implements Message ----------------------------------------------

  stReqArenaSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqArenaSortList& from);
  void MergeFrom(const stReqArenaSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqArenaSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqArenaSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqArenaSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqArenaSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqArenaSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqArenaSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqArenaSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqArenaSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqArenaSortList_ProtoModID_Parse(name, value);
  }

  typedef stReqArenaSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqArenaSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqArenaSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqArenaSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqArenaSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqArenaSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqArenaSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqArenaSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqArenaSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqArenaSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beginrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqArenaSortList* default_instance_;
};
// -------------------------------------------------------------------

class stRetArenaSortList : public ::google::protobuf::Message {
 public:
  stRetArenaSortList();
  virtual ~stRetArenaSortList();

  stRetArenaSortList(const stRetArenaSortList& from);

  inline stRetArenaSortList& operator=(const stRetArenaSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetArenaSortList& default_instance();

  void Swap(stRetArenaSortList* other);

  // implements Message ----------------------------------------------

  stRetArenaSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetArenaSortList& from);
  void MergeFrom(const stRetArenaSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetArenaSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetArenaSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetArenaSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetArenaSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetArenaSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetArenaSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetArenaSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetArenaSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetArenaSortList_ProtoModID_Parse(name, value);
  }

  typedef stRetArenaSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetArenaSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetArenaSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetArenaSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetArenaSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetArenaSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetArenaSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetArenaSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetArenaSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stSynArenaSortInfo sortInfo = 1;
  inline int sortinfo_size() const;
  inline void clear_sortinfo();
  static const int kSortInfoFieldNumber = 1;
  inline const ::SortProto::stSynArenaSortInfo& sortinfo(int index) const;
  inline ::SortProto::stSynArenaSortInfo* mutable_sortinfo(int index);
  inline ::SortProto::stSynArenaSortInfo* add_sortinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >&
      sortinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >*
      mutable_sortinfo();

  // optional uint32 myRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetArenaSortList)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo > sortinfo_;
  ::google::protobuf::uint32 myrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetArenaSortList* default_instance_;
};
// -------------------------------------------------------------------

class stSynOne2OnePVPInfo : public ::google::protobuf::Message {
 public:
  stSynOne2OnePVPInfo();
  virtual ~stSynOne2OnePVPInfo();

  stSynOne2OnePVPInfo(const stSynOne2OnePVPInfo& from);

  inline stSynOne2OnePVPInfo& operator=(const stSynOne2OnePVPInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynOne2OnePVPInfo& default_instance();

  void Swap(stSynOne2OnePVPInfo* other);

  // implements Message ----------------------------------------------

  stSynOne2OnePVPInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynOne2OnePVPInfo& from);
  void MergeFrom(const stSynOne2OnePVPInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 rank = 6;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 6;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 photoID = 8;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 8;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stSynOne2OnePVPInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSynOne2OnePVPInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqOne2OnePVPSortList : public ::google::protobuf::Message {
 public:
  stReqOne2OnePVPSortList();
  virtual ~stReqOne2OnePVPSortList();

  stReqOne2OnePVPSortList(const stReqOne2OnePVPSortList& from);

  inline stReqOne2OnePVPSortList& operator=(const stReqOne2OnePVPSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOne2OnePVPSortList& default_instance();

  void Swap(stReqOne2OnePVPSortList* other);

  // implements Message ----------------------------------------------

  stReqOne2OnePVPSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOne2OnePVPSortList& from);
  void MergeFrom(const stReqOne2OnePVPSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOne2OnePVPSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOne2OnePVPSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOne2OnePVPSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOne2OnePVPSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOne2OnePVPSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOne2OnePVPSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOne2OnePVPSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOne2OnePVPSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOne2OnePVPSortList_ProtoModID_Parse(name, value);
  }

  typedef stReqOne2OnePVPSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOne2OnePVPSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOne2OnePVPSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOne2OnePVPSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOne2OnePVPSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOne2OnePVPSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOne2OnePVPSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOne2OnePVPSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOne2OnePVPSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // optional .SortProto.eOne2OneSortListType eType = 2;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 2;
  inline ::SortProto::eOne2OneSortListType etype() const;
  inline void set_etype(::SortProto::eOne2OneSortListType value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqOne2OnePVPSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();
  inline void set_has_etype();
  inline void clear_has_etype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beginrank_;
  int etype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqOne2OnePVPSortList* default_instance_;
};
// -------------------------------------------------------------------

class stRetOne2OnePVPSortList : public ::google::protobuf::Message {
 public:
  stRetOne2OnePVPSortList();
  virtual ~stRetOne2OnePVPSortList();

  stRetOne2OnePVPSortList(const stRetOne2OnePVPSortList& from);

  inline stRetOne2OnePVPSortList& operator=(const stRetOne2OnePVPSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetOne2OnePVPSortList& default_instance();

  void Swap(stRetOne2OnePVPSortList* other);

  // implements Message ----------------------------------------------

  stRetOne2OnePVPSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetOne2OnePVPSortList& from);
  void MergeFrom(const stRetOne2OnePVPSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetOne2OnePVPSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetOne2OnePVPSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetOne2OnePVPSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetOne2OnePVPSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetOne2OnePVPSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetOne2OnePVPSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetOne2OnePVPSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetOne2OnePVPSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetOne2OnePVPSortList_ProtoModID_Parse(name, value);
  }

  typedef stRetOne2OnePVPSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetOne2OnePVPSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetOne2OnePVPSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetOne2OnePVPSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetOne2OnePVPSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetOne2OnePVPSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetOne2OnePVPSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetOne2OnePVPSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetOne2OnePVPSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stSynOne2OnePVPInfo sortList = 1;
  inline int sortlist_size() const;
  inline void clear_sortlist();
  static const int kSortListFieldNumber = 1;
  inline const ::SortProto::stSynOne2OnePVPInfo& sortlist(int index) const;
  inline ::SortProto::stSynOne2OnePVPInfo* mutable_sortlist(int index);
  inline ::SortProto::stSynOne2OnePVPInfo* add_sortlist();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo >&
      sortlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo >*
      mutable_sortlist();

  // optional uint32 myRank = 2;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 2;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // repeated .SortProto.stSynOne2OnePVPInfo lastweekSortList = 3;
  inline int lastweeksortlist_size() const;
  inline void clear_lastweeksortlist();
  static const int kLastweekSortListFieldNumber = 3;
  inline const ::SortProto::stSynOne2OnePVPInfo& lastweeksortlist(int index) const;
  inline ::SortProto::stSynOne2OnePVPInfo* mutable_lastweeksortlist(int index);
  inline ::SortProto::stSynOne2OnePVPInfo* add_lastweeksortlist();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo >&
      lastweeksortlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo >*
      mutable_lastweeksortlist();

  // optional .SortProto.eOne2OneSortListType eType = 4;
  inline bool has_etype() const;
  inline void clear_etype();
  static const int kETypeFieldNumber = 4;
  inline ::SortProto::eOne2OneSortListType etype() const;
  inline void set_etype(::SortProto::eOne2OneSortListType value);

  // optional uint32 score = 5;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 5;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetOne2OnePVPSortList)
 private:
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_etype();
  inline void clear_has_etype();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo > sortlist_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo > lastweeksortlist_;
  ::google::protobuf::uint32 myrank_;
  int etype_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetOne2OnePVPSortList* default_instance_;
};
// -------------------------------------------------------------------

class stChallengeArenaUser : public ::google::protobuf::Message {
 public:
  stChallengeArenaUser();
  virtual ~stChallengeArenaUser();

  stChallengeArenaUser(const stChallengeArenaUser& from);

  inline stChallengeArenaUser& operator=(const stChallengeArenaUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChallengeArenaUser& default_instance();

  void Swap(stChallengeArenaUser* other);

  // implements Message ----------------------------------------------

  stChallengeArenaUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChallengeArenaUser& from);
  void MergeFrom(const stChallengeArenaUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChallengeArenaUser_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChallengeArenaUser_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChallengeArenaUser_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChallengeArenaUser_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChallengeArenaUser_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChallengeArenaUser_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChallengeArenaUser_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChallengeArenaUser_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChallengeArenaUser_ProtoModID_Parse(name, value);
  }

  typedef stChallengeArenaUser_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChallengeArenaUser_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChallengeArenaUser_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChallengeArenaUser_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChallengeArenaUser_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChallengeArenaUser_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChallengeArenaUser_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChallengeArenaUser_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChallengeArenaUser_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stChallengeArenaUser)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stChallengeArenaUser* default_instance_;
};
// -------------------------------------------------------------------

class stChallengeArenaUserResult : public ::google::protobuf::Message {
 public:
  stChallengeArenaUserResult();
  virtual ~stChallengeArenaUserResult();

  stChallengeArenaUserResult(const stChallengeArenaUserResult& from);

  inline stChallengeArenaUserResult& operator=(const stChallengeArenaUserResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChallengeArenaUserResult& default_instance();

  void Swap(stChallengeArenaUserResult* other);

  // implements Message ----------------------------------------------

  stChallengeArenaUserResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChallengeArenaUserResult& from);
  void MergeFrom(const stChallengeArenaUserResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChallengeArenaUserResult_eResult eResult;
  static const eResult eSuccess = stChallengeArenaUserResult_eResult_eSuccess;
  static const eResult eLilian_Not_Enough = stChallengeArenaUserResult_eResult_eLilian_Not_Enough;
  static const eResult eInner_Error = stChallengeArenaUserResult_eResult_eInner_Error;
  static const eResult eLevel_Limit = stChallengeArenaUserResult_eResult_eLevel_Limit;
  static const eResult eBagFull = stChallengeArenaUserResult_eResult_eBagFull;
  static const eResult eCoolDown = stChallengeArenaUserResult_eResult_eCoolDown;
  static const eResult eTimeUseOut = stChallengeArenaUserResult_eResult_eTimeUseOut;
  static const eResult eEquip = stChallengeArenaUserResult_eResult_eEquip;
  static inline bool eResult_IsValid(int value) {
    return stChallengeArenaUserResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stChallengeArenaUserResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stChallengeArenaUserResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stChallengeArenaUserResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stChallengeArenaUserResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stChallengeArenaUserResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stChallengeArenaUserResult_eResult_Parse(name, value);
  }

  typedef stChallengeArenaUserResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChallengeArenaUserResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChallengeArenaUserResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChallengeArenaUserResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChallengeArenaUserResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChallengeArenaUserResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChallengeArenaUserResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChallengeArenaUserResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChallengeArenaUserResult_ProtoModID_Parse(name, value);
  }

  typedef stChallengeArenaUserResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChallengeArenaUserResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChallengeArenaUserResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChallengeArenaUserResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChallengeArenaUserResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChallengeArenaUserResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChallengeArenaUserResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChallengeArenaUserResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChallengeArenaUserResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stChallengeArenaUserResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stChallengeArenaUserResult_eResult result() const;
  inline void set_result(::SortProto::stChallengeArenaUserResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stChallengeArenaUserResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stChallengeArenaUserResult* default_instance_;
};
// -------------------------------------------------------------------

class stChallegeLeitaiUser : public ::google::protobuf::Message {
 public:
  stChallegeLeitaiUser();
  virtual ~stChallegeLeitaiUser();

  stChallegeLeitaiUser(const stChallegeLeitaiUser& from);

  inline stChallegeLeitaiUser& operator=(const stChallegeLeitaiUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChallegeLeitaiUser& default_instance();

  void Swap(stChallegeLeitaiUser* other);

  // implements Message ----------------------------------------------

  stChallegeLeitaiUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChallegeLeitaiUser& from);
  void MergeFrom(const stChallegeLeitaiUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChallegeLeitaiUser_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChallegeLeitaiUser_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChallegeLeitaiUser_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChallegeLeitaiUser_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChallegeLeitaiUser_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChallegeLeitaiUser_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChallegeLeitaiUser_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChallegeLeitaiUser_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChallegeLeitaiUser_ProtoModID_Parse(name, value);
  }

  typedef stChallegeLeitaiUser_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChallegeLeitaiUser_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChallegeLeitaiUser_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChallegeLeitaiUser_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChallegeLeitaiUser_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChallegeLeitaiUser_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChallegeLeitaiUser_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChallegeLeitaiUser_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChallegeLeitaiUser_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stChallegeLeitaiUser)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stChallegeLeitaiUser* default_instance_;
};
// -------------------------------------------------------------------

class stChallegeLeitaiUserResult : public ::google::protobuf::Message {
 public:
  stChallegeLeitaiUserResult();
  virtual ~stChallegeLeitaiUserResult();

  stChallegeLeitaiUserResult(const stChallegeLeitaiUserResult& from);

  inline stChallegeLeitaiUserResult& operator=(const stChallegeLeitaiUserResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChallegeLeitaiUserResult& default_instance();

  void Swap(stChallegeLeitaiUserResult* other);

  // implements Message ----------------------------------------------

  stChallegeLeitaiUserResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChallegeLeitaiUserResult& from);
  void MergeFrom(const stChallegeLeitaiUserResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChallegeLeitaiUserResult_eResult eResult;
  static const eResult eSuccess = stChallegeLeitaiUserResult_eResult_eSuccess;
  static const eResult eLilian_Not_Enough = stChallegeLeitaiUserResult_eResult_eLilian_Not_Enough;
  static const eResult eInner_Error = stChallegeLeitaiUserResult_eResult_eInner_Error;
  static const eResult eLevel_Limit = stChallegeLeitaiUserResult_eResult_eLevel_Limit;
  static const eResult eBagFull = stChallegeLeitaiUserResult_eResult_eBagFull;
  static inline bool eResult_IsValid(int value) {
    return stChallegeLeitaiUserResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stChallegeLeitaiUserResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stChallegeLeitaiUserResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stChallegeLeitaiUserResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stChallegeLeitaiUserResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stChallegeLeitaiUserResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stChallegeLeitaiUserResult_eResult_Parse(name, value);
  }

  typedef stChallegeLeitaiUserResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChallegeLeitaiUserResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChallegeLeitaiUserResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChallegeLeitaiUserResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChallegeLeitaiUserResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChallegeLeitaiUserResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChallegeLeitaiUserResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChallegeLeitaiUserResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChallegeLeitaiUserResult_ProtoModID_Parse(name, value);
  }

  typedef stChallegeLeitaiUserResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChallegeLeitaiUserResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChallegeLeitaiUserResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChallegeLeitaiUserResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChallegeLeitaiUserResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChallegeLeitaiUserResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChallegeLeitaiUserResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChallegeLeitaiUserResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChallegeLeitaiUserResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stChallegeLeitaiUserResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stChallegeLeitaiUserResult_eResult result() const;
  inline void set_result(::SortProto::stChallegeLeitaiUserResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stChallegeLeitaiUserResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stChallegeLeitaiUserResult* default_instance_;
};
// -------------------------------------------------------------------

class stOpenLeitaiWindow : public ::google::protobuf::Message {
 public:
  stOpenLeitaiWindow();
  virtual ~stOpenLeitaiWindow();

  stOpenLeitaiWindow(const stOpenLeitaiWindow& from);

  inline stOpenLeitaiWindow& operator=(const stOpenLeitaiWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpenLeitaiWindow& default_instance();

  void Swap(stOpenLeitaiWindow* other);

  // implements Message ----------------------------------------------

  stOpenLeitaiWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpenLeitaiWindow& from);
  void MergeFrom(const stOpenLeitaiWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpenLeitaiWindow_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpenLeitaiWindow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpenLeitaiWindow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpenLeitaiWindow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpenLeitaiWindow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpenLeitaiWindow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpenLeitaiWindow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpenLeitaiWindow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpenLeitaiWindow_ProtoModID_Parse(name, value);
  }

  typedef stOpenLeitaiWindow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpenLeitaiWindow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpenLeitaiWindow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpenLeitaiWindow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpenLeitaiWindow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpenLeitaiWindow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpenLeitaiWindow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpenLeitaiWindow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpenLeitaiWindow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stOpenLeitaiWindow)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stOpenLeitaiWindow* default_instance_;
};
// -------------------------------------------------------------------

class stSynHeroHP : public ::google::protobuf::Message {
 public:
  stSynHeroHP();
  virtual ~stSynHeroHP();

  stSynHeroHP(const stSynHeroHP& from);

  inline stSynHeroHP& operator=(const stSynHeroHP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynHeroHP& default_instance();

  void Swap(stSynHeroHP* other);

  // implements Message ----------------------------------------------

  stSynHeroHP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynHeroHP& from);
  void MergeFrom(const stSynHeroHP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 curHP = 2;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 2;
  inline ::google::protobuf::uint32 curhp() const;
  inline void set_curhp(::google::protobuf::uint32 value);

  // optional uint32 maxHP = 3;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 3;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stSynHeroHP)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 curhp_;
  ::google::protobuf::uint32 maxhp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSynHeroHP* default_instance_;
};
// -------------------------------------------------------------------

class stRetLeitaiInfo : public ::google::protobuf::Message {
 public:
  stRetLeitaiInfo();
  virtual ~stRetLeitaiInfo();

  stRetLeitaiInfo(const stRetLeitaiInfo& from);

  inline stRetLeitaiInfo& operator=(const stRetLeitaiInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetLeitaiInfo& default_instance();

  void Swap(stRetLeitaiInfo* other);

  // implements Message ----------------------------------------------

  stRetLeitaiInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetLeitaiInfo& from);
  void MergeFrom(const stRetLeitaiInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetLeitaiInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetLeitaiInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetLeitaiInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetLeitaiInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetLeitaiInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetLeitaiInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetLeitaiInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetLeitaiInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetLeitaiInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetLeitaiInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetLeitaiInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetLeitaiInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetLeitaiInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetLeitaiInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetLeitaiInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetLeitaiInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetLeitaiInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetLeitaiInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 challengeNum = 1;
  inline bool has_challengenum() const;
  inline void clear_challengenum();
  static const int kChallengeNumFieldNumber = 1;
  inline ::google::protobuf::uint32 challengenum() const;
  inline void set_challengenum(::google::protobuf::uint32 value);

  // optional uint32 myHP = 2;
  inline bool has_myhp() const;
  inline void clear_myhp();
  static const int kMyHPFieldNumber = 2;
  inline ::google::protobuf::uint32 myhp() const;
  inline void set_myhp(::google::protobuf::uint32 value);

  // repeated .SortProto.stSynHeroHP heroHPs = 3;
  inline int herohps_size() const;
  inline void clear_herohps();
  static const int kHeroHPsFieldNumber = 3;
  inline const ::SortProto::stSynHeroHP& herohps(int index) const;
  inline ::SortProto::stSynHeroHP* mutable_herohps(int index);
  inline ::SortProto::stSynHeroHP* add_herohps();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP >&
      herohps() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP >*
      mutable_herohps();

  // optional .SortProto.eLeitaiMode mode = 4;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 4;
  inline ::SortProto::eLeitaiMode mode() const;
  inline void set_mode(::SortProto::eLeitaiMode value);

  // optional uint32 pos1ID = 5;
  inline bool has_pos1id() const;
  inline void clear_pos1id();
  static const int kPos1IDFieldNumber = 5;
  inline ::google::protobuf::uint32 pos1id() const;
  inline void set_pos1id(::google::protobuf::uint32 value);

  // optional uint32 pos2ID = 6;
  inline bool has_pos2id() const;
  inline void clear_pos2id();
  static const int kPos2IDFieldNumber = 6;
  inline ::google::protobuf::uint32 pos2id() const;
  inline void set_pos2id(::google::protobuf::uint32 value);

  // optional uint32 pos3ID = 7;
  inline bool has_pos3id() const;
  inline void clear_pos3id();
  static const int kPos3IDFieldNumber = 7;
  inline ::google::protobuf::uint32 pos3id() const;
  inline void set_pos3id(::google::protobuf::uint32 value);

  // optional uint32 pos4ID = 8;
  inline bool has_pos4id() const;
  inline void clear_pos4id();
  static const int kPos4IDFieldNumber = 8;
  inline ::google::protobuf::uint32 pos4id() const;
  inline void set_pos4id(::google::protobuf::uint32 value);

  // optional uint32 refreshBuffRemainTime = 9;
  inline bool has_refreshbuffremaintime() const;
  inline void clear_refreshbuffremaintime();
  static const int kRefreshBuffRemainTimeFieldNumber = 9;
  inline ::google::protobuf::uint32 refreshbuffremaintime() const;
  inline void set_refreshbuffremaintime(::google::protobuf::uint32 value);

  // optional uint32 buffID = 10;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 10;
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetLeitaiInfo)
 private:
  inline void set_has_challengenum();
  inline void clear_has_challengenum();
  inline void set_has_myhp();
  inline void clear_has_myhp();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_pos1id();
  inline void clear_has_pos1id();
  inline void set_has_pos2id();
  inline void clear_has_pos2id();
  inline void set_has_pos3id();
  inline void clear_has_pos3id();
  inline void set_has_pos4id();
  inline void clear_has_pos4id();
  inline void set_has_refreshbuffremaintime();
  inline void clear_has_refreshbuffremaintime();
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 challengenum_;
  ::google::protobuf::uint32 myhp_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP > herohps_;
  int mode_;
  ::google::protobuf::uint32 pos1id_;
  ::google::protobuf::uint32 pos2id_;
  ::google::protobuf::uint32 pos3id_;
  ::google::protobuf::uint32 pos4id_;
  ::google::protobuf::uint32 refreshbuffremaintime_;
  ::google::protobuf::uint32 buffid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetLeitaiInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqLeitaiSortList : public ::google::protobuf::Message {
 public:
  stReqLeitaiSortList();
  virtual ~stReqLeitaiSortList();

  stReqLeitaiSortList(const stReqLeitaiSortList& from);

  inline stReqLeitaiSortList& operator=(const stReqLeitaiSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLeitaiSortList& default_instance();

  void Swap(stReqLeitaiSortList* other);

  // implements Message ----------------------------------------------

  stReqLeitaiSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLeitaiSortList& from);
  void MergeFrom(const stReqLeitaiSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLeitaiSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLeitaiSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLeitaiSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLeitaiSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLeitaiSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLeitaiSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLeitaiSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLeitaiSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLeitaiSortList_ProtoModID_Parse(name, value);
  }

  typedef stReqLeitaiSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLeitaiSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLeitaiSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLeitaiSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLeitaiSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLeitaiSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLeitaiSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLeitaiSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLeitaiSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqLeitaiSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 beginrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqLeitaiSortList* default_instance_;
};
// -------------------------------------------------------------------

class stLeitaiSortListItem : public ::google::protobuf::Message {
 public:
  stLeitaiSortListItem();
  virtual ~stLeitaiSortListItem();

  stLeitaiSortListItem(const stLeitaiSortListItem& from);

  inline stLeitaiSortListItem& operator=(const stLeitaiSortListItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLeitaiSortListItem& default_instance();

  void Swap(stLeitaiSortListItem* other);

  // implements Message ----------------------------------------------

  stLeitaiSortListItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLeitaiSortListItem& from);
  void MergeFrom(const stLeitaiSortListItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 useTime = 3;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUseTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 usetime() const;
  inline void set_usetime(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 photoID = 7;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 7;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stLeitaiSortListItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_usetime();
  inline void clear_has_usetime();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 usetime_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stLeitaiSortListItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetLeitaiSortList : public ::google::protobuf::Message {
 public:
  stRetLeitaiSortList();
  virtual ~stRetLeitaiSortList();

  stRetLeitaiSortList(const stRetLeitaiSortList& from);

  inline stRetLeitaiSortList& operator=(const stRetLeitaiSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetLeitaiSortList& default_instance();

  void Swap(stRetLeitaiSortList* other);

  // implements Message ----------------------------------------------

  stRetLeitaiSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetLeitaiSortList& from);
  void MergeFrom(const stRetLeitaiSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetLeitaiSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetLeitaiSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetLeitaiSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetLeitaiSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetLeitaiSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetLeitaiSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetLeitaiSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetLeitaiSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetLeitaiSortList_ProtoModID_Parse(name, value);
  }

  typedef stRetLeitaiSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetLeitaiSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetLeitaiSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetLeitaiSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetLeitaiSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetLeitaiSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetLeitaiSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetLeitaiSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetLeitaiSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stLeitaiSortListItem sortListItem = 1;
  inline int sortlistitem_size() const;
  inline void clear_sortlistitem();
  static const int kSortListItemFieldNumber = 1;
  inline const ::SortProto::stLeitaiSortListItem& sortlistitem(int index) const;
  inline ::SortProto::stLeitaiSortListItem* mutable_sortlistitem(int index);
  inline ::SortProto::stLeitaiSortListItem* add_sortlistitem();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stLeitaiSortListItem >&
      sortlistitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stLeitaiSortListItem >*
      mutable_sortlistitem();

  // optional uint32 beginRank = 2;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 2;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // optional uint32 myRank = 3;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 3;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetLeitaiSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();
  inline void set_has_myrank();
  inline void clear_has_myrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stLeitaiSortListItem > sortlistitem_;
  ::google::protobuf::uint32 beginrank_;
  ::google::protobuf::uint32 myrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetLeitaiSortList* default_instance_;
};
// -------------------------------------------------------------------

class stSendLeitaiResult : public ::google::protobuf::Message {
 public:
  stSendLeitaiResult();
  virtual ~stSendLeitaiResult();

  stSendLeitaiResult(const stSendLeitaiResult& from);

  inline stSendLeitaiResult& operator=(const stSendLeitaiResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendLeitaiResult& default_instance();

  void Swap(stSendLeitaiResult* other);

  // implements Message ----------------------------------------------

  stSendLeitaiResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendLeitaiResult& from);
  void MergeFrom(const stSendLeitaiResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendLeitaiResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendLeitaiResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendLeitaiResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendLeitaiResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendLeitaiResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendLeitaiResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendLeitaiResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendLeitaiResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendLeitaiResult_ProtoModID_Parse(name, value);
  }

  typedef stSendLeitaiResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendLeitaiResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendLeitaiResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendLeitaiResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendLeitaiResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendLeitaiResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendLeitaiResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendLeitaiResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendLeitaiResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stSynHeroHP heroHP = 1;
  inline int herohp_size() const;
  inline void clear_herohp();
  static const int kHeroHPFieldNumber = 1;
  inline const ::SortProto::stSynHeroHP& herohp(int index) const;
  inline ::SortProto::stSynHeroHP* mutable_herohp(int index);
  inline ::SortProto::stSynHeroHP* add_herohp();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP >&
      herohp() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP >*
      mutable_herohp();

  // optional uint32 curUserHP = 2;
  inline bool has_curuserhp() const;
  inline void clear_curuserhp();
  static const int kCurUserHPFieldNumber = 2;
  inline ::google::protobuf::uint32 curuserhp() const;
  inline void set_curuserhp(::google::protobuf::uint32 value);

  // optional uint32 useTime = 3;
  inline bool has_usetime() const;
  inline void clear_usetime();
  static const int kUseTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 usetime() const;
  inline void set_usetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stSendLeitaiResult)
 private:
  inline void set_has_curuserhp();
  inline void clear_has_curuserhp();
  inline void set_has_usetime();
  inline void clear_has_usetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP > herohp_;
  ::google::protobuf::uint32 curuserhp_;
  ::google::protobuf::uint32 usetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSendLeitaiResult* default_instance_;
};
// -------------------------------------------------------------------

class stRetSendLeitaiResult : public ::google::protobuf::Message {
 public:
  stRetSendLeitaiResult();
  virtual ~stRetSendLeitaiResult();

  stRetSendLeitaiResult(const stRetSendLeitaiResult& from);

  inline stRetSendLeitaiResult& operator=(const stRetSendLeitaiResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetSendLeitaiResult& default_instance();

  void Swap(stRetSendLeitaiResult* other);

  // implements Message ----------------------------------------------

  stRetSendLeitaiResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetSendLeitaiResult& from);
  void MergeFrom(const stRetSendLeitaiResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetSendLeitaiResult_eResult eResult;
  static const eResult SUCCESS = stRetSendLeitaiResult_eResult_SUCCESS;
  static const eResult COND_NOT_MEET = stRetSendLeitaiResult_eResult_COND_NOT_MEET;
  static const eResult INNER_ERROR = stRetSendLeitaiResult_eResult_INNER_ERROR;
  static const eResult ROLE_LV_TOO_LOW = stRetSendLeitaiResult_eResult_ROLE_LV_TOO_LOW;
  static const eResult LILIAN_NOT_ENOUGH = stRetSendLeitaiResult_eResult_LILIAN_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stRetSendLeitaiResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetSendLeitaiResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetSendLeitaiResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetSendLeitaiResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetSendLeitaiResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetSendLeitaiResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetSendLeitaiResult_eResult_Parse(name, value);
  }

  typedef stRetSendLeitaiResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetSendLeitaiResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetSendLeitaiResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetSendLeitaiResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetSendLeitaiResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetSendLeitaiResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetSendLeitaiResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetSendLeitaiResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetSendLeitaiResult_ProtoModID_Parse(name, value);
  }

  typedef stRetSendLeitaiResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetSendLeitaiResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetSendLeitaiResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetSendLeitaiResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetSendLeitaiResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetSendLeitaiResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetSendLeitaiResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetSendLeitaiResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetSendLeitaiResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stRetSendLeitaiResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stRetSendLeitaiResult_eResult result() const;
  inline void set_result(::SortProto::stRetSendLeitaiResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetSendLeitaiResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetSendLeitaiResult* default_instance_;
};
// -------------------------------------------------------------------

class stNotifySelectLeitaiMode : public ::google::protobuf::Message {
 public:
  stNotifySelectLeitaiMode();
  virtual ~stNotifySelectLeitaiMode();

  stNotifySelectLeitaiMode(const stNotifySelectLeitaiMode& from);

  inline stNotifySelectLeitaiMode& operator=(const stNotifySelectLeitaiMode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifySelectLeitaiMode& default_instance();

  void Swap(stNotifySelectLeitaiMode* other);

  // implements Message ----------------------------------------------

  stNotifySelectLeitaiMode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifySelectLeitaiMode& from);
  void MergeFrom(const stNotifySelectLeitaiMode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifySelectLeitaiMode_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifySelectLeitaiMode_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifySelectLeitaiMode_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifySelectLeitaiMode_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifySelectLeitaiMode_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifySelectLeitaiMode_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifySelectLeitaiMode_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifySelectLeitaiMode_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifySelectLeitaiMode_ProtoModID_Parse(name, value);
  }

  typedef stNotifySelectLeitaiMode_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifySelectLeitaiMode_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifySelectLeitaiMode_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifySelectLeitaiMode_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifySelectLeitaiMode_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifySelectLeitaiMode_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifySelectLeitaiMode_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifySelectLeitaiMode_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifySelectLeitaiMode_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SortProto.stNotifySelectLeitaiMode)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stNotifySelectLeitaiMode* default_instance_;
};
// -------------------------------------------------------------------

class stSelectLeiTaiMode : public ::google::protobuf::Message {
 public:
  stSelectLeiTaiMode();
  virtual ~stSelectLeiTaiMode();

  stSelectLeiTaiMode(const stSelectLeiTaiMode& from);

  inline stSelectLeiTaiMode& operator=(const stSelectLeiTaiMode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSelectLeiTaiMode& default_instance();

  void Swap(stSelectLeiTaiMode* other);

  // implements Message ----------------------------------------------

  stSelectLeiTaiMode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSelectLeiTaiMode& from);
  void MergeFrom(const stSelectLeiTaiMode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSelectLeiTaiMode_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSelectLeiTaiMode_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSelectLeiTaiMode_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSelectLeiTaiMode_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSelectLeiTaiMode_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSelectLeiTaiMode_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSelectLeiTaiMode_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSelectLeiTaiMode_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSelectLeiTaiMode_ProtoModID_Parse(name, value);
  }

  typedef stSelectLeiTaiMode_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSelectLeiTaiMode_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSelectLeiTaiMode_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSelectLeiTaiMode_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSelectLeiTaiMode_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSelectLeiTaiMode_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSelectLeiTaiMode_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSelectLeiTaiMode_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSelectLeiTaiMode_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.eLeitaiMode mode = 1;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 1;
  inline ::SortProto::eLeitaiMode mode() const;
  inline void set_mode(::SortProto::eLeitaiMode value);

  // @@protoc_insertion_point(class_scope:SortProto.stSelectLeiTaiMode)
 private:
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int mode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSelectLeiTaiMode* default_instance_;
};
// -------------------------------------------------------------------

class stSelectLeiTaiModeResult : public ::google::protobuf::Message {
 public:
  stSelectLeiTaiModeResult();
  virtual ~stSelectLeiTaiModeResult();

  stSelectLeiTaiModeResult(const stSelectLeiTaiModeResult& from);

  inline stSelectLeiTaiModeResult& operator=(const stSelectLeiTaiModeResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSelectLeiTaiModeResult& default_instance();

  void Swap(stSelectLeiTaiModeResult* other);

  // implements Message ----------------------------------------------

  stSelectLeiTaiModeResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSelectLeiTaiModeResult& from);
  void MergeFrom(const stSelectLeiTaiModeResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSelectLeiTaiModeResult_eResult eResult;
  static const eResult eSuccess = stSelectLeiTaiModeResult_eResult_eSuccess;
  static const eResult eFail = stSelectLeiTaiModeResult_eResult_eFail;
  static inline bool eResult_IsValid(int value) {
    return stSelectLeiTaiModeResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stSelectLeiTaiModeResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stSelectLeiTaiModeResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stSelectLeiTaiModeResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stSelectLeiTaiModeResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stSelectLeiTaiModeResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stSelectLeiTaiModeResult_eResult_Parse(name, value);
  }

  typedef stSelectLeiTaiModeResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSelectLeiTaiModeResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSelectLeiTaiModeResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSelectLeiTaiModeResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSelectLeiTaiModeResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSelectLeiTaiModeResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSelectLeiTaiModeResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSelectLeiTaiModeResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSelectLeiTaiModeResult_ProtoModID_Parse(name, value);
  }

  typedef stSelectLeiTaiModeResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSelectLeiTaiModeResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSelectLeiTaiModeResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSelectLeiTaiModeResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSelectLeiTaiModeResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSelectLeiTaiModeResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSelectLeiTaiModeResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSelectLeiTaiModeResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSelectLeiTaiModeResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stSelectLeiTaiModeResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stSelectLeiTaiModeResult_eResult result() const;
  inline void set_result(::SortProto::stSelectLeiTaiModeResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stSelectLeiTaiModeResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSelectLeiTaiModeResult* default_instance_;
};
// -------------------------------------------------------------------

class stResetLeitaiInfo : public ::google::protobuf::Message {
 public:
  stResetLeitaiInfo();
  virtual ~stResetLeitaiInfo();

  stResetLeitaiInfo(const stResetLeitaiInfo& from);

  inline stResetLeitaiInfo& operator=(const stResetLeitaiInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetLeitaiInfo& default_instance();

  void Swap(stResetLeitaiInfo* other);

  // implements Message ----------------------------------------------

  stResetLeitaiInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetLeitaiInfo& from);
  void MergeFrom(const stResetLeitaiInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetLeitaiInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetLeitaiInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetLeitaiInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetLeitaiInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetLeitaiInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetLeitaiInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetLeitaiInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetLeitaiInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetLeitaiInfo_ProtoModID_Parse(name, value);
  }

  typedef stResetLeitaiInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetLeitaiInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetLeitaiInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetLeitaiInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetLeitaiInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetLeitaiInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetLeitaiInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetLeitaiInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetLeitaiInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stResetLeitaiInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResetLeitaiInfo* default_instance_;
};
// -------------------------------------------------------------------

class stResetLeitaiInfoResult : public ::google::protobuf::Message {
 public:
  stResetLeitaiInfoResult();
  virtual ~stResetLeitaiInfoResult();

  stResetLeitaiInfoResult(const stResetLeitaiInfoResult& from);

  inline stResetLeitaiInfoResult& operator=(const stResetLeitaiInfoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetLeitaiInfoResult& default_instance();

  void Swap(stResetLeitaiInfoResult* other);

  // implements Message ----------------------------------------------

  stResetLeitaiInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetLeitaiInfoResult& from);
  void MergeFrom(const stResetLeitaiInfoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetLeitaiInfoResult_eResult eResult;
  static const eResult eSuccess = stResetLeitaiInfoResult_eResult_eSuccess;
  static const eResult eNot_Enough_Diamond = stResetLeitaiInfoResult_eResult_eNot_Enough_Diamond;
  static const eResult eNot_Time_Use_Out = stResetLeitaiInfoResult_eResult_eNot_Time_Use_Out;
  static inline bool eResult_IsValid(int value) {
    return stResetLeitaiInfoResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetLeitaiInfoResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetLeitaiInfoResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetLeitaiInfoResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetLeitaiInfoResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetLeitaiInfoResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetLeitaiInfoResult_eResult_Parse(name, value);
  }

  typedef stResetLeitaiInfoResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetLeitaiInfoResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetLeitaiInfoResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetLeitaiInfoResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetLeitaiInfoResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetLeitaiInfoResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetLeitaiInfoResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetLeitaiInfoResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetLeitaiInfoResult_ProtoModID_Parse(name, value);
  }

  typedef stResetLeitaiInfoResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetLeitaiInfoResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetLeitaiInfoResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetLeitaiInfoResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetLeitaiInfoResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetLeitaiInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetLeitaiInfoResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetLeitaiInfoResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetLeitaiInfoResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stResetLeitaiInfoResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stResetLeitaiInfoResult_eResult result() const;
  inline void set_result(::SortProto::stResetLeitaiInfoResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stResetLeitaiInfoResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResetLeitaiInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawHeroSortList : public ::google::protobuf::Message {
 public:
  stReqDrawHeroSortList();
  virtual ~stReqDrawHeroSortList();

  stReqDrawHeroSortList(const stReqDrawHeroSortList& from);

  inline stReqDrawHeroSortList& operator=(const stReqDrawHeroSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawHeroSortList& default_instance();

  void Swap(stReqDrawHeroSortList* other);

  // implements Message ----------------------------------------------

  stReqDrawHeroSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawHeroSortList& from);
  void MergeFrom(const stReqDrawHeroSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawHeroSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawHeroSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawHeroSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawHeroSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawHeroSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawHeroSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawHeroSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawHeroSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawHeroSortList_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawHeroSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawHeroSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawHeroSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawHeroSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawHeroSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawHeroSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawHeroSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawHeroSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawHeroSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 fromRank = 1;
  inline bool has_fromrank() const;
  inline void clear_fromrank();
  static const int kFromRankFieldNumber = 1;
  inline ::google::protobuf::uint32 fromrank() const;
  inline void set_fromrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqDrawHeroSortList)
 private:
  inline void set_has_fromrank();
  inline void clear_has_fromrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fromrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawHeroSortList* default_instance_;
};
// -------------------------------------------------------------------

class stDrawHeroSortItem : public ::google::protobuf::Message {
 public:
  stDrawHeroSortItem();
  virtual ~stDrawHeroSortItem();

  stDrawHeroSortItem(const stDrawHeroSortItem& from);

  inline stDrawHeroSortItem& operator=(const stDrawHeroSortItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDrawHeroSortItem& default_instance();

  void Swap(stDrawHeroSortItem* other);

  // implements Message ----------------------------------------------

  stDrawHeroSortItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDrawHeroSortItem& from);
  void MergeFrom(const stDrawHeroSortItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stDrawHeroSortItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stDrawHeroSortItem* default_instance_;
};
// -------------------------------------------------------------------

class stDrawHeroSortList : public ::google::protobuf::Message {
 public:
  stDrawHeroSortList();
  virtual ~stDrawHeroSortList();

  stDrawHeroSortList(const stDrawHeroSortList& from);

  inline stDrawHeroSortList& operator=(const stDrawHeroSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDrawHeroSortList& default_instance();

  void Swap(stDrawHeroSortList* other);

  // implements Message ----------------------------------------------

  stDrawHeroSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDrawHeroSortList& from);
  void MergeFrom(const stDrawHeroSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDrawHeroSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDrawHeroSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDrawHeroSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDrawHeroSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDrawHeroSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDrawHeroSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDrawHeroSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDrawHeroSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDrawHeroSortList_ProtoModID_Parse(name, value);
  }

  typedef stDrawHeroSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDrawHeroSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDrawHeroSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDrawHeroSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDrawHeroSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDrawHeroSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDrawHeroSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDrawHeroSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDrawHeroSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // repeated .SortProto.stDrawHeroSortItem sortItem = 2;
  inline int sortitem_size() const;
  inline void clear_sortitem();
  static const int kSortItemFieldNumber = 2;
  inline const ::SortProto::stDrawHeroSortItem& sortitem(int index) const;
  inline ::SortProto::stDrawHeroSortItem* mutable_sortitem(int index);
  inline ::SortProto::stDrawHeroSortItem* add_sortitem();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stDrawHeroSortItem >&
      sortitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stDrawHeroSortItem >*
      mutable_sortitem();

  // optional uint32 myRank = 3;
  inline bool has_myrank() const;
  inline void clear_myrank();
  static const int kMyRankFieldNumber = 3;
  inline ::google::protobuf::uint32 myrank() const;
  inline void set_myrank(::google::protobuf::uint32 value);

  // optional uint32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stDrawHeroSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();
  inline void set_has_myrank();
  inline void clear_has_myrank();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stDrawHeroSortItem > sortitem_;
  ::google::protobuf::uint32 beginrank_;
  ::google::protobuf::uint32 myrank_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stDrawHeroSortList* default_instance_;
};
// -------------------------------------------------------------------

class stReqOne2OnePVPMatch : public ::google::protobuf::Message {
 public:
  stReqOne2OnePVPMatch();
  virtual ~stReqOne2OnePVPMatch();

  stReqOne2OnePVPMatch(const stReqOne2OnePVPMatch& from);

  inline stReqOne2OnePVPMatch& operator=(const stReqOne2OnePVPMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOne2OnePVPMatch& default_instance();

  void Swap(stReqOne2OnePVPMatch* other);

  // implements Message ----------------------------------------------

  stReqOne2OnePVPMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOne2OnePVPMatch& from);
  void MergeFrom(const stReqOne2OnePVPMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOne2OnePVPMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOne2OnePVPMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOne2OnePVPMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOne2OnePVPMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOne2OnePVPMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOne2OnePVPMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOne2OnePVPMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOne2OnePVPMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOne2OnePVPMatch_ProtoModID_Parse(name, value);
  }

  typedef stReqOne2OnePVPMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOne2OnePVPMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOne2OnePVPMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOne2OnePVPMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOne2OnePVPMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOne2OnePVPMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOne2OnePVPMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOne2OnePVPMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOne2OnePVPMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqOne2OnePVPMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqOne2OnePVPMatch* default_instance_;
};
// -------------------------------------------------------------------

class stOne2OnePVPMatchResult : public ::google::protobuf::Message {
 public:
  stOne2OnePVPMatchResult();
  virtual ~stOne2OnePVPMatchResult();

  stOne2OnePVPMatchResult(const stOne2OnePVPMatchResult& from);

  inline stOne2OnePVPMatchResult& operator=(const stOne2OnePVPMatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOne2OnePVPMatchResult& default_instance();

  void Swap(stOne2OnePVPMatchResult* other);

  // implements Message ----------------------------------------------

  stOne2OnePVPMatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOne2OnePVPMatchResult& from);
  void MergeFrom(const stOne2OnePVPMatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOne2OnePVPMatchResult_eResult eResult;
  static const eResult eSucess = stOne2OnePVPMatchResult_eResult_eSucess;
  static const eResult eWait = stOne2OnePVPMatchResult_eResult_eWait;
  static const eResult eFail = stOne2OnePVPMatchResult_eResult_eFail;
  static const eResult eNot_In_Time = stOne2OnePVPMatchResult_eResult_eNot_In_Time;
  static const eResult eEquip = stOne2OnePVPMatchResult_eResult_eEquip;
  static inline bool eResult_IsValid(int value) {
    return stOne2OnePVPMatchResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stOne2OnePVPMatchResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stOne2OnePVPMatchResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stOne2OnePVPMatchResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stOne2OnePVPMatchResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stOne2OnePVPMatchResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stOne2OnePVPMatchResult_eResult_Parse(name, value);
  }

  typedef stOne2OnePVPMatchResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOne2OnePVPMatchResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOne2OnePVPMatchResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOne2OnePVPMatchResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOne2OnePVPMatchResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOne2OnePVPMatchResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOne2OnePVPMatchResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOne2OnePVPMatchResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOne2OnePVPMatchResult_ProtoModID_Parse(name, value);
  }

  typedef stOne2OnePVPMatchResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOne2OnePVPMatchResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOne2OnePVPMatchResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOne2OnePVPMatchResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOne2OnePVPMatchResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOne2OnePVPMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOne2OnePVPMatchResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOne2OnePVPMatchResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOne2OnePVPMatchResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stOne2OnePVPMatchResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stOne2OnePVPMatchResult_eResult result() const;
  inline void set_result(::SortProto::stOne2OnePVPMatchResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stOne2OnePVPMatchResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stOne2OnePVPMatchResult* default_instance_;
};
// -------------------------------------------------------------------

class stCancelOne2OnePVPMatch : public ::google::protobuf::Message {
 public:
  stCancelOne2OnePVPMatch();
  virtual ~stCancelOne2OnePVPMatch();

  stCancelOne2OnePVPMatch(const stCancelOne2OnePVPMatch& from);

  inline stCancelOne2OnePVPMatch& operator=(const stCancelOne2OnePVPMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelOne2OnePVPMatch& default_instance();

  void Swap(stCancelOne2OnePVPMatch* other);

  // implements Message ----------------------------------------------

  stCancelOne2OnePVPMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelOne2OnePVPMatch& from);
  void MergeFrom(const stCancelOne2OnePVPMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelOne2OnePVPMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelOne2OnePVPMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelOne2OnePVPMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelOne2OnePVPMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelOne2OnePVPMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelOne2OnePVPMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelOne2OnePVPMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelOne2OnePVPMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelOne2OnePVPMatch_ProtoModID_Parse(name, value);
  }

  typedef stCancelOne2OnePVPMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelOne2OnePVPMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelOne2OnePVPMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelOne2OnePVPMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelOne2OnePVPMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelOne2OnePVPMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelOne2OnePVPMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelOne2OnePVPMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelOne2OnePVPMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stCancelOne2OnePVPMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stCancelOne2OnePVPMatch* default_instance_;
};
// -------------------------------------------------------------------

class stCancelOne2OnePVPResult : public ::google::protobuf::Message {
 public:
  stCancelOne2OnePVPResult();
  virtual ~stCancelOne2OnePVPResult();

  stCancelOne2OnePVPResult(const stCancelOne2OnePVPResult& from);

  inline stCancelOne2OnePVPResult& operator=(const stCancelOne2OnePVPResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelOne2OnePVPResult& default_instance();

  void Swap(stCancelOne2OnePVPResult* other);

  // implements Message ----------------------------------------------

  stCancelOne2OnePVPResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelOne2OnePVPResult& from);
  void MergeFrom(const stCancelOne2OnePVPResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelOne2OnePVPResult_eResult eResult;
  static const eResult eSuccess = stCancelOne2OnePVPResult_eResult_eSuccess;
  static const eResult eFail = stCancelOne2OnePVPResult_eResult_eFail;
  static inline bool eResult_IsValid(int value) {
    return stCancelOne2OnePVPResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCancelOne2OnePVPResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCancelOne2OnePVPResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCancelOne2OnePVPResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCancelOne2OnePVPResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCancelOne2OnePVPResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCancelOne2OnePVPResult_eResult_Parse(name, value);
  }

  typedef stCancelOne2OnePVPResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelOne2OnePVPResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelOne2OnePVPResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelOne2OnePVPResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelOne2OnePVPResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelOne2OnePVPResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelOne2OnePVPResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelOne2OnePVPResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelOne2OnePVPResult_ProtoModID_Parse(name, value);
  }

  typedef stCancelOne2OnePVPResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelOne2OnePVPResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelOne2OnePVPResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelOne2OnePVPResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelOne2OnePVPResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelOne2OnePVPResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelOne2OnePVPResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelOne2OnePVPResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelOne2OnePVPResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stCancelOne2OnePVPResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stCancelOne2OnePVPResult_eResult result() const;
  inline void set_result(::SortProto::stCancelOne2OnePVPResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stCancelOne2OnePVPResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stCancelOne2OnePVPResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqMySortListInfo : public ::google::protobuf::Message {
 public:
  stReqMySortListInfo();
  virtual ~stReqMySortListInfo();

  stReqMySortListInfo(const stReqMySortListInfo& from);

  inline stReqMySortListInfo& operator=(const stReqMySortListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqMySortListInfo& default_instance();

  void Swap(stReqMySortListInfo* other);

  // implements Message ----------------------------------------------

  stReqMySortListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqMySortListInfo& from);
  void MergeFrom(const stReqMySortListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqMySortListInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqMySortListInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqMySortListInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqMySortListInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqMySortListInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqMySortListInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqMySortListInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqMySortListInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqMySortListInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqMySortListInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqMySortListInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqMySortListInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqMySortListInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqMySortListInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqMySortListInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqMySortListInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqMySortListInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqMySortListInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqMySortListInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqMySortListInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetMySortListInfo : public ::google::protobuf::Message {
 public:
  stRetMySortListInfo();
  virtual ~stRetMySortListInfo();

  stRetMySortListInfo(const stRetMySortListInfo& from);

  inline stRetMySortListInfo& operator=(const stRetMySortListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetMySortListInfo& default_instance();

  void Swap(stRetMySortListInfo* other);

  // implements Message ----------------------------------------------

  stRetMySortListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetMySortListInfo& from);
  void MergeFrom(const stRetMySortListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetMySortListInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetMySortListInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetMySortListInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetMySortListInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetMySortListInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetMySortListInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetMySortListInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetMySortListInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetMySortListInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetMySortListInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetMySortListInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetMySortListInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetMySortListInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetMySortListInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetMySortListInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetMySortListInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetMySortListInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetMySortListInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 one2onePVPRank = 1;
  inline bool has_one2onepvprank() const;
  inline void clear_one2onepvprank();
  static const int kOne2OnePVPRankFieldNumber = 1;
  inline ::google::protobuf::uint32 one2onepvprank() const;
  inline void set_one2onepvprank(::google::protobuf::uint32 value);

  // optional uint32 arenaPKRank = 2;
  inline bool has_arenapkrank() const;
  inline void clear_arenapkrank();
  static const int kArenaPKRankFieldNumber = 2;
  inline ::google::protobuf::uint32 arenapkrank() const;
  inline void set_arenapkrank(::google::protobuf::uint32 value);

  // optional uint32 copymapRank = 3;
  inline bool has_copymaprank() const;
  inline void clear_copymaprank();
  static const int kCopymapRankFieldNumber = 3;
  inline ::google::protobuf::uint32 copymaprank() const;
  inline void set_copymaprank(::google::protobuf::uint32 value);

  // optional uint32 battlePowerRank = 4;
  inline bool has_battlepowerrank() const;
  inline void clear_battlepowerrank();
  static const int kBattlePowerRankFieldNumber = 4;
  inline ::google::protobuf::uint32 battlepowerrank() const;
  inline void set_battlepowerrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetMySortListInfo)
 private:
  inline void set_has_one2onepvprank();
  inline void clear_has_one2onepvprank();
  inline void set_has_arenapkrank();
  inline void clear_has_arenapkrank();
  inline void set_has_copymaprank();
  inline void clear_has_copymaprank();
  inline void set_has_battlepowerrank();
  inline void clear_has_battlepowerrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 one2onepvprank_;
  ::google::protobuf::uint32 arenapkrank_;
  ::google::protobuf::uint32 copymaprank_;
  ::google::protobuf::uint32 battlepowerrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetMySortListInfo* default_instance_;
};
// -------------------------------------------------------------------

class stLeitaiMoveHero2BattlePos : public ::google::protobuf::Message {
 public:
  stLeitaiMoveHero2BattlePos();
  virtual ~stLeitaiMoveHero2BattlePos();

  stLeitaiMoveHero2BattlePos(const stLeitaiMoveHero2BattlePos& from);

  inline stLeitaiMoveHero2BattlePos& operator=(const stLeitaiMoveHero2BattlePos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLeitaiMoveHero2BattlePos& default_instance();

  void Swap(stLeitaiMoveHero2BattlePos* other);

  // implements Message ----------------------------------------------

  stLeitaiMoveHero2BattlePos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLeitaiMoveHero2BattlePos& from);
  void MergeFrom(const stLeitaiMoveHero2BattlePos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLeitaiMoveHero2BattlePos_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLeitaiMoveHero2BattlePos_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLeitaiMoveHero2BattlePos_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLeitaiMoveHero2BattlePos_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLeitaiMoveHero2BattlePos_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLeitaiMoveHero2BattlePos_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLeitaiMoveHero2BattlePos_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLeitaiMoveHero2BattlePos_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLeitaiMoveHero2BattlePos_ProtoModID_Parse(name, value);
  }

  typedef stLeitaiMoveHero2BattlePos_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLeitaiMoveHero2BattlePos_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLeitaiMoveHero2BattlePos_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLeitaiMoveHero2BattlePos_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLeitaiMoveHero2BattlePos_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLeitaiMoveHero2BattlePos_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLeitaiMoveHero2BattlePos_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLeitaiMoveHero2BattlePos_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLeitaiMoveHero2BattlePos_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stLeitaiMoveHero2BattlePos)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stLeitaiMoveHero2BattlePos* default_instance_;
};
// -------------------------------------------------------------------

class stLeitaiMoveHero2BattlePosError : public ::google::protobuf::Message {
 public:
  stLeitaiMoveHero2BattlePosError();
  virtual ~stLeitaiMoveHero2BattlePosError();

  stLeitaiMoveHero2BattlePosError(const stLeitaiMoveHero2BattlePosError& from);

  inline stLeitaiMoveHero2BattlePosError& operator=(const stLeitaiMoveHero2BattlePosError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLeitaiMoveHero2BattlePosError& default_instance();

  void Swap(stLeitaiMoveHero2BattlePosError* other);

  // implements Message ----------------------------------------------

  stLeitaiMoveHero2BattlePosError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLeitaiMoveHero2BattlePosError& from);
  void MergeFrom(const stLeitaiMoveHero2BattlePosError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLeitaiMoveHero2BattlePosError_eResult eResult;
  static const eResult eSend_Msg_Param_Error = stLeitaiMoveHero2BattlePosError_eResult_eSend_Msg_Param_Error;
  static const eResult ePos_The_Same = stLeitaiMoveHero2BattlePosError_eResult_ePos_The_Same;
  static inline bool eResult_IsValid(int value) {
    return stLeitaiMoveHero2BattlePosError_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLeitaiMoveHero2BattlePosError_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLeitaiMoveHero2BattlePosError_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLeitaiMoveHero2BattlePosError_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLeitaiMoveHero2BattlePosError_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLeitaiMoveHero2BattlePosError_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLeitaiMoveHero2BattlePosError_eResult_Parse(name, value);
  }

  typedef stLeitaiMoveHero2BattlePosError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLeitaiMoveHero2BattlePosError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLeitaiMoveHero2BattlePosError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLeitaiMoveHero2BattlePosError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLeitaiMoveHero2BattlePosError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLeitaiMoveHero2BattlePosError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLeitaiMoveHero2BattlePosError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLeitaiMoveHero2BattlePosError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLeitaiMoveHero2BattlePosError_ProtoModID_Parse(name, value);
  }

  typedef stLeitaiMoveHero2BattlePosError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLeitaiMoveHero2BattlePosError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLeitaiMoveHero2BattlePosError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLeitaiMoveHero2BattlePosError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLeitaiMoveHero2BattlePosError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLeitaiMoveHero2BattlePosError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLeitaiMoveHero2BattlePosError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLeitaiMoveHero2BattlePosError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLeitaiMoveHero2BattlePosError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stLeitaiMoveHero2BattlePosError.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stLeitaiMoveHero2BattlePosError_eResult result() const;
  inline void set_result(::SortProto::stLeitaiMoveHero2BattlePosError_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stLeitaiMoveHero2BattlePosError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stLeitaiMoveHero2BattlePosError* default_instance_;
};
// -------------------------------------------------------------------

class stLeitaiCancelGoOutForBattle : public ::google::protobuf::Message {
 public:
  stLeitaiCancelGoOutForBattle();
  virtual ~stLeitaiCancelGoOutForBattle();

  stLeitaiCancelGoOutForBattle(const stLeitaiCancelGoOutForBattle& from);

  inline stLeitaiCancelGoOutForBattle& operator=(const stLeitaiCancelGoOutForBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLeitaiCancelGoOutForBattle& default_instance();

  void Swap(stLeitaiCancelGoOutForBattle* other);

  // implements Message ----------------------------------------------

  stLeitaiCancelGoOutForBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLeitaiCancelGoOutForBattle& from);
  void MergeFrom(const stLeitaiCancelGoOutForBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLeitaiCancelGoOutForBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLeitaiCancelGoOutForBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLeitaiCancelGoOutForBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLeitaiCancelGoOutForBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLeitaiCancelGoOutForBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLeitaiCancelGoOutForBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLeitaiCancelGoOutForBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLeitaiCancelGoOutForBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLeitaiCancelGoOutForBattle_ProtoModID_Parse(name, value);
  }

  typedef stLeitaiCancelGoOutForBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLeitaiCancelGoOutForBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLeitaiCancelGoOutForBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLeitaiCancelGoOutForBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLeitaiCancelGoOutForBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLeitaiCancelGoOutForBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLeitaiCancelGoOutForBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLeitaiCancelGoOutForBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLeitaiCancelGoOutForBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pos = 1;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 1;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stLeitaiCancelGoOutForBattle)
 private:
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stLeitaiCancelGoOutForBattle* default_instance_;
};
// -------------------------------------------------------------------

class stLeitaiCancelGoOutForBattleResult : public ::google::protobuf::Message {
 public:
  stLeitaiCancelGoOutForBattleResult();
  virtual ~stLeitaiCancelGoOutForBattleResult();

  stLeitaiCancelGoOutForBattleResult(const stLeitaiCancelGoOutForBattleResult& from);

  inline stLeitaiCancelGoOutForBattleResult& operator=(const stLeitaiCancelGoOutForBattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLeitaiCancelGoOutForBattleResult& default_instance();

  void Swap(stLeitaiCancelGoOutForBattleResult* other);

  // implements Message ----------------------------------------------

  stLeitaiCancelGoOutForBattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLeitaiCancelGoOutForBattleResult& from);
  void MergeFrom(const stLeitaiCancelGoOutForBattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLeitaiCancelGoOutForBattleResult_eResult eResult;
  static const eResult sSUCCESS = stLeitaiCancelGoOutForBattleResult_eResult_sSUCCESS;
  static const eResult eHAS_NO_HERO_IN_THE_POS = stLeitaiCancelGoOutForBattleResult_eResult_eHAS_NO_HERO_IN_THE_POS;
  static inline bool eResult_IsValid(int value) {
    return stLeitaiCancelGoOutForBattleResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLeitaiCancelGoOutForBattleResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLeitaiCancelGoOutForBattleResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLeitaiCancelGoOutForBattleResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLeitaiCancelGoOutForBattleResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLeitaiCancelGoOutForBattleResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLeitaiCancelGoOutForBattleResult_eResult_Parse(name, value);
  }

  typedef stLeitaiCancelGoOutForBattleResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLeitaiCancelGoOutForBattleResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLeitaiCancelGoOutForBattleResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLeitaiCancelGoOutForBattleResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLeitaiCancelGoOutForBattleResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLeitaiCancelGoOutForBattleResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLeitaiCancelGoOutForBattleResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLeitaiCancelGoOutForBattleResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLeitaiCancelGoOutForBattleResult_ProtoModID_Parse(name, value);
  }

  typedef stLeitaiCancelGoOutForBattleResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLeitaiCancelGoOutForBattleResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLeitaiCancelGoOutForBattleResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLeitaiCancelGoOutForBattleResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLeitaiCancelGoOutForBattleResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLeitaiCancelGoOutForBattleResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLeitaiCancelGoOutForBattleResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLeitaiCancelGoOutForBattleResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLeitaiCancelGoOutForBattleResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stLeitaiCancelGoOutForBattleResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stLeitaiCancelGoOutForBattleResult_eResult result() const;
  inline void set_result(::SortProto::stLeitaiCancelGoOutForBattleResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stLeitaiCancelGoOutForBattleResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stLeitaiCancelGoOutForBattleResult* default_instance_;
};
// -------------------------------------------------------------------

class stCommitArenaResult : public ::google::protobuf::Message {
 public:
  stCommitArenaResult();
  virtual ~stCommitArenaResult();

  stCommitArenaResult(const stCommitArenaResult& from);

  inline stCommitArenaResult& operator=(const stCommitArenaResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCommitArenaResult& default_instance();

  void Swap(stCommitArenaResult* other);

  // implements Message ----------------------------------------------

  stCommitArenaResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCommitArenaResult& from);
  void MergeFrom(const stCommitArenaResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCommitArenaResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCommitArenaResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCommitArenaResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCommitArenaResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCommitArenaResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCommitArenaResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCommitArenaResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCommitArenaResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCommitArenaResult_ProtoModID_Parse(name, value);
  }

  typedef stCommitArenaResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCommitArenaResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCommitArenaResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCommitArenaResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCommitArenaResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCommitArenaResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCommitArenaResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCommitArenaResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCommitArenaResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool win = 1;
  inline bool has_win() const;
  inline void clear_win();
  static const int kWinFieldNumber = 1;
  inline bool win() const;
  inline void set_win(bool value);

  // @@protoc_insertion_point(class_scope:SortProto.stCommitArenaResult)
 private:
  inline void set_has_win();
  inline void clear_has_win();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool win_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stCommitArenaResult* default_instance_;
};
// -------------------------------------------------------------------

class stRetCommintArenaResult : public ::google::protobuf::Message {
 public:
  stRetCommintArenaResult();
  virtual ~stRetCommintArenaResult();

  stRetCommintArenaResult(const stRetCommintArenaResult& from);

  inline stRetCommintArenaResult& operator=(const stRetCommintArenaResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetCommintArenaResult& default_instance();

  void Swap(stRetCommintArenaResult* other);

  // implements Message ----------------------------------------------

  stRetCommintArenaResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetCommintArenaResult& from);
  void MergeFrom(const stRetCommintArenaResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetCommintArenaResult_eResult eResult;
  static const eResult SUCCESS = stRetCommintArenaResult_eResult_SUCCESS;
  static const eResult COND_NOT_MEET = stRetCommintArenaResult_eResult_COND_NOT_MEET;
  static const eResult INNER_ERROR = stRetCommintArenaResult_eResult_INNER_ERROR;
  static const eResult ROLE_LV_TOO_LOW = stRetCommintArenaResult_eResult_ROLE_LV_TOO_LOW;
  static const eResult LILIAN_NOT_ENOUGH = stRetCommintArenaResult_eResult_LILIAN_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stRetCommintArenaResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetCommintArenaResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetCommintArenaResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetCommintArenaResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetCommintArenaResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetCommintArenaResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetCommintArenaResult_eResult_Parse(name, value);
  }

  typedef stRetCommintArenaResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetCommintArenaResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetCommintArenaResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetCommintArenaResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetCommintArenaResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetCommintArenaResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetCommintArenaResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetCommintArenaResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetCommintArenaResult_ProtoModID_Parse(name, value);
  }

  typedef stRetCommintArenaResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetCommintArenaResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetCommintArenaResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetCommintArenaResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetCommintArenaResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetCommintArenaResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetCommintArenaResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetCommintArenaResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetCommintArenaResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stRetCommintArenaResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stRetCommintArenaResult_eResult result() const;
  inline void set_result(::SortProto::stRetCommintArenaResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetCommintArenaResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetCommintArenaResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqEnterLeitaiScene : public ::google::protobuf::Message {
 public:
  stReqEnterLeitaiScene();
  virtual ~stReqEnterLeitaiScene();

  stReqEnterLeitaiScene(const stReqEnterLeitaiScene& from);

  inline stReqEnterLeitaiScene& operator=(const stReqEnterLeitaiScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEnterLeitaiScene& default_instance();

  void Swap(stReqEnterLeitaiScene* other);

  // implements Message ----------------------------------------------

  stReqEnterLeitaiScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEnterLeitaiScene& from);
  void MergeFrom(const stReqEnterLeitaiScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEnterLeitaiScene_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEnterLeitaiScene_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEnterLeitaiScene_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEnterLeitaiScene_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEnterLeitaiScene_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEnterLeitaiScene_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEnterLeitaiScene_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEnterLeitaiScene_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEnterLeitaiScene_ProtoModID_Parse(name, value);
  }

  typedef stReqEnterLeitaiScene_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEnterLeitaiScene_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEnterLeitaiScene_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEnterLeitaiScene_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEnterLeitaiScene_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEnterLeitaiScene_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEnterLeitaiScene_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEnterLeitaiScene_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEnterLeitaiScene_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 otherID = 1;
  inline bool has_otherid() const;
  inline void clear_otherid();
  static const int kOtherIDFieldNumber = 1;
  inline ::google::protobuf::uint32 otherid() const;
  inline void set_otherid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqEnterLeitaiScene)
 private:
  inline void set_has_otherid();
  inline void clear_has_otherid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 otherid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqEnterLeitaiScene* default_instance_;
};
// -------------------------------------------------------------------

class stReqResetLeitaiBuff : public ::google::protobuf::Message {
 public:
  stReqResetLeitaiBuff();
  virtual ~stReqResetLeitaiBuff();

  stReqResetLeitaiBuff(const stReqResetLeitaiBuff& from);

  inline stReqResetLeitaiBuff& operator=(const stReqResetLeitaiBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResetLeitaiBuff& default_instance();

  void Swap(stReqResetLeitaiBuff* other);

  // implements Message ----------------------------------------------

  stReqResetLeitaiBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResetLeitaiBuff& from);
  void MergeFrom(const stReqResetLeitaiBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResetLeitaiBuff_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResetLeitaiBuff_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResetLeitaiBuff_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResetLeitaiBuff_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResetLeitaiBuff_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResetLeitaiBuff_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResetLeitaiBuff_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResetLeitaiBuff_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResetLeitaiBuff_ProtoModID_Parse(name, value);
  }

  typedef stReqResetLeitaiBuff_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResetLeitaiBuff_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResetLeitaiBuff_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResetLeitaiBuff_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResetLeitaiBuff_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResetLeitaiBuff_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResetLeitaiBuff_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResetLeitaiBuff_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResetLeitaiBuff_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqResetLeitaiBuff)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqResetLeitaiBuff* default_instance_;
};
// -------------------------------------------------------------------

class stResetLeitaiBuffResult : public ::google::protobuf::Message {
 public:
  stResetLeitaiBuffResult();
  virtual ~stResetLeitaiBuffResult();

  stResetLeitaiBuffResult(const stResetLeitaiBuffResult& from);

  inline stResetLeitaiBuffResult& operator=(const stResetLeitaiBuffResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetLeitaiBuffResult& default_instance();

  void Swap(stResetLeitaiBuffResult* other);

  // implements Message ----------------------------------------------

  stResetLeitaiBuffResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetLeitaiBuffResult& from);
  void MergeFrom(const stResetLeitaiBuffResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetLeitaiBuffResult_eResult eResult;
  static const eResult eSuccess = stResetLeitaiBuffResult_eResult_eSuccess;
  static const eResult eDiamond_Not_Enough = stResetLeitaiBuffResult_eResult_eDiamond_Not_Enough;
  static const eResult eInner_Error = stResetLeitaiBuffResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stResetLeitaiBuffResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetLeitaiBuffResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetLeitaiBuffResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetLeitaiBuffResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetLeitaiBuffResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetLeitaiBuffResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetLeitaiBuffResult_eResult_Parse(name, value);
  }

  typedef stResetLeitaiBuffResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetLeitaiBuffResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetLeitaiBuffResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetLeitaiBuffResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetLeitaiBuffResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetLeitaiBuffResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetLeitaiBuffResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetLeitaiBuffResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetLeitaiBuffResult_ProtoModID_Parse(name, value);
  }

  typedef stResetLeitaiBuffResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetLeitaiBuffResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetLeitaiBuffResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetLeitaiBuffResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetLeitaiBuffResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetLeitaiBuffResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetLeitaiBuffResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetLeitaiBuffResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetLeitaiBuffResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 buffID = 1;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 1;
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // optional .SortProto.stResetLeitaiBuffResult.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::SortProto::stResetLeitaiBuffResult_eResult result() const;
  inline void set_result(::SortProto::stResetLeitaiBuffResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stResetLeitaiBuffResult)
 private:
  inline void set_has_buffid();
  inline void clear_has_buffid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 buffid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResetLeitaiBuffResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqBuffResetTime : public ::google::protobuf::Message {
 public:
  stReqBuffResetTime();
  virtual ~stReqBuffResetTime();

  stReqBuffResetTime(const stReqBuffResetTime& from);

  inline stReqBuffResetTime& operator=(const stReqBuffResetTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBuffResetTime& default_instance();

  void Swap(stReqBuffResetTime* other);

  // implements Message ----------------------------------------------

  stReqBuffResetTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBuffResetTime& from);
  void MergeFrom(const stReqBuffResetTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBuffResetTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBuffResetTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBuffResetTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBuffResetTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBuffResetTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBuffResetTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBuffResetTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBuffResetTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBuffResetTime_ProtoModID_Parse(name, value);
  }

  typedef stReqBuffResetTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBuffResetTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBuffResetTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBuffResetTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBuffResetTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBuffResetTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBuffResetTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBuffResetTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBuffResetTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqBuffResetTime)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqBuffResetTime* default_instance_;
};
// -------------------------------------------------------------------

class stRetBuffResetTime : public ::google::protobuf::Message {
 public:
  stRetBuffResetTime();
  virtual ~stRetBuffResetTime();

  stRetBuffResetTime(const stRetBuffResetTime& from);

  inline stRetBuffResetTime& operator=(const stRetBuffResetTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetBuffResetTime& default_instance();

  void Swap(stRetBuffResetTime* other);

  // implements Message ----------------------------------------------

  stRetBuffResetTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetBuffResetTime& from);
  void MergeFrom(const stRetBuffResetTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetBuffResetTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetBuffResetTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetBuffResetTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetBuffResetTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetBuffResetTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetBuffResetTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetBuffResetTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetBuffResetTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetBuffResetTime_ProtoModID_Parse(name, value);
  }

  typedef stRetBuffResetTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetBuffResetTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetBuffResetTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetBuffResetTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetBuffResetTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetBuffResetTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetBuffResetTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetBuffResetTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetBuffResetTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 remainTime = 1;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // optional uint32 buffID = 2;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 2;
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetBuffResetTime)
 private:
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 remaintime_;
  ::google::protobuf::uint32 buffid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetBuffResetTime* default_instance_;
};
// -------------------------------------------------------------------

class stArenaReachNewRank : public ::google::protobuf::Message {
 public:
  stArenaReachNewRank();
  virtual ~stArenaReachNewRank();

  stArenaReachNewRank(const stArenaReachNewRank& from);

  inline stArenaReachNewRank& operator=(const stArenaReachNewRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stArenaReachNewRank& default_instance();

  void Swap(stArenaReachNewRank* other);

  // implements Message ----------------------------------------------

  stArenaReachNewRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stArenaReachNewRank& from);
  void MergeFrom(const stArenaReachNewRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stArenaReachNewRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stArenaReachNewRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stArenaReachNewRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stArenaReachNewRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stArenaReachNewRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stArenaReachNewRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stArenaReachNewRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stArenaReachNewRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stArenaReachNewRank_ProtoModID_Parse(name, value);
  }

  typedef stArenaReachNewRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stArenaReachNewRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stArenaReachNewRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stArenaReachNewRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stArenaReachNewRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stArenaReachNewRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stArenaReachNewRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stArenaReachNewRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stArenaReachNewRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 newRank = 1;
  inline bool has_newrank() const;
  inline void clear_newrank();
  static const int kNewRankFieldNumber = 1;
  inline ::google::protobuf::uint32 newrank() const;
  inline void set_newrank(::google::protobuf::uint32 value);

  // optional uint32 oldRank = 2;
  inline bool has_oldrank() const;
  inline void clear_oldrank();
  static const int kOldRankFieldNumber = 2;
  inline ::google::protobuf::uint32 oldrank() const;
  inline void set_oldrank(::google::protobuf::uint32 value);

  // optional uint32 rewardNum = 3;
  inline bool has_rewardnum() const;
  inline void clear_rewardnum();
  static const int kRewardNumFieldNumber = 3;
  inline ::google::protobuf::uint32 rewardnum() const;
  inline void set_rewardnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stArenaReachNewRank)
 private:
  inline void set_has_newrank();
  inline void clear_has_newrank();
  inline void set_has_oldrank();
  inline void clear_has_oldrank();
  inline void set_has_rewardnum();
  inline void clear_has_rewardnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 newrank_;
  ::google::protobuf::uint32 oldrank_;
  ::google::protobuf::uint32 rewardnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stArenaReachNewRank* default_instance_;
};
// -------------------------------------------------------------------

class stReqResetArenaChallengeNum : public ::google::protobuf::Message {
 public:
  stReqResetArenaChallengeNum();
  virtual ~stReqResetArenaChallengeNum();

  stReqResetArenaChallengeNum(const stReqResetArenaChallengeNum& from);

  inline stReqResetArenaChallengeNum& operator=(const stReqResetArenaChallengeNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResetArenaChallengeNum& default_instance();

  void Swap(stReqResetArenaChallengeNum* other);

  // implements Message ----------------------------------------------

  stReqResetArenaChallengeNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResetArenaChallengeNum& from);
  void MergeFrom(const stReqResetArenaChallengeNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResetArenaChallengeNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResetArenaChallengeNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResetArenaChallengeNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResetArenaChallengeNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResetArenaChallengeNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResetArenaChallengeNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResetArenaChallengeNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResetArenaChallengeNum_ProtoModID_Parse(name, value);
  }

  typedef stReqResetArenaChallengeNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResetArenaChallengeNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResetArenaChallengeNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResetArenaChallengeNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResetArenaChallengeNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResetArenaChallengeNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResetArenaChallengeNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqResetArenaChallengeNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqResetArenaChallengeNum* default_instance_;
};
// -------------------------------------------------------------------

class stResetArenaChallengeNunResult : public ::google::protobuf::Message {
 public:
  stResetArenaChallengeNunResult();
  virtual ~stResetArenaChallengeNunResult();

  stResetArenaChallengeNunResult(const stResetArenaChallengeNunResult& from);

  inline stResetArenaChallengeNunResult& operator=(const stResetArenaChallengeNunResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetArenaChallengeNunResult& default_instance();

  void Swap(stResetArenaChallengeNunResult* other);

  // implements Message ----------------------------------------------

  stResetArenaChallengeNunResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetArenaChallengeNunResult& from);
  void MergeFrom(const stResetArenaChallengeNunResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetArenaChallengeNunResult_eResult eResult;
  static const eResult eSuccess = stResetArenaChallengeNunResult_eResult_eSuccess;
  static const eResult eResetNum_Use_Out = stResetArenaChallengeNunResult_eResult_eResetNum_Use_Out;
  static const eResult eDiamond_Not_Enough = stResetArenaChallengeNunResult_eResult_eDiamond_Not_Enough;
  static const eResult eInner_Error = stResetArenaChallengeNunResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stResetArenaChallengeNunResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetArenaChallengeNunResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetArenaChallengeNunResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetArenaChallengeNunResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetArenaChallengeNunResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetArenaChallengeNunResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetArenaChallengeNunResult_eResult_Parse(name, value);
  }

  typedef stResetArenaChallengeNunResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetArenaChallengeNunResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetArenaChallengeNunResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetArenaChallengeNunResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetArenaChallengeNunResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetArenaChallengeNunResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetArenaChallengeNunResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetArenaChallengeNunResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetArenaChallengeNunResult_ProtoModID_Parse(name, value);
  }

  typedef stResetArenaChallengeNunResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetArenaChallengeNunResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetArenaChallengeNunResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetArenaChallengeNunResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetArenaChallengeNunResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetArenaChallengeNunResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetArenaChallengeNunResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetArenaChallengeNunResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetArenaChallengeNunResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stResetArenaChallengeNunResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stResetArenaChallengeNunResult_eResult result() const;
  inline void set_result(::SortProto::stResetArenaChallengeNunResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stResetArenaChallengeNunResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResetArenaChallengeNunResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqClearArenaCD : public ::google::protobuf::Message {
 public:
  stReqClearArenaCD();
  virtual ~stReqClearArenaCD();

  stReqClearArenaCD(const stReqClearArenaCD& from);

  inline stReqClearArenaCD& operator=(const stReqClearArenaCD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqClearArenaCD& default_instance();

  void Swap(stReqClearArenaCD* other);

  // implements Message ----------------------------------------------

  stReqClearArenaCD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqClearArenaCD& from);
  void MergeFrom(const stReqClearArenaCD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqClearArenaCD_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqClearArenaCD_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqClearArenaCD_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqClearArenaCD_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqClearArenaCD_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqClearArenaCD_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqClearArenaCD_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqClearArenaCD_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqClearArenaCD_ProtoModID_Parse(name, value);
  }

  typedef stReqClearArenaCD_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqClearArenaCD_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqClearArenaCD_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqClearArenaCD_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqClearArenaCD_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqClearArenaCD_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqClearArenaCD_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqClearArenaCD_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqClearArenaCD_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqClearArenaCD)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqClearArenaCD* default_instance_;
};
// -------------------------------------------------------------------

class stClearArenaCDResult : public ::google::protobuf::Message {
 public:
  stClearArenaCDResult();
  virtual ~stClearArenaCDResult();

  stClearArenaCDResult(const stClearArenaCDResult& from);

  inline stClearArenaCDResult& operator=(const stClearArenaCDResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stClearArenaCDResult& default_instance();

  void Swap(stClearArenaCDResult* other);

  // implements Message ----------------------------------------------

  stClearArenaCDResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stClearArenaCDResult& from);
  void MergeFrom(const stClearArenaCDResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stClearArenaCDResult_eResult eResult;
  static const eResult eSuccess = stClearArenaCDResult_eResult_eSuccess;
  static const eResult eInner_Error = stClearArenaCDResult_eResult_eInner_Error;
  static const eResult eDiamond_Not_Enough = stClearArenaCDResult_eResult_eDiamond_Not_Enough;
  static inline bool eResult_IsValid(int value) {
    return stClearArenaCDResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stClearArenaCDResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stClearArenaCDResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stClearArenaCDResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stClearArenaCDResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stClearArenaCDResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stClearArenaCDResult_eResult_Parse(name, value);
  }

  typedef stClearArenaCDResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stClearArenaCDResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stClearArenaCDResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stClearArenaCDResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stClearArenaCDResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stClearArenaCDResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stClearArenaCDResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stClearArenaCDResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stClearArenaCDResult_ProtoModID_Parse(name, value);
  }

  typedef stClearArenaCDResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stClearArenaCDResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stClearArenaCDResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stClearArenaCDResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stClearArenaCDResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stClearArenaCDResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stClearArenaCDResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stClearArenaCDResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stClearArenaCDResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stClearArenaCDResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stClearArenaCDResult_eResult result() const;
  inline void set_result(::SortProto::stClearArenaCDResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stClearArenaCDResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stClearArenaCDResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenSvrBPRank : public ::google::protobuf::Message {
 public:
  stReqOpenSvrBPRank();
  virtual ~stReqOpenSvrBPRank();

  stReqOpenSvrBPRank(const stReqOpenSvrBPRank& from);

  inline stReqOpenSvrBPRank& operator=(const stReqOpenSvrBPRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenSvrBPRank& default_instance();

  void Swap(stReqOpenSvrBPRank* other);

  // implements Message ----------------------------------------------

  stReqOpenSvrBPRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenSvrBPRank& from);
  void MergeFrom(const stReqOpenSvrBPRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenSvrBPRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenSvrBPRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenSvrBPRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenSvrBPRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenSvrBPRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenSvrBPRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenSvrBPRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenSvrBPRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenSvrBPRank_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenSvrBPRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenSvrBPRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenSvrBPRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenSvrBPRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenSvrBPRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenSvrBPRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenSvrBPRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenSvrBPRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenSvrBPRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqOpenSvrBPRank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenSvrBPRank* default_instance_;
};
// -------------------------------------------------------------------

class stBPRankItemInfo : public ::google::protobuf::Message {
 public:
  stBPRankItemInfo();
  virtual ~stBPRankItemInfo();

  stBPRankItemInfo(const stBPRankItemInfo& from);

  inline stBPRankItemInfo& operator=(const stBPRankItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBPRankItemInfo& default_instance();

  void Swap(stBPRankItemInfo* other);

  // implements Message ----------------------------------------------

  stBPRankItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBPRankItemInfo& from);
  void MergeFrom(const stBPRankItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 bpVal = 6;
  inline bool has_bpval() const;
  inline void clear_bpval();
  static const int kBpValFieldNumber = 6;
  inline ::google::protobuf::uint32 bpval() const;
  inline void set_bpval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stBPRankItemInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_bpval();
  inline void clear_has_bpval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 bpval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stBPRankItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetOpenSvrBPRank : public ::google::protobuf::Message {
 public:
  stRetOpenSvrBPRank();
  virtual ~stRetOpenSvrBPRank();

  stRetOpenSvrBPRank(const stRetOpenSvrBPRank& from);

  inline stRetOpenSvrBPRank& operator=(const stRetOpenSvrBPRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetOpenSvrBPRank& default_instance();

  void Swap(stRetOpenSvrBPRank* other);

  // implements Message ----------------------------------------------

  stRetOpenSvrBPRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetOpenSvrBPRank& from);
  void MergeFrom(const stRetOpenSvrBPRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetOpenSvrBPRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetOpenSvrBPRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetOpenSvrBPRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetOpenSvrBPRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetOpenSvrBPRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetOpenSvrBPRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetOpenSvrBPRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetOpenSvrBPRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetOpenSvrBPRank_ProtoModID_Parse(name, value);
  }

  typedef stRetOpenSvrBPRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetOpenSvrBPRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetOpenSvrBPRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetOpenSvrBPRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetOpenSvrBPRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetOpenSvrBPRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetOpenSvrBPRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetOpenSvrBPRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetOpenSvrBPRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stBPRankItemInfo items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::SortProto::stBPRankItemInfo& items(int index) const;
  inline ::SortProto::stBPRankItemInfo* mutable_items(int index);
  inline ::SortProto::stBPRankItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stBPRankItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stBPRankItemInfo >*
      mutable_items();

  // optional uint32 openSvrTime = 2;
  inline bool has_opensvrtime() const;
  inline void clear_opensvrtime();
  static const int kOpenSvrTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 opensvrtime() const;
  inline void set_opensvrtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetOpenSvrBPRank)
 private:
  inline void set_has_opensvrtime();
  inline void clear_has_opensvrtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stBPRankItemInfo > items_;
  ::google::protobuf::uint32 opensvrtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetOpenSvrBPRank* default_instance_;
};
// -------------------------------------------------------------------

class stReqExpeditionInfo : public ::google::protobuf::Message {
 public:
  stReqExpeditionInfo();
  virtual ~stReqExpeditionInfo();

  stReqExpeditionInfo(const stReqExpeditionInfo& from);

  inline stReqExpeditionInfo& operator=(const stReqExpeditionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqExpeditionInfo& default_instance();

  void Swap(stReqExpeditionInfo* other);

  // implements Message ----------------------------------------------

  stReqExpeditionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqExpeditionInfo& from);
  void MergeFrom(const stReqExpeditionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqExpeditionInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqExpeditionInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqExpeditionInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqExpeditionInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqExpeditionInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqExpeditionInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqExpeditionInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqExpeditionInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqExpeditionInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqExpeditionInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqExpeditionInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqExpeditionInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqExpeditionInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqExpeditionInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqExpeditionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqExpeditionInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqExpeditionInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqExpeditionInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqExpeditionInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqExpeditionInfo* default_instance_;
};
// -------------------------------------------------------------------

class stExpeditionItem : public ::google::protobuf::Message {
 public:
  stExpeditionItem();
  virtual ~stExpeditionItem();

  stExpeditionItem(const stExpeditionItem& from);

  inline stExpeditionItem& operator=(const stExpeditionItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpeditionItem& default_instance();

  void Swap(stExpeditionItem* other);

  // implements Message ----------------------------------------------

  stExpeditionItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpeditionItem& from);
  void MergeFrom(const stExpeditionItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional uint32 finishTime = 2;
  inline bool has_finishtime() const;
  inline void clear_finishtime();
  static const int kFinishTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 finishtime() const;
  inline void set_finishtime(::google::protobuf::uint32 value);

  // repeated uint32 heroIds = 3;
  inline int heroids_size() const;
  inline void clear_heroids();
  static const int kHeroIdsFieldNumber = 3;
  inline ::google::protobuf::uint32 heroids(int index) const;
  inline void set_heroids(int index, ::google::protobuf::uint32 value);
  inline void add_heroids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heroids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heroids();

  // @@protoc_insertion_point(class_scope:SortProto.stExpeditionItem)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_finishtime();
  inline void clear_has_finishtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expeditionid_;
  ::google::protobuf::uint32 finishtime_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heroids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stExpeditionItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetExpeditionInfo : public ::google::protobuf::Message {
 public:
  stRetExpeditionInfo();
  virtual ~stRetExpeditionInfo();

  stRetExpeditionInfo(const stRetExpeditionInfo& from);

  inline stRetExpeditionInfo& operator=(const stRetExpeditionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetExpeditionInfo& default_instance();

  void Swap(stRetExpeditionInfo* other);

  // implements Message ----------------------------------------------

  stRetExpeditionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetExpeditionInfo& from);
  void MergeFrom(const stRetExpeditionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetExpeditionInfo_eResult eResult;
  static const eResult eSuccess = stRetExpeditionInfo_eResult_eSuccess;
  static const eResult eLvl_Limit = stRetExpeditionInfo_eResult_eLvl_Limit;
  static inline bool eResult_IsValid(int value) {
    return stRetExpeditionInfo_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetExpeditionInfo_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetExpeditionInfo_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetExpeditionInfo_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetExpeditionInfo_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetExpeditionInfo_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetExpeditionInfo_eResult_Parse(name, value);
  }

  typedef stRetExpeditionInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetExpeditionInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetExpeditionInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetExpeditionInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetExpeditionInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetExpeditionInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetExpeditionInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetExpeditionInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetExpeditionInfo_ProtoModID_Parse(name, value);
  }

  typedef stRetExpeditionInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetExpeditionInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetExpeditionInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetExpeditionInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetExpeditionInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetExpeditionInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetExpeditionInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetExpeditionInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetExpeditionInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stRetExpeditionInfo.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stRetExpeditionInfo_eResult result() const;
  inline void set_result(::SortProto::stRetExpeditionInfo_eResult value);

  // optional uint32 usedNum = 2;
  inline bool has_usednum() const;
  inline void clear_usednum();
  static const int kUsedNumFieldNumber = 2;
  inline ::google::protobuf::uint32 usednum() const;
  inline void set_usednum(::google::protobuf::uint32 value);

  // repeated .SortProto.stExpeditionItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::SortProto::stExpeditionItem& items(int index) const;
  inline ::SortProto::stExpeditionItem* mutable_items(int index);
  inline ::SortProto::stExpeditionItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SortProto.stRetExpeditionInfo)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_usednum();
  inline void clear_has_usednum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 usednum_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetExpeditionInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqExpedition : public ::google::protobuf::Message {
 public:
  stReqExpedition();
  virtual ~stReqExpedition();

  stReqExpedition(const stReqExpedition& from);

  inline stReqExpedition& operator=(const stReqExpedition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqExpedition& default_instance();

  void Swap(stReqExpedition* other);

  // implements Message ----------------------------------------------

  stReqExpedition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqExpedition& from);
  void MergeFrom(const stReqExpedition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqExpedition_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqExpedition_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqExpedition_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqExpedition_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqExpedition_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqExpedition_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqExpedition_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqExpedition_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqExpedition_ProtoModID_Parse(name, value);
  }

  typedef stReqExpedition_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqExpedition_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqExpedition_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqExpedition_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqExpedition_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqExpedition_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqExpedition_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqExpedition_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // repeated uint32 heroIds = 2;
  inline int heroids_size() const;
  inline void clear_heroids();
  static const int kHeroIdsFieldNumber = 2;
  inline ::google::protobuf::uint32 heroids(int index) const;
  inline void set_heroids(int index, ::google::protobuf::uint32 value);
  inline void add_heroids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heroids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heroids();

  // @@protoc_insertion_point(class_scope:SortProto.stReqExpedition)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heroids_;
  ::google::protobuf::uint32 expeditionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqExpedition* default_instance_;
};
// -------------------------------------------------------------------

class stRetExpedition : public ::google::protobuf::Message {
 public:
  stRetExpedition();
  virtual ~stRetExpedition();

  stRetExpedition(const stRetExpedition& from);

  inline stRetExpedition& operator=(const stRetExpedition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetExpedition& default_instance();

  void Swap(stRetExpedition* other);

  // implements Message ----------------------------------------------

  stRetExpedition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetExpedition& from);
  void MergeFrom(const stRetExpedition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetExpedition_eResult eResult;
  static const eResult eSuccess = stRetExpedition_eResult_eSuccess;
  static const eResult eHero_In_Used = stRetExpedition_eResult_eHero_In_Used;
  static const eResult eHero_Num_Limit = stRetExpedition_eResult_eHero_Num_Limit;
  static const eResult eLvl_Limit = stRetExpedition_eResult_eLvl_Limit;
  static const eResult eTime_Used_Out = stRetExpedition_eResult_eTime_Used_Out;
  static const eResult eInvalid_Id = stRetExpedition_eResult_eInvalid_Id;
  static const eResult eSame_Type = stRetExpedition_eResult_eSame_Type;
  static inline bool eResult_IsValid(int value) {
    return stRetExpedition_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetExpedition_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetExpedition_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetExpedition_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetExpedition_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetExpedition_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetExpedition_eResult_Parse(name, value);
  }

  typedef stRetExpedition_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetExpedition_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetExpedition_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetExpedition_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetExpedition_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetExpedition_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetExpedition_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetExpedition_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetExpedition_ProtoModID_Parse(name, value);
  }

  typedef stRetExpedition_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetExpedition_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetExpedition_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetExpedition_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetExpedition_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetExpedition_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetExpedition_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetExpedition_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional .SortProto.stRetExpedition.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::SortProto::stRetExpedition_eResult result() const;
  inline void set_result(::SortProto::stRetExpedition_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetExpedition)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expeditionid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetExpedition* default_instance_;
};
// -------------------------------------------------------------------

class stReqExpeditionReward : public ::google::protobuf::Message {
 public:
  stReqExpeditionReward();
  virtual ~stReqExpeditionReward();

  stReqExpeditionReward(const stReqExpeditionReward& from);

  inline stReqExpeditionReward& operator=(const stReqExpeditionReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqExpeditionReward& default_instance();

  void Swap(stReqExpeditionReward* other);

  // implements Message ----------------------------------------------

  stReqExpeditionReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqExpeditionReward& from);
  void MergeFrom(const stReqExpeditionReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqExpeditionReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqExpeditionReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqExpeditionReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqExpeditionReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqExpeditionReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqExpeditionReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqExpeditionReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqExpeditionReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqExpeditionReward_ProtoModID_Parse(name, value);
  }

  typedef stReqExpeditionReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqExpeditionReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqExpeditionReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqExpeditionReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqExpeditionReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqExpeditionReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqExpeditionReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqExpeditionReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqExpeditionReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqExpeditionReward)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expeditionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqExpeditionReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetExpeditionReward : public ::google::protobuf::Message {
 public:
  stRetExpeditionReward();
  virtual ~stRetExpeditionReward();

  stRetExpeditionReward(const stRetExpeditionReward& from);

  inline stRetExpeditionReward& operator=(const stRetExpeditionReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetExpeditionReward& default_instance();

  void Swap(stRetExpeditionReward* other);

  // implements Message ----------------------------------------------

  stRetExpeditionReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetExpeditionReward& from);
  void MergeFrom(const stRetExpeditionReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetExpeditionReward_eResult eResult;
  static const eResult eSuccess = stRetExpeditionReward_eResult_eSuccess;
  static const eResult eTime_Not_Up = stRetExpeditionReward_eResult_eTime_Not_Up;
  static const eResult eInvalid_Id = stRetExpeditionReward_eResult_eInvalid_Id;
  static inline bool eResult_IsValid(int value) {
    return stRetExpeditionReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetExpeditionReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetExpeditionReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetExpeditionReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetExpeditionReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetExpeditionReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetExpeditionReward_eResult_Parse(name, value);
  }

  typedef stRetExpeditionReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetExpeditionReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetExpeditionReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetExpeditionReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetExpeditionReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetExpeditionReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetExpeditionReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetExpeditionReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetExpeditionReward_ProtoModID_Parse(name, value);
  }

  typedef stRetExpeditionReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetExpeditionReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetExpeditionReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetExpeditionReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetExpeditionReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetExpeditionReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetExpeditionReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetExpeditionReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetExpeditionReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional .SortProto.stRetExpeditionReward.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::SortProto::stRetExpeditionReward_eResult result() const;
  inline void set_result(::SortProto::stRetExpeditionReward_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetExpeditionReward)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expeditionid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetExpeditionReward* default_instance_;
};
// -------------------------------------------------------------------

class stReqFastExpedition : public ::google::protobuf::Message {
 public:
  stReqFastExpedition();
  virtual ~stReqFastExpedition();

  stReqFastExpedition(const stReqFastExpedition& from);

  inline stReqFastExpedition& operator=(const stReqFastExpedition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqFastExpedition& default_instance();

  void Swap(stReqFastExpedition* other);

  // implements Message ----------------------------------------------

  stReqFastExpedition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqFastExpedition& from);
  void MergeFrom(const stReqFastExpedition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqFastExpedition_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqFastExpedition_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqFastExpedition_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqFastExpedition_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqFastExpedition_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqFastExpedition_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqFastExpedition_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqFastExpedition_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqFastExpedition_ProtoModID_Parse(name, value);
  }

  typedef stReqFastExpedition_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqFastExpedition_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqFastExpedition_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqFastExpedition_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqFastExpedition_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqFastExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqFastExpedition_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqFastExpedition_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqFastExpedition_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqFastExpedition)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expeditionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqFastExpedition* default_instance_;
};
// -------------------------------------------------------------------

class stRetFastExpedition : public ::google::protobuf::Message {
 public:
  stRetFastExpedition();
  virtual ~stRetFastExpedition();

  stRetFastExpedition(const stRetFastExpedition& from);

  inline stRetFastExpedition& operator=(const stRetFastExpedition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetFastExpedition& default_instance();

  void Swap(stRetFastExpedition* other);

  // implements Message ----------------------------------------------

  stRetFastExpedition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetFastExpedition& from);
  void MergeFrom(const stRetFastExpedition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetFastExpedition_eResult eResult;
  static const eResult eSuccess = stRetFastExpedition_eResult_eSuccess;
  static const eResult eTime_Out = stRetFastExpedition_eResult_eTime_Out;
  static const eResult eInvalid_Id = stRetFastExpedition_eResult_eInvalid_Id;
  static const eResult eLess_Of_Diamond = stRetFastExpedition_eResult_eLess_Of_Diamond;
  static inline bool eResult_IsValid(int value) {
    return stRetFastExpedition_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetFastExpedition_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetFastExpedition_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetFastExpedition_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetFastExpedition_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetFastExpedition_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetFastExpedition_eResult_Parse(name, value);
  }

  typedef stRetFastExpedition_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetFastExpedition_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetFastExpedition_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetFastExpedition_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetFastExpedition_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetFastExpedition_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetFastExpedition_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetFastExpedition_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetFastExpedition_ProtoModID_Parse(name, value);
  }

  typedef stRetFastExpedition_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetFastExpedition_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetFastExpedition_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetFastExpedition_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetFastExpedition_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetFastExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetFastExpedition_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetFastExpedition_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetFastExpedition_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional .SortProto.stRetFastExpedition.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::SortProto::stRetFastExpedition_eResult result() const;
  inline void set_result(::SortProto::stRetFastExpedition_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetFastExpedition)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expeditionid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetFastExpedition* default_instance_;
};
// -------------------------------------------------------------------

class stReqCancelExpedition : public ::google::protobuf::Message {
 public:
  stReqCancelExpedition();
  virtual ~stReqCancelExpedition();

  stReqCancelExpedition(const stReqCancelExpedition& from);

  inline stReqCancelExpedition& operator=(const stReqCancelExpedition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCancelExpedition& default_instance();

  void Swap(stReqCancelExpedition* other);

  // implements Message ----------------------------------------------

  stReqCancelExpedition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCancelExpedition& from);
  void MergeFrom(const stReqCancelExpedition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCancelExpedition_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCancelExpedition_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCancelExpedition_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCancelExpedition_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCancelExpedition_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCancelExpedition_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCancelExpedition_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCancelExpedition_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCancelExpedition_ProtoModID_Parse(name, value);
  }

  typedef stReqCancelExpedition_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCancelExpedition_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCancelExpedition_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCancelExpedition_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCancelExpedition_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCancelExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCancelExpedition_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCancelExpedition_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCancelExpedition_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqCancelExpedition)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expeditionid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqCancelExpedition* default_instance_;
};
// -------------------------------------------------------------------

class stRetCancelExpedition : public ::google::protobuf::Message {
 public:
  stRetCancelExpedition();
  virtual ~stRetCancelExpedition();

  stRetCancelExpedition(const stRetCancelExpedition& from);

  inline stRetCancelExpedition& operator=(const stRetCancelExpedition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetCancelExpedition& default_instance();

  void Swap(stRetCancelExpedition* other);

  // implements Message ----------------------------------------------

  stRetCancelExpedition* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetCancelExpedition& from);
  void MergeFrom(const stRetCancelExpedition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetCancelExpedition_eResult eResult;
  static const eResult eSuccess = stRetCancelExpedition_eResult_eSuccess;
  static const eResult eTime_Out = stRetCancelExpedition_eResult_eTime_Out;
  static const eResult eInvalid_Id = stRetCancelExpedition_eResult_eInvalid_Id;
  static inline bool eResult_IsValid(int value) {
    return stRetCancelExpedition_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetCancelExpedition_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetCancelExpedition_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetCancelExpedition_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetCancelExpedition_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetCancelExpedition_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetCancelExpedition_eResult_Parse(name, value);
  }

  typedef stRetCancelExpedition_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetCancelExpedition_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetCancelExpedition_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetCancelExpedition_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetCancelExpedition_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetCancelExpedition_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetCancelExpedition_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetCancelExpedition_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetCancelExpedition_ProtoModID_Parse(name, value);
  }

  typedef stRetCancelExpedition_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetCancelExpedition_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetCancelExpedition_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetCancelExpedition_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetCancelExpedition_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetCancelExpedition_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetCancelExpedition_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetCancelExpedition_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetCancelExpedition_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 expeditionId = 1;
  inline bool has_expeditionid() const;
  inline void clear_expeditionid();
  static const int kExpeditionIdFieldNumber = 1;
  inline ::google::protobuf::uint32 expeditionid() const;
  inline void set_expeditionid(::google::protobuf::uint32 value);

  // optional .SortProto.stRetCancelExpedition.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::SortProto::stRetCancelExpedition_eResult result() const;
  inline void set_result(::SortProto::stRetCancelExpedition_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetCancelExpedition)
 private:
  inline void set_has_expeditionid();
  inline void clear_has_expeditionid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 expeditionid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetCancelExpedition* default_instance_;
};
// -------------------------------------------------------------------

class stReqExpeditionSummary : public ::google::protobuf::Message {
 public:
  stReqExpeditionSummary();
  virtual ~stReqExpeditionSummary();

  stReqExpeditionSummary(const stReqExpeditionSummary& from);

  inline stReqExpeditionSummary& operator=(const stReqExpeditionSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqExpeditionSummary& default_instance();

  void Swap(stReqExpeditionSummary* other);

  // implements Message ----------------------------------------------

  stReqExpeditionSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqExpeditionSummary& from);
  void MergeFrom(const stReqExpeditionSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqExpeditionSummary_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqExpeditionSummary_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqExpeditionSummary_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqExpeditionSummary_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqExpeditionSummary_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqExpeditionSummary_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqExpeditionSummary_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqExpeditionSummary_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqExpeditionSummary_ProtoModID_Parse(name, value);
  }

  typedef stReqExpeditionSummary_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqExpeditionSummary_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqExpeditionSummary_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqExpeditionSummary_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqExpeditionSummary_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqExpeditionSummary_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqExpeditionSummary_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqExpeditionSummary_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqExpeditionSummary_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqExpeditionSummary)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqExpeditionSummary* default_instance_;
};
// -------------------------------------------------------------------

class stRetExpeditionSummary : public ::google::protobuf::Message {
 public:
  stRetExpeditionSummary();
  virtual ~stRetExpeditionSummary();

  stRetExpeditionSummary(const stRetExpeditionSummary& from);

  inline stRetExpeditionSummary& operator=(const stRetExpeditionSummary& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetExpeditionSummary& default_instance();

  void Swap(stRetExpeditionSummary* other);

  // implements Message ----------------------------------------------

  stRetExpeditionSummary* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetExpeditionSummary& from);
  void MergeFrom(const stRetExpeditionSummary& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetExpeditionSummary_eResult eResult;
  static const eResult eSuccess = stRetExpeditionSummary_eResult_eSuccess;
  static const eResult eLvl_Limit = stRetExpeditionSummary_eResult_eLvl_Limit;
  static inline bool eResult_IsValid(int value) {
    return stRetExpeditionSummary_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetExpeditionSummary_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetExpeditionSummary_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetExpeditionSummary_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetExpeditionSummary_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetExpeditionSummary_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetExpeditionSummary_eResult_Parse(name, value);
  }

  typedef stRetExpeditionSummary_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetExpeditionSummary_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetExpeditionSummary_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetExpeditionSummary_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetExpeditionSummary_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetExpeditionSummary_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetExpeditionSummary_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetExpeditionSummary_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetExpeditionSummary_ProtoModID_Parse(name, value);
  }

  typedef stRetExpeditionSummary_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetExpeditionSummary_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetExpeditionSummary_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetExpeditionSummary_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetExpeditionSummary_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetExpeditionSummary_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetExpeditionSummary_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetExpeditionSummary_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetExpeditionSummary_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stRetExpeditionSummary.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stRetExpeditionSummary_eResult result() const;
  inline void set_result(::SortProto::stRetExpeditionSummary_eResult value);

  // optional uint32 usedTimes = 2;
  inline bool has_usedtimes() const;
  inline void clear_usedtimes();
  static const int kUsedTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 usedtimes() const;
  inline void set_usedtimes(::google::protobuf::uint32 value);

  // repeated .SortProto.stExpeditionItem items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::SortProto::stExpeditionItem& items(int index) const;
  inline ::SortProto::stExpeditionItem* mutable_items(int index);
  inline ::SortProto::stExpeditionItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:SortProto.stRetExpeditionSummary)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_usedtimes();
  inline void clear_has_usedtimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 usedtimes_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetExpeditionSummary* default_instance_;
};
// -------------------------------------------------------------------

class stReqGloryfashionSortList : public ::google::protobuf::Message {
 public:
  stReqGloryfashionSortList();
  virtual ~stReqGloryfashionSortList();

  stReqGloryfashionSortList(const stReqGloryfashionSortList& from);

  inline stReqGloryfashionSortList& operator=(const stReqGloryfashionSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGloryfashionSortList& default_instance();

  void Swap(stReqGloryfashionSortList* other);

  // implements Message ----------------------------------------------

  stReqGloryfashionSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGloryfashionSortList& from);
  void MergeFrom(const stReqGloryfashionSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGloryfashionSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGloryfashionSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGloryfashionSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGloryfashionSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGloryfashionSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGloryfashionSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGloryfashionSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGloryfashionSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGloryfashionSortList_ProtoModID_Parse(name, value);
  }

  typedef stReqGloryfashionSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGloryfashionSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGloryfashionSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGloryfashionSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGloryfashionSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGloryfashionSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGloryfashionSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGloryfashionSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGloryfashionSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 fromRank = 1;
  inline bool has_fromrank() const;
  inline void clear_fromrank();
  static const int kFromRankFieldNumber = 1;
  inline ::google::protobuf::uint32 fromrank() const;
  inline void set_fromrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqGloryfashionSortList)
 private:
  inline void set_has_fromrank();
  inline void clear_has_fromrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fromrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqGloryfashionSortList* default_instance_;
};
// -------------------------------------------------------------------

class stGloryfashionSortList : public ::google::protobuf::Message {
 public:
  stGloryfashionSortList();
  virtual ~stGloryfashionSortList();

  stGloryfashionSortList(const stGloryfashionSortList& from);

  inline stGloryfashionSortList& operator=(const stGloryfashionSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGloryfashionSortList& default_instance();

  void Swap(stGloryfashionSortList* other);

  // implements Message ----------------------------------------------

  stGloryfashionSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGloryfashionSortList& from);
  void MergeFrom(const stGloryfashionSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGloryfashionSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGloryfashionSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGloryfashionSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGloryfashionSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGloryfashionSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGloryfashionSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGloryfashionSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGloryfashionSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGloryfashionSortList_ProtoModID_Parse(name, value);
  }

  typedef stGloryfashionSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGloryfashionSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGloryfashionSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGloryfashionSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGloryfashionSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGloryfashionSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGloryfashionSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGloryfashionSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGloryfashionSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // repeated string name = 2;
  inline int name_size() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name(int index) const;
  inline ::std::string* mutable_name(int index);
  inline void set_name(int index, const ::std::string& value);
  inline void set_name(int index, const char* value);
  inline void set_name(int index, const char* value, size_t size);
  inline ::std::string* add_name();
  inline void add_name(const ::std::string& value);
  inline void add_name(const char* value);
  inline void add_name(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& name() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_name();

  // @@protoc_insertion_point(class_scope:SortProto.stGloryfashionSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> name_;
  ::google::protobuf::uint32 beginrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stGloryfashionSortList* default_instance_;
};
// -------------------------------------------------------------------

class stReqEnterEmeraldDream : public ::google::protobuf::Message {
 public:
  stReqEnterEmeraldDream();
  virtual ~stReqEnterEmeraldDream();

  stReqEnterEmeraldDream(const stReqEnterEmeraldDream& from);

  inline stReqEnterEmeraldDream& operator=(const stReqEnterEmeraldDream& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEnterEmeraldDream& default_instance();

  void Swap(stReqEnterEmeraldDream* other);

  // implements Message ----------------------------------------------

  stReqEnterEmeraldDream* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEnterEmeraldDream& from);
  void MergeFrom(const stReqEnterEmeraldDream& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEnterEmeraldDream_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEnterEmeraldDream_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEnterEmeraldDream_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEnterEmeraldDream_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEnterEmeraldDream_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEnterEmeraldDream_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEnterEmeraldDream_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEnterEmeraldDream_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEnterEmeraldDream_ProtoModID_Parse(name, value);
  }

  typedef stReqEnterEmeraldDream_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEnterEmeraldDream_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEnterEmeraldDream_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEnterEmeraldDream_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEnterEmeraldDream_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEnterEmeraldDream_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEnterEmeraldDream_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEnterEmeraldDream_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEnterEmeraldDream_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqEnterEmeraldDream)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqEnterEmeraldDream* default_instance_;
};
// -------------------------------------------------------------------

class stEnterEmeraldDreamResult : public ::google::protobuf::Message {
 public:
  stEnterEmeraldDreamResult();
  virtual ~stEnterEmeraldDreamResult();

  stEnterEmeraldDreamResult(const stEnterEmeraldDreamResult& from);

  inline stEnterEmeraldDreamResult& operator=(const stEnterEmeraldDreamResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterEmeraldDreamResult& default_instance();

  void Swap(stEnterEmeraldDreamResult* other);

  // implements Message ----------------------------------------------

  stEnterEmeraldDreamResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterEmeraldDreamResult& from);
  void MergeFrom(const stEnterEmeraldDreamResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterEmeraldDreamResult_eResult eResult;
  static const eResult eSuccess = stEnterEmeraldDreamResult_eResult_eSuccess;
  static const eResult eLvl_Limit = stEnterEmeraldDreamResult_eResult_eLvl_Limit;
  static const eResult Fight_Num_Not_Enough = stEnterEmeraldDreamResult_eResult_Fight_Num_Not_Enough;
  static const eResult SVR_CFG_ERROR = stEnterEmeraldDreamResult_eResult_SVR_CFG_ERROR;
  static const eResult BAG_FULL = stEnterEmeraldDreamResult_eResult_BAG_FULL;
  static const eResult NOT_OPEN_TIME = stEnterEmeraldDreamResult_eResult_NOT_OPEN_TIME;
  static inline bool eResult_IsValid(int value) {
    return stEnterEmeraldDreamResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stEnterEmeraldDreamResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stEnterEmeraldDreamResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stEnterEmeraldDreamResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stEnterEmeraldDreamResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stEnterEmeraldDreamResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stEnterEmeraldDreamResult_eResult_Parse(name, value);
  }

  typedef stEnterEmeraldDreamResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterEmeraldDreamResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterEmeraldDreamResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterEmeraldDreamResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterEmeraldDreamResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterEmeraldDreamResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterEmeraldDreamResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterEmeraldDreamResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterEmeraldDreamResult_ProtoModID_Parse(name, value);
  }

  typedef stEnterEmeraldDreamResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterEmeraldDreamResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterEmeraldDreamResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterEmeraldDreamResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterEmeraldDreamResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterEmeraldDreamResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterEmeraldDreamResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterEmeraldDreamResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterEmeraldDreamResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stEnterEmeraldDreamResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stEnterEmeraldDreamResult_eResult result() const;
  inline void set_result(::SortProto::stEnterEmeraldDreamResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stEnterEmeraldDreamResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stEnterEmeraldDreamResult* default_instance_;
};
// -------------------------------------------------------------------

class stResetFightNum : public ::google::protobuf::Message {
 public:
  stResetFightNum();
  virtual ~stResetFightNum();

  stResetFightNum(const stResetFightNum& from);

  inline stResetFightNum& operator=(const stResetFightNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetFightNum& default_instance();

  void Swap(stResetFightNum* other);

  // implements Message ----------------------------------------------

  stResetFightNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetFightNum& from);
  void MergeFrom(const stResetFightNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetFightNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetFightNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetFightNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetFightNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetFightNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetFightNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetFightNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetFightNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetFightNum_ProtoModID_Parse(name, value);
  }

  typedef stResetFightNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetFightNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetFightNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetFightNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetFightNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetFightNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetFightNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetFightNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetFightNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stResetFightNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResetFightNum* default_instance_;
};
// -------------------------------------------------------------------

class stResetFightNumResult : public ::google::protobuf::Message {
 public:
  stResetFightNumResult();
  virtual ~stResetFightNumResult();

  stResetFightNumResult(const stResetFightNumResult& from);

  inline stResetFightNumResult& operator=(const stResetFightNumResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetFightNumResult& default_instance();

  void Swap(stResetFightNumResult* other);

  // implements Message ----------------------------------------------

  stResetFightNumResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetFightNumResult& from);
  void MergeFrom(const stResetFightNumResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetFightNumResult_eResult eResult;
  static const eResult SUCCESS = stResetFightNumResult_eResult_SUCCESS;
  static const eResult eGoldCoin_Not_Enough = stResetFightNumResult_eResult_eGoldCoin_Not_Enough;
  static const eResult eNot_Time_Use_Out = stResetFightNumResult_eResult_eNot_Time_Use_Out;
  static inline bool eResult_IsValid(int value) {
    return stResetFightNumResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetFightNumResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetFightNumResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetFightNumResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetFightNumResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetFightNumResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetFightNumResult_eResult_Parse(name, value);
  }

  typedef stResetFightNumResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetFightNumResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetFightNumResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetFightNumResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetFightNumResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetFightNumResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetFightNumResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetFightNumResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetFightNumResult_ProtoModID_Parse(name, value);
  }

  typedef stResetFightNumResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetFightNumResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetFightNumResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetFightNumResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetFightNumResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetFightNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetFightNumResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetFightNumResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetFightNumResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stResetFightNumResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stResetFightNumResult_eResult result() const;
  inline void set_result(::SortProto::stResetFightNumResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stResetFightNumResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResetFightNumResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqEmeraldDreamSortList : public ::google::protobuf::Message {
 public:
  stReqEmeraldDreamSortList();
  virtual ~stReqEmeraldDreamSortList();

  stReqEmeraldDreamSortList(const stReqEmeraldDreamSortList& from);

  inline stReqEmeraldDreamSortList& operator=(const stReqEmeraldDreamSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEmeraldDreamSortList& default_instance();

  void Swap(stReqEmeraldDreamSortList* other);

  // implements Message ----------------------------------------------

  stReqEmeraldDreamSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEmeraldDreamSortList& from);
  void MergeFrom(const stReqEmeraldDreamSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEmeraldDreamSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEmeraldDreamSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEmeraldDreamSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEmeraldDreamSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEmeraldDreamSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEmeraldDreamSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEmeraldDreamSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEmeraldDreamSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEmeraldDreamSortList_ProtoModID_Parse(name, value);
  }

  typedef stReqEmeraldDreamSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEmeraldDreamSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEmeraldDreamSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEmeraldDreamSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEmeraldDreamSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEmeraldDreamSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEmeraldDreamSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEmeraldDreamSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEmeraldDreamSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 fromRank = 1;
  inline bool has_fromrank() const;
  inline void clear_fromrank();
  static const int kFromRankFieldNumber = 1;
  inline ::google::protobuf::uint32 fromrank() const;
  inline void set_fromrank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqEmeraldDreamSortList)
 private:
  inline void set_has_fromrank();
  inline void clear_has_fromrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fromrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqEmeraldDreamSortList* default_instance_;
};
// -------------------------------------------------------------------

class SortListInfo : public ::google::protobuf::Message {
 public:
  SortListInfo();
  virtual ~SortListInfo();

  SortListInfo(const SortListInfo& from);

  inline SortListInfo& operator=(const SortListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SortListInfo& default_instance();

  void Swap(SortListInfo* other);

  // implements Message ----------------------------------------------

  SortListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SortListInfo& from);
  void MergeFrom(const SortListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 damage = 6;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 6;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 rank = 7;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 7;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 highest_damage = 8;
  inline bool has_highest_damage() const;
  inline void clear_highest_damage();
  static const int kHighestDamageFieldNumber = 8;
  inline ::google::protobuf::uint32 highest_damage() const;
  inline void set_highest_damage(::google::protobuf::uint32 value);

  // optional uint32 photoID = 9;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 9;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.SortListInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_highest_damage();
  inline void clear_has_highest_damage();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 highest_damage_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static SortListInfo* default_instance_;
};
// -------------------------------------------------------------------

class stEmeraldDreamSortList : public ::google::protobuf::Message {
 public:
  stEmeraldDreamSortList();
  virtual ~stEmeraldDreamSortList();

  stEmeraldDreamSortList(const stEmeraldDreamSortList& from);

  inline stEmeraldDreamSortList& operator=(const stEmeraldDreamSortList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEmeraldDreamSortList& default_instance();

  void Swap(stEmeraldDreamSortList* other);

  // implements Message ----------------------------------------------

  stEmeraldDreamSortList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEmeraldDreamSortList& from);
  void MergeFrom(const stEmeraldDreamSortList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEmeraldDreamSortList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEmeraldDreamSortList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEmeraldDreamSortList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEmeraldDreamSortList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEmeraldDreamSortList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEmeraldDreamSortList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEmeraldDreamSortList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEmeraldDreamSortList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEmeraldDreamSortList_ProtoModID_Parse(name, value);
  }

  typedef stEmeraldDreamSortList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEmeraldDreamSortList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEmeraldDreamSortList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEmeraldDreamSortList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEmeraldDreamSortList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEmeraldDreamSortList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEmeraldDreamSortList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEmeraldDreamSortList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEmeraldDreamSortList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 beginRank = 1;
  inline bool has_beginrank() const;
  inline void clear_beginrank();
  static const int kBeginRankFieldNumber = 1;
  inline ::google::protobuf::uint32 beginrank() const;
  inline void set_beginrank(::google::protobuf::uint32 value);

  // repeated .SortProto.SortListInfo info = 2;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::SortProto::SortListInfo& info(int index) const;
  inline ::SortProto::SortListInfo* mutable_info(int index);
  inline ::SortProto::SortListInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:SortProto.stEmeraldDreamSortList)
 private:
  inline void set_has_beginrank();
  inline void clear_has_beginrank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo > info_;
  ::google::protobuf::uint32 beginrank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stEmeraldDreamSortList* default_instance_;
};
// -------------------------------------------------------------------

class stSendRankInfo : public ::google::protobuf::Message {
 public:
  stSendRankInfo();
  virtual ~stSendRankInfo();

  stSendRankInfo(const stSendRankInfo& from);

  inline stSendRankInfo& operator=(const stSendRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendRankInfo& default_instance();

  void Swap(stSendRankInfo* other);

  // implements Message ----------------------------------------------

  stSendRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendRankInfo& from);
  void MergeFrom(const stSendRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendRankInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendRankInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendRankInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendRankInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendRankInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendRankInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendRankInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendRankInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendRankInfo_ProtoModID_Parse(name, value);
  }

  typedef stSendRankInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendRankInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendRankInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendRankInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendRankInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendRankInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendRankInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendRankInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendRankInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.SortListInfo myInfo = 1;
  inline int myinfo_size() const;
  inline void clear_myinfo();
  static const int kMyInfoFieldNumber = 1;
  inline const ::SortProto::SortListInfo& myinfo(int index) const;
  inline ::SortProto::SortListInfo* mutable_myinfo(int index);
  inline ::SortProto::SortListInfo* add_myinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >&
      myinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >*
      mutable_myinfo();

  // repeated .SortProto.SortListInfo rivalInfo = 2;
  inline int rivalinfo_size() const;
  inline void clear_rivalinfo();
  static const int kRivalInfoFieldNumber = 2;
  inline const ::SortProto::SortListInfo& rivalinfo(int index) const;
  inline ::SortProto::SortListInfo* mutable_rivalinfo(int index);
  inline ::SortProto::SortListInfo* add_rivalinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >&
      rivalinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >*
      mutable_rivalinfo();

  // optional bool promoted = 3;
  inline bool has_promoted() const;
  inline void clear_promoted();
  static const int kPromotedFieldNumber = 3;
  inline bool promoted() const;
  inline void set_promoted(bool value);

  // @@protoc_insertion_point(class_scope:SortProto.stSendRankInfo)
 private:
  inline void set_has_promoted();
  inline void clear_has_promoted();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo > myinfo_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo > rivalinfo_;
  bool promoted_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSendRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqSurplusNum : public ::google::protobuf::Message {
 public:
  stReqSurplusNum();
  virtual ~stReqSurplusNum();

  stReqSurplusNum(const stReqSurplusNum& from);

  inline stReqSurplusNum& operator=(const stReqSurplusNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSurplusNum& default_instance();

  void Swap(stReqSurplusNum* other);

  // implements Message ----------------------------------------------

  stReqSurplusNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSurplusNum& from);
  void MergeFrom(const stReqSurplusNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSurplusNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSurplusNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSurplusNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSurplusNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSurplusNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSurplusNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSurplusNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSurplusNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSurplusNum_ProtoModID_Parse(name, value);
  }

  typedef stReqSurplusNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSurplusNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSurplusNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSurplusNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSurplusNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSurplusNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSurplusNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSurplusNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSurplusNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqSurplusNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqSurplusNum* default_instance_;
};
// -------------------------------------------------------------------

class userSortInfo : public ::google::protobuf::Message {
 public:
  userSortInfo();
  virtual ~userSortInfo();

  userSortInfo(const userSortInfo& from);

  inline userSortInfo& operator=(const userSortInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const userSortInfo& default_instance();

  void Swap(userSortInfo* other);

  // implements Message ----------------------------------------------

  userSortInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const userSortInfo& from);
  void MergeFrom(const userSortInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:SortProto.userSortInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static userSortInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSurplusNumResult : public ::google::protobuf::Message {
 public:
  stSurplusNumResult();
  virtual ~stSurplusNumResult();

  stSurplusNumResult(const stSurplusNumResult& from);

  inline stSurplusNumResult& operator=(const stSurplusNumResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSurplusNumResult& default_instance();

  void Swap(stSurplusNumResult* other);

  // implements Message ----------------------------------------------

  stSurplusNumResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSurplusNumResult& from);
  void MergeFrom(const stSurplusNumResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSurplusNumResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSurplusNumResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSurplusNumResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSurplusNumResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSurplusNumResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSurplusNumResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSurplusNumResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSurplusNumResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSurplusNumResult_ProtoModID_Parse(name, value);
  }

  typedef stSurplusNumResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSurplusNumResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSurplusNumResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSurplusNumResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSurplusNumResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSurplusNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSurplusNumResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSurplusNumResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSurplusNumResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 damage = 2;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 2;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 rank = 3;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 3;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 resetNum = 4;
  inline bool has_resetnum() const;
  inline void clear_resetnum();
  static const int kResetNumFieldNumber = 4;
  inline ::google::protobuf::uint32 resetnum() const;
  inline void set_resetnum(::google::protobuf::uint32 value);

  // repeated .SortProto.userSortInfo info = 5;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 5;
  inline const ::SortProto::userSortInfo& info(int index) const;
  inline ::SortProto::userSortInfo* mutable_info(int index);
  inline ::SortProto::userSortInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::userSortInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::userSortInfo >*
      mutable_info();

  // optional uint32 endtime = 6;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 6;
  inline ::google::protobuf::uint32 endtime() const;
  inline void set_endtime(::google::protobuf::uint32 value);

  // optional uint32 levelID = 7;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 7;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stSurplusNumResult)
 private:
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_resetnum();
  inline void clear_has_resetnum();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 resetnum_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::userSortInfo > info_;
  ::google::protobuf::uint32 endtime_;
  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSurplusNumResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynChampionInfo : public ::google::protobuf::Message {
 public:
  stSynChampionInfo();
  virtual ~stSynChampionInfo();

  stSynChampionInfo(const stSynChampionInfo& from);

  inline stSynChampionInfo& operator=(const stSynChampionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynChampionInfo& default_instance();

  void Swap(stSynChampionInfo* other);

  // implements Message ----------------------------------------------

  stSynChampionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynChampionInfo& from);
  void MergeFrom(const stSynChampionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 areaCode = 3;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional bool leader = 7;
  inline bool has_leader() const;
  inline void clear_leader();
  static const int kLeaderFieldNumber = 7;
  inline bool leader() const;
  inline void set_leader(bool value);

  // optional uint32 battlePower = 8;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 8;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 pos = 9;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 9;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 headID = 10;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 10;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 11;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 11;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 12;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 12;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 13;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 13;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 14;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 14;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 15;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 15;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 16;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 16;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 17;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 17;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 18;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 18;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 19;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 19;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 20;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 20;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 21;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 21;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 22;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 22;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 23;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 23;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 photoID = 24;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 24;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stSynChampionInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_leader();
  inline void clear_has_leader();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  bool leader_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(24 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSynChampionInfo* default_instance_;
};
// -------------------------------------------------------------------

class stMyIntegralAndNum : public ::google::protobuf::Message {
 public:
  stMyIntegralAndNum();
  virtual ~stMyIntegralAndNum();

  stMyIntegralAndNum(const stMyIntegralAndNum& from);

  inline stMyIntegralAndNum& operator=(const stMyIntegralAndNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMyIntegralAndNum& default_instance();

  void Swap(stMyIntegralAndNum* other);

  // implements Message ----------------------------------------------

  stMyIntegralAndNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMyIntegralAndNum& from);
  void MergeFrom(const stMyIntegralAndNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stMyIntegralAndNum)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stMyIntegralAndNum* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenLeagueWindow : public ::google::protobuf::Message {
 public:
  stReqOpenLeagueWindow();
  virtual ~stReqOpenLeagueWindow();

  stReqOpenLeagueWindow(const stReqOpenLeagueWindow& from);

  inline stReqOpenLeagueWindow& operator=(const stReqOpenLeagueWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenLeagueWindow& default_instance();

  void Swap(stReqOpenLeagueWindow* other);

  // implements Message ----------------------------------------------

  stReqOpenLeagueWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenLeagueWindow& from);
  void MergeFrom(const stReqOpenLeagueWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenLeagueWindow_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenLeagueWindow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenLeagueWindow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenLeagueWindow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenLeagueWindow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenLeagueWindow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenLeagueWindow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenLeagueWindow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenLeagueWindow_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenLeagueWindow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenLeagueWindow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenLeagueWindow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenLeagueWindow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenLeagueWindow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenLeagueWindow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenLeagueWindow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenLeagueWindow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenLeagueWindow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqOpenLeagueWindow)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenLeagueWindow* default_instance_;
};
// -------------------------------------------------------------------

class stOpenLeagueWindowResult : public ::google::protobuf::Message {
 public:
  stOpenLeagueWindowResult();
  virtual ~stOpenLeagueWindowResult();

  stOpenLeagueWindowResult(const stOpenLeagueWindowResult& from);

  inline stOpenLeagueWindowResult& operator=(const stOpenLeagueWindowResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpenLeagueWindowResult& default_instance();

  void Swap(stOpenLeagueWindowResult* other);

  // implements Message ----------------------------------------------

  stOpenLeagueWindowResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpenLeagueWindowResult& from);
  void MergeFrom(const stOpenLeagueWindowResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpenLeagueWindowResult_eStatus eStatus;
  static const eStatus eQualified = stOpenLeagueWindowResult_eStatus_eQualified;
  static const eStatus eNoQualified = stOpenLeagueWindowResult_eStatus_eNoQualified;
  static inline bool eStatus_IsValid(int value) {
    return stOpenLeagueWindowResult_eStatus_IsValid(value);
  }
  static const eStatus eStatus_MIN =
    stOpenLeagueWindowResult_eStatus_eStatus_MIN;
  static const eStatus eStatus_MAX =
    stOpenLeagueWindowResult_eStatus_eStatus_MAX;
  static const int eStatus_ARRAYSIZE =
    stOpenLeagueWindowResult_eStatus_eStatus_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eStatus_descriptor() {
    return stOpenLeagueWindowResult_eStatus_descriptor();
  }
  static inline const ::std::string& eStatus_Name(eStatus value) {
    return stOpenLeagueWindowResult_eStatus_Name(value);
  }
  static inline bool eStatus_Parse(const ::std::string& name,
      eStatus* value) {
    return stOpenLeagueWindowResult_eStatus_Parse(name, value);
  }

  typedef stOpenLeagueWindowResult_eSession eSession;
  static const eSession eSixteen = stOpenLeagueWindowResult_eSession_eSixteen;
  static const eSession eEight = stOpenLeagueWindowResult_eSession_eEight;
  static const eSession eFour = stOpenLeagueWindowResult_eSession_eFour;
  static const eSession eTwo = stOpenLeagueWindowResult_eSession_eTwo;
  static inline bool eSession_IsValid(int value) {
    return stOpenLeagueWindowResult_eSession_IsValid(value);
  }
  static const eSession eSession_MIN =
    stOpenLeagueWindowResult_eSession_eSession_MIN;
  static const eSession eSession_MAX =
    stOpenLeagueWindowResult_eSession_eSession_MAX;
  static const int eSession_ARRAYSIZE =
    stOpenLeagueWindowResult_eSession_eSession_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSession_descriptor() {
    return stOpenLeagueWindowResult_eSession_descriptor();
  }
  static inline const ::std::string& eSession_Name(eSession value) {
    return stOpenLeagueWindowResult_eSession_Name(value);
  }
  static inline bool eSession_Parse(const ::std::string& name,
      eSession* value) {
    return stOpenLeagueWindowResult_eSession_Parse(name, value);
  }

  typedef stOpenLeagueWindowResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpenLeagueWindowResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpenLeagueWindowResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpenLeagueWindowResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpenLeagueWindowResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpenLeagueWindowResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpenLeagueWindowResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpenLeagueWindowResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpenLeagueWindowResult_ProtoModID_Parse(name, value);
  }

  typedef stOpenLeagueWindowResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpenLeagueWindowResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpenLeagueWindowResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpenLeagueWindowResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpenLeagueWindowResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpenLeagueWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpenLeagueWindowResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpenLeagueWindowResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpenLeagueWindowResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stSynChampionInfo champion = 1;
  inline int champion_size() const;
  inline void clear_champion();
  static const int kChampionFieldNumber = 1;
  inline const ::SortProto::stSynChampionInfo& champion(int index) const;
  inline ::SortProto::stSynChampionInfo* mutable_champion(int index);
  inline ::SortProto::stSynChampionInfo* add_champion();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo >&
      champion() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo >*
      mutable_champion();

  // repeated .SortProto.stMyIntegralAndNum myInfo = 2;
  inline int myinfo_size() const;
  inline void clear_myinfo();
  static const int kMyInfoFieldNumber = 2;
  inline const ::SortProto::stMyIntegralAndNum& myinfo(int index) const;
  inline ::SortProto::stMyIntegralAndNum* mutable_myinfo(int index);
  inline ::SortProto::stMyIntegralAndNum* add_myinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stMyIntegralAndNum >&
      myinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stMyIntegralAndNum >*
      mutable_myinfo();

  // optional uint32 session = 3;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 3;
  inline ::google::protobuf::uint32 session() const;
  inline void set_session(::google::protobuf::uint32 value);

  // optional .SortProto.stOpenLeagueWindowResult.eStatus status = 4;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 4;
  inline ::SortProto::stOpenLeagueWindowResult_eStatus status() const;
  inline void set_status(::SortProto::stOpenLeagueWindowResult_eStatus value);

  // optional .SortProto.stOpenLeagueWindowResult.eSession esession = 5;
  inline bool has_esession() const;
  inline void clear_esession();
  static const int kEsessionFieldNumber = 5;
  inline ::SortProto::stOpenLeagueWindowResult_eSession esession() const;
  inline void set_esession(::SortProto::stOpenLeagueWindowResult_eSession value);

  // @@protoc_insertion_point(class_scope:SortProto.stOpenLeagueWindowResult)
 private:
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_esession();
  inline void clear_has_esession();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo > champion_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stMyIntegralAndNum > myinfo_;
  ::google::protobuf::uint32 session_;
  int status_;
  int esession_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stOpenLeagueWindowResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqHeroLeagueMatch : public ::google::protobuf::Message {
 public:
  stReqHeroLeagueMatch();
  virtual ~stReqHeroLeagueMatch();

  stReqHeroLeagueMatch(const stReqHeroLeagueMatch& from);

  inline stReqHeroLeagueMatch& operator=(const stReqHeroLeagueMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqHeroLeagueMatch& default_instance();

  void Swap(stReqHeroLeagueMatch* other);

  // implements Message ----------------------------------------------

  stReqHeroLeagueMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqHeroLeagueMatch& from);
  void MergeFrom(const stReqHeroLeagueMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqHeroLeagueMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqHeroLeagueMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqHeroLeagueMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqHeroLeagueMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqHeroLeagueMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqHeroLeagueMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqHeroLeagueMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqHeroLeagueMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqHeroLeagueMatch_ProtoModID_Parse(name, value);
  }

  typedef stReqHeroLeagueMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqHeroLeagueMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqHeroLeagueMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqHeroLeagueMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqHeroLeagueMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqHeroLeagueMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqHeroLeagueMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqHeroLeagueMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqHeroLeagueMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqHeroLeagueMatch* default_instance_;
};
// -------------------------------------------------------------------

class stHeroLeagueMatchResult : public ::google::protobuf::Message {
 public:
  stHeroLeagueMatchResult();
  virtual ~stHeroLeagueMatchResult();

  stHeroLeagueMatchResult(const stHeroLeagueMatchResult& from);

  inline stHeroLeagueMatchResult& operator=(const stHeroLeagueMatchResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroLeagueMatchResult& default_instance();

  void Swap(stHeroLeagueMatchResult* other);

  // implements Message ----------------------------------------------

  stHeroLeagueMatchResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroLeagueMatchResult& from);
  void MergeFrom(const stHeroLeagueMatchResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroLeagueMatchResult_eResult eResult;
  static const eResult eSucess = stHeroLeagueMatchResult_eResult_eSucess;
  static const eResult eWait = stHeroLeagueMatchResult_eResult_eWait;
  static const eResult eFail = stHeroLeagueMatchResult_eResult_eFail;
  static const eResult eNot_In_Time = stHeroLeagueMatchResult_eResult_eNot_In_Time;
  static const eResult eLv_Limit = stHeroLeagueMatchResult_eResult_eLv_Limit;
  static const eResult eRegister_Num_Lack = stHeroLeagueMatchResult_eResult_eRegister_Num_Lack;
  static const eResult eNo_Qualification = stHeroLeagueMatchResult_eResult_eNo_Qualification;
  static inline bool eResult_IsValid(int value) {
    return stHeroLeagueMatchResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stHeroLeagueMatchResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stHeroLeagueMatchResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stHeroLeagueMatchResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stHeroLeagueMatchResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stHeroLeagueMatchResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stHeroLeagueMatchResult_eResult_Parse(name, value);
  }

  typedef stHeroLeagueMatchResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroLeagueMatchResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroLeagueMatchResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroLeagueMatchResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroLeagueMatchResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroLeagueMatchResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroLeagueMatchResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroLeagueMatchResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroLeagueMatchResult_ProtoModID_Parse(name, value);
  }

  typedef stHeroLeagueMatchResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroLeagueMatchResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroLeagueMatchResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroLeagueMatchResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroLeagueMatchResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroLeagueMatchResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroLeagueMatchResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroLeagueMatchResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroLeagueMatchResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stHeroLeagueMatchResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stHeroLeagueMatchResult_eResult result() const;
  inline void set_result(::SortProto::stHeroLeagueMatchResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stHeroLeagueMatchResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stHeroLeagueMatchResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqMenberInfo : public ::google::protobuf::Message {
 public:
  stReqMenberInfo();
  virtual ~stReqMenberInfo();

  stReqMenberInfo(const stReqMenberInfo& from);

  inline stReqMenberInfo& operator=(const stReqMenberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqMenberInfo& default_instance();

  void Swap(stReqMenberInfo* other);

  // implements Message ----------------------------------------------

  stReqMenberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqMenberInfo& from);
  void MergeFrom(const stReqMenberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqMenberInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqMenberInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqMenberInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqMenberInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqMenberInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqMenberInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqMenberInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqMenberInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqMenberInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqMenberInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqMenberInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqMenberInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqMenberInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqMenberInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqMenberInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqMenberInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqMenberInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqMenberInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqMenberInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqMenberInfo* default_instance_;
};
// -------------------------------------------------------------------

class stMemberinfo : public ::google::protobuf::Message {
 public:
  stMemberinfo();
  virtual ~stMemberinfo();

  stMemberinfo(const stMemberinfo& from);

  inline stMemberinfo& operator=(const stMemberinfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMemberinfo& default_instance();

  void Swap(stMemberinfo* other);

  // implements Message ----------------------------------------------

  stMemberinfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMemberinfo& from);
  void MergeFrom(const stMemberinfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMemberinfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMemberinfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMemberinfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMemberinfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMemberinfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMemberinfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMemberinfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMemberinfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMemberinfo_ProtoModID_Parse(name, value);
  }

  typedef stMemberinfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMemberinfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMemberinfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMemberinfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMemberinfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMemberinfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMemberinfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMemberinfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMemberinfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stSynChampionInfo member = 1;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 1;
  inline const ::SortProto::stSynChampionInfo& member(int index) const;
  inline ::SortProto::stSynChampionInfo* mutable_member(int index);
  inline ::SortProto::stSynChampionInfo* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo >*
      mutable_member();

  // @@protoc_insertion_point(class_scope:SortProto.stMemberinfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo > member_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stMemberinfo* default_instance_;
};
// -------------------------------------------------------------------

class stCancelHeroLeagueMatch : public ::google::protobuf::Message {
 public:
  stCancelHeroLeagueMatch();
  virtual ~stCancelHeroLeagueMatch();

  stCancelHeroLeagueMatch(const stCancelHeroLeagueMatch& from);

  inline stCancelHeroLeagueMatch& operator=(const stCancelHeroLeagueMatch& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelHeroLeagueMatch& default_instance();

  void Swap(stCancelHeroLeagueMatch* other);

  // implements Message ----------------------------------------------

  stCancelHeroLeagueMatch* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelHeroLeagueMatch& from);
  void MergeFrom(const stCancelHeroLeagueMatch& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelHeroLeagueMatch_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelHeroLeagueMatch_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelHeroLeagueMatch_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelHeroLeagueMatch_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelHeroLeagueMatch_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelHeroLeagueMatch_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelHeroLeagueMatch_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelHeroLeagueMatch_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelHeroLeagueMatch_ProtoModID_Parse(name, value);
  }

  typedef stCancelHeroLeagueMatch_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelHeroLeagueMatch_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelHeroLeagueMatch_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelHeroLeagueMatch_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelHeroLeagueMatch_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelHeroLeagueMatch_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelHeroLeagueMatch_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelHeroLeagueMatch_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelHeroLeagueMatch_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stCancelHeroLeagueMatch)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stCancelHeroLeagueMatch* default_instance_;
};
// -------------------------------------------------------------------

class stCanceHeroLeagueResult : public ::google::protobuf::Message {
 public:
  stCanceHeroLeagueResult();
  virtual ~stCanceHeroLeagueResult();

  stCanceHeroLeagueResult(const stCanceHeroLeagueResult& from);

  inline stCanceHeroLeagueResult& operator=(const stCanceHeroLeagueResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCanceHeroLeagueResult& default_instance();

  void Swap(stCanceHeroLeagueResult* other);

  // implements Message ----------------------------------------------

  stCanceHeroLeagueResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCanceHeroLeagueResult& from);
  void MergeFrom(const stCanceHeroLeagueResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCanceHeroLeagueResult_eResult eResult;
  static const eResult eSuccess = stCanceHeroLeagueResult_eResult_eSuccess;
  static const eResult eFail = stCanceHeroLeagueResult_eResult_eFail;
  static inline bool eResult_IsValid(int value) {
    return stCanceHeroLeagueResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCanceHeroLeagueResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCanceHeroLeagueResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCanceHeroLeagueResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCanceHeroLeagueResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCanceHeroLeagueResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCanceHeroLeagueResult_eResult_Parse(name, value);
  }

  typedef stCanceHeroLeagueResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCanceHeroLeagueResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCanceHeroLeagueResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCanceHeroLeagueResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCanceHeroLeagueResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCanceHeroLeagueResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCanceHeroLeagueResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCanceHeroLeagueResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCanceHeroLeagueResult_ProtoModID_Parse(name, value);
  }

  typedef stCanceHeroLeagueResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCanceHeroLeagueResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCanceHeroLeagueResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCanceHeroLeagueResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCanceHeroLeagueResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCanceHeroLeagueResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCanceHeroLeagueResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCanceHeroLeagueResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCanceHeroLeagueResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stCanceHeroLeagueResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stCanceHeroLeagueResult_eResult result() const;
  inline void set_result(::SortProto::stCanceHeroLeagueResult_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stCanceHeroLeagueResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stCanceHeroLeagueResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqQualifiedList : public ::google::protobuf::Message {
 public:
  stReqQualifiedList();
  virtual ~stReqQualifiedList();

  stReqQualifiedList(const stReqQualifiedList& from);

  inline stReqQualifiedList& operator=(const stReqQualifiedList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqQualifiedList& default_instance();

  void Swap(stReqQualifiedList* other);

  // implements Message ----------------------------------------------

  stReqQualifiedList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqQualifiedList& from);
  void MergeFrom(const stReqQualifiedList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqQualifiedList_eSession eSession;
  static const eSession eSixteen = stReqQualifiedList_eSession_eSixteen;
  static const eSession eEight = stReqQualifiedList_eSession_eEight;
  static const eSession eFour = stReqQualifiedList_eSession_eFour;
  static const eSession eTwo = stReqQualifiedList_eSession_eTwo;
  static inline bool eSession_IsValid(int value) {
    return stReqQualifiedList_eSession_IsValid(value);
  }
  static const eSession eSession_MIN =
    stReqQualifiedList_eSession_eSession_MIN;
  static const eSession eSession_MAX =
    stReqQualifiedList_eSession_eSession_MAX;
  static const int eSession_ARRAYSIZE =
    stReqQualifiedList_eSession_eSession_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eSession_descriptor() {
    return stReqQualifiedList_eSession_descriptor();
  }
  static inline const ::std::string& eSession_Name(eSession value) {
    return stReqQualifiedList_eSession_Name(value);
  }
  static inline bool eSession_Parse(const ::std::string& name,
      eSession* value) {
    return stReqQualifiedList_eSession_Parse(name, value);
  }

  typedef stReqQualifiedList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqQualifiedList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqQualifiedList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqQualifiedList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqQualifiedList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqQualifiedList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqQualifiedList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqQualifiedList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqQualifiedList_ProtoModID_Parse(name, value);
  }

  typedef stReqQualifiedList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqQualifiedList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqQualifiedList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqQualifiedList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqQualifiedList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqQualifiedList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqQualifiedList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqQualifiedList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqQualifiedList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stReqQualifiedList.eSession type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::SortProto::stReqQualifiedList_eSession type() const;
  inline void set_type(::SortProto::stReqQualifiedList_eSession value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqQualifiedList)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqQualifiedList* default_instance_;
};
// -------------------------------------------------------------------

class stRoleBasicInfo : public ::google::protobuf::Message {
 public:
  stRoleBasicInfo();
  virtual ~stRoleBasicInfo();

  stRoleBasicInfo(const stRoleBasicInfo& from);

  inline stRoleBasicInfo& operator=(const stRoleBasicInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRoleBasicInfo& default_instance();

  void Swap(stRoleBasicInfo* other);

  // implements Message ----------------------------------------------

  stRoleBasicInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRoleBasicInfo& from);
  void MergeFrom(const stRoleBasicInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRoleBasicInfo_eCompleteState eCompleteState;
  static const eCompleteState eSTATE_WIN = stRoleBasicInfo_eCompleteState_eSTATE_WIN;
  static const eCompleteState eSTATE_LOSS = stRoleBasicInfo_eCompleteState_eSTATE_LOSS;
  static const eCompleteState esTATE_NOT_ATTEND = stRoleBasicInfo_eCompleteState_esTATE_NOT_ATTEND;
  static inline bool eCompleteState_IsValid(int value) {
    return stRoleBasicInfo_eCompleteState_IsValid(value);
  }
  static const eCompleteState eCompleteState_MIN =
    stRoleBasicInfo_eCompleteState_eCompleteState_MIN;
  static const eCompleteState eCompleteState_MAX =
    stRoleBasicInfo_eCompleteState_eCompleteState_MAX;
  static const int eCompleteState_ARRAYSIZE =
    stRoleBasicInfo_eCompleteState_eCompleteState_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eCompleteState_descriptor() {
    return stRoleBasicInfo_eCompleteState_descriptor();
  }
  static inline const ::std::string& eCompleteState_Name(eCompleteState value) {
    return stRoleBasicInfo_eCompleteState_Name(value);
  }
  static inline bool eCompleteState_Parse(const ::std::string& name,
      eCompleteState* value) {
    return stRoleBasicInfo_eCompleteState_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 areaCode = 1;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 leve = 3;
  inline bool has_leve() const;
  inline void clear_leve();
  static const int kLeveFieldNumber = 3;
  inline ::google::protobuf::uint32 leve() const;
  inline void set_leve(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 4;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 4;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional .SortProto.stRoleBasicInfo.eCompleteState winOrLoss = 8;
  inline bool has_winorloss() const;
  inline void clear_winorloss();
  static const int kWinOrLossFieldNumber = 8;
  inline ::SortProto::stRoleBasicInfo_eCompleteState winorloss() const;
  inline void set_winorloss(::SortProto::stRoleBasicInfo_eCompleteState value);

  // optional uint32 photoID = 9;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 9;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRoleBasicInfo)
 private:
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_leve();
  inline void clear_has_leve();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_winorloss();
  inline void clear_has_winorloss();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 leve_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  int winorloss_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRoleBasicInfo* default_instance_;
};
// -------------------------------------------------------------------

class stTeam : public ::google::protobuf::Message {
 public:
  stTeam();
  virtual ~stTeam();

  stTeam(const stTeam& from);

  inline stTeam& operator=(const stTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTeam& default_instance();

  void Swap(stTeam* other);

  // implements Message ----------------------------------------------

  stTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTeam& from);
  void MergeFrom(const stTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .SortProto.stRoleBasicInfo user1 = 1;
  inline bool has_user1() const;
  inline void clear_user1();
  static const int kUser1FieldNumber = 1;
  inline const ::SortProto::stRoleBasicInfo& user1() const;
  inline ::SortProto::stRoleBasicInfo* mutable_user1();
  inline ::SortProto::stRoleBasicInfo* release_user1();
  inline void set_allocated_user1(::SortProto::stRoleBasicInfo* user1);

  // optional .SortProto.stRoleBasicInfo user2 = 2;
  inline bool has_user2() const;
  inline void clear_user2();
  static const int kUser2FieldNumber = 2;
  inline const ::SortProto::stRoleBasicInfo& user2() const;
  inline ::SortProto::stRoleBasicInfo* mutable_user2();
  inline ::SortProto::stRoleBasicInfo* release_user2();
  inline void set_allocated_user2(::SortProto::stRoleBasicInfo* user2);

  // @@protoc_insertion_point(class_scope:SortProto.stTeam)
 private:
  inline void set_has_user1();
  inline void clear_has_user1();
  inline void set_has_user2();
  inline void clear_has_user2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SortProto::stRoleBasicInfo* user1_;
  ::SortProto::stRoleBasicInfo* user2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stTeam* default_instance_;
};
// -------------------------------------------------------------------

class stQualifiedListResult : public ::google::protobuf::Message {
 public:
  stQualifiedListResult();
  virtual ~stQualifiedListResult();

  stQualifiedListResult(const stQualifiedListResult& from);

  inline stQualifiedListResult& operator=(const stQualifiedListResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stQualifiedListResult& default_instance();

  void Swap(stQualifiedListResult* other);

  // implements Message ----------------------------------------------

  stQualifiedListResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stQualifiedListResult& from);
  void MergeFrom(const stQualifiedListResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stQualifiedListResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stQualifiedListResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stQualifiedListResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stQualifiedListResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stQualifiedListResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stQualifiedListResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stQualifiedListResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stQualifiedListResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stQualifiedListResult_ProtoModID_Parse(name, value);
  }

  typedef stQualifiedListResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stQualifiedListResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stQualifiedListResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stQualifiedListResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stQualifiedListResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stQualifiedListResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stQualifiedListResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stQualifiedListResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stQualifiedListResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stTeam users = 1;
  inline int users_size() const;
  inline void clear_users();
  static const int kUsersFieldNumber = 1;
  inline const ::SortProto::stTeam& users(int index) const;
  inline ::SortProto::stTeam* mutable_users(int index);
  inline ::SortProto::stTeam* add_users();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stTeam >&
      users() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stTeam >*
      mutable_users();

  // optional bool isQualified = 2;
  inline bool has_isqualified() const;
  inline void clear_isqualified();
  static const int kIsQualifiedFieldNumber = 2;
  inline bool isqualified() const;
  inline void set_isqualified(bool value);

  // @@protoc_insertion_point(class_scope:SortProto.stQualifiedListResult)
 private:
  inline void set_has_isqualified();
  inline void clear_has_isqualified();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stTeam > users_;
  bool isqualified_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stQualifiedListResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqWorship : public ::google::protobuf::Message {
 public:
  stReqWorship();
  virtual ~stReqWorship();

  stReqWorship(const stReqWorship& from);

  inline stReqWorship& operator=(const stReqWorship& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqWorship& default_instance();

  void Swap(stReqWorship* other);

  // implements Message ----------------------------------------------

  stReqWorship* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqWorship& from);
  void MergeFrom(const stReqWorship& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqWorship_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqWorship_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqWorship_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqWorship_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqWorship_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqWorship_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqWorship_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqWorship_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqWorship_ProtoModID_Parse(name, value);
  }

  typedef stReqWorship_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqWorship_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqWorship_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqWorship_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqWorship_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqWorship_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqWorship_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqWorship_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqWorship_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqWorship)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqWorship* default_instance_;
};
// -------------------------------------------------------------------

class stWorskipResult : public ::google::protobuf::Message {
 public:
  stWorskipResult();
  virtual ~stWorskipResult();

  stWorskipResult(const stWorskipResult& from);

  inline stWorskipResult& operator=(const stWorskipResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stWorskipResult& default_instance();

  void Swap(stWorskipResult* other);

  // implements Message ----------------------------------------------

  stWorskipResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stWorskipResult& from);
  void MergeFrom(const stWorskipResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stWorskipResult_eResult eResult;
  static const eResult eSuccess = stWorskipResult_eResult_eSuccess;
  static const eResult eInner_Error = stWorskipResult_eResult_eInner_Error;
  static const eResult eTimeUseOut = stWorskipResult_eResult_eTimeUseOut;
  static const eResult eNoBody = stWorskipResult_eResult_eNoBody;
  static inline bool eResult_IsValid(int value) {
    return stWorskipResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stWorskipResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stWorskipResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stWorskipResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stWorskipResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stWorskipResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stWorskipResult_eResult_Parse(name, value);
  }

  typedef stWorskipResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stWorskipResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stWorskipResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stWorskipResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stWorskipResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stWorskipResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stWorskipResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stWorskipResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stWorskipResult_ProtoModID_Parse(name, value);
  }

  typedef stWorskipResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stWorskipResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stWorskipResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stWorskipResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stWorskipResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stWorskipResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stWorskipResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stWorskipResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stWorskipResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stWorskipResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stWorskipResult_eResult result() const;
  inline void set_result(::SortProto::stWorskipResult_eResult value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stWorskipResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stWorskipResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqHeroList : public ::google::protobuf::Message {
 public:
  stReqHeroList();
  virtual ~stReqHeroList();

  stReqHeroList(const stReqHeroList& from);

  inline stReqHeroList& operator=(const stReqHeroList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqHeroList& default_instance();

  void Swap(stReqHeroList* other);

  // implements Message ----------------------------------------------

  stReqHeroList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqHeroList& from);
  void MergeFrom(const stReqHeroList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqHeroList_stType stType;
  static const stType eUpperBounds1 = stReqHeroList_stType_eUpperBounds1;
  static const stType eUpperBounds2 = stReqHeroList_stType_eUpperBounds2;
  static const stType eUpperBounds3 = stReqHeroList_stType_eUpperBounds3;
  static inline bool stType_IsValid(int value) {
    return stReqHeroList_stType_IsValid(value);
  }
  static const stType stType_MIN =
    stReqHeroList_stType_stType_MIN;
  static const stType stType_MAX =
    stReqHeroList_stType_stType_MAX;
  static const int stType_ARRAYSIZE =
    stReqHeroList_stType_stType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  stType_descriptor() {
    return stReqHeroList_stType_descriptor();
  }
  static inline const ::std::string& stType_Name(stType value) {
    return stReqHeroList_stType_Name(value);
  }
  static inline bool stType_Parse(const ::std::string& name,
      stType* value) {
    return stReqHeroList_stType_Parse(name, value);
  }

  typedef stReqHeroList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqHeroList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqHeroList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqHeroList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqHeroList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqHeroList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqHeroList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqHeroList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqHeroList_ProtoModID_Parse(name, value);
  }

  typedef stReqHeroList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqHeroList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqHeroList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqHeroList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqHeroList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqHeroList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqHeroList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqHeroList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqHeroList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stReqHeroList.stType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::SortProto::stReqHeroList_stType type() const;
  inline void set_type(::SortProto::stReqHeroList_stType value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqHeroList)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqHeroList* default_instance_;
};
// -------------------------------------------------------------------

class stRankInfo : public ::google::protobuf::Message {
 public:
  stRankInfo();
  virtual ~stRankInfo();

  stRankInfo(const stRankInfo& from);

  inline stRankInfo& operator=(const stRankInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRankInfo& default_instance();

  void Swap(stRankInfo* other);

  // implements Message ----------------------------------------------

  stRankInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRankInfo& from);
  void MergeFrom(const stRankInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 session = 1;
  inline bool has_session() const;
  inline void clear_session();
  static const int kSessionFieldNumber = 1;
  inline ::google::protobuf::uint32 session() const;
  inline void set_session(::google::protobuf::uint32 value);

  // optional uint32 rank = 2;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 2;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional uint32 charID = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 pubCharID = 4;
  inline bool has_pubcharid() const;
  inline void clear_pubcharid();
  static const int kPubCharIDFieldNumber = 4;
  inline ::google::protobuf::uint32 pubcharid() const;
  inline void set_pubcharid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 5;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 5;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional string name = 6;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 6;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 8;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 8;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 job = 9;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 9;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 10;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 10;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 11;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 11;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 photoID = 12;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 12;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRankInfo)
 private:
  inline void set_has_session();
  inline void clear_has_session();
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_pubcharid();
  inline void clear_has_pubcharid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 session_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 pubcharid_;
  ::std::string* name_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRankInfo* default_instance_;
};
// -------------------------------------------------------------------

class stHeroListResult : public ::google::protobuf::Message {
 public:
  stHeroListResult();
  virtual ~stHeroListResult();

  stHeroListResult(const stHeroListResult& from);

  inline stHeroListResult& operator=(const stHeroListResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroListResult& default_instance();

  void Swap(stHeroListResult* other);

  // implements Message ----------------------------------------------

  stHeroListResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroListResult& from);
  void MergeFrom(const stHeroListResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroListResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroListResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroListResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroListResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroListResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroListResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroListResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroListResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroListResult_ProtoModID_Parse(name, value);
  }

  typedef stHeroListResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroListResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroListResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroListResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroListResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroListResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroListResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroListResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroListResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stRankInfo user = 1;
  inline int user_size() const;
  inline void clear_user();
  static const int kUserFieldNumber = 1;
  inline const ::SortProto::stRankInfo& user(int index) const;
  inline ::SortProto::stRankInfo* mutable_user(int index);
  inline ::SortProto::stRankInfo* add_user();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stRankInfo >&
      user() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stRankInfo >*
      mutable_user();

  // @@protoc_insertion_point(class_scope:SortProto.stHeroListResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stRankInfo > user_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stHeroListResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRegister : public ::google::protobuf::Message {
 public:
  stReqRegister();
  virtual ~stReqRegister();

  stReqRegister(const stReqRegister& from);

  inline stReqRegister& operator=(const stReqRegister& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRegister& default_instance();

  void Swap(stReqRegister* other);

  // implements Message ----------------------------------------------

  stReqRegister* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRegister& from);
  void MergeFrom(const stReqRegister& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRegister_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRegister_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRegister_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRegister_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRegister_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRegister_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRegister_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRegister_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRegister_ProtoModID_Parse(name, value);
  }

  typedef stReqRegister_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRegister_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRegister_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRegister_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRegister_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRegister_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRegister_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRegister_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRegister_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqRegister)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqRegister* default_instance_;
};
// -------------------------------------------------------------------

class stRegisrerResult : public ::google::protobuf::Message {
 public:
  stRegisrerResult();
  virtual ~stRegisrerResult();

  stRegisrerResult(const stRegisrerResult& from);

  inline stRegisrerResult& operator=(const stRegisrerResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRegisrerResult& default_instance();

  void Swap(stRegisrerResult* other);

  // implements Message ----------------------------------------------

  stRegisrerResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRegisrerResult& from);
  void MergeFrom(const stRegisrerResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRegisrerResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRegisrerResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRegisrerResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRegisrerResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRegisrerResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRegisrerResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRegisrerResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRegisrerResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRegisrerResult_ProtoModID_Parse(name, value);
  }

  typedef stRegisrerResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRegisrerResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRegisrerResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRegisrerResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRegisrerResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRegisrerResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRegisrerResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRegisrerResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRegisrerResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 number = 1;
  inline bool has_number() const;
  inline void clear_number();
  static const int kNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 number() const;
  inline void set_number(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRegisrerResult)
 private:
  inline void set_has_number();
  inline void clear_has_number();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 number_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRegisrerResult* default_instance_;
};
// -------------------------------------------------------------------

class stArenaResultNotify : public ::google::protobuf::Message {
 public:
  stArenaResultNotify();
  virtual ~stArenaResultNotify();

  stArenaResultNotify(const stArenaResultNotify& from);

  inline stArenaResultNotify& operator=(const stArenaResultNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stArenaResultNotify& default_instance();

  void Swap(stArenaResultNotify* other);

  // implements Message ----------------------------------------------

  stArenaResultNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stArenaResultNotify& from);
  void MergeFrom(const stArenaResultNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stArenaResultNotify_eResult eResult;
  static const eResult WIN = stArenaResultNotify_eResult_WIN;
  static const eResult LOSE = stArenaResultNotify_eResult_LOSE;
  static const eResult TIMEOUT = stArenaResultNotify_eResult_TIMEOUT;
  static inline bool eResult_IsValid(int value) {
    return stArenaResultNotify_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stArenaResultNotify_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stArenaResultNotify_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stArenaResultNotify_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stArenaResultNotify_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stArenaResultNotify_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stArenaResultNotify_eResult_Parse(name, value);
  }

  typedef stArenaResultNotify_ProtoModID ProtoModID;
  static const ProtoModID ModID = stArenaResultNotify_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stArenaResultNotify_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stArenaResultNotify_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stArenaResultNotify_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stArenaResultNotify_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stArenaResultNotify_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stArenaResultNotify_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stArenaResultNotify_ProtoModID_Parse(name, value);
  }

  typedef stArenaResultNotify_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stArenaResultNotify_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stArenaResultNotify_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stArenaResultNotify_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stArenaResultNotify_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stArenaResultNotify_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stArenaResultNotify_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stArenaResultNotify_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stArenaResultNotify_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stArenaResultNotify.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stArenaResultNotify_eResult result() const;
  inline void set_result(::SortProto::stArenaResultNotify_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stArenaResultNotify)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stArenaResultNotify* default_instance_;
};
// -------------------------------------------------------------------

class stReqPubLogIn : public ::google::protobuf::Message {
 public:
  stReqPubLogIn();
  virtual ~stReqPubLogIn();

  stReqPubLogIn(const stReqPubLogIn& from);

  inline stReqPubLogIn& operator=(const stReqPubLogIn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPubLogIn& default_instance();

  void Swap(stReqPubLogIn* other);

  // implements Message ----------------------------------------------

  stReqPubLogIn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPubLogIn& from);
  void MergeFrom(const stReqPubLogIn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPubLogIn_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPubLogIn_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPubLogIn_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPubLogIn_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPubLogIn_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPubLogIn_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPubLogIn_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPubLogIn_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPubLogIn_ProtoModID_Parse(name, value);
  }

  typedef stReqPubLogIn_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPubLogIn_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPubLogIn_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPubLogIn_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPubLogIn_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPubLogIn_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPubLogIn_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPubLogIn_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPubLogIn_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqPubLogIn)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqPubLogIn* default_instance_;
};
// -------------------------------------------------------------------

class stReqPubLogOut : public ::google::protobuf::Message {
 public:
  stReqPubLogOut();
  virtual ~stReqPubLogOut();

  stReqPubLogOut(const stReqPubLogOut& from);

  inline stReqPubLogOut& operator=(const stReqPubLogOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqPubLogOut& default_instance();

  void Swap(stReqPubLogOut* other);

  // implements Message ----------------------------------------------

  stReqPubLogOut* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqPubLogOut& from);
  void MergeFrom(const stReqPubLogOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqPubLogOut_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqPubLogOut_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqPubLogOut_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqPubLogOut_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqPubLogOut_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqPubLogOut_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqPubLogOut_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqPubLogOut_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqPubLogOut_ProtoModID_Parse(name, value);
  }

  typedef stReqPubLogOut_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqPubLogOut_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqPubLogOut_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqPubLogOut_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqPubLogOut_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqPubLogOut_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqPubLogOut_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqPubLogOut_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqPubLogOut_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqPubLogOut)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqPubLogOut* default_instance_;
};
// -------------------------------------------------------------------

class stRemoveModel : public ::google::protobuf::Message {
 public:
  stRemoveModel();
  virtual ~stRemoveModel();

  stRemoveModel(const stRemoveModel& from);

  inline stRemoveModel& operator=(const stRemoveModel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRemoveModel& default_instance();

  void Swap(stRemoveModel* other);

  // implements Message ----------------------------------------------

  stRemoveModel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRemoveModel& from);
  void MergeFrom(const stRemoveModel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRemoveModel_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRemoveModel_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRemoveModel_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRemoveModel_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRemoveModel_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRemoveModel_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRemoveModel_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRemoveModel_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRemoveModel_ProtoModID_Parse(name, value);
  }

  typedef stRemoveModel_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRemoveModel_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRemoveModel_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRemoveModel_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRemoveModel_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRemoveModel_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRemoveModel_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRemoveModel_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRemoveModel_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRemoveModel)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRemoveModel* default_instance_;
};
// -------------------------------------------------------------------

class stLeitaiResultNotify : public ::google::protobuf::Message {
 public:
  stLeitaiResultNotify();
  virtual ~stLeitaiResultNotify();

  stLeitaiResultNotify(const stLeitaiResultNotify& from);

  inline stLeitaiResultNotify& operator=(const stLeitaiResultNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLeitaiResultNotify& default_instance();

  void Swap(stLeitaiResultNotify* other);

  // implements Message ----------------------------------------------

  stLeitaiResultNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLeitaiResultNotify& from);
  void MergeFrom(const stLeitaiResultNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLeitaiResultNotify_eResult eResult;
  static const eResult WIN = stLeitaiResultNotify_eResult_WIN;
  static const eResult LOSE = stLeitaiResultNotify_eResult_LOSE;
  static const eResult TIMEOUT = stLeitaiResultNotify_eResult_TIMEOUT;
  static inline bool eResult_IsValid(int value) {
    return stLeitaiResultNotify_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLeitaiResultNotify_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLeitaiResultNotify_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLeitaiResultNotify_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLeitaiResultNotify_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLeitaiResultNotify_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLeitaiResultNotify_eResult_Parse(name, value);
  }

  typedef stLeitaiResultNotify_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLeitaiResultNotify_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLeitaiResultNotify_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLeitaiResultNotify_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLeitaiResultNotify_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLeitaiResultNotify_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLeitaiResultNotify_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLeitaiResultNotify_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLeitaiResultNotify_ProtoModID_Parse(name, value);
  }

  typedef stLeitaiResultNotify_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLeitaiResultNotify_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLeitaiResultNotify_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLeitaiResultNotify_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLeitaiResultNotify_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLeitaiResultNotify_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLeitaiResultNotify_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLeitaiResultNotify_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLeitaiResultNotify_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stLeitaiResultNotify.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stLeitaiResultNotify_eResult result() const;
  inline void set_result(::SortProto::stLeitaiResultNotify_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stLeitaiResultNotify)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stLeitaiResultNotify* default_instance_;
};
// -------------------------------------------------------------------

class stReqRedPoint : public ::google::protobuf::Message {
 public:
  stReqRedPoint();
  virtual ~stReqRedPoint();

  stReqRedPoint(const stReqRedPoint& from);

  inline stReqRedPoint& operator=(const stReqRedPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRedPoint& default_instance();

  void Swap(stReqRedPoint* other);

  // implements Message ----------------------------------------------

  stReqRedPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRedPoint& from);
  void MergeFrom(const stReqRedPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRedPoint_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRedPoint_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRedPoint_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRedPoint_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRedPoint_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRedPoint_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRedPoint_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRedPoint_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRedPoint_ProtoModID_Parse(name, value);
  }

  typedef stReqRedPoint_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRedPoint_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRedPoint_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRedPoint_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRedPoint_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRedPoint_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRedPoint_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRedPoint_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRedPoint_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqRedPoint)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqRedPoint* default_instance_;
};
// -------------------------------------------------------------------

class stRedPointResult : public ::google::protobuf::Message {
 public:
  stRedPointResult();
  virtual ~stRedPointResult();

  stRedPointResult(const stRedPointResult& from);

  inline stRedPointResult& operator=(const stRedPointResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRedPointResult& default_instance();

  void Swap(stRedPointResult* other);

  // implements Message ----------------------------------------------

  stRedPointResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRedPointResult& from);
  void MergeFrom(const stRedPointResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRedPointResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRedPointResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRedPointResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRedPointResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRedPointResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRedPointResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRedPointResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRedPointResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRedPointResult_ProtoModID_Parse(name, value);
  }

  typedef stRedPointResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRedPointResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRedPointResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRedPointResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRedPointResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRedPointResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRedPointResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRedPointResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRedPointResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool isQualified = 1;
  inline bool has_isqualified() const;
  inline void clear_isqualified();
  static const int kIsQualifiedFieldNumber = 1;
  inline bool isqualified() const;
  inline void set_isqualified(bool value);

  // optional bool canWorship = 2;
  inline bool has_canworship() const;
  inline void clear_canworship();
  static const int kCanWorshipFieldNumber = 2;
  inline bool canworship() const;
  inline void set_canworship(bool value);

  // @@protoc_insertion_point(class_scope:SortProto.stRedPointResult)
 private:
  inline void set_has_isqualified();
  inline void clear_has_isqualified();
  inline void set_has_canworship();
  inline void clear_has_canworship();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isqualified_;
  bool canworship_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRedPointResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqDragonNest : public ::google::protobuf::Message {
 public:
  stReqDragonNest();
  virtual ~stReqDragonNest();

  stReqDragonNest(const stReqDragonNest& from);

  inline stReqDragonNest& operator=(const stReqDragonNest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDragonNest& default_instance();

  void Swap(stReqDragonNest* other);

  // implements Message ----------------------------------------------

  stReqDragonNest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDragonNest& from);
  void MergeFrom(const stReqDragonNest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDragonNest_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDragonNest_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDragonNest_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDragonNest_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDragonNest_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDragonNest_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDragonNest_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDragonNest_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDragonNest_ProtoModID_Parse(name, value);
  }

  typedef stReqDragonNest_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDragonNest_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDragonNest_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDragonNest_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDragonNest_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDragonNest_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDragonNest_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDragonNest_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqDragonNest)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqDragonNest* default_instance_;
};
// -------------------------------------------------------------------

class stRetDragonNest : public ::google::protobuf::Message {
 public:
  stRetDragonNest();
  virtual ~stRetDragonNest();

  stRetDragonNest(const stRetDragonNest& from);

  inline stRetDragonNest& operator=(const stRetDragonNest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDragonNest& default_instance();

  void Swap(stRetDragonNest* other);

  // implements Message ----------------------------------------------

  stRetDragonNest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDragonNest& from);
  void MergeFrom(const stRetDragonNest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDragonNest_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDragonNest_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDragonNest_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDragonNest_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDragonNest_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDragonNest_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDragonNest_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDragonNest_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDragonNest_ProtoModID_Parse(name, value);
  }

  typedef stRetDragonNest_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDragonNest_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDragonNest_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDragonNest_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDragonNest_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDragonNest_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDragonNest_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDragonNest_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 usedTimes = 1;
  inline bool has_usedtimes() const;
  inline void clear_usedtimes();
  static const int kUsedTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 usedtimes() const;
  inline void set_usedtimes(::google::protobuf::uint32 value);

  // optional uint32 maxTimes = 2;
  inline bool has_maxtimes() const;
  inline void clear_maxtimes();
  static const int kMaxTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 maxtimes() const;
  inline void set_maxtimes(::google::protobuf::uint32 value);

  // optional uint32 resetTimes = 3;
  inline bool has_resettimes() const;
  inline void clear_resettimes();
  static const int kResetTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 resettimes() const;
  inline void set_resettimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetDragonNest)
 private:
  inline void set_has_usedtimes();
  inline void clear_has_usedtimes();
  inline void set_has_maxtimes();
  inline void clear_has_maxtimes();
  inline void set_has_resettimes();
  inline void clear_has_resettimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 usedtimes_;
  ::google::protobuf::uint32 maxtimes_;
  ::google::protobuf::uint32 resettimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetDragonNest* default_instance_;
};
// -------------------------------------------------------------------

class stReqChallengeDragonNest : public ::google::protobuf::Message {
 public:
  stReqChallengeDragonNest();
  virtual ~stReqChallengeDragonNest();

  stReqChallengeDragonNest(const stReqChallengeDragonNest& from);

  inline stReqChallengeDragonNest& operator=(const stReqChallengeDragonNest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChallengeDragonNest& default_instance();

  void Swap(stReqChallengeDragonNest* other);

  // implements Message ----------------------------------------------

  stReqChallengeDragonNest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChallengeDragonNest& from);
  void MergeFrom(const stReqChallengeDragonNest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChallengeDragonNest_eDragonType eDragonType;
  static const eDragonType eDragon_Fire = stReqChallengeDragonNest_eDragonType_eDragon_Fire;
  static const eDragonType eDragon_Water = stReqChallengeDragonNest_eDragonType_eDragon_Water;
  static const eDragonType eDragon_Soil = stReqChallengeDragonNest_eDragonType_eDragon_Soil;
  static inline bool eDragonType_IsValid(int value) {
    return stReqChallengeDragonNest_eDragonType_IsValid(value);
  }
  static const eDragonType eDragonType_MIN =
    stReqChallengeDragonNest_eDragonType_eDragonType_MIN;
  static const eDragonType eDragonType_MAX =
    stReqChallengeDragonNest_eDragonType_eDragonType_MAX;
  static const int eDragonType_ARRAYSIZE =
    stReqChallengeDragonNest_eDragonType_eDragonType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eDragonType_descriptor() {
    return stReqChallengeDragonNest_eDragonType_descriptor();
  }
  static inline const ::std::string& eDragonType_Name(eDragonType value) {
    return stReqChallengeDragonNest_eDragonType_Name(value);
  }
  static inline bool eDragonType_Parse(const ::std::string& name,
      eDragonType* value) {
    return stReqChallengeDragonNest_eDragonType_Parse(name, value);
  }

  typedef stReqChallengeDragonNest_eDifficultyType eDifficultyType;
  static const eDifficultyType eDifficulty_Common = stReqChallengeDragonNest_eDifficultyType_eDifficulty_Common;
  static const eDifficultyType eDifficulty_Hard = stReqChallengeDragonNest_eDifficultyType_eDifficulty_Hard;
  static const eDifficultyType eDifficulty_Horrible = stReqChallengeDragonNest_eDifficultyType_eDifficulty_Horrible;
  static const eDifficultyType eDifficulty_EndDay = stReqChallengeDragonNest_eDifficultyType_eDifficulty_EndDay;
  static const eDifficultyType eDifficulty_Hell = stReqChallengeDragonNest_eDifficultyType_eDifficulty_Hell;
  static inline bool eDifficultyType_IsValid(int value) {
    return stReqChallengeDragonNest_eDifficultyType_IsValid(value);
  }
  static const eDifficultyType eDifficultyType_MIN =
    stReqChallengeDragonNest_eDifficultyType_eDifficultyType_MIN;
  static const eDifficultyType eDifficultyType_MAX =
    stReqChallengeDragonNest_eDifficultyType_eDifficultyType_MAX;
  static const int eDifficultyType_ARRAYSIZE =
    stReqChallengeDragonNest_eDifficultyType_eDifficultyType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eDifficultyType_descriptor() {
    return stReqChallengeDragonNest_eDifficultyType_descriptor();
  }
  static inline const ::std::string& eDifficultyType_Name(eDifficultyType value) {
    return stReqChallengeDragonNest_eDifficultyType_Name(value);
  }
  static inline bool eDifficultyType_Parse(const ::std::string& name,
      eDifficultyType* value) {
    return stReqChallengeDragonNest_eDifficultyType_Parse(name, value);
  }

  typedef stReqChallengeDragonNest_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChallengeDragonNest_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChallengeDragonNest_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChallengeDragonNest_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChallengeDragonNest_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChallengeDragonNest_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChallengeDragonNest_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChallengeDragonNest_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChallengeDragonNest_ProtoModID_Parse(name, value);
  }

  typedef stReqChallengeDragonNest_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChallengeDragonNest_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChallengeDragonNest_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChallengeDragonNest_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChallengeDragonNest_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChallengeDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChallengeDragonNest_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChallengeDragonNest_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChallengeDragonNest_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelId = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqChallengeDragonNest)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqChallengeDragonNest* default_instance_;
};
// -------------------------------------------------------------------

class stRetChallengeDragonNest : public ::google::protobuf::Message {
 public:
  stRetChallengeDragonNest();
  virtual ~stRetChallengeDragonNest();

  stRetChallengeDragonNest(const stRetChallengeDragonNest& from);

  inline stRetChallengeDragonNest& operator=(const stRetChallengeDragonNest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetChallengeDragonNest& default_instance();

  void Swap(stRetChallengeDragonNest* other);

  // implements Message ----------------------------------------------

  stRetChallengeDragonNest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetChallengeDragonNest& from);
  void MergeFrom(const stRetChallengeDragonNest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetChallengeDragonNest_eResult eResult;
  static const eResult eSuccess = stRetChallengeDragonNest_eResult_eSuccess;
  static const eResult eLvl_Id_Not_Exist = stRetChallengeDragonNest_eResult_eLvl_Id_Not_Exist;
  static const eResult eTime_not_Open = stRetChallengeDragonNest_eResult_eTime_not_Open;
  static const eResult eLess_Of_Challenge_Time = stRetChallengeDragonNest_eResult_eLess_Of_Challenge_Time;
  static const eResult eLess_Of_Sp = stRetChallengeDragonNest_eResult_eLess_Of_Sp;
  static const eResult eLess_Of_Lilian = stRetChallengeDragonNest_eResult_eLess_Of_Lilian;
  static const eResult eLvl_Limit = stRetChallengeDragonNest_eResult_eLvl_Limit;
  static const eResult eBag_Full = stRetChallengeDragonNest_eResult_eBag_Full;
  static const eResult ePre_Lvl_Id_Not_Pass = stRetChallengeDragonNest_eResult_ePre_Lvl_Id_Not_Pass;
  static const eResult ePre_Lvl_Id_Not_Exists = stRetChallengeDragonNest_eResult_ePre_Lvl_Id_Not_Exists;
  static inline bool eResult_IsValid(int value) {
    return stRetChallengeDragonNest_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetChallengeDragonNest_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetChallengeDragonNest_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetChallengeDragonNest_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetChallengeDragonNest_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetChallengeDragonNest_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetChallengeDragonNest_eResult_Parse(name, value);
  }

  typedef stRetChallengeDragonNest_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetChallengeDragonNest_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetChallengeDragonNest_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetChallengeDragonNest_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetChallengeDragonNest_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetChallengeDragonNest_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetChallengeDragonNest_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetChallengeDragonNest_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetChallengeDragonNest_ProtoModID_Parse(name, value);
  }

  typedef stRetChallengeDragonNest_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetChallengeDragonNest_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetChallengeDragonNest_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetChallengeDragonNest_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetChallengeDragonNest_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetChallengeDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetChallengeDragonNest_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetChallengeDragonNest_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetChallengeDragonNest_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelId = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional .SortProto.stRetChallengeDragonNest.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::SortProto::stRetChallengeDragonNest_eResult result() const;
  inline void set_result(::SortProto::stRetChallengeDragonNest_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetChallengeDragonNest)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetChallengeDragonNest* default_instance_;
};
// -------------------------------------------------------------------

class stReqResetChallengeDragonNest : public ::google::protobuf::Message {
 public:
  stReqResetChallengeDragonNest();
  virtual ~stReqResetChallengeDragonNest();

  stReqResetChallengeDragonNest(const stReqResetChallengeDragonNest& from);

  inline stReqResetChallengeDragonNest& operator=(const stReqResetChallengeDragonNest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResetChallengeDragonNest& default_instance();

  void Swap(stReqResetChallengeDragonNest* other);

  // implements Message ----------------------------------------------

  stReqResetChallengeDragonNest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResetChallengeDragonNest& from);
  void MergeFrom(const stReqResetChallengeDragonNest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResetChallengeDragonNest_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResetChallengeDragonNest_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResetChallengeDragonNest_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResetChallengeDragonNest_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResetChallengeDragonNest_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResetChallengeDragonNest_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResetChallengeDragonNest_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResetChallengeDragonNest_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResetChallengeDragonNest_ProtoModID_Parse(name, value);
  }

  typedef stReqResetChallengeDragonNest_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResetChallengeDragonNest_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResetChallengeDragonNest_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResetChallengeDragonNest_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResetChallengeDragonNest_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResetChallengeDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResetChallengeDragonNest_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResetChallengeDragonNest_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResetChallengeDragonNest_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 CharID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqResetChallengeDragonNest)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqResetChallengeDragonNest* default_instance_;
};
// -------------------------------------------------------------------

class stRetResetChallengeDragonNest : public ::google::protobuf::Message {
 public:
  stRetResetChallengeDragonNest();
  virtual ~stRetResetChallengeDragonNest();

  stRetResetChallengeDragonNest(const stRetResetChallengeDragonNest& from);

  inline stRetResetChallengeDragonNest& operator=(const stRetResetChallengeDragonNest& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetResetChallengeDragonNest& default_instance();

  void Swap(stRetResetChallengeDragonNest* other);

  // implements Message ----------------------------------------------

  stRetResetChallengeDragonNest* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetResetChallengeDragonNest& from);
  void MergeFrom(const stRetResetChallengeDragonNest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetResetChallengeDragonNest_eResult eResult;
  static const eResult eSuccess = stRetResetChallengeDragonNest_eResult_eSuccess;
  static const eResult eLess_of_Diamond = stRetResetChallengeDragonNest_eResult_eLess_of_Diamond;
  static const eResult eTimes_Remain = stRetResetChallengeDragonNest_eResult_eTimes_Remain;
  static inline bool eResult_IsValid(int value) {
    return stRetResetChallengeDragonNest_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetResetChallengeDragonNest_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetResetChallengeDragonNest_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetResetChallengeDragonNest_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetResetChallengeDragonNest_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetResetChallengeDragonNest_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetResetChallengeDragonNest_eResult_Parse(name, value);
  }

  typedef stRetResetChallengeDragonNest_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetResetChallengeDragonNest_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetResetChallengeDragonNest_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetResetChallengeDragonNest_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetResetChallengeDragonNest_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetResetChallengeDragonNest_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetResetChallengeDragonNest_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetResetChallengeDragonNest_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetResetChallengeDragonNest_ProtoModID_Parse(name, value);
  }

  typedef stRetResetChallengeDragonNest_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetResetChallengeDragonNest_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetResetChallengeDragonNest_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetResetChallengeDragonNest_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetResetChallengeDragonNest_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetResetChallengeDragonNest_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetResetChallengeDragonNest_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetResetChallengeDragonNest_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetResetChallengeDragonNest_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stRetResetChallengeDragonNest.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stRetResetChallengeDragonNest_eResult result() const;
  inline void set_result(::SortProto::stRetResetChallengeDragonNest_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetResetChallengeDragonNest)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetResetChallengeDragonNest* default_instance_;
};
// -------------------------------------------------------------------

class stReqEnterResBattle : public ::google::protobuf::Message {
 public:
  stReqEnterResBattle();
  virtual ~stReqEnterResBattle();

  stReqEnterResBattle(const stReqEnterResBattle& from);

  inline stReqEnterResBattle& operator=(const stReqEnterResBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEnterResBattle& default_instance();

  void Swap(stReqEnterResBattle* other);

  // implements Message ----------------------------------------------

  stReqEnterResBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEnterResBattle& from);
  void MergeFrom(const stReqEnterResBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEnterResBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEnterResBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEnterResBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEnterResBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEnterResBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEnterResBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEnterResBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEnterResBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEnterResBattle_ProtoModID_Parse(name, value);
  }

  typedef stReqEnterResBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEnterResBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEnterResBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEnterResBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEnterResBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEnterResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEnterResBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEnterResBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEnterResBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 copyMapLevel = 2;
  inline bool has_copymaplevel() const;
  inline void clear_copymaplevel();
  static const int kCopyMapLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 copymaplevel() const;
  inline void set_copymaplevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqEnterResBattle)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_copymaplevel();
  inline void clear_has_copymaplevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 copymaplevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqEnterResBattle* default_instance_;
};
// -------------------------------------------------------------------

class stRetEnterResBattle : public ::google::protobuf::Message {
 public:
  stRetEnterResBattle();
  virtual ~stRetEnterResBattle();

  stRetEnterResBattle(const stRetEnterResBattle& from);

  inline stRetEnterResBattle& operator=(const stRetEnterResBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetEnterResBattle& default_instance();

  void Swap(stRetEnterResBattle* other);

  // implements Message ----------------------------------------------

  stRetEnterResBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetEnterResBattle& from);
  void MergeFrom(const stRetEnterResBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetEnterResBattle_eResult eResult;
  static const eResult eSuccess = stRetEnterResBattle_eResult_eSuccess;
  static const eResult eTime_Not_Open = stRetEnterResBattle_eResult_eTime_Not_Open;
  static const eResult eNo_Such_Level = stRetEnterResBattle_eResult_eNo_Such_Level;
  static const eResult eInner_Error = stRetEnterResBattle_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stRetEnterResBattle_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetEnterResBattle_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetEnterResBattle_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetEnterResBattle_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetEnterResBattle_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetEnterResBattle_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetEnterResBattle_eResult_Parse(name, value);
  }

  typedef stRetEnterResBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetEnterResBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetEnterResBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetEnterResBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetEnterResBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetEnterResBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetEnterResBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetEnterResBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetEnterResBattle_ProtoModID_Parse(name, value);
  }

  typedef stRetEnterResBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetEnterResBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetEnterResBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetEnterResBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetEnterResBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetEnterResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetEnterResBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetEnterResBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetEnterResBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copyMapLevel = 1;
  inline bool has_copymaplevel() const;
  inline void clear_copymaplevel();
  static const int kCopyMapLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 copymaplevel() const;
  inline void set_copymaplevel(::google::protobuf::uint32 value);

  // optional .SortProto.stRetEnterResBattle.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::SortProto::stRetEnterResBattle_eResult result() const;
  inline void set_result(::SortProto::stRetEnterResBattle_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetEnterResBattle)
 private:
  inline void set_has_copymaplevel();
  inline void clear_has_copymaplevel();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymaplevel_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetEnterResBattle* default_instance_;
};
// -------------------------------------------------------------------

class stReqCurResBattleGloryRank : public ::google::protobuf::Message {
 public:
  stReqCurResBattleGloryRank();
  virtual ~stReqCurResBattleGloryRank();

  stReqCurResBattleGloryRank(const stReqCurResBattleGloryRank& from);

  inline stReqCurResBattleGloryRank& operator=(const stReqCurResBattleGloryRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCurResBattleGloryRank& default_instance();

  void Swap(stReqCurResBattleGloryRank* other);

  // implements Message ----------------------------------------------

  stReqCurResBattleGloryRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCurResBattleGloryRank& from);
  void MergeFrom(const stReqCurResBattleGloryRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCurResBattleGloryRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCurResBattleGloryRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCurResBattleGloryRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCurResBattleGloryRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCurResBattleGloryRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCurResBattleGloryRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCurResBattleGloryRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCurResBattleGloryRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCurResBattleGloryRank_ProtoModID_Parse(name, value);
  }

  typedef stReqCurResBattleGloryRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCurResBattleGloryRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCurResBattleGloryRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCurResBattleGloryRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCurResBattleGloryRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCurResBattleGloryRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCurResBattleGloryRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCurResBattleGloryRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCurResBattleGloryRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqCurResBattleGloryRank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqCurResBattleGloryRank* default_instance_;
};
// -------------------------------------------------------------------

class stResBattleGloryRankMemInfo : public ::google::protobuf::Message {
 public:
  stResBattleGloryRankMemInfo();
  virtual ~stResBattleGloryRankMemInfo();

  stResBattleGloryRankMemInfo(const stResBattleGloryRankMemInfo& from);

  inline stResBattleGloryRankMemInfo& operator=(const stResBattleGloryRankMemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResBattleGloryRankMemInfo& default_instance();

  void Swap(stResBattleGloryRankMemInfo* other);

  // implements Message ----------------------------------------------

  stResBattleGloryRankMemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResBattleGloryRankMemInfo& from);
  void MergeFrom(const stResBattleGloryRankMemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 rank = 1;
  inline bool has_rank() const;
  inline void clear_rank();
  static const int kRankFieldNumber = 1;
  inline ::google::protobuf::uint32 rank() const;
  inline void set_rank(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 charId = 3;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 3;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 4;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 4;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional uint32 killNum = 5;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 5;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 gloryVal = 6;
  inline bool has_gloryval() const;
  inline void clear_gloryval();
  static const int kGloryValFieldNumber = 6;
  inline ::google::protobuf::uint32 gloryval() const;
  inline void set_gloryval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stResBattleGloryRankMemInfo)
 private:
  inline void set_has_rank();
  inline void clear_has_rank();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_gloryval();
  inline void clear_has_gloryval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 rank_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 gloryval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResBattleGloryRankMemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetCurResBattleGloryRank : public ::google::protobuf::Message {
 public:
  stRetCurResBattleGloryRank();
  virtual ~stRetCurResBattleGloryRank();

  stRetCurResBattleGloryRank(const stRetCurResBattleGloryRank& from);

  inline stRetCurResBattleGloryRank& operator=(const stRetCurResBattleGloryRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetCurResBattleGloryRank& default_instance();

  void Swap(stRetCurResBattleGloryRank* other);

  // implements Message ----------------------------------------------

  stRetCurResBattleGloryRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetCurResBattleGloryRank& from);
  void MergeFrom(const stRetCurResBattleGloryRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetCurResBattleGloryRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetCurResBattleGloryRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetCurResBattleGloryRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetCurResBattleGloryRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetCurResBattleGloryRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetCurResBattleGloryRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetCurResBattleGloryRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetCurResBattleGloryRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetCurResBattleGloryRank_ProtoModID_Parse(name, value);
  }

  typedef stRetCurResBattleGloryRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetCurResBattleGloryRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetCurResBattleGloryRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetCurResBattleGloryRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetCurResBattleGloryRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetCurResBattleGloryRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetCurResBattleGloryRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetCurResBattleGloryRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetCurResBattleGloryRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::SortProto::stResBattleGloryRankMemInfo& member(int index) const;
  inline ::SortProto::stResBattleGloryRankMemInfo* mutable_member(int index);
  inline ::SortProto::stResBattleGloryRankMemInfo* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo >*
      mutable_member();

  // @@protoc_insertion_point(class_scope:SortProto.stRetCurResBattleGloryRank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo > member_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetCurResBattleGloryRank* default_instance_;
};
// -------------------------------------------------------------------

class stReqResBattleRank : public ::google::protobuf::Message {
 public:
  stReqResBattleRank();
  virtual ~stReqResBattleRank();

  stReqResBattleRank(const stReqResBattleRank& from);

  inline stReqResBattleRank& operator=(const stReqResBattleRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResBattleRank& default_instance();

  void Swap(stReqResBattleRank* other);

  // implements Message ----------------------------------------------

  stReqResBattleRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResBattleRank& from);
  void MergeFrom(const stReqResBattleRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResBattleRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResBattleRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResBattleRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResBattleRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResBattleRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResBattleRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResBattleRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResBattleRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResBattleRank_ProtoModID_Parse(name, value);
  }

  typedef stReqResBattleRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResBattleRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResBattleRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResBattleRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResBattleRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResBattleRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResBattleRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResBattleRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResBattleRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqResBattleRank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqResBattleRank* default_instance_;
};
// -------------------------------------------------------------------

class stRetResBattleRank : public ::google::protobuf::Message {
 public:
  stRetResBattleRank();
  virtual ~stRetResBattleRank();

  stRetResBattleRank(const stRetResBattleRank& from);

  inline stRetResBattleRank& operator=(const stRetResBattleRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetResBattleRank& default_instance();

  void Swap(stRetResBattleRank* other);

  // implements Message ----------------------------------------------

  stRetResBattleRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetResBattleRank& from);
  void MergeFrom(const stRetResBattleRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetResBattleRank_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetResBattleRank_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetResBattleRank_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetResBattleRank_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetResBattleRank_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetResBattleRank_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetResBattleRank_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetResBattleRank_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetResBattleRank_ProtoModID_Parse(name, value);
  }

  typedef stRetResBattleRank_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetResBattleRank_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetResBattleRank_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetResBattleRank_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetResBattleRank_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetResBattleRank_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetResBattleRank_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetResBattleRank_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetResBattleRank_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
  inline int member_size() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::SortProto::stResBattleGloryRankMemInfo& member(int index) const;
  inline ::SortProto::stResBattleGloryRankMemInfo* mutable_member(int index);
  inline ::SortProto::stResBattleGloryRankMemInfo* add_member();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo >&
      member() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo >*
      mutable_member();

  // @@protoc_insertion_point(class_scope:SortProto.stRetResBattleRank)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo > member_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetResBattleRank* default_instance_;
};
// -------------------------------------------------------------------

class stReqResBattleKing : public ::google::protobuf::Message {
 public:
  stReqResBattleKing();
  virtual ~stReqResBattleKing();

  stReqResBattleKing(const stReqResBattleKing& from);

  inline stReqResBattleKing& operator=(const stReqResBattleKing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResBattleKing& default_instance();

  void Swap(stReqResBattleKing* other);

  // implements Message ----------------------------------------------

  stReqResBattleKing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResBattleKing& from);
  void MergeFrom(const stReqResBattleKing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResBattleKing_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResBattleKing_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResBattleKing_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResBattleKing_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResBattleKing_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResBattleKing_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResBattleKing_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResBattleKing_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResBattleKing_ProtoModID_Parse(name, value);
  }

  typedef stReqResBattleKing_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResBattleKing_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResBattleKing_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResBattleKing_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResBattleKing_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResBattleKing_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResBattleKing_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResBattleKing_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResBattleKing_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqResBattleKing)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqResBattleKing* default_instance_;
};
// -------------------------------------------------------------------

class stResBattleRankMemInfo : public ::google::protobuf::Message {
 public:
  stResBattleRankMemInfo();
  virtual ~stResBattleRankMemInfo();

  stResBattleRankMemInfo(const stResBattleRankMemInfo& from);

  inline stResBattleRankMemInfo& operator=(const stResBattleRankMemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResBattleRankMemInfo& default_instance();

  void Swap(stResBattleRankMemInfo* other);

  // implements Message ----------------------------------------------

  stResBattleRankMemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResBattleRankMemInfo& from);
  void MergeFrom(const stResBattleRankMemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 areaCode = 3;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 3;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 7;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 7;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 killNum = 8;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 8;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 evenKillNum = 9;
  inline bool has_evenkillnum() const;
  inline void clear_evenkillnum();
  static const int kEvenKillNumFieldNumber = 9;
  inline ::google::protobuf::uint32 evenkillnum() const;
  inline void set_evenkillnum(::google::protobuf::uint32 value);

  // optional uint32 totalKillNum = 10;
  inline bool has_totalkillnum() const;
  inline void clear_totalkillnum();
  static const int kTotalKillNumFieldNumber = 10;
  inline ::google::protobuf::uint32 totalkillnum() const;
  inline void set_totalkillnum(::google::protobuf::uint32 value);

  // optional uint32 gloryVal = 11;
  inline bool has_gloryval() const;
  inline void clear_gloryval();
  static const int kGloryValFieldNumber = 11;
  inline ::google::protobuf::uint32 gloryval() const;
  inline void set_gloryval(::google::protobuf::uint32 value);

  // optional uint32 prostatedNum = 12;
  inline bool has_prostatednum() const;
  inline void clear_prostatednum();
  static const int kProstatedNumFieldNumber = 12;
  inline ::google::protobuf::uint32 prostatednum() const;
  inline void set_prostatednum(::google::protobuf::uint32 value);

  // optional uint32 headID = 13;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 13;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 14;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 14;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 15;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 15;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 16;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 16;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 17;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 17;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 18;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 18;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 19;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 19;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 20;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 20;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 21;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 21;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 22;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 22;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 23;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 23;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 24;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 24;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 effectID = 26;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 26;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 27;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 27;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stResBattleRankMemInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_evenkillnum();
  inline void clear_has_evenkillnum();
  inline void set_has_totalkillnum();
  inline void clear_has_totalkillnum();
  inline void set_has_gloryval();
  inline void clear_has_gloryval();
  inline void set_has_prostatednum();
  inline void clear_has_prostatednum();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 evenkillnum_;
  ::google::protobuf::uint32 totalkillnum_;
  ::google::protobuf::uint32 gloryval_;
  ::google::protobuf::uint32 prostatednum_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(26 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResBattleRankMemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetResBattleKing : public ::google::protobuf::Message {
 public:
  stRetResBattleKing();
  virtual ~stRetResBattleKing();

  stRetResBattleKing(const stRetResBattleKing& from);

  inline stRetResBattleKing& operator=(const stRetResBattleKing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetResBattleKing& default_instance();

  void Swap(stRetResBattleKing* other);

  // implements Message ----------------------------------------------

  stRetResBattleKing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetResBattleKing& from);
  void MergeFrom(const stRetResBattleKing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetResBattleKing_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetResBattleKing_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetResBattleKing_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetResBattleKing_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetResBattleKing_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetResBattleKing_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetResBattleKing_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetResBattleKing_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetResBattleKing_ProtoModID_Parse(name, value);
  }

  typedef stRetResBattleKing_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetResBattleKing_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetResBattleKing_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetResBattleKing_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetResBattleKing_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetResBattleKing_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetResBattleKing_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetResBattleKing_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetResBattleKing_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool existsKing = 1;
  inline bool has_existsking() const;
  inline void clear_existsking();
  static const int kExistsKingFieldNumber = 1;
  inline bool existsking() const;
  inline void set_existsking(bool value);

  // optional .SortProto.stResBattleRankMemInfo member = 2;
  inline bool has_member() const;
  inline void clear_member();
  static const int kMemberFieldNumber = 2;
  inline const ::SortProto::stResBattleRankMemInfo& member() const;
  inline ::SortProto::stResBattleRankMemInfo* mutable_member();
  inline ::SortProto::stResBattleRankMemInfo* release_member();
  inline void set_allocated_member(::SortProto::stResBattleRankMemInfo* member);

  // @@protoc_insertion_point(class_scope:SortProto.stRetResBattleKing)
 private:
  inline void set_has_existsking();
  inline void clear_has_existsking();
  inline void set_has_member();
  inline void clear_has_member();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::SortProto::stResBattleRankMemInfo* member_;
  bool existsking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetResBattleKing* default_instance_;
};
// -------------------------------------------------------------------

class stReqResBattleProstate : public ::google::protobuf::Message {
 public:
  stReqResBattleProstate();
  virtual ~stReqResBattleProstate();

  stReqResBattleProstate(const stReqResBattleProstate& from);

  inline stReqResBattleProstate& operator=(const stReqResBattleProstate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResBattleProstate& default_instance();

  void Swap(stReqResBattleProstate* other);

  // implements Message ----------------------------------------------

  stReqResBattleProstate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResBattleProstate& from);
  void MergeFrom(const stReqResBattleProstate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResBattleProstate_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResBattleProstate_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResBattleProstate_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResBattleProstate_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResBattleProstate_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResBattleProstate_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResBattleProstate_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResBattleProstate_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResBattleProstate_ProtoModID_Parse(name, value);
  }

  typedef stReqResBattleProstate_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResBattleProstate_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResBattleProstate_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResBattleProstate_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResBattleProstate_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResBattleProstate_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResBattleProstate_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResBattleProstate_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResBattleProstate_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqResBattleProstate)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqResBattleProstate* default_instance_;
};
// -------------------------------------------------------------------

class stRetResBattleProstate : public ::google::protobuf::Message {
 public:
  stRetResBattleProstate();
  virtual ~stRetResBattleProstate();

  stRetResBattleProstate(const stRetResBattleProstate& from);

  inline stRetResBattleProstate& operator=(const stRetResBattleProstate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetResBattleProstate& default_instance();

  void Swap(stRetResBattleProstate* other);

  // implements Message ----------------------------------------------

  stRetResBattleProstate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetResBattleProstate& from);
  void MergeFrom(const stRetResBattleProstate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetResBattleProstate_eResult eResult;
  static const eResult eSuccess = stRetResBattleProstate_eResult_eSuccess;
  static const eResult eAlready_Done = stRetResBattleProstate_eResult_eAlready_Done;
  static const eResult eNo_King = stRetResBattleProstate_eResult_eNo_King;
  static inline bool eResult_IsValid(int value) {
    return stRetResBattleProstate_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetResBattleProstate_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetResBattleProstate_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetResBattleProstate_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetResBattleProstate_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetResBattleProstate_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetResBattleProstate_eResult_Parse(name, value);
  }

  typedef stRetResBattleProstate_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetResBattleProstate_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetResBattleProstate_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetResBattleProstate_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetResBattleProstate_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetResBattleProstate_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetResBattleProstate_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetResBattleProstate_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetResBattleProstate_ProtoModID_Parse(name, value);
  }

  typedef stRetResBattleProstate_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetResBattleProstate_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetResBattleProstate_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetResBattleProstate_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetResBattleProstate_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetResBattleProstate_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetResBattleProstate_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetResBattleProstate_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetResBattleProstate_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stRetResBattleProstate.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stRetResBattleProstate_eResult result() const;
  inline void set_result(::SortProto::stRetResBattleProstate_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetResBattleProstate)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetResBattleProstate* default_instance_;
};
// -------------------------------------------------------------------

class stReqResBattleRelive : public ::google::protobuf::Message {
 public:
  stReqResBattleRelive();
  virtual ~stReqResBattleRelive();

  stReqResBattleRelive(const stReqResBattleRelive& from);

  inline stReqResBattleRelive& operator=(const stReqResBattleRelive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResBattleRelive& default_instance();

  void Swap(stReqResBattleRelive* other);

  // implements Message ----------------------------------------------

  stReqResBattleRelive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResBattleRelive& from);
  void MergeFrom(const stReqResBattleRelive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResBattleRelive_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResBattleRelive_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResBattleRelive_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResBattleRelive_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResBattleRelive_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResBattleRelive_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResBattleRelive_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResBattleRelive_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResBattleRelive_ProtoModID_Parse(name, value);
  }

  typedef stReqResBattleRelive_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResBattleRelive_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResBattleRelive_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResBattleRelive_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResBattleRelive_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResBattleRelive_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResBattleRelive_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResBattleRelive_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResBattleRelive_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqResBattleRelive)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqResBattleRelive* default_instance_;
};
// -------------------------------------------------------------------

class stRetResBattleRelive : public ::google::protobuf::Message {
 public:
  stRetResBattleRelive();
  virtual ~stRetResBattleRelive();

  stRetResBattleRelive(const stRetResBattleRelive& from);

  inline stRetResBattleRelive& operator=(const stRetResBattleRelive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetResBattleRelive& default_instance();

  void Swap(stRetResBattleRelive* other);

  // implements Message ----------------------------------------------

  stRetResBattleRelive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetResBattleRelive& from);
  void MergeFrom(const stRetResBattleRelive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetResBattleRelive_eResult eResult;
  static const eResult eSuccess = stRetResBattleRelive_eResult_eSuccess;
  static const eResult eLess_Of_Diamond = stRetResBattleRelive_eResult_eLess_Of_Diamond;
  static const eResult eNot_Died = stRetResBattleRelive_eResult_eNot_Died;
  static const eResult eNot_In_CopyMap = stRetResBattleRelive_eResult_eNot_In_CopyMap;
  static inline bool eResult_IsValid(int value) {
    return stRetResBattleRelive_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetResBattleRelive_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetResBattleRelive_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetResBattleRelive_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetResBattleRelive_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetResBattleRelive_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetResBattleRelive_eResult_Parse(name, value);
  }

  typedef stRetResBattleRelive_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetResBattleRelive_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetResBattleRelive_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetResBattleRelive_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetResBattleRelive_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetResBattleRelive_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetResBattleRelive_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetResBattleRelive_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetResBattleRelive_ProtoModID_Parse(name, value);
  }

  typedef stRetResBattleRelive_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetResBattleRelive_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetResBattleRelive_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetResBattleRelive_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetResBattleRelive_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetResBattleRelive_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetResBattleRelive_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetResBattleRelive_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetResBattleRelive_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stRetResBattleRelive.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stRetResBattleRelive_eResult result() const;
  inline void set_result(::SortProto::stRetResBattleRelive_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetResBattleRelive)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetResBattleRelive* default_instance_;
};
// -------------------------------------------------------------------

class stReqLeaveResBattle : public ::google::protobuf::Message {
 public:
  stReqLeaveResBattle();
  virtual ~stReqLeaveResBattle();

  stReqLeaveResBattle(const stReqLeaveResBattle& from);

  inline stReqLeaveResBattle& operator=(const stReqLeaveResBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLeaveResBattle& default_instance();

  void Swap(stReqLeaveResBattle* other);

  // implements Message ----------------------------------------------

  stReqLeaveResBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLeaveResBattle& from);
  void MergeFrom(const stReqLeaveResBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLeaveResBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLeaveResBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLeaveResBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLeaveResBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLeaveResBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLeaveResBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLeaveResBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLeaveResBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLeaveResBattle_ProtoModID_Parse(name, value);
  }

  typedef stReqLeaveResBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLeaveResBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLeaveResBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLeaveResBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLeaveResBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLeaveResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLeaveResBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLeaveResBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLeaveResBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqLeaveResBattle)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqLeaveResBattle* default_instance_;
};
// -------------------------------------------------------------------

class stRetLeaveResBattle : public ::google::protobuf::Message {
 public:
  stRetLeaveResBattle();
  virtual ~stRetLeaveResBattle();

  stRetLeaveResBattle(const stRetLeaveResBattle& from);

  inline stRetLeaveResBattle& operator=(const stRetLeaveResBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetLeaveResBattle& default_instance();

  void Swap(stRetLeaveResBattle* other);

  // implements Message ----------------------------------------------

  stRetLeaveResBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetLeaveResBattle& from);
  void MergeFrom(const stRetLeaveResBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetLeaveResBattle_eResult eResult;
  static const eResult eSuccess = stRetLeaveResBattle_eResult_eSuccess;
  static const eResult eNot_In_CopyMap = stRetLeaveResBattle_eResult_eNot_In_CopyMap;
  static inline bool eResult_IsValid(int value) {
    return stRetLeaveResBattle_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetLeaveResBattle_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetLeaveResBattle_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetLeaveResBattle_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetLeaveResBattle_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetLeaveResBattle_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetLeaveResBattle_eResult_Parse(name, value);
  }

  typedef stRetLeaveResBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetLeaveResBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetLeaveResBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetLeaveResBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetLeaveResBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetLeaveResBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetLeaveResBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetLeaveResBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetLeaveResBattle_ProtoModID_Parse(name, value);
  }

  typedef stRetLeaveResBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetLeaveResBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetLeaveResBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetLeaveResBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetLeaveResBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetLeaveResBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetLeaveResBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetLeaveResBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetLeaveResBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stRetLeaveResBattle.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stRetLeaveResBattle_eResult result() const;
  inline void set_result(::SortProto::stRetLeaveResBattle_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetLeaveResBattle)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetLeaveResBattle* default_instance_;
};
// -------------------------------------------------------------------

class stReqRecvResBattleRes : public ::google::protobuf::Message {
 public:
  stReqRecvResBattleRes();
  virtual ~stReqRecvResBattleRes();

  stReqRecvResBattleRes(const stReqRecvResBattleRes& from);

  inline stReqRecvResBattleRes& operator=(const stReqRecvResBattleRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRecvResBattleRes& default_instance();

  void Swap(stReqRecvResBattleRes* other);

  // implements Message ----------------------------------------------

  stReqRecvResBattleRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRecvResBattleRes& from);
  void MergeFrom(const stReqRecvResBattleRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRecvResBattleRes_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRecvResBattleRes_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRecvResBattleRes_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRecvResBattleRes_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRecvResBattleRes_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRecvResBattleRes_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRecvResBattleRes_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRecvResBattleRes_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRecvResBattleRes_ProtoModID_Parse(name, value);
  }

  typedef stReqRecvResBattleRes_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRecvResBattleRes_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRecvResBattleRes_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRecvResBattleRes_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRecvResBattleRes_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRecvResBattleRes_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRecvResBattleRes_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRecvResBattleRes_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRecvResBattleRes_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqRecvResBattleRes)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqRecvResBattleRes* default_instance_;
};
// -------------------------------------------------------------------

class stResBattleResItem : public ::google::protobuf::Message {
 public:
  stResBattleResItem();
  virtual ~stResBattleResItem();

  stResBattleResItem(const stResBattleResItem& from);

  inline stResBattleResItem& operator=(const stResBattleResItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResBattleResItem& default_instance();

  void Swap(stResBattleResItem* other);

  // implements Message ----------------------------------------------

  stResBattleResItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResBattleResItem& from);
  void MergeFrom(const stResBattleResItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stResBattleResItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResBattleResItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetRecvResBattleRes : public ::google::protobuf::Message {
 public:
  stRetRecvResBattleRes();
  virtual ~stRetRecvResBattleRes();

  stRetRecvResBattleRes(const stRetRecvResBattleRes& from);

  inline stRetRecvResBattleRes& operator=(const stRetRecvResBattleRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRecvResBattleRes& default_instance();

  void Swap(stRetRecvResBattleRes* other);

  // implements Message ----------------------------------------------

  stRetRecvResBattleRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRecvResBattleRes& from);
  void MergeFrom(const stRetRecvResBattleRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRecvResBattleRes_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRecvResBattleRes_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRecvResBattleRes_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRecvResBattleRes_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRecvResBattleRes_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRecvResBattleRes_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRecvResBattleRes_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRecvResBattleRes_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRecvResBattleRes_ProtoModID_Parse(name, value);
  }

  typedef stRetRecvResBattleRes_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRecvResBattleRes_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRecvResBattleRes_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRecvResBattleRes_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRecvResBattleRes_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRecvResBattleRes_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRecvResBattleRes_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRecvResBattleRes_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRecvResBattleRes_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 killNum = 1;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 1;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 streakNum = 2;
  inline bool has_streaknum() const;
  inline void clear_streaknum();
  static const int kStreakNumFieldNumber = 2;
  inline ::google::protobuf::uint32 streaknum() const;
  inline void set_streaknum(::google::protobuf::uint32 value);

  // optional uint32 gloryVal = 3;
  inline bool has_gloryval() const;
  inline void clear_gloryval();
  static const int kGloryValFieldNumber = 3;
  inline ::google::protobuf::uint32 gloryval() const;
  inline void set_gloryval(::google::protobuf::uint32 value);

  // repeated .SortProto.stResBattleResItem item = 4;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 4;
  inline const ::SortProto::stResBattleResItem& item(int index) const;
  inline ::SortProto::stResBattleResItem* mutable_item(int index);
  inline ::SortProto::stResBattleResItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleResItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleResItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:SortProto.stRetRecvResBattleRes)
 private:
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_streaknum();
  inline void clear_has_streaknum();
  inline void set_has_gloryval();
  inline void clear_has_gloryval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 streaknum_;
  ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleResItem > item_;
  ::google::protobuf::uint32 gloryval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetRecvResBattleRes* default_instance_;
};
// -------------------------------------------------------------------

class stSendResBattleStreakNum : public ::google::protobuf::Message {
 public:
  stSendResBattleStreakNum();
  virtual ~stSendResBattleStreakNum();

  stSendResBattleStreakNum(const stSendResBattleStreakNum& from);

  inline stSendResBattleStreakNum& operator=(const stSendResBattleStreakNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendResBattleStreakNum& default_instance();

  void Swap(stSendResBattleStreakNum* other);

  // implements Message ----------------------------------------------

  stSendResBattleStreakNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendResBattleStreakNum& from);
  void MergeFrom(const stSendResBattleStreakNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendResBattleStreakNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendResBattleStreakNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendResBattleStreakNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendResBattleStreakNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendResBattleStreakNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendResBattleStreakNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendResBattleStreakNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendResBattleStreakNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendResBattleStreakNum_ProtoModID_Parse(name, value);
  }

  typedef stSendResBattleStreakNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendResBattleStreakNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendResBattleStreakNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendResBattleStreakNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendResBattleStreakNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendResBattleStreakNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendResBattleStreakNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendResBattleStreakNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendResBattleStreakNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 areaCode = 2;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // optional uint32 val = 3;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 3;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stSendResBattleStreakNum)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_areacode();
  inline void clear_has_areacode();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 areacode_;
  ::google::protobuf::uint32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSendResBattleStreakNum* default_instance_;
};
// -------------------------------------------------------------------

class stSendResBattleNotice : public ::google::protobuf::Message {
 public:
  stSendResBattleNotice();
  virtual ~stSendResBattleNotice();

  stSendResBattleNotice(const stSendResBattleNotice& from);

  inline stSendResBattleNotice& operator=(const stSendResBattleNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendResBattleNotice& default_instance();

  void Swap(stSendResBattleNotice* other);

  // implements Message ----------------------------------------------

  stSendResBattleNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendResBattleNotice& from);
  void MergeFrom(const stSendResBattleNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendResBattleNotice_eNotice eNotice;
  static const eNotice eActivity_Start = stSendResBattleNotice_eNotice_eActivity_Start;
  static const eNotice eActivity_End = stSendResBattleNotice_eNotice_eActivity_End;
  static const eNotice eRes_Is_Refresh = stSendResBattleNotice_eNotice_eRes_Is_Refresh;
  static const eNotice eRes_Has_Refresh = stSendResBattleNotice_eNotice_eRes_Has_Refresh;
  static inline bool eNotice_IsValid(int value) {
    return stSendResBattleNotice_eNotice_IsValid(value);
  }
  static const eNotice eNotice_MIN =
    stSendResBattleNotice_eNotice_eNotice_MIN;
  static const eNotice eNotice_MAX =
    stSendResBattleNotice_eNotice_eNotice_MAX;
  static const int eNotice_ARRAYSIZE =
    stSendResBattleNotice_eNotice_eNotice_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eNotice_descriptor() {
    return stSendResBattleNotice_eNotice_descriptor();
  }
  static inline const ::std::string& eNotice_Name(eNotice value) {
    return stSendResBattleNotice_eNotice_Name(value);
  }
  static inline bool eNotice_Parse(const ::std::string& name,
      eNotice* value) {
    return stSendResBattleNotice_eNotice_Parse(name, value);
  }

  typedef stSendResBattleNotice_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendResBattleNotice_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendResBattleNotice_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendResBattleNotice_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendResBattleNotice_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendResBattleNotice_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendResBattleNotice_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendResBattleNotice_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendResBattleNotice_ProtoModID_Parse(name, value);
  }

  typedef stSendResBattleNotice_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendResBattleNotice_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendResBattleNotice_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendResBattleNotice_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendResBattleNotice_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendResBattleNotice_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendResBattleNotice_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendResBattleNotice_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendResBattleNotice_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stSendResBattleNotice.eNotice noticeIndex = 1;
  inline bool has_noticeindex() const;
  inline void clear_noticeindex();
  static const int kNoticeIndexFieldNumber = 1;
  inline ::SortProto::stSendResBattleNotice_eNotice noticeindex() const;
  inline void set_noticeindex(::SortProto::stSendResBattleNotice_eNotice value);

  // @@protoc_insertion_point(class_scope:SortProto.stSendResBattleNotice)
 private:
  inline void set_has_noticeindex();
  inline void clear_has_noticeindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int noticeindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stSendResBattleNotice* default_instance_;
};
// -------------------------------------------------------------------

class stNotityResBattleKillInfo : public ::google::protobuf::Message {
 public:
  stNotityResBattleKillInfo();
  virtual ~stNotityResBattleKillInfo();

  stNotityResBattleKillInfo(const stNotityResBattleKillInfo& from);

  inline stNotityResBattleKillInfo& operator=(const stNotityResBattleKillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotityResBattleKillInfo& default_instance();

  void Swap(stNotityResBattleKillInfo* other);

  // implements Message ----------------------------------------------

  stNotityResBattleKillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotityResBattleKillInfo& from);
  void MergeFrom(const stNotityResBattleKillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotityResBattleKillInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotityResBattleKillInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotityResBattleKillInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotityResBattleKillInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotityResBattleKillInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotityResBattleKillInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotityResBattleKillInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotityResBattleKillInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotityResBattleKillInfo_ProtoModID_Parse(name, value);
  }

  typedef stNotityResBattleKillInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotityResBattleKillInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotityResBattleKillInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotityResBattleKillInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotityResBattleKillInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotityResBattleKillInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotityResBattleKillInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotityResBattleKillInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotityResBattleKillInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 areaCode = 2;
  inline bool has_areacode() const;
  inline void clear_areacode();
  static const int kAreaCodeFieldNumber = 2;
  inline ::google::protobuf::uint32 areacode() const;
  inline void set_areacode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stNotityResBattleKillInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_areacode();
  inline void clear_has_areacode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 areacode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stNotityResBattleKillInfo* default_instance_;
};
// -------------------------------------------------------------------

class stBattleResRefreshItem : public ::google::protobuf::Message {
 public:
  stBattleResRefreshItem();
  virtual ~stBattleResRefreshItem();

  stBattleResRefreshItem(const stBattleResRefreshItem& from);

  inline stBattleResRefreshItem& operator=(const stBattleResRefreshItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBattleResRefreshItem& default_instance();

  void Swap(stBattleResRefreshItem* other);

  // implements Message ----------------------------------------------

  stBattleResRefreshItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBattleResRefreshItem& from);
  void MergeFrom(const stBattleResRefreshItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // optional uint32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 itemId = 5;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 5;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 collectTimes = 6;
  inline bool has_collecttimes() const;
  inline void clear_collecttimes();
  static const int kCollectTimesFieldNumber = 6;
  inline ::google::protobuf::uint32 collecttimes() const;
  inline void set_collecttimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stBattleResRefreshItem)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_collecttimes();
  inline void clear_has_collecttimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 collecttimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stBattleResRefreshItem* default_instance_;
};
// -------------------------------------------------------------------

class stNotityResBattleResRefresh : public ::google::protobuf::Message {
 public:
  stNotityResBattleResRefresh();
  virtual ~stNotityResBattleResRefresh();

  stNotityResBattleResRefresh(const stNotityResBattleResRefresh& from);

  inline stNotityResBattleResRefresh& operator=(const stNotityResBattleResRefresh& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotityResBattleResRefresh& default_instance();

  void Swap(stNotityResBattleResRefresh* other);

  // implements Message ----------------------------------------------

  stNotityResBattleResRefresh* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotityResBattleResRefresh& from);
  void MergeFrom(const stNotityResBattleResRefresh& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotityResBattleResRefresh_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotityResBattleResRefresh_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotityResBattleResRefresh_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotityResBattleResRefresh_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotityResBattleResRefresh_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotityResBattleResRefresh_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotityResBattleResRefresh_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotityResBattleResRefresh_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotityResBattleResRefresh_ProtoModID_Parse(name, value);
  }

  typedef stNotityResBattleResRefresh_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotityResBattleResRefresh_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotityResBattleResRefresh_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotityResBattleResRefresh_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotityResBattleResRefresh_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotityResBattleResRefresh_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotityResBattleResRefresh_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotityResBattleResRefresh_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotityResBattleResRefresh_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .SortProto.stBattleResRefreshItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::SortProto::stBattleResRefreshItem& item(int index) const;
  inline ::SortProto::stBattleResRefreshItem* mutable_item(int index);
  inline ::SortProto::stBattleResRefreshItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:SortProto.stNotityResBattleResRefresh)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stNotityResBattleResRefresh* default_instance_;
};
// -------------------------------------------------------------------

class stNotityResBattleResEmpty : public ::google::protobuf::Message {
 public:
  stNotityResBattleResEmpty();
  virtual ~stNotityResBattleResEmpty();

  stNotityResBattleResEmpty(const stNotityResBattleResEmpty& from);

  inline stNotityResBattleResEmpty& operator=(const stNotityResBattleResEmpty& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotityResBattleResEmpty& default_instance();

  void Swap(stNotityResBattleResEmpty* other);

  // implements Message ----------------------------------------------

  stNotityResBattleResEmpty* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotityResBattleResEmpty& from);
  void MergeFrom(const stNotityResBattleResEmpty& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotityResBattleResEmpty_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotityResBattleResEmpty_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotityResBattleResEmpty_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotityResBattleResEmpty_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotityResBattleResEmpty_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotityResBattleResEmpty_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotityResBattleResEmpty_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotityResBattleResEmpty_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotityResBattleResEmpty_ProtoModID_Parse(name, value);
  }

  typedef stNotityResBattleResEmpty_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotityResBattleResEmpty_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotityResBattleResEmpty_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotityResBattleResEmpty_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotityResBattleResEmpty_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotityResBattleResEmpty_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotityResBattleResEmpty_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotityResBattleResEmpty_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotityResBattleResEmpty_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stNotityResBattleResEmpty)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stNotityResBattleResEmpty* default_instance_;
};
// -------------------------------------------------------------------

class stNotityResBattleGlory : public ::google::protobuf::Message {
 public:
  stNotityResBattleGlory();
  virtual ~stNotityResBattleGlory();

  stNotityResBattleGlory(const stNotityResBattleGlory& from);

  inline stNotityResBattleGlory& operator=(const stNotityResBattleGlory& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotityResBattleGlory& default_instance();

  void Swap(stNotityResBattleGlory* other);

  // implements Message ----------------------------------------------

  stNotityResBattleGlory* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotityResBattleGlory& from);
  void MergeFrom(const stNotityResBattleGlory& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotityResBattleGlory_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotityResBattleGlory_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotityResBattleGlory_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotityResBattleGlory_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotityResBattleGlory_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotityResBattleGlory_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotityResBattleGlory_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotityResBattleGlory_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotityResBattleGlory_ProtoModID_Parse(name, value);
  }

  typedef stNotityResBattleGlory_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotityResBattleGlory_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotityResBattleGlory_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotityResBattleGlory_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotityResBattleGlory_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotityResBattleGlory_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotityResBattleGlory_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotityResBattleGlory_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotityResBattleGlory_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 val = 1;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 1;
  inline ::google::protobuf::uint32 val() const;
  inline void set_val(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stNotityResBattleGlory)
 private:
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stNotityResBattleGlory* default_instance_;
};
// -------------------------------------------------------------------

class stBroadCastResBattleInvite : public ::google::protobuf::Message {
 public:
  stBroadCastResBattleInvite();
  virtual ~stBroadCastResBattleInvite();

  stBroadCastResBattleInvite(const stBroadCastResBattleInvite& from);

  inline stBroadCastResBattleInvite& operator=(const stBroadCastResBattleInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBroadCastResBattleInvite& default_instance();

  void Swap(stBroadCastResBattleInvite* other);

  // implements Message ----------------------------------------------

  stBroadCastResBattleInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBroadCastResBattleInvite& from);
  void MergeFrom(const stBroadCastResBattleInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBroadCastResBattleInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBroadCastResBattleInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBroadCastResBattleInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBroadCastResBattleInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBroadCastResBattleInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBroadCastResBattleInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBroadCastResBattleInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBroadCastResBattleInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBroadCastResBattleInvite_ProtoModID_Parse(name, value);
  }

  typedef stBroadCastResBattleInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBroadCastResBattleInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBroadCastResBattleInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBroadCastResBattleInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBroadCastResBattleInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBroadCastResBattleInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBroadCastResBattleInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBroadCastResBattleInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBroadCastResBattleInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stBroadCastResBattleInvite)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stBroadCastResBattleInvite* default_instance_;
};
// -------------------------------------------------------------------

class stRetResBattleReceiveInvite : public ::google::protobuf::Message {
 public:
  stRetResBattleReceiveInvite();
  virtual ~stRetResBattleReceiveInvite();

  stRetResBattleReceiveInvite(const stRetResBattleReceiveInvite& from);

  inline stRetResBattleReceiveInvite& operator=(const stRetResBattleReceiveInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetResBattleReceiveInvite& default_instance();

  void Swap(stRetResBattleReceiveInvite* other);

  // implements Message ----------------------------------------------

  stRetResBattleReceiveInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetResBattleReceiveInvite& from);
  void MergeFrom(const stRetResBattleReceiveInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetResBattleReceiveInvite_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetResBattleReceiveInvite_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetResBattleReceiveInvite_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetResBattleReceiveInvite_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetResBattleReceiveInvite_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetResBattleReceiveInvite_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetResBattleReceiveInvite_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetResBattleReceiveInvite_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetResBattleReceiveInvite_ProtoModID_Parse(name, value);
  }

  typedef stRetResBattleReceiveInvite_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetResBattleReceiveInvite_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetResBattleReceiveInvite_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetResBattleReceiveInvite_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetResBattleReceiveInvite_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetResBattleReceiveInvite_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetResBattleReceiveInvite_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetResBattleReceiveInvite_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetResBattleReceiveInvite_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 charId = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 instanceLvl = 3;
  inline bool has_instancelvl() const;
  inline void clear_instancelvl();
  static const int kInstanceLvlFieldNumber = 3;
  inline ::google::protobuf::uint32 instancelvl() const;
  inline void set_instancelvl(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 6;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 6;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 7;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 7;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional uint32 photoID = 8;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 8;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stRetResBattleReceiveInvite)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_instancelvl();
  inline void clear_has_instancelvl();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 instancelvl_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 viplv_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetResBattleReceiveInvite* default_instance_;
};
// -------------------------------------------------------------------

class stResBattleReplyInviteJoin : public ::google::protobuf::Message {
 public:
  stResBattleReplyInviteJoin();
  virtual ~stResBattleReplyInviteJoin();

  stResBattleReplyInviteJoin(const stResBattleReplyInviteJoin& from);

  inline stResBattleReplyInviteJoin& operator=(const stResBattleReplyInviteJoin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResBattleReplyInviteJoin& default_instance();

  void Swap(stResBattleReplyInviteJoin* other);

  // implements Message ----------------------------------------------

  stResBattleReplyInviteJoin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResBattleReplyInviteJoin& from);
  void MergeFrom(const stResBattleReplyInviteJoin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResBattleReplyInviteJoin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResBattleReplyInviteJoin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResBattleReplyInviteJoin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResBattleReplyInviteJoin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResBattleReplyInviteJoin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResBattleReplyInviteJoin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResBattleReplyInviteJoin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResBattleReplyInviteJoin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResBattleReplyInviteJoin_ProtoModID_Parse(name, value);
  }

  typedef stResBattleReplyInviteJoin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResBattleReplyInviteJoin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResBattleReplyInviteJoin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResBattleReplyInviteJoin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResBattleReplyInviteJoin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResBattleReplyInviteJoin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResBattleReplyInviteJoin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResBattleReplyInviteJoin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResBattleReplyInviteJoin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool agree = 1;
  inline bool has_agree() const;
  inline void clear_agree();
  static const int kAgreeFieldNumber = 1;
  inline bool agree() const;
  inline void set_agree(bool value);

  // optional uint32 charId = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stResBattleReplyInviteJoin)
 private:
  inline void set_has_agree();
  inline void clear_has_agree();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool agree_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResBattleReplyInviteJoin* default_instance_;
};
// -------------------------------------------------------------------

class stResBattleInviteJoinRes : public ::google::protobuf::Message {
 public:
  stResBattleInviteJoinRes();
  virtual ~stResBattleInviteJoinRes();

  stResBattleInviteJoinRes(const stResBattleInviteJoinRes& from);

  inline stResBattleInviteJoinRes& operator=(const stResBattleInviteJoinRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResBattleInviteJoinRes& default_instance();

  void Swap(stResBattleInviteJoinRes* other);

  // implements Message ----------------------------------------------

  stResBattleInviteJoinRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResBattleInviteJoinRes& from);
  void MergeFrom(const stResBattleInviteJoinRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResBattleInviteJoinRes_eResult eResult;
  static const eResult TEAM_NOT_EXSIT = stResBattleInviteJoinRes_eResult_TEAM_NOT_EXSIT;
  static const eResult TEAM_FULL = stResBattleInviteJoinRes_eResult_TEAM_FULL;
  static const eResult INNER_ERROR = stResBattleInviteJoinRes_eResult_INNER_ERROR;
  static inline bool eResult_IsValid(int value) {
    return stResBattleInviteJoinRes_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResBattleInviteJoinRes_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResBattleInviteJoinRes_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResBattleInviteJoinRes_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResBattleInviteJoinRes_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResBattleInviteJoinRes_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResBattleInviteJoinRes_eResult_Parse(name, value);
  }

  typedef stResBattleInviteJoinRes_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResBattleInviteJoinRes_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResBattleInviteJoinRes_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResBattleInviteJoinRes_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResBattleInviteJoinRes_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResBattleInviteJoinRes_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResBattleInviteJoinRes_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResBattleInviteJoinRes_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResBattleInviteJoinRes_ProtoModID_Parse(name, value);
  }

  typedef stResBattleInviteJoinRes_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResBattleInviteJoinRes_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResBattleInviteJoinRes_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResBattleInviteJoinRes_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResBattleInviteJoinRes_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResBattleInviteJoinRes_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResBattleInviteJoinRes_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResBattleInviteJoinRes_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResBattleInviteJoinRes_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stResBattleInviteJoinRes.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stResBattleInviteJoinRes_eResult result() const;
  inline void set_result(::SortProto::stResBattleInviteJoinRes_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stResBattleInviteJoinRes)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResBattleInviteJoinRes* default_instance_;
};
// -------------------------------------------------------------------

class stReqStoneCopyMapInfo : public ::google::protobuf::Message {
 public:
  stReqStoneCopyMapInfo();
  virtual ~stReqStoneCopyMapInfo();

  stReqStoneCopyMapInfo(const stReqStoneCopyMapInfo& from);

  inline stReqStoneCopyMapInfo& operator=(const stReqStoneCopyMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqStoneCopyMapInfo& default_instance();

  void Swap(stReqStoneCopyMapInfo* other);

  // implements Message ----------------------------------------------

  stReqStoneCopyMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqStoneCopyMapInfo& from);
  void MergeFrom(const stReqStoneCopyMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqStoneCopyMapInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqStoneCopyMapInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqStoneCopyMapInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqStoneCopyMapInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqStoneCopyMapInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqStoneCopyMapInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqStoneCopyMapInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqStoneCopyMapInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqStoneCopyMapInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqStoneCopyMapInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqStoneCopyMapInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqStoneCopyMapInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqStoneCopyMapInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqStoneCopyMapInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqStoneCopyMapInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqStoneCopyMapInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqStoneCopyMapInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqStoneCopyMapInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqStoneCopyMapInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqStoneCopyMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class stStoneCopyMapInfoResult : public ::google::protobuf::Message {
 public:
  stStoneCopyMapInfoResult();
  virtual ~stStoneCopyMapInfoResult();

  stStoneCopyMapInfoResult(const stStoneCopyMapInfoResult& from);

  inline stStoneCopyMapInfoResult& operator=(const stStoneCopyMapInfoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stStoneCopyMapInfoResult& default_instance();

  void Swap(stStoneCopyMapInfoResult* other);

  // implements Message ----------------------------------------------

  stStoneCopyMapInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stStoneCopyMapInfoResult& from);
  void MergeFrom(const stStoneCopyMapInfoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stStoneCopyMapInfoResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stStoneCopyMapInfoResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stStoneCopyMapInfoResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stStoneCopyMapInfoResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stStoneCopyMapInfoResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stStoneCopyMapInfoResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stStoneCopyMapInfoResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stStoneCopyMapInfoResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stStoneCopyMapInfoResult_ProtoModID_Parse(name, value);
  }

  typedef stStoneCopyMapInfoResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stStoneCopyMapInfoResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stStoneCopyMapInfoResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stStoneCopyMapInfoResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stStoneCopyMapInfoResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stStoneCopyMapInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stStoneCopyMapInfoResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stStoneCopyMapInfoResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stStoneCopyMapInfoResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 usedTimes = 1;
  inline bool has_usedtimes() const;
  inline void clear_usedtimes();
  static const int kUsedTimesFieldNumber = 1;
  inline ::google::protobuf::uint32 usedtimes() const;
  inline void set_usedtimes(::google::protobuf::uint32 value);

  // optional uint32 maxTimes = 2;
  inline bool has_maxtimes() const;
  inline void clear_maxtimes();
  static const int kMaxTimesFieldNumber = 2;
  inline ::google::protobuf::uint32 maxtimes() const;
  inline void set_maxtimes(::google::protobuf::uint32 value);

  // optional uint32 resetTimes = 3;
  inline bool has_resettimes() const;
  inline void clear_resettimes();
  static const int kResetTimesFieldNumber = 3;
  inline ::google::protobuf::uint32 resettimes() const;
  inline void set_resettimes(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stStoneCopyMapInfoResult)
 private:
  inline void set_has_usedtimes();
  inline void clear_has_usedtimes();
  inline void set_has_maxtimes();
  inline void clear_has_maxtimes();
  inline void set_has_resettimes();
  inline void clear_has_resettimes();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 usedtimes_;
  ::google::protobuf::uint32 maxtimes_;
  ::google::protobuf::uint32 resettimes_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stStoneCopyMapInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqChallengeStoneCopyMap : public ::google::protobuf::Message {
 public:
  stReqChallengeStoneCopyMap();
  virtual ~stReqChallengeStoneCopyMap();

  stReqChallengeStoneCopyMap(const stReqChallengeStoneCopyMap& from);

  inline stReqChallengeStoneCopyMap& operator=(const stReqChallengeStoneCopyMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChallengeStoneCopyMap& default_instance();

  void Swap(stReqChallengeStoneCopyMap* other);

  // implements Message ----------------------------------------------

  stReqChallengeStoneCopyMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChallengeStoneCopyMap& from);
  void MergeFrom(const stReqChallengeStoneCopyMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChallengeStoneCopyMap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChallengeStoneCopyMap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChallengeStoneCopyMap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChallengeStoneCopyMap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChallengeStoneCopyMap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChallengeStoneCopyMap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChallengeStoneCopyMap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChallengeStoneCopyMap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChallengeStoneCopyMap_ProtoModID_Parse(name, value);
  }

  typedef stReqChallengeStoneCopyMap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChallengeStoneCopyMap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChallengeStoneCopyMap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChallengeStoneCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChallengeStoneCopyMap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChallengeStoneCopyMap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChallengeStoneCopyMap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelId = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqChallengeStoneCopyMap)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqChallengeStoneCopyMap* default_instance_;
};
// -------------------------------------------------------------------

class stChallengeStoneCopyMap : public ::google::protobuf::Message {
 public:
  stChallengeStoneCopyMap();
  virtual ~stChallengeStoneCopyMap();

  stChallengeStoneCopyMap(const stChallengeStoneCopyMap& from);

  inline stChallengeStoneCopyMap& operator=(const stChallengeStoneCopyMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChallengeStoneCopyMap& default_instance();

  void Swap(stChallengeStoneCopyMap* other);

  // implements Message ----------------------------------------------

  stChallengeStoneCopyMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChallengeStoneCopyMap& from);
  void MergeFrom(const stChallengeStoneCopyMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChallengeStoneCopyMap_eResult eResult;
  static const eResult eSuccess = stChallengeStoneCopyMap_eResult_eSuccess;
  static const eResult eLvl_Id_Not_Exist = stChallengeStoneCopyMap_eResult_eLvl_Id_Not_Exist;
  static const eResult eTime_not_Open = stChallengeStoneCopyMap_eResult_eTime_not_Open;
  static const eResult eLess_Of_Challenge_Time = stChallengeStoneCopyMap_eResult_eLess_Of_Challenge_Time;
  static const eResult eLess_Of_Sp = stChallengeStoneCopyMap_eResult_eLess_Of_Sp;
  static const eResult eLess_Of_Lilian = stChallengeStoneCopyMap_eResult_eLess_Of_Lilian;
  static const eResult eLvl_Limit = stChallengeStoneCopyMap_eResult_eLvl_Limit;
  static const eResult eBag_Full = stChallengeStoneCopyMap_eResult_eBag_Full;
  static const eResult ePre_Lvl_Id_Not_Pass = stChallengeStoneCopyMap_eResult_ePre_Lvl_Id_Not_Pass;
  static const eResult ePre_Lvl_Id_Not_Exists = stChallengeStoneCopyMap_eResult_ePre_Lvl_Id_Not_Exists;
  static inline bool eResult_IsValid(int value) {
    return stChallengeStoneCopyMap_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stChallengeStoneCopyMap_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stChallengeStoneCopyMap_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stChallengeStoneCopyMap_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stChallengeStoneCopyMap_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stChallengeStoneCopyMap_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stChallengeStoneCopyMap_eResult_Parse(name, value);
  }

  typedef stChallengeStoneCopyMap_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChallengeStoneCopyMap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChallengeStoneCopyMap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChallengeStoneCopyMap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChallengeStoneCopyMap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChallengeStoneCopyMap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChallengeStoneCopyMap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChallengeStoneCopyMap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChallengeStoneCopyMap_ProtoModID_Parse(name, value);
  }

  typedef stChallengeStoneCopyMap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChallengeStoneCopyMap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChallengeStoneCopyMap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChallengeStoneCopyMap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChallengeStoneCopyMap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChallengeStoneCopyMap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChallengeStoneCopyMap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChallengeStoneCopyMap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelId = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional .SortProto.stChallengeStoneCopyMap.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::SortProto::stChallengeStoneCopyMap_eResult result() const;
  inline void set_result(::SortProto::stChallengeStoneCopyMap_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stChallengeStoneCopyMap)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stChallengeStoneCopyMap* default_instance_;
};
// -------------------------------------------------------------------

class stReqResetStoneCopyMapNum : public ::google::protobuf::Message {
 public:
  stReqResetStoneCopyMapNum();
  virtual ~stReqResetStoneCopyMapNum();

  stReqResetStoneCopyMapNum(const stReqResetStoneCopyMapNum& from);

  inline stReqResetStoneCopyMapNum& operator=(const stReqResetStoneCopyMapNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResetStoneCopyMapNum& default_instance();

  void Swap(stReqResetStoneCopyMapNum* other);

  // implements Message ----------------------------------------------

  stReqResetStoneCopyMapNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResetStoneCopyMapNum& from);
  void MergeFrom(const stReqResetStoneCopyMapNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResetStoneCopyMapNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResetStoneCopyMapNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResetStoneCopyMapNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResetStoneCopyMapNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResetStoneCopyMapNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResetStoneCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResetStoneCopyMapNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResetStoneCopyMapNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResetStoneCopyMapNum_ProtoModID_Parse(name, value);
  }

  typedef stReqResetStoneCopyMapNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResetStoneCopyMapNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResetStoneCopyMapNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResetStoneCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResetStoneCopyMapNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResetStoneCopyMapNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResetStoneCopyMapNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 CharID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqResetStoneCopyMapNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqResetStoneCopyMapNum* default_instance_;
};
// -------------------------------------------------------------------

class stResetStoneCopyMapNum : public ::google::protobuf::Message {
 public:
  stResetStoneCopyMapNum();
  virtual ~stResetStoneCopyMapNum();

  stResetStoneCopyMapNum(const stResetStoneCopyMapNum& from);

  inline stResetStoneCopyMapNum& operator=(const stResetStoneCopyMapNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetStoneCopyMapNum& default_instance();

  void Swap(stResetStoneCopyMapNum* other);

  // implements Message ----------------------------------------------

  stResetStoneCopyMapNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetStoneCopyMapNum& from);
  void MergeFrom(const stResetStoneCopyMapNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetStoneCopyMapNum_eResult eResult;
  static const eResult eSuccess = stResetStoneCopyMapNum_eResult_eSuccess;
  static const eResult eLess_of_Diamond = stResetStoneCopyMapNum_eResult_eLess_of_Diamond;
  static const eResult eTimes_Remain = stResetStoneCopyMapNum_eResult_eTimes_Remain;
  static inline bool eResult_IsValid(int value) {
    return stResetStoneCopyMapNum_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetStoneCopyMapNum_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetStoneCopyMapNum_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetStoneCopyMapNum_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetStoneCopyMapNum_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetStoneCopyMapNum_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetStoneCopyMapNum_eResult_Parse(name, value);
  }

  typedef stResetStoneCopyMapNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetStoneCopyMapNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetStoneCopyMapNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetStoneCopyMapNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetStoneCopyMapNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetStoneCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetStoneCopyMapNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetStoneCopyMapNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetStoneCopyMapNum_ProtoModID_Parse(name, value);
  }

  typedef stResetStoneCopyMapNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetStoneCopyMapNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetStoneCopyMapNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetStoneCopyMapNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetStoneCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetStoneCopyMapNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetStoneCopyMapNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetStoneCopyMapNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stResetStoneCopyMapNum.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stResetStoneCopyMapNum_eResult result() const;
  inline void set_result(::SortProto::stResetStoneCopyMapNum_eResult value);

  // @@protoc_insertion_point(class_scope:SortProto.stResetStoneCopyMapNum)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResetStoneCopyMapNum* default_instance_;
};
// -------------------------------------------------------------------

class stReqResBattleResource : public ::google::protobuf::Message {
 public:
  stReqResBattleResource();
  virtual ~stReqResBattleResource();

  stReqResBattleResource(const stReqResBattleResource& from);

  inline stReqResBattleResource& operator=(const stReqResBattleResource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResBattleResource& default_instance();

  void Swap(stReqResBattleResource* other);

  // implements Message ----------------------------------------------

  stReqResBattleResource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResBattleResource& from);
  void MergeFrom(const stReqResBattleResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResBattleResource_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResBattleResource_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResBattleResource_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResBattleResource_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResBattleResource_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResBattleResource_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResBattleResource_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResBattleResource_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResBattleResource_ProtoModID_Parse(name, value);
  }

  typedef stReqResBattleResource_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResBattleResource_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResBattleResource_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResBattleResource_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResBattleResource_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResBattleResource_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResBattleResource_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResBattleResource_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResBattleResource_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stReqResBattleResource)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stReqResBattleResource* default_instance_;
};
// -------------------------------------------------------------------

class stRetResBattleResource : public ::google::protobuf::Message {
 public:
  stRetResBattleResource();
  virtual ~stRetResBattleResource();

  stRetResBattleResource(const stRetResBattleResource& from);

  inline stRetResBattleResource& operator=(const stRetResBattleResource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetResBattleResource& default_instance();

  void Swap(stRetResBattleResource* other);

  // implements Message ----------------------------------------------

  stRetResBattleResource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetResBattleResource& from);
  void MergeFrom(const stRetResBattleResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetResBattleResource_eResult eResult;
  static const eResult eSuccess = stRetResBattleResource_eResult_eSuccess;
  static const eResult eNot_In_Battle = stRetResBattleResource_eResult_eNot_In_Battle;
  static inline bool eResult_IsValid(int value) {
    return stRetResBattleResource_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetResBattleResource_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetResBattleResource_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetResBattleResource_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetResBattleResource_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetResBattleResource_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetResBattleResource_eResult_Parse(name, value);
  }

  typedef stRetResBattleResource_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetResBattleResource_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetResBattleResource_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetResBattleResource_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetResBattleResource_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetResBattleResource_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetResBattleResource_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetResBattleResource_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetResBattleResource_ProtoModID_Parse(name, value);
  }

  typedef stRetResBattleResource_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetResBattleResource_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetResBattleResource_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetResBattleResource_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetResBattleResource_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetResBattleResource_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetResBattleResource_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetResBattleResource_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetResBattleResource_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .SortProto.stRetResBattleResource.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::SortProto::stRetResBattleResource_eResult result() const;
  inline void set_result(::SortProto::stRetResBattleResource_eResult value);

  // repeated .SortProto.stBattleResRefreshItem item = 2;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::SortProto::stBattleResRefreshItem& item(int index) const;
  inline ::SortProto::stBattleResRefreshItem* mutable_item(int index);
  inline ::SortProto::stBattleResRefreshItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:SortProto.stRetResBattleResource)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem > item_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stRetResBattleResource* default_instance_;
};
// -------------------------------------------------------------------

class stResBattleEnd : public ::google::protobuf::Message {
 public:
  stResBattleEnd();
  virtual ~stResBattleEnd();

  stResBattleEnd(const stResBattleEnd& from);

  inline stResBattleEnd& operator=(const stResBattleEnd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResBattleEnd& default_instance();

  void Swap(stResBattleEnd* other);

  // implements Message ----------------------------------------------

  stResBattleEnd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResBattleEnd& from);
  void MergeFrom(const stResBattleEnd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResBattleEnd_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResBattleEnd_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResBattleEnd_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResBattleEnd_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResBattleEnd_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResBattleEnd_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResBattleEnd_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResBattleEnd_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResBattleEnd_ProtoModID_Parse(name, value);
  }

  typedef stResBattleEnd_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResBattleEnd_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResBattleEnd_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResBattleEnd_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResBattleEnd_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResBattleEnd_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResBattleEnd_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResBattleEnd_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResBattleEnd_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:SortProto.stResBattleEnd)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SortList_2eproto();
  friend void protobuf_AssignDesc_SortList_2eproto();
  friend void protobuf_ShutdownFile_SortList_2eproto();

  void InitAsDefaultInstance();
  static stResBattleEnd* default_instance_;
};
// ===================================================================


// ===================================================================

// stReqLevelSortList

// optional uint32 fromRank = 1;
inline bool stReqLevelSortList::has_fromrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLevelSortList::set_has_fromrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLevelSortList::clear_has_fromrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLevelSortList::clear_fromrank() {
  fromrank_ = 0u;
  clear_has_fromrank();
}
inline ::google::protobuf::uint32 stReqLevelSortList::fromrank() const {
  return fromrank_;
}
inline void stReqLevelSortList::set_fromrank(::google::protobuf::uint32 value) {
  set_has_fromrank();
  fromrank_ = value;
}

// -------------------------------------------------------------------

// stSynLevelSortItem

// optional uint32 charID = 1;
inline bool stSynLevelSortItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynLevelSortItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynLevelSortItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynLevelSortItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynLevelSortItem::charid() const {
  return charid_;
}
inline void stSynLevelSortItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynLevelSortItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynLevelSortItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynLevelSortItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynLevelSortItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynLevelSortItem::name() const {
  return *name_;
}
inline void stSynLevelSortItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynLevelSortItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynLevelSortItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynLevelSortItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynLevelSortItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynLevelSortItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string guildName = 3;
inline bool stSynLevelSortItem::has_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynLevelSortItem::set_has_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynLevelSortItem::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynLevelSortItem::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stSynLevelSortItem::guildname() const {
  return *guildname_;
}
inline void stSynLevelSortItem::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSynLevelSortItem::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSynLevelSortItem::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynLevelSortItem::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stSynLevelSortItem::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynLevelSortItem::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 4;
inline bool stSynLevelSortItem::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynLevelSortItem::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynLevelSortItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynLevelSortItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynLevelSortItem::level() const {
  return level_;
}
inline void stSynLevelSortItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 5;
inline bool stSynLevelSortItem::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynLevelSortItem::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynLevelSortItem::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynLevelSortItem::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynLevelSortItem::job() const {
  return job_;
}
inline void stSynLevelSortItem::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stSynLevelSortItem::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynLevelSortItem::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynLevelSortItem::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynLevelSortItem::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynLevelSortItem::sex() const {
  return sex_;
}
inline void stSynLevelSortItem::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 photoID = 7;
inline bool stSynLevelSortItem::has_photoid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynLevelSortItem::set_has_photoid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynLevelSortItem::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynLevelSortItem::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynLevelSortItem::photoid() const {
  return photoid_;
}
inline void stSynLevelSortItem::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stRetLevelSortList

// optional uint32 beginRank = 1;
inline bool stRetLevelSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetLevelSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetLevelSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetLevelSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stRetLevelSortList::beginrank() const {
  return beginrank_;
}
inline void stRetLevelSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// optional uint32 myRank = 2;
inline bool stRetLevelSortList::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetLevelSortList::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetLevelSortList::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetLevelSortList::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetLevelSortList::myrank() const {
  return myrank_;
}
inline void stRetLevelSortList::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// repeated .SortProto.stSynLevelSortItem sortItem = 3;
inline int stRetLevelSortList::sortitem_size() const {
  return sortitem_.size();
}
inline void stRetLevelSortList::clear_sortitem() {
  sortitem_.Clear();
}
inline const ::SortProto::stSynLevelSortItem& stRetLevelSortList::sortitem(int index) const {
  return sortitem_.Get(index);
}
inline ::SortProto::stSynLevelSortItem* stRetLevelSortList::mutable_sortitem(int index) {
  return sortitem_.Mutable(index);
}
inline ::SortProto::stSynLevelSortItem* stRetLevelSortList::add_sortitem() {
  return sortitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynLevelSortItem >&
stRetLevelSortList::sortitem() const {
  return sortitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynLevelSortItem >*
stRetLevelSortList::mutable_sortitem() {
  return &sortitem_;
}

// -------------------------------------------------------------------

// stReqBattlePowerSortList

// optional uint32 fromRank = 1;
inline bool stReqBattlePowerSortList::has_fromrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBattlePowerSortList::set_has_fromrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBattlePowerSortList::clear_has_fromrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBattlePowerSortList::clear_fromrank() {
  fromrank_ = 0u;
  clear_has_fromrank();
}
inline ::google::protobuf::uint32 stReqBattlePowerSortList::fromrank() const {
  return fromrank_;
}
inline void stReqBattlePowerSortList::set_fromrank(::google::protobuf::uint32 value) {
  set_has_fromrank();
  fromrank_ = value;
}

// -------------------------------------------------------------------

// stSynBattlePowerSortItem

// optional uint32 charID = 1;
inline bool stSynBattlePowerSortItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynBattlePowerSortItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynBattlePowerSortItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynBattlePowerSortItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynBattlePowerSortItem::charid() const {
  return charid_;
}
inline void stSynBattlePowerSortItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynBattlePowerSortItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynBattlePowerSortItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynBattlePowerSortItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynBattlePowerSortItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynBattlePowerSortItem::name() const {
  return *name_;
}
inline void stSynBattlePowerSortItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynBattlePowerSortItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynBattlePowerSortItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynBattlePowerSortItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynBattlePowerSortItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynBattlePowerSortItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string guildName = 3;
inline bool stSynBattlePowerSortItem::has_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynBattlePowerSortItem::set_has_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynBattlePowerSortItem::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynBattlePowerSortItem::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stSynBattlePowerSortItem::guildname() const {
  return *guildname_;
}
inline void stSynBattlePowerSortItem::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSynBattlePowerSortItem::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stSynBattlePowerSortItem::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynBattlePowerSortItem::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stSynBattlePowerSortItem::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynBattlePowerSortItem::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 battlePower = 4;
inline bool stSynBattlePowerSortItem::has_battlepower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynBattlePowerSortItem::set_has_battlepower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynBattlePowerSortItem::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynBattlePowerSortItem::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynBattlePowerSortItem::battlepower() const {
  return battlepower_;
}
inline void stSynBattlePowerSortItem::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 job = 5;
inline bool stSynBattlePowerSortItem::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynBattlePowerSortItem::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynBattlePowerSortItem::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynBattlePowerSortItem::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynBattlePowerSortItem::job() const {
  return job_;
}
inline void stSynBattlePowerSortItem::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stSynBattlePowerSortItem::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynBattlePowerSortItem::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynBattlePowerSortItem::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynBattlePowerSortItem::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynBattlePowerSortItem::sex() const {
  return sex_;
}
inline void stSynBattlePowerSortItem::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 7;
inline bool stSynBattlePowerSortItem::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynBattlePowerSortItem::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynBattlePowerSortItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynBattlePowerSortItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynBattlePowerSortItem::level() const {
  return level_;
}
inline void stSynBattlePowerSortItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 photoID = 8;
inline bool stSynBattlePowerSortItem::has_photoid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynBattlePowerSortItem::set_has_photoid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynBattlePowerSortItem::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynBattlePowerSortItem::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynBattlePowerSortItem::photoid() const {
  return photoid_;
}
inline void stSynBattlePowerSortItem::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stRetBattlePowerSortList

// optional uint32 beginRank = 1;
inline bool stRetBattlePowerSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetBattlePowerSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetBattlePowerSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetBattlePowerSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stRetBattlePowerSortList::beginrank() const {
  return beginrank_;
}
inline void stRetBattlePowerSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// optional uint32 myRank = 2;
inline bool stRetBattlePowerSortList::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetBattlePowerSortList::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetBattlePowerSortList::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetBattlePowerSortList::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetBattlePowerSortList::myrank() const {
  return myrank_;
}
inline void stRetBattlePowerSortList::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// repeated .SortProto.stSynBattlePowerSortItem sortItem = 3;
inline int stRetBattlePowerSortList::sortitem_size() const {
  return sortitem_.size();
}
inline void stRetBattlePowerSortList::clear_sortitem() {
  sortitem_.Clear();
}
inline const ::SortProto::stSynBattlePowerSortItem& stRetBattlePowerSortList::sortitem(int index) const {
  return sortitem_.Get(index);
}
inline ::SortProto::stSynBattlePowerSortItem* stRetBattlePowerSortList::mutable_sortitem(int index) {
  return sortitem_.Mutable(index);
}
inline ::SortProto::stSynBattlePowerSortItem* stRetBattlePowerSortList::add_sortitem() {
  return sortitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynBattlePowerSortItem >&
stRetBattlePowerSortList::sortitem() const {
  return sortitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynBattlePowerSortItem >*
stRetBattlePowerSortList::mutable_sortitem() {
  return &sortitem_;
}

// -------------------------------------------------------------------

// stReqCopymapSortList

// optional uint32 fromRank = 1;
inline bool stReqCopymapSortList::has_fromrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCopymapSortList::set_has_fromrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCopymapSortList::clear_has_fromrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCopymapSortList::clear_fromrank() {
  fromrank_ = 0u;
  clear_has_fromrank();
}
inline ::google::protobuf::uint32 stReqCopymapSortList::fromrank() const {
  return fromrank_;
}
inline void stReqCopymapSortList::set_fromrank(::google::protobuf::uint32 value) {
  set_has_fromrank();
  fromrank_ = value;
}

// -------------------------------------------------------------------

// stCopyMapSortItem

// optional uint32 charID = 1;
inline bool stCopyMapSortItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCopyMapSortItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCopyMapSortItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCopyMapSortItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCopyMapSortItem::charid() const {
  return charid_;
}
inline void stCopyMapSortItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stCopyMapSortItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCopyMapSortItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCopyMapSortItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCopyMapSortItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stCopyMapSortItem::name() const {
  return *name_;
}
inline void stCopyMapSortItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCopyMapSortItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stCopyMapSortItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCopyMapSortItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stCopyMapSortItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCopyMapSortItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string guildName = 3;
inline bool stCopyMapSortItem::has_guildname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCopyMapSortItem::set_has_guildname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCopyMapSortItem::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCopyMapSortItem::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stCopyMapSortItem::guildname() const {
  return *guildname_;
}
inline void stCopyMapSortItem::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stCopyMapSortItem::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stCopyMapSortItem::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stCopyMapSortItem::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stCopyMapSortItem::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stCopyMapSortItem::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 starNum = 4;
inline bool stCopyMapSortItem::has_starnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCopyMapSortItem::set_has_starnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCopyMapSortItem::clear_has_starnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCopyMapSortItem::clear_starnum() {
  starnum_ = 0u;
  clear_has_starnum();
}
inline ::google::protobuf::uint32 stCopyMapSortItem::starnum() const {
  return starnum_;
}
inline void stCopyMapSortItem::set_starnum(::google::protobuf::uint32 value) {
  set_has_starnum();
  starnum_ = value;
}

// optional uint32 job = 5;
inline bool stCopyMapSortItem::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stCopyMapSortItem::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stCopyMapSortItem::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stCopyMapSortItem::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stCopyMapSortItem::job() const {
  return job_;
}
inline void stCopyMapSortItem::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stCopyMapSortItem::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stCopyMapSortItem::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stCopyMapSortItem::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stCopyMapSortItem::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stCopyMapSortItem::sex() const {
  return sex_;
}
inline void stCopyMapSortItem::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 7;
inline bool stCopyMapSortItem::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stCopyMapSortItem::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stCopyMapSortItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stCopyMapSortItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stCopyMapSortItem::level() const {
  return level_;
}
inline void stCopyMapSortItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 photoID = 8;
inline bool stCopyMapSortItem::has_photoid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stCopyMapSortItem::set_has_photoid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stCopyMapSortItem::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stCopyMapSortItem::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stCopyMapSortItem::photoid() const {
  return photoid_;
}
inline void stCopyMapSortItem::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stRetCopyMapSortList

// optional uint32 beginRank = 1;
inline bool stRetCopyMapSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetCopyMapSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetCopyMapSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetCopyMapSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stRetCopyMapSortList::beginrank() const {
  return beginrank_;
}
inline void stRetCopyMapSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// optional uint32 myRank = 2;
inline bool stRetCopyMapSortList::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetCopyMapSortList::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetCopyMapSortList::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetCopyMapSortList::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetCopyMapSortList::myrank() const {
  return myrank_;
}
inline void stRetCopyMapSortList::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// repeated .SortProto.stCopyMapSortItem sortItem = 3;
inline int stRetCopyMapSortList::sortitem_size() const {
  return sortitem_.size();
}
inline void stRetCopyMapSortList::clear_sortitem() {
  sortitem_.Clear();
}
inline const ::SortProto::stCopyMapSortItem& stRetCopyMapSortList::sortitem(int index) const {
  return sortitem_.Get(index);
}
inline ::SortProto::stCopyMapSortItem* stRetCopyMapSortList::mutable_sortitem(int index) {
  return sortitem_.Mutable(index);
}
inline ::SortProto::stCopyMapSortItem* stRetCopyMapSortList::add_sortitem() {
  return sortitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stCopyMapSortItem >&
stRetCopyMapSortList::sortitem() const {
  return sortitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stCopyMapSortItem >*
stRetCopyMapSortList::mutable_sortitem() {
  return &sortitem_;
}

// -------------------------------------------------------------------

// stSynArenaSortInfo

// optional uint32 charID = 1;
inline bool stSynArenaSortInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynArenaSortInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynArenaSortInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynArenaSortInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynArenaSortInfo::charid() const {
  return charid_;
}
inline void stSynArenaSortInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynArenaSortInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynArenaSortInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynArenaSortInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynArenaSortInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynArenaSortInfo::name() const {
  return *name_;
}
inline void stSynArenaSortInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynArenaSortInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynArenaSortInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynArenaSortInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynArenaSortInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynArenaSortInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stSynArenaSortInfo::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynArenaSortInfo::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynArenaSortInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynArenaSortInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynArenaSortInfo::level() const {
  return level_;
}
inline void stSynArenaSortInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool stSynArenaSortInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynArenaSortInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynArenaSortInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynArenaSortInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynArenaSortInfo::job() const {
  return job_;
}
inline void stSynArenaSortInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stSynArenaSortInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynArenaSortInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynArenaSortInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynArenaSortInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynArenaSortInfo::sex() const {
  return sex_;
}
inline void stSynArenaSortInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 rank = 6;
inline bool stSynArenaSortInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynArenaSortInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynArenaSortInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynArenaSortInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stSynArenaSortInfo::rank() const {
  return rank_;
}
inline void stSynArenaSortInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 photoID = 7;
inline bool stSynArenaSortInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynArenaSortInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynArenaSortInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynArenaSortInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynArenaSortInfo::photoid() const {
  return photoid_;
}
inline void stSynArenaSortInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stReqArenaPKList

// optional uint32 charID = 1;
inline bool stReqArenaPKList::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqArenaPKList::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqArenaPKList::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqArenaPKList::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqArenaPKList::charid() const {
  return charid_;
}
inline void stReqArenaPKList::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetArenaPKList

// repeated .SortProto.stSynArenaSortInfo data = 1;
inline int stRetArenaPKList::data_size() const {
  return data_.size();
}
inline void stRetArenaPKList::clear_data() {
  data_.Clear();
}
inline const ::SortProto::stSynArenaSortInfo& stRetArenaPKList::data(int index) const {
  return data_.Get(index);
}
inline ::SortProto::stSynArenaSortInfo* stRetArenaPKList::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::SortProto::stSynArenaSortInfo* stRetArenaPKList::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >&
stRetArenaPKList::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >*
stRetArenaPKList::mutable_data() {
  return &data_;
}

// optional uint32 myRank = 2;
inline bool stRetArenaPKList::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetArenaPKList::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetArenaPKList::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetArenaPKList::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetArenaPKList::myrank() const {
  return myrank_;
}
inline void stRetArenaPKList::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// repeated .SortProto.stSynArenaSortInfo topTen = 3;
inline int stRetArenaPKList::topten_size() const {
  return topten_.size();
}
inline void stRetArenaPKList::clear_topten() {
  topten_.Clear();
}
inline const ::SortProto::stSynArenaSortInfo& stRetArenaPKList::topten(int index) const {
  return topten_.Get(index);
}
inline ::SortProto::stSynArenaSortInfo* stRetArenaPKList::mutable_topten(int index) {
  return topten_.Mutable(index);
}
inline ::SortProto::stSynArenaSortInfo* stRetArenaPKList::add_topten() {
  return topten_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >&
stRetArenaPKList::topten() const {
  return topten_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >*
stRetArenaPKList::mutable_topten() {
  return &topten_;
}

// optional uint32 cd = 4;
inline bool stRetArenaPKList::has_cd() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetArenaPKList::set_has_cd() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetArenaPKList::clear_has_cd() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetArenaPKList::clear_cd() {
  cd_ = 0u;
  clear_has_cd();
}
inline ::google::protobuf::uint32 stRetArenaPKList::cd() const {
  return cd_;
}
inline void stRetArenaPKList::set_cd(::google::protobuf::uint32 value) {
  set_has_cd();
  cd_ = value;
}

// optional uint32 challengeNum = 5;
inline bool stRetArenaPKList::has_challengenum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetArenaPKList::set_has_challengenum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetArenaPKList::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetArenaPKList::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 stRetArenaPKList::challengenum() const {
  return challengenum_;
}
inline void stRetArenaPKList::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
}

// optional uint32 resetNum = 6;
inline bool stRetArenaPKList::has_resetnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetArenaPKList::set_has_resetnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetArenaPKList::clear_has_resetnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetArenaPKList::clear_resetnum() {
  resetnum_ = 0u;
  clear_has_resetnum();
}
inline ::google::protobuf::uint32 stRetArenaPKList::resetnum() const {
  return resetnum_;
}
inline void stRetArenaPKList::set_resetnum(::google::protobuf::uint32 value) {
  set_has_resetnum();
  resetnum_ = value;
}

// optional uint32 totalUserNum = 7;
inline bool stRetArenaPKList::has_totalusernum() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRetArenaPKList::set_has_totalusernum() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRetArenaPKList::clear_has_totalusernum() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRetArenaPKList::clear_totalusernum() {
  totalusernum_ = 0u;
  clear_has_totalusernum();
}
inline ::google::protobuf::uint32 stRetArenaPKList::totalusernum() const {
  return totalusernum_;
}
inline void stRetArenaPKList::set_totalusernum(::google::protobuf::uint32 value) {
  set_has_totalusernum();
  totalusernum_ = value;
}

// -------------------------------------------------------------------

// stReqArenaSortList

// optional uint32 beginRank = 1;
inline bool stReqArenaSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqArenaSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqArenaSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqArenaSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stReqArenaSortList::beginrank() const {
  return beginrank_;
}
inline void stReqArenaSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// -------------------------------------------------------------------

// stRetArenaSortList

// repeated .SortProto.stSynArenaSortInfo sortInfo = 1;
inline int stRetArenaSortList::sortinfo_size() const {
  return sortinfo_.size();
}
inline void stRetArenaSortList::clear_sortinfo() {
  sortinfo_.Clear();
}
inline const ::SortProto::stSynArenaSortInfo& stRetArenaSortList::sortinfo(int index) const {
  return sortinfo_.Get(index);
}
inline ::SortProto::stSynArenaSortInfo* stRetArenaSortList::mutable_sortinfo(int index) {
  return sortinfo_.Mutable(index);
}
inline ::SortProto::stSynArenaSortInfo* stRetArenaSortList::add_sortinfo() {
  return sortinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >&
stRetArenaSortList::sortinfo() const {
  return sortinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynArenaSortInfo >*
stRetArenaSortList::mutable_sortinfo() {
  return &sortinfo_;
}

// optional uint32 myRank = 2;
inline bool stRetArenaSortList::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetArenaSortList::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetArenaSortList::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetArenaSortList::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetArenaSortList::myrank() const {
  return myrank_;
}
inline void stRetArenaSortList::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// -------------------------------------------------------------------

// stSynOne2OnePVPInfo

// optional uint32 charID = 1;
inline bool stSynOne2OnePVPInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynOne2OnePVPInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynOne2OnePVPInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynOne2OnePVPInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPInfo::charid() const {
  return charid_;
}
inline void stSynOne2OnePVPInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynOne2OnePVPInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynOne2OnePVPInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynOne2OnePVPInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynOne2OnePVPInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynOne2OnePVPInfo::name() const {
  return *name_;
}
inline void stSynOne2OnePVPInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynOne2OnePVPInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynOne2OnePVPInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynOne2OnePVPInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynOne2OnePVPInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynOne2OnePVPInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 3;
inline bool stSynOne2OnePVPInfo::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynOne2OnePVPInfo::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynOne2OnePVPInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynOne2OnePVPInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPInfo::job() const {
  return job_;
}
inline void stSynOne2OnePVPInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 4;
inline bool stSynOne2OnePVPInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynOne2OnePVPInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynOne2OnePVPInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynOne2OnePVPInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPInfo::sex() const {
  return sex_;
}
inline void stSynOne2OnePVPInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 score = 5;
inline bool stSynOne2OnePVPInfo::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynOne2OnePVPInfo::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynOne2OnePVPInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynOne2OnePVPInfo::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPInfo::score() const {
  return score_;
}
inline void stSynOne2OnePVPInfo::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 rank = 6;
inline bool stSynOne2OnePVPInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynOne2OnePVPInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynOne2OnePVPInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynOne2OnePVPInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPInfo::rank() const {
  return rank_;
}
inline void stSynOne2OnePVPInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 level = 7;
inline bool stSynOne2OnePVPInfo::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynOne2OnePVPInfo::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynOne2OnePVPInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynOne2OnePVPInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPInfo::level() const {
  return level_;
}
inline void stSynOne2OnePVPInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 photoID = 8;
inline bool stSynOne2OnePVPInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynOne2OnePVPInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynOne2OnePVPInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynOne2OnePVPInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPInfo::photoid() const {
  return photoid_;
}
inline void stSynOne2OnePVPInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stReqOne2OnePVPSortList

// optional uint32 beginRank = 1;
inline bool stReqOne2OnePVPSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOne2OnePVPSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOne2OnePVPSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOne2OnePVPSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stReqOne2OnePVPSortList::beginrank() const {
  return beginrank_;
}
inline void stReqOne2OnePVPSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// optional .SortProto.eOne2OneSortListType eType = 2;
inline bool stReqOne2OnePVPSortList::has_etype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqOne2OnePVPSortList::set_has_etype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqOne2OnePVPSortList::clear_has_etype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqOne2OnePVPSortList::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::SortProto::eOne2OneSortListType stReqOne2OnePVPSortList::etype() const {
  return static_cast< ::SortProto::eOne2OneSortListType >(etype_);
}
inline void stReqOne2OnePVPSortList::set_etype(::SortProto::eOne2OneSortListType value) {
  assert(::SortProto::eOne2OneSortListType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// -------------------------------------------------------------------

// stRetOne2OnePVPSortList

// repeated .SortProto.stSynOne2OnePVPInfo sortList = 1;
inline int stRetOne2OnePVPSortList::sortlist_size() const {
  return sortlist_.size();
}
inline void stRetOne2OnePVPSortList::clear_sortlist() {
  sortlist_.Clear();
}
inline const ::SortProto::stSynOne2OnePVPInfo& stRetOne2OnePVPSortList::sortlist(int index) const {
  return sortlist_.Get(index);
}
inline ::SortProto::stSynOne2OnePVPInfo* stRetOne2OnePVPSortList::mutable_sortlist(int index) {
  return sortlist_.Mutable(index);
}
inline ::SortProto::stSynOne2OnePVPInfo* stRetOne2OnePVPSortList::add_sortlist() {
  return sortlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo >&
stRetOne2OnePVPSortList::sortlist() const {
  return sortlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo >*
stRetOne2OnePVPSortList::mutable_sortlist() {
  return &sortlist_;
}

// optional uint32 myRank = 2;
inline bool stRetOne2OnePVPSortList::has_myrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetOne2OnePVPSortList::set_has_myrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetOne2OnePVPSortList::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetOne2OnePVPSortList::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetOne2OnePVPSortList::myrank() const {
  return myrank_;
}
inline void stRetOne2OnePVPSortList::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// repeated .SortProto.stSynOne2OnePVPInfo lastweekSortList = 3;
inline int stRetOne2OnePVPSortList::lastweeksortlist_size() const {
  return lastweeksortlist_.size();
}
inline void stRetOne2OnePVPSortList::clear_lastweeksortlist() {
  lastweeksortlist_.Clear();
}
inline const ::SortProto::stSynOne2OnePVPInfo& stRetOne2OnePVPSortList::lastweeksortlist(int index) const {
  return lastweeksortlist_.Get(index);
}
inline ::SortProto::stSynOne2OnePVPInfo* stRetOne2OnePVPSortList::mutable_lastweeksortlist(int index) {
  return lastweeksortlist_.Mutable(index);
}
inline ::SortProto::stSynOne2OnePVPInfo* stRetOne2OnePVPSortList::add_lastweeksortlist() {
  return lastweeksortlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo >&
stRetOne2OnePVPSortList::lastweeksortlist() const {
  return lastweeksortlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynOne2OnePVPInfo >*
stRetOne2OnePVPSortList::mutable_lastweeksortlist() {
  return &lastweeksortlist_;
}

// optional .SortProto.eOne2OneSortListType eType = 4;
inline bool stRetOne2OnePVPSortList::has_etype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetOne2OnePVPSortList::set_has_etype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetOne2OnePVPSortList::clear_has_etype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetOne2OnePVPSortList::clear_etype() {
  etype_ = 1;
  clear_has_etype();
}
inline ::SortProto::eOne2OneSortListType stRetOne2OnePVPSortList::etype() const {
  return static_cast< ::SortProto::eOne2OneSortListType >(etype_);
}
inline void stRetOne2OnePVPSortList::set_etype(::SortProto::eOne2OneSortListType value) {
  assert(::SortProto::eOne2OneSortListType_IsValid(value));
  set_has_etype();
  etype_ = value;
}

// optional uint32 score = 5;
inline bool stRetOne2OnePVPSortList::has_score() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetOne2OnePVPSortList::set_has_score() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetOne2OnePVPSortList::clear_has_score() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetOne2OnePVPSortList::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stRetOne2OnePVPSortList::score() const {
  return score_;
}
inline void stRetOne2OnePVPSortList::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// stChallengeArenaUser

// optional uint32 charID = 1;
inline bool stChallengeArenaUser::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChallengeArenaUser::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChallengeArenaUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChallengeArenaUser::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stChallengeArenaUser::charid() const {
  return charid_;
}
inline void stChallengeArenaUser::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stChallengeArenaUserResult

// optional .SortProto.stChallengeArenaUserResult.eResult result = 1;
inline bool stChallengeArenaUserResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChallengeArenaUserResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChallengeArenaUserResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChallengeArenaUserResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stChallengeArenaUserResult_eResult stChallengeArenaUserResult::result() const {
  return static_cast< ::SortProto::stChallengeArenaUserResult_eResult >(result_);
}
inline void stChallengeArenaUserResult::set_result(::SortProto::stChallengeArenaUserResult_eResult value) {
  assert(::SortProto::stChallengeArenaUserResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stChallegeLeitaiUser

// optional uint32 charID = 1;
inline bool stChallegeLeitaiUser::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChallegeLeitaiUser::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChallegeLeitaiUser::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChallegeLeitaiUser::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stChallegeLeitaiUser::charid() const {
  return charid_;
}
inline void stChallegeLeitaiUser::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stChallegeLeitaiUserResult

// optional .SortProto.stChallegeLeitaiUserResult.eResult result = 1;
inline bool stChallegeLeitaiUserResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChallegeLeitaiUserResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChallegeLeitaiUserResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChallegeLeitaiUserResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stChallegeLeitaiUserResult_eResult stChallegeLeitaiUserResult::result() const {
  return static_cast< ::SortProto::stChallegeLeitaiUserResult_eResult >(result_);
}
inline void stChallegeLeitaiUserResult::set_result(::SortProto::stChallegeLeitaiUserResult_eResult value) {
  assert(::SortProto::stChallegeLeitaiUserResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stOpenLeitaiWindow

// optional uint32 charID = 1;
inline bool stOpenLeitaiWindow::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOpenLeitaiWindow::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOpenLeitaiWindow::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOpenLeitaiWindow::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOpenLeitaiWindow::charid() const {
  return charid_;
}
inline void stOpenLeitaiWindow::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynHeroHP

// optional uint32 heroID = 1;
inline bool stSynHeroHP::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynHeroHP::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynHeroHP::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynHeroHP::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stSynHeroHP::heroid() const {
  return heroid_;
}
inline void stSynHeroHP::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 curHP = 2;
inline bool stSynHeroHP::has_curhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynHeroHP::set_has_curhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynHeroHP::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynHeroHP::clear_curhp() {
  curhp_ = 0u;
  clear_has_curhp();
}
inline ::google::protobuf::uint32 stSynHeroHP::curhp() const {
  return curhp_;
}
inline void stSynHeroHP::set_curhp(::google::protobuf::uint32 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional uint32 maxHP = 3;
inline bool stSynHeroHP::has_maxhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynHeroHP::set_has_maxhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynHeroHP::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynHeroHP::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 stSynHeroHP::maxhp() const {
  return maxhp_;
}
inline void stSynHeroHP::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// -------------------------------------------------------------------

// stRetLeitaiInfo

// optional uint32 challengeNum = 1;
inline bool stRetLeitaiInfo::has_challengenum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetLeitaiInfo::set_has_challengenum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetLeitaiInfo::clear_has_challengenum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetLeitaiInfo::clear_challengenum() {
  challengenum_ = 0u;
  clear_has_challengenum();
}
inline ::google::protobuf::uint32 stRetLeitaiInfo::challengenum() const {
  return challengenum_;
}
inline void stRetLeitaiInfo::set_challengenum(::google::protobuf::uint32 value) {
  set_has_challengenum();
  challengenum_ = value;
}

// optional uint32 myHP = 2;
inline bool stRetLeitaiInfo::has_myhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetLeitaiInfo::set_has_myhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetLeitaiInfo::clear_has_myhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetLeitaiInfo::clear_myhp() {
  myhp_ = 0u;
  clear_has_myhp();
}
inline ::google::protobuf::uint32 stRetLeitaiInfo::myhp() const {
  return myhp_;
}
inline void stRetLeitaiInfo::set_myhp(::google::protobuf::uint32 value) {
  set_has_myhp();
  myhp_ = value;
}

// repeated .SortProto.stSynHeroHP heroHPs = 3;
inline int stRetLeitaiInfo::herohps_size() const {
  return herohps_.size();
}
inline void stRetLeitaiInfo::clear_herohps() {
  herohps_.Clear();
}
inline const ::SortProto::stSynHeroHP& stRetLeitaiInfo::herohps(int index) const {
  return herohps_.Get(index);
}
inline ::SortProto::stSynHeroHP* stRetLeitaiInfo::mutable_herohps(int index) {
  return herohps_.Mutable(index);
}
inline ::SortProto::stSynHeroHP* stRetLeitaiInfo::add_herohps() {
  return herohps_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP >&
stRetLeitaiInfo::herohps() const {
  return herohps_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP >*
stRetLeitaiInfo::mutable_herohps() {
  return &herohps_;
}

// optional .SortProto.eLeitaiMode mode = 4;
inline bool stRetLeitaiInfo::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetLeitaiInfo::set_has_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetLeitaiInfo::clear_has_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetLeitaiInfo::clear_mode() {
  mode_ = 1;
  clear_has_mode();
}
inline ::SortProto::eLeitaiMode stRetLeitaiInfo::mode() const {
  return static_cast< ::SortProto::eLeitaiMode >(mode_);
}
inline void stRetLeitaiInfo::set_mode(::SortProto::eLeitaiMode value) {
  assert(::SortProto::eLeitaiMode_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// optional uint32 pos1ID = 5;
inline bool stRetLeitaiInfo::has_pos1id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetLeitaiInfo::set_has_pos1id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetLeitaiInfo::clear_has_pos1id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetLeitaiInfo::clear_pos1id() {
  pos1id_ = 0u;
  clear_has_pos1id();
}
inline ::google::protobuf::uint32 stRetLeitaiInfo::pos1id() const {
  return pos1id_;
}
inline void stRetLeitaiInfo::set_pos1id(::google::protobuf::uint32 value) {
  set_has_pos1id();
  pos1id_ = value;
}

// optional uint32 pos2ID = 6;
inline bool stRetLeitaiInfo::has_pos2id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetLeitaiInfo::set_has_pos2id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetLeitaiInfo::clear_has_pos2id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetLeitaiInfo::clear_pos2id() {
  pos2id_ = 0u;
  clear_has_pos2id();
}
inline ::google::protobuf::uint32 stRetLeitaiInfo::pos2id() const {
  return pos2id_;
}
inline void stRetLeitaiInfo::set_pos2id(::google::protobuf::uint32 value) {
  set_has_pos2id();
  pos2id_ = value;
}

// optional uint32 pos3ID = 7;
inline bool stRetLeitaiInfo::has_pos3id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRetLeitaiInfo::set_has_pos3id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRetLeitaiInfo::clear_has_pos3id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRetLeitaiInfo::clear_pos3id() {
  pos3id_ = 0u;
  clear_has_pos3id();
}
inline ::google::protobuf::uint32 stRetLeitaiInfo::pos3id() const {
  return pos3id_;
}
inline void stRetLeitaiInfo::set_pos3id(::google::protobuf::uint32 value) {
  set_has_pos3id();
  pos3id_ = value;
}

// optional uint32 pos4ID = 8;
inline bool stRetLeitaiInfo::has_pos4id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRetLeitaiInfo::set_has_pos4id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRetLeitaiInfo::clear_has_pos4id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRetLeitaiInfo::clear_pos4id() {
  pos4id_ = 0u;
  clear_has_pos4id();
}
inline ::google::protobuf::uint32 stRetLeitaiInfo::pos4id() const {
  return pos4id_;
}
inline void stRetLeitaiInfo::set_pos4id(::google::protobuf::uint32 value) {
  set_has_pos4id();
  pos4id_ = value;
}

// optional uint32 refreshBuffRemainTime = 9;
inline bool stRetLeitaiInfo::has_refreshbuffremaintime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRetLeitaiInfo::set_has_refreshbuffremaintime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRetLeitaiInfo::clear_has_refreshbuffremaintime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRetLeitaiInfo::clear_refreshbuffremaintime() {
  refreshbuffremaintime_ = 0u;
  clear_has_refreshbuffremaintime();
}
inline ::google::protobuf::uint32 stRetLeitaiInfo::refreshbuffremaintime() const {
  return refreshbuffremaintime_;
}
inline void stRetLeitaiInfo::set_refreshbuffremaintime(::google::protobuf::uint32 value) {
  set_has_refreshbuffremaintime();
  refreshbuffremaintime_ = value;
}

// optional uint32 buffID = 10;
inline bool stRetLeitaiInfo::has_buffid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stRetLeitaiInfo::set_has_buffid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stRetLeitaiInfo::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stRetLeitaiInfo::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 stRetLeitaiInfo::buffid() const {
  return buffid_;
}
inline void stRetLeitaiInfo::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
}

// -------------------------------------------------------------------

// stReqLeitaiSortList

// optional uint32 beginRank = 1;
inline bool stReqLeitaiSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLeitaiSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLeitaiSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLeitaiSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stReqLeitaiSortList::beginrank() const {
  return beginrank_;
}
inline void stReqLeitaiSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// -------------------------------------------------------------------

// stLeitaiSortListItem

// optional uint32 charID = 1;
inline bool stLeitaiSortListItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLeitaiSortListItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLeitaiSortListItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLeitaiSortListItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stLeitaiSortListItem::charid() const {
  return charid_;
}
inline void stLeitaiSortListItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stLeitaiSortListItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLeitaiSortListItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLeitaiSortListItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLeitaiSortListItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stLeitaiSortListItem::name() const {
  return *name_;
}
inline void stLeitaiSortListItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stLeitaiSortListItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stLeitaiSortListItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stLeitaiSortListItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stLeitaiSortListItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stLeitaiSortListItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 useTime = 3;
inline bool stLeitaiSortListItem::has_usetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stLeitaiSortListItem::set_has_usetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stLeitaiSortListItem::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stLeitaiSortListItem::clear_usetime() {
  usetime_ = 0u;
  clear_has_usetime();
}
inline ::google::protobuf::uint32 stLeitaiSortListItem::usetime() const {
  return usetime_;
}
inline void stLeitaiSortListItem::set_usetime(::google::protobuf::uint32 value) {
  set_has_usetime();
  usetime_ = value;
}

// optional uint32 level = 4;
inline bool stLeitaiSortListItem::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stLeitaiSortListItem::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stLeitaiSortListItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stLeitaiSortListItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stLeitaiSortListItem::level() const {
  return level_;
}
inline void stLeitaiSortListItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 5;
inline bool stLeitaiSortListItem::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stLeitaiSortListItem::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stLeitaiSortListItem::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stLeitaiSortListItem::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stLeitaiSortListItem::job() const {
  return job_;
}
inline void stLeitaiSortListItem::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stLeitaiSortListItem::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stLeitaiSortListItem::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stLeitaiSortListItem::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stLeitaiSortListItem::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stLeitaiSortListItem::sex() const {
  return sex_;
}
inline void stLeitaiSortListItem::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 photoID = 7;
inline bool stLeitaiSortListItem::has_photoid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stLeitaiSortListItem::set_has_photoid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stLeitaiSortListItem::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stLeitaiSortListItem::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stLeitaiSortListItem::photoid() const {
  return photoid_;
}
inline void stLeitaiSortListItem::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stRetLeitaiSortList

// repeated .SortProto.stLeitaiSortListItem sortListItem = 1;
inline int stRetLeitaiSortList::sortlistitem_size() const {
  return sortlistitem_.size();
}
inline void stRetLeitaiSortList::clear_sortlistitem() {
  sortlistitem_.Clear();
}
inline const ::SortProto::stLeitaiSortListItem& stRetLeitaiSortList::sortlistitem(int index) const {
  return sortlistitem_.Get(index);
}
inline ::SortProto::stLeitaiSortListItem* stRetLeitaiSortList::mutable_sortlistitem(int index) {
  return sortlistitem_.Mutable(index);
}
inline ::SortProto::stLeitaiSortListItem* stRetLeitaiSortList::add_sortlistitem() {
  return sortlistitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stLeitaiSortListItem >&
stRetLeitaiSortList::sortlistitem() const {
  return sortlistitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stLeitaiSortListItem >*
stRetLeitaiSortList::mutable_sortlistitem() {
  return &sortlistitem_;
}

// optional uint32 beginRank = 2;
inline bool stRetLeitaiSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetLeitaiSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetLeitaiSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetLeitaiSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stRetLeitaiSortList::beginrank() const {
  return beginrank_;
}
inline void stRetLeitaiSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// optional uint32 myRank = 3;
inline bool stRetLeitaiSortList::has_myrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetLeitaiSortList::set_has_myrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetLeitaiSortList::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetLeitaiSortList::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stRetLeitaiSortList::myrank() const {
  return myrank_;
}
inline void stRetLeitaiSortList::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// -------------------------------------------------------------------

// stSendLeitaiResult

// repeated .SortProto.stSynHeroHP heroHP = 1;
inline int stSendLeitaiResult::herohp_size() const {
  return herohp_.size();
}
inline void stSendLeitaiResult::clear_herohp() {
  herohp_.Clear();
}
inline const ::SortProto::stSynHeroHP& stSendLeitaiResult::herohp(int index) const {
  return herohp_.Get(index);
}
inline ::SortProto::stSynHeroHP* stSendLeitaiResult::mutable_herohp(int index) {
  return herohp_.Mutable(index);
}
inline ::SortProto::stSynHeroHP* stSendLeitaiResult::add_herohp() {
  return herohp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP >&
stSendLeitaiResult::herohp() const {
  return herohp_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynHeroHP >*
stSendLeitaiResult::mutable_herohp() {
  return &herohp_;
}

// optional uint32 curUserHP = 2;
inline bool stSendLeitaiResult::has_curuserhp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendLeitaiResult::set_has_curuserhp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendLeitaiResult::clear_has_curuserhp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendLeitaiResult::clear_curuserhp() {
  curuserhp_ = 0u;
  clear_has_curuserhp();
}
inline ::google::protobuf::uint32 stSendLeitaiResult::curuserhp() const {
  return curuserhp_;
}
inline void stSendLeitaiResult::set_curuserhp(::google::protobuf::uint32 value) {
  set_has_curuserhp();
  curuserhp_ = value;
}

// optional uint32 useTime = 3;
inline bool stSendLeitaiResult::has_usetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendLeitaiResult::set_has_usetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendLeitaiResult::clear_has_usetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendLeitaiResult::clear_usetime() {
  usetime_ = 0u;
  clear_has_usetime();
}
inline ::google::protobuf::uint32 stSendLeitaiResult::usetime() const {
  return usetime_;
}
inline void stSendLeitaiResult::set_usetime(::google::protobuf::uint32 value) {
  set_has_usetime();
  usetime_ = value;
}

// -------------------------------------------------------------------

// stRetSendLeitaiResult

// optional .SortProto.stRetSendLeitaiResult.eResult result = 1;
inline bool stRetSendLeitaiResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetSendLeitaiResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetSendLeitaiResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetSendLeitaiResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetSendLeitaiResult_eResult stRetSendLeitaiResult::result() const {
  return static_cast< ::SortProto::stRetSendLeitaiResult_eResult >(result_);
}
inline void stRetSendLeitaiResult::set_result(::SortProto::stRetSendLeitaiResult_eResult value) {
  assert(::SortProto::stRetSendLeitaiResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stNotifySelectLeitaiMode

// -------------------------------------------------------------------

// stSelectLeiTaiMode

// optional .SortProto.eLeitaiMode mode = 1;
inline bool stSelectLeiTaiMode::has_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSelectLeiTaiMode::set_has_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSelectLeiTaiMode::clear_has_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSelectLeiTaiMode::clear_mode() {
  mode_ = 1;
  clear_has_mode();
}
inline ::SortProto::eLeitaiMode stSelectLeiTaiMode::mode() const {
  return static_cast< ::SortProto::eLeitaiMode >(mode_);
}
inline void stSelectLeiTaiMode::set_mode(::SortProto::eLeitaiMode value) {
  assert(::SortProto::eLeitaiMode_IsValid(value));
  set_has_mode();
  mode_ = value;
}

// -------------------------------------------------------------------

// stSelectLeiTaiModeResult

// optional .SortProto.stSelectLeiTaiModeResult.eResult result = 1;
inline bool stSelectLeiTaiModeResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSelectLeiTaiModeResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSelectLeiTaiModeResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSelectLeiTaiModeResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stSelectLeiTaiModeResult_eResult stSelectLeiTaiModeResult::result() const {
  return static_cast< ::SortProto::stSelectLeiTaiModeResult_eResult >(result_);
}
inline void stSelectLeiTaiModeResult::set_result(::SortProto::stSelectLeiTaiModeResult_eResult value) {
  assert(::SortProto::stSelectLeiTaiModeResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stResetLeitaiInfo

// optional uint32 charID = 1;
inline bool stResetLeitaiInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetLeitaiInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetLeitaiInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetLeitaiInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResetLeitaiInfo::charid() const {
  return charid_;
}
inline void stResetLeitaiInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResetLeitaiInfoResult

// optional .SortProto.stResetLeitaiInfoResult.eResult result = 1;
inline bool stResetLeitaiInfoResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetLeitaiInfoResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetLeitaiInfoResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetLeitaiInfoResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stResetLeitaiInfoResult_eResult stResetLeitaiInfoResult::result() const {
  return static_cast< ::SortProto::stResetLeitaiInfoResult_eResult >(result_);
}
inline void stResetLeitaiInfoResult::set_result(::SortProto::stResetLeitaiInfoResult_eResult value) {
  assert(::SortProto::stResetLeitaiInfoResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqDrawHeroSortList

// optional uint32 fromRank = 1;
inline bool stReqDrawHeroSortList::has_fromrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawHeroSortList::set_has_fromrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawHeroSortList::clear_has_fromrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawHeroSortList::clear_fromrank() {
  fromrank_ = 0u;
  clear_has_fromrank();
}
inline ::google::protobuf::uint32 stReqDrawHeroSortList::fromrank() const {
  return fromrank_;
}
inline void stReqDrawHeroSortList::set_fromrank(::google::protobuf::uint32 value) {
  set_has_fromrank();
  fromrank_ = value;
}

// -------------------------------------------------------------------

// stDrawHeroSortItem

// optional uint32 charID = 1;
inline bool stDrawHeroSortItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDrawHeroSortItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDrawHeroSortItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDrawHeroSortItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stDrawHeroSortItem::charid() const {
  return charid_;
}
inline void stDrawHeroSortItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stDrawHeroSortItem::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDrawHeroSortItem::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDrawHeroSortItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDrawHeroSortItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stDrawHeroSortItem::name() const {
  return *name_;
}
inline void stDrawHeroSortItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stDrawHeroSortItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stDrawHeroSortItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDrawHeroSortItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stDrawHeroSortItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDrawHeroSortItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stDrawHeroSortItem::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDrawHeroSortItem::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDrawHeroSortItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDrawHeroSortItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stDrawHeroSortItem::level() const {
  return level_;
}
inline void stDrawHeroSortItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 score = 4;
inline bool stDrawHeroSortItem::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDrawHeroSortItem::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDrawHeroSortItem::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDrawHeroSortItem::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stDrawHeroSortItem::score() const {
  return score_;
}
inline void stDrawHeroSortItem::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 job = 5;
inline bool stDrawHeroSortItem::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stDrawHeroSortItem::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stDrawHeroSortItem::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stDrawHeroSortItem::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stDrawHeroSortItem::job() const {
  return job_;
}
inline void stDrawHeroSortItem::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stDrawHeroSortItem::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stDrawHeroSortItem::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stDrawHeroSortItem::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stDrawHeroSortItem::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stDrawHeroSortItem::sex() const {
  return sex_;
}
inline void stDrawHeroSortItem::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// -------------------------------------------------------------------

// stDrawHeroSortList

// optional uint32 beginRank = 1;
inline bool stDrawHeroSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDrawHeroSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDrawHeroSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDrawHeroSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stDrawHeroSortList::beginrank() const {
  return beginrank_;
}
inline void stDrawHeroSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// repeated .SortProto.stDrawHeroSortItem sortItem = 2;
inline int stDrawHeroSortList::sortitem_size() const {
  return sortitem_.size();
}
inline void stDrawHeroSortList::clear_sortitem() {
  sortitem_.Clear();
}
inline const ::SortProto::stDrawHeroSortItem& stDrawHeroSortList::sortitem(int index) const {
  return sortitem_.Get(index);
}
inline ::SortProto::stDrawHeroSortItem* stDrawHeroSortList::mutable_sortitem(int index) {
  return sortitem_.Mutable(index);
}
inline ::SortProto::stDrawHeroSortItem* stDrawHeroSortList::add_sortitem() {
  return sortitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stDrawHeroSortItem >&
stDrawHeroSortList::sortitem() const {
  return sortitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stDrawHeroSortItem >*
stDrawHeroSortList::mutable_sortitem() {
  return &sortitem_;
}

// optional uint32 myRank = 3;
inline bool stDrawHeroSortList::has_myrank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDrawHeroSortList::set_has_myrank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDrawHeroSortList::clear_has_myrank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDrawHeroSortList::clear_myrank() {
  myrank_ = 0u;
  clear_has_myrank();
}
inline ::google::protobuf::uint32 stDrawHeroSortList::myrank() const {
  return myrank_;
}
inline void stDrawHeroSortList::set_myrank(::google::protobuf::uint32 value) {
  set_has_myrank();
  myrank_ = value;
}

// optional uint32 score = 4;
inline bool stDrawHeroSortList::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDrawHeroSortList::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDrawHeroSortList::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDrawHeroSortList::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stDrawHeroSortList::score() const {
  return score_;
}
inline void stDrawHeroSortList::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// stReqOne2OnePVPMatch

// optional uint32 charID = 1;
inline bool stReqOne2OnePVPMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOne2OnePVPMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOne2OnePVPMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOne2OnePVPMatch::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOne2OnePVPMatch::charid() const {
  return charid_;
}
inline void stReqOne2OnePVPMatch::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOne2OnePVPMatchResult

// optional .SortProto.stOne2OnePVPMatchResult.eResult result = 1;
inline bool stOne2OnePVPMatchResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOne2OnePVPMatchResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOne2OnePVPMatchResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOne2OnePVPMatchResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stOne2OnePVPMatchResult_eResult stOne2OnePVPMatchResult::result() const {
  return static_cast< ::SortProto::stOne2OnePVPMatchResult_eResult >(result_);
}
inline void stOne2OnePVPMatchResult::set_result(::SortProto::stOne2OnePVPMatchResult_eResult value) {
  assert(::SortProto::stOne2OnePVPMatchResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stCancelOne2OnePVPMatch

// optional uint32 charID = 1;
inline bool stCancelOne2OnePVPMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelOne2OnePVPMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelOne2OnePVPMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelOne2OnePVPMatch::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCancelOne2OnePVPMatch::charid() const {
  return charid_;
}
inline void stCancelOne2OnePVPMatch::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCancelOne2OnePVPResult

// optional .SortProto.stCancelOne2OnePVPResult.eResult result = 1;
inline bool stCancelOne2OnePVPResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelOne2OnePVPResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelOne2OnePVPResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelOne2OnePVPResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stCancelOne2OnePVPResult_eResult stCancelOne2OnePVPResult::result() const {
  return static_cast< ::SortProto::stCancelOne2OnePVPResult_eResult >(result_);
}
inline void stCancelOne2OnePVPResult::set_result(::SortProto::stCancelOne2OnePVPResult_eResult value) {
  assert(::SortProto::stCancelOne2OnePVPResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqMySortListInfo

// optional uint32 charID = 1;
inline bool stReqMySortListInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqMySortListInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqMySortListInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqMySortListInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqMySortListInfo::charid() const {
  return charid_;
}
inline void stReqMySortListInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetMySortListInfo

// optional uint32 one2onePVPRank = 1;
inline bool stRetMySortListInfo::has_one2onepvprank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetMySortListInfo::set_has_one2onepvprank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetMySortListInfo::clear_has_one2onepvprank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetMySortListInfo::clear_one2onepvprank() {
  one2onepvprank_ = 0u;
  clear_has_one2onepvprank();
}
inline ::google::protobuf::uint32 stRetMySortListInfo::one2onepvprank() const {
  return one2onepvprank_;
}
inline void stRetMySortListInfo::set_one2onepvprank(::google::protobuf::uint32 value) {
  set_has_one2onepvprank();
  one2onepvprank_ = value;
}

// optional uint32 arenaPKRank = 2;
inline bool stRetMySortListInfo::has_arenapkrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetMySortListInfo::set_has_arenapkrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetMySortListInfo::clear_has_arenapkrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetMySortListInfo::clear_arenapkrank() {
  arenapkrank_ = 0u;
  clear_has_arenapkrank();
}
inline ::google::protobuf::uint32 stRetMySortListInfo::arenapkrank() const {
  return arenapkrank_;
}
inline void stRetMySortListInfo::set_arenapkrank(::google::protobuf::uint32 value) {
  set_has_arenapkrank();
  arenapkrank_ = value;
}

// optional uint32 copymapRank = 3;
inline bool stRetMySortListInfo::has_copymaprank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetMySortListInfo::set_has_copymaprank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetMySortListInfo::clear_has_copymaprank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetMySortListInfo::clear_copymaprank() {
  copymaprank_ = 0u;
  clear_has_copymaprank();
}
inline ::google::protobuf::uint32 stRetMySortListInfo::copymaprank() const {
  return copymaprank_;
}
inline void stRetMySortListInfo::set_copymaprank(::google::protobuf::uint32 value) {
  set_has_copymaprank();
  copymaprank_ = value;
}

// optional uint32 battlePowerRank = 4;
inline bool stRetMySortListInfo::has_battlepowerrank() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetMySortListInfo::set_has_battlepowerrank() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetMySortListInfo::clear_has_battlepowerrank() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetMySortListInfo::clear_battlepowerrank() {
  battlepowerrank_ = 0u;
  clear_has_battlepowerrank();
}
inline ::google::protobuf::uint32 stRetMySortListInfo::battlepowerrank() const {
  return battlepowerrank_;
}
inline void stRetMySortListInfo::set_battlepowerrank(::google::protobuf::uint32 value) {
  set_has_battlepowerrank();
  battlepowerrank_ = value;
}

// -------------------------------------------------------------------

// stLeitaiMoveHero2BattlePos

// optional uint32 heroID = 1;
inline bool stLeitaiMoveHero2BattlePos::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLeitaiMoveHero2BattlePos::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLeitaiMoveHero2BattlePos::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLeitaiMoveHero2BattlePos::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stLeitaiMoveHero2BattlePos::heroid() const {
  return heroid_;
}
inline void stLeitaiMoveHero2BattlePos::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 pos = 2;
inline bool stLeitaiMoveHero2BattlePos::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLeitaiMoveHero2BattlePos::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLeitaiMoveHero2BattlePos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLeitaiMoveHero2BattlePos::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stLeitaiMoveHero2BattlePos::pos() const {
  return pos_;
}
inline void stLeitaiMoveHero2BattlePos::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stLeitaiMoveHero2BattlePosError

// optional .SortProto.stLeitaiMoveHero2BattlePosError.eResult result = 1;
inline bool stLeitaiMoveHero2BattlePosError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLeitaiMoveHero2BattlePosError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLeitaiMoveHero2BattlePosError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLeitaiMoveHero2BattlePosError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stLeitaiMoveHero2BattlePosError_eResult stLeitaiMoveHero2BattlePosError::result() const {
  return static_cast< ::SortProto::stLeitaiMoveHero2BattlePosError_eResult >(result_);
}
inline void stLeitaiMoveHero2BattlePosError::set_result(::SortProto::stLeitaiMoveHero2BattlePosError_eResult value) {
  assert(::SortProto::stLeitaiMoveHero2BattlePosError_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stLeitaiCancelGoOutForBattle

// optional uint32 pos = 1;
inline bool stLeitaiCancelGoOutForBattle::has_pos() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLeitaiCancelGoOutForBattle::set_has_pos() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLeitaiCancelGoOutForBattle::clear_has_pos() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLeitaiCancelGoOutForBattle::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stLeitaiCancelGoOutForBattle::pos() const {
  return pos_;
}
inline void stLeitaiCancelGoOutForBattle::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stLeitaiCancelGoOutForBattleResult

// optional .SortProto.stLeitaiCancelGoOutForBattleResult.eResult result = 1;
inline bool stLeitaiCancelGoOutForBattleResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLeitaiCancelGoOutForBattleResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLeitaiCancelGoOutForBattleResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLeitaiCancelGoOutForBattleResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stLeitaiCancelGoOutForBattleResult_eResult stLeitaiCancelGoOutForBattleResult::result() const {
  return static_cast< ::SortProto::stLeitaiCancelGoOutForBattleResult_eResult >(result_);
}
inline void stLeitaiCancelGoOutForBattleResult::set_result(::SortProto::stLeitaiCancelGoOutForBattleResult_eResult value) {
  assert(::SortProto::stLeitaiCancelGoOutForBattleResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stCommitArenaResult

// optional bool win = 1;
inline bool stCommitArenaResult::has_win() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCommitArenaResult::set_has_win() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCommitArenaResult::clear_has_win() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCommitArenaResult::clear_win() {
  win_ = false;
  clear_has_win();
}
inline bool stCommitArenaResult::win() const {
  return win_;
}
inline void stCommitArenaResult::set_win(bool value) {
  set_has_win();
  win_ = value;
}

// -------------------------------------------------------------------

// stRetCommintArenaResult

// optional .SortProto.stRetCommintArenaResult.eResult result = 1;
inline bool stRetCommintArenaResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetCommintArenaResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetCommintArenaResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetCommintArenaResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetCommintArenaResult_eResult stRetCommintArenaResult::result() const {
  return static_cast< ::SortProto::stRetCommintArenaResult_eResult >(result_);
}
inline void stRetCommintArenaResult::set_result(::SortProto::stRetCommintArenaResult_eResult value) {
  assert(::SortProto::stRetCommintArenaResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqEnterLeitaiScene

// optional uint32 otherID = 1;
inline bool stReqEnterLeitaiScene::has_otherid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEnterLeitaiScene::set_has_otherid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEnterLeitaiScene::clear_has_otherid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEnterLeitaiScene::clear_otherid() {
  otherid_ = 0u;
  clear_has_otherid();
}
inline ::google::protobuf::uint32 stReqEnterLeitaiScene::otherid() const {
  return otherid_;
}
inline void stReqEnterLeitaiScene::set_otherid(::google::protobuf::uint32 value) {
  set_has_otherid();
  otherid_ = value;
}

// -------------------------------------------------------------------

// stReqResetLeitaiBuff

// optional uint32 charID = 1;
inline bool stReqResetLeitaiBuff::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResetLeitaiBuff::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResetLeitaiBuff::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResetLeitaiBuff::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResetLeitaiBuff::charid() const {
  return charid_;
}
inline void stReqResetLeitaiBuff::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResetLeitaiBuffResult

// optional uint32 buffID = 1;
inline bool stResetLeitaiBuffResult::has_buffid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetLeitaiBuffResult::set_has_buffid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetLeitaiBuffResult::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetLeitaiBuffResult::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 stResetLeitaiBuffResult::buffid() const {
  return buffid_;
}
inline void stResetLeitaiBuffResult::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
}

// optional .SortProto.stResetLeitaiBuffResult.eResult result = 2;
inline bool stResetLeitaiBuffResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResetLeitaiBuffResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResetLeitaiBuffResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResetLeitaiBuffResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stResetLeitaiBuffResult_eResult stResetLeitaiBuffResult::result() const {
  return static_cast< ::SortProto::stResetLeitaiBuffResult_eResult >(result_);
}
inline void stResetLeitaiBuffResult::set_result(::SortProto::stResetLeitaiBuffResult_eResult value) {
  assert(::SortProto::stResetLeitaiBuffResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqBuffResetTime

// optional uint32 charID = 1;
inline bool stReqBuffResetTime::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBuffResetTime::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBuffResetTime::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBuffResetTime::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqBuffResetTime::charid() const {
  return charid_;
}
inline void stReqBuffResetTime::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetBuffResetTime

// optional uint32 remainTime = 1;
inline bool stRetBuffResetTime::has_remaintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetBuffResetTime::set_has_remaintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetBuffResetTime::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetBuffResetTime::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stRetBuffResetTime::remaintime() const {
  return remaintime_;
}
inline void stRetBuffResetTime::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// optional uint32 buffID = 2;
inline bool stRetBuffResetTime::has_buffid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetBuffResetTime::set_has_buffid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetBuffResetTime::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetBuffResetTime::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 stRetBuffResetTime::buffid() const {
  return buffid_;
}
inline void stRetBuffResetTime::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
}

// -------------------------------------------------------------------

// stArenaReachNewRank

// optional uint32 newRank = 1;
inline bool stArenaReachNewRank::has_newrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stArenaReachNewRank::set_has_newrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stArenaReachNewRank::clear_has_newrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stArenaReachNewRank::clear_newrank() {
  newrank_ = 0u;
  clear_has_newrank();
}
inline ::google::protobuf::uint32 stArenaReachNewRank::newrank() const {
  return newrank_;
}
inline void stArenaReachNewRank::set_newrank(::google::protobuf::uint32 value) {
  set_has_newrank();
  newrank_ = value;
}

// optional uint32 oldRank = 2;
inline bool stArenaReachNewRank::has_oldrank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stArenaReachNewRank::set_has_oldrank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stArenaReachNewRank::clear_has_oldrank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stArenaReachNewRank::clear_oldrank() {
  oldrank_ = 0u;
  clear_has_oldrank();
}
inline ::google::protobuf::uint32 stArenaReachNewRank::oldrank() const {
  return oldrank_;
}
inline void stArenaReachNewRank::set_oldrank(::google::protobuf::uint32 value) {
  set_has_oldrank();
  oldrank_ = value;
}

// optional uint32 rewardNum = 3;
inline bool stArenaReachNewRank::has_rewardnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stArenaReachNewRank::set_has_rewardnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stArenaReachNewRank::clear_has_rewardnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stArenaReachNewRank::clear_rewardnum() {
  rewardnum_ = 0u;
  clear_has_rewardnum();
}
inline ::google::protobuf::uint32 stArenaReachNewRank::rewardnum() const {
  return rewardnum_;
}
inline void stArenaReachNewRank::set_rewardnum(::google::protobuf::uint32 value) {
  set_has_rewardnum();
  rewardnum_ = value;
}

// -------------------------------------------------------------------

// stReqResetArenaChallengeNum

// optional uint32 charID = 1;
inline bool stReqResetArenaChallengeNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResetArenaChallengeNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResetArenaChallengeNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResetArenaChallengeNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResetArenaChallengeNum::charid() const {
  return charid_;
}
inline void stReqResetArenaChallengeNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResetArenaChallengeNunResult

// optional .SortProto.stResetArenaChallengeNunResult.eResult result = 1;
inline bool stResetArenaChallengeNunResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetArenaChallengeNunResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetArenaChallengeNunResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetArenaChallengeNunResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stResetArenaChallengeNunResult_eResult stResetArenaChallengeNunResult::result() const {
  return static_cast< ::SortProto::stResetArenaChallengeNunResult_eResult >(result_);
}
inline void stResetArenaChallengeNunResult::set_result(::SortProto::stResetArenaChallengeNunResult_eResult value) {
  assert(::SortProto::stResetArenaChallengeNunResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqClearArenaCD

// optional uint32 charID = 1;
inline bool stReqClearArenaCD::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqClearArenaCD::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqClearArenaCD::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqClearArenaCD::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqClearArenaCD::charid() const {
  return charid_;
}
inline void stReqClearArenaCD::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stClearArenaCDResult

// optional .SortProto.stClearArenaCDResult.eResult result = 1;
inline bool stClearArenaCDResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stClearArenaCDResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stClearArenaCDResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stClearArenaCDResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stClearArenaCDResult_eResult stClearArenaCDResult::result() const {
  return static_cast< ::SortProto::stClearArenaCDResult_eResult >(result_);
}
inline void stClearArenaCDResult::set_result(::SortProto::stClearArenaCDResult_eResult value) {
  assert(::SortProto::stClearArenaCDResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqOpenSvrBPRank

// optional uint32 charID = 1;
inline bool stReqOpenSvrBPRank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenSvrBPRank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenSvrBPRank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenSvrBPRank::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenSvrBPRank::charid() const {
  return charid_;
}
inline void stReqOpenSvrBPRank::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBPRankItemInfo

// optional uint32 charID = 1;
inline bool stBPRankItemInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBPRankItemInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBPRankItemInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBPRankItemInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stBPRankItemInfo::charid() const {
  return charid_;
}
inline void stBPRankItemInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stBPRankItemInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBPRankItemInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBPRankItemInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBPRankItemInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stBPRankItemInfo::name() const {
  return *name_;
}
inline void stBPRankItemInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBPRankItemInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stBPRankItemInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stBPRankItemInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stBPRankItemInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stBPRankItemInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 3;
inline bool stBPRankItemInfo::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBPRankItemInfo::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBPRankItemInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBPRankItemInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stBPRankItemInfo::job() const {
  return job_;
}
inline void stBPRankItemInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 4;
inline bool stBPRankItemInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBPRankItemInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBPRankItemInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBPRankItemInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stBPRankItemInfo::sex() const {
  return sex_;
}
inline void stBPRankItemInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 5;
inline bool stBPRankItemInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stBPRankItemInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stBPRankItemInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stBPRankItemInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stBPRankItemInfo::level() const {
  return level_;
}
inline void stBPRankItemInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 bpVal = 6;
inline bool stBPRankItemInfo::has_bpval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stBPRankItemInfo::set_has_bpval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stBPRankItemInfo::clear_has_bpval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stBPRankItemInfo::clear_bpval() {
  bpval_ = 0u;
  clear_has_bpval();
}
inline ::google::protobuf::uint32 stBPRankItemInfo::bpval() const {
  return bpval_;
}
inline void stBPRankItemInfo::set_bpval(::google::protobuf::uint32 value) {
  set_has_bpval();
  bpval_ = value;
}

// -------------------------------------------------------------------

// stRetOpenSvrBPRank

// repeated .SortProto.stBPRankItemInfo items = 1;
inline int stRetOpenSvrBPRank::items_size() const {
  return items_.size();
}
inline void stRetOpenSvrBPRank::clear_items() {
  items_.Clear();
}
inline const ::SortProto::stBPRankItemInfo& stRetOpenSvrBPRank::items(int index) const {
  return items_.Get(index);
}
inline ::SortProto::stBPRankItemInfo* stRetOpenSvrBPRank::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SortProto::stBPRankItemInfo* stRetOpenSvrBPRank::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stBPRankItemInfo >&
stRetOpenSvrBPRank::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stBPRankItemInfo >*
stRetOpenSvrBPRank::mutable_items() {
  return &items_;
}

// optional uint32 openSvrTime = 2;
inline bool stRetOpenSvrBPRank::has_opensvrtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetOpenSvrBPRank::set_has_opensvrtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetOpenSvrBPRank::clear_has_opensvrtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetOpenSvrBPRank::clear_opensvrtime() {
  opensvrtime_ = 0u;
  clear_has_opensvrtime();
}
inline ::google::protobuf::uint32 stRetOpenSvrBPRank::opensvrtime() const {
  return opensvrtime_;
}
inline void stRetOpenSvrBPRank::set_opensvrtime(::google::protobuf::uint32 value) {
  set_has_opensvrtime();
  opensvrtime_ = value;
}

// -------------------------------------------------------------------

// stReqExpeditionInfo

// optional uint32 charID = 1;
inline bool stReqExpeditionInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqExpeditionInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqExpeditionInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqExpeditionInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqExpeditionInfo::charid() const {
  return charid_;
}
inline void stReqExpeditionInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stExpeditionItem

// optional uint32 expeditionId = 1;
inline bool stExpeditionItem::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpeditionItem::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpeditionItem::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpeditionItem::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stExpeditionItem::expeditionid() const {
  return expeditionid_;
}
inline void stExpeditionItem::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional uint32 finishTime = 2;
inline bool stExpeditionItem::has_finishtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stExpeditionItem::set_has_finishtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stExpeditionItem::clear_has_finishtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stExpeditionItem::clear_finishtime() {
  finishtime_ = 0u;
  clear_has_finishtime();
}
inline ::google::protobuf::uint32 stExpeditionItem::finishtime() const {
  return finishtime_;
}
inline void stExpeditionItem::set_finishtime(::google::protobuf::uint32 value) {
  set_has_finishtime();
  finishtime_ = value;
}

// repeated uint32 heroIds = 3;
inline int stExpeditionItem::heroids_size() const {
  return heroids_.size();
}
inline void stExpeditionItem::clear_heroids() {
  heroids_.Clear();
}
inline ::google::protobuf::uint32 stExpeditionItem::heroids(int index) const {
  return heroids_.Get(index);
}
inline void stExpeditionItem::set_heroids(int index, ::google::protobuf::uint32 value) {
  heroids_.Set(index, value);
}
inline void stExpeditionItem::add_heroids(::google::protobuf::uint32 value) {
  heroids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stExpeditionItem::heroids() const {
  return heroids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stExpeditionItem::mutable_heroids() {
  return &heroids_;
}

// -------------------------------------------------------------------

// stRetExpeditionInfo

// optional .SortProto.stRetExpeditionInfo.eResult result = 1;
inline bool stRetExpeditionInfo::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetExpeditionInfo::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetExpeditionInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetExpeditionInfo::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetExpeditionInfo_eResult stRetExpeditionInfo::result() const {
  return static_cast< ::SortProto::stRetExpeditionInfo_eResult >(result_);
}
inline void stRetExpeditionInfo::set_result(::SortProto::stRetExpeditionInfo_eResult value) {
  assert(::SortProto::stRetExpeditionInfo_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 usedNum = 2;
inline bool stRetExpeditionInfo::has_usednum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetExpeditionInfo::set_has_usednum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetExpeditionInfo::clear_has_usednum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetExpeditionInfo::clear_usednum() {
  usednum_ = 0u;
  clear_has_usednum();
}
inline ::google::protobuf::uint32 stRetExpeditionInfo::usednum() const {
  return usednum_;
}
inline void stRetExpeditionInfo::set_usednum(::google::protobuf::uint32 value) {
  set_has_usednum();
  usednum_ = value;
}

// repeated .SortProto.stExpeditionItem items = 3;
inline int stRetExpeditionInfo::items_size() const {
  return items_.size();
}
inline void stRetExpeditionInfo::clear_items() {
  items_.Clear();
}
inline const ::SortProto::stExpeditionItem& stRetExpeditionInfo::items(int index) const {
  return items_.Get(index);
}
inline ::SortProto::stExpeditionItem* stRetExpeditionInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SortProto::stExpeditionItem* stRetExpeditionInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem >&
stRetExpeditionInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem >*
stRetExpeditionInfo::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stReqExpedition

// optional uint32 expeditionId = 1;
inline bool stReqExpedition::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqExpedition::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqExpedition::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqExpedition::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stReqExpedition::expeditionid() const {
  return expeditionid_;
}
inline void stReqExpedition::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// repeated uint32 heroIds = 2;
inline int stReqExpedition::heroids_size() const {
  return heroids_.size();
}
inline void stReqExpedition::clear_heroids() {
  heroids_.Clear();
}
inline ::google::protobuf::uint32 stReqExpedition::heroids(int index) const {
  return heroids_.Get(index);
}
inline void stReqExpedition::set_heroids(int index, ::google::protobuf::uint32 value) {
  heroids_.Set(index, value);
}
inline void stReqExpedition::add_heroids(::google::protobuf::uint32 value) {
  heroids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stReqExpedition::heroids() const {
  return heroids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stReqExpedition::mutable_heroids() {
  return &heroids_;
}

// -------------------------------------------------------------------

// stRetExpedition

// optional uint32 expeditionId = 1;
inline bool stRetExpedition::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetExpedition::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetExpedition::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetExpedition::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stRetExpedition::expeditionid() const {
  return expeditionid_;
}
inline void stRetExpedition::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional .SortProto.stRetExpedition.eResult result = 2;
inline bool stRetExpedition::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetExpedition::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetExpedition::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetExpedition::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetExpedition_eResult stRetExpedition::result() const {
  return static_cast< ::SortProto::stRetExpedition_eResult >(result_);
}
inline void stRetExpedition::set_result(::SortProto::stRetExpedition_eResult value) {
  assert(::SortProto::stRetExpedition_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqExpeditionReward

// optional uint32 expeditionId = 1;
inline bool stReqExpeditionReward::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqExpeditionReward::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqExpeditionReward::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqExpeditionReward::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stReqExpeditionReward::expeditionid() const {
  return expeditionid_;
}
inline void stReqExpeditionReward::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// -------------------------------------------------------------------

// stRetExpeditionReward

// optional uint32 expeditionId = 1;
inline bool stRetExpeditionReward::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetExpeditionReward::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetExpeditionReward::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetExpeditionReward::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stRetExpeditionReward::expeditionid() const {
  return expeditionid_;
}
inline void stRetExpeditionReward::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional .SortProto.stRetExpeditionReward.eResult result = 2;
inline bool stRetExpeditionReward::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetExpeditionReward::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetExpeditionReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetExpeditionReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetExpeditionReward_eResult stRetExpeditionReward::result() const {
  return static_cast< ::SortProto::stRetExpeditionReward_eResult >(result_);
}
inline void stRetExpeditionReward::set_result(::SortProto::stRetExpeditionReward_eResult value) {
  assert(::SortProto::stRetExpeditionReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqFastExpedition

// optional uint32 expeditionId = 1;
inline bool stReqFastExpedition::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqFastExpedition::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqFastExpedition::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqFastExpedition::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stReqFastExpedition::expeditionid() const {
  return expeditionid_;
}
inline void stReqFastExpedition::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// -------------------------------------------------------------------

// stRetFastExpedition

// optional uint32 expeditionId = 1;
inline bool stRetFastExpedition::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetFastExpedition::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetFastExpedition::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetFastExpedition::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stRetFastExpedition::expeditionid() const {
  return expeditionid_;
}
inline void stRetFastExpedition::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional .SortProto.stRetFastExpedition.eResult result = 2;
inline bool stRetFastExpedition::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetFastExpedition::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetFastExpedition::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetFastExpedition::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetFastExpedition_eResult stRetFastExpedition::result() const {
  return static_cast< ::SortProto::stRetFastExpedition_eResult >(result_);
}
inline void stRetFastExpedition::set_result(::SortProto::stRetFastExpedition_eResult value) {
  assert(::SortProto::stRetFastExpedition_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqCancelExpedition

// optional uint32 expeditionId = 1;
inline bool stReqCancelExpedition::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCancelExpedition::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCancelExpedition::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCancelExpedition::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stReqCancelExpedition::expeditionid() const {
  return expeditionid_;
}
inline void stReqCancelExpedition::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// -------------------------------------------------------------------

// stRetCancelExpedition

// optional uint32 expeditionId = 1;
inline bool stRetCancelExpedition::has_expeditionid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetCancelExpedition::set_has_expeditionid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetCancelExpedition::clear_has_expeditionid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetCancelExpedition::clear_expeditionid() {
  expeditionid_ = 0u;
  clear_has_expeditionid();
}
inline ::google::protobuf::uint32 stRetCancelExpedition::expeditionid() const {
  return expeditionid_;
}
inline void stRetCancelExpedition::set_expeditionid(::google::protobuf::uint32 value) {
  set_has_expeditionid();
  expeditionid_ = value;
}

// optional .SortProto.stRetCancelExpedition.eResult result = 2;
inline bool stRetCancelExpedition::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetCancelExpedition::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetCancelExpedition::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetCancelExpedition::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetCancelExpedition_eResult stRetCancelExpedition::result() const {
  return static_cast< ::SortProto::stRetCancelExpedition_eResult >(result_);
}
inline void stRetCancelExpedition::set_result(::SortProto::stRetCancelExpedition_eResult value) {
  assert(::SortProto::stRetCancelExpedition_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqExpeditionSummary

// optional uint32 charID = 1;
inline bool stReqExpeditionSummary::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqExpeditionSummary::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqExpeditionSummary::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqExpeditionSummary::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqExpeditionSummary::charid() const {
  return charid_;
}
inline void stReqExpeditionSummary::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetExpeditionSummary

// optional .SortProto.stRetExpeditionSummary.eResult result = 1;
inline bool stRetExpeditionSummary::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetExpeditionSummary::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetExpeditionSummary::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetExpeditionSummary::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetExpeditionSummary_eResult stRetExpeditionSummary::result() const {
  return static_cast< ::SortProto::stRetExpeditionSummary_eResult >(result_);
}
inline void stRetExpeditionSummary::set_result(::SortProto::stRetExpeditionSummary_eResult value) {
  assert(::SortProto::stRetExpeditionSummary_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 usedTimes = 2;
inline bool stRetExpeditionSummary::has_usedtimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetExpeditionSummary::set_has_usedtimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetExpeditionSummary::clear_has_usedtimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetExpeditionSummary::clear_usedtimes() {
  usedtimes_ = 0u;
  clear_has_usedtimes();
}
inline ::google::protobuf::uint32 stRetExpeditionSummary::usedtimes() const {
  return usedtimes_;
}
inline void stRetExpeditionSummary::set_usedtimes(::google::protobuf::uint32 value) {
  set_has_usedtimes();
  usedtimes_ = value;
}

// repeated .SortProto.stExpeditionItem items = 3;
inline int stRetExpeditionSummary::items_size() const {
  return items_.size();
}
inline void stRetExpeditionSummary::clear_items() {
  items_.Clear();
}
inline const ::SortProto::stExpeditionItem& stRetExpeditionSummary::items(int index) const {
  return items_.Get(index);
}
inline ::SortProto::stExpeditionItem* stRetExpeditionSummary::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::SortProto::stExpeditionItem* stRetExpeditionSummary::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem >&
stRetExpeditionSummary::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stExpeditionItem >*
stRetExpeditionSummary::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stReqGloryfashionSortList

// optional uint32 fromRank = 1;
inline bool stReqGloryfashionSortList::has_fromrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGloryfashionSortList::set_has_fromrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGloryfashionSortList::clear_has_fromrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGloryfashionSortList::clear_fromrank() {
  fromrank_ = 0u;
  clear_has_fromrank();
}
inline ::google::protobuf::uint32 stReqGloryfashionSortList::fromrank() const {
  return fromrank_;
}
inline void stReqGloryfashionSortList::set_fromrank(::google::protobuf::uint32 value) {
  set_has_fromrank();
  fromrank_ = value;
}

// -------------------------------------------------------------------

// stGloryfashionSortList

// optional uint32 beginRank = 1;
inline bool stGloryfashionSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGloryfashionSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGloryfashionSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGloryfashionSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stGloryfashionSortList::beginrank() const {
  return beginrank_;
}
inline void stGloryfashionSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// repeated string name = 2;
inline int stGloryfashionSortList::name_size() const {
  return name_.size();
}
inline void stGloryfashionSortList::clear_name() {
  name_.Clear();
}
inline const ::std::string& stGloryfashionSortList::name(int index) const {
  return name_.Get(index);
}
inline ::std::string* stGloryfashionSortList::mutable_name(int index) {
  return name_.Mutable(index);
}
inline void stGloryfashionSortList::set_name(int index, const ::std::string& value) {
  name_.Mutable(index)->assign(value);
}
inline void stGloryfashionSortList::set_name(int index, const char* value) {
  name_.Mutable(index)->assign(value);
}
inline void stGloryfashionSortList::set_name(int index, const char* value, size_t size) {
  name_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stGloryfashionSortList::add_name() {
  return name_.Add();
}
inline void stGloryfashionSortList::add_name(const ::std::string& value) {
  name_.Add()->assign(value);
}
inline void stGloryfashionSortList::add_name(const char* value) {
  name_.Add()->assign(value);
}
inline void stGloryfashionSortList::add_name(const char* value, size_t size) {
  name_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
stGloryfashionSortList::name() const {
  return name_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
stGloryfashionSortList::mutable_name() {
  return &name_;
}

// -------------------------------------------------------------------

// stReqEnterEmeraldDream

// optional uint32 levelID = 1;
inline bool stReqEnterEmeraldDream::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEnterEmeraldDream::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEnterEmeraldDream::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEnterEmeraldDream::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqEnterEmeraldDream::levelid() const {
  return levelid_;
}
inline void stReqEnterEmeraldDream::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stEnterEmeraldDreamResult

// optional .SortProto.stEnterEmeraldDreamResult.eResult result = 1;
inline bool stEnterEmeraldDreamResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterEmeraldDreamResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterEmeraldDreamResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterEmeraldDreamResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stEnterEmeraldDreamResult_eResult stEnterEmeraldDreamResult::result() const {
  return static_cast< ::SortProto::stEnterEmeraldDreamResult_eResult >(result_);
}
inline void stEnterEmeraldDreamResult::set_result(::SortProto::stEnterEmeraldDreamResult_eResult value) {
  assert(::SortProto::stEnterEmeraldDreamResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stResetFightNum

// optional uint32 charID = 1;
inline bool stResetFightNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetFightNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetFightNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetFightNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResetFightNum::charid() const {
  return charid_;
}
inline void stResetFightNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResetFightNumResult

// optional .SortProto.stResetFightNumResult.eResult result = 1;
inline bool stResetFightNumResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetFightNumResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetFightNumResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetFightNumResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stResetFightNumResult_eResult stResetFightNumResult::result() const {
  return static_cast< ::SortProto::stResetFightNumResult_eResult >(result_);
}
inline void stResetFightNumResult::set_result(::SortProto::stResetFightNumResult_eResult value) {
  assert(::SortProto::stResetFightNumResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqEmeraldDreamSortList

// optional uint32 fromRank = 1;
inline bool stReqEmeraldDreamSortList::has_fromrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEmeraldDreamSortList::set_has_fromrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEmeraldDreamSortList::clear_has_fromrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEmeraldDreamSortList::clear_fromrank() {
  fromrank_ = 0u;
  clear_has_fromrank();
}
inline ::google::protobuf::uint32 stReqEmeraldDreamSortList::fromrank() const {
  return fromrank_;
}
inline void stReqEmeraldDreamSortList::set_fromrank(::google::protobuf::uint32 value) {
  set_has_fromrank();
  fromrank_ = value;
}

// -------------------------------------------------------------------

// SortListInfo

// optional uint32 charID = 1;
inline bool SortListInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SortListInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SortListInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SortListInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 SortListInfo::charid() const {
  return charid_;
}
inline void SortListInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool SortListInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SortListInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SortListInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SortListInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& SortListInfo::name() const {
  return *name_;
}
inline void SortListInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SortListInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void SortListInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SortListInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* SortListInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SortListInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 sex = 3;
inline bool SortListInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SortListInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SortListInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SortListInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 SortListInfo::sex() const {
  return sex_;
}
inline void SortListInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 job = 4;
inline bool SortListInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SortListInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SortListInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SortListInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 SortListInfo::job() const {
  return job_;
}
inline void SortListInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 level = 5;
inline bool SortListInfo::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SortListInfo::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SortListInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SortListInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 SortListInfo::level() const {
  return level_;
}
inline void SortListInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 damage = 6;
inline bool SortListInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SortListInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SortListInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SortListInfo::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 SortListInfo::damage() const {
  return damage_;
}
inline void SortListInfo::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// optional uint32 rank = 7;
inline bool SortListInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SortListInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SortListInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SortListInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 SortListInfo::rank() const {
  return rank_;
}
inline void SortListInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 highest_damage = 8;
inline bool SortListInfo::has_highest_damage() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SortListInfo::set_has_highest_damage() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SortListInfo::clear_has_highest_damage() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SortListInfo::clear_highest_damage() {
  highest_damage_ = 0u;
  clear_has_highest_damage();
}
inline ::google::protobuf::uint32 SortListInfo::highest_damage() const {
  return highest_damage_;
}
inline void SortListInfo::set_highest_damage(::google::protobuf::uint32 value) {
  set_has_highest_damage();
  highest_damage_ = value;
}

// optional uint32 photoID = 9;
inline bool SortListInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SortListInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SortListInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SortListInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 SortListInfo::photoid() const {
  return photoid_;
}
inline void SortListInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stEmeraldDreamSortList

// optional uint32 beginRank = 1;
inline bool stEmeraldDreamSortList::has_beginrank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEmeraldDreamSortList::set_has_beginrank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEmeraldDreamSortList::clear_has_beginrank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEmeraldDreamSortList::clear_beginrank() {
  beginrank_ = 0u;
  clear_has_beginrank();
}
inline ::google::protobuf::uint32 stEmeraldDreamSortList::beginrank() const {
  return beginrank_;
}
inline void stEmeraldDreamSortList::set_beginrank(::google::protobuf::uint32 value) {
  set_has_beginrank();
  beginrank_ = value;
}

// repeated .SortProto.SortListInfo info = 2;
inline int stEmeraldDreamSortList::info_size() const {
  return info_.size();
}
inline void stEmeraldDreamSortList::clear_info() {
  info_.Clear();
}
inline const ::SortProto::SortListInfo& stEmeraldDreamSortList::info(int index) const {
  return info_.Get(index);
}
inline ::SortProto::SortListInfo* stEmeraldDreamSortList::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::SortProto::SortListInfo* stEmeraldDreamSortList::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >&
stEmeraldDreamSortList::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >*
stEmeraldDreamSortList::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// stSendRankInfo

// repeated .SortProto.SortListInfo myInfo = 1;
inline int stSendRankInfo::myinfo_size() const {
  return myinfo_.size();
}
inline void stSendRankInfo::clear_myinfo() {
  myinfo_.Clear();
}
inline const ::SortProto::SortListInfo& stSendRankInfo::myinfo(int index) const {
  return myinfo_.Get(index);
}
inline ::SortProto::SortListInfo* stSendRankInfo::mutable_myinfo(int index) {
  return myinfo_.Mutable(index);
}
inline ::SortProto::SortListInfo* stSendRankInfo::add_myinfo() {
  return myinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >&
stSendRankInfo::myinfo() const {
  return myinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >*
stSendRankInfo::mutable_myinfo() {
  return &myinfo_;
}

// repeated .SortProto.SortListInfo rivalInfo = 2;
inline int stSendRankInfo::rivalinfo_size() const {
  return rivalinfo_.size();
}
inline void stSendRankInfo::clear_rivalinfo() {
  rivalinfo_.Clear();
}
inline const ::SortProto::SortListInfo& stSendRankInfo::rivalinfo(int index) const {
  return rivalinfo_.Get(index);
}
inline ::SortProto::SortListInfo* stSendRankInfo::mutable_rivalinfo(int index) {
  return rivalinfo_.Mutable(index);
}
inline ::SortProto::SortListInfo* stSendRankInfo::add_rivalinfo() {
  return rivalinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >&
stSendRankInfo::rivalinfo() const {
  return rivalinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::SortListInfo >*
stSendRankInfo::mutable_rivalinfo() {
  return &rivalinfo_;
}

// optional bool promoted = 3;
inline bool stSendRankInfo::has_promoted() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendRankInfo::set_has_promoted() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendRankInfo::clear_has_promoted() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendRankInfo::clear_promoted() {
  promoted_ = false;
  clear_has_promoted();
}
inline bool stSendRankInfo::promoted() const {
  return promoted_;
}
inline void stSendRankInfo::set_promoted(bool value) {
  set_has_promoted();
  promoted_ = value;
}

// -------------------------------------------------------------------

// stReqSurplusNum

// optional uint32 charID = 1;
inline bool stReqSurplusNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSurplusNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSurplusNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSurplusNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqSurplusNum::charid() const {
  return charid_;
}
inline void stReqSurplusNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// userSortInfo

// optional string name = 1;
inline bool userSortInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void userSortInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void userSortInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void userSortInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& userSortInfo::name() const {
  return *name_;
}
inline void userSortInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void userSortInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void userSortInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* userSortInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* userSortInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void userSortInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stSurplusNumResult

// optional uint32 num = 1;
inline bool stSurplusNumResult::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSurplusNumResult::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSurplusNumResult::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSurplusNumResult::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSurplusNumResult::num() const {
  return num_;
}
inline void stSurplusNumResult::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 damage = 2;
inline bool stSurplusNumResult::has_damage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSurplusNumResult::set_has_damage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSurplusNumResult::clear_has_damage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSurplusNumResult::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 stSurplusNumResult::damage() const {
  return damage_;
}
inline void stSurplusNumResult::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// optional uint32 rank = 3;
inline bool stSurplusNumResult::has_rank() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSurplusNumResult::set_has_rank() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSurplusNumResult::clear_has_rank() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSurplusNumResult::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stSurplusNumResult::rank() const {
  return rank_;
}
inline void stSurplusNumResult::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 resetNum = 4;
inline bool stSurplusNumResult::has_resetnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSurplusNumResult::set_has_resetnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSurplusNumResult::clear_has_resetnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSurplusNumResult::clear_resetnum() {
  resetnum_ = 0u;
  clear_has_resetnum();
}
inline ::google::protobuf::uint32 stSurplusNumResult::resetnum() const {
  return resetnum_;
}
inline void stSurplusNumResult::set_resetnum(::google::protobuf::uint32 value) {
  set_has_resetnum();
  resetnum_ = value;
}

// repeated .SortProto.userSortInfo info = 5;
inline int stSurplusNumResult::info_size() const {
  return info_.size();
}
inline void stSurplusNumResult::clear_info() {
  info_.Clear();
}
inline const ::SortProto::userSortInfo& stSurplusNumResult::info(int index) const {
  return info_.Get(index);
}
inline ::SortProto::userSortInfo* stSurplusNumResult::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::SortProto::userSortInfo* stSurplusNumResult::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::userSortInfo >&
stSurplusNumResult::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::userSortInfo >*
stSurplusNumResult::mutable_info() {
  return &info_;
}

// optional uint32 endtime = 6;
inline bool stSurplusNumResult::has_endtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSurplusNumResult::set_has_endtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSurplusNumResult::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSurplusNumResult::clear_endtime() {
  endtime_ = 0u;
  clear_has_endtime();
}
inline ::google::protobuf::uint32 stSurplusNumResult::endtime() const {
  return endtime_;
}
inline void stSurplusNumResult::set_endtime(::google::protobuf::uint32 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional uint32 levelID = 7;
inline bool stSurplusNumResult::has_levelid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSurplusNumResult::set_has_levelid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSurplusNumResult::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSurplusNumResult::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stSurplusNumResult::levelid() const {
  return levelid_;
}
inline void stSurplusNumResult::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stSynChampionInfo

// optional uint32 charID = 1;
inline bool stSynChampionInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynChampionInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynChampionInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynChampionInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::charid() const {
  return charid_;
}
inline void stSynChampionInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynChampionInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynChampionInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynChampionInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynChampionInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynChampionInfo::name() const {
  return *name_;
}
inline void stSynChampionInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynChampionInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynChampionInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynChampionInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynChampionInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynChampionInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 areaCode = 3;
inline bool stSynChampionInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynChampionInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynChampionInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynChampionInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stSynChampionInfo::areacode() const {
  return areacode_;
}
inline void stSynChampionInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional uint32 level = 4;
inline bool stSynChampionInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynChampionInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynChampionInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynChampionInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynChampionInfo::level() const {
  return level_;
}
inline void stSynChampionInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 5;
inline bool stSynChampionInfo::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynChampionInfo::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynChampionInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynChampionInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynChampionInfo::job() const {
  return job_;
}
inline void stSynChampionInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stSynChampionInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynChampionInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynChampionInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynChampionInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynChampionInfo::sex() const {
  return sex_;
}
inline void stSynChampionInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional bool leader = 7;
inline bool stSynChampionInfo::has_leader() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynChampionInfo::set_has_leader() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynChampionInfo::clear_has_leader() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynChampionInfo::clear_leader() {
  leader_ = false;
  clear_has_leader();
}
inline bool stSynChampionInfo::leader() const {
  return leader_;
}
inline void stSynChampionInfo::set_leader(bool value) {
  set_has_leader();
  leader_ = value;
}

// optional uint32 battlePower = 8;
inline bool stSynChampionInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynChampionInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynChampionInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynChampionInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynChampionInfo::battlepower() const {
  return battlepower_;
}
inline void stSynChampionInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 pos = 9;
inline bool stSynChampionInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynChampionInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynChampionInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynChampionInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stSynChampionInfo::pos() const {
  return pos_;
}
inline void stSynChampionInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 headID = 10;
inline bool stSynChampionInfo::has_headid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSynChampionInfo::set_has_headid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSynChampionInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSynChampionInfo::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::headid() const {
  return headid_;
}
inline void stSynChampionInfo::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 11;
inline bool stSynChampionInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSynChampionInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSynChampionInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSynChampionInfo::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::bodyid() const {
  return bodyid_;
}
inline void stSynChampionInfo::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 12;
inline bool stSynChampionInfo::has_weaponid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stSynChampionInfo::set_has_weaponid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stSynChampionInfo::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stSynChampionInfo::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::weaponid() const {
  return weaponid_;
}
inline void stSynChampionInfo::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 13;
inline bool stSynChampionInfo::has_cloackid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stSynChampionInfo::set_has_cloackid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stSynChampionInfo::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stSynChampionInfo::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::cloackid() const {
  return cloackid_;
}
inline void stSynChampionInfo::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 14;
inline bool stSynChampionInfo::has_wingid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stSynChampionInfo::set_has_wingid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stSynChampionInfo::clear_has_wingid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stSynChampionInfo::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::wingid() const {
  return wingid_;
}
inline void stSynChampionInfo::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 15;
inline bool stSynChampionInfo::has_shoeid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stSynChampionInfo::set_has_shoeid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stSynChampionInfo::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stSynChampionInfo::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::shoeid() const {
  return shoeid_;
}
inline void stSynChampionInfo::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 16;
inline bool stSynChampionInfo::has_fashionhair() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionhair() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stSynChampionInfo::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stSynChampionInfo::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionhair() const {
  return fashionhair_;
}
inline void stSynChampionInfo::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 17;
inline bool stSynChampionInfo::has_fashionface() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionface() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stSynChampionInfo::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stSynChampionInfo::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionface() const {
  return fashionface_;
}
inline void stSynChampionInfo::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 18;
inline bool stSynChampionInfo::has_fashionbody() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionbody() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stSynChampionInfo::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stSynChampionInfo::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionbody() const {
  return fashionbody_;
}
inline void stSynChampionInfo::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 19;
inline bool stSynChampionInfo::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stSynChampionInfo::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stSynChampionInfo::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionweapon() const {
  return fashionweapon_;
}
inline void stSynChampionInfo::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 20;
inline bool stSynChampionInfo::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stSynChampionInfo::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stSynChampionInfo::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stSynChampionInfo::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashionshoe() const {
  return fashionshoe_;
}
inline void stSynChampionInfo::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 21;
inline bool stSynChampionInfo::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stSynChampionInfo::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stSynChampionInfo::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stSynChampionInfo::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stSynChampionInfo::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stSynChampionInfo::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 22;
inline bool stSynChampionInfo::has_effectid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stSynChampionInfo::set_has_effectid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stSynChampionInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stSynChampionInfo::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::effectid() const {
  return effectid_;
}
inline void stSynChampionInfo::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 23;
inline bool stSynChampionInfo::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stSynChampionInfo::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stSynChampionInfo::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stSynChampionInfo::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stSynChampionInfo::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stSynChampionInfo::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 photoID = 24;
inline bool stSynChampionInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void stSynChampionInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00800000u;
}
inline void stSynChampionInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void stSynChampionInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stSynChampionInfo::photoid() const {
  return photoid_;
}
inline void stSynChampionInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stMyIntegralAndNum

// optional uint32 score = 1;
inline bool stMyIntegralAndNum::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMyIntegralAndNum::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMyIntegralAndNum::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMyIntegralAndNum::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stMyIntegralAndNum::score() const {
  return score_;
}
inline void stMyIntegralAndNum::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// stReqOpenLeagueWindow

// optional uint32 charID = 1;
inline bool stReqOpenLeagueWindow::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenLeagueWindow::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenLeagueWindow::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenLeagueWindow::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenLeagueWindow::charid() const {
  return charid_;
}
inline void stReqOpenLeagueWindow::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOpenLeagueWindowResult

// repeated .SortProto.stSynChampionInfo champion = 1;
inline int stOpenLeagueWindowResult::champion_size() const {
  return champion_.size();
}
inline void stOpenLeagueWindowResult::clear_champion() {
  champion_.Clear();
}
inline const ::SortProto::stSynChampionInfo& stOpenLeagueWindowResult::champion(int index) const {
  return champion_.Get(index);
}
inline ::SortProto::stSynChampionInfo* stOpenLeagueWindowResult::mutable_champion(int index) {
  return champion_.Mutable(index);
}
inline ::SortProto::stSynChampionInfo* stOpenLeagueWindowResult::add_champion() {
  return champion_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo >&
stOpenLeagueWindowResult::champion() const {
  return champion_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo >*
stOpenLeagueWindowResult::mutable_champion() {
  return &champion_;
}

// repeated .SortProto.stMyIntegralAndNum myInfo = 2;
inline int stOpenLeagueWindowResult::myinfo_size() const {
  return myinfo_.size();
}
inline void stOpenLeagueWindowResult::clear_myinfo() {
  myinfo_.Clear();
}
inline const ::SortProto::stMyIntegralAndNum& stOpenLeagueWindowResult::myinfo(int index) const {
  return myinfo_.Get(index);
}
inline ::SortProto::stMyIntegralAndNum* stOpenLeagueWindowResult::mutable_myinfo(int index) {
  return myinfo_.Mutable(index);
}
inline ::SortProto::stMyIntegralAndNum* stOpenLeagueWindowResult::add_myinfo() {
  return myinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stMyIntegralAndNum >&
stOpenLeagueWindowResult::myinfo() const {
  return myinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stMyIntegralAndNum >*
stOpenLeagueWindowResult::mutable_myinfo() {
  return &myinfo_;
}

// optional uint32 session = 3;
inline bool stOpenLeagueWindowResult::has_session() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOpenLeagueWindowResult::set_has_session() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOpenLeagueWindowResult::clear_has_session() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOpenLeagueWindowResult::clear_session() {
  session_ = 0u;
  clear_has_session();
}
inline ::google::protobuf::uint32 stOpenLeagueWindowResult::session() const {
  return session_;
}
inline void stOpenLeagueWindowResult::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
}

// optional .SortProto.stOpenLeagueWindowResult.eStatus status = 4;
inline bool stOpenLeagueWindowResult::has_status() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stOpenLeagueWindowResult::set_has_status() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stOpenLeagueWindowResult::clear_has_status() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stOpenLeagueWindowResult::clear_status() {
  status_ = 1;
  clear_has_status();
}
inline ::SortProto::stOpenLeagueWindowResult_eStatus stOpenLeagueWindowResult::status() const {
  return static_cast< ::SortProto::stOpenLeagueWindowResult_eStatus >(status_);
}
inline void stOpenLeagueWindowResult::set_status(::SortProto::stOpenLeagueWindowResult_eStatus value) {
  assert(::SortProto::stOpenLeagueWindowResult_eStatus_IsValid(value));
  set_has_status();
  status_ = value;
}

// optional .SortProto.stOpenLeagueWindowResult.eSession esession = 5;
inline bool stOpenLeagueWindowResult::has_esession() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stOpenLeagueWindowResult::set_has_esession() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stOpenLeagueWindowResult::clear_has_esession() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stOpenLeagueWindowResult::clear_esession() {
  esession_ = 1;
  clear_has_esession();
}
inline ::SortProto::stOpenLeagueWindowResult_eSession stOpenLeagueWindowResult::esession() const {
  return static_cast< ::SortProto::stOpenLeagueWindowResult_eSession >(esession_);
}
inline void stOpenLeagueWindowResult::set_esession(::SortProto::stOpenLeagueWindowResult_eSession value) {
  assert(::SortProto::stOpenLeagueWindowResult_eSession_IsValid(value));
  set_has_esession();
  esession_ = value;
}

// -------------------------------------------------------------------

// stReqHeroLeagueMatch

// optional uint32 charID = 1;
inline bool stReqHeroLeagueMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqHeroLeagueMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqHeroLeagueMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqHeroLeagueMatch::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqHeroLeagueMatch::charid() const {
  return charid_;
}
inline void stReqHeroLeagueMatch::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stHeroLeagueMatchResult

// optional .SortProto.stHeroLeagueMatchResult.eResult result = 1;
inline bool stHeroLeagueMatchResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroLeagueMatchResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroLeagueMatchResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroLeagueMatchResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stHeroLeagueMatchResult_eResult stHeroLeagueMatchResult::result() const {
  return static_cast< ::SortProto::stHeroLeagueMatchResult_eResult >(result_);
}
inline void stHeroLeagueMatchResult::set_result(::SortProto::stHeroLeagueMatchResult_eResult value) {
  assert(::SortProto::stHeroLeagueMatchResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqMenberInfo

// optional uint32 charID = 1;
inline bool stReqMenberInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqMenberInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqMenberInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqMenberInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqMenberInfo::charid() const {
  return charid_;
}
inline void stReqMenberInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stMemberinfo

// repeated .SortProto.stSynChampionInfo member = 1;
inline int stMemberinfo::member_size() const {
  return member_.size();
}
inline void stMemberinfo::clear_member() {
  member_.Clear();
}
inline const ::SortProto::stSynChampionInfo& stMemberinfo::member(int index) const {
  return member_.Get(index);
}
inline ::SortProto::stSynChampionInfo* stMemberinfo::mutable_member(int index) {
  return member_.Mutable(index);
}
inline ::SortProto::stSynChampionInfo* stMemberinfo::add_member() {
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo >&
stMemberinfo::member() const {
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stSynChampionInfo >*
stMemberinfo::mutable_member() {
  return &member_;
}

// -------------------------------------------------------------------

// stCancelHeroLeagueMatch

// optional uint32 charID = 1;
inline bool stCancelHeroLeagueMatch::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelHeroLeagueMatch::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelHeroLeagueMatch::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelHeroLeagueMatch::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stCancelHeroLeagueMatch::charid() const {
  return charid_;
}
inline void stCancelHeroLeagueMatch::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stCanceHeroLeagueResult

// optional .SortProto.stCanceHeroLeagueResult.eResult result = 1;
inline bool stCanceHeroLeagueResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCanceHeroLeagueResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCanceHeroLeagueResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCanceHeroLeagueResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stCanceHeroLeagueResult_eResult stCanceHeroLeagueResult::result() const {
  return static_cast< ::SortProto::stCanceHeroLeagueResult_eResult >(result_);
}
inline void stCanceHeroLeagueResult::set_result(::SortProto::stCanceHeroLeagueResult_eResult value) {
  assert(::SortProto::stCanceHeroLeagueResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqQualifiedList

// optional .SortProto.stReqQualifiedList.eSession type = 1;
inline bool stReqQualifiedList::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqQualifiedList::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqQualifiedList::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqQualifiedList::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SortProto::stReqQualifiedList_eSession stReqQualifiedList::type() const {
  return static_cast< ::SortProto::stReqQualifiedList_eSession >(type_);
}
inline void stReqQualifiedList::set_type(::SortProto::stReqQualifiedList_eSession value) {
  assert(::SortProto::stReqQualifiedList_eSession_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stRoleBasicInfo

// optional uint32 areaCode = 1;
inline bool stRoleBasicInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRoleBasicInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRoleBasicInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRoleBasicInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stRoleBasicInfo::areacode() const {
  return areacode_;
}
inline void stRoleBasicInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 2;
inline bool stRoleBasicInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRoleBasicInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRoleBasicInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRoleBasicInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stRoleBasicInfo::name() const {
  return *name_;
}
inline void stRoleBasicInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRoleBasicInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRoleBasicInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRoleBasicInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stRoleBasicInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRoleBasicInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 leve = 3;
inline bool stRoleBasicInfo::has_leve() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRoleBasicInfo::set_has_leve() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRoleBasicInfo::clear_has_leve() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRoleBasicInfo::clear_leve() {
  leve_ = 0u;
  clear_has_leve();
}
inline ::google::protobuf::uint32 stRoleBasicInfo::leve() const {
  return leve_;
}
inline void stRoleBasicInfo::set_leve(::google::protobuf::uint32 value) {
  set_has_leve();
  leve_ = value;
}

// optional uint32 vipLv = 4;
inline bool stRoleBasicInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRoleBasicInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRoleBasicInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRoleBasicInfo::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stRoleBasicInfo::viplv() const {
  return viplv_;
}
inline void stRoleBasicInfo::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 job = 5;
inline bool stRoleBasicInfo::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRoleBasicInfo::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRoleBasicInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRoleBasicInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stRoleBasicInfo::job() const {
  return job_;
}
inline void stRoleBasicInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool stRoleBasicInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRoleBasicInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRoleBasicInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRoleBasicInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stRoleBasicInfo::sex() const {
  return sex_;
}
inline void stRoleBasicInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 7;
inline bool stRoleBasicInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRoleBasicInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRoleBasicInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRoleBasicInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stRoleBasicInfo::battlepower() const {
  return battlepower_;
}
inline void stRoleBasicInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional .SortProto.stRoleBasicInfo.eCompleteState winOrLoss = 8;
inline bool stRoleBasicInfo::has_winorloss() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRoleBasicInfo::set_has_winorloss() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRoleBasicInfo::clear_has_winorloss() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRoleBasicInfo::clear_winorloss() {
  winorloss_ = 1;
  clear_has_winorloss();
}
inline ::SortProto::stRoleBasicInfo_eCompleteState stRoleBasicInfo::winorloss() const {
  return static_cast< ::SortProto::stRoleBasicInfo_eCompleteState >(winorloss_);
}
inline void stRoleBasicInfo::set_winorloss(::SortProto::stRoleBasicInfo_eCompleteState value) {
  assert(::SortProto::stRoleBasicInfo_eCompleteState_IsValid(value));
  set_has_winorloss();
  winorloss_ = value;
}

// optional uint32 photoID = 9;
inline bool stRoleBasicInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRoleBasicInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRoleBasicInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRoleBasicInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stRoleBasicInfo::photoid() const {
  return photoid_;
}
inline void stRoleBasicInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stTeam

// optional .SortProto.stRoleBasicInfo user1 = 1;
inline bool stTeam::has_user1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTeam::set_has_user1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTeam::clear_has_user1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTeam::clear_user1() {
  if (user1_ != NULL) user1_->::SortProto::stRoleBasicInfo::Clear();
  clear_has_user1();
}
inline const ::SortProto::stRoleBasicInfo& stTeam::user1() const {
  return user1_ != NULL ? *user1_ : *default_instance_->user1_;
}
inline ::SortProto::stRoleBasicInfo* stTeam::mutable_user1() {
  set_has_user1();
  if (user1_ == NULL) user1_ = new ::SortProto::stRoleBasicInfo;
  return user1_;
}
inline ::SortProto::stRoleBasicInfo* stTeam::release_user1() {
  clear_has_user1();
  ::SortProto::stRoleBasicInfo* temp = user1_;
  user1_ = NULL;
  return temp;
}
inline void stTeam::set_allocated_user1(::SortProto::stRoleBasicInfo* user1) {
  delete user1_;
  user1_ = user1;
  if (user1) {
    set_has_user1();
  } else {
    clear_has_user1();
  }
}

// optional .SortProto.stRoleBasicInfo user2 = 2;
inline bool stTeam::has_user2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTeam::set_has_user2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTeam::clear_has_user2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTeam::clear_user2() {
  if (user2_ != NULL) user2_->::SortProto::stRoleBasicInfo::Clear();
  clear_has_user2();
}
inline const ::SortProto::stRoleBasicInfo& stTeam::user2() const {
  return user2_ != NULL ? *user2_ : *default_instance_->user2_;
}
inline ::SortProto::stRoleBasicInfo* stTeam::mutable_user2() {
  set_has_user2();
  if (user2_ == NULL) user2_ = new ::SortProto::stRoleBasicInfo;
  return user2_;
}
inline ::SortProto::stRoleBasicInfo* stTeam::release_user2() {
  clear_has_user2();
  ::SortProto::stRoleBasicInfo* temp = user2_;
  user2_ = NULL;
  return temp;
}
inline void stTeam::set_allocated_user2(::SortProto::stRoleBasicInfo* user2) {
  delete user2_;
  user2_ = user2;
  if (user2) {
    set_has_user2();
  } else {
    clear_has_user2();
  }
}

// -------------------------------------------------------------------

// stQualifiedListResult

// repeated .SortProto.stTeam users = 1;
inline int stQualifiedListResult::users_size() const {
  return users_.size();
}
inline void stQualifiedListResult::clear_users() {
  users_.Clear();
}
inline const ::SortProto::stTeam& stQualifiedListResult::users(int index) const {
  return users_.Get(index);
}
inline ::SortProto::stTeam* stQualifiedListResult::mutable_users(int index) {
  return users_.Mutable(index);
}
inline ::SortProto::stTeam* stQualifiedListResult::add_users() {
  return users_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stTeam >&
stQualifiedListResult::users() const {
  return users_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stTeam >*
stQualifiedListResult::mutable_users() {
  return &users_;
}

// optional bool isQualified = 2;
inline bool stQualifiedListResult::has_isqualified() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stQualifiedListResult::set_has_isqualified() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stQualifiedListResult::clear_has_isqualified() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stQualifiedListResult::clear_isqualified() {
  isqualified_ = false;
  clear_has_isqualified();
}
inline bool stQualifiedListResult::isqualified() const {
  return isqualified_;
}
inline void stQualifiedListResult::set_isqualified(bool value) {
  set_has_isqualified();
  isqualified_ = value;
}

// -------------------------------------------------------------------

// stReqWorship

// optional uint32 charID = 1;
inline bool stReqWorship::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqWorship::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqWorship::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqWorship::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqWorship::charid() const {
  return charid_;
}
inline void stReqWorship::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stWorskipResult

// optional .SortProto.stWorskipResult.eResult result = 1;
inline bool stWorskipResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stWorskipResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stWorskipResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stWorskipResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stWorskipResult_eResult stWorskipResult::result() const {
  return static_cast< ::SortProto::stWorskipResult_eResult >(result_);
}
inline void stWorskipResult::set_result(::SortProto::stWorskipResult_eResult value) {
  assert(::SortProto::stWorskipResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 charID = 2;
inline bool stWorskipResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stWorskipResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stWorskipResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stWorskipResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stWorskipResult::charid() const {
  return charid_;
}
inline void stWorskipResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReqHeroList

// optional .SortProto.stReqHeroList.stType type = 1;
inline bool stReqHeroList::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqHeroList::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqHeroList::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqHeroList::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::SortProto::stReqHeroList_stType stReqHeroList::type() const {
  return static_cast< ::SortProto::stReqHeroList_stType >(type_);
}
inline void stReqHeroList::set_type(::SortProto::stReqHeroList_stType value) {
  assert(::SortProto::stReqHeroList_stType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 charID = 2;
inline bool stReqHeroList::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqHeroList::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqHeroList::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqHeroList::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqHeroList::charid() const {
  return charid_;
}
inline void stReqHeroList::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRankInfo

// optional uint32 session = 1;
inline bool stRankInfo::has_session() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRankInfo::set_has_session() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRankInfo::clear_has_session() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRankInfo::clear_session() {
  session_ = 0u;
  clear_has_session();
}
inline ::google::protobuf::uint32 stRankInfo::session() const {
  return session_;
}
inline void stRankInfo::set_session(::google::protobuf::uint32 value) {
  set_has_session();
  session_ = value;
}

// optional uint32 rank = 2;
inline bool stRankInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRankInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRankInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRankInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stRankInfo::rank() const {
  return rank_;
}
inline void stRankInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional uint32 charID = 3;
inline bool stRankInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRankInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRankInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRankInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRankInfo::charid() const {
  return charid_;
}
inline void stRankInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 pubCharID = 4;
inline bool stRankInfo::has_pubcharid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRankInfo::set_has_pubcharid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRankInfo::clear_has_pubcharid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRankInfo::clear_pubcharid() {
  pubcharid_ = 0u;
  clear_has_pubcharid();
}
inline ::google::protobuf::uint32 stRankInfo::pubcharid() const {
  return pubcharid_;
}
inline void stRankInfo::set_pubcharid(::google::protobuf::uint32 value) {
  set_has_pubcharid();
  pubcharid_ = value;
}

// optional uint32 areaCode = 5;
inline bool stRankInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRankInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRankInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRankInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stRankInfo::areacode() const {
  return areacode_;
}
inline void stRankInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional string name = 6;
inline bool stRankInfo::has_name() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRankInfo::set_has_name() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRankInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRankInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stRankInfo::name() const {
  return *name_;
}
inline void stRankInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRankInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRankInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRankInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stRankInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRankInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 7;
inline bool stRankInfo::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRankInfo::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRankInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRankInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stRankInfo::level() const {
  return level_;
}
inline void stRankInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 vipLv = 8;
inline bool stRankInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRankInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRankInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRankInfo::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stRankInfo::viplv() const {
  return viplv_;
}
inline void stRankInfo::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 job = 9;
inline bool stRankInfo::has_job() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRankInfo::set_has_job() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRankInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRankInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stRankInfo::job() const {
  return job_;
}
inline void stRankInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 10;
inline bool stRankInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stRankInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stRankInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stRankInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stRankInfo::sex() const {
  return sex_;
}
inline void stRankInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 11;
inline bool stRankInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stRankInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stRankInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stRankInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stRankInfo::battlepower() const {
  return battlepower_;
}
inline void stRankInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 photoID = 12;
inline bool stRankInfo::has_photoid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stRankInfo::set_has_photoid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stRankInfo::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stRankInfo::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stRankInfo::photoid() const {
  return photoid_;
}
inline void stRankInfo::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stHeroListResult

// repeated .SortProto.stRankInfo user = 1;
inline int stHeroListResult::user_size() const {
  return user_.size();
}
inline void stHeroListResult::clear_user() {
  user_.Clear();
}
inline const ::SortProto::stRankInfo& stHeroListResult::user(int index) const {
  return user_.Get(index);
}
inline ::SortProto::stRankInfo* stHeroListResult::mutable_user(int index) {
  return user_.Mutable(index);
}
inline ::SortProto::stRankInfo* stHeroListResult::add_user() {
  return user_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stRankInfo >&
stHeroListResult::user() const {
  return user_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stRankInfo >*
stHeroListResult::mutable_user() {
  return &user_;
}

// -------------------------------------------------------------------

// stReqRegister

// optional uint32 charID = 1;
inline bool stReqRegister::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRegister::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRegister::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRegister::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRegister::charid() const {
  return charid_;
}
inline void stReqRegister::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRegisrerResult

// optional uint32 number = 1;
inline bool stRegisrerResult::has_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRegisrerResult::set_has_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRegisrerResult::clear_has_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRegisrerResult::clear_number() {
  number_ = 0u;
  clear_has_number();
}
inline ::google::protobuf::uint32 stRegisrerResult::number() const {
  return number_;
}
inline void stRegisrerResult::set_number(::google::protobuf::uint32 value) {
  set_has_number();
  number_ = value;
}

// -------------------------------------------------------------------

// stArenaResultNotify

// optional .SortProto.stArenaResultNotify.eResult result = 1;
inline bool stArenaResultNotify::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stArenaResultNotify::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stArenaResultNotify::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stArenaResultNotify::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stArenaResultNotify_eResult stArenaResultNotify::result() const {
  return static_cast< ::SortProto::stArenaResultNotify_eResult >(result_);
}
inline void stArenaResultNotify::set_result(::SortProto::stArenaResultNotify_eResult value) {
  assert(::SortProto::stArenaResultNotify_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqPubLogIn

// optional uint32 charID = 1;
inline bool stReqPubLogIn::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPubLogIn::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPubLogIn::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPubLogIn::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqPubLogIn::charid() const {
  return charid_;
}
inline void stReqPubLogIn::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stReqPubLogOut

// optional uint32 charID = 1;
inline bool stReqPubLogOut::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqPubLogOut::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqPubLogOut::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqPubLogOut::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqPubLogOut::charid() const {
  return charid_;
}
inline void stReqPubLogOut::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRemoveModel

// optional uint32 charID = 1;
inline bool stRemoveModel::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRemoveModel::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRemoveModel::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRemoveModel::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRemoveModel::charid() const {
  return charid_;
}
inline void stRemoveModel::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stLeitaiResultNotify

// optional .SortProto.stLeitaiResultNotify.eResult result = 1;
inline bool stLeitaiResultNotify::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLeitaiResultNotify::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLeitaiResultNotify::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLeitaiResultNotify::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stLeitaiResultNotify_eResult stLeitaiResultNotify::result() const {
  return static_cast< ::SortProto::stLeitaiResultNotify_eResult >(result_);
}
inline void stLeitaiResultNotify::set_result(::SortProto::stLeitaiResultNotify_eResult value) {
  assert(::SortProto::stLeitaiResultNotify_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRedPoint

// optional uint32 charID = 1;
inline bool stReqRedPoint::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRedPoint::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRedPoint::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRedPoint::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRedPoint::charid() const {
  return charid_;
}
inline void stReqRedPoint::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRedPointResult

// optional bool isQualified = 1;
inline bool stRedPointResult::has_isqualified() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRedPointResult::set_has_isqualified() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRedPointResult::clear_has_isqualified() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRedPointResult::clear_isqualified() {
  isqualified_ = false;
  clear_has_isqualified();
}
inline bool stRedPointResult::isqualified() const {
  return isqualified_;
}
inline void stRedPointResult::set_isqualified(bool value) {
  set_has_isqualified();
  isqualified_ = value;
}

// optional bool canWorship = 2;
inline bool stRedPointResult::has_canworship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRedPointResult::set_has_canworship() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRedPointResult::clear_has_canworship() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRedPointResult::clear_canworship() {
  canworship_ = false;
  clear_has_canworship();
}
inline bool stRedPointResult::canworship() const {
  return canworship_;
}
inline void stRedPointResult::set_canworship(bool value) {
  set_has_canworship();
  canworship_ = value;
}

// -------------------------------------------------------------------

// stReqDragonNest

// optional uint32 charID = 1;
inline bool stReqDragonNest::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDragonNest::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDragonNest::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDragonNest::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDragonNest::charid() const {
  return charid_;
}
inline void stReqDragonNest::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetDragonNest

// optional uint32 usedTimes = 1;
inline bool stRetDragonNest::has_usedtimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDragonNest::set_has_usedtimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDragonNest::clear_has_usedtimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDragonNest::clear_usedtimes() {
  usedtimes_ = 0u;
  clear_has_usedtimes();
}
inline ::google::protobuf::uint32 stRetDragonNest::usedtimes() const {
  return usedtimes_;
}
inline void stRetDragonNest::set_usedtimes(::google::protobuf::uint32 value) {
  set_has_usedtimes();
  usedtimes_ = value;
}

// optional uint32 maxTimes = 2;
inline bool stRetDragonNest::has_maxtimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetDragonNest::set_has_maxtimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetDragonNest::clear_has_maxtimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetDragonNest::clear_maxtimes() {
  maxtimes_ = 0u;
  clear_has_maxtimes();
}
inline ::google::protobuf::uint32 stRetDragonNest::maxtimes() const {
  return maxtimes_;
}
inline void stRetDragonNest::set_maxtimes(::google::protobuf::uint32 value) {
  set_has_maxtimes();
  maxtimes_ = value;
}

// optional uint32 resetTimes = 3;
inline bool stRetDragonNest::has_resettimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetDragonNest::set_has_resettimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetDragonNest::clear_has_resettimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetDragonNest::clear_resettimes() {
  resettimes_ = 0u;
  clear_has_resettimes();
}
inline ::google::protobuf::uint32 stRetDragonNest::resettimes() const {
  return resettimes_;
}
inline void stRetDragonNest::set_resettimes(::google::protobuf::uint32 value) {
  set_has_resettimes();
  resettimes_ = value;
}

// -------------------------------------------------------------------

// stReqChallengeDragonNest

// optional uint32 levelId = 1;
inline bool stReqChallengeDragonNest::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChallengeDragonNest::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChallengeDragonNest::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChallengeDragonNest::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqChallengeDragonNest::levelid() const {
  return levelid_;
}
inline void stReqChallengeDragonNest::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stRetChallengeDragonNest

// optional uint32 levelId = 1;
inline bool stRetChallengeDragonNest::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetChallengeDragonNest::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetChallengeDragonNest::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetChallengeDragonNest::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stRetChallengeDragonNest::levelid() const {
  return levelid_;
}
inline void stRetChallengeDragonNest::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional .SortProto.stRetChallengeDragonNest.eResult result = 2;
inline bool stRetChallengeDragonNest::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetChallengeDragonNest::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetChallengeDragonNest::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetChallengeDragonNest::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetChallengeDragonNest_eResult stRetChallengeDragonNest::result() const {
  return static_cast< ::SortProto::stRetChallengeDragonNest_eResult >(result_);
}
inline void stRetChallengeDragonNest::set_result(::SortProto::stRetChallengeDragonNest_eResult value) {
  assert(::SortProto::stRetChallengeDragonNest_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqResetChallengeDragonNest

// optional uint32 CharID = 1;
inline bool stReqResetChallengeDragonNest::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResetChallengeDragonNest::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResetChallengeDragonNest::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResetChallengeDragonNest::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResetChallengeDragonNest::charid() const {
  return charid_;
}
inline void stReqResetChallengeDragonNest::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetResetChallengeDragonNest

// optional .SortProto.stRetResetChallengeDragonNest.eResult result = 1;
inline bool stRetResetChallengeDragonNest::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetResetChallengeDragonNest::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetResetChallengeDragonNest::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetResetChallengeDragonNest::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetResetChallengeDragonNest_eResult stRetResetChallengeDragonNest::result() const {
  return static_cast< ::SortProto::stRetResetChallengeDragonNest_eResult >(result_);
}
inline void stRetResetChallengeDragonNest::set_result(::SortProto::stRetResetChallengeDragonNest_eResult value) {
  assert(::SortProto::stRetResetChallengeDragonNest_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqEnterResBattle

// optional uint32 charId = 1;
inline bool stReqEnterResBattle::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEnterResBattle::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEnterResBattle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEnterResBattle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqEnterResBattle::charid() const {
  return charid_;
}
inline void stReqEnterResBattle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 copyMapLevel = 2;
inline bool stReqEnterResBattle::has_copymaplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqEnterResBattle::set_has_copymaplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqEnterResBattle::clear_has_copymaplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqEnterResBattle::clear_copymaplevel() {
  copymaplevel_ = 0u;
  clear_has_copymaplevel();
}
inline ::google::protobuf::uint32 stReqEnterResBattle::copymaplevel() const {
  return copymaplevel_;
}
inline void stReqEnterResBattle::set_copymaplevel(::google::protobuf::uint32 value) {
  set_has_copymaplevel();
  copymaplevel_ = value;
}

// -------------------------------------------------------------------

// stRetEnterResBattle

// optional uint32 copyMapLevel = 1;
inline bool stRetEnterResBattle::has_copymaplevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetEnterResBattle::set_has_copymaplevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetEnterResBattle::clear_has_copymaplevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetEnterResBattle::clear_copymaplevel() {
  copymaplevel_ = 0u;
  clear_has_copymaplevel();
}
inline ::google::protobuf::uint32 stRetEnterResBattle::copymaplevel() const {
  return copymaplevel_;
}
inline void stRetEnterResBattle::set_copymaplevel(::google::protobuf::uint32 value) {
  set_has_copymaplevel();
  copymaplevel_ = value;
}

// optional .SortProto.stRetEnterResBattle.eResult result = 2;
inline bool stRetEnterResBattle::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetEnterResBattle::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetEnterResBattle::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetEnterResBattle::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetEnterResBattle_eResult stRetEnterResBattle::result() const {
  return static_cast< ::SortProto::stRetEnterResBattle_eResult >(result_);
}
inline void stRetEnterResBattle::set_result(::SortProto::stRetEnterResBattle_eResult value) {
  assert(::SortProto::stRetEnterResBattle_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqCurResBattleGloryRank

// optional uint32 charId = 1;
inline bool stReqCurResBattleGloryRank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCurResBattleGloryRank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCurResBattleGloryRank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCurResBattleGloryRank::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqCurResBattleGloryRank::charid() const {
  return charid_;
}
inline void stReqCurResBattleGloryRank::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResBattleGloryRankMemInfo

// optional uint32 rank = 1;
inline bool stResBattleGloryRankMemInfo::has_rank() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResBattleGloryRankMemInfo::set_has_rank() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResBattleGloryRankMemInfo::clear_has_rank() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResBattleGloryRankMemInfo::clear_rank() {
  rank_ = 0u;
  clear_has_rank();
}
inline ::google::protobuf::uint32 stResBattleGloryRankMemInfo::rank() const {
  return rank_;
}
inline void stResBattleGloryRankMemInfo::set_rank(::google::protobuf::uint32 value) {
  set_has_rank();
  rank_ = value;
}

// optional string name = 2;
inline bool stResBattleGloryRankMemInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResBattleGloryRankMemInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResBattleGloryRankMemInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResBattleGloryRankMemInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stResBattleGloryRankMemInfo::name() const {
  return *name_;
}
inline void stResBattleGloryRankMemInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stResBattleGloryRankMemInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stResBattleGloryRankMemInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stResBattleGloryRankMemInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stResBattleGloryRankMemInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stResBattleGloryRankMemInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charId = 3;
inline bool stResBattleGloryRankMemInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stResBattleGloryRankMemInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stResBattleGloryRankMemInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stResBattleGloryRankMemInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResBattleGloryRankMemInfo::charid() const {
  return charid_;
}
inline void stResBattleGloryRankMemInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 areaCode = 4;
inline bool stResBattleGloryRankMemInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stResBattleGloryRankMemInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stResBattleGloryRankMemInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stResBattleGloryRankMemInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stResBattleGloryRankMemInfo::areacode() const {
  return areacode_;
}
inline void stResBattleGloryRankMemInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional uint32 killNum = 5;
inline bool stResBattleGloryRankMemInfo::has_killnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stResBattleGloryRankMemInfo::set_has_killnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stResBattleGloryRankMemInfo::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stResBattleGloryRankMemInfo::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stResBattleGloryRankMemInfo::killnum() const {
  return killnum_;
}
inline void stResBattleGloryRankMemInfo::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional uint32 gloryVal = 6;
inline bool stResBattleGloryRankMemInfo::has_gloryval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stResBattleGloryRankMemInfo::set_has_gloryval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stResBattleGloryRankMemInfo::clear_has_gloryval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stResBattleGloryRankMemInfo::clear_gloryval() {
  gloryval_ = 0u;
  clear_has_gloryval();
}
inline ::google::protobuf::uint32 stResBattleGloryRankMemInfo::gloryval() const {
  return gloryval_;
}
inline void stResBattleGloryRankMemInfo::set_gloryval(::google::protobuf::uint32 value) {
  set_has_gloryval();
  gloryval_ = value;
}

// -------------------------------------------------------------------

// stRetCurResBattleGloryRank

// optional uint32 charId = 1;
inline bool stRetCurResBattleGloryRank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetCurResBattleGloryRank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetCurResBattleGloryRank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetCurResBattleGloryRank::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRetCurResBattleGloryRank::charid() const {
  return charid_;
}
inline void stRetCurResBattleGloryRank::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
inline int stRetCurResBattleGloryRank::member_size() const {
  return member_.size();
}
inline void stRetCurResBattleGloryRank::clear_member() {
  member_.Clear();
}
inline const ::SortProto::stResBattleGloryRankMemInfo& stRetCurResBattleGloryRank::member(int index) const {
  return member_.Get(index);
}
inline ::SortProto::stResBattleGloryRankMemInfo* stRetCurResBattleGloryRank::mutable_member(int index) {
  return member_.Mutable(index);
}
inline ::SortProto::stResBattleGloryRankMemInfo* stRetCurResBattleGloryRank::add_member() {
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo >&
stRetCurResBattleGloryRank::member() const {
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo >*
stRetCurResBattleGloryRank::mutable_member() {
  return &member_;
}

// -------------------------------------------------------------------

// stReqResBattleRank

// optional uint32 charId = 1;
inline bool stReqResBattleRank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResBattleRank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResBattleRank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResBattleRank::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResBattleRank::charid() const {
  return charid_;
}
inline void stReqResBattleRank::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetResBattleRank

// optional uint32 charId = 1;
inline bool stRetResBattleRank::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetResBattleRank::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetResBattleRank::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetResBattleRank::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRetResBattleRank::charid() const {
  return charid_;
}
inline void stRetResBattleRank::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .SortProto.stResBattleGloryRankMemInfo member = 2;
inline int stRetResBattleRank::member_size() const {
  return member_.size();
}
inline void stRetResBattleRank::clear_member() {
  member_.Clear();
}
inline const ::SortProto::stResBattleGloryRankMemInfo& stRetResBattleRank::member(int index) const {
  return member_.Get(index);
}
inline ::SortProto::stResBattleGloryRankMemInfo* stRetResBattleRank::mutable_member(int index) {
  return member_.Mutable(index);
}
inline ::SortProto::stResBattleGloryRankMemInfo* stRetResBattleRank::add_member() {
  return member_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo >&
stRetResBattleRank::member() const {
  return member_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleGloryRankMemInfo >*
stRetResBattleRank::mutable_member() {
  return &member_;
}

// -------------------------------------------------------------------

// stReqResBattleKing

// optional uint32 charId = 1;
inline bool stReqResBattleKing::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResBattleKing::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResBattleKing::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResBattleKing::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResBattleKing::charid() const {
  return charid_;
}
inline void stReqResBattleKing::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResBattleRankMemInfo

// optional string name = 1;
inline bool stResBattleRankMemInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResBattleRankMemInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResBattleRankMemInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResBattleRankMemInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stResBattleRankMemInfo::name() const {
  return *name_;
}
inline void stResBattleRankMemInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stResBattleRankMemInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stResBattleRankMemInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stResBattleRankMemInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stResBattleRankMemInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stResBattleRankMemInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 2;
inline bool stResBattleRankMemInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResBattleRankMemInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResBattleRankMemInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResBattleRankMemInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::charid() const {
  return charid_;
}
inline void stResBattleRankMemInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 areaCode = 3;
inline bool stResBattleRankMemInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stResBattleRankMemInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stResBattleRankMemInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stResBattleRankMemInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::areacode() const {
  return areacode_;
}
inline void stResBattleRankMemInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional uint32 job = 4;
inline bool stResBattleRankMemInfo::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stResBattleRankMemInfo::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stResBattleRankMemInfo::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stResBattleRankMemInfo::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::job() const {
  return job_;
}
inline void stResBattleRankMemInfo::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stResBattleRankMemInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stResBattleRankMemInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stResBattleRankMemInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stResBattleRankMemInfo::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::sex() const {
  return sex_;
}
inline void stResBattleRankMemInfo::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 6;
inline bool stResBattleRankMemInfo::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stResBattleRankMemInfo::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stResBattleRankMemInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stResBattleRankMemInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::level() const {
  return level_;
}
inline void stResBattleRankMemInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 7;
inline bool stResBattleRankMemInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stResBattleRankMemInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stResBattleRankMemInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stResBattleRankMemInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::battlepower() const {
  return battlepower_;
}
inline void stResBattleRankMemInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 killNum = 8;
inline bool stResBattleRankMemInfo::has_killnum() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stResBattleRankMemInfo::set_has_killnum() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stResBattleRankMemInfo::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stResBattleRankMemInfo::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::killnum() const {
  return killnum_;
}
inline void stResBattleRankMemInfo::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional uint32 evenKillNum = 9;
inline bool stResBattleRankMemInfo::has_evenkillnum() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stResBattleRankMemInfo::set_has_evenkillnum() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stResBattleRankMemInfo::clear_has_evenkillnum() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stResBattleRankMemInfo::clear_evenkillnum() {
  evenkillnum_ = 0u;
  clear_has_evenkillnum();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::evenkillnum() const {
  return evenkillnum_;
}
inline void stResBattleRankMemInfo::set_evenkillnum(::google::protobuf::uint32 value) {
  set_has_evenkillnum();
  evenkillnum_ = value;
}

// optional uint32 totalKillNum = 10;
inline bool stResBattleRankMemInfo::has_totalkillnum() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stResBattleRankMemInfo::set_has_totalkillnum() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stResBattleRankMemInfo::clear_has_totalkillnum() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stResBattleRankMemInfo::clear_totalkillnum() {
  totalkillnum_ = 0u;
  clear_has_totalkillnum();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::totalkillnum() const {
  return totalkillnum_;
}
inline void stResBattleRankMemInfo::set_totalkillnum(::google::protobuf::uint32 value) {
  set_has_totalkillnum();
  totalkillnum_ = value;
}

// optional uint32 gloryVal = 11;
inline bool stResBattleRankMemInfo::has_gloryval() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stResBattleRankMemInfo::set_has_gloryval() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stResBattleRankMemInfo::clear_has_gloryval() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stResBattleRankMemInfo::clear_gloryval() {
  gloryval_ = 0u;
  clear_has_gloryval();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::gloryval() const {
  return gloryval_;
}
inline void stResBattleRankMemInfo::set_gloryval(::google::protobuf::uint32 value) {
  set_has_gloryval();
  gloryval_ = value;
}

// optional uint32 prostatedNum = 12;
inline bool stResBattleRankMemInfo::has_prostatednum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stResBattleRankMemInfo::set_has_prostatednum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stResBattleRankMemInfo::clear_has_prostatednum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stResBattleRankMemInfo::clear_prostatednum() {
  prostatednum_ = 0u;
  clear_has_prostatednum();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::prostatednum() const {
  return prostatednum_;
}
inline void stResBattleRankMemInfo::set_prostatednum(::google::protobuf::uint32 value) {
  set_has_prostatednum();
  prostatednum_ = value;
}

// optional uint32 headID = 13;
inline bool stResBattleRankMemInfo::has_headid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_headid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stResBattleRankMemInfo::clear_has_headid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stResBattleRankMemInfo::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::headid() const {
  return headid_;
}
inline void stResBattleRankMemInfo::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 14;
inline bool stResBattleRankMemInfo::has_bodyid() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_bodyid() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stResBattleRankMemInfo::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stResBattleRankMemInfo::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::bodyid() const {
  return bodyid_;
}
inline void stResBattleRankMemInfo::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 15;
inline bool stResBattleRankMemInfo::has_weaponid() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_weaponid() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stResBattleRankMemInfo::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stResBattleRankMemInfo::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::weaponid() const {
  return weaponid_;
}
inline void stResBattleRankMemInfo::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 16;
inline bool stResBattleRankMemInfo::has_cloackid() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_cloackid() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stResBattleRankMemInfo::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stResBattleRankMemInfo::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::cloackid() const {
  return cloackid_;
}
inline void stResBattleRankMemInfo::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 17;
inline bool stResBattleRankMemInfo::has_wingid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_wingid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stResBattleRankMemInfo::clear_has_wingid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stResBattleRankMemInfo::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::wingid() const {
  return wingid_;
}
inline void stResBattleRankMemInfo::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 18;
inline bool stResBattleRankMemInfo::has_shoeid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_shoeid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stResBattleRankMemInfo::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stResBattleRankMemInfo::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::shoeid() const {
  return shoeid_;
}
inline void stResBattleRankMemInfo::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 19;
inline bool stResBattleRankMemInfo::has_fashionhair() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_fashionhair() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stResBattleRankMemInfo::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stResBattleRankMemInfo::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::fashionhair() const {
  return fashionhair_;
}
inline void stResBattleRankMemInfo::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 20;
inline bool stResBattleRankMemInfo::has_fashionface() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_fashionface() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stResBattleRankMemInfo::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stResBattleRankMemInfo::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::fashionface() const {
  return fashionface_;
}
inline void stResBattleRankMemInfo::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 21;
inline bool stResBattleRankMemInfo::has_fashionbody() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_fashionbody() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stResBattleRankMemInfo::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stResBattleRankMemInfo::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::fashionbody() const {
  return fashionbody_;
}
inline void stResBattleRankMemInfo::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 22;
inline bool stResBattleRankMemInfo::has_fashionweapon() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_fashionweapon() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stResBattleRankMemInfo::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stResBattleRankMemInfo::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::fashionweapon() const {
  return fashionweapon_;
}
inline void stResBattleRankMemInfo::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 23;
inline bool stResBattleRankMemInfo::has_fashionshoe() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_fashionshoe() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stResBattleRankMemInfo::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stResBattleRankMemInfo::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::fashionshoe() const {
  return fashionshoe_;
}
inline void stResBattleRankMemInfo::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 24;
inline bool stResBattleRankMemInfo::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x00800000u;
}
inline void stResBattleRankMemInfo::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void stResBattleRankMemInfo::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stResBattleRankMemInfo::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 effectID = 26;
inline bool stResBattleRankMemInfo::has_effectid() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_effectid() {
  _has_bits_[0] |= 0x01000000u;
}
inline void stResBattleRankMemInfo::clear_has_effectid() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void stResBattleRankMemInfo::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::effectid() const {
  return effectid_;
}
inline void stResBattleRankMemInfo::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 27;
inline bool stResBattleRankMemInfo::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void stResBattleRankMemInfo::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x02000000u;
}
inline void stResBattleRankMemInfo::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void stResBattleRankMemInfo::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stResBattleRankMemInfo::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stResBattleRankMemInfo::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// -------------------------------------------------------------------

// stRetResBattleKing

// optional bool existsKing = 1;
inline bool stRetResBattleKing::has_existsking() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetResBattleKing::set_has_existsking() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetResBattleKing::clear_has_existsking() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetResBattleKing::clear_existsking() {
  existsking_ = false;
  clear_has_existsking();
}
inline bool stRetResBattleKing::existsking() const {
  return existsking_;
}
inline void stRetResBattleKing::set_existsking(bool value) {
  set_has_existsking();
  existsking_ = value;
}

// optional .SortProto.stResBattleRankMemInfo member = 2;
inline bool stRetResBattleKing::has_member() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetResBattleKing::set_has_member() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetResBattleKing::clear_has_member() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetResBattleKing::clear_member() {
  if (member_ != NULL) member_->::SortProto::stResBattleRankMemInfo::Clear();
  clear_has_member();
}
inline const ::SortProto::stResBattleRankMemInfo& stRetResBattleKing::member() const {
  return member_ != NULL ? *member_ : *default_instance_->member_;
}
inline ::SortProto::stResBattleRankMemInfo* stRetResBattleKing::mutable_member() {
  set_has_member();
  if (member_ == NULL) member_ = new ::SortProto::stResBattleRankMemInfo;
  return member_;
}
inline ::SortProto::stResBattleRankMemInfo* stRetResBattleKing::release_member() {
  clear_has_member();
  ::SortProto::stResBattleRankMemInfo* temp = member_;
  member_ = NULL;
  return temp;
}
inline void stRetResBattleKing::set_allocated_member(::SortProto::stResBattleRankMemInfo* member) {
  delete member_;
  member_ = member;
  if (member) {
    set_has_member();
  } else {
    clear_has_member();
  }
}

// -------------------------------------------------------------------

// stReqResBattleProstate

// optional uint32 charId = 1;
inline bool stReqResBattleProstate::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResBattleProstate::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResBattleProstate::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResBattleProstate::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResBattleProstate::charid() const {
  return charid_;
}
inline void stReqResBattleProstate::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetResBattleProstate

// optional .SortProto.stRetResBattleProstate.eResult result = 1;
inline bool stRetResBattleProstate::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetResBattleProstate::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetResBattleProstate::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetResBattleProstate::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetResBattleProstate_eResult stRetResBattleProstate::result() const {
  return static_cast< ::SortProto::stRetResBattleProstate_eResult >(result_);
}
inline void stRetResBattleProstate::set_result(::SortProto::stRetResBattleProstate_eResult value) {
  assert(::SortProto::stRetResBattleProstate_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqResBattleRelive

// optional uint32 charId = 1;
inline bool stReqResBattleRelive::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResBattleRelive::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResBattleRelive::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResBattleRelive::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResBattleRelive::charid() const {
  return charid_;
}
inline void stReqResBattleRelive::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetResBattleRelive

// optional .SortProto.stRetResBattleRelive.eResult result = 1;
inline bool stRetResBattleRelive::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetResBattleRelive::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetResBattleRelive::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetResBattleRelive::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetResBattleRelive_eResult stRetResBattleRelive::result() const {
  return static_cast< ::SortProto::stRetResBattleRelive_eResult >(result_);
}
inline void stRetResBattleRelive::set_result(::SortProto::stRetResBattleRelive_eResult value) {
  assert(::SortProto::stRetResBattleRelive_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqLeaveResBattle

// optional uint32 charId = 1;
inline bool stReqLeaveResBattle::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLeaveResBattle::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLeaveResBattle::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLeaveResBattle::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqLeaveResBattle::charid() const {
  return charid_;
}
inline void stReqLeaveResBattle::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetLeaveResBattle

// optional .SortProto.stRetLeaveResBattle.eResult result = 1;
inline bool stRetLeaveResBattle::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetLeaveResBattle::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetLeaveResBattle::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetLeaveResBattle::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetLeaveResBattle_eResult stRetLeaveResBattle::result() const {
  return static_cast< ::SortProto::stRetLeaveResBattle_eResult >(result_);
}
inline void stRetLeaveResBattle::set_result(::SortProto::stRetLeaveResBattle_eResult value) {
  assert(::SortProto::stRetLeaveResBattle_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRecvResBattleRes

// optional uint32 charId = 1;
inline bool stReqRecvResBattleRes::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRecvResBattleRes::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRecvResBattleRes::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRecvResBattleRes::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRecvResBattleRes::charid() const {
  return charid_;
}
inline void stReqRecvResBattleRes::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResBattleResItem

// optional uint32 itemId = 1;
inline bool stResBattleResItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResBattleResItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResBattleResItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResBattleResItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stResBattleResItem::itemid() const {
  return itemid_;
}
inline void stResBattleResItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stResBattleResItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResBattleResItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResBattleResItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResBattleResItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stResBattleResItem::num() const {
  return num_;
}
inline void stResBattleResItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stRetRecvResBattleRes

// optional uint32 killNum = 1;
inline bool stRetRecvResBattleRes::has_killnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRecvResBattleRes::set_has_killnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRecvResBattleRes::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRecvResBattleRes::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stRetRecvResBattleRes::killnum() const {
  return killnum_;
}
inline void stRetRecvResBattleRes::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional uint32 streakNum = 2;
inline bool stRetRecvResBattleRes::has_streaknum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRecvResBattleRes::set_has_streaknum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRecvResBattleRes::clear_has_streaknum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRecvResBattleRes::clear_streaknum() {
  streaknum_ = 0u;
  clear_has_streaknum();
}
inline ::google::protobuf::uint32 stRetRecvResBattleRes::streaknum() const {
  return streaknum_;
}
inline void stRetRecvResBattleRes::set_streaknum(::google::protobuf::uint32 value) {
  set_has_streaknum();
  streaknum_ = value;
}

// optional uint32 gloryVal = 3;
inline bool stRetRecvResBattleRes::has_gloryval() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetRecvResBattleRes::set_has_gloryval() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetRecvResBattleRes::clear_has_gloryval() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetRecvResBattleRes::clear_gloryval() {
  gloryval_ = 0u;
  clear_has_gloryval();
}
inline ::google::protobuf::uint32 stRetRecvResBattleRes::gloryval() const {
  return gloryval_;
}
inline void stRetRecvResBattleRes::set_gloryval(::google::protobuf::uint32 value) {
  set_has_gloryval();
  gloryval_ = value;
}

// repeated .SortProto.stResBattleResItem item = 4;
inline int stRetRecvResBattleRes::item_size() const {
  return item_.size();
}
inline void stRetRecvResBattleRes::clear_item() {
  item_.Clear();
}
inline const ::SortProto::stResBattleResItem& stRetRecvResBattleRes::item(int index) const {
  return item_.Get(index);
}
inline ::SortProto::stResBattleResItem* stRetRecvResBattleRes::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::SortProto::stResBattleResItem* stRetRecvResBattleRes::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleResItem >&
stRetRecvResBattleRes::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stResBattleResItem >*
stRetRecvResBattleRes::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stSendResBattleStreakNum

// optional string name = 1;
inline bool stSendResBattleStreakNum::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendResBattleStreakNum::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendResBattleStreakNum::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendResBattleStreakNum::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSendResBattleStreakNum::name() const {
  return *name_;
}
inline void stSendResBattleStreakNum::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSendResBattleStreakNum::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSendResBattleStreakNum::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendResBattleStreakNum::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSendResBattleStreakNum::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendResBattleStreakNum::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 areaCode = 2;
inline bool stSendResBattleStreakNum::has_areacode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSendResBattleStreakNum::set_has_areacode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSendResBattleStreakNum::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSendResBattleStreakNum::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stSendResBattleStreakNum::areacode() const {
  return areacode_;
}
inline void stSendResBattleStreakNum::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// optional uint32 val = 3;
inline bool stSendResBattleStreakNum::has_val() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSendResBattleStreakNum::set_has_val() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSendResBattleStreakNum::clear_has_val() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSendResBattleStreakNum::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 stSendResBattleStreakNum::val() const {
  return val_;
}
inline void stSendResBattleStreakNum::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// stSendResBattleNotice

// optional .SortProto.stSendResBattleNotice.eNotice noticeIndex = 1;
inline bool stSendResBattleNotice::has_noticeindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendResBattleNotice::set_has_noticeindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendResBattleNotice::clear_has_noticeindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendResBattleNotice::clear_noticeindex() {
  noticeindex_ = 1;
  clear_has_noticeindex();
}
inline ::SortProto::stSendResBattleNotice_eNotice stSendResBattleNotice::noticeindex() const {
  return static_cast< ::SortProto::stSendResBattleNotice_eNotice >(noticeindex_);
}
inline void stSendResBattleNotice::set_noticeindex(::SortProto::stSendResBattleNotice_eNotice value) {
  assert(::SortProto::stSendResBattleNotice_eNotice_IsValid(value));
  set_has_noticeindex();
  noticeindex_ = value;
}

// -------------------------------------------------------------------

// stNotityResBattleKillInfo

// optional string name = 1;
inline bool stNotityResBattleKillInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotityResBattleKillInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotityResBattleKillInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotityResBattleKillInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stNotityResBattleKillInfo::name() const {
  return *name_;
}
inline void stNotityResBattleKillInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stNotityResBattleKillInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stNotityResBattleKillInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stNotityResBattleKillInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stNotityResBattleKillInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stNotityResBattleKillInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 areaCode = 2;
inline bool stNotityResBattleKillInfo::has_areacode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotityResBattleKillInfo::set_has_areacode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotityResBattleKillInfo::clear_has_areacode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotityResBattleKillInfo::clear_areacode() {
  areacode_ = 0u;
  clear_has_areacode();
}
inline ::google::protobuf::uint32 stNotityResBattleKillInfo::areacode() const {
  return areacode_;
}
inline void stNotityResBattleKillInfo::set_areacode(::google::protobuf::uint32 value) {
  set_has_areacode();
  areacode_ = value;
}

// -------------------------------------------------------------------

// stBattleResRefreshItem

// optional uint32 x = 1;
inline bool stBattleResRefreshItem::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBattleResRefreshItem::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBattleResRefreshItem::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBattleResRefreshItem::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 stBattleResRefreshItem::x() const {
  return x_;
}
inline void stBattleResRefreshItem::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 2;
inline bool stBattleResRefreshItem::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBattleResRefreshItem::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBattleResRefreshItem::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBattleResRefreshItem::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 stBattleResRefreshItem::y() const {
  return y_;
}
inline void stBattleResRefreshItem::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 3;
inline bool stBattleResRefreshItem::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBattleResRefreshItem::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBattleResRefreshItem::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBattleResRefreshItem::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 stBattleResRefreshItem::z() const {
  return z_;
}
inline void stBattleResRefreshItem::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// optional uint32 id = 4;
inline bool stBattleResRefreshItem::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBattleResRefreshItem::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBattleResRefreshItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBattleResRefreshItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stBattleResRefreshItem::id() const {
  return id_;
}
inline void stBattleResRefreshItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 itemId = 5;
inline bool stBattleResRefreshItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stBattleResRefreshItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stBattleResRefreshItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stBattleResRefreshItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stBattleResRefreshItem::itemid() const {
  return itemid_;
}
inline void stBattleResRefreshItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 collectTimes = 6;
inline bool stBattleResRefreshItem::has_collecttimes() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stBattleResRefreshItem::set_has_collecttimes() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stBattleResRefreshItem::clear_has_collecttimes() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stBattleResRefreshItem::clear_collecttimes() {
  collecttimes_ = 0u;
  clear_has_collecttimes();
}
inline ::google::protobuf::uint32 stBattleResRefreshItem::collecttimes() const {
  return collecttimes_;
}
inline void stBattleResRefreshItem::set_collecttimes(::google::protobuf::uint32 value) {
  set_has_collecttimes();
  collecttimes_ = value;
}

// -------------------------------------------------------------------

// stNotityResBattleResRefresh

// repeated .SortProto.stBattleResRefreshItem item = 1;
inline int stNotityResBattleResRefresh::item_size() const {
  return item_.size();
}
inline void stNotityResBattleResRefresh::clear_item() {
  item_.Clear();
}
inline const ::SortProto::stBattleResRefreshItem& stNotityResBattleResRefresh::item(int index) const {
  return item_.Get(index);
}
inline ::SortProto::stBattleResRefreshItem* stNotityResBattleResRefresh::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::SortProto::stBattleResRefreshItem* stNotityResBattleResRefresh::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem >&
stNotityResBattleResRefresh::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem >*
stNotityResBattleResRefresh::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stNotityResBattleResEmpty

// optional uint32 id = 1;
inline bool stNotityResBattleResEmpty::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotityResBattleResEmpty::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotityResBattleResEmpty::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotityResBattleResEmpty::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stNotityResBattleResEmpty::id() const {
  return id_;
}
inline void stNotityResBattleResEmpty::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stNotityResBattleGlory

// optional uint32 val = 1;
inline bool stNotityResBattleGlory::has_val() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotityResBattleGlory::set_has_val() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotityResBattleGlory::clear_has_val() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotityResBattleGlory::clear_val() {
  val_ = 0u;
  clear_has_val();
}
inline ::google::protobuf::uint32 stNotityResBattleGlory::val() const {
  return val_;
}
inline void stNotityResBattleGlory::set_val(::google::protobuf::uint32 value) {
  set_has_val();
  val_ = value;
}

// -------------------------------------------------------------------

// stBroadCastResBattleInvite

// optional uint32 charId = 1;
inline bool stBroadCastResBattleInvite::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBroadCastResBattleInvite::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBroadCastResBattleInvite::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBroadCastResBattleInvite::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stBroadCastResBattleInvite::charid() const {
  return charid_;
}
inline void stBroadCastResBattleInvite::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetResBattleReceiveInvite

// optional string name = 1;
inline bool stRetResBattleReceiveInvite::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetResBattleReceiveInvite::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetResBattleReceiveInvite::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetResBattleReceiveInvite::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stRetResBattleReceiveInvite::name() const {
  return *name_;
}
inline void stRetResBattleReceiveInvite::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRetResBattleReceiveInvite::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRetResBattleReceiveInvite::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRetResBattleReceiveInvite::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stRetResBattleReceiveInvite::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRetResBattleReceiveInvite::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charId = 2;
inline bool stRetResBattleReceiveInvite::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetResBattleReceiveInvite::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetResBattleReceiveInvite::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetResBattleReceiveInvite::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRetResBattleReceiveInvite::charid() const {
  return charid_;
}
inline void stRetResBattleReceiveInvite::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 instanceLvl = 3;
inline bool stRetResBattleReceiveInvite::has_instancelvl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetResBattleReceiveInvite::set_has_instancelvl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetResBattleReceiveInvite::clear_has_instancelvl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetResBattleReceiveInvite::clear_instancelvl() {
  instancelvl_ = 0u;
  clear_has_instancelvl();
}
inline ::google::protobuf::uint32 stRetResBattleReceiveInvite::instancelvl() const {
  return instancelvl_;
}
inline void stRetResBattleReceiveInvite::set_instancelvl(::google::protobuf::uint32 value) {
  set_has_instancelvl();
  instancelvl_ = value;
}

// optional uint32 job = 4;
inline bool stRetResBattleReceiveInvite::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetResBattleReceiveInvite::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetResBattleReceiveInvite::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetResBattleReceiveInvite::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stRetResBattleReceiveInvite::job() const {
  return job_;
}
inline void stRetResBattleReceiveInvite::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stRetResBattleReceiveInvite::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetResBattleReceiveInvite::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetResBattleReceiveInvite::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetResBattleReceiveInvite::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stRetResBattleReceiveInvite::sex() const {
  return sex_;
}
inline void stRetResBattleReceiveInvite::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 battlePower = 6;
inline bool stRetResBattleReceiveInvite::has_battlepower() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRetResBattleReceiveInvite::set_has_battlepower() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRetResBattleReceiveInvite::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRetResBattleReceiveInvite::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stRetResBattleReceiveInvite::battlepower() const {
  return battlepower_;
}
inline void stRetResBattleReceiveInvite::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 vipLv = 7;
inline bool stRetResBattleReceiveInvite::has_viplv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRetResBattleReceiveInvite::set_has_viplv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRetResBattleReceiveInvite::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRetResBattleReceiveInvite::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stRetResBattleReceiveInvite::viplv() const {
  return viplv_;
}
inline void stRetResBattleReceiveInvite::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional uint32 photoID = 8;
inline bool stRetResBattleReceiveInvite::has_photoid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRetResBattleReceiveInvite::set_has_photoid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRetResBattleReceiveInvite::clear_has_photoid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRetResBattleReceiveInvite::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stRetResBattleReceiveInvite::photoid() const {
  return photoid_;
}
inline void stRetResBattleReceiveInvite::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stResBattleReplyInviteJoin

// optional bool agree = 1;
inline bool stResBattleReplyInviteJoin::has_agree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResBattleReplyInviteJoin::set_has_agree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResBattleReplyInviteJoin::clear_has_agree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResBattleReplyInviteJoin::clear_agree() {
  agree_ = false;
  clear_has_agree();
}
inline bool stResBattleReplyInviteJoin::agree() const {
  return agree_;
}
inline void stResBattleReplyInviteJoin::set_agree(bool value) {
  set_has_agree();
  agree_ = value;
}

// optional uint32 charId = 2;
inline bool stResBattleReplyInviteJoin::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResBattleReplyInviteJoin::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResBattleReplyInviteJoin::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResBattleReplyInviteJoin::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResBattleReplyInviteJoin::charid() const {
  return charid_;
}
inline void stResBattleReplyInviteJoin::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResBattleInviteJoinRes

// optional .SortProto.stResBattleInviteJoinRes.eResult result = 1;
inline bool stResBattleInviteJoinRes::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResBattleInviteJoinRes::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResBattleInviteJoinRes::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResBattleInviteJoinRes::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stResBattleInviteJoinRes_eResult stResBattleInviteJoinRes::result() const {
  return static_cast< ::SortProto::stResBattleInviteJoinRes_eResult >(result_);
}
inline void stResBattleInviteJoinRes::set_result(::SortProto::stResBattleInviteJoinRes_eResult value) {
  assert(::SortProto::stResBattleInviteJoinRes_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqStoneCopyMapInfo

// optional uint32 charID = 1;
inline bool stReqStoneCopyMapInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqStoneCopyMapInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqStoneCopyMapInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqStoneCopyMapInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqStoneCopyMapInfo::charid() const {
  return charid_;
}
inline void stReqStoneCopyMapInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stStoneCopyMapInfoResult

// optional uint32 usedTimes = 1;
inline bool stStoneCopyMapInfoResult::has_usedtimes() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stStoneCopyMapInfoResult::set_has_usedtimes() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stStoneCopyMapInfoResult::clear_has_usedtimes() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stStoneCopyMapInfoResult::clear_usedtimes() {
  usedtimes_ = 0u;
  clear_has_usedtimes();
}
inline ::google::protobuf::uint32 stStoneCopyMapInfoResult::usedtimes() const {
  return usedtimes_;
}
inline void stStoneCopyMapInfoResult::set_usedtimes(::google::protobuf::uint32 value) {
  set_has_usedtimes();
  usedtimes_ = value;
}

// optional uint32 maxTimes = 2;
inline bool stStoneCopyMapInfoResult::has_maxtimes() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stStoneCopyMapInfoResult::set_has_maxtimes() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stStoneCopyMapInfoResult::clear_has_maxtimes() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stStoneCopyMapInfoResult::clear_maxtimes() {
  maxtimes_ = 0u;
  clear_has_maxtimes();
}
inline ::google::protobuf::uint32 stStoneCopyMapInfoResult::maxtimes() const {
  return maxtimes_;
}
inline void stStoneCopyMapInfoResult::set_maxtimes(::google::protobuf::uint32 value) {
  set_has_maxtimes();
  maxtimes_ = value;
}

// optional uint32 resetTimes = 3;
inline bool stStoneCopyMapInfoResult::has_resettimes() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stStoneCopyMapInfoResult::set_has_resettimes() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stStoneCopyMapInfoResult::clear_has_resettimes() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stStoneCopyMapInfoResult::clear_resettimes() {
  resettimes_ = 0u;
  clear_has_resettimes();
}
inline ::google::protobuf::uint32 stStoneCopyMapInfoResult::resettimes() const {
  return resettimes_;
}
inline void stStoneCopyMapInfoResult::set_resettimes(::google::protobuf::uint32 value) {
  set_has_resettimes();
  resettimes_ = value;
}

// -------------------------------------------------------------------

// stReqChallengeStoneCopyMap

// optional uint32 levelId = 1;
inline bool stReqChallengeStoneCopyMap::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChallengeStoneCopyMap::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChallengeStoneCopyMap::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChallengeStoneCopyMap::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqChallengeStoneCopyMap::levelid() const {
  return levelid_;
}
inline void stReqChallengeStoneCopyMap::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stChallengeStoneCopyMap

// optional uint32 levelId = 1;
inline bool stChallengeStoneCopyMap::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChallengeStoneCopyMap::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChallengeStoneCopyMap::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChallengeStoneCopyMap::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stChallengeStoneCopyMap::levelid() const {
  return levelid_;
}
inline void stChallengeStoneCopyMap::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional .SortProto.stChallengeStoneCopyMap.eResult result = 2;
inline bool stChallengeStoneCopyMap::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stChallengeStoneCopyMap::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stChallengeStoneCopyMap::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stChallengeStoneCopyMap::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stChallengeStoneCopyMap_eResult stChallengeStoneCopyMap::result() const {
  return static_cast< ::SortProto::stChallengeStoneCopyMap_eResult >(result_);
}
inline void stChallengeStoneCopyMap::set_result(::SortProto::stChallengeStoneCopyMap_eResult value) {
  assert(::SortProto::stChallengeStoneCopyMap_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqResetStoneCopyMapNum

// optional uint32 CharID = 1;
inline bool stReqResetStoneCopyMapNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResetStoneCopyMapNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResetStoneCopyMapNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResetStoneCopyMapNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResetStoneCopyMapNum::charid() const {
  return charid_;
}
inline void stReqResetStoneCopyMapNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResetStoneCopyMapNum

// optional .SortProto.stResetStoneCopyMapNum.eResult result = 1;
inline bool stResetStoneCopyMapNum::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetStoneCopyMapNum::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetStoneCopyMapNum::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetStoneCopyMapNum::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stResetStoneCopyMapNum_eResult stResetStoneCopyMapNum::result() const {
  return static_cast< ::SortProto::stResetStoneCopyMapNum_eResult >(result_);
}
inline void stResetStoneCopyMapNum::set_result(::SortProto::stResetStoneCopyMapNum_eResult value) {
  assert(::SortProto::stResetStoneCopyMapNum_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqResBattleResource

// optional uint32 charID = 1;
inline bool stReqResBattleResource::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResBattleResource::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResBattleResource::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResBattleResource::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqResBattleResource::charid() const {
  return charid_;
}
inline void stReqResBattleResource::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetResBattleResource

// optional .SortProto.stRetResBattleResource.eResult result = 1;
inline bool stRetResBattleResource::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetResBattleResource::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetResBattleResource::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetResBattleResource::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::SortProto::stRetResBattleResource_eResult stRetResBattleResource::result() const {
  return static_cast< ::SortProto::stRetResBattleResource_eResult >(result_);
}
inline void stRetResBattleResource::set_result(::SortProto::stRetResBattleResource_eResult value) {
  assert(::SortProto::stRetResBattleResource_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .SortProto.stBattleResRefreshItem item = 2;
inline int stRetResBattleResource::item_size() const {
  return item_.size();
}
inline void stRetResBattleResource::clear_item() {
  item_.Clear();
}
inline const ::SortProto::stBattleResRefreshItem& stRetResBattleResource::item(int index) const {
  return item_.Get(index);
}
inline ::SortProto::stBattleResRefreshItem* stRetResBattleResource::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::SortProto::stBattleResRefreshItem* stRetResBattleResource::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem >&
stRetResBattleResource::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::SortProto::stBattleResRefreshItem >*
stRetResBattleResource::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// stResBattleEnd

// optional uint32 charid = 1;
inline bool stResBattleEnd::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResBattleEnd::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResBattleEnd::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResBattleEnd::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResBattleEnd::charid() const {
  return charid_;
}
inline void stResBattleEnd::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SortProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqLevelSortList_ProtoModID>() {
  return ::SortProto::stReqLevelSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqLevelSortList_ProtoFunID>() {
  return ::SortProto::stReqLevelSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetLevelSortList_ProtoModID>() {
  return ::SortProto::stRetLevelSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetLevelSortList_ProtoFunID>() {
  return ::SortProto::stRetLevelSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqBattlePowerSortList_ProtoModID>() {
  return ::SortProto::stReqBattlePowerSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqBattlePowerSortList_ProtoFunID>() {
  return ::SortProto::stReqBattlePowerSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetBattlePowerSortList_ProtoModID>() {
  return ::SortProto::stRetBattlePowerSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetBattlePowerSortList_ProtoFunID>() {
  return ::SortProto::stRetBattlePowerSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqCopymapSortList_ProtoModID>() {
  return ::SortProto::stReqCopymapSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqCopymapSortList_ProtoFunID>() {
  return ::SortProto::stReqCopymapSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCopyMapSortList_ProtoModID>() {
  return ::SortProto::stRetCopyMapSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCopyMapSortList_ProtoFunID>() {
  return ::SortProto::stRetCopyMapSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqArenaPKList_ProtoModID>() {
  return ::SortProto::stReqArenaPKList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqArenaPKList_ProtoFunID>() {
  return ::SortProto::stReqArenaPKList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetArenaPKList_ProtoModID>() {
  return ::SortProto::stRetArenaPKList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetArenaPKList_ProtoFunID>() {
  return ::SortProto::stRetArenaPKList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqArenaSortList_ProtoModID>() {
  return ::SortProto::stReqArenaSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqArenaSortList_ProtoFunID>() {
  return ::SortProto::stReqArenaSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetArenaSortList_ProtoModID>() {
  return ::SortProto::stRetArenaSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetArenaSortList_ProtoFunID>() {
  return ::SortProto::stRetArenaSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqOne2OnePVPSortList_ProtoModID>() {
  return ::SortProto::stReqOne2OnePVPSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqOne2OnePVPSortList_ProtoFunID>() {
  return ::SortProto::stReqOne2OnePVPSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetOne2OnePVPSortList_ProtoModID>() {
  return ::SortProto::stRetOne2OnePVPSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetOne2OnePVPSortList_ProtoFunID>() {
  return ::SortProto::stRetOne2OnePVPSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallengeArenaUser_ProtoModID>() {
  return ::SortProto::stChallengeArenaUser_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallengeArenaUser_ProtoFunID>() {
  return ::SortProto::stChallengeArenaUser_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallengeArenaUserResult_eResult>() {
  return ::SortProto::stChallengeArenaUserResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallengeArenaUserResult_ProtoModID>() {
  return ::SortProto::stChallengeArenaUserResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallengeArenaUserResult_ProtoFunID>() {
  return ::SortProto::stChallengeArenaUserResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallegeLeitaiUser_ProtoModID>() {
  return ::SortProto::stChallegeLeitaiUser_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallegeLeitaiUser_ProtoFunID>() {
  return ::SortProto::stChallegeLeitaiUser_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallegeLeitaiUserResult_eResult>() {
  return ::SortProto::stChallegeLeitaiUserResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallegeLeitaiUserResult_ProtoModID>() {
  return ::SortProto::stChallegeLeitaiUserResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallegeLeitaiUserResult_ProtoFunID>() {
  return ::SortProto::stChallegeLeitaiUserResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stOpenLeitaiWindow_ProtoModID>() {
  return ::SortProto::stOpenLeitaiWindow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stOpenLeitaiWindow_ProtoFunID>() {
  return ::SortProto::stOpenLeitaiWindow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetLeitaiInfo_ProtoModID>() {
  return ::SortProto::stRetLeitaiInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetLeitaiInfo_ProtoFunID>() {
  return ::SortProto::stRetLeitaiInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqLeitaiSortList_ProtoModID>() {
  return ::SortProto::stReqLeitaiSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqLeitaiSortList_ProtoFunID>() {
  return ::SortProto::stReqLeitaiSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetLeitaiSortList_ProtoModID>() {
  return ::SortProto::stRetLeitaiSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetLeitaiSortList_ProtoFunID>() {
  return ::SortProto::stRetLeitaiSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSendLeitaiResult_ProtoModID>() {
  return ::SortProto::stSendLeitaiResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSendLeitaiResult_ProtoFunID>() {
  return ::SortProto::stSendLeitaiResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetSendLeitaiResult_eResult>() {
  return ::SortProto::stRetSendLeitaiResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetSendLeitaiResult_ProtoModID>() {
  return ::SortProto::stRetSendLeitaiResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetSendLeitaiResult_ProtoFunID>() {
  return ::SortProto::stRetSendLeitaiResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotifySelectLeitaiMode_ProtoModID>() {
  return ::SortProto::stNotifySelectLeitaiMode_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotifySelectLeitaiMode_ProtoFunID>() {
  return ::SortProto::stNotifySelectLeitaiMode_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSelectLeiTaiMode_ProtoModID>() {
  return ::SortProto::stSelectLeiTaiMode_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSelectLeiTaiMode_ProtoFunID>() {
  return ::SortProto::stSelectLeiTaiMode_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSelectLeiTaiModeResult_eResult>() {
  return ::SortProto::stSelectLeiTaiModeResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSelectLeiTaiModeResult_ProtoModID>() {
  return ::SortProto::stSelectLeiTaiModeResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSelectLeiTaiModeResult_ProtoFunID>() {
  return ::SortProto::stSelectLeiTaiModeResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetLeitaiInfo_ProtoModID>() {
  return ::SortProto::stResetLeitaiInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetLeitaiInfo_ProtoFunID>() {
  return ::SortProto::stResetLeitaiInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetLeitaiInfoResult_eResult>() {
  return ::SortProto::stResetLeitaiInfoResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetLeitaiInfoResult_ProtoModID>() {
  return ::SortProto::stResetLeitaiInfoResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetLeitaiInfoResult_ProtoFunID>() {
  return ::SortProto::stResetLeitaiInfoResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqDrawHeroSortList_ProtoModID>() {
  return ::SortProto::stReqDrawHeroSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqDrawHeroSortList_ProtoFunID>() {
  return ::SortProto::stReqDrawHeroSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stDrawHeroSortList_ProtoModID>() {
  return ::SortProto::stDrawHeroSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stDrawHeroSortList_ProtoFunID>() {
  return ::SortProto::stDrawHeroSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqOne2OnePVPMatch_ProtoModID>() {
  return ::SortProto::stReqOne2OnePVPMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqOne2OnePVPMatch_ProtoFunID>() {
  return ::SortProto::stReqOne2OnePVPMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stOne2OnePVPMatchResult_eResult>() {
  return ::SortProto::stOne2OnePVPMatchResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stOne2OnePVPMatchResult_ProtoModID>() {
  return ::SortProto::stOne2OnePVPMatchResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stOne2OnePVPMatchResult_ProtoFunID>() {
  return ::SortProto::stOne2OnePVPMatchResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCancelOne2OnePVPMatch_ProtoModID>() {
  return ::SortProto::stCancelOne2OnePVPMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCancelOne2OnePVPMatch_ProtoFunID>() {
  return ::SortProto::stCancelOne2OnePVPMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCancelOne2OnePVPResult_eResult>() {
  return ::SortProto::stCancelOne2OnePVPResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCancelOne2OnePVPResult_ProtoModID>() {
  return ::SortProto::stCancelOne2OnePVPResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCancelOne2OnePVPResult_ProtoFunID>() {
  return ::SortProto::stCancelOne2OnePVPResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqMySortListInfo_ProtoModID>() {
  return ::SortProto::stReqMySortListInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqMySortListInfo_ProtoFunID>() {
  return ::SortProto::stReqMySortListInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetMySortListInfo_ProtoModID>() {
  return ::SortProto::stRetMySortListInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetMySortListInfo_ProtoFunID>() {
  return ::SortProto::stRetMySortListInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiMoveHero2BattlePos_ProtoModID>() {
  return ::SortProto::stLeitaiMoveHero2BattlePos_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiMoveHero2BattlePos_ProtoFunID>() {
  return ::SortProto::stLeitaiMoveHero2BattlePos_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiMoveHero2BattlePosError_eResult>() {
  return ::SortProto::stLeitaiMoveHero2BattlePosError_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiMoveHero2BattlePosError_ProtoModID>() {
  return ::SortProto::stLeitaiMoveHero2BattlePosError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiMoveHero2BattlePosError_ProtoFunID>() {
  return ::SortProto::stLeitaiMoveHero2BattlePosError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiCancelGoOutForBattle_ProtoModID>() {
  return ::SortProto::stLeitaiCancelGoOutForBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiCancelGoOutForBattle_ProtoFunID>() {
  return ::SortProto::stLeitaiCancelGoOutForBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiCancelGoOutForBattleResult_eResult>() {
  return ::SortProto::stLeitaiCancelGoOutForBattleResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiCancelGoOutForBattleResult_ProtoModID>() {
  return ::SortProto::stLeitaiCancelGoOutForBattleResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiCancelGoOutForBattleResult_ProtoFunID>() {
  return ::SortProto::stLeitaiCancelGoOutForBattleResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCommitArenaResult_ProtoModID>() {
  return ::SortProto::stCommitArenaResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCommitArenaResult_ProtoFunID>() {
  return ::SortProto::stCommitArenaResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCommintArenaResult_eResult>() {
  return ::SortProto::stRetCommintArenaResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCommintArenaResult_ProtoModID>() {
  return ::SortProto::stRetCommintArenaResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCommintArenaResult_ProtoFunID>() {
  return ::SortProto::stRetCommintArenaResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqEnterLeitaiScene_ProtoModID>() {
  return ::SortProto::stReqEnterLeitaiScene_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqEnterLeitaiScene_ProtoFunID>() {
  return ::SortProto::stReqEnterLeitaiScene_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResetLeitaiBuff_ProtoModID>() {
  return ::SortProto::stReqResetLeitaiBuff_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResetLeitaiBuff_ProtoFunID>() {
  return ::SortProto::stReqResetLeitaiBuff_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetLeitaiBuffResult_eResult>() {
  return ::SortProto::stResetLeitaiBuffResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetLeitaiBuffResult_ProtoModID>() {
  return ::SortProto::stResetLeitaiBuffResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetLeitaiBuffResult_ProtoFunID>() {
  return ::SortProto::stResetLeitaiBuffResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqBuffResetTime_ProtoModID>() {
  return ::SortProto::stReqBuffResetTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqBuffResetTime_ProtoFunID>() {
  return ::SortProto::stReqBuffResetTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetBuffResetTime_ProtoModID>() {
  return ::SortProto::stRetBuffResetTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetBuffResetTime_ProtoFunID>() {
  return ::SortProto::stRetBuffResetTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stArenaReachNewRank_ProtoModID>() {
  return ::SortProto::stArenaReachNewRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stArenaReachNewRank_ProtoFunID>() {
  return ::SortProto::stArenaReachNewRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResetArenaChallengeNum_ProtoModID>() {
  return ::SortProto::stReqResetArenaChallengeNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResetArenaChallengeNum_ProtoFunID>() {
  return ::SortProto::stReqResetArenaChallengeNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetArenaChallengeNunResult_eResult>() {
  return ::SortProto::stResetArenaChallengeNunResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetArenaChallengeNunResult_ProtoModID>() {
  return ::SortProto::stResetArenaChallengeNunResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetArenaChallengeNunResult_ProtoFunID>() {
  return ::SortProto::stResetArenaChallengeNunResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqClearArenaCD_ProtoModID>() {
  return ::SortProto::stReqClearArenaCD_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqClearArenaCD_ProtoFunID>() {
  return ::SortProto::stReqClearArenaCD_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stClearArenaCDResult_eResult>() {
  return ::SortProto::stClearArenaCDResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stClearArenaCDResult_ProtoModID>() {
  return ::SortProto::stClearArenaCDResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stClearArenaCDResult_ProtoFunID>() {
  return ::SortProto::stClearArenaCDResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqOpenSvrBPRank_ProtoModID>() {
  return ::SortProto::stReqOpenSvrBPRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqOpenSvrBPRank_ProtoFunID>() {
  return ::SortProto::stReqOpenSvrBPRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetOpenSvrBPRank_ProtoModID>() {
  return ::SortProto::stRetOpenSvrBPRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetOpenSvrBPRank_ProtoFunID>() {
  return ::SortProto::stRetOpenSvrBPRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqExpeditionInfo_ProtoModID>() {
  return ::SortProto::stReqExpeditionInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqExpeditionInfo_ProtoFunID>() {
  return ::SortProto::stReqExpeditionInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpeditionInfo_eResult>() {
  return ::SortProto::stRetExpeditionInfo_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpeditionInfo_ProtoModID>() {
  return ::SortProto::stRetExpeditionInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpeditionInfo_ProtoFunID>() {
  return ::SortProto::stRetExpeditionInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqExpedition_ProtoModID>() {
  return ::SortProto::stReqExpedition_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqExpedition_ProtoFunID>() {
  return ::SortProto::stReqExpedition_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpedition_eResult>() {
  return ::SortProto::stRetExpedition_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpedition_ProtoModID>() {
  return ::SortProto::stRetExpedition_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpedition_ProtoFunID>() {
  return ::SortProto::stRetExpedition_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqExpeditionReward_ProtoModID>() {
  return ::SortProto::stReqExpeditionReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqExpeditionReward_ProtoFunID>() {
  return ::SortProto::stReqExpeditionReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpeditionReward_eResult>() {
  return ::SortProto::stRetExpeditionReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpeditionReward_ProtoModID>() {
  return ::SortProto::stRetExpeditionReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpeditionReward_ProtoFunID>() {
  return ::SortProto::stRetExpeditionReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqFastExpedition_ProtoModID>() {
  return ::SortProto::stReqFastExpedition_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqFastExpedition_ProtoFunID>() {
  return ::SortProto::stReqFastExpedition_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetFastExpedition_eResult>() {
  return ::SortProto::stRetFastExpedition_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetFastExpedition_ProtoModID>() {
  return ::SortProto::stRetFastExpedition_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetFastExpedition_ProtoFunID>() {
  return ::SortProto::stRetFastExpedition_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqCancelExpedition_ProtoModID>() {
  return ::SortProto::stReqCancelExpedition_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqCancelExpedition_ProtoFunID>() {
  return ::SortProto::stReqCancelExpedition_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCancelExpedition_eResult>() {
  return ::SortProto::stRetCancelExpedition_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCancelExpedition_ProtoModID>() {
  return ::SortProto::stRetCancelExpedition_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCancelExpedition_ProtoFunID>() {
  return ::SortProto::stRetCancelExpedition_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqExpeditionSummary_ProtoModID>() {
  return ::SortProto::stReqExpeditionSummary_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqExpeditionSummary_ProtoFunID>() {
  return ::SortProto::stReqExpeditionSummary_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpeditionSummary_eResult>() {
  return ::SortProto::stRetExpeditionSummary_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpeditionSummary_ProtoModID>() {
  return ::SortProto::stRetExpeditionSummary_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetExpeditionSummary_ProtoFunID>() {
  return ::SortProto::stRetExpeditionSummary_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqGloryfashionSortList_ProtoModID>() {
  return ::SortProto::stReqGloryfashionSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqGloryfashionSortList_ProtoFunID>() {
  return ::SortProto::stReqGloryfashionSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stGloryfashionSortList_ProtoModID>() {
  return ::SortProto::stGloryfashionSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stGloryfashionSortList_ProtoFunID>() {
  return ::SortProto::stGloryfashionSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqEnterEmeraldDream_ProtoModID>() {
  return ::SortProto::stReqEnterEmeraldDream_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqEnterEmeraldDream_ProtoFunID>() {
  return ::SortProto::stReqEnterEmeraldDream_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stEnterEmeraldDreamResult_eResult>() {
  return ::SortProto::stEnterEmeraldDreamResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stEnterEmeraldDreamResult_ProtoModID>() {
  return ::SortProto::stEnterEmeraldDreamResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stEnterEmeraldDreamResult_ProtoFunID>() {
  return ::SortProto::stEnterEmeraldDreamResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetFightNum_ProtoModID>() {
  return ::SortProto::stResetFightNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetFightNum_ProtoFunID>() {
  return ::SortProto::stResetFightNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetFightNumResult_eResult>() {
  return ::SortProto::stResetFightNumResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetFightNumResult_ProtoModID>() {
  return ::SortProto::stResetFightNumResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetFightNumResult_ProtoFunID>() {
  return ::SortProto::stResetFightNumResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqEmeraldDreamSortList_ProtoModID>() {
  return ::SortProto::stReqEmeraldDreamSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqEmeraldDreamSortList_ProtoFunID>() {
  return ::SortProto::stReqEmeraldDreamSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stEmeraldDreamSortList_ProtoModID>() {
  return ::SortProto::stEmeraldDreamSortList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stEmeraldDreamSortList_ProtoFunID>() {
  return ::SortProto::stEmeraldDreamSortList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSendRankInfo_ProtoModID>() {
  return ::SortProto::stSendRankInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSendRankInfo_ProtoFunID>() {
  return ::SortProto::stSendRankInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqSurplusNum_ProtoModID>() {
  return ::SortProto::stReqSurplusNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqSurplusNum_ProtoFunID>() {
  return ::SortProto::stReqSurplusNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSurplusNumResult_ProtoModID>() {
  return ::SortProto::stSurplusNumResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSurplusNumResult_ProtoFunID>() {
  return ::SortProto::stSurplusNumResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqOpenLeagueWindow_ProtoModID>() {
  return ::SortProto::stReqOpenLeagueWindow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqOpenLeagueWindow_ProtoFunID>() {
  return ::SortProto::stReqOpenLeagueWindow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stOpenLeagueWindowResult_eStatus>() {
  return ::SortProto::stOpenLeagueWindowResult_eStatus_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stOpenLeagueWindowResult_eSession>() {
  return ::SortProto::stOpenLeagueWindowResult_eSession_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stOpenLeagueWindowResult_ProtoModID>() {
  return ::SortProto::stOpenLeagueWindowResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stOpenLeagueWindowResult_ProtoFunID>() {
  return ::SortProto::stOpenLeagueWindowResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqHeroLeagueMatch_ProtoModID>() {
  return ::SortProto::stReqHeroLeagueMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqHeroLeagueMatch_ProtoFunID>() {
  return ::SortProto::stReqHeroLeagueMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stHeroLeagueMatchResult_eResult>() {
  return ::SortProto::stHeroLeagueMatchResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stHeroLeagueMatchResult_ProtoModID>() {
  return ::SortProto::stHeroLeagueMatchResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stHeroLeagueMatchResult_ProtoFunID>() {
  return ::SortProto::stHeroLeagueMatchResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqMenberInfo_ProtoModID>() {
  return ::SortProto::stReqMenberInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqMenberInfo_ProtoFunID>() {
  return ::SortProto::stReqMenberInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stMemberinfo_ProtoModID>() {
  return ::SortProto::stMemberinfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stMemberinfo_ProtoFunID>() {
  return ::SortProto::stMemberinfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCancelHeroLeagueMatch_ProtoModID>() {
  return ::SortProto::stCancelHeroLeagueMatch_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCancelHeroLeagueMatch_ProtoFunID>() {
  return ::SortProto::stCancelHeroLeagueMatch_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCanceHeroLeagueResult_eResult>() {
  return ::SortProto::stCanceHeroLeagueResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCanceHeroLeagueResult_ProtoModID>() {
  return ::SortProto::stCanceHeroLeagueResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stCanceHeroLeagueResult_ProtoFunID>() {
  return ::SortProto::stCanceHeroLeagueResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqQualifiedList_eSession>() {
  return ::SortProto::stReqQualifiedList_eSession_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqQualifiedList_ProtoModID>() {
  return ::SortProto::stReqQualifiedList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqQualifiedList_ProtoFunID>() {
  return ::SortProto::stReqQualifiedList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRoleBasicInfo_eCompleteState>() {
  return ::SortProto::stRoleBasicInfo_eCompleteState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stQualifiedListResult_ProtoModID>() {
  return ::SortProto::stQualifiedListResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stQualifiedListResult_ProtoFunID>() {
  return ::SortProto::stQualifiedListResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqWorship_ProtoModID>() {
  return ::SortProto::stReqWorship_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqWorship_ProtoFunID>() {
  return ::SortProto::stReqWorship_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stWorskipResult_eResult>() {
  return ::SortProto::stWorskipResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stWorskipResult_ProtoModID>() {
  return ::SortProto::stWorskipResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stWorskipResult_ProtoFunID>() {
  return ::SortProto::stWorskipResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqHeroList_stType>() {
  return ::SortProto::stReqHeroList_stType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqHeroList_ProtoModID>() {
  return ::SortProto::stReqHeroList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqHeroList_ProtoFunID>() {
  return ::SortProto::stReqHeroList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stHeroListResult_ProtoModID>() {
  return ::SortProto::stHeroListResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stHeroListResult_ProtoFunID>() {
  return ::SortProto::stHeroListResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqRegister_ProtoModID>() {
  return ::SortProto::stReqRegister_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqRegister_ProtoFunID>() {
  return ::SortProto::stReqRegister_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRegisrerResult_ProtoModID>() {
  return ::SortProto::stRegisrerResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRegisrerResult_ProtoFunID>() {
  return ::SortProto::stRegisrerResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stArenaResultNotify_eResult>() {
  return ::SortProto::stArenaResultNotify_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stArenaResultNotify_ProtoModID>() {
  return ::SortProto::stArenaResultNotify_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stArenaResultNotify_ProtoFunID>() {
  return ::SortProto::stArenaResultNotify_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqPubLogIn_ProtoModID>() {
  return ::SortProto::stReqPubLogIn_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqPubLogIn_ProtoFunID>() {
  return ::SortProto::stReqPubLogIn_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqPubLogOut_ProtoModID>() {
  return ::SortProto::stReqPubLogOut_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqPubLogOut_ProtoFunID>() {
  return ::SortProto::stReqPubLogOut_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRemoveModel_ProtoModID>() {
  return ::SortProto::stRemoveModel_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRemoveModel_ProtoFunID>() {
  return ::SortProto::stRemoveModel_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiResultNotify_eResult>() {
  return ::SortProto::stLeitaiResultNotify_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiResultNotify_ProtoModID>() {
  return ::SortProto::stLeitaiResultNotify_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stLeitaiResultNotify_ProtoFunID>() {
  return ::SortProto::stLeitaiResultNotify_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqRedPoint_ProtoModID>() {
  return ::SortProto::stReqRedPoint_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqRedPoint_ProtoFunID>() {
  return ::SortProto::stReqRedPoint_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRedPointResult_ProtoModID>() {
  return ::SortProto::stRedPointResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRedPointResult_ProtoFunID>() {
  return ::SortProto::stRedPointResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqDragonNest_ProtoModID>() {
  return ::SortProto::stReqDragonNest_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqDragonNest_ProtoFunID>() {
  return ::SortProto::stReqDragonNest_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetDragonNest_ProtoModID>() {
  return ::SortProto::stRetDragonNest_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetDragonNest_ProtoFunID>() {
  return ::SortProto::stRetDragonNest_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqChallengeDragonNest_eDragonType>() {
  return ::SortProto::stReqChallengeDragonNest_eDragonType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqChallengeDragonNest_eDifficultyType>() {
  return ::SortProto::stReqChallengeDragonNest_eDifficultyType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqChallengeDragonNest_ProtoModID>() {
  return ::SortProto::stReqChallengeDragonNest_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqChallengeDragonNest_ProtoFunID>() {
  return ::SortProto::stReqChallengeDragonNest_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetChallengeDragonNest_eResult>() {
  return ::SortProto::stRetChallengeDragonNest_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetChallengeDragonNest_ProtoModID>() {
  return ::SortProto::stRetChallengeDragonNest_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetChallengeDragonNest_ProtoFunID>() {
  return ::SortProto::stRetChallengeDragonNest_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResetChallengeDragonNest_ProtoModID>() {
  return ::SortProto::stReqResetChallengeDragonNest_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResetChallengeDragonNest_ProtoFunID>() {
  return ::SortProto::stReqResetChallengeDragonNest_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResetChallengeDragonNest_eResult>() {
  return ::SortProto::stRetResetChallengeDragonNest_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResetChallengeDragonNest_ProtoModID>() {
  return ::SortProto::stRetResetChallengeDragonNest_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResetChallengeDragonNest_ProtoFunID>() {
  return ::SortProto::stRetResetChallengeDragonNest_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqEnterResBattle_ProtoModID>() {
  return ::SortProto::stReqEnterResBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqEnterResBattle_ProtoFunID>() {
  return ::SortProto::stReqEnterResBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetEnterResBattle_eResult>() {
  return ::SortProto::stRetEnterResBattle_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetEnterResBattle_ProtoModID>() {
  return ::SortProto::stRetEnterResBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetEnterResBattle_ProtoFunID>() {
  return ::SortProto::stRetEnterResBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqCurResBattleGloryRank_ProtoModID>() {
  return ::SortProto::stReqCurResBattleGloryRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqCurResBattleGloryRank_ProtoFunID>() {
  return ::SortProto::stReqCurResBattleGloryRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCurResBattleGloryRank_ProtoModID>() {
  return ::SortProto::stRetCurResBattleGloryRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetCurResBattleGloryRank_ProtoFunID>() {
  return ::SortProto::stRetCurResBattleGloryRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleRank_ProtoModID>() {
  return ::SortProto::stReqResBattleRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleRank_ProtoFunID>() {
  return ::SortProto::stReqResBattleRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleRank_ProtoModID>() {
  return ::SortProto::stRetResBattleRank_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleRank_ProtoFunID>() {
  return ::SortProto::stRetResBattleRank_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleKing_ProtoModID>() {
  return ::SortProto::stReqResBattleKing_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleKing_ProtoFunID>() {
  return ::SortProto::stReqResBattleKing_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleKing_ProtoModID>() {
  return ::SortProto::stRetResBattleKing_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleKing_ProtoFunID>() {
  return ::SortProto::stRetResBattleKing_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleProstate_ProtoModID>() {
  return ::SortProto::stReqResBattleProstate_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleProstate_ProtoFunID>() {
  return ::SortProto::stReqResBattleProstate_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleProstate_eResult>() {
  return ::SortProto::stRetResBattleProstate_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleProstate_ProtoModID>() {
  return ::SortProto::stRetResBattleProstate_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleProstate_ProtoFunID>() {
  return ::SortProto::stRetResBattleProstate_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleRelive_ProtoModID>() {
  return ::SortProto::stReqResBattleRelive_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleRelive_ProtoFunID>() {
  return ::SortProto::stReqResBattleRelive_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleRelive_eResult>() {
  return ::SortProto::stRetResBattleRelive_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleRelive_ProtoModID>() {
  return ::SortProto::stRetResBattleRelive_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleRelive_ProtoFunID>() {
  return ::SortProto::stRetResBattleRelive_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqLeaveResBattle_ProtoModID>() {
  return ::SortProto::stReqLeaveResBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqLeaveResBattle_ProtoFunID>() {
  return ::SortProto::stReqLeaveResBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetLeaveResBattle_eResult>() {
  return ::SortProto::stRetLeaveResBattle_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetLeaveResBattle_ProtoModID>() {
  return ::SortProto::stRetLeaveResBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetLeaveResBattle_ProtoFunID>() {
  return ::SortProto::stRetLeaveResBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqRecvResBattleRes_ProtoModID>() {
  return ::SortProto::stReqRecvResBattleRes_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqRecvResBattleRes_ProtoFunID>() {
  return ::SortProto::stReqRecvResBattleRes_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetRecvResBattleRes_ProtoModID>() {
  return ::SortProto::stRetRecvResBattleRes_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetRecvResBattleRes_ProtoFunID>() {
  return ::SortProto::stRetRecvResBattleRes_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSendResBattleStreakNum_ProtoModID>() {
  return ::SortProto::stSendResBattleStreakNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSendResBattleStreakNum_ProtoFunID>() {
  return ::SortProto::stSendResBattleStreakNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSendResBattleNotice_eNotice>() {
  return ::SortProto::stSendResBattleNotice_eNotice_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSendResBattleNotice_ProtoModID>() {
  return ::SortProto::stSendResBattleNotice_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stSendResBattleNotice_ProtoFunID>() {
  return ::SortProto::stSendResBattleNotice_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotityResBattleKillInfo_ProtoModID>() {
  return ::SortProto::stNotityResBattleKillInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotityResBattleKillInfo_ProtoFunID>() {
  return ::SortProto::stNotityResBattleKillInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotityResBattleResRefresh_ProtoModID>() {
  return ::SortProto::stNotityResBattleResRefresh_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotityResBattleResRefresh_ProtoFunID>() {
  return ::SortProto::stNotityResBattleResRefresh_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotityResBattleResEmpty_ProtoModID>() {
  return ::SortProto::stNotityResBattleResEmpty_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotityResBattleResEmpty_ProtoFunID>() {
  return ::SortProto::stNotityResBattleResEmpty_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotityResBattleGlory_ProtoModID>() {
  return ::SortProto::stNotityResBattleGlory_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stNotityResBattleGlory_ProtoFunID>() {
  return ::SortProto::stNotityResBattleGlory_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stBroadCastResBattleInvite_ProtoModID>() {
  return ::SortProto::stBroadCastResBattleInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stBroadCastResBattleInvite_ProtoFunID>() {
  return ::SortProto::stBroadCastResBattleInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleReceiveInvite_ProtoModID>() {
  return ::SortProto::stRetResBattleReceiveInvite_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleReceiveInvite_ProtoFunID>() {
  return ::SortProto::stRetResBattleReceiveInvite_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResBattleReplyInviteJoin_ProtoModID>() {
  return ::SortProto::stResBattleReplyInviteJoin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResBattleReplyInviteJoin_ProtoFunID>() {
  return ::SortProto::stResBattleReplyInviteJoin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResBattleInviteJoinRes_eResult>() {
  return ::SortProto::stResBattleInviteJoinRes_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResBattleInviteJoinRes_ProtoModID>() {
  return ::SortProto::stResBattleInviteJoinRes_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResBattleInviteJoinRes_ProtoFunID>() {
  return ::SortProto::stResBattleInviteJoinRes_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqStoneCopyMapInfo_ProtoModID>() {
  return ::SortProto::stReqStoneCopyMapInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqStoneCopyMapInfo_ProtoFunID>() {
  return ::SortProto::stReqStoneCopyMapInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stStoneCopyMapInfoResult_ProtoModID>() {
  return ::SortProto::stStoneCopyMapInfoResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stStoneCopyMapInfoResult_ProtoFunID>() {
  return ::SortProto::stStoneCopyMapInfoResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqChallengeStoneCopyMap_ProtoModID>() {
  return ::SortProto::stReqChallengeStoneCopyMap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqChallengeStoneCopyMap_ProtoFunID>() {
  return ::SortProto::stReqChallengeStoneCopyMap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallengeStoneCopyMap_eResult>() {
  return ::SortProto::stChallengeStoneCopyMap_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallengeStoneCopyMap_ProtoModID>() {
  return ::SortProto::stChallengeStoneCopyMap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stChallengeStoneCopyMap_ProtoFunID>() {
  return ::SortProto::stChallengeStoneCopyMap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResetStoneCopyMapNum_ProtoModID>() {
  return ::SortProto::stReqResetStoneCopyMapNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResetStoneCopyMapNum_ProtoFunID>() {
  return ::SortProto::stReqResetStoneCopyMapNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetStoneCopyMapNum_eResult>() {
  return ::SortProto::stResetStoneCopyMapNum_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetStoneCopyMapNum_ProtoModID>() {
  return ::SortProto::stResetStoneCopyMapNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResetStoneCopyMapNum_ProtoFunID>() {
  return ::SortProto::stResetStoneCopyMapNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleResource_ProtoModID>() {
  return ::SortProto::stReqResBattleResource_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stReqResBattleResource_ProtoFunID>() {
  return ::SortProto::stReqResBattleResource_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleResource_eResult>() {
  return ::SortProto::stRetResBattleResource_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleResource_ProtoModID>() {
  return ::SortProto::stRetResBattleResource_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stRetResBattleResource_ProtoFunID>() {
  return ::SortProto::stRetResBattleResource_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResBattleEnd_ProtoModID>() {
  return ::SortProto::stResBattleEnd_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::stResBattleEnd_ProtoFunID>() {
  return ::SortProto::stResBattleEnd_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::eOne2OneSortListType>() {
  return ::SortProto::eOne2OneSortListType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::SortProto::eLeitaiMode>() {
  return ::SortProto::eLeitaiMode_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SortList_2eproto__INCLUDED
