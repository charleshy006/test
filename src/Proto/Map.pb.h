// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map.proto

#ifndef PROTOBUF_Map_2eproto__INCLUDED
#define PROTOBUF_Map_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ModID.pb.h"
// @@protoc_insertion_point(includes)

namespace Map {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Map_2eproto();
void protobuf_AssignDesc_Map_2eproto();
void protobuf_ShutdownFile_Map_2eproto();

class stNotifyEnterMapInfo;
class stClientLoadResFinish;
class ReqEnterLevelMap;
class stSynDropInfo;
class stSynMonsterInfo;
class NotifyEnterLevelMap;
class stReqLeaveLevel;
class stLeaveLevelSuccess;
class stEnterLevelError;
class stPlayerData;
class NotifyPlayerAppear;
class NotifyObjDisappear;
class NotifyObjDisappear_stObjDisappearInfo;
class NotifyNpcAppear;
class NotifyNpcAppear_stNpcData;
class NotifyHeroAppear;
class NotifyHeroAppear_stHeroData;
class Pos;
class ReqMove;
class stNotifyMODMove;
class stNotifyMODMove_stModMoveInfo;
class stThrowSkill;
class stHitInfo;
class stNotifyHit;
class AttRetInfo;
class AttackResult;
class stMapObjAddHP;
class stInstantMove;
class stAttackFail;
class stInterruptPlaySkill;
class stMapObjectChgDir;
class stReqOnlineUserOnMainCity;
class stOnlineUserOnMainCity;
class stChangeHeroGroup;
class stChangeHeroGroupError;
class stNotifyObjMP;
class stNotifyObjBati;
class stAddBufferState2Me;
class stDelBufferState;
class stNotifyExecAI;
class stAlertBossAppear;
class stReqChangeMainCity;
class stNotifyAddFireWall;
class stBeginThunderDamage;
class stCalcThunderDamage;
class stDirectDamge;
class stNotifyObjDie;
class stBeginBattle;
class stThrowSkillFail;
class stNotifyResAppear;
class stNotifyResDisappear;
class stNotifyBuffAppear;
class stNotifyBuffDisappear;
class stOpCopyMapRes;
class stPlayerGotBuff;
class stPlayerCollectSuccess;
class stSynCampScore;
class stUserRelive;
class stNotifyUserPointToPos;

enum stNotifyEnterMapInfo_ProtoModID {
  stNotifyEnterMapInfo_ProtoModID_ModID = 3
};
bool stNotifyEnterMapInfo_ProtoModID_IsValid(int value);
const stNotifyEnterMapInfo_ProtoModID stNotifyEnterMapInfo_ProtoModID_ProtoModID_MIN = stNotifyEnterMapInfo_ProtoModID_ModID;
const stNotifyEnterMapInfo_ProtoModID stNotifyEnterMapInfo_ProtoModID_ProtoModID_MAX = stNotifyEnterMapInfo_ProtoModID_ModID;
const int stNotifyEnterMapInfo_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyEnterMapInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyEnterMapInfo_ProtoModID_descriptor();
inline const ::std::string& stNotifyEnterMapInfo_ProtoModID_Name(stNotifyEnterMapInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyEnterMapInfo_ProtoModID_descriptor(), value);
}
inline bool stNotifyEnterMapInfo_ProtoModID_Parse(
    const ::std::string& name, stNotifyEnterMapInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyEnterMapInfo_ProtoModID>(
    stNotifyEnterMapInfo_ProtoModID_descriptor(), name, value);
}
enum stNotifyEnterMapInfo_ProtoFunID {
  stNotifyEnterMapInfo_ProtoFunID_FunID = 1
};
bool stNotifyEnterMapInfo_ProtoFunID_IsValid(int value);
const stNotifyEnterMapInfo_ProtoFunID stNotifyEnterMapInfo_ProtoFunID_ProtoFunID_MIN = stNotifyEnterMapInfo_ProtoFunID_FunID;
const stNotifyEnterMapInfo_ProtoFunID stNotifyEnterMapInfo_ProtoFunID_ProtoFunID_MAX = stNotifyEnterMapInfo_ProtoFunID_FunID;
const int stNotifyEnterMapInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyEnterMapInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyEnterMapInfo_ProtoFunID_descriptor();
inline const ::std::string& stNotifyEnterMapInfo_ProtoFunID_Name(stNotifyEnterMapInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyEnterMapInfo_ProtoFunID_descriptor(), value);
}
inline bool stNotifyEnterMapInfo_ProtoFunID_Parse(
    const ::std::string& name, stNotifyEnterMapInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyEnterMapInfo_ProtoFunID>(
    stNotifyEnterMapInfo_ProtoFunID_descriptor(), name, value);
}
enum stClientLoadResFinish_ProtoModID {
  stClientLoadResFinish_ProtoModID_ModID = 3
};
bool stClientLoadResFinish_ProtoModID_IsValid(int value);
const stClientLoadResFinish_ProtoModID stClientLoadResFinish_ProtoModID_ProtoModID_MIN = stClientLoadResFinish_ProtoModID_ModID;
const stClientLoadResFinish_ProtoModID stClientLoadResFinish_ProtoModID_ProtoModID_MAX = stClientLoadResFinish_ProtoModID_ModID;
const int stClientLoadResFinish_ProtoModID_ProtoModID_ARRAYSIZE = stClientLoadResFinish_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClientLoadResFinish_ProtoModID_descriptor();
inline const ::std::string& stClientLoadResFinish_ProtoModID_Name(stClientLoadResFinish_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClientLoadResFinish_ProtoModID_descriptor(), value);
}
inline bool stClientLoadResFinish_ProtoModID_Parse(
    const ::std::string& name, stClientLoadResFinish_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClientLoadResFinish_ProtoModID>(
    stClientLoadResFinish_ProtoModID_descriptor(), name, value);
}
enum stClientLoadResFinish_ProtoFunID {
  stClientLoadResFinish_ProtoFunID_FunID = 2
};
bool stClientLoadResFinish_ProtoFunID_IsValid(int value);
const stClientLoadResFinish_ProtoFunID stClientLoadResFinish_ProtoFunID_ProtoFunID_MIN = stClientLoadResFinish_ProtoFunID_FunID;
const stClientLoadResFinish_ProtoFunID stClientLoadResFinish_ProtoFunID_ProtoFunID_MAX = stClientLoadResFinish_ProtoFunID_FunID;
const int stClientLoadResFinish_ProtoFunID_ProtoFunID_ARRAYSIZE = stClientLoadResFinish_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stClientLoadResFinish_ProtoFunID_descriptor();
inline const ::std::string& stClientLoadResFinish_ProtoFunID_Name(stClientLoadResFinish_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stClientLoadResFinish_ProtoFunID_descriptor(), value);
}
inline bool stClientLoadResFinish_ProtoFunID_Parse(
    const ::std::string& name, stClientLoadResFinish_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stClientLoadResFinish_ProtoFunID>(
    stClientLoadResFinish_ProtoFunID_descriptor(), name, value);
}
enum ReqEnterLevelMap_ProtoModID {
  ReqEnterLevelMap_ProtoModID_ModID = 3
};
bool ReqEnterLevelMap_ProtoModID_IsValid(int value);
const ReqEnterLevelMap_ProtoModID ReqEnterLevelMap_ProtoModID_ProtoModID_MIN = ReqEnterLevelMap_ProtoModID_ModID;
const ReqEnterLevelMap_ProtoModID ReqEnterLevelMap_ProtoModID_ProtoModID_MAX = ReqEnterLevelMap_ProtoModID_ModID;
const int ReqEnterLevelMap_ProtoModID_ProtoModID_ARRAYSIZE = ReqEnterLevelMap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqEnterLevelMap_ProtoModID_descriptor();
inline const ::std::string& ReqEnterLevelMap_ProtoModID_Name(ReqEnterLevelMap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqEnterLevelMap_ProtoModID_descriptor(), value);
}
inline bool ReqEnterLevelMap_ProtoModID_Parse(
    const ::std::string& name, ReqEnterLevelMap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqEnterLevelMap_ProtoModID>(
    ReqEnterLevelMap_ProtoModID_descriptor(), name, value);
}
enum ReqEnterLevelMap_ProtoFunID {
  ReqEnterLevelMap_ProtoFunID_FunID = 3
};
bool ReqEnterLevelMap_ProtoFunID_IsValid(int value);
const ReqEnterLevelMap_ProtoFunID ReqEnterLevelMap_ProtoFunID_ProtoFunID_MIN = ReqEnterLevelMap_ProtoFunID_FunID;
const ReqEnterLevelMap_ProtoFunID ReqEnterLevelMap_ProtoFunID_ProtoFunID_MAX = ReqEnterLevelMap_ProtoFunID_FunID;
const int ReqEnterLevelMap_ProtoFunID_ProtoFunID_ARRAYSIZE = ReqEnterLevelMap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqEnterLevelMap_ProtoFunID_descriptor();
inline const ::std::string& ReqEnterLevelMap_ProtoFunID_Name(ReqEnterLevelMap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqEnterLevelMap_ProtoFunID_descriptor(), value);
}
inline bool ReqEnterLevelMap_ProtoFunID_Parse(
    const ::std::string& name, ReqEnterLevelMap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqEnterLevelMap_ProtoFunID>(
    ReqEnterLevelMap_ProtoFunID_descriptor(), name, value);
}
enum NotifyEnterLevelMap_ProtoModID {
  NotifyEnterLevelMap_ProtoModID_ModID = 3
};
bool NotifyEnterLevelMap_ProtoModID_IsValid(int value);
const NotifyEnterLevelMap_ProtoModID NotifyEnterLevelMap_ProtoModID_ProtoModID_MIN = NotifyEnterLevelMap_ProtoModID_ModID;
const NotifyEnterLevelMap_ProtoModID NotifyEnterLevelMap_ProtoModID_ProtoModID_MAX = NotifyEnterLevelMap_ProtoModID_ModID;
const int NotifyEnterLevelMap_ProtoModID_ProtoModID_ARRAYSIZE = NotifyEnterLevelMap_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyEnterLevelMap_ProtoModID_descriptor();
inline const ::std::string& NotifyEnterLevelMap_ProtoModID_Name(NotifyEnterLevelMap_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyEnterLevelMap_ProtoModID_descriptor(), value);
}
inline bool NotifyEnterLevelMap_ProtoModID_Parse(
    const ::std::string& name, NotifyEnterLevelMap_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyEnterLevelMap_ProtoModID>(
    NotifyEnterLevelMap_ProtoModID_descriptor(), name, value);
}
enum NotifyEnterLevelMap_ProtoFunID {
  NotifyEnterLevelMap_ProtoFunID_FunID = 4
};
bool NotifyEnterLevelMap_ProtoFunID_IsValid(int value);
const NotifyEnterLevelMap_ProtoFunID NotifyEnterLevelMap_ProtoFunID_ProtoFunID_MIN = NotifyEnterLevelMap_ProtoFunID_FunID;
const NotifyEnterLevelMap_ProtoFunID NotifyEnterLevelMap_ProtoFunID_ProtoFunID_MAX = NotifyEnterLevelMap_ProtoFunID_FunID;
const int NotifyEnterLevelMap_ProtoFunID_ProtoFunID_ARRAYSIZE = NotifyEnterLevelMap_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyEnterLevelMap_ProtoFunID_descriptor();
inline const ::std::string& NotifyEnterLevelMap_ProtoFunID_Name(NotifyEnterLevelMap_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyEnterLevelMap_ProtoFunID_descriptor(), value);
}
inline bool NotifyEnterLevelMap_ProtoFunID_Parse(
    const ::std::string& name, NotifyEnterLevelMap_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyEnterLevelMap_ProtoFunID>(
    NotifyEnterLevelMap_ProtoFunID_descriptor(), name, value);
}
enum stReqLeaveLevel_ProtoModID {
  stReqLeaveLevel_ProtoModID_ModID = 3
};
bool stReqLeaveLevel_ProtoModID_IsValid(int value);
const stReqLeaveLevel_ProtoModID stReqLeaveLevel_ProtoModID_ProtoModID_MIN = stReqLeaveLevel_ProtoModID_ModID;
const stReqLeaveLevel_ProtoModID stReqLeaveLevel_ProtoModID_ProtoModID_MAX = stReqLeaveLevel_ProtoModID_ModID;
const int stReqLeaveLevel_ProtoModID_ProtoModID_ARRAYSIZE = stReqLeaveLevel_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeaveLevel_ProtoModID_descriptor();
inline const ::std::string& stReqLeaveLevel_ProtoModID_Name(stReqLeaveLevel_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeaveLevel_ProtoModID_descriptor(), value);
}
inline bool stReqLeaveLevel_ProtoModID_Parse(
    const ::std::string& name, stReqLeaveLevel_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeaveLevel_ProtoModID>(
    stReqLeaveLevel_ProtoModID_descriptor(), name, value);
}
enum stReqLeaveLevel_ProtoFunID {
  stReqLeaveLevel_ProtoFunID_FunID = 5
};
bool stReqLeaveLevel_ProtoFunID_IsValid(int value);
const stReqLeaveLevel_ProtoFunID stReqLeaveLevel_ProtoFunID_ProtoFunID_MIN = stReqLeaveLevel_ProtoFunID_FunID;
const stReqLeaveLevel_ProtoFunID stReqLeaveLevel_ProtoFunID_ProtoFunID_MAX = stReqLeaveLevel_ProtoFunID_FunID;
const int stReqLeaveLevel_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLeaveLevel_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLeaveLevel_ProtoFunID_descriptor();
inline const ::std::string& stReqLeaveLevel_ProtoFunID_Name(stReqLeaveLevel_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLeaveLevel_ProtoFunID_descriptor(), value);
}
inline bool stReqLeaveLevel_ProtoFunID_Parse(
    const ::std::string& name, stReqLeaveLevel_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLeaveLevel_ProtoFunID>(
    stReqLeaveLevel_ProtoFunID_descriptor(), name, value);
}
enum stLeaveLevelSuccess_ProtoModID {
  stLeaveLevelSuccess_ProtoModID_ModID = 3
};
bool stLeaveLevelSuccess_ProtoModID_IsValid(int value);
const stLeaveLevelSuccess_ProtoModID stLeaveLevelSuccess_ProtoModID_ProtoModID_MIN = stLeaveLevelSuccess_ProtoModID_ModID;
const stLeaveLevelSuccess_ProtoModID stLeaveLevelSuccess_ProtoModID_ProtoModID_MAX = stLeaveLevelSuccess_ProtoModID_ModID;
const int stLeaveLevelSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stLeaveLevelSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeaveLevelSuccess_ProtoModID_descriptor();
inline const ::std::string& stLeaveLevelSuccess_ProtoModID_Name(stLeaveLevelSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeaveLevelSuccess_ProtoModID_descriptor(), value);
}
inline bool stLeaveLevelSuccess_ProtoModID_Parse(
    const ::std::string& name, stLeaveLevelSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeaveLevelSuccess_ProtoModID>(
    stLeaveLevelSuccess_ProtoModID_descriptor(), name, value);
}
enum stLeaveLevelSuccess_ProtoFunID {
  stLeaveLevelSuccess_ProtoFunID_FunID = 6
};
bool stLeaveLevelSuccess_ProtoFunID_IsValid(int value);
const stLeaveLevelSuccess_ProtoFunID stLeaveLevelSuccess_ProtoFunID_ProtoFunID_MIN = stLeaveLevelSuccess_ProtoFunID_FunID;
const stLeaveLevelSuccess_ProtoFunID stLeaveLevelSuccess_ProtoFunID_ProtoFunID_MAX = stLeaveLevelSuccess_ProtoFunID_FunID;
const int stLeaveLevelSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stLeaveLevelSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLeaveLevelSuccess_ProtoFunID_descriptor();
inline const ::std::string& stLeaveLevelSuccess_ProtoFunID_Name(stLeaveLevelSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLeaveLevelSuccess_ProtoFunID_descriptor(), value);
}
inline bool stLeaveLevelSuccess_ProtoFunID_Parse(
    const ::std::string& name, stLeaveLevelSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLeaveLevelSuccess_ProtoFunID>(
    stLeaveLevelSuccess_ProtoFunID_descriptor(), name, value);
}
enum stEnterLevelError_Error {
  stEnterLevelError_Error_HAS_IN_LEVEL = 1,
  stEnterLevelError_Error_PRE_LEVEL_NOT_FINISH = 2,
  stEnterLevelError_Error_SVR_CFG_ERROR = 3,
  stEnterLevelError_Error_LEVEL_LIMIT = 4,
  stEnterLevelError_Error_SP_NOT_ENGOUH = 5,
  stEnterLevelError_Error_LILIAN_NOT_ENOUGH = 6,
  stEnterLevelError_Error_RUSH_NUM_USE_OUT = 7,
  stEnterLevelError_Error_BAG_FULL = 8,
  stEnterLevelError_Error_EQUIP_LIMIT = 9
};
bool stEnterLevelError_Error_IsValid(int value);
const stEnterLevelError_Error stEnterLevelError_Error_Error_MIN = stEnterLevelError_Error_HAS_IN_LEVEL;
const stEnterLevelError_Error stEnterLevelError_Error_Error_MAX = stEnterLevelError_Error_EQUIP_LIMIT;
const int stEnterLevelError_Error_Error_ARRAYSIZE = stEnterLevelError_Error_Error_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterLevelError_Error_descriptor();
inline const ::std::string& stEnterLevelError_Error_Name(stEnterLevelError_Error value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterLevelError_Error_descriptor(), value);
}
inline bool stEnterLevelError_Error_Parse(
    const ::std::string& name, stEnterLevelError_Error* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterLevelError_Error>(
    stEnterLevelError_Error_descriptor(), name, value);
}
enum stEnterLevelError_ProtoModID {
  stEnterLevelError_ProtoModID_ModID = 3
};
bool stEnterLevelError_ProtoModID_IsValid(int value);
const stEnterLevelError_ProtoModID stEnterLevelError_ProtoModID_ProtoModID_MIN = stEnterLevelError_ProtoModID_ModID;
const stEnterLevelError_ProtoModID stEnterLevelError_ProtoModID_ProtoModID_MAX = stEnterLevelError_ProtoModID_ModID;
const int stEnterLevelError_ProtoModID_ProtoModID_ARRAYSIZE = stEnterLevelError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterLevelError_ProtoModID_descriptor();
inline const ::std::string& stEnterLevelError_ProtoModID_Name(stEnterLevelError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterLevelError_ProtoModID_descriptor(), value);
}
inline bool stEnterLevelError_ProtoModID_Parse(
    const ::std::string& name, stEnterLevelError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterLevelError_ProtoModID>(
    stEnterLevelError_ProtoModID_descriptor(), name, value);
}
enum stEnterLevelError_ProtoFunID {
  stEnterLevelError_ProtoFunID_FunID = 7
};
bool stEnterLevelError_ProtoFunID_IsValid(int value);
const stEnterLevelError_ProtoFunID stEnterLevelError_ProtoFunID_ProtoFunID_MIN = stEnterLevelError_ProtoFunID_FunID;
const stEnterLevelError_ProtoFunID stEnterLevelError_ProtoFunID_ProtoFunID_MAX = stEnterLevelError_ProtoFunID_FunID;
const int stEnterLevelError_ProtoFunID_ProtoFunID_ARRAYSIZE = stEnterLevelError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEnterLevelError_ProtoFunID_descriptor();
inline const ::std::string& stEnterLevelError_ProtoFunID_Name(stEnterLevelError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEnterLevelError_ProtoFunID_descriptor(), value);
}
inline bool stEnterLevelError_ProtoFunID_Parse(
    const ::std::string& name, stEnterLevelError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEnterLevelError_ProtoFunID>(
    stEnterLevelError_ProtoFunID_descriptor(), name, value);
}
enum NotifyPlayerAppear_ProtoModID {
  NotifyPlayerAppear_ProtoModID_ModID = 3
};
bool NotifyPlayerAppear_ProtoModID_IsValid(int value);
const NotifyPlayerAppear_ProtoModID NotifyPlayerAppear_ProtoModID_ProtoModID_MIN = NotifyPlayerAppear_ProtoModID_ModID;
const NotifyPlayerAppear_ProtoModID NotifyPlayerAppear_ProtoModID_ProtoModID_MAX = NotifyPlayerAppear_ProtoModID_ModID;
const int NotifyPlayerAppear_ProtoModID_ProtoModID_ARRAYSIZE = NotifyPlayerAppear_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyPlayerAppear_ProtoModID_descriptor();
inline const ::std::string& NotifyPlayerAppear_ProtoModID_Name(NotifyPlayerAppear_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyPlayerAppear_ProtoModID_descriptor(), value);
}
inline bool NotifyPlayerAppear_ProtoModID_Parse(
    const ::std::string& name, NotifyPlayerAppear_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyPlayerAppear_ProtoModID>(
    NotifyPlayerAppear_ProtoModID_descriptor(), name, value);
}
enum NotifyPlayerAppear_ProtoFunID {
  NotifyPlayerAppear_ProtoFunID_FunID = 8
};
bool NotifyPlayerAppear_ProtoFunID_IsValid(int value);
const NotifyPlayerAppear_ProtoFunID NotifyPlayerAppear_ProtoFunID_ProtoFunID_MIN = NotifyPlayerAppear_ProtoFunID_FunID;
const NotifyPlayerAppear_ProtoFunID NotifyPlayerAppear_ProtoFunID_ProtoFunID_MAX = NotifyPlayerAppear_ProtoFunID_FunID;
const int NotifyPlayerAppear_ProtoFunID_ProtoFunID_ARRAYSIZE = NotifyPlayerAppear_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyPlayerAppear_ProtoFunID_descriptor();
inline const ::std::string& NotifyPlayerAppear_ProtoFunID_Name(NotifyPlayerAppear_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyPlayerAppear_ProtoFunID_descriptor(), value);
}
inline bool NotifyPlayerAppear_ProtoFunID_Parse(
    const ::std::string& name, NotifyPlayerAppear_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyPlayerAppear_ProtoFunID>(
    NotifyPlayerAppear_ProtoFunID_descriptor(), name, value);
}
enum NotifyObjDisappear_ProtoModID {
  NotifyObjDisappear_ProtoModID_ModID = 3
};
bool NotifyObjDisappear_ProtoModID_IsValid(int value);
const NotifyObjDisappear_ProtoModID NotifyObjDisappear_ProtoModID_ProtoModID_MIN = NotifyObjDisappear_ProtoModID_ModID;
const NotifyObjDisappear_ProtoModID NotifyObjDisappear_ProtoModID_ProtoModID_MAX = NotifyObjDisappear_ProtoModID_ModID;
const int NotifyObjDisappear_ProtoModID_ProtoModID_ARRAYSIZE = NotifyObjDisappear_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyObjDisappear_ProtoModID_descriptor();
inline const ::std::string& NotifyObjDisappear_ProtoModID_Name(NotifyObjDisappear_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyObjDisappear_ProtoModID_descriptor(), value);
}
inline bool NotifyObjDisappear_ProtoModID_Parse(
    const ::std::string& name, NotifyObjDisappear_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyObjDisappear_ProtoModID>(
    NotifyObjDisappear_ProtoModID_descriptor(), name, value);
}
enum NotifyObjDisappear_ProtoFunID {
  NotifyObjDisappear_ProtoFunID_FunID = 9
};
bool NotifyObjDisappear_ProtoFunID_IsValid(int value);
const NotifyObjDisappear_ProtoFunID NotifyObjDisappear_ProtoFunID_ProtoFunID_MIN = NotifyObjDisappear_ProtoFunID_FunID;
const NotifyObjDisappear_ProtoFunID NotifyObjDisappear_ProtoFunID_ProtoFunID_MAX = NotifyObjDisappear_ProtoFunID_FunID;
const int NotifyObjDisappear_ProtoFunID_ProtoFunID_ARRAYSIZE = NotifyObjDisappear_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyObjDisappear_ProtoFunID_descriptor();
inline const ::std::string& NotifyObjDisappear_ProtoFunID_Name(NotifyObjDisappear_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyObjDisappear_ProtoFunID_descriptor(), value);
}
inline bool NotifyObjDisappear_ProtoFunID_Parse(
    const ::std::string& name, NotifyObjDisappear_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyObjDisappear_ProtoFunID>(
    NotifyObjDisappear_ProtoFunID_descriptor(), name, value);
}
enum NotifyNpcAppear_ProtoModID {
  NotifyNpcAppear_ProtoModID_ModID = 3
};
bool NotifyNpcAppear_ProtoModID_IsValid(int value);
const NotifyNpcAppear_ProtoModID NotifyNpcAppear_ProtoModID_ProtoModID_MIN = NotifyNpcAppear_ProtoModID_ModID;
const NotifyNpcAppear_ProtoModID NotifyNpcAppear_ProtoModID_ProtoModID_MAX = NotifyNpcAppear_ProtoModID_ModID;
const int NotifyNpcAppear_ProtoModID_ProtoModID_ARRAYSIZE = NotifyNpcAppear_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyNpcAppear_ProtoModID_descriptor();
inline const ::std::string& NotifyNpcAppear_ProtoModID_Name(NotifyNpcAppear_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyNpcAppear_ProtoModID_descriptor(), value);
}
inline bool NotifyNpcAppear_ProtoModID_Parse(
    const ::std::string& name, NotifyNpcAppear_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyNpcAppear_ProtoModID>(
    NotifyNpcAppear_ProtoModID_descriptor(), name, value);
}
enum NotifyNpcAppear_ProtoFunID {
  NotifyNpcAppear_ProtoFunID_FunID = 10
};
bool NotifyNpcAppear_ProtoFunID_IsValid(int value);
const NotifyNpcAppear_ProtoFunID NotifyNpcAppear_ProtoFunID_ProtoFunID_MIN = NotifyNpcAppear_ProtoFunID_FunID;
const NotifyNpcAppear_ProtoFunID NotifyNpcAppear_ProtoFunID_ProtoFunID_MAX = NotifyNpcAppear_ProtoFunID_FunID;
const int NotifyNpcAppear_ProtoFunID_ProtoFunID_ARRAYSIZE = NotifyNpcAppear_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyNpcAppear_ProtoFunID_descriptor();
inline const ::std::string& NotifyNpcAppear_ProtoFunID_Name(NotifyNpcAppear_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyNpcAppear_ProtoFunID_descriptor(), value);
}
inline bool NotifyNpcAppear_ProtoFunID_Parse(
    const ::std::string& name, NotifyNpcAppear_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyNpcAppear_ProtoFunID>(
    NotifyNpcAppear_ProtoFunID_descriptor(), name, value);
}
enum NotifyHeroAppear_ProtoModID {
  NotifyHeroAppear_ProtoModID_ModID = 3
};
bool NotifyHeroAppear_ProtoModID_IsValid(int value);
const NotifyHeroAppear_ProtoModID NotifyHeroAppear_ProtoModID_ProtoModID_MIN = NotifyHeroAppear_ProtoModID_ModID;
const NotifyHeroAppear_ProtoModID NotifyHeroAppear_ProtoModID_ProtoModID_MAX = NotifyHeroAppear_ProtoModID_ModID;
const int NotifyHeroAppear_ProtoModID_ProtoModID_ARRAYSIZE = NotifyHeroAppear_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyHeroAppear_ProtoModID_descriptor();
inline const ::std::string& NotifyHeroAppear_ProtoModID_Name(NotifyHeroAppear_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyHeroAppear_ProtoModID_descriptor(), value);
}
inline bool NotifyHeroAppear_ProtoModID_Parse(
    const ::std::string& name, NotifyHeroAppear_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyHeroAppear_ProtoModID>(
    NotifyHeroAppear_ProtoModID_descriptor(), name, value);
}
enum NotifyHeroAppear_ProtoFunID {
  NotifyHeroAppear_ProtoFunID_FunID = 11
};
bool NotifyHeroAppear_ProtoFunID_IsValid(int value);
const NotifyHeroAppear_ProtoFunID NotifyHeroAppear_ProtoFunID_ProtoFunID_MIN = NotifyHeroAppear_ProtoFunID_FunID;
const NotifyHeroAppear_ProtoFunID NotifyHeroAppear_ProtoFunID_ProtoFunID_MAX = NotifyHeroAppear_ProtoFunID_FunID;
const int NotifyHeroAppear_ProtoFunID_ProtoFunID_ARRAYSIZE = NotifyHeroAppear_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyHeroAppear_ProtoFunID_descriptor();
inline const ::std::string& NotifyHeroAppear_ProtoFunID_Name(NotifyHeroAppear_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyHeroAppear_ProtoFunID_descriptor(), value);
}
inline bool NotifyHeroAppear_ProtoFunID_Parse(
    const ::std::string& name, NotifyHeroAppear_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyHeroAppear_ProtoFunID>(
    NotifyHeroAppear_ProtoFunID_descriptor(), name, value);
}
enum ReqMove_ProtoModID {
  ReqMove_ProtoModID_ModID = 3
};
bool ReqMove_ProtoModID_IsValid(int value);
const ReqMove_ProtoModID ReqMove_ProtoModID_ProtoModID_MIN = ReqMove_ProtoModID_ModID;
const ReqMove_ProtoModID ReqMove_ProtoModID_ProtoModID_MAX = ReqMove_ProtoModID_ModID;
const int ReqMove_ProtoModID_ProtoModID_ARRAYSIZE = ReqMove_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqMove_ProtoModID_descriptor();
inline const ::std::string& ReqMove_ProtoModID_Name(ReqMove_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqMove_ProtoModID_descriptor(), value);
}
inline bool ReqMove_ProtoModID_Parse(
    const ::std::string& name, ReqMove_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqMove_ProtoModID>(
    ReqMove_ProtoModID_descriptor(), name, value);
}
enum ReqMove_ProtoFunID {
  ReqMove_ProtoFunID_FunID = 12
};
bool ReqMove_ProtoFunID_IsValid(int value);
const ReqMove_ProtoFunID ReqMove_ProtoFunID_ProtoFunID_MIN = ReqMove_ProtoFunID_FunID;
const ReqMove_ProtoFunID ReqMove_ProtoFunID_ProtoFunID_MAX = ReqMove_ProtoFunID_FunID;
const int ReqMove_ProtoFunID_ProtoFunID_ARRAYSIZE = ReqMove_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqMove_ProtoFunID_descriptor();
inline const ::std::string& ReqMove_ProtoFunID_Name(ReqMove_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqMove_ProtoFunID_descriptor(), value);
}
inline bool ReqMove_ProtoFunID_Parse(
    const ::std::string& name, ReqMove_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqMove_ProtoFunID>(
    ReqMove_ProtoFunID_descriptor(), name, value);
}
enum stNotifyMODMove_ProtoModID {
  stNotifyMODMove_ProtoModID_ModID = 3
};
bool stNotifyMODMove_ProtoModID_IsValid(int value);
const stNotifyMODMove_ProtoModID stNotifyMODMove_ProtoModID_ProtoModID_MIN = stNotifyMODMove_ProtoModID_ModID;
const stNotifyMODMove_ProtoModID stNotifyMODMove_ProtoModID_ProtoModID_MAX = stNotifyMODMove_ProtoModID_ModID;
const int stNotifyMODMove_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyMODMove_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyMODMove_ProtoModID_descriptor();
inline const ::std::string& stNotifyMODMove_ProtoModID_Name(stNotifyMODMove_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyMODMove_ProtoModID_descriptor(), value);
}
inline bool stNotifyMODMove_ProtoModID_Parse(
    const ::std::string& name, stNotifyMODMove_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyMODMove_ProtoModID>(
    stNotifyMODMove_ProtoModID_descriptor(), name, value);
}
enum stNotifyMODMove_ProtoFunID {
  stNotifyMODMove_ProtoFunID_FunID = 13
};
bool stNotifyMODMove_ProtoFunID_IsValid(int value);
const stNotifyMODMove_ProtoFunID stNotifyMODMove_ProtoFunID_ProtoFunID_MIN = stNotifyMODMove_ProtoFunID_FunID;
const stNotifyMODMove_ProtoFunID stNotifyMODMove_ProtoFunID_ProtoFunID_MAX = stNotifyMODMove_ProtoFunID_FunID;
const int stNotifyMODMove_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyMODMove_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyMODMove_ProtoFunID_descriptor();
inline const ::std::string& stNotifyMODMove_ProtoFunID_Name(stNotifyMODMove_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyMODMove_ProtoFunID_descriptor(), value);
}
inline bool stNotifyMODMove_ProtoFunID_Parse(
    const ::std::string& name, stNotifyMODMove_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyMODMove_ProtoFunID>(
    stNotifyMODMove_ProtoFunID_descriptor(), name, value);
}
enum stThrowSkill_ProtoModID {
  stThrowSkill_ProtoModID_ModID = 3
};
bool stThrowSkill_ProtoModID_IsValid(int value);
const stThrowSkill_ProtoModID stThrowSkill_ProtoModID_ProtoModID_MIN = stThrowSkill_ProtoModID_ModID;
const stThrowSkill_ProtoModID stThrowSkill_ProtoModID_ProtoModID_MAX = stThrowSkill_ProtoModID_ModID;
const int stThrowSkill_ProtoModID_ProtoModID_ARRAYSIZE = stThrowSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stThrowSkill_ProtoModID_descriptor();
inline const ::std::string& stThrowSkill_ProtoModID_Name(stThrowSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stThrowSkill_ProtoModID_descriptor(), value);
}
inline bool stThrowSkill_ProtoModID_Parse(
    const ::std::string& name, stThrowSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stThrowSkill_ProtoModID>(
    stThrowSkill_ProtoModID_descriptor(), name, value);
}
enum stThrowSkill_ProtoFunID {
  stThrowSkill_ProtoFunID_FunID = 14
};
bool stThrowSkill_ProtoFunID_IsValid(int value);
const stThrowSkill_ProtoFunID stThrowSkill_ProtoFunID_ProtoFunID_MIN = stThrowSkill_ProtoFunID_FunID;
const stThrowSkill_ProtoFunID stThrowSkill_ProtoFunID_ProtoFunID_MAX = stThrowSkill_ProtoFunID_FunID;
const int stThrowSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stThrowSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stThrowSkill_ProtoFunID_descriptor();
inline const ::std::string& stThrowSkill_ProtoFunID_Name(stThrowSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stThrowSkill_ProtoFunID_descriptor(), value);
}
inline bool stThrowSkill_ProtoFunID_Parse(
    const ::std::string& name, stThrowSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stThrowSkill_ProtoFunID>(
    stThrowSkill_ProtoFunID_descriptor(), name, value);
}
enum stNotifyHit_ProtoModID {
  stNotifyHit_ProtoModID_ModID = 3
};
bool stNotifyHit_ProtoModID_IsValid(int value);
const stNotifyHit_ProtoModID stNotifyHit_ProtoModID_ProtoModID_MIN = stNotifyHit_ProtoModID_ModID;
const stNotifyHit_ProtoModID stNotifyHit_ProtoModID_ProtoModID_MAX = stNotifyHit_ProtoModID_ModID;
const int stNotifyHit_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyHit_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyHit_ProtoModID_descriptor();
inline const ::std::string& stNotifyHit_ProtoModID_Name(stNotifyHit_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyHit_ProtoModID_descriptor(), value);
}
inline bool stNotifyHit_ProtoModID_Parse(
    const ::std::string& name, stNotifyHit_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyHit_ProtoModID>(
    stNotifyHit_ProtoModID_descriptor(), name, value);
}
enum stNotifyHit_ProtoFunID {
  stNotifyHit_ProtoFunID_FunID = 15
};
bool stNotifyHit_ProtoFunID_IsValid(int value);
const stNotifyHit_ProtoFunID stNotifyHit_ProtoFunID_ProtoFunID_MIN = stNotifyHit_ProtoFunID_FunID;
const stNotifyHit_ProtoFunID stNotifyHit_ProtoFunID_ProtoFunID_MAX = stNotifyHit_ProtoFunID_FunID;
const int stNotifyHit_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyHit_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyHit_ProtoFunID_descriptor();
inline const ::std::string& stNotifyHit_ProtoFunID_Name(stNotifyHit_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyHit_ProtoFunID_descriptor(), value);
}
inline bool stNotifyHit_ProtoFunID_Parse(
    const ::std::string& name, stNotifyHit_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyHit_ProtoFunID>(
    stNotifyHit_ProtoFunID_descriptor(), name, value);
}
enum AttackResult_ProtoModID {
  AttackResult_ProtoModID_ModID = 3
};
bool AttackResult_ProtoModID_IsValid(int value);
const AttackResult_ProtoModID AttackResult_ProtoModID_ProtoModID_MIN = AttackResult_ProtoModID_ModID;
const AttackResult_ProtoModID AttackResult_ProtoModID_ProtoModID_MAX = AttackResult_ProtoModID_ModID;
const int AttackResult_ProtoModID_ProtoModID_ARRAYSIZE = AttackResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* AttackResult_ProtoModID_descriptor();
inline const ::std::string& AttackResult_ProtoModID_Name(AttackResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttackResult_ProtoModID_descriptor(), value);
}
inline bool AttackResult_ProtoModID_Parse(
    const ::std::string& name, AttackResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttackResult_ProtoModID>(
    AttackResult_ProtoModID_descriptor(), name, value);
}
enum AttackResult_ProtoFunID {
  AttackResult_ProtoFunID_FunID = 16
};
bool AttackResult_ProtoFunID_IsValid(int value);
const AttackResult_ProtoFunID AttackResult_ProtoFunID_ProtoFunID_MIN = AttackResult_ProtoFunID_FunID;
const AttackResult_ProtoFunID AttackResult_ProtoFunID_ProtoFunID_MAX = AttackResult_ProtoFunID_FunID;
const int AttackResult_ProtoFunID_ProtoFunID_ARRAYSIZE = AttackResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* AttackResult_ProtoFunID_descriptor();
inline const ::std::string& AttackResult_ProtoFunID_Name(AttackResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    AttackResult_ProtoFunID_descriptor(), value);
}
inline bool AttackResult_ProtoFunID_Parse(
    const ::std::string& name, AttackResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AttackResult_ProtoFunID>(
    AttackResult_ProtoFunID_descriptor(), name, value);
}
enum stMapObjAddHP_ProtoModID {
  stMapObjAddHP_ProtoModID_ModID = 3
};
bool stMapObjAddHP_ProtoModID_IsValid(int value);
const stMapObjAddHP_ProtoModID stMapObjAddHP_ProtoModID_ProtoModID_MIN = stMapObjAddHP_ProtoModID_ModID;
const stMapObjAddHP_ProtoModID stMapObjAddHP_ProtoModID_ProtoModID_MAX = stMapObjAddHP_ProtoModID_ModID;
const int stMapObjAddHP_ProtoModID_ProtoModID_ARRAYSIZE = stMapObjAddHP_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMapObjAddHP_ProtoModID_descriptor();
inline const ::std::string& stMapObjAddHP_ProtoModID_Name(stMapObjAddHP_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMapObjAddHP_ProtoModID_descriptor(), value);
}
inline bool stMapObjAddHP_ProtoModID_Parse(
    const ::std::string& name, stMapObjAddHP_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMapObjAddHP_ProtoModID>(
    stMapObjAddHP_ProtoModID_descriptor(), name, value);
}
enum stMapObjAddHP_ProtoFunID {
  stMapObjAddHP_ProtoFunID_FunID = 17
};
bool stMapObjAddHP_ProtoFunID_IsValid(int value);
const stMapObjAddHP_ProtoFunID stMapObjAddHP_ProtoFunID_ProtoFunID_MIN = stMapObjAddHP_ProtoFunID_FunID;
const stMapObjAddHP_ProtoFunID stMapObjAddHP_ProtoFunID_ProtoFunID_MAX = stMapObjAddHP_ProtoFunID_FunID;
const int stMapObjAddHP_ProtoFunID_ProtoFunID_ARRAYSIZE = stMapObjAddHP_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMapObjAddHP_ProtoFunID_descriptor();
inline const ::std::string& stMapObjAddHP_ProtoFunID_Name(stMapObjAddHP_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMapObjAddHP_ProtoFunID_descriptor(), value);
}
inline bool stMapObjAddHP_ProtoFunID_Parse(
    const ::std::string& name, stMapObjAddHP_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMapObjAddHP_ProtoFunID>(
    stMapObjAddHP_ProtoFunID_descriptor(), name, value);
}
enum stInstantMove_ProtoModID {
  stInstantMove_ProtoModID_ModID = 3
};
bool stInstantMove_ProtoModID_IsValid(int value);
const stInstantMove_ProtoModID stInstantMove_ProtoModID_ProtoModID_MIN = stInstantMove_ProtoModID_ModID;
const stInstantMove_ProtoModID stInstantMove_ProtoModID_ProtoModID_MAX = stInstantMove_ProtoModID_ModID;
const int stInstantMove_ProtoModID_ProtoModID_ARRAYSIZE = stInstantMove_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInstantMove_ProtoModID_descriptor();
inline const ::std::string& stInstantMove_ProtoModID_Name(stInstantMove_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInstantMove_ProtoModID_descriptor(), value);
}
inline bool stInstantMove_ProtoModID_Parse(
    const ::std::string& name, stInstantMove_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInstantMove_ProtoModID>(
    stInstantMove_ProtoModID_descriptor(), name, value);
}
enum stInstantMove_ProtoFunID {
  stInstantMove_ProtoFunID_FunID = 18
};
bool stInstantMove_ProtoFunID_IsValid(int value);
const stInstantMove_ProtoFunID stInstantMove_ProtoFunID_ProtoFunID_MIN = stInstantMove_ProtoFunID_FunID;
const stInstantMove_ProtoFunID stInstantMove_ProtoFunID_ProtoFunID_MAX = stInstantMove_ProtoFunID_FunID;
const int stInstantMove_ProtoFunID_ProtoFunID_ARRAYSIZE = stInstantMove_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInstantMove_ProtoFunID_descriptor();
inline const ::std::string& stInstantMove_ProtoFunID_Name(stInstantMove_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInstantMove_ProtoFunID_descriptor(), value);
}
inline bool stInstantMove_ProtoFunID_Parse(
    const ::std::string& name, stInstantMove_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInstantMove_ProtoFunID>(
    stInstantMove_ProtoFunID_descriptor(), name, value);
}
enum stAttackFail_ErrorCode {
  stAttackFail_ErrorCode_TARGET_HASH_DIED = 1
};
bool stAttackFail_ErrorCode_IsValid(int value);
const stAttackFail_ErrorCode stAttackFail_ErrorCode_ErrorCode_MIN = stAttackFail_ErrorCode_TARGET_HASH_DIED;
const stAttackFail_ErrorCode stAttackFail_ErrorCode_ErrorCode_MAX = stAttackFail_ErrorCode_TARGET_HASH_DIED;
const int stAttackFail_ErrorCode_ErrorCode_ARRAYSIZE = stAttackFail_ErrorCode_ErrorCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAttackFail_ErrorCode_descriptor();
inline const ::std::string& stAttackFail_ErrorCode_Name(stAttackFail_ErrorCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAttackFail_ErrorCode_descriptor(), value);
}
inline bool stAttackFail_ErrorCode_Parse(
    const ::std::string& name, stAttackFail_ErrorCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAttackFail_ErrorCode>(
    stAttackFail_ErrorCode_descriptor(), name, value);
}
enum stAttackFail_ProtoModID {
  stAttackFail_ProtoModID_ModID = 3
};
bool stAttackFail_ProtoModID_IsValid(int value);
const stAttackFail_ProtoModID stAttackFail_ProtoModID_ProtoModID_MIN = stAttackFail_ProtoModID_ModID;
const stAttackFail_ProtoModID stAttackFail_ProtoModID_ProtoModID_MAX = stAttackFail_ProtoModID_ModID;
const int stAttackFail_ProtoModID_ProtoModID_ARRAYSIZE = stAttackFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAttackFail_ProtoModID_descriptor();
inline const ::std::string& stAttackFail_ProtoModID_Name(stAttackFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAttackFail_ProtoModID_descriptor(), value);
}
inline bool stAttackFail_ProtoModID_Parse(
    const ::std::string& name, stAttackFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAttackFail_ProtoModID>(
    stAttackFail_ProtoModID_descriptor(), name, value);
}
enum stAttackFail_ProtoFunID {
  stAttackFail_ProtoFunID_FunID = 19
};
bool stAttackFail_ProtoFunID_IsValid(int value);
const stAttackFail_ProtoFunID stAttackFail_ProtoFunID_ProtoFunID_MIN = stAttackFail_ProtoFunID_FunID;
const stAttackFail_ProtoFunID stAttackFail_ProtoFunID_ProtoFunID_MAX = stAttackFail_ProtoFunID_FunID;
const int stAttackFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stAttackFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAttackFail_ProtoFunID_descriptor();
inline const ::std::string& stAttackFail_ProtoFunID_Name(stAttackFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAttackFail_ProtoFunID_descriptor(), value);
}
inline bool stAttackFail_ProtoFunID_Parse(
    const ::std::string& name, stAttackFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAttackFail_ProtoFunID>(
    stAttackFail_ProtoFunID_descriptor(), name, value);
}
enum stInterruptPlaySkill_ProtoModID {
  stInterruptPlaySkill_ProtoModID_ModID = 3
};
bool stInterruptPlaySkill_ProtoModID_IsValid(int value);
const stInterruptPlaySkill_ProtoModID stInterruptPlaySkill_ProtoModID_ProtoModID_MIN = stInterruptPlaySkill_ProtoModID_ModID;
const stInterruptPlaySkill_ProtoModID stInterruptPlaySkill_ProtoModID_ProtoModID_MAX = stInterruptPlaySkill_ProtoModID_ModID;
const int stInterruptPlaySkill_ProtoModID_ProtoModID_ARRAYSIZE = stInterruptPlaySkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInterruptPlaySkill_ProtoModID_descriptor();
inline const ::std::string& stInterruptPlaySkill_ProtoModID_Name(stInterruptPlaySkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInterruptPlaySkill_ProtoModID_descriptor(), value);
}
inline bool stInterruptPlaySkill_ProtoModID_Parse(
    const ::std::string& name, stInterruptPlaySkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInterruptPlaySkill_ProtoModID>(
    stInterruptPlaySkill_ProtoModID_descriptor(), name, value);
}
enum stInterruptPlaySkill_ProtoFunID {
  stInterruptPlaySkill_ProtoFunID_FunID = 20
};
bool stInterruptPlaySkill_ProtoFunID_IsValid(int value);
const stInterruptPlaySkill_ProtoFunID stInterruptPlaySkill_ProtoFunID_ProtoFunID_MIN = stInterruptPlaySkill_ProtoFunID_FunID;
const stInterruptPlaySkill_ProtoFunID stInterruptPlaySkill_ProtoFunID_ProtoFunID_MAX = stInterruptPlaySkill_ProtoFunID_FunID;
const int stInterruptPlaySkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stInterruptPlaySkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInterruptPlaySkill_ProtoFunID_descriptor();
inline const ::std::string& stInterruptPlaySkill_ProtoFunID_Name(stInterruptPlaySkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInterruptPlaySkill_ProtoFunID_descriptor(), value);
}
inline bool stInterruptPlaySkill_ProtoFunID_Parse(
    const ::std::string& name, stInterruptPlaySkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInterruptPlaySkill_ProtoFunID>(
    stInterruptPlaySkill_ProtoFunID_descriptor(), name, value);
}
enum stMapObjectChgDir_ProtoModID {
  stMapObjectChgDir_ProtoModID_ModID = 3
};
bool stMapObjectChgDir_ProtoModID_IsValid(int value);
const stMapObjectChgDir_ProtoModID stMapObjectChgDir_ProtoModID_ProtoModID_MIN = stMapObjectChgDir_ProtoModID_ModID;
const stMapObjectChgDir_ProtoModID stMapObjectChgDir_ProtoModID_ProtoModID_MAX = stMapObjectChgDir_ProtoModID_ModID;
const int stMapObjectChgDir_ProtoModID_ProtoModID_ARRAYSIZE = stMapObjectChgDir_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMapObjectChgDir_ProtoModID_descriptor();
inline const ::std::string& stMapObjectChgDir_ProtoModID_Name(stMapObjectChgDir_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMapObjectChgDir_ProtoModID_descriptor(), value);
}
inline bool stMapObjectChgDir_ProtoModID_Parse(
    const ::std::string& name, stMapObjectChgDir_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMapObjectChgDir_ProtoModID>(
    stMapObjectChgDir_ProtoModID_descriptor(), name, value);
}
enum stMapObjectChgDir_ProtoFunID {
  stMapObjectChgDir_ProtoFunID_FunID = 21
};
bool stMapObjectChgDir_ProtoFunID_IsValid(int value);
const stMapObjectChgDir_ProtoFunID stMapObjectChgDir_ProtoFunID_ProtoFunID_MIN = stMapObjectChgDir_ProtoFunID_FunID;
const stMapObjectChgDir_ProtoFunID stMapObjectChgDir_ProtoFunID_ProtoFunID_MAX = stMapObjectChgDir_ProtoFunID_FunID;
const int stMapObjectChgDir_ProtoFunID_ProtoFunID_ARRAYSIZE = stMapObjectChgDir_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMapObjectChgDir_ProtoFunID_descriptor();
inline const ::std::string& stMapObjectChgDir_ProtoFunID_Name(stMapObjectChgDir_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMapObjectChgDir_ProtoFunID_descriptor(), value);
}
inline bool stMapObjectChgDir_ProtoFunID_Parse(
    const ::std::string& name, stMapObjectChgDir_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMapObjectChgDir_ProtoFunID>(
    stMapObjectChgDir_ProtoFunID_descriptor(), name, value);
}
enum stReqOnlineUserOnMainCity_ProtoModID {
  stReqOnlineUserOnMainCity_ProtoModID_ModID = 3
};
bool stReqOnlineUserOnMainCity_ProtoModID_IsValid(int value);
const stReqOnlineUserOnMainCity_ProtoModID stReqOnlineUserOnMainCity_ProtoModID_ProtoModID_MIN = stReqOnlineUserOnMainCity_ProtoModID_ModID;
const stReqOnlineUserOnMainCity_ProtoModID stReqOnlineUserOnMainCity_ProtoModID_ProtoModID_MAX = stReqOnlineUserOnMainCity_ProtoModID_ModID;
const int stReqOnlineUserOnMainCity_ProtoModID_ProtoModID_ARRAYSIZE = stReqOnlineUserOnMainCity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOnlineUserOnMainCity_ProtoModID_descriptor();
inline const ::std::string& stReqOnlineUserOnMainCity_ProtoModID_Name(stReqOnlineUserOnMainCity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOnlineUserOnMainCity_ProtoModID_descriptor(), value);
}
inline bool stReqOnlineUserOnMainCity_ProtoModID_Parse(
    const ::std::string& name, stReqOnlineUserOnMainCity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOnlineUserOnMainCity_ProtoModID>(
    stReqOnlineUserOnMainCity_ProtoModID_descriptor(), name, value);
}
enum stReqOnlineUserOnMainCity_ProtoFunID {
  stReqOnlineUserOnMainCity_ProtoFunID_FunID = 22
};
bool stReqOnlineUserOnMainCity_ProtoFunID_IsValid(int value);
const stReqOnlineUserOnMainCity_ProtoFunID stReqOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MIN = stReqOnlineUserOnMainCity_ProtoFunID_FunID;
const stReqOnlineUserOnMainCity_ProtoFunID stReqOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MAX = stReqOnlineUserOnMainCity_ProtoFunID_FunID;
const int stReqOnlineUserOnMainCity_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOnlineUserOnMainCity_ProtoFunID_descriptor();
inline const ::std::string& stReqOnlineUserOnMainCity_ProtoFunID_Name(stReqOnlineUserOnMainCity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOnlineUserOnMainCity_ProtoFunID_descriptor(), value);
}
inline bool stReqOnlineUserOnMainCity_ProtoFunID_Parse(
    const ::std::string& name, stReqOnlineUserOnMainCity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOnlineUserOnMainCity_ProtoFunID>(
    stReqOnlineUserOnMainCity_ProtoFunID_descriptor(), name, value);
}
enum stOnlineUserOnMainCity_ProtoModID {
  stOnlineUserOnMainCity_ProtoModID_ModID = 3
};
bool stOnlineUserOnMainCity_ProtoModID_IsValid(int value);
const stOnlineUserOnMainCity_ProtoModID stOnlineUserOnMainCity_ProtoModID_ProtoModID_MIN = stOnlineUserOnMainCity_ProtoModID_ModID;
const stOnlineUserOnMainCity_ProtoModID stOnlineUserOnMainCity_ProtoModID_ProtoModID_MAX = stOnlineUserOnMainCity_ProtoModID_ModID;
const int stOnlineUserOnMainCity_ProtoModID_ProtoModID_ARRAYSIZE = stOnlineUserOnMainCity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOnlineUserOnMainCity_ProtoModID_descriptor();
inline const ::std::string& stOnlineUserOnMainCity_ProtoModID_Name(stOnlineUserOnMainCity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOnlineUserOnMainCity_ProtoModID_descriptor(), value);
}
inline bool stOnlineUserOnMainCity_ProtoModID_Parse(
    const ::std::string& name, stOnlineUserOnMainCity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOnlineUserOnMainCity_ProtoModID>(
    stOnlineUserOnMainCity_ProtoModID_descriptor(), name, value);
}
enum stOnlineUserOnMainCity_ProtoFunID {
  stOnlineUserOnMainCity_ProtoFunID_FunID = 23
};
bool stOnlineUserOnMainCity_ProtoFunID_IsValid(int value);
const stOnlineUserOnMainCity_ProtoFunID stOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MIN = stOnlineUserOnMainCity_ProtoFunID_FunID;
const stOnlineUserOnMainCity_ProtoFunID stOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MAX = stOnlineUserOnMainCity_ProtoFunID_FunID;
const int stOnlineUserOnMainCity_ProtoFunID_ProtoFunID_ARRAYSIZE = stOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOnlineUserOnMainCity_ProtoFunID_descriptor();
inline const ::std::string& stOnlineUserOnMainCity_ProtoFunID_Name(stOnlineUserOnMainCity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOnlineUserOnMainCity_ProtoFunID_descriptor(), value);
}
inline bool stOnlineUserOnMainCity_ProtoFunID_Parse(
    const ::std::string& name, stOnlineUserOnMainCity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOnlineUserOnMainCity_ProtoFunID>(
    stOnlineUserOnMainCity_ProtoFunID_descriptor(), name, value);
}
enum stChangeHeroGroup_ProtoModID {
  stChangeHeroGroup_ProtoModID_ModID = 3
};
bool stChangeHeroGroup_ProtoModID_IsValid(int value);
const stChangeHeroGroup_ProtoModID stChangeHeroGroup_ProtoModID_ProtoModID_MIN = stChangeHeroGroup_ProtoModID_ModID;
const stChangeHeroGroup_ProtoModID stChangeHeroGroup_ProtoModID_ProtoModID_MAX = stChangeHeroGroup_ProtoModID_ModID;
const int stChangeHeroGroup_ProtoModID_ProtoModID_ARRAYSIZE = stChangeHeroGroup_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeHeroGroup_ProtoModID_descriptor();
inline const ::std::string& stChangeHeroGroup_ProtoModID_Name(stChangeHeroGroup_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeHeroGroup_ProtoModID_descriptor(), value);
}
inline bool stChangeHeroGroup_ProtoModID_Parse(
    const ::std::string& name, stChangeHeroGroup_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeHeroGroup_ProtoModID>(
    stChangeHeroGroup_ProtoModID_descriptor(), name, value);
}
enum stChangeHeroGroup_ProtoFunID {
  stChangeHeroGroup_ProtoFunID_FunID = 24
};
bool stChangeHeroGroup_ProtoFunID_IsValid(int value);
const stChangeHeroGroup_ProtoFunID stChangeHeroGroup_ProtoFunID_ProtoFunID_MIN = stChangeHeroGroup_ProtoFunID_FunID;
const stChangeHeroGroup_ProtoFunID stChangeHeroGroup_ProtoFunID_ProtoFunID_MAX = stChangeHeroGroup_ProtoFunID_FunID;
const int stChangeHeroGroup_ProtoFunID_ProtoFunID_ARRAYSIZE = stChangeHeroGroup_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeHeroGroup_ProtoFunID_descriptor();
inline const ::std::string& stChangeHeroGroup_ProtoFunID_Name(stChangeHeroGroup_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeHeroGroup_ProtoFunID_descriptor(), value);
}
inline bool stChangeHeroGroup_ProtoFunID_Parse(
    const ::std::string& name, stChangeHeroGroup_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeHeroGroup_ProtoFunID>(
    stChangeHeroGroup_ProtoFunID_descriptor(), name, value);
}
enum stChangeHeroGroupError_eResult {
  stChangeHeroGroupError_eResult_eCHG_HERO_COLD_DOWN = 1,
  stChangeHeroGroupError_eResult_eCUR_GROUP_HAS_GOOUT = 2
};
bool stChangeHeroGroupError_eResult_IsValid(int value);
const stChangeHeroGroupError_eResult stChangeHeroGroupError_eResult_eResult_MIN = stChangeHeroGroupError_eResult_eCHG_HERO_COLD_DOWN;
const stChangeHeroGroupError_eResult stChangeHeroGroupError_eResult_eResult_MAX = stChangeHeroGroupError_eResult_eCUR_GROUP_HAS_GOOUT;
const int stChangeHeroGroupError_eResult_eResult_ARRAYSIZE = stChangeHeroGroupError_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeHeroGroupError_eResult_descriptor();
inline const ::std::string& stChangeHeroGroupError_eResult_Name(stChangeHeroGroupError_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeHeroGroupError_eResult_descriptor(), value);
}
inline bool stChangeHeroGroupError_eResult_Parse(
    const ::std::string& name, stChangeHeroGroupError_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeHeroGroupError_eResult>(
    stChangeHeroGroupError_eResult_descriptor(), name, value);
}
enum stChangeHeroGroupError_ProtoModID {
  stChangeHeroGroupError_ProtoModID_ModID = 3
};
bool stChangeHeroGroupError_ProtoModID_IsValid(int value);
const stChangeHeroGroupError_ProtoModID stChangeHeroGroupError_ProtoModID_ProtoModID_MIN = stChangeHeroGroupError_ProtoModID_ModID;
const stChangeHeroGroupError_ProtoModID stChangeHeroGroupError_ProtoModID_ProtoModID_MAX = stChangeHeroGroupError_ProtoModID_ModID;
const int stChangeHeroGroupError_ProtoModID_ProtoModID_ARRAYSIZE = stChangeHeroGroupError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeHeroGroupError_ProtoModID_descriptor();
inline const ::std::string& stChangeHeroGroupError_ProtoModID_Name(stChangeHeroGroupError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeHeroGroupError_ProtoModID_descriptor(), value);
}
inline bool stChangeHeroGroupError_ProtoModID_Parse(
    const ::std::string& name, stChangeHeroGroupError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeHeroGroupError_ProtoModID>(
    stChangeHeroGroupError_ProtoModID_descriptor(), name, value);
}
enum stChangeHeroGroupError_ProtoFunID {
  stChangeHeroGroupError_ProtoFunID_FunID = 25
};
bool stChangeHeroGroupError_ProtoFunID_IsValid(int value);
const stChangeHeroGroupError_ProtoFunID stChangeHeroGroupError_ProtoFunID_ProtoFunID_MIN = stChangeHeroGroupError_ProtoFunID_FunID;
const stChangeHeroGroupError_ProtoFunID stChangeHeroGroupError_ProtoFunID_ProtoFunID_MAX = stChangeHeroGroupError_ProtoFunID_FunID;
const int stChangeHeroGroupError_ProtoFunID_ProtoFunID_ARRAYSIZE = stChangeHeroGroupError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeHeroGroupError_ProtoFunID_descriptor();
inline const ::std::string& stChangeHeroGroupError_ProtoFunID_Name(stChangeHeroGroupError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeHeroGroupError_ProtoFunID_descriptor(), value);
}
inline bool stChangeHeroGroupError_ProtoFunID_Parse(
    const ::std::string& name, stChangeHeroGroupError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeHeroGroupError_ProtoFunID>(
    stChangeHeroGroupError_ProtoFunID_descriptor(), name, value);
}
enum stNotifyObjMP_ProtoModID {
  stNotifyObjMP_ProtoModID_ModID = 3
};
bool stNotifyObjMP_ProtoModID_IsValid(int value);
const stNotifyObjMP_ProtoModID stNotifyObjMP_ProtoModID_ProtoModID_MIN = stNotifyObjMP_ProtoModID_ModID;
const stNotifyObjMP_ProtoModID stNotifyObjMP_ProtoModID_ProtoModID_MAX = stNotifyObjMP_ProtoModID_ModID;
const int stNotifyObjMP_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyObjMP_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyObjMP_ProtoModID_descriptor();
inline const ::std::string& stNotifyObjMP_ProtoModID_Name(stNotifyObjMP_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyObjMP_ProtoModID_descriptor(), value);
}
inline bool stNotifyObjMP_ProtoModID_Parse(
    const ::std::string& name, stNotifyObjMP_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyObjMP_ProtoModID>(
    stNotifyObjMP_ProtoModID_descriptor(), name, value);
}
enum stNotifyObjMP_ProtoFunID {
  stNotifyObjMP_ProtoFunID_FunID = 26
};
bool stNotifyObjMP_ProtoFunID_IsValid(int value);
const stNotifyObjMP_ProtoFunID stNotifyObjMP_ProtoFunID_ProtoFunID_MIN = stNotifyObjMP_ProtoFunID_FunID;
const stNotifyObjMP_ProtoFunID stNotifyObjMP_ProtoFunID_ProtoFunID_MAX = stNotifyObjMP_ProtoFunID_FunID;
const int stNotifyObjMP_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyObjMP_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyObjMP_ProtoFunID_descriptor();
inline const ::std::string& stNotifyObjMP_ProtoFunID_Name(stNotifyObjMP_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyObjMP_ProtoFunID_descriptor(), value);
}
inline bool stNotifyObjMP_ProtoFunID_Parse(
    const ::std::string& name, stNotifyObjMP_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyObjMP_ProtoFunID>(
    stNotifyObjMP_ProtoFunID_descriptor(), name, value);
}
enum stNotifyObjBati_ProtoModID {
  stNotifyObjBati_ProtoModID_ModID = 3
};
bool stNotifyObjBati_ProtoModID_IsValid(int value);
const stNotifyObjBati_ProtoModID stNotifyObjBati_ProtoModID_ProtoModID_MIN = stNotifyObjBati_ProtoModID_ModID;
const stNotifyObjBati_ProtoModID stNotifyObjBati_ProtoModID_ProtoModID_MAX = stNotifyObjBati_ProtoModID_ModID;
const int stNotifyObjBati_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyObjBati_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyObjBati_ProtoModID_descriptor();
inline const ::std::string& stNotifyObjBati_ProtoModID_Name(stNotifyObjBati_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyObjBati_ProtoModID_descriptor(), value);
}
inline bool stNotifyObjBati_ProtoModID_Parse(
    const ::std::string& name, stNotifyObjBati_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyObjBati_ProtoModID>(
    stNotifyObjBati_ProtoModID_descriptor(), name, value);
}
enum stNotifyObjBati_ProtoFunID {
  stNotifyObjBati_ProtoFunID_FunID = 27
};
bool stNotifyObjBati_ProtoFunID_IsValid(int value);
const stNotifyObjBati_ProtoFunID stNotifyObjBati_ProtoFunID_ProtoFunID_MIN = stNotifyObjBati_ProtoFunID_FunID;
const stNotifyObjBati_ProtoFunID stNotifyObjBati_ProtoFunID_ProtoFunID_MAX = stNotifyObjBati_ProtoFunID_FunID;
const int stNotifyObjBati_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyObjBati_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyObjBati_ProtoFunID_descriptor();
inline const ::std::string& stNotifyObjBati_ProtoFunID_Name(stNotifyObjBati_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyObjBati_ProtoFunID_descriptor(), value);
}
inline bool stNotifyObjBati_ProtoFunID_Parse(
    const ::std::string& name, stNotifyObjBati_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyObjBati_ProtoFunID>(
    stNotifyObjBati_ProtoFunID_descriptor(), name, value);
}
enum stAddBufferState2Me_ProtoModID {
  stAddBufferState2Me_ProtoModID_ModID = 3
};
bool stAddBufferState2Me_ProtoModID_IsValid(int value);
const stAddBufferState2Me_ProtoModID stAddBufferState2Me_ProtoModID_ProtoModID_MIN = stAddBufferState2Me_ProtoModID_ModID;
const stAddBufferState2Me_ProtoModID stAddBufferState2Me_ProtoModID_ProtoModID_MAX = stAddBufferState2Me_ProtoModID_ModID;
const int stAddBufferState2Me_ProtoModID_ProtoModID_ARRAYSIZE = stAddBufferState2Me_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddBufferState2Me_ProtoModID_descriptor();
inline const ::std::string& stAddBufferState2Me_ProtoModID_Name(stAddBufferState2Me_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddBufferState2Me_ProtoModID_descriptor(), value);
}
inline bool stAddBufferState2Me_ProtoModID_Parse(
    const ::std::string& name, stAddBufferState2Me_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddBufferState2Me_ProtoModID>(
    stAddBufferState2Me_ProtoModID_descriptor(), name, value);
}
enum stAddBufferState2Me_ProtoFunID {
  stAddBufferState2Me_ProtoFunID_FunID = 28
};
bool stAddBufferState2Me_ProtoFunID_IsValid(int value);
const stAddBufferState2Me_ProtoFunID stAddBufferState2Me_ProtoFunID_ProtoFunID_MIN = stAddBufferState2Me_ProtoFunID_FunID;
const stAddBufferState2Me_ProtoFunID stAddBufferState2Me_ProtoFunID_ProtoFunID_MAX = stAddBufferState2Me_ProtoFunID_FunID;
const int stAddBufferState2Me_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddBufferState2Me_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddBufferState2Me_ProtoFunID_descriptor();
inline const ::std::string& stAddBufferState2Me_ProtoFunID_Name(stAddBufferState2Me_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddBufferState2Me_ProtoFunID_descriptor(), value);
}
inline bool stAddBufferState2Me_ProtoFunID_Parse(
    const ::std::string& name, stAddBufferState2Me_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddBufferState2Me_ProtoFunID>(
    stAddBufferState2Me_ProtoFunID_descriptor(), name, value);
}
enum stDelBufferState_ProtoModID {
  stDelBufferState_ProtoModID_ModID = 3
};
bool stDelBufferState_ProtoModID_IsValid(int value);
const stDelBufferState_ProtoModID stDelBufferState_ProtoModID_ProtoModID_MIN = stDelBufferState_ProtoModID_ModID;
const stDelBufferState_ProtoModID stDelBufferState_ProtoModID_ProtoModID_MAX = stDelBufferState_ProtoModID_ModID;
const int stDelBufferState_ProtoModID_ProtoModID_ARRAYSIZE = stDelBufferState_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDelBufferState_ProtoModID_descriptor();
inline const ::std::string& stDelBufferState_ProtoModID_Name(stDelBufferState_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDelBufferState_ProtoModID_descriptor(), value);
}
inline bool stDelBufferState_ProtoModID_Parse(
    const ::std::string& name, stDelBufferState_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDelBufferState_ProtoModID>(
    stDelBufferState_ProtoModID_descriptor(), name, value);
}
enum stDelBufferState_ProtoFunID {
  stDelBufferState_ProtoFunID_FunID = 29
};
bool stDelBufferState_ProtoFunID_IsValid(int value);
const stDelBufferState_ProtoFunID stDelBufferState_ProtoFunID_ProtoFunID_MIN = stDelBufferState_ProtoFunID_FunID;
const stDelBufferState_ProtoFunID stDelBufferState_ProtoFunID_ProtoFunID_MAX = stDelBufferState_ProtoFunID_FunID;
const int stDelBufferState_ProtoFunID_ProtoFunID_ARRAYSIZE = stDelBufferState_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDelBufferState_ProtoFunID_descriptor();
inline const ::std::string& stDelBufferState_ProtoFunID_Name(stDelBufferState_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDelBufferState_ProtoFunID_descriptor(), value);
}
inline bool stDelBufferState_ProtoFunID_Parse(
    const ::std::string& name, stDelBufferState_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDelBufferState_ProtoFunID>(
    stDelBufferState_ProtoFunID_descriptor(), name, value);
}
enum stNotifyExecAI_ProtoModID {
  stNotifyExecAI_ProtoModID_ModID = 3
};
bool stNotifyExecAI_ProtoModID_IsValid(int value);
const stNotifyExecAI_ProtoModID stNotifyExecAI_ProtoModID_ProtoModID_MIN = stNotifyExecAI_ProtoModID_ModID;
const stNotifyExecAI_ProtoModID stNotifyExecAI_ProtoModID_ProtoModID_MAX = stNotifyExecAI_ProtoModID_ModID;
const int stNotifyExecAI_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyExecAI_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyExecAI_ProtoModID_descriptor();
inline const ::std::string& stNotifyExecAI_ProtoModID_Name(stNotifyExecAI_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyExecAI_ProtoModID_descriptor(), value);
}
inline bool stNotifyExecAI_ProtoModID_Parse(
    const ::std::string& name, stNotifyExecAI_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyExecAI_ProtoModID>(
    stNotifyExecAI_ProtoModID_descriptor(), name, value);
}
enum stNotifyExecAI_ProtoFunID {
  stNotifyExecAI_ProtoFunID_FunID = 30
};
bool stNotifyExecAI_ProtoFunID_IsValid(int value);
const stNotifyExecAI_ProtoFunID stNotifyExecAI_ProtoFunID_ProtoFunID_MIN = stNotifyExecAI_ProtoFunID_FunID;
const stNotifyExecAI_ProtoFunID stNotifyExecAI_ProtoFunID_ProtoFunID_MAX = stNotifyExecAI_ProtoFunID_FunID;
const int stNotifyExecAI_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyExecAI_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyExecAI_ProtoFunID_descriptor();
inline const ::std::string& stNotifyExecAI_ProtoFunID_Name(stNotifyExecAI_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyExecAI_ProtoFunID_descriptor(), value);
}
inline bool stNotifyExecAI_ProtoFunID_Parse(
    const ::std::string& name, stNotifyExecAI_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyExecAI_ProtoFunID>(
    stNotifyExecAI_ProtoFunID_descriptor(), name, value);
}
enum stAlertBossAppear_ProtoModID {
  stAlertBossAppear_ProtoModID_ModID = 3
};
bool stAlertBossAppear_ProtoModID_IsValid(int value);
const stAlertBossAppear_ProtoModID stAlertBossAppear_ProtoModID_ProtoModID_MIN = stAlertBossAppear_ProtoModID_ModID;
const stAlertBossAppear_ProtoModID stAlertBossAppear_ProtoModID_ProtoModID_MAX = stAlertBossAppear_ProtoModID_ModID;
const int stAlertBossAppear_ProtoModID_ProtoModID_ARRAYSIZE = stAlertBossAppear_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAlertBossAppear_ProtoModID_descriptor();
inline const ::std::string& stAlertBossAppear_ProtoModID_Name(stAlertBossAppear_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAlertBossAppear_ProtoModID_descriptor(), value);
}
inline bool stAlertBossAppear_ProtoModID_Parse(
    const ::std::string& name, stAlertBossAppear_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAlertBossAppear_ProtoModID>(
    stAlertBossAppear_ProtoModID_descriptor(), name, value);
}
enum stAlertBossAppear_ProtoFunID {
  stAlertBossAppear_ProtoFunID_FunID = 31
};
bool stAlertBossAppear_ProtoFunID_IsValid(int value);
const stAlertBossAppear_ProtoFunID stAlertBossAppear_ProtoFunID_ProtoFunID_MIN = stAlertBossAppear_ProtoFunID_FunID;
const stAlertBossAppear_ProtoFunID stAlertBossAppear_ProtoFunID_ProtoFunID_MAX = stAlertBossAppear_ProtoFunID_FunID;
const int stAlertBossAppear_ProtoFunID_ProtoFunID_ARRAYSIZE = stAlertBossAppear_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAlertBossAppear_ProtoFunID_descriptor();
inline const ::std::string& stAlertBossAppear_ProtoFunID_Name(stAlertBossAppear_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAlertBossAppear_ProtoFunID_descriptor(), value);
}
inline bool stAlertBossAppear_ProtoFunID_Parse(
    const ::std::string& name, stAlertBossAppear_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAlertBossAppear_ProtoFunID>(
    stAlertBossAppear_ProtoFunID_descriptor(), name, value);
}
enum stReqChangeMainCity_ProtoModID {
  stReqChangeMainCity_ProtoModID_ModID = 3
};
bool stReqChangeMainCity_ProtoModID_IsValid(int value);
const stReqChangeMainCity_ProtoModID stReqChangeMainCity_ProtoModID_ProtoModID_MIN = stReqChangeMainCity_ProtoModID_ModID;
const stReqChangeMainCity_ProtoModID stReqChangeMainCity_ProtoModID_ProtoModID_MAX = stReqChangeMainCity_ProtoModID_ModID;
const int stReqChangeMainCity_ProtoModID_ProtoModID_ARRAYSIZE = stReqChangeMainCity_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangeMainCity_ProtoModID_descriptor();
inline const ::std::string& stReqChangeMainCity_ProtoModID_Name(stReqChangeMainCity_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangeMainCity_ProtoModID_descriptor(), value);
}
inline bool stReqChangeMainCity_ProtoModID_Parse(
    const ::std::string& name, stReqChangeMainCity_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangeMainCity_ProtoModID>(
    stReqChangeMainCity_ProtoModID_descriptor(), name, value);
}
enum stReqChangeMainCity_ProtoFunID {
  stReqChangeMainCity_ProtoFunID_FunID = 32
};
bool stReqChangeMainCity_ProtoFunID_IsValid(int value);
const stReqChangeMainCity_ProtoFunID stReqChangeMainCity_ProtoFunID_ProtoFunID_MIN = stReqChangeMainCity_ProtoFunID_FunID;
const stReqChangeMainCity_ProtoFunID stReqChangeMainCity_ProtoFunID_ProtoFunID_MAX = stReqChangeMainCity_ProtoFunID_FunID;
const int stReqChangeMainCity_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChangeMainCity_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangeMainCity_ProtoFunID_descriptor();
inline const ::std::string& stReqChangeMainCity_ProtoFunID_Name(stReqChangeMainCity_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangeMainCity_ProtoFunID_descriptor(), value);
}
inline bool stReqChangeMainCity_ProtoFunID_Parse(
    const ::std::string& name, stReqChangeMainCity_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangeMainCity_ProtoFunID>(
    stReqChangeMainCity_ProtoFunID_descriptor(), name, value);
}
enum stNotifyAddFireWall_ProtoModID {
  stNotifyAddFireWall_ProtoModID_ModID = 3
};
bool stNotifyAddFireWall_ProtoModID_IsValid(int value);
const stNotifyAddFireWall_ProtoModID stNotifyAddFireWall_ProtoModID_ProtoModID_MIN = stNotifyAddFireWall_ProtoModID_ModID;
const stNotifyAddFireWall_ProtoModID stNotifyAddFireWall_ProtoModID_ProtoModID_MAX = stNotifyAddFireWall_ProtoModID_ModID;
const int stNotifyAddFireWall_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyAddFireWall_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddFireWall_ProtoModID_descriptor();
inline const ::std::string& stNotifyAddFireWall_ProtoModID_Name(stNotifyAddFireWall_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddFireWall_ProtoModID_descriptor(), value);
}
inline bool stNotifyAddFireWall_ProtoModID_Parse(
    const ::std::string& name, stNotifyAddFireWall_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddFireWall_ProtoModID>(
    stNotifyAddFireWall_ProtoModID_descriptor(), name, value);
}
enum stNotifyAddFireWall_ProtoFunID {
  stNotifyAddFireWall_ProtoFunID_FunID = 33
};
bool stNotifyAddFireWall_ProtoFunID_IsValid(int value);
const stNotifyAddFireWall_ProtoFunID stNotifyAddFireWall_ProtoFunID_ProtoFunID_MIN = stNotifyAddFireWall_ProtoFunID_FunID;
const stNotifyAddFireWall_ProtoFunID stNotifyAddFireWall_ProtoFunID_ProtoFunID_MAX = stNotifyAddFireWall_ProtoFunID_FunID;
const int stNotifyAddFireWall_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyAddFireWall_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddFireWall_ProtoFunID_descriptor();
inline const ::std::string& stNotifyAddFireWall_ProtoFunID_Name(stNotifyAddFireWall_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddFireWall_ProtoFunID_descriptor(), value);
}
inline bool stNotifyAddFireWall_ProtoFunID_Parse(
    const ::std::string& name, stNotifyAddFireWall_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddFireWall_ProtoFunID>(
    stNotifyAddFireWall_ProtoFunID_descriptor(), name, value);
}
enum stBeginThunderDamage_ProtoModID {
  stBeginThunderDamage_ProtoModID_ModID = 3
};
bool stBeginThunderDamage_ProtoModID_IsValid(int value);
const stBeginThunderDamage_ProtoModID stBeginThunderDamage_ProtoModID_ProtoModID_MIN = stBeginThunderDamage_ProtoModID_ModID;
const stBeginThunderDamage_ProtoModID stBeginThunderDamage_ProtoModID_ProtoModID_MAX = stBeginThunderDamage_ProtoModID_ModID;
const int stBeginThunderDamage_ProtoModID_ProtoModID_ARRAYSIZE = stBeginThunderDamage_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginThunderDamage_ProtoModID_descriptor();
inline const ::std::string& stBeginThunderDamage_ProtoModID_Name(stBeginThunderDamage_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginThunderDamage_ProtoModID_descriptor(), value);
}
inline bool stBeginThunderDamage_ProtoModID_Parse(
    const ::std::string& name, stBeginThunderDamage_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginThunderDamage_ProtoModID>(
    stBeginThunderDamage_ProtoModID_descriptor(), name, value);
}
enum stBeginThunderDamage_ProtoFunID {
  stBeginThunderDamage_ProtoFunID_FunID = 34
};
bool stBeginThunderDamage_ProtoFunID_IsValid(int value);
const stBeginThunderDamage_ProtoFunID stBeginThunderDamage_ProtoFunID_ProtoFunID_MIN = stBeginThunderDamage_ProtoFunID_FunID;
const stBeginThunderDamage_ProtoFunID stBeginThunderDamage_ProtoFunID_ProtoFunID_MAX = stBeginThunderDamage_ProtoFunID_FunID;
const int stBeginThunderDamage_ProtoFunID_ProtoFunID_ARRAYSIZE = stBeginThunderDamage_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginThunderDamage_ProtoFunID_descriptor();
inline const ::std::string& stBeginThunderDamage_ProtoFunID_Name(stBeginThunderDamage_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginThunderDamage_ProtoFunID_descriptor(), value);
}
inline bool stBeginThunderDamage_ProtoFunID_Parse(
    const ::std::string& name, stBeginThunderDamage_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginThunderDamage_ProtoFunID>(
    stBeginThunderDamage_ProtoFunID_descriptor(), name, value);
}
enum stCalcThunderDamage_ProtoModID {
  stCalcThunderDamage_ProtoModID_ModID = 3
};
bool stCalcThunderDamage_ProtoModID_IsValid(int value);
const stCalcThunderDamage_ProtoModID stCalcThunderDamage_ProtoModID_ProtoModID_MIN = stCalcThunderDamage_ProtoModID_ModID;
const stCalcThunderDamage_ProtoModID stCalcThunderDamage_ProtoModID_ProtoModID_MAX = stCalcThunderDamage_ProtoModID_ModID;
const int stCalcThunderDamage_ProtoModID_ProtoModID_ARRAYSIZE = stCalcThunderDamage_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCalcThunderDamage_ProtoModID_descriptor();
inline const ::std::string& stCalcThunderDamage_ProtoModID_Name(stCalcThunderDamage_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCalcThunderDamage_ProtoModID_descriptor(), value);
}
inline bool stCalcThunderDamage_ProtoModID_Parse(
    const ::std::string& name, stCalcThunderDamage_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCalcThunderDamage_ProtoModID>(
    stCalcThunderDamage_ProtoModID_descriptor(), name, value);
}
enum stCalcThunderDamage_ProtoFunID {
  stCalcThunderDamage_ProtoFunID_FunID = 35
};
bool stCalcThunderDamage_ProtoFunID_IsValid(int value);
const stCalcThunderDamage_ProtoFunID stCalcThunderDamage_ProtoFunID_ProtoFunID_MIN = stCalcThunderDamage_ProtoFunID_FunID;
const stCalcThunderDamage_ProtoFunID stCalcThunderDamage_ProtoFunID_ProtoFunID_MAX = stCalcThunderDamage_ProtoFunID_FunID;
const int stCalcThunderDamage_ProtoFunID_ProtoFunID_ARRAYSIZE = stCalcThunderDamage_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCalcThunderDamage_ProtoFunID_descriptor();
inline const ::std::string& stCalcThunderDamage_ProtoFunID_Name(stCalcThunderDamage_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCalcThunderDamage_ProtoFunID_descriptor(), value);
}
inline bool stCalcThunderDamage_ProtoFunID_Parse(
    const ::std::string& name, stCalcThunderDamage_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCalcThunderDamage_ProtoFunID>(
    stCalcThunderDamage_ProtoFunID_descriptor(), name, value);
}
enum stDirectDamge_ProtoModID {
  stDirectDamge_ProtoModID_ModID = 3
};
bool stDirectDamge_ProtoModID_IsValid(int value);
const stDirectDamge_ProtoModID stDirectDamge_ProtoModID_ProtoModID_MIN = stDirectDamge_ProtoModID_ModID;
const stDirectDamge_ProtoModID stDirectDamge_ProtoModID_ProtoModID_MAX = stDirectDamge_ProtoModID_ModID;
const int stDirectDamge_ProtoModID_ProtoModID_ARRAYSIZE = stDirectDamge_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDirectDamge_ProtoModID_descriptor();
inline const ::std::string& stDirectDamge_ProtoModID_Name(stDirectDamge_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDirectDamge_ProtoModID_descriptor(), value);
}
inline bool stDirectDamge_ProtoModID_Parse(
    const ::std::string& name, stDirectDamge_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDirectDamge_ProtoModID>(
    stDirectDamge_ProtoModID_descriptor(), name, value);
}
enum stDirectDamge_ProtoFunID {
  stDirectDamge_ProtoFunID_FunID = 36
};
bool stDirectDamge_ProtoFunID_IsValid(int value);
const stDirectDamge_ProtoFunID stDirectDamge_ProtoFunID_ProtoFunID_MIN = stDirectDamge_ProtoFunID_FunID;
const stDirectDamge_ProtoFunID stDirectDamge_ProtoFunID_ProtoFunID_MAX = stDirectDamge_ProtoFunID_FunID;
const int stDirectDamge_ProtoFunID_ProtoFunID_ARRAYSIZE = stDirectDamge_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDirectDamge_ProtoFunID_descriptor();
inline const ::std::string& stDirectDamge_ProtoFunID_Name(stDirectDamge_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDirectDamge_ProtoFunID_descriptor(), value);
}
inline bool stDirectDamge_ProtoFunID_Parse(
    const ::std::string& name, stDirectDamge_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDirectDamge_ProtoFunID>(
    stDirectDamge_ProtoFunID_descriptor(), name, value);
}
enum stNotifyObjDie_ProtoModID {
  stNotifyObjDie_ProtoModID_ModID = 3
};
bool stNotifyObjDie_ProtoModID_IsValid(int value);
const stNotifyObjDie_ProtoModID stNotifyObjDie_ProtoModID_ProtoModID_MIN = stNotifyObjDie_ProtoModID_ModID;
const stNotifyObjDie_ProtoModID stNotifyObjDie_ProtoModID_ProtoModID_MAX = stNotifyObjDie_ProtoModID_ModID;
const int stNotifyObjDie_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyObjDie_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyObjDie_ProtoModID_descriptor();
inline const ::std::string& stNotifyObjDie_ProtoModID_Name(stNotifyObjDie_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyObjDie_ProtoModID_descriptor(), value);
}
inline bool stNotifyObjDie_ProtoModID_Parse(
    const ::std::string& name, stNotifyObjDie_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyObjDie_ProtoModID>(
    stNotifyObjDie_ProtoModID_descriptor(), name, value);
}
enum stNotifyObjDie_ProtoFunID {
  stNotifyObjDie_ProtoFunID_FunID = 37
};
bool stNotifyObjDie_ProtoFunID_IsValid(int value);
const stNotifyObjDie_ProtoFunID stNotifyObjDie_ProtoFunID_ProtoFunID_MIN = stNotifyObjDie_ProtoFunID_FunID;
const stNotifyObjDie_ProtoFunID stNotifyObjDie_ProtoFunID_ProtoFunID_MAX = stNotifyObjDie_ProtoFunID_FunID;
const int stNotifyObjDie_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyObjDie_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyObjDie_ProtoFunID_descriptor();
inline const ::std::string& stNotifyObjDie_ProtoFunID_Name(stNotifyObjDie_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyObjDie_ProtoFunID_descriptor(), value);
}
inline bool stNotifyObjDie_ProtoFunID_Parse(
    const ::std::string& name, stNotifyObjDie_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyObjDie_ProtoFunID>(
    stNotifyObjDie_ProtoFunID_descriptor(), name, value);
}
enum stBeginBattle_ProtoModID {
  stBeginBattle_ProtoModID_ModID = 3
};
bool stBeginBattle_ProtoModID_IsValid(int value);
const stBeginBattle_ProtoModID stBeginBattle_ProtoModID_ProtoModID_MIN = stBeginBattle_ProtoModID_ModID;
const stBeginBattle_ProtoModID stBeginBattle_ProtoModID_ProtoModID_MAX = stBeginBattle_ProtoModID_ModID;
const int stBeginBattle_ProtoModID_ProtoModID_ARRAYSIZE = stBeginBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginBattle_ProtoModID_descriptor();
inline const ::std::string& stBeginBattle_ProtoModID_Name(stBeginBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginBattle_ProtoModID_descriptor(), value);
}
inline bool stBeginBattle_ProtoModID_Parse(
    const ::std::string& name, stBeginBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginBattle_ProtoModID>(
    stBeginBattle_ProtoModID_descriptor(), name, value);
}
enum stBeginBattle_ProtoFunID {
  stBeginBattle_ProtoFunID_FunID = 38
};
bool stBeginBattle_ProtoFunID_IsValid(int value);
const stBeginBattle_ProtoFunID stBeginBattle_ProtoFunID_ProtoFunID_MIN = stBeginBattle_ProtoFunID_FunID;
const stBeginBattle_ProtoFunID stBeginBattle_ProtoFunID_ProtoFunID_MAX = stBeginBattle_ProtoFunID_FunID;
const int stBeginBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stBeginBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBeginBattle_ProtoFunID_descriptor();
inline const ::std::string& stBeginBattle_ProtoFunID_Name(stBeginBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBeginBattle_ProtoFunID_descriptor(), value);
}
inline bool stBeginBattle_ProtoFunID_Parse(
    const ::std::string& name, stBeginBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBeginBattle_ProtoFunID>(
    stBeginBattle_ProtoFunID_descriptor(), name, value);
}
enum stThrowSkillFail_eReason {
  stThrowSkillFail_eReason_ATTER_NOT_EXIST = 1,
  stThrowSkillFail_eReason_ATTER_SKILL_NOT_EXIST = 2,
  stThrowSkillFail_eReason_ATTER_MP_NOT_ENOUGH = 3,
  stThrowSkillFail_eReason_ATTER_HAS_SILENCE = 4
};
bool stThrowSkillFail_eReason_IsValid(int value);
const stThrowSkillFail_eReason stThrowSkillFail_eReason_eReason_MIN = stThrowSkillFail_eReason_ATTER_NOT_EXIST;
const stThrowSkillFail_eReason stThrowSkillFail_eReason_eReason_MAX = stThrowSkillFail_eReason_ATTER_HAS_SILENCE;
const int stThrowSkillFail_eReason_eReason_ARRAYSIZE = stThrowSkillFail_eReason_eReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* stThrowSkillFail_eReason_descriptor();
inline const ::std::string& stThrowSkillFail_eReason_Name(stThrowSkillFail_eReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    stThrowSkillFail_eReason_descriptor(), value);
}
inline bool stThrowSkillFail_eReason_Parse(
    const ::std::string& name, stThrowSkillFail_eReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stThrowSkillFail_eReason>(
    stThrowSkillFail_eReason_descriptor(), name, value);
}
enum stThrowSkillFail_ProtoModID {
  stThrowSkillFail_ProtoModID_ModID = 3
};
bool stThrowSkillFail_ProtoModID_IsValid(int value);
const stThrowSkillFail_ProtoModID stThrowSkillFail_ProtoModID_ProtoModID_MIN = stThrowSkillFail_ProtoModID_ModID;
const stThrowSkillFail_ProtoModID stThrowSkillFail_ProtoModID_ProtoModID_MAX = stThrowSkillFail_ProtoModID_ModID;
const int stThrowSkillFail_ProtoModID_ProtoModID_ARRAYSIZE = stThrowSkillFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stThrowSkillFail_ProtoModID_descriptor();
inline const ::std::string& stThrowSkillFail_ProtoModID_Name(stThrowSkillFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stThrowSkillFail_ProtoModID_descriptor(), value);
}
inline bool stThrowSkillFail_ProtoModID_Parse(
    const ::std::string& name, stThrowSkillFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stThrowSkillFail_ProtoModID>(
    stThrowSkillFail_ProtoModID_descriptor(), name, value);
}
enum stThrowSkillFail_ProtoFunID {
  stThrowSkillFail_ProtoFunID_FunID = 39
};
bool stThrowSkillFail_ProtoFunID_IsValid(int value);
const stThrowSkillFail_ProtoFunID stThrowSkillFail_ProtoFunID_ProtoFunID_MIN = stThrowSkillFail_ProtoFunID_FunID;
const stThrowSkillFail_ProtoFunID stThrowSkillFail_ProtoFunID_ProtoFunID_MAX = stThrowSkillFail_ProtoFunID_FunID;
const int stThrowSkillFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stThrowSkillFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stThrowSkillFail_ProtoFunID_descriptor();
inline const ::std::string& stThrowSkillFail_ProtoFunID_Name(stThrowSkillFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stThrowSkillFail_ProtoFunID_descriptor(), value);
}
inline bool stThrowSkillFail_ProtoFunID_Parse(
    const ::std::string& name, stThrowSkillFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stThrowSkillFail_ProtoFunID>(
    stThrowSkillFail_ProtoFunID_descriptor(), name, value);
}
enum stNotifyResAppear_ProtoModID {
  stNotifyResAppear_ProtoModID_ModID = 3
};
bool stNotifyResAppear_ProtoModID_IsValid(int value);
const stNotifyResAppear_ProtoModID stNotifyResAppear_ProtoModID_ProtoModID_MIN = stNotifyResAppear_ProtoModID_ModID;
const stNotifyResAppear_ProtoModID stNotifyResAppear_ProtoModID_ProtoModID_MAX = stNotifyResAppear_ProtoModID_ModID;
const int stNotifyResAppear_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyResAppear_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyResAppear_ProtoModID_descriptor();
inline const ::std::string& stNotifyResAppear_ProtoModID_Name(stNotifyResAppear_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyResAppear_ProtoModID_descriptor(), value);
}
inline bool stNotifyResAppear_ProtoModID_Parse(
    const ::std::string& name, stNotifyResAppear_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyResAppear_ProtoModID>(
    stNotifyResAppear_ProtoModID_descriptor(), name, value);
}
enum stNotifyResAppear_ProtoFunID {
  stNotifyResAppear_ProtoFunID_FunID = 40
};
bool stNotifyResAppear_ProtoFunID_IsValid(int value);
const stNotifyResAppear_ProtoFunID stNotifyResAppear_ProtoFunID_ProtoFunID_MIN = stNotifyResAppear_ProtoFunID_FunID;
const stNotifyResAppear_ProtoFunID stNotifyResAppear_ProtoFunID_ProtoFunID_MAX = stNotifyResAppear_ProtoFunID_FunID;
const int stNotifyResAppear_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyResAppear_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyResAppear_ProtoFunID_descriptor();
inline const ::std::string& stNotifyResAppear_ProtoFunID_Name(stNotifyResAppear_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyResAppear_ProtoFunID_descriptor(), value);
}
inline bool stNotifyResAppear_ProtoFunID_Parse(
    const ::std::string& name, stNotifyResAppear_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyResAppear_ProtoFunID>(
    stNotifyResAppear_ProtoFunID_descriptor(), name, value);
}
enum stNotifyResDisappear_ProtoModID {
  stNotifyResDisappear_ProtoModID_ModID = 3
};
bool stNotifyResDisappear_ProtoModID_IsValid(int value);
const stNotifyResDisappear_ProtoModID stNotifyResDisappear_ProtoModID_ProtoModID_MIN = stNotifyResDisappear_ProtoModID_ModID;
const stNotifyResDisappear_ProtoModID stNotifyResDisappear_ProtoModID_ProtoModID_MAX = stNotifyResDisappear_ProtoModID_ModID;
const int stNotifyResDisappear_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyResDisappear_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyResDisappear_ProtoModID_descriptor();
inline const ::std::string& stNotifyResDisappear_ProtoModID_Name(stNotifyResDisappear_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyResDisappear_ProtoModID_descriptor(), value);
}
inline bool stNotifyResDisappear_ProtoModID_Parse(
    const ::std::string& name, stNotifyResDisappear_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyResDisappear_ProtoModID>(
    stNotifyResDisappear_ProtoModID_descriptor(), name, value);
}
enum stNotifyResDisappear_ProtoFunID {
  stNotifyResDisappear_ProtoFunID_FunID = 41
};
bool stNotifyResDisappear_ProtoFunID_IsValid(int value);
const stNotifyResDisappear_ProtoFunID stNotifyResDisappear_ProtoFunID_ProtoFunID_MIN = stNotifyResDisappear_ProtoFunID_FunID;
const stNotifyResDisappear_ProtoFunID stNotifyResDisappear_ProtoFunID_ProtoFunID_MAX = stNotifyResDisappear_ProtoFunID_FunID;
const int stNotifyResDisappear_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyResDisappear_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyResDisappear_ProtoFunID_descriptor();
inline const ::std::string& stNotifyResDisappear_ProtoFunID_Name(stNotifyResDisappear_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyResDisappear_ProtoFunID_descriptor(), value);
}
inline bool stNotifyResDisappear_ProtoFunID_Parse(
    const ::std::string& name, stNotifyResDisappear_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyResDisappear_ProtoFunID>(
    stNotifyResDisappear_ProtoFunID_descriptor(), name, value);
}
enum stNotifyBuffAppear_ProtoModID {
  stNotifyBuffAppear_ProtoModID_ModID = 3
};
bool stNotifyBuffAppear_ProtoModID_IsValid(int value);
const stNotifyBuffAppear_ProtoModID stNotifyBuffAppear_ProtoModID_ProtoModID_MIN = stNotifyBuffAppear_ProtoModID_ModID;
const stNotifyBuffAppear_ProtoModID stNotifyBuffAppear_ProtoModID_ProtoModID_MAX = stNotifyBuffAppear_ProtoModID_ModID;
const int stNotifyBuffAppear_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyBuffAppear_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyBuffAppear_ProtoModID_descriptor();
inline const ::std::string& stNotifyBuffAppear_ProtoModID_Name(stNotifyBuffAppear_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyBuffAppear_ProtoModID_descriptor(), value);
}
inline bool stNotifyBuffAppear_ProtoModID_Parse(
    const ::std::string& name, stNotifyBuffAppear_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyBuffAppear_ProtoModID>(
    stNotifyBuffAppear_ProtoModID_descriptor(), name, value);
}
enum stNotifyBuffAppear_ProtoFunID {
  stNotifyBuffAppear_ProtoFunID_FunID = 42
};
bool stNotifyBuffAppear_ProtoFunID_IsValid(int value);
const stNotifyBuffAppear_ProtoFunID stNotifyBuffAppear_ProtoFunID_ProtoFunID_MIN = stNotifyBuffAppear_ProtoFunID_FunID;
const stNotifyBuffAppear_ProtoFunID stNotifyBuffAppear_ProtoFunID_ProtoFunID_MAX = stNotifyBuffAppear_ProtoFunID_FunID;
const int stNotifyBuffAppear_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyBuffAppear_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyBuffAppear_ProtoFunID_descriptor();
inline const ::std::string& stNotifyBuffAppear_ProtoFunID_Name(stNotifyBuffAppear_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyBuffAppear_ProtoFunID_descriptor(), value);
}
inline bool stNotifyBuffAppear_ProtoFunID_Parse(
    const ::std::string& name, stNotifyBuffAppear_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyBuffAppear_ProtoFunID>(
    stNotifyBuffAppear_ProtoFunID_descriptor(), name, value);
}
enum stNotifyBuffDisappear_ProtoModID {
  stNotifyBuffDisappear_ProtoModID_ModID = 3
};
bool stNotifyBuffDisappear_ProtoModID_IsValid(int value);
const stNotifyBuffDisappear_ProtoModID stNotifyBuffDisappear_ProtoModID_ProtoModID_MIN = stNotifyBuffDisappear_ProtoModID_ModID;
const stNotifyBuffDisappear_ProtoModID stNotifyBuffDisappear_ProtoModID_ProtoModID_MAX = stNotifyBuffDisappear_ProtoModID_ModID;
const int stNotifyBuffDisappear_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyBuffDisappear_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyBuffDisappear_ProtoModID_descriptor();
inline const ::std::string& stNotifyBuffDisappear_ProtoModID_Name(stNotifyBuffDisappear_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyBuffDisappear_ProtoModID_descriptor(), value);
}
inline bool stNotifyBuffDisappear_ProtoModID_Parse(
    const ::std::string& name, stNotifyBuffDisappear_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyBuffDisappear_ProtoModID>(
    stNotifyBuffDisappear_ProtoModID_descriptor(), name, value);
}
enum stNotifyBuffDisappear_ProtoFunID {
  stNotifyBuffDisappear_ProtoFunID_FunID = 43
};
bool stNotifyBuffDisappear_ProtoFunID_IsValid(int value);
const stNotifyBuffDisappear_ProtoFunID stNotifyBuffDisappear_ProtoFunID_ProtoFunID_MIN = stNotifyBuffDisappear_ProtoFunID_FunID;
const stNotifyBuffDisappear_ProtoFunID stNotifyBuffDisappear_ProtoFunID_ProtoFunID_MAX = stNotifyBuffDisappear_ProtoFunID_FunID;
const int stNotifyBuffDisappear_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyBuffDisappear_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyBuffDisappear_ProtoFunID_descriptor();
inline const ::std::string& stNotifyBuffDisappear_ProtoFunID_Name(stNotifyBuffDisappear_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyBuffDisappear_ProtoFunID_descriptor(), value);
}
inline bool stNotifyBuffDisappear_ProtoFunID_Parse(
    const ::std::string& name, stNotifyBuffDisappear_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyBuffDisappear_ProtoFunID>(
    stNotifyBuffDisappear_ProtoFunID_descriptor(), name, value);
}
enum stOpCopyMapRes_ProtoModID {
  stOpCopyMapRes_ProtoModID_ModID = 3
};
bool stOpCopyMapRes_ProtoModID_IsValid(int value);
const stOpCopyMapRes_ProtoModID stOpCopyMapRes_ProtoModID_ProtoModID_MIN = stOpCopyMapRes_ProtoModID_ModID;
const stOpCopyMapRes_ProtoModID stOpCopyMapRes_ProtoModID_ProtoModID_MAX = stOpCopyMapRes_ProtoModID_ModID;
const int stOpCopyMapRes_ProtoModID_ProtoModID_ARRAYSIZE = stOpCopyMapRes_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpCopyMapRes_ProtoModID_descriptor();
inline const ::std::string& stOpCopyMapRes_ProtoModID_Name(stOpCopyMapRes_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpCopyMapRes_ProtoModID_descriptor(), value);
}
inline bool stOpCopyMapRes_ProtoModID_Parse(
    const ::std::string& name, stOpCopyMapRes_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpCopyMapRes_ProtoModID>(
    stOpCopyMapRes_ProtoModID_descriptor(), name, value);
}
enum stOpCopyMapRes_ProtoFunID {
  stOpCopyMapRes_ProtoFunID_FunID = 44
};
bool stOpCopyMapRes_ProtoFunID_IsValid(int value);
const stOpCopyMapRes_ProtoFunID stOpCopyMapRes_ProtoFunID_ProtoFunID_MIN = stOpCopyMapRes_ProtoFunID_FunID;
const stOpCopyMapRes_ProtoFunID stOpCopyMapRes_ProtoFunID_ProtoFunID_MAX = stOpCopyMapRes_ProtoFunID_FunID;
const int stOpCopyMapRes_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpCopyMapRes_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpCopyMapRes_ProtoFunID_descriptor();
inline const ::std::string& stOpCopyMapRes_ProtoFunID_Name(stOpCopyMapRes_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpCopyMapRes_ProtoFunID_descriptor(), value);
}
inline bool stOpCopyMapRes_ProtoFunID_Parse(
    const ::std::string& name, stOpCopyMapRes_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpCopyMapRes_ProtoFunID>(
    stOpCopyMapRes_ProtoFunID_descriptor(), name, value);
}
enum stPlayerGotBuff_ProtoModID {
  stPlayerGotBuff_ProtoModID_ModID = 3
};
bool stPlayerGotBuff_ProtoModID_IsValid(int value);
const stPlayerGotBuff_ProtoModID stPlayerGotBuff_ProtoModID_ProtoModID_MIN = stPlayerGotBuff_ProtoModID_ModID;
const stPlayerGotBuff_ProtoModID stPlayerGotBuff_ProtoModID_ProtoModID_MAX = stPlayerGotBuff_ProtoModID_ModID;
const int stPlayerGotBuff_ProtoModID_ProtoModID_ARRAYSIZE = stPlayerGotBuff_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPlayerGotBuff_ProtoModID_descriptor();
inline const ::std::string& stPlayerGotBuff_ProtoModID_Name(stPlayerGotBuff_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPlayerGotBuff_ProtoModID_descriptor(), value);
}
inline bool stPlayerGotBuff_ProtoModID_Parse(
    const ::std::string& name, stPlayerGotBuff_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPlayerGotBuff_ProtoModID>(
    stPlayerGotBuff_ProtoModID_descriptor(), name, value);
}
enum stPlayerGotBuff_ProtoFunID {
  stPlayerGotBuff_ProtoFunID_FunID = 45
};
bool stPlayerGotBuff_ProtoFunID_IsValid(int value);
const stPlayerGotBuff_ProtoFunID stPlayerGotBuff_ProtoFunID_ProtoFunID_MIN = stPlayerGotBuff_ProtoFunID_FunID;
const stPlayerGotBuff_ProtoFunID stPlayerGotBuff_ProtoFunID_ProtoFunID_MAX = stPlayerGotBuff_ProtoFunID_FunID;
const int stPlayerGotBuff_ProtoFunID_ProtoFunID_ARRAYSIZE = stPlayerGotBuff_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPlayerGotBuff_ProtoFunID_descriptor();
inline const ::std::string& stPlayerGotBuff_ProtoFunID_Name(stPlayerGotBuff_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPlayerGotBuff_ProtoFunID_descriptor(), value);
}
inline bool stPlayerGotBuff_ProtoFunID_Parse(
    const ::std::string& name, stPlayerGotBuff_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPlayerGotBuff_ProtoFunID>(
    stPlayerGotBuff_ProtoFunID_descriptor(), name, value);
}
enum stPlayerCollectSuccess_ProtoModID {
  stPlayerCollectSuccess_ProtoModID_ModID = 3
};
bool stPlayerCollectSuccess_ProtoModID_IsValid(int value);
const stPlayerCollectSuccess_ProtoModID stPlayerCollectSuccess_ProtoModID_ProtoModID_MIN = stPlayerCollectSuccess_ProtoModID_ModID;
const stPlayerCollectSuccess_ProtoModID stPlayerCollectSuccess_ProtoModID_ProtoModID_MAX = stPlayerCollectSuccess_ProtoModID_ModID;
const int stPlayerCollectSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stPlayerCollectSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPlayerCollectSuccess_ProtoModID_descriptor();
inline const ::std::string& stPlayerCollectSuccess_ProtoModID_Name(stPlayerCollectSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPlayerCollectSuccess_ProtoModID_descriptor(), value);
}
inline bool stPlayerCollectSuccess_ProtoModID_Parse(
    const ::std::string& name, stPlayerCollectSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPlayerCollectSuccess_ProtoModID>(
    stPlayerCollectSuccess_ProtoModID_descriptor(), name, value);
}
enum stPlayerCollectSuccess_ProtoFunID {
  stPlayerCollectSuccess_ProtoFunID_FunID = 46
};
bool stPlayerCollectSuccess_ProtoFunID_IsValid(int value);
const stPlayerCollectSuccess_ProtoFunID stPlayerCollectSuccess_ProtoFunID_ProtoFunID_MIN = stPlayerCollectSuccess_ProtoFunID_FunID;
const stPlayerCollectSuccess_ProtoFunID stPlayerCollectSuccess_ProtoFunID_ProtoFunID_MAX = stPlayerCollectSuccess_ProtoFunID_FunID;
const int stPlayerCollectSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stPlayerCollectSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPlayerCollectSuccess_ProtoFunID_descriptor();
inline const ::std::string& stPlayerCollectSuccess_ProtoFunID_Name(stPlayerCollectSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPlayerCollectSuccess_ProtoFunID_descriptor(), value);
}
inline bool stPlayerCollectSuccess_ProtoFunID_Parse(
    const ::std::string& name, stPlayerCollectSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPlayerCollectSuccess_ProtoFunID>(
    stPlayerCollectSuccess_ProtoFunID_descriptor(), name, value);
}
enum stSynCampScore_ProtoModID {
  stSynCampScore_ProtoModID_ModID = 3
};
bool stSynCampScore_ProtoModID_IsValid(int value);
const stSynCampScore_ProtoModID stSynCampScore_ProtoModID_ProtoModID_MIN = stSynCampScore_ProtoModID_ModID;
const stSynCampScore_ProtoModID stSynCampScore_ProtoModID_ProtoModID_MAX = stSynCampScore_ProtoModID_ModID;
const int stSynCampScore_ProtoModID_ProtoModID_ARRAYSIZE = stSynCampScore_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynCampScore_ProtoModID_descriptor();
inline const ::std::string& stSynCampScore_ProtoModID_Name(stSynCampScore_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynCampScore_ProtoModID_descriptor(), value);
}
inline bool stSynCampScore_ProtoModID_Parse(
    const ::std::string& name, stSynCampScore_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynCampScore_ProtoModID>(
    stSynCampScore_ProtoModID_descriptor(), name, value);
}
enum stSynCampScore_ProtoFunID {
  stSynCampScore_ProtoFunID_FunID = 47
};
bool stSynCampScore_ProtoFunID_IsValid(int value);
const stSynCampScore_ProtoFunID stSynCampScore_ProtoFunID_ProtoFunID_MIN = stSynCampScore_ProtoFunID_FunID;
const stSynCampScore_ProtoFunID stSynCampScore_ProtoFunID_ProtoFunID_MAX = stSynCampScore_ProtoFunID_FunID;
const int stSynCampScore_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynCampScore_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynCampScore_ProtoFunID_descriptor();
inline const ::std::string& stSynCampScore_ProtoFunID_Name(stSynCampScore_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynCampScore_ProtoFunID_descriptor(), value);
}
inline bool stSynCampScore_ProtoFunID_Parse(
    const ::std::string& name, stSynCampScore_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynCampScore_ProtoFunID>(
    stSynCampScore_ProtoFunID_descriptor(), name, value);
}
enum stUserRelive_ProtoModID {
  stUserRelive_ProtoModID_ModID = 3
};
bool stUserRelive_ProtoModID_IsValid(int value);
const stUserRelive_ProtoModID stUserRelive_ProtoModID_ProtoModID_MIN = stUserRelive_ProtoModID_ModID;
const stUserRelive_ProtoModID stUserRelive_ProtoModID_ProtoModID_MAX = stUserRelive_ProtoModID_ModID;
const int stUserRelive_ProtoModID_ProtoModID_ARRAYSIZE = stUserRelive_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserRelive_ProtoModID_descriptor();
inline const ::std::string& stUserRelive_ProtoModID_Name(stUserRelive_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserRelive_ProtoModID_descriptor(), value);
}
inline bool stUserRelive_ProtoModID_Parse(
    const ::std::string& name, stUserRelive_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserRelive_ProtoModID>(
    stUserRelive_ProtoModID_descriptor(), name, value);
}
enum stUserRelive_ProtoFunID {
  stUserRelive_ProtoFunID_FunID = 48
};
bool stUserRelive_ProtoFunID_IsValid(int value);
const stUserRelive_ProtoFunID stUserRelive_ProtoFunID_ProtoFunID_MIN = stUserRelive_ProtoFunID_FunID;
const stUserRelive_ProtoFunID stUserRelive_ProtoFunID_ProtoFunID_MAX = stUserRelive_ProtoFunID_FunID;
const int stUserRelive_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserRelive_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserRelive_ProtoFunID_descriptor();
inline const ::std::string& stUserRelive_ProtoFunID_Name(stUserRelive_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserRelive_ProtoFunID_descriptor(), value);
}
inline bool stUserRelive_ProtoFunID_Parse(
    const ::std::string& name, stUserRelive_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserRelive_ProtoFunID>(
    stUserRelive_ProtoFunID_descriptor(), name, value);
}
enum stNotifyUserPointToPos_ProtoModID {
  stNotifyUserPointToPos_ProtoModID_ModID = 3
};
bool stNotifyUserPointToPos_ProtoModID_IsValid(int value);
const stNotifyUserPointToPos_ProtoModID stNotifyUserPointToPos_ProtoModID_ProtoModID_MIN = stNotifyUserPointToPos_ProtoModID_ModID;
const stNotifyUserPointToPos_ProtoModID stNotifyUserPointToPos_ProtoModID_ProtoModID_MAX = stNotifyUserPointToPos_ProtoModID_ModID;
const int stNotifyUserPointToPos_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyUserPointToPos_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserPointToPos_ProtoModID_descriptor();
inline const ::std::string& stNotifyUserPointToPos_ProtoModID_Name(stNotifyUserPointToPos_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserPointToPos_ProtoModID_descriptor(), value);
}
inline bool stNotifyUserPointToPos_ProtoModID_Parse(
    const ::std::string& name, stNotifyUserPointToPos_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserPointToPos_ProtoModID>(
    stNotifyUserPointToPos_ProtoModID_descriptor(), name, value);
}
enum stNotifyUserPointToPos_ProtoFunID {
  stNotifyUserPointToPos_ProtoFunID_FunID = 49
};
bool stNotifyUserPointToPos_ProtoFunID_IsValid(int value);
const stNotifyUserPointToPos_ProtoFunID stNotifyUserPointToPos_ProtoFunID_ProtoFunID_MIN = stNotifyUserPointToPos_ProtoFunID_FunID;
const stNotifyUserPointToPos_ProtoFunID stNotifyUserPointToPos_ProtoFunID_ProtoFunID_MAX = stNotifyUserPointToPos_ProtoFunID_FunID;
const int stNotifyUserPointToPos_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyUserPointToPos_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyUserPointToPos_ProtoFunID_descriptor();
inline const ::std::string& stNotifyUserPointToPos_ProtoFunID_Name(stNotifyUserPointToPos_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyUserPointToPos_ProtoFunID_descriptor(), value);
}
inline bool stNotifyUserPointToPos_ProtoFunID_Parse(
    const ::std::string& name, stNotifyUserPointToPos_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyUserPointToPos_ProtoFunID>(
    stNotifyUserPointToPos_ProtoFunID_descriptor(), name, value);
}
enum eBeingState {
  BEING_STATE_DEATH = 0,
  BEING_STATE_ICE = 1,
  BEING_STATE_SILENCE = 2,
  BEING_STATE_IMMUNE_DEBUFF = 3,
  BEING_STATE_RAGE = 4,
  BEING_STATE_FIRE_SPIRIT = 5,
  BEING_STATE_LIMIT_DEFENSE = 6,
  BEING_STATE_DEC_VELOCITY = 7,
  BEING_STATE_DIZZY = 8,
  BEING_STATE_PROVATION = 9,
  BEING_STATE_CHG_DAMAGE_PROP = 10,
  BEING_STATE_CHG_REF_BANG_PROP = 11,
  BEING_STATE_CHG_HIT_RATE = 12,
  BEING_STATE_TIMER_DEC_HP = 13,
  BEING_STATE_CHG_BATI = 14,
  BEING_STATE_TIMER_ADD_HP = 15,
  BEING_STATE_CHG_DODGE = 16,
  BEING_STATE_CHG_APPEARANCE = 17,
  BEING_STATE_CHG_BANG_PROP = 18,
  BEING_STATE_MAX = 31
};
bool eBeingState_IsValid(int value);
const eBeingState eBeingState_MIN = BEING_STATE_DEATH;
const eBeingState eBeingState_MAX = BEING_STATE_MAX;
const int eBeingState_ARRAYSIZE = eBeingState_MAX + 1;

const ::google::protobuf::EnumDescriptor* eBeingState_descriptor();
inline const ::std::string& eBeingState_Name(eBeingState value) {
  return ::google::protobuf::internal::NameOfEnum(
    eBeingState_descriptor(), value);
}
inline bool eBeingState_Parse(
    const ::std::string& name, eBeingState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eBeingState>(
    eBeingState_descriptor(), name, value);
}
enum eMapObjectType {
  eMapObject_Player = 0,
  eMapObject_Monster = 1,
  eMapObject_Hero = 2,
  eMapObject_Item = 3
};
bool eMapObjectType_IsValid(int value);
const eMapObjectType eMapObjectType_MIN = eMapObject_Player;
const eMapObjectType eMapObjectType_MAX = eMapObject_Item;
const int eMapObjectType_ARRAYSIZE = eMapObjectType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eMapObjectType_descriptor();
inline const ::std::string& eMapObjectType_Name(eMapObjectType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eMapObjectType_descriptor(), value);
}
inline bool eMapObjectType_Parse(
    const ::std::string& name, eMapObjectType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eMapObjectType>(
    eMapObjectType_descriptor(), name, value);
}
enum eCamp {
  eCamp_Red = 1,
  eCamp_Black = 2
};
bool eCamp_IsValid(int value);
const eCamp eCamp_MIN = eCamp_Red;
const eCamp eCamp_MAX = eCamp_Black;
const int eCamp_ARRAYSIZE = eCamp_MAX + 1;

const ::google::protobuf::EnumDescriptor* eCamp_descriptor();
inline const ::std::string& eCamp_Name(eCamp value) {
  return ::google::protobuf::internal::NameOfEnum(
    eCamp_descriptor(), value);
}
inline bool eCamp_Parse(
    const ::std::string& name, eCamp* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eCamp>(
    eCamp_descriptor(), name, value);
}
enum eAttResultType {
  eAttResult_Missing = 1,
  eAttResult_Bang = 2,
  eAttResult_Fire_Damage = 4,
  eAttResult_Ice_Damage = 8,
  eAttResult_Thunder_Damage = 16
};
bool eAttResultType_IsValid(int value);
const eAttResultType eAttResultType_MIN = eAttResult_Missing;
const eAttResultType eAttResultType_MAX = eAttResult_Thunder_Damage;
const int eAttResultType_ARRAYSIZE = eAttResultType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eAttResultType_descriptor();
inline const ::std::string& eAttResultType_Name(eAttResultType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eAttResultType_descriptor(), value);
}
inline bool eAttResultType_Parse(
    const ::std::string& name, eAttResultType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eAttResultType>(
    eAttResultType_descriptor(), name, value);
}
// ===================================================================

class stNotifyEnterMapInfo : public ::google::protobuf::Message {
 public:
  stNotifyEnterMapInfo();
  virtual ~stNotifyEnterMapInfo();

  stNotifyEnterMapInfo(const stNotifyEnterMapInfo& from);

  inline stNotifyEnterMapInfo& operator=(const stNotifyEnterMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyEnterMapInfo& default_instance();

  void Swap(stNotifyEnterMapInfo* other);

  // implements Message ----------------------------------------------

  stNotifyEnterMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyEnterMapInfo& from);
  void MergeFrom(const stNotifyEnterMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyEnterMapInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyEnterMapInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyEnterMapInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyEnterMapInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyEnterMapInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyEnterMapInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyEnterMapInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyEnterMapInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyEnterMapInfo_ProtoModID_Parse(name, value);
  }

  typedef stNotifyEnterMapInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyEnterMapInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyEnterMapInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyEnterMapInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyEnterMapInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyEnterMapInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyEnterMapInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyEnterMapInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyEnterMapInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 mapID = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 mapid() const;
  inline void set_mapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyEnterMapInfo)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 mapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyEnterMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class stClientLoadResFinish : public ::google::protobuf::Message {
 public:
  stClientLoadResFinish();
  virtual ~stClientLoadResFinish();

  stClientLoadResFinish(const stClientLoadResFinish& from);

  inline stClientLoadResFinish& operator=(const stClientLoadResFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stClientLoadResFinish& default_instance();

  void Swap(stClientLoadResFinish* other);

  // implements Message ----------------------------------------------

  stClientLoadResFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stClientLoadResFinish& from);
  void MergeFrom(const stClientLoadResFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stClientLoadResFinish_ProtoModID ProtoModID;
  static const ProtoModID ModID = stClientLoadResFinish_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stClientLoadResFinish_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stClientLoadResFinish_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stClientLoadResFinish_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stClientLoadResFinish_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stClientLoadResFinish_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stClientLoadResFinish_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stClientLoadResFinish_ProtoModID_Parse(name, value);
  }

  typedef stClientLoadResFinish_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stClientLoadResFinish_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stClientLoadResFinish_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stClientLoadResFinish_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stClientLoadResFinish_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stClientLoadResFinish_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stClientLoadResFinish_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stClientLoadResFinish_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stClientLoadResFinish_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stClientLoadResFinish)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stClientLoadResFinish* default_instance_;
};
// -------------------------------------------------------------------

class ReqEnterLevelMap : public ::google::protobuf::Message {
 public:
  ReqEnterLevelMap();
  virtual ~ReqEnterLevelMap();

  ReqEnterLevelMap(const ReqEnterLevelMap& from);

  inline ReqEnterLevelMap& operator=(const ReqEnterLevelMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterLevelMap& default_instance();

  void Swap(ReqEnterLevelMap* other);

  // implements Message ----------------------------------------------

  ReqEnterLevelMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqEnterLevelMap& from);
  void MergeFrom(const ReqEnterLevelMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqEnterLevelMap_ProtoModID ProtoModID;
  static const ProtoModID ModID = ReqEnterLevelMap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ReqEnterLevelMap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ReqEnterLevelMap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ReqEnterLevelMap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ReqEnterLevelMap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ReqEnterLevelMap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ReqEnterLevelMap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ReqEnterLevelMap_ProtoModID_Parse(name, value);
  }

  typedef ReqEnterLevelMap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ReqEnterLevelMap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ReqEnterLevelMap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ReqEnterLevelMap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ReqEnterLevelMap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ReqEnterLevelMap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ReqEnterLevelMap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ReqEnterLevelMap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ReqEnterLevelMap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.ReqEnterLevelMap)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static ReqEnterLevelMap* default_instance_;
};
// -------------------------------------------------------------------

class stSynDropInfo : public ::google::protobuf::Message {
 public:
  stSynDropInfo();
  virtual ~stSynDropInfo();

  stSynDropInfo(const stSynDropInfo& from);

  inline stSynDropInfo& operator=(const stSynDropInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynDropInfo& default_instance();

  void Swap(stSynDropInfo* other);

  // implements Message ----------------------------------------------

  stSynDropInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynDropInfo& from);
  void MergeFrom(const stSynDropInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stSynDropInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stSynDropInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynMonsterInfo : public ::google::protobuf::Message {
 public:
  stSynMonsterInfo();
  virtual ~stSynMonsterInfo();

  stSynMonsterInfo(const stSynMonsterInfo& from);

  inline stSynMonsterInfo& operator=(const stSynMonsterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMonsterInfo& default_instance();

  void Swap(stSynMonsterInfo* other);

  // implements Message ----------------------------------------------

  stSynMonsterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMonsterInfo& from);
  void MergeFrom(const stSynMonsterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 monsterID = 1;
  inline bool has_monsterid() const;
  inline void clear_monsterid();
  static const int kMonsterIDFieldNumber = 1;
  inline ::google::protobuf::uint32 monsterid() const;
  inline void set_monsterid(::google::protobuf::uint32 value);

  // optional uint32 monsterLv = 2;
  inline bool has_monsterlv() const;
  inline void clear_monsterlv();
  static const int kMonsterLvFieldNumber = 2;
  inline ::google::protobuf::uint32 monsterlv() const;
  inline void set_monsterlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stSynMonsterInfo)
 private:
  inline void set_has_monsterid();
  inline void clear_has_monsterid();
  inline void set_has_monsterlv();
  inline void clear_has_monsterlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 monsterid_;
  ::google::protobuf::uint32 monsterlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stSynMonsterInfo* default_instance_;
};
// -------------------------------------------------------------------

class NotifyEnterLevelMap : public ::google::protobuf::Message {
 public:
  NotifyEnterLevelMap();
  virtual ~NotifyEnterLevelMap();

  NotifyEnterLevelMap(const NotifyEnterLevelMap& from);

  inline NotifyEnterLevelMap& operator=(const NotifyEnterLevelMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyEnterLevelMap& default_instance();

  void Swap(NotifyEnterLevelMap* other);

  // implements Message ----------------------------------------------

  NotifyEnterLevelMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyEnterLevelMap& from);
  void MergeFrom(const NotifyEnterLevelMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NotifyEnterLevelMap_ProtoModID ProtoModID;
  static const ProtoModID ModID = NotifyEnterLevelMap_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return NotifyEnterLevelMap_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    NotifyEnterLevelMap_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    NotifyEnterLevelMap_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    NotifyEnterLevelMap_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return NotifyEnterLevelMap_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return NotifyEnterLevelMap_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return NotifyEnterLevelMap_ProtoModID_Parse(name, value);
  }

  typedef NotifyEnterLevelMap_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = NotifyEnterLevelMap_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return NotifyEnterLevelMap_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    NotifyEnterLevelMap_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    NotifyEnterLevelMap_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    NotifyEnterLevelMap_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return NotifyEnterLevelMap_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return NotifyEnterLevelMap_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return NotifyEnterLevelMap_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // repeated .Map.stSynDropInfo dropInfo = 2;
  inline int dropinfo_size() const;
  inline void clear_dropinfo();
  static const int kDropInfoFieldNumber = 2;
  inline const ::Map::stSynDropInfo& dropinfo(int index) const;
  inline ::Map::stSynDropInfo* mutable_dropinfo(int index);
  inline ::Map::stSynDropInfo* add_dropinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::stSynDropInfo >&
      dropinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::stSynDropInfo >*
      mutable_dropinfo();

  // repeated .Map.stSynMonsterInfo monsterInfo = 3;
  inline int monsterinfo_size() const;
  inline void clear_monsterinfo();
  static const int kMonsterInfoFieldNumber = 3;
  inline const ::Map::stSynMonsterInfo& monsterinfo(int index) const;
  inline ::Map::stSynMonsterInfo* mutable_monsterinfo(int index);
  inline ::Map::stSynMonsterInfo* add_monsterinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::stSynMonsterInfo >&
      monsterinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::stSynMonsterInfo >*
      mutable_monsterinfo();

  // optional .Map.stSynMonsterInfo bossInfo = 4;
  inline bool has_bossinfo() const;
  inline void clear_bossinfo();
  static const int kBossInfoFieldNumber = 4;
  inline const ::Map::stSynMonsterInfo& bossinfo() const;
  inline ::Map::stSynMonsterInfo* mutable_bossinfo();
  inline ::Map::stSynMonsterInfo* release_bossinfo();
  inline void set_allocated_bossinfo(::Map::stSynMonsterInfo* bossinfo);

  // optional .Map.stSynDropInfo drawInfo = 5;
  inline bool has_drawinfo() const;
  inline void clear_drawinfo();
  static const int kDrawInfoFieldNumber = 5;
  inline const ::Map::stSynDropInfo& drawinfo() const;
  inline ::Map::stSynDropInfo* mutable_drawinfo();
  inline ::Map::stSynDropInfo* release_drawinfo();
  inline void set_allocated_drawinfo(::Map::stSynDropInfo* drawinfo);

  // @@protoc_insertion_point(class_scope:Map.NotifyEnterLevelMap)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_bossinfo();
  inline void clear_has_bossinfo();
  inline void set_has_drawinfo();
  inline void clear_has_drawinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Map::stSynDropInfo > dropinfo_;
  ::google::protobuf::RepeatedPtrField< ::Map::stSynMonsterInfo > monsterinfo_;
  ::Map::stSynMonsterInfo* bossinfo_;
  ::Map::stSynDropInfo* drawinfo_;
  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static NotifyEnterLevelMap* default_instance_;
};
// -------------------------------------------------------------------

class stReqLeaveLevel : public ::google::protobuf::Message {
 public:
  stReqLeaveLevel();
  virtual ~stReqLeaveLevel();

  stReqLeaveLevel(const stReqLeaveLevel& from);

  inline stReqLeaveLevel& operator=(const stReqLeaveLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLeaveLevel& default_instance();

  void Swap(stReqLeaveLevel* other);

  // implements Message ----------------------------------------------

  stReqLeaveLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLeaveLevel& from);
  void MergeFrom(const stReqLeaveLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLeaveLevel_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLeaveLevel_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLeaveLevel_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLeaveLevel_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLeaveLevel_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLeaveLevel_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLeaveLevel_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLeaveLevel_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLeaveLevel_ProtoModID_Parse(name, value);
  }

  typedef stReqLeaveLevel_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLeaveLevel_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLeaveLevel_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLeaveLevel_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLeaveLevel_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLeaveLevel_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLeaveLevel_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLeaveLevel_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLeaveLevel_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stReqLeaveLevel)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stReqLeaveLevel* default_instance_;
};
// -------------------------------------------------------------------

class stLeaveLevelSuccess : public ::google::protobuf::Message {
 public:
  stLeaveLevelSuccess();
  virtual ~stLeaveLevelSuccess();

  stLeaveLevelSuccess(const stLeaveLevelSuccess& from);

  inline stLeaveLevelSuccess& operator=(const stLeaveLevelSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLeaveLevelSuccess& default_instance();

  void Swap(stLeaveLevelSuccess* other);

  // implements Message ----------------------------------------------

  stLeaveLevelSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLeaveLevelSuccess& from);
  void MergeFrom(const stLeaveLevelSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLeaveLevelSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLeaveLevelSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLeaveLevelSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLeaveLevelSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLeaveLevelSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLeaveLevelSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLeaveLevelSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLeaveLevelSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLeaveLevelSuccess_ProtoModID_Parse(name, value);
  }

  typedef stLeaveLevelSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLeaveLevelSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLeaveLevelSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLeaveLevelSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLeaveLevelSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLeaveLevelSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLeaveLevelSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLeaveLevelSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLeaveLevelSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Map.stLeaveLevelSuccess)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;


  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stLeaveLevelSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stEnterLevelError : public ::google::protobuf::Message {
 public:
  stEnterLevelError();
  virtual ~stEnterLevelError();

  stEnterLevelError(const stEnterLevelError& from);

  inline stEnterLevelError& operator=(const stEnterLevelError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnterLevelError& default_instance();

  void Swap(stEnterLevelError* other);

  // implements Message ----------------------------------------------

  stEnterLevelError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnterLevelError& from);
  void MergeFrom(const stEnterLevelError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEnterLevelError_Error Error;
  static const Error HAS_IN_LEVEL = stEnterLevelError_Error_HAS_IN_LEVEL;
  static const Error PRE_LEVEL_NOT_FINISH = stEnterLevelError_Error_PRE_LEVEL_NOT_FINISH;
  static const Error SVR_CFG_ERROR = stEnterLevelError_Error_SVR_CFG_ERROR;
  static const Error LEVEL_LIMIT = stEnterLevelError_Error_LEVEL_LIMIT;
  static const Error SP_NOT_ENGOUH = stEnterLevelError_Error_SP_NOT_ENGOUH;
  static const Error LILIAN_NOT_ENOUGH = stEnterLevelError_Error_LILIAN_NOT_ENOUGH;
  static const Error RUSH_NUM_USE_OUT = stEnterLevelError_Error_RUSH_NUM_USE_OUT;
  static const Error BAG_FULL = stEnterLevelError_Error_BAG_FULL;
  static const Error EQUIP_LIMIT = stEnterLevelError_Error_EQUIP_LIMIT;
  static inline bool Error_IsValid(int value) {
    return stEnterLevelError_Error_IsValid(value);
  }
  static const Error Error_MIN =
    stEnterLevelError_Error_Error_MIN;
  static const Error Error_MAX =
    stEnterLevelError_Error_Error_MAX;
  static const int Error_ARRAYSIZE =
    stEnterLevelError_Error_Error_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Error_descriptor() {
    return stEnterLevelError_Error_descriptor();
  }
  static inline const ::std::string& Error_Name(Error value) {
    return stEnterLevelError_Error_Name(value);
  }
  static inline bool Error_Parse(const ::std::string& name,
      Error* value) {
    return stEnterLevelError_Error_Parse(name, value);
  }

  typedef stEnterLevelError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEnterLevelError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEnterLevelError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEnterLevelError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEnterLevelError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEnterLevelError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEnterLevelError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEnterLevelError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEnterLevelError_ProtoModID_Parse(name, value);
  }

  typedef stEnterLevelError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEnterLevelError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEnterLevelError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEnterLevelError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEnterLevelError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEnterLevelError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEnterLevelError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEnterLevelError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEnterLevelError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Map.stEnterLevelError.Error errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::Map::stEnterLevelError_Error errorcode() const;
  inline void set_errorcode(::Map::stEnterLevelError_Error value);

  // @@protoc_insertion_point(class_scope:Map.stEnterLevelError)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stEnterLevelError* default_instance_;
};
// -------------------------------------------------------------------

class stPlayerData : public ::google::protobuf::Message {
 public:
  stPlayerData();
  virtual ~stPlayerData();

  stPlayerData(const stPlayerData& from);

  inline stPlayerData& operator=(const stPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPlayerData& default_instance();

  void Swap(stPlayerData* other);

  // implements Message ----------------------------------------------

  stPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPlayerData& from);
  void MergeFrom(const stPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 moID = 1;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 1;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional string roleName = 2;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 2;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional uint32 job = 3;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 3;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 level = 5;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 5;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 x = 6;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 6;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 7;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 7;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 8;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 8;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // optional uint32 dir = 9;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 9;
  inline ::google::protobuf::uint32 dir() const;
  inline void set_dir(::google::protobuf::uint32 value);

  // optional uint32 campID = 10;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIDFieldNumber = 10;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 hp = 11;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 11;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 maxHP = 12;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 12;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // optional uint32 mp = 13;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 13;
  inline ::google::protobuf::uint32 mp() const;
  inline void set_mp(::google::protobuf::uint32 value);

  // optional uint32 maxMP = 14;
  inline bool has_maxmp() const;
  inline void clear_maxmp();
  static const int kMaxMPFieldNumber = 14;
  inline ::google::protobuf::uint32 maxmp() const;
  inline void set_maxmp(::google::protobuf::uint32 value);

  // optional uint32 bati = 15;
  inline bool has_bati() const;
  inline void clear_bati();
  static const int kBatiFieldNumber = 15;
  inline ::google::protobuf::uint32 bati() const;
  inline void set_bati(::google::protobuf::uint32 value);

  // optional uint32 maxBati = 16;
  inline bool has_maxbati() const;
  inline void clear_maxbati();
  static const int kMaxBatiFieldNumber = 16;
  inline ::google::protobuf::uint32 maxbati() const;
  inline void set_maxbati(::google::protobuf::uint32 value);

  // optional uint32 headID = 17;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 17;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 bodyID = 18;
  inline bool has_bodyid() const;
  inline void clear_bodyid();
  static const int kBodyIDFieldNumber = 18;
  inline ::google::protobuf::uint32 bodyid() const;
  inline void set_bodyid(::google::protobuf::uint32 value);

  // optional uint32 weaponID = 19;
  inline bool has_weaponid() const;
  inline void clear_weaponid();
  static const int kWeaponIDFieldNumber = 19;
  inline ::google::protobuf::uint32 weaponid() const;
  inline void set_weaponid(::google::protobuf::uint32 value);

  // optional uint32 cloackID = 20;
  inline bool has_cloackid() const;
  inline void clear_cloackid();
  static const int kCloackIDFieldNumber = 20;
  inline ::google::protobuf::uint32 cloackid() const;
  inline void set_cloackid(::google::protobuf::uint32 value);

  // optional uint32 wingID = 21;
  inline bool has_wingid() const;
  inline void clear_wingid();
  static const int kWingIDFieldNumber = 21;
  inline ::google::protobuf::uint32 wingid() const;
  inline void set_wingid(::google::protobuf::uint32 value);

  // optional uint32 shoeID = 22;
  inline bool has_shoeid() const;
  inline void clear_shoeid();
  static const int kShoeIDFieldNumber = 22;
  inline ::google::protobuf::uint32 shoeid() const;
  inline void set_shoeid(::google::protobuf::uint32 value);

  // optional uint32 fashionHair = 23;
  inline bool has_fashionhair() const;
  inline void clear_fashionhair();
  static const int kFashionHairFieldNumber = 23;
  inline ::google::protobuf::uint32 fashionhair() const;
  inline void set_fashionhair(::google::protobuf::uint32 value);

  // optional uint32 fashionFace = 24;
  inline bool has_fashionface() const;
  inline void clear_fashionface();
  static const int kFashionFaceFieldNumber = 24;
  inline ::google::protobuf::uint32 fashionface() const;
  inline void set_fashionface(::google::protobuf::uint32 value);

  // optional uint32 fashionBody = 25;
  inline bool has_fashionbody() const;
  inline void clear_fashionbody();
  static const int kFashionBodyFieldNumber = 25;
  inline ::google::protobuf::uint32 fashionbody() const;
  inline void set_fashionbody(::google::protobuf::uint32 value);

  // optional uint32 fashionWeapon = 26;
  inline bool has_fashionweapon() const;
  inline void clear_fashionweapon();
  static const int kFashionWeaponFieldNumber = 26;
  inline ::google::protobuf::uint32 fashionweapon() const;
  inline void set_fashionweapon(::google::protobuf::uint32 value);

  // optional uint32 fashionShoe = 27;
  inline bool has_fashionshoe() const;
  inline void clear_fashionshoe();
  static const int kFashionShoeFieldNumber = 27;
  inline ::google::protobuf::uint32 fashionshoe() const;
  inline void set_fashionshoe(::google::protobuf::uint32 value);

  // optional uint32 fashionDecoration = 28;
  inline bool has_fashiondecoration() const;
  inline void clear_fashiondecoration();
  static const int kFashionDecorationFieldNumber = 28;
  inline ::google::protobuf::uint32 fashiondecoration() const;
  inline void set_fashiondecoration(::google::protobuf::uint32 value);

  // optional uint32 titleID = 29;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIDFieldNumber = 29;
  inline ::google::protobuf::uint32 titleid() const;
  inline void set_titleid(::google::protobuf::uint32 value);

  // optional uint32 effectID = 30;
  inline bool has_effectid() const;
  inline void clear_effectid();
  static const int kEffectIDFieldNumber = 30;
  inline ::google::protobuf::uint32 effectid() const;
  inline void set_effectid(::google::protobuf::uint32 value);

  // optional uint32 wingBreakLv = 31;
  inline bool has_wingbreaklv() const;
  inline void clear_wingbreaklv();
  static const int kWingBreakLvFieldNumber = 31;
  inline ::google::protobuf::uint32 wingbreaklv() const;
  inline void set_wingbreaklv(::google::protobuf::uint32 value);

  // optional uint32 followSpriteId = 32;
  inline bool has_followspriteid() const;
  inline void clear_followspriteid();
  static const int kFollowSpriteIdFieldNumber = 32;
  inline ::google::protobuf::uint32 followspriteid() const;
  inline void set_followspriteid(::google::protobuf::uint32 value);

  // optional uint32 followSpriteLvl = 33;
  inline bool has_followspritelvl() const;
  inline void clear_followspritelvl();
  static const int kFollowSpriteLvlFieldNumber = 33;
  inline ::google::protobuf::uint32 followspritelvl() const;
  inline void set_followspritelvl(::google::protobuf::uint32 value);

  // optional uint32 fashionWingID = 34;
  inline bool has_fashionwingid() const;
  inline void clear_fashionwingid();
  static const int kFashionWingIDFieldNumber = 34;
  inline ::google::protobuf::uint32 fashionwingid() const;
  inline void set_fashionwingid(::google::protobuf::uint32 value);

  // optional string couplename = 35;
  inline bool has_couplename() const;
  inline void clear_couplename();
  static const int kCouplenameFieldNumber = 35;
  inline const ::std::string& couplename() const;
  inline void set_couplename(const ::std::string& value);
  inline void set_couplename(const char* value);
  inline void set_couplename(const char* value, size_t size);
  inline ::std::string* mutable_couplename();
  inline ::std::string* release_couplename();
  inline void set_allocated_couplename(::std::string* couplename);

  // optional uint32 mountID = 36;
  inline bool has_mountid() const;
  inline void clear_mountid();
  static const int kMountIDFieldNumber = 36;
  inline ::google::protobuf::uint32 mountid() const;
  inline void set_mountid(::google::protobuf::uint32 value);

  // optional bool isRobot = 37;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsRobotFieldNumber = 37;
  inline bool isrobot() const;
  inline void set_isrobot(bool value);

  // @@protoc_insertion_point(class_scope:Map.stPlayerData)
 private:
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_dir();
  inline void clear_has_dir();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_maxmp();
  inline void clear_has_maxmp();
  inline void set_has_bati();
  inline void clear_has_bati();
  inline void set_has_maxbati();
  inline void clear_has_maxbati();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_bodyid();
  inline void clear_has_bodyid();
  inline void set_has_weaponid();
  inline void clear_has_weaponid();
  inline void set_has_cloackid();
  inline void clear_has_cloackid();
  inline void set_has_wingid();
  inline void clear_has_wingid();
  inline void set_has_shoeid();
  inline void clear_has_shoeid();
  inline void set_has_fashionhair();
  inline void clear_has_fashionhair();
  inline void set_has_fashionface();
  inline void clear_has_fashionface();
  inline void set_has_fashionbody();
  inline void clear_has_fashionbody();
  inline void set_has_fashionweapon();
  inline void clear_has_fashionweapon();
  inline void set_has_fashionshoe();
  inline void clear_has_fashionshoe();
  inline void set_has_fashiondecoration();
  inline void clear_has_fashiondecoration();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_effectid();
  inline void clear_has_effectid();
  inline void set_has_wingbreaklv();
  inline void clear_has_wingbreaklv();
  inline void set_has_followspriteid();
  inline void clear_has_followspriteid();
  inline void set_has_followspritelvl();
  inline void clear_has_followspritelvl();
  inline void set_has_fashionwingid();
  inline void clear_has_fashionwingid();
  inline void set_has_couplename();
  inline void clear_has_couplename();
  inline void set_has_mountid();
  inline void clear_has_mountid();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rolename_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 dir_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 maxhp_;
  ::google::protobuf::uint32 mp_;
  ::google::protobuf::uint32 maxmp_;
  ::google::protobuf::uint32 bati_;
  ::google::protobuf::uint32 maxbati_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 bodyid_;
  ::google::protobuf::uint32 weaponid_;
  ::google::protobuf::uint32 cloackid_;
  ::google::protobuf::uint32 wingid_;
  ::google::protobuf::uint32 shoeid_;
  ::google::protobuf::uint32 fashionhair_;
  ::google::protobuf::uint32 fashionface_;
  ::google::protobuf::uint32 fashionbody_;
  ::google::protobuf::uint32 fashionweapon_;
  ::google::protobuf::uint32 fashionshoe_;
  ::google::protobuf::uint32 fashiondecoration_;
  ::google::protobuf::uint32 titleid_;
  ::google::protobuf::uint32 effectid_;
  ::google::protobuf::uint32 wingbreaklv_;
  ::google::protobuf::uint32 followspriteid_;
  ::google::protobuf::uint32 followspritelvl_;
  ::std::string* couplename_;
  ::google::protobuf::uint32 fashionwingid_;
  ::google::protobuf::uint32 mountid_;
  bool isrobot_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(37 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stPlayerData* default_instance_;
};
// -------------------------------------------------------------------

class NotifyPlayerAppear : public ::google::protobuf::Message {
 public:
  NotifyPlayerAppear();
  virtual ~NotifyPlayerAppear();

  NotifyPlayerAppear(const NotifyPlayerAppear& from);

  inline NotifyPlayerAppear& operator=(const NotifyPlayerAppear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyPlayerAppear& default_instance();

  void Swap(NotifyPlayerAppear* other);

  // implements Message ----------------------------------------------

  NotifyPlayerAppear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyPlayerAppear& from);
  void MergeFrom(const NotifyPlayerAppear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NotifyPlayerAppear_ProtoModID ProtoModID;
  static const ProtoModID ModID = NotifyPlayerAppear_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return NotifyPlayerAppear_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    NotifyPlayerAppear_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    NotifyPlayerAppear_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    NotifyPlayerAppear_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return NotifyPlayerAppear_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return NotifyPlayerAppear_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return NotifyPlayerAppear_ProtoModID_Parse(name, value);
  }

  typedef NotifyPlayerAppear_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = NotifyPlayerAppear_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return NotifyPlayerAppear_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    NotifyPlayerAppear_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    NotifyPlayerAppear_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    NotifyPlayerAppear_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return NotifyPlayerAppear_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return NotifyPlayerAppear_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return NotifyPlayerAppear_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Map.stPlayerData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Map::stPlayerData& data(int index) const;
  inline ::Map::stPlayerData* mutable_data(int index);
  inline ::Map::stPlayerData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Map.NotifyPlayerAppear)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static NotifyPlayerAppear* default_instance_;
};
// -------------------------------------------------------------------

class NotifyObjDisappear_stObjDisappearInfo : public ::google::protobuf::Message {
 public:
  NotifyObjDisappear_stObjDisappearInfo();
  virtual ~NotifyObjDisappear_stObjDisappearInfo();

  NotifyObjDisappear_stObjDisappearInfo(const NotifyObjDisappear_stObjDisappearInfo& from);

  inline NotifyObjDisappear_stObjDisappearInfo& operator=(const NotifyObjDisappear_stObjDisappearInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyObjDisappear_stObjDisappearInfo& default_instance();

  void Swap(NotifyObjDisappear_stObjDisappearInfo* other);

  // implements Message ----------------------------------------------

  NotifyObjDisappear_stObjDisappearInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyObjDisappear_stObjDisappearInfo& from);
  void MergeFrom(const NotifyObjDisappear_stObjDisappearInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 moID = 1;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 1;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 moType = 2;
  inline bool has_motype() const;
  inline void clear_motype();
  static const int kMoTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 motype() const;
  inline void set_motype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.NotifyObjDisappear.stObjDisappearInfo)
 private:
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_motype();
  inline void clear_has_motype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 motype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static NotifyObjDisappear_stObjDisappearInfo* default_instance_;
};
// -------------------------------------------------------------------

class NotifyObjDisappear : public ::google::protobuf::Message {
 public:
  NotifyObjDisappear();
  virtual ~NotifyObjDisappear();

  NotifyObjDisappear(const NotifyObjDisappear& from);

  inline NotifyObjDisappear& operator=(const NotifyObjDisappear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyObjDisappear& default_instance();

  void Swap(NotifyObjDisappear* other);

  // implements Message ----------------------------------------------

  NotifyObjDisappear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyObjDisappear& from);
  void MergeFrom(const NotifyObjDisappear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NotifyObjDisappear_stObjDisappearInfo stObjDisappearInfo;

  typedef NotifyObjDisappear_ProtoModID ProtoModID;
  static const ProtoModID ModID = NotifyObjDisappear_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return NotifyObjDisappear_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    NotifyObjDisappear_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    NotifyObjDisappear_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    NotifyObjDisappear_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return NotifyObjDisappear_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return NotifyObjDisappear_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return NotifyObjDisappear_ProtoModID_Parse(name, value);
  }

  typedef NotifyObjDisappear_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = NotifyObjDisappear_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return NotifyObjDisappear_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    NotifyObjDisappear_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    NotifyObjDisappear_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    NotifyObjDisappear_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return NotifyObjDisappear_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return NotifyObjDisappear_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return NotifyObjDisappear_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Map.NotifyObjDisappear.stObjDisappearInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Map::NotifyObjDisappear_stObjDisappearInfo& data(int index) const;
  inline ::Map::NotifyObjDisappear_stObjDisappearInfo* mutable_data(int index);
  inline ::Map::NotifyObjDisappear_stObjDisappearInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::NotifyObjDisappear_stObjDisappearInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::NotifyObjDisappear_stObjDisappearInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Map.NotifyObjDisappear)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Map::NotifyObjDisappear_stObjDisappearInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static NotifyObjDisappear* default_instance_;
};
// -------------------------------------------------------------------

class NotifyNpcAppear_stNpcData : public ::google::protobuf::Message {
 public:
  NotifyNpcAppear_stNpcData();
  virtual ~NotifyNpcAppear_stNpcData();

  NotifyNpcAppear_stNpcData(const NotifyNpcAppear_stNpcData& from);

  inline NotifyNpcAppear_stNpcData& operator=(const NotifyNpcAppear_stNpcData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyNpcAppear_stNpcData& default_instance();

  void Swap(NotifyNpcAppear_stNpcData* other);

  // implements Message ----------------------------------------------

  NotifyNpcAppear_stNpcData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyNpcAppear_stNpcData& from);
  void MergeFrom(const NotifyNpcAppear_stNpcData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 npcID = 1;
  inline bool has_npcid() const;
  inline void clear_npcid();
  static const int kNpcIDFieldNumber = 1;
  inline ::google::protobuf::uint32 npcid() const;
  inline void set_npcid(::google::protobuf::uint32 value);

  // optional uint32 moID = 2;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // optional uint32 hp = 6;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 6;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 level = 7;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 7;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 bornAminID = 8;
  inline bool has_bornaminid() const;
  inline void clear_bornaminid();
  static const int kBornAminIDFieldNumber = 8;
  inline ::google::protobuf::uint32 bornaminid() const;
  inline void set_bornaminid(::google::protobuf::uint32 value);

  // optional bool isBoss = 9;
  inline bool has_isboss() const;
  inline void clear_isboss();
  static const int kIsBossFieldNumber = 9;
  inline bool isboss() const;
  inline void set_isboss(bool value);

  // optional uint32 dirAngle = 10;
  inline bool has_dirangle() const;
  inline void clear_dirangle();
  static const int kDirAngleFieldNumber = 10;
  inline ::google::protobuf::uint32 dirangle() const;
  inline void set_dirangle(::google::protobuf::uint32 value);

  // optional uint32 actionGroupID = 11;
  inline bool has_actiongroupid() const;
  inline void clear_actiongroupid();
  static const int kActionGroupIDFieldNumber = 11;
  inline ::google::protobuf::uint32 actiongroupid() const;
  inline void set_actiongroupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.NotifyNpcAppear.stNpcData)
 private:
  inline void set_has_npcid();
  inline void clear_has_npcid();
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_bornaminid();
  inline void clear_has_bornaminid();
  inline void set_has_isboss();
  inline void clear_has_isboss();
  inline void set_has_dirangle();
  inline void clear_has_dirangle();
  inline void set_has_actiongroupid();
  inline void clear_has_actiongroupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 npcid_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 bornaminid_;
  bool isboss_;
  ::google::protobuf::uint32 dirangle_;
  ::google::protobuf::uint32 actiongroupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static NotifyNpcAppear_stNpcData* default_instance_;
};
// -------------------------------------------------------------------

class NotifyNpcAppear : public ::google::protobuf::Message {
 public:
  NotifyNpcAppear();
  virtual ~NotifyNpcAppear();

  NotifyNpcAppear(const NotifyNpcAppear& from);

  inline NotifyNpcAppear& operator=(const NotifyNpcAppear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyNpcAppear& default_instance();

  void Swap(NotifyNpcAppear* other);

  // implements Message ----------------------------------------------

  NotifyNpcAppear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyNpcAppear& from);
  void MergeFrom(const NotifyNpcAppear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NotifyNpcAppear_stNpcData stNpcData;

  typedef NotifyNpcAppear_ProtoModID ProtoModID;
  static const ProtoModID ModID = NotifyNpcAppear_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return NotifyNpcAppear_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    NotifyNpcAppear_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    NotifyNpcAppear_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    NotifyNpcAppear_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return NotifyNpcAppear_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return NotifyNpcAppear_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return NotifyNpcAppear_ProtoModID_Parse(name, value);
  }

  typedef NotifyNpcAppear_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = NotifyNpcAppear_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return NotifyNpcAppear_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    NotifyNpcAppear_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    NotifyNpcAppear_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    NotifyNpcAppear_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return NotifyNpcAppear_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return NotifyNpcAppear_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return NotifyNpcAppear_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Map.NotifyNpcAppear.stNpcData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Map::NotifyNpcAppear_stNpcData& data(int index) const;
  inline ::Map::NotifyNpcAppear_stNpcData* mutable_data(int index);
  inline ::Map::NotifyNpcAppear_stNpcData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::NotifyNpcAppear_stNpcData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::NotifyNpcAppear_stNpcData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Map.NotifyNpcAppear)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Map::NotifyNpcAppear_stNpcData > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static NotifyNpcAppear* default_instance_;
};
// -------------------------------------------------------------------

class NotifyHeroAppear_stHeroData : public ::google::protobuf::Message {
 public:
  NotifyHeroAppear_stHeroData();
  virtual ~NotifyHeroAppear_stHeroData();

  NotifyHeroAppear_stHeroData(const NotifyHeroAppear_stHeroData& from);

  inline NotifyHeroAppear_stHeroData& operator=(const NotifyHeroAppear_stHeroData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyHeroAppear_stHeroData& default_instance();

  void Swap(NotifyHeroAppear_stHeroData* other);

  // implements Message ----------------------------------------------

  NotifyHeroAppear_stHeroData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyHeroAppear_stHeroData& from);
  void MergeFrom(const NotifyHeroAppear_stHeroData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 moID = 2;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // optional uint32 hp = 6;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 6;
  inline ::google::protobuf::uint32 hp() const;
  inline void set_hp(::google::protobuf::uint32 value);

  // optional uint32 maxHP = 7;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 7;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // optional uint32 masterMoID = 8;
  inline bool has_mastermoid() const;
  inline void clear_mastermoid();
  static const int kMasterMoIDFieldNumber = 8;
  inline ::google::protobuf::uint32 mastermoid() const;
  inline void set_mastermoid(::google::protobuf::uint32 value);

  // optional uint32 campID = 9;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIDFieldNumber = 9;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 level = 10;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 10;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional bool createBySkill = 11;
  inline bool has_createbyskill() const;
  inline void clear_createbyskill();
  static const int kCreateBySkillFieldNumber = 11;
  inline bool createbyskill() const;
  inline void set_createbyskill(bool value);

  // optional uint32 pos = 12;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 12;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.NotifyHeroAppear.stHeroData)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_mastermoid();
  inline void clear_has_mastermoid();
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_createbyskill();
  inline void clear_has_createbyskill();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 hp_;
  ::google::protobuf::uint32 maxhp_;
  ::google::protobuf::uint32 mastermoid_;
  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 level_;
  bool createbyskill_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static NotifyHeroAppear_stHeroData* default_instance_;
};
// -------------------------------------------------------------------

class NotifyHeroAppear : public ::google::protobuf::Message {
 public:
  NotifyHeroAppear();
  virtual ~NotifyHeroAppear();

  NotifyHeroAppear(const NotifyHeroAppear& from);

  inline NotifyHeroAppear& operator=(const NotifyHeroAppear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyHeroAppear& default_instance();

  void Swap(NotifyHeroAppear* other);

  // implements Message ----------------------------------------------

  NotifyHeroAppear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyHeroAppear& from);
  void MergeFrom(const NotifyHeroAppear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NotifyHeroAppear_stHeroData stHeroData;

  typedef NotifyHeroAppear_ProtoModID ProtoModID;
  static const ProtoModID ModID = NotifyHeroAppear_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return NotifyHeroAppear_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    NotifyHeroAppear_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    NotifyHeroAppear_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    NotifyHeroAppear_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return NotifyHeroAppear_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return NotifyHeroAppear_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return NotifyHeroAppear_ProtoModID_Parse(name, value);
  }

  typedef NotifyHeroAppear_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = NotifyHeroAppear_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return NotifyHeroAppear_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    NotifyHeroAppear_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    NotifyHeroAppear_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    NotifyHeroAppear_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return NotifyHeroAppear_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return NotifyHeroAppear_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return NotifyHeroAppear_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Map.NotifyHeroAppear.stHeroData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Map::NotifyHeroAppear_stHeroData& data(int index) const;
  inline ::Map::NotifyHeroAppear_stHeroData* mutable_data(int index);
  inline ::Map::NotifyHeroAppear_stHeroData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::NotifyHeroAppear_stHeroData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::NotifyHeroAppear_stHeroData >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Map.NotifyHeroAppear)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Map::NotifyHeroAppear_stHeroData > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static NotifyHeroAppear* default_instance_;
};
// -------------------------------------------------------------------

class Pos : public ::google::protobuf::Message {
 public:
  Pos();
  virtual ~Pos();

  Pos(const Pos& from);

  inline Pos& operator=(const Pos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pos& default_instance();

  void Swap(Pos* other);

  // implements Message ----------------------------------------------

  Pos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pos& from);
  void MergeFrom(const Pos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.Pos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static Pos* default_instance_;
};
// -------------------------------------------------------------------

class ReqMove : public ::google::protobuf::Message {
 public:
  ReqMove();
  virtual ~ReqMove();

  ReqMove(const ReqMove& from);

  inline ReqMove& operator=(const ReqMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqMove& default_instance();

  void Swap(ReqMove* other);

  // implements Message ----------------------------------------------

  ReqMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqMove& from);
  void MergeFrom(const ReqMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqMove_ProtoModID ProtoModID;
  static const ProtoModID ModID = ReqMove_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ReqMove_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ReqMove_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ReqMove_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ReqMove_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ReqMove_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ReqMove_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ReqMove_ProtoModID_Parse(name, value);
  }

  typedef ReqMove_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ReqMove_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ReqMove_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ReqMove_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ReqMove_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ReqMove_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ReqMove_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ReqMove_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ReqMove_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 moID = 1;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 1;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .Map.Pos path = 3;
  inline bool has_path() const;
  inline void clear_path();
  static const int kPathFieldNumber = 3;
  inline const ::Map::Pos& path() const;
  inline ::Map::Pos* mutable_path();
  inline ::Map::Pos* release_path();
  inline void set_allocated_path(::Map::Pos* path);

  // optional bool isInstant = 4;
  inline bool has_isinstant() const;
  inline void clear_isinstant();
  static const int kIsInstantFieldNumber = 4;
  inline bool isinstant() const;
  inline void set_isinstant(bool value);

  // @@protoc_insertion_point(class_scope:Map.ReqMove)
 private:
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_path();
  inline void clear_has_path();
  inline void set_has_isinstant();
  inline void clear_has_isinstant();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 type_;
  ::Map::Pos* path_;
  bool isinstant_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static ReqMove* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyMODMove_stModMoveInfo : public ::google::protobuf::Message {
 public:
  stNotifyMODMove_stModMoveInfo();
  virtual ~stNotifyMODMove_stModMoveInfo();

  stNotifyMODMove_stModMoveInfo(const stNotifyMODMove_stModMoveInfo& from);

  inline stNotifyMODMove_stModMoveInfo& operator=(const stNotifyMODMove_stModMoveInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyMODMove_stModMoveInfo& default_instance();

  void Swap(stNotifyMODMove_stModMoveInfo* other);

  // implements Message ----------------------------------------------

  stNotifyMODMove_stModMoveInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyMODMove_stModMoveInfo& from);
  void MergeFrom(const stNotifyMODMove_stModMoveInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 x = 3;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 3;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 4;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 4;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 5;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 5;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // optional uint32 dir = 6;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 6;
  inline ::google::protobuf::uint32 dir() const;
  inline void set_dir(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyMODMove.stModMoveInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 dir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyMODMove_stModMoveInfo* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyMODMove : public ::google::protobuf::Message {
 public:
  stNotifyMODMove();
  virtual ~stNotifyMODMove();

  stNotifyMODMove(const stNotifyMODMove& from);

  inline stNotifyMODMove& operator=(const stNotifyMODMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyMODMove& default_instance();

  void Swap(stNotifyMODMove* other);

  // implements Message ----------------------------------------------

  stNotifyMODMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyMODMove& from);
  void MergeFrom(const stNotifyMODMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyMODMove_stModMoveInfo stModMoveInfo;

  typedef stNotifyMODMove_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyMODMove_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyMODMove_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyMODMove_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyMODMove_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyMODMove_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyMODMove_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyMODMove_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyMODMove_ProtoModID_Parse(name, value);
  }

  typedef stNotifyMODMove_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyMODMove_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyMODMove_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyMODMove_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyMODMove_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyMODMove_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyMODMove_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyMODMove_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyMODMove_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Map.stNotifyMODMove.stModMoveInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Map::stNotifyMODMove_stModMoveInfo& data(int index) const;
  inline ::Map::stNotifyMODMove_stModMoveInfo* mutable_data(int index);
  inline ::Map::stNotifyMODMove_stModMoveInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::stNotifyMODMove_stModMoveInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::stNotifyMODMove_stModMoveInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Map.stNotifyMODMove)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Map::stNotifyMODMove_stModMoveInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyMODMove* default_instance_;
};
// -------------------------------------------------------------------

class stThrowSkill : public ::google::protobuf::Message {
 public:
  stThrowSkill();
  virtual ~stThrowSkill();

  stThrowSkill(const stThrowSkill& from);

  inline stThrowSkill& operator=(const stThrowSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stThrowSkill& default_instance();

  void Swap(stThrowSkill* other);

  // implements Message ----------------------------------------------

  stThrowSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stThrowSkill& from);
  void MergeFrom(const stThrowSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stThrowSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stThrowSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stThrowSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stThrowSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stThrowSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stThrowSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stThrowSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stThrowSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stThrowSkill_ProtoModID_Parse(name, value);
  }

  typedef stThrowSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stThrowSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stThrowSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stThrowSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stThrowSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stThrowSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stThrowSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stThrowSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stThrowSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 skill = 1;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 1;
  inline ::google::protobuf::uint32 skill() const;
  inline void set_skill(::google::protobuf::uint32 value);

  // optional uint32 attType = 2;
  inline bool has_atttype() const;
  inline void clear_atttype();
  static const int kAttTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 atttype() const;
  inline void set_atttype(::google::protobuf::uint32 value);

  // optional uint32 attMoID = 3;
  inline bool has_attmoid() const;
  inline void clear_attmoid();
  static const int kAttMoIDFieldNumber = 3;
  inline ::google::protobuf::uint32 attmoid() const;
  inline void set_attmoid(::google::protobuf::uint32 value);

  // optional uint32 step = 4;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 4;
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stThrowSkill)
 private:
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_atttype();
  inline void clear_has_atttype();
  inline void set_has_attmoid();
  inline void clear_has_attmoid();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skill_;
  ::google::protobuf::uint32 atttype_;
  ::google::protobuf::uint32 attmoid_;
  ::google::protobuf::uint32 step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stThrowSkill* default_instance_;
};
// -------------------------------------------------------------------

class stHitInfo : public ::google::protobuf::Message {
 public:
  stHitInfo();
  virtual ~stHitInfo();

  stHitInfo(const stHitInfo& from);

  inline stHitInfo& operator=(const stHitInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHitInfo& default_instance();

  void Swap(stHitInfo* other);

  // implements Message ----------------------------------------------

  stHitInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHitInfo& from);
  void MergeFrom(const stHitInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 moType = 1;
  inline bool has_motype() const;
  inline void clear_motype();
  static const int kMoTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 motype() const;
  inline void set_motype(::google::protobuf::uint32 value);

  // optional uint32 moID = 2;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 skillID = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 3;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 damageTime = 4;
  inline bool has_damagetime() const;
  inline void clear_damagetime();
  static const int kDamageTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 damagetime() const;
  inline void set_damagetime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stHitInfo)
 private:
  inline void set_has_motype();
  inline void clear_has_motype();
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_damagetime();
  inline void clear_has_damagetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 motype_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 damagetime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stHitInfo* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyHit : public ::google::protobuf::Message {
 public:
  stNotifyHit();
  virtual ~stNotifyHit();

  stNotifyHit(const stNotifyHit& from);

  inline stNotifyHit& operator=(const stNotifyHit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyHit& default_instance();

  void Swap(stNotifyHit* other);

  // implements Message ----------------------------------------------

  stNotifyHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyHit& from);
  void MergeFrom(const stNotifyHit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyHit_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyHit_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyHit_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyHit_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyHit_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyHit_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyHit_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyHit_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyHit_ProtoModID_Parse(name, value);
  }

  typedef stNotifyHit_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyHit_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyHit_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyHit_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyHit_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyHit_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyHit_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyHit_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyHit_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 attType = 1;
  inline bool has_atttype() const;
  inline void clear_atttype();
  static const int kAttTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 atttype() const;
  inline void set_atttype(::google::protobuf::uint32 value);

  // optional uint32 attMoID = 2;
  inline bool has_attmoid() const;
  inline void clear_attmoid();
  static const int kAttMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 attmoid() const;
  inline void set_attmoid(::google::protobuf::uint32 value);

  // optional uint32 step = 3;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 3;
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // repeated .Map.stHitInfo hitInfos = 4;
  inline int hitinfos_size() const;
  inline void clear_hitinfos();
  static const int kHitInfosFieldNumber = 4;
  inline const ::Map::stHitInfo& hitinfos(int index) const;
  inline ::Map::stHitInfo* mutable_hitinfos(int index);
  inline ::Map::stHitInfo* add_hitinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::stHitInfo >&
      hitinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::stHitInfo >*
      mutable_hitinfos();

  // @@protoc_insertion_point(class_scope:Map.stNotifyHit)
 private:
  inline void set_has_atttype();
  inline void clear_has_atttype();
  inline void set_has_attmoid();
  inline void clear_has_attmoid();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 atttype_;
  ::google::protobuf::uint32 attmoid_;
  ::google::protobuf::RepeatedPtrField< ::Map::stHitInfo > hitinfos_;
  ::google::protobuf::uint32 step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyHit* default_instance_;
};
// -------------------------------------------------------------------

class AttRetInfo : public ::google::protobuf::Message {
 public:
  AttRetInfo();
  virtual ~AttRetInfo();

  AttRetInfo(const AttRetInfo& from);

  inline AttRetInfo& operator=(const AttRetInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttRetInfo& default_instance();

  void Swap(AttRetInfo* other);

  // implements Message ----------------------------------------------

  AttRetInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttRetInfo& from);
  void MergeFrom(const AttRetInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional uint32 moID = 2;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 skill = 3;
  inline bool has_skill() const;
  inline void clear_skill();
  static const int kSkillFieldNumber = 3;
  inline ::google::protobuf::uint32 skill() const;
  inline void set_skill(::google::protobuf::uint32 value);

  // optional uint32 decHP = 4;
  inline bool has_dechp() const;
  inline void clear_dechp();
  static const int kDecHPFieldNumber = 4;
  inline ::google::protobuf::uint32 dechp() const;
  inline void set_dechp(::google::protobuf::uint32 value);

  // optional uint32 result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.AttRetInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_skill();
  inline void clear_has_skill();
  inline void set_has_dechp();
  inline void clear_has_dechp();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 type_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 skill_;
  ::google::protobuf::uint32 dechp_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static AttRetInfo* default_instance_;
};
// -------------------------------------------------------------------

class AttackResult : public ::google::protobuf::Message {
 public:
  AttackResult();
  virtual ~AttackResult();

  AttackResult(const AttackResult& from);

  inline AttackResult& operator=(const AttackResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AttackResult& default_instance();

  void Swap(AttackResult* other);

  // implements Message ----------------------------------------------

  AttackResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AttackResult& from);
  void MergeFrom(const AttackResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef AttackResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = AttackResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return AttackResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    AttackResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    AttackResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    AttackResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return AttackResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return AttackResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return AttackResult_ProtoModID_Parse(name, value);
  }

  typedef AttackResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = AttackResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return AttackResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    AttackResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    AttackResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    AttackResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return AttackResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return AttackResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return AttackResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 attType = 1;
  inline bool has_atttype() const;
  inline void clear_atttype();
  static const int kAttTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 atttype() const;
  inline void set_atttype(::google::protobuf::uint32 value);

  // optional uint32 attMoID = 2;
  inline bool has_attmoid() const;
  inline void clear_attmoid();
  static const int kAttMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 attmoid() const;
  inline void set_attmoid(::google::protobuf::uint32 value);

  // optional uint32 step = 3;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 3;
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // optional uint32 damageTime = 4;
  inline bool has_damagetime() const;
  inline void clear_damagetime();
  static const int kDamageTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 damagetime() const;
  inline void set_damagetime(::google::protobuf::uint32 value);

  // repeated .Map.AttRetInfo attList = 5;
  inline int attlist_size() const;
  inline void clear_attlist();
  static const int kAttListFieldNumber = 5;
  inline const ::Map::AttRetInfo& attlist(int index) const;
  inline ::Map::AttRetInfo* mutable_attlist(int index);
  inline ::Map::AttRetInfo* add_attlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::AttRetInfo >&
      attlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::AttRetInfo >*
      mutable_attlist();

  // @@protoc_insertion_point(class_scope:Map.AttackResult)
 private:
  inline void set_has_atttype();
  inline void clear_has_atttype();
  inline void set_has_attmoid();
  inline void clear_has_attmoid();
  inline void set_has_step();
  inline void clear_has_step();
  inline void set_has_damagetime();
  inline void clear_has_damagetime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 atttype_;
  ::google::protobuf::uint32 attmoid_;
  ::google::protobuf::uint32 step_;
  ::google::protobuf::uint32 damagetime_;
  ::google::protobuf::RepeatedPtrField< ::Map::AttRetInfo > attlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static AttackResult* default_instance_;
};
// -------------------------------------------------------------------

class stMapObjAddHP : public ::google::protobuf::Message {
 public:
  stMapObjAddHP();
  virtual ~stMapObjAddHP();

  stMapObjAddHP(const stMapObjAddHP& from);

  inline stMapObjAddHP& operator=(const stMapObjAddHP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMapObjAddHP& default_instance();

  void Swap(stMapObjAddHP* other);

  // implements Message ----------------------------------------------

  stMapObjAddHP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMapObjAddHP& from);
  void MergeFrom(const stMapObjAddHP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMapObjAddHP_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMapObjAddHP_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMapObjAddHP_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMapObjAddHP_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMapObjAddHP_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMapObjAddHP_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMapObjAddHP_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMapObjAddHP_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMapObjAddHP_ProtoModID_Parse(name, value);
  }

  typedef stMapObjAddHP_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMapObjAddHP_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMapObjAddHP_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMapObjAddHP_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMapObjAddHP_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMapObjAddHP_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMapObjAddHP_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMapObjAddHP_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMapObjAddHP_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 moType = 1;
  inline bool has_motype() const;
  inline void clear_motype();
  static const int kMoTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 motype() const;
  inline void set_motype(::google::protobuf::uint32 value);

  // optional uint32 moID = 2;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 addHP = 3;
  inline bool has_addhp() const;
  inline void clear_addhp();
  static const int kAddHPFieldNumber = 3;
  inline ::google::protobuf::uint32 addhp() const;
  inline void set_addhp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stMapObjAddHP)
 private:
  inline void set_has_motype();
  inline void clear_has_motype();
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_addhp();
  inline void clear_has_addhp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 motype_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 addhp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stMapObjAddHP* default_instance_;
};
// -------------------------------------------------------------------

class stInstantMove : public ::google::protobuf::Message {
 public:
  stInstantMove();
  virtual ~stInstantMove();

  stInstantMove(const stInstantMove& from);

  inline stInstantMove& operator=(const stInstantMove& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInstantMove& default_instance();

  void Swap(stInstantMove* other);

  // implements Message ----------------------------------------------

  stInstantMove* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInstantMove& from);
  void MergeFrom(const stInstantMove& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInstantMove_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInstantMove_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInstantMove_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInstantMove_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInstantMove_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInstantMove_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInstantMove_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInstantMove_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInstantMove_ProtoModID_Parse(name, value);
  }

  typedef stInstantMove_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInstantMove_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInstantMove_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInstantMove_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInstantMove_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInstantMove_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInstantMove_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInstantMove_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInstantMove_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 moID = 1;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 1;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 type() const;
  inline void set_type(::google::protobuf::uint32 value);

  // optional .Map.Pos destPos = 3;
  inline bool has_destpos() const;
  inline void clear_destpos();
  static const int kDestPosFieldNumber = 3;
  inline const ::Map::Pos& destpos() const;
  inline ::Map::Pos* mutable_destpos();
  inline ::Map::Pos* release_destpos();
  inline void set_allocated_destpos(::Map::Pos* destpos);

  // @@protoc_insertion_point(class_scope:Map.stInstantMove)
 private:
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_destpos();
  inline void clear_has_destpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 type_;
  ::Map::Pos* destpos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stInstantMove* default_instance_;
};
// -------------------------------------------------------------------

class stAttackFail : public ::google::protobuf::Message {
 public:
  stAttackFail();
  virtual ~stAttackFail();

  stAttackFail(const stAttackFail& from);

  inline stAttackFail& operator=(const stAttackFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAttackFail& default_instance();

  void Swap(stAttackFail* other);

  // implements Message ----------------------------------------------

  stAttackFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAttackFail& from);
  void MergeFrom(const stAttackFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAttackFail_ErrorCode ErrorCode;
  static const ErrorCode TARGET_HASH_DIED = stAttackFail_ErrorCode_TARGET_HASH_DIED;
  static inline bool ErrorCode_IsValid(int value) {
    return stAttackFail_ErrorCode_IsValid(value);
  }
  static const ErrorCode ErrorCode_MIN =
    stAttackFail_ErrorCode_ErrorCode_MIN;
  static const ErrorCode ErrorCode_MAX =
    stAttackFail_ErrorCode_ErrorCode_MAX;
  static const int ErrorCode_ARRAYSIZE =
    stAttackFail_ErrorCode_ErrorCode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ErrorCode_descriptor() {
    return stAttackFail_ErrorCode_descriptor();
  }
  static inline const ::std::string& ErrorCode_Name(ErrorCode value) {
    return stAttackFail_ErrorCode_Name(value);
  }
  static inline bool ErrorCode_Parse(const ::std::string& name,
      ErrorCode* value) {
    return stAttackFail_ErrorCode_Parse(name, value);
  }

  typedef stAttackFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAttackFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAttackFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAttackFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAttackFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAttackFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAttackFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAttackFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAttackFail_ProtoModID_Parse(name, value);
  }

  typedef stAttackFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAttackFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAttackFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAttackFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAttackFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAttackFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAttackFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAttackFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAttackFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Map.stAttackFail.ErrorCode errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::Map::stAttackFail_ErrorCode errorcode() const;
  inline void set_errorcode(::Map::stAttackFail_ErrorCode value);

  // @@protoc_insertion_point(class_scope:Map.stAttackFail)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stAttackFail* default_instance_;
};
// -------------------------------------------------------------------

class stInterruptPlaySkill : public ::google::protobuf::Message {
 public:
  stInterruptPlaySkill();
  virtual ~stInterruptPlaySkill();

  stInterruptPlaySkill(const stInterruptPlaySkill& from);

  inline stInterruptPlaySkill& operator=(const stInterruptPlaySkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInterruptPlaySkill& default_instance();

  void Swap(stInterruptPlaySkill* other);

  // implements Message ----------------------------------------------

  stInterruptPlaySkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInterruptPlaySkill& from);
  void MergeFrom(const stInterruptPlaySkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInterruptPlaySkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInterruptPlaySkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInterruptPlaySkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInterruptPlaySkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInterruptPlaySkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInterruptPlaySkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInterruptPlaySkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInterruptPlaySkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInterruptPlaySkill_ProtoModID_Parse(name, value);
  }

  typedef stInterruptPlaySkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInterruptPlaySkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInterruptPlaySkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInterruptPlaySkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInterruptPlaySkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInterruptPlaySkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInterruptPlaySkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInterruptPlaySkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInterruptPlaySkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 attType = 1;
  inline bool has_atttype() const;
  inline void clear_atttype();
  static const int kAttTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 atttype() const;
  inline void set_atttype(::google::protobuf::uint32 value);

  // optional uint32 attID = 2;
  inline bool has_attid() const;
  inline void clear_attid();
  static const int kAttIDFieldNumber = 2;
  inline ::google::protobuf::uint32 attid() const;
  inline void set_attid(::google::protobuf::uint32 value);

  // optional string nextAction = 3;
  inline bool has_nextaction() const;
  inline void clear_nextaction();
  static const int kNextActionFieldNumber = 3;
  inline const ::std::string& nextaction() const;
  inline void set_nextaction(const ::std::string& value);
  inline void set_nextaction(const char* value);
  inline void set_nextaction(const char* value, size_t size);
  inline ::std::string* mutable_nextaction();
  inline ::std::string* release_nextaction();
  inline void set_allocated_nextaction(::std::string* nextaction);

  // @@protoc_insertion_point(class_scope:Map.stInterruptPlaySkill)
 private:
  inline void set_has_atttype();
  inline void clear_has_atttype();
  inline void set_has_attid();
  inline void clear_has_attid();
  inline void set_has_nextaction();
  inline void clear_has_nextaction();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 atttype_;
  ::google::protobuf::uint32 attid_;
  ::std::string* nextaction_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stInterruptPlaySkill* default_instance_;
};
// -------------------------------------------------------------------

class stMapObjectChgDir : public ::google::protobuf::Message {
 public:
  stMapObjectChgDir();
  virtual ~stMapObjectChgDir();

  stMapObjectChgDir(const stMapObjectChgDir& from);

  inline stMapObjectChgDir& operator=(const stMapObjectChgDir& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMapObjectChgDir& default_instance();

  void Swap(stMapObjectChgDir* other);

  // implements Message ----------------------------------------------

  stMapObjectChgDir* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMapObjectChgDir& from);
  void MergeFrom(const stMapObjectChgDir& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMapObjectChgDir_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMapObjectChgDir_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMapObjectChgDir_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMapObjectChgDir_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMapObjectChgDir_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMapObjectChgDir_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMapObjectChgDir_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMapObjectChgDir_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMapObjectChgDir_ProtoModID_Parse(name, value);
  }

  typedef stMapObjectChgDir_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMapObjectChgDir_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMapObjectChgDir_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMapObjectChgDir_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMapObjectChgDir_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMapObjectChgDir_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMapObjectChgDir_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMapObjectChgDir_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMapObjectChgDir_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 moType = 1;
  inline bool has_motype() const;
  inline void clear_motype();
  static const int kMoTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 motype() const;
  inline void set_motype(::google::protobuf::uint32 value);

  // optional uint32 moID = 2;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 dir = 3;
  inline bool has_dir() const;
  inline void clear_dir();
  static const int kDirFieldNumber = 3;
  inline ::google::protobuf::uint32 dir() const;
  inline void set_dir(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stMapObjectChgDir)
 private:
  inline void set_has_motype();
  inline void clear_has_motype();
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_dir();
  inline void clear_has_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 motype_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 dir_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stMapObjectChgDir* default_instance_;
};
// -------------------------------------------------------------------

class stReqOnlineUserOnMainCity : public ::google::protobuf::Message {
 public:
  stReqOnlineUserOnMainCity();
  virtual ~stReqOnlineUserOnMainCity();

  stReqOnlineUserOnMainCity(const stReqOnlineUserOnMainCity& from);

  inline stReqOnlineUserOnMainCity& operator=(const stReqOnlineUserOnMainCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOnlineUserOnMainCity& default_instance();

  void Swap(stReqOnlineUserOnMainCity* other);

  // implements Message ----------------------------------------------

  stReqOnlineUserOnMainCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOnlineUserOnMainCity& from);
  void MergeFrom(const stReqOnlineUserOnMainCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOnlineUserOnMainCity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOnlineUserOnMainCity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOnlineUserOnMainCity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOnlineUserOnMainCity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOnlineUserOnMainCity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOnlineUserOnMainCity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOnlineUserOnMainCity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOnlineUserOnMainCity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOnlineUserOnMainCity_ProtoModID_Parse(name, value);
  }

  typedef stReqOnlineUserOnMainCity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOnlineUserOnMainCity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOnlineUserOnMainCity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOnlineUserOnMainCity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOnlineUserOnMainCity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOnlineUserOnMainCity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOnlineUserOnMainCity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stReqOnlineUserOnMainCity)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stReqOnlineUserOnMainCity* default_instance_;
};
// -------------------------------------------------------------------

class stOnlineUserOnMainCity : public ::google::protobuf::Message {
 public:
  stOnlineUserOnMainCity();
  virtual ~stOnlineUserOnMainCity();

  stOnlineUserOnMainCity(const stOnlineUserOnMainCity& from);

  inline stOnlineUserOnMainCity& operator=(const stOnlineUserOnMainCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOnlineUserOnMainCity& default_instance();

  void Swap(stOnlineUserOnMainCity* other);

  // implements Message ----------------------------------------------

  stOnlineUserOnMainCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOnlineUserOnMainCity& from);
  void MergeFrom(const stOnlineUserOnMainCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOnlineUserOnMainCity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOnlineUserOnMainCity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOnlineUserOnMainCity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOnlineUserOnMainCity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOnlineUserOnMainCity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOnlineUserOnMainCity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOnlineUserOnMainCity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOnlineUserOnMainCity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOnlineUserOnMainCity_ProtoModID_Parse(name, value);
  }

  typedef stOnlineUserOnMainCity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOnlineUserOnMainCity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOnlineUserOnMainCity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOnlineUserOnMainCity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOnlineUserOnMainCity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOnlineUserOnMainCity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOnlineUserOnMainCity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOnlineUserOnMainCity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Map.stPlayerData userList = 1;
  inline int userlist_size() const;
  inline void clear_userlist();
  static const int kUserListFieldNumber = 1;
  inline const ::Map::stPlayerData& userlist(int index) const;
  inline ::Map::stPlayerData* mutable_userlist(int index);
  inline ::Map::stPlayerData* add_userlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData >&
      userlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData >*
      mutable_userlist();

  // @@protoc_insertion_point(class_scope:Map.stOnlineUserOnMainCity)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData > userlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stOnlineUserOnMainCity* default_instance_;
};
// -------------------------------------------------------------------

class stChangeHeroGroup : public ::google::protobuf::Message {
 public:
  stChangeHeroGroup();
  virtual ~stChangeHeroGroup();

  stChangeHeroGroup(const stChangeHeroGroup& from);

  inline stChangeHeroGroup& operator=(const stChangeHeroGroup& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChangeHeroGroup& default_instance();

  void Swap(stChangeHeroGroup* other);

  // implements Message ----------------------------------------------

  stChangeHeroGroup* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChangeHeroGroup& from);
  void MergeFrom(const stChangeHeroGroup& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChangeHeroGroup_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChangeHeroGroup_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChangeHeroGroup_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChangeHeroGroup_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChangeHeroGroup_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChangeHeroGroup_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChangeHeroGroup_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChangeHeroGroup_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChangeHeroGroup_ProtoModID_Parse(name, value);
  }

  typedef stChangeHeroGroup_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChangeHeroGroup_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChangeHeroGroup_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChangeHeroGroup_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChangeHeroGroup_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChangeHeroGroup_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChangeHeroGroup_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChangeHeroGroup_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChangeHeroGroup_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 groupID = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 1;
  inline ::google::protobuf::uint32 groupid() const;
  inline void set_groupid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stChangeHeroGroup)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stChangeHeroGroup* default_instance_;
};
// -------------------------------------------------------------------

class stChangeHeroGroupError : public ::google::protobuf::Message {
 public:
  stChangeHeroGroupError();
  virtual ~stChangeHeroGroupError();

  stChangeHeroGroupError(const stChangeHeroGroupError& from);

  inline stChangeHeroGroupError& operator=(const stChangeHeroGroupError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChangeHeroGroupError& default_instance();

  void Swap(stChangeHeroGroupError* other);

  // implements Message ----------------------------------------------

  stChangeHeroGroupError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChangeHeroGroupError& from);
  void MergeFrom(const stChangeHeroGroupError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChangeHeroGroupError_eResult eResult;
  static const eResult eCHG_HERO_COLD_DOWN = stChangeHeroGroupError_eResult_eCHG_HERO_COLD_DOWN;
  static const eResult eCUR_GROUP_HAS_GOOUT = stChangeHeroGroupError_eResult_eCUR_GROUP_HAS_GOOUT;
  static inline bool eResult_IsValid(int value) {
    return stChangeHeroGroupError_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stChangeHeroGroupError_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stChangeHeroGroupError_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stChangeHeroGroupError_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stChangeHeroGroupError_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stChangeHeroGroupError_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stChangeHeroGroupError_eResult_Parse(name, value);
  }

  typedef stChangeHeroGroupError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChangeHeroGroupError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChangeHeroGroupError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChangeHeroGroupError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChangeHeroGroupError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChangeHeroGroupError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChangeHeroGroupError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChangeHeroGroupError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChangeHeroGroupError_ProtoModID_Parse(name, value);
  }

  typedef stChangeHeroGroupError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChangeHeroGroupError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChangeHeroGroupError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChangeHeroGroupError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChangeHeroGroupError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChangeHeroGroupError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChangeHeroGroupError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChangeHeroGroupError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChangeHeroGroupError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Map.stChangeHeroGroupError.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Map::stChangeHeroGroupError_eResult result() const;
  inline void set_result(::Map::stChangeHeroGroupError_eResult value);

  // @@protoc_insertion_point(class_scope:Map.stChangeHeroGroupError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stChangeHeroGroupError* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyObjMP : public ::google::protobuf::Message {
 public:
  stNotifyObjMP();
  virtual ~stNotifyObjMP();

  stNotifyObjMP(const stNotifyObjMP& from);

  inline stNotifyObjMP& operator=(const stNotifyObjMP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyObjMP& default_instance();

  void Swap(stNotifyObjMP* other);

  // implements Message ----------------------------------------------

  stNotifyObjMP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyObjMP& from);
  void MergeFrom(const stNotifyObjMP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyObjMP_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyObjMP_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyObjMP_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyObjMP_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyObjMP_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyObjMP_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyObjMP_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyObjMP_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyObjMP_ProtoModID_Parse(name, value);
  }

  typedef stNotifyObjMP_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyObjMP_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyObjMP_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyObjMP_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyObjMP_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyObjMP_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyObjMP_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyObjMP_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyObjMP_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 moType = 1;
  inline bool has_motype() const;
  inline void clear_motype();
  static const int kMoTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 motype() const;
  inline void set_motype(::google::protobuf::uint32 value);

  // optional uint32 moID = 2;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyObjMP)
 private:
  inline void set_has_motype();
  inline void clear_has_motype();
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 motype_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyObjMP* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyObjBati : public ::google::protobuf::Message {
 public:
  stNotifyObjBati();
  virtual ~stNotifyObjBati();

  stNotifyObjBati(const stNotifyObjBati& from);

  inline stNotifyObjBati& operator=(const stNotifyObjBati& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyObjBati& default_instance();

  void Swap(stNotifyObjBati* other);

  // implements Message ----------------------------------------------

  stNotifyObjBati* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyObjBati& from);
  void MergeFrom(const stNotifyObjBati& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyObjBati_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyObjBati_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyObjBati_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyObjBati_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyObjBati_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyObjBati_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyObjBati_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyObjBati_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyObjBati_ProtoModID_Parse(name, value);
  }

  typedef stNotifyObjBati_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyObjBati_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyObjBati_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyObjBati_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyObjBati_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyObjBati_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyObjBati_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyObjBati_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyObjBati_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 moType = 1;
  inline bool has_motype() const;
  inline void clear_motype();
  static const int kMoTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 motype() const;
  inline void set_motype(::google::protobuf::uint32 value);

  // optional uint32 moID = 2;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyObjBati)
 private:
  inline void set_has_motype();
  inline void clear_has_motype();
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 motype_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyObjBati* default_instance_;
};
// -------------------------------------------------------------------

class stAddBufferState2Me : public ::google::protobuf::Message {
 public:
  stAddBufferState2Me();
  virtual ~stAddBufferState2Me();

  stAddBufferState2Me(const stAddBufferState2Me& from);

  inline stAddBufferState2Me& operator=(const stAddBufferState2Me& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddBufferState2Me& default_instance();

  void Swap(stAddBufferState2Me* other);

  // implements Message ----------------------------------------------

  stAddBufferState2Me* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddBufferState2Me& from);
  void MergeFrom(const stAddBufferState2Me& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddBufferState2Me_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddBufferState2Me_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddBufferState2Me_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddBufferState2Me_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddBufferState2Me_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddBufferState2Me_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddBufferState2Me_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddBufferState2Me_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddBufferState2Me_ProtoModID_Parse(name, value);
  }

  typedef stAddBufferState2Me_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddBufferState2Me_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddBufferState2Me_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddBufferState2Me_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddBufferState2Me_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddBufferState2Me_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddBufferState2Me_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddBufferState2Me_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddBufferState2Me_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 attType = 1;
  inline bool has_atttype() const;
  inline void clear_atttype();
  static const int kAttTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 atttype() const;
  inline void set_atttype(::google::protobuf::uint32 value);

  // optional uint32 attModID = 2;
  inline bool has_attmodid() const;
  inline void clear_attmodid();
  static const int kAttModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 attmodid() const;
  inline void set_attmodid(::google::protobuf::uint32 value);

  // optional uint32 stateID = 3;
  inline bool has_stateid() const;
  inline void clear_stateid();
  static const int kStateIDFieldNumber = 3;
  inline ::google::protobuf::uint32 stateid() const;
  inline void set_stateid(::google::protobuf::uint32 value);

  // optional uint32 defType = 4;
  inline bool has_deftype() const;
  inline void clear_deftype();
  static const int kDefTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 deftype() const;
  inline void set_deftype(::google::protobuf::uint32 value);

  // optional uint32 defModID = 5;
  inline bool has_defmodid() const;
  inline void clear_defmodid();
  static const int kDefModIDFieldNumber = 5;
  inline ::google::protobuf::uint32 defmodid() const;
  inline void set_defmodid(::google::protobuf::uint32 value);

  // optional int32 extraVal = 6;
  inline bool has_extraval() const;
  inline void clear_extraval();
  static const int kExtraValFieldNumber = 6;
  inline ::google::protobuf::int32 extraval() const;
  inline void set_extraval(::google::protobuf::int32 value);

  // optional uint32 buffID = 7;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 7;
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stAddBufferState2Me)
 private:
  inline void set_has_atttype();
  inline void clear_has_atttype();
  inline void set_has_attmodid();
  inline void clear_has_attmodid();
  inline void set_has_stateid();
  inline void clear_has_stateid();
  inline void set_has_deftype();
  inline void clear_has_deftype();
  inline void set_has_defmodid();
  inline void clear_has_defmodid();
  inline void set_has_extraval();
  inline void clear_has_extraval();
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 atttype_;
  ::google::protobuf::uint32 attmodid_;
  ::google::protobuf::uint32 stateid_;
  ::google::protobuf::uint32 deftype_;
  ::google::protobuf::uint32 defmodid_;
  ::google::protobuf::int32 extraval_;
  ::google::protobuf::uint32 buffid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stAddBufferState2Me* default_instance_;
};
// -------------------------------------------------------------------

class stDelBufferState : public ::google::protobuf::Message {
 public:
  stDelBufferState();
  virtual ~stDelBufferState();

  stDelBufferState(const stDelBufferState& from);

  inline stDelBufferState& operator=(const stDelBufferState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDelBufferState& default_instance();

  void Swap(stDelBufferState* other);

  // implements Message ----------------------------------------------

  stDelBufferState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDelBufferState& from);
  void MergeFrom(const stDelBufferState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDelBufferState_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDelBufferState_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDelBufferState_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDelBufferState_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDelBufferState_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDelBufferState_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDelBufferState_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDelBufferState_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDelBufferState_ProtoModID_Parse(name, value);
  }

  typedef stDelBufferState_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDelBufferState_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDelBufferState_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDelBufferState_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDelBufferState_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDelBufferState_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDelBufferState_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDelBufferState_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDelBufferState_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 stateID = 1;
  inline bool has_stateid() const;
  inline void clear_stateid();
  static const int kStateIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stateid() const;
  inline void set_stateid(::google::protobuf::uint32 value);

  // optional uint32 moType = 2;
  inline bool has_motype() const;
  inline void clear_motype();
  static const int kMoTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 motype() const;
  inline void set_motype(::google::protobuf::uint32 value);

  // optional uint32 moID = 3;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 3;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // optional uint32 bufferID = 4;
  inline bool has_bufferid() const;
  inline void clear_bufferid();
  static const int kBufferIDFieldNumber = 4;
  inline ::google::protobuf::uint32 bufferid() const;
  inline void set_bufferid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stDelBufferState)
 private:
  inline void set_has_stateid();
  inline void clear_has_stateid();
  inline void set_has_motype();
  inline void clear_has_motype();
  inline void set_has_moid();
  inline void clear_has_moid();
  inline void set_has_bufferid();
  inline void clear_has_bufferid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stateid_;
  ::google::protobuf::uint32 motype_;
  ::google::protobuf::uint32 moid_;
  ::google::protobuf::uint32 bufferid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stDelBufferState* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyExecAI : public ::google::protobuf::Message {
 public:
  stNotifyExecAI();
  virtual ~stNotifyExecAI();

  stNotifyExecAI(const stNotifyExecAI& from);

  inline stNotifyExecAI& operator=(const stNotifyExecAI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyExecAI& default_instance();

  void Swap(stNotifyExecAI* other);

  // implements Message ----------------------------------------------

  stNotifyExecAI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyExecAI& from);
  void MergeFrom(const stNotifyExecAI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyExecAI_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyExecAI_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyExecAI_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyExecAI_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyExecAI_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyExecAI_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyExecAI_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyExecAI_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyExecAI_ProtoModID_Parse(name, value);
  }

  typedef stNotifyExecAI_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyExecAI_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyExecAI_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyExecAI_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyExecAI_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyExecAI_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyExecAI_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyExecAI_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyExecAI_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyExecAI)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyExecAI* default_instance_;
};
// -------------------------------------------------------------------

class stAlertBossAppear : public ::google::protobuf::Message {
 public:
  stAlertBossAppear();
  virtual ~stAlertBossAppear();

  stAlertBossAppear(const stAlertBossAppear& from);

  inline stAlertBossAppear& operator=(const stAlertBossAppear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAlertBossAppear& default_instance();

  void Swap(stAlertBossAppear* other);

  // implements Message ----------------------------------------------

  stAlertBossAppear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAlertBossAppear& from);
  void MergeFrom(const stAlertBossAppear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAlertBossAppear_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAlertBossAppear_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAlertBossAppear_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAlertBossAppear_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAlertBossAppear_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAlertBossAppear_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAlertBossAppear_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAlertBossAppear_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAlertBossAppear_ProtoModID_Parse(name, value);
  }

  typedef stAlertBossAppear_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAlertBossAppear_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAlertBossAppear_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAlertBossAppear_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAlertBossAppear_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAlertBossAppear_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAlertBossAppear_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAlertBossAppear_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAlertBossAppear_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 delay = 1;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 1;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stAlertBossAppear)
 private:
  inline void set_has_delay();
  inline void clear_has_delay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 delay_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stAlertBossAppear* default_instance_;
};
// -------------------------------------------------------------------

class stReqChangeMainCity : public ::google::protobuf::Message {
 public:
  stReqChangeMainCity();
  virtual ~stReqChangeMainCity();

  stReqChangeMainCity(const stReqChangeMainCity& from);

  inline stReqChangeMainCity& operator=(const stReqChangeMainCity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChangeMainCity& default_instance();

  void Swap(stReqChangeMainCity* other);

  // implements Message ----------------------------------------------

  stReqChangeMainCity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChangeMainCity& from);
  void MergeFrom(const stReqChangeMainCity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChangeMainCity_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChangeMainCity_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChangeMainCity_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChangeMainCity_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChangeMainCity_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChangeMainCity_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChangeMainCity_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChangeMainCity_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChangeMainCity_ProtoModID_Parse(name, value);
  }

  typedef stReqChangeMainCity_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChangeMainCity_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChangeMainCity_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChangeMainCity_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChangeMainCity_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChangeMainCity_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChangeMainCity_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChangeMainCity_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChangeMainCity_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stReqChangeMainCity)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stReqChangeMainCity* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyAddFireWall : public ::google::protobuf::Message {
 public:
  stNotifyAddFireWall();
  virtual ~stNotifyAddFireWall();

  stNotifyAddFireWall(const stNotifyAddFireWall& from);

  inline stNotifyAddFireWall& operator=(const stNotifyAddFireWall& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyAddFireWall& default_instance();

  void Swap(stNotifyAddFireWall* other);

  // implements Message ----------------------------------------------

  stNotifyAddFireWall* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyAddFireWall& from);
  void MergeFrom(const stNotifyAddFireWall& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyAddFireWall_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyAddFireWall_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyAddFireWall_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyAddFireWall_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyAddFireWall_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyAddFireWall_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyAddFireWall_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyAddFireWall_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyAddFireWall_ProtoModID_Parse(name, value);
  }

  typedef stNotifyAddFireWall_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyAddFireWall_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyAddFireWall_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyAddFireWall_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyAddFireWall_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyAddFireWall_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyAddFireWall_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyAddFireWall_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyAddFireWall_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // optional uint32 lastTime = 4;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLastTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 lasttime() const;
  inline void set_lasttime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyAddFireWall)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 lasttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyAddFireWall* default_instance_;
};
// -------------------------------------------------------------------

class stBeginThunderDamage : public ::google::protobuf::Message {
 public:
  stBeginThunderDamage();
  virtual ~stBeginThunderDamage();

  stBeginThunderDamage(const stBeginThunderDamage& from);

  inline stBeginThunderDamage& operator=(const stBeginThunderDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBeginThunderDamage& default_instance();

  void Swap(stBeginThunderDamage* other);

  // implements Message ----------------------------------------------

  stBeginThunderDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBeginThunderDamage& from);
  void MergeFrom(const stBeginThunderDamage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBeginThunderDamage_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBeginThunderDamage_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBeginThunderDamage_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBeginThunderDamage_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBeginThunderDamage_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBeginThunderDamage_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBeginThunderDamage_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBeginThunderDamage_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBeginThunderDamage_ProtoModID_Parse(name, value);
  }

  typedef stBeginThunderDamage_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBeginThunderDamage_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBeginThunderDamage_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBeginThunderDamage_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBeginThunderDamage_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBeginThunderDamage_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBeginThunderDamage_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBeginThunderDamage_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBeginThunderDamage_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 attModType = 1;
  inline bool has_attmodtype() const;
  inline void clear_attmodtype();
  static const int kAttModTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 attmodtype() const;
  inline void set_attmodtype(::google::protobuf::uint32 value);

  // optional uint32 attModID = 2;
  inline bool has_attmodid() const;
  inline void clear_attmodid();
  static const int kAttModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 attmodid() const;
  inline void set_attmodid(::google::protobuf::uint32 value);

  // optional uint32 defType = 3;
  inline bool has_deftype() const;
  inline void clear_deftype();
  static const int kDefTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 deftype() const;
  inline void set_deftype(::google::protobuf::uint32 value);

  // optional uint32 defModID = 4;
  inline bool has_defmodid() const;
  inline void clear_defmodid();
  static const int kDefModIDFieldNumber = 4;
  inline ::google::protobuf::uint32 defmodid() const;
  inline void set_defmodid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stBeginThunderDamage)
 private:
  inline void set_has_attmodtype();
  inline void clear_has_attmodtype();
  inline void set_has_attmodid();
  inline void clear_has_attmodid();
  inline void set_has_deftype();
  inline void clear_has_deftype();
  inline void set_has_defmodid();
  inline void clear_has_defmodid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 attmodtype_;
  ::google::protobuf::uint32 attmodid_;
  ::google::protobuf::uint32 deftype_;
  ::google::protobuf::uint32 defmodid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stBeginThunderDamage* default_instance_;
};
// -------------------------------------------------------------------

class stCalcThunderDamage : public ::google::protobuf::Message {
 public:
  stCalcThunderDamage();
  virtual ~stCalcThunderDamage();

  stCalcThunderDamage(const stCalcThunderDamage& from);

  inline stCalcThunderDamage& operator=(const stCalcThunderDamage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCalcThunderDamage& default_instance();

  void Swap(stCalcThunderDamage* other);

  // implements Message ----------------------------------------------

  stCalcThunderDamage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCalcThunderDamage& from);
  void MergeFrom(const stCalcThunderDamage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCalcThunderDamage_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCalcThunderDamage_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCalcThunderDamage_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCalcThunderDamage_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCalcThunderDamage_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCalcThunderDamage_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCalcThunderDamage_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCalcThunderDamage_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCalcThunderDamage_ProtoModID_Parse(name, value);
  }

  typedef stCalcThunderDamage_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCalcThunderDamage_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCalcThunderDamage_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCalcThunderDamage_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCalcThunderDamage_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCalcThunderDamage_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCalcThunderDamage_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCalcThunderDamage_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCalcThunderDamage_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 attModType = 1;
  inline bool has_attmodtype() const;
  inline void clear_attmodtype();
  static const int kAttModTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 attmodtype() const;
  inline void set_attmodtype(::google::protobuf::uint32 value);

  // optional uint32 attModID = 2;
  inline bool has_attmodid() const;
  inline void clear_attmodid();
  static const int kAttModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 attmodid() const;
  inline void set_attmodid(::google::protobuf::uint32 value);

  // optional uint32 defType = 3;
  inline bool has_deftype() const;
  inline void clear_deftype();
  static const int kDefTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 deftype() const;
  inline void set_deftype(::google::protobuf::uint32 value);

  // optional uint32 defModID = 4;
  inline bool has_defmodid() const;
  inline void clear_defmodid();
  static const int kDefModIDFieldNumber = 4;
  inline ::google::protobuf::uint32 defmodid() const;
  inline void set_defmodid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stCalcThunderDamage)
 private:
  inline void set_has_attmodtype();
  inline void clear_has_attmodtype();
  inline void set_has_attmodid();
  inline void clear_has_attmodid();
  inline void set_has_deftype();
  inline void clear_has_deftype();
  inline void set_has_defmodid();
  inline void clear_has_defmodid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 attmodtype_;
  ::google::protobuf::uint32 attmodid_;
  ::google::protobuf::uint32 deftype_;
  ::google::protobuf::uint32 defmodid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stCalcThunderDamage* default_instance_;
};
// -------------------------------------------------------------------

class stDirectDamge : public ::google::protobuf::Message {
 public:
  stDirectDamge();
  virtual ~stDirectDamge();

  stDirectDamge(const stDirectDamge& from);

  inline stDirectDamge& operator=(const stDirectDamge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDirectDamge& default_instance();

  void Swap(stDirectDamge* other);

  // implements Message ----------------------------------------------

  stDirectDamge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDirectDamge& from);
  void MergeFrom(const stDirectDamge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDirectDamge_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDirectDamge_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDirectDamge_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDirectDamge_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDirectDamge_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDirectDamge_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDirectDamge_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDirectDamge_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDirectDamge_ProtoModID_Parse(name, value);
  }

  typedef stDirectDamge_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDirectDamge_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDirectDamge_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDirectDamge_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDirectDamge_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDirectDamge_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDirectDamge_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDirectDamge_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDirectDamge_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 modType = 1;
  inline bool has_modtype() const;
  inline void clear_modtype();
  static const int kModTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 modtype() const;
  inline void set_modtype(::google::protobuf::uint32 value);

  // optional uint32 modID = 2;
  inline bool has_modid() const;
  inline void clear_modid();
  static const int kModIDFieldNumber = 2;
  inline ::google::protobuf::uint32 modid() const;
  inline void set_modid(::google::protobuf::uint32 value);

  // optional uint32 damage = 3;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 3;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 attType = 4;
  inline bool has_atttype() const;
  inline void clear_atttype();
  static const int kAttTypeFieldNumber = 4;
  inline ::google::protobuf::uint32 atttype() const;
  inline void set_atttype(::google::protobuf::uint32 value);

  // optional uint32 attModID = 5;
  inline bool has_attmodid() const;
  inline void clear_attmodid();
  static const int kAttModIDFieldNumber = 5;
  inline ::google::protobuf::uint32 attmodid() const;
  inline void set_attmodid(::google::protobuf::uint32 value);

  // optional uint32 result = 6;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 6;
  inline ::google::protobuf::uint32 result() const;
  inline void set_result(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stDirectDamge)
 private:
  inline void set_has_modtype();
  inline void clear_has_modtype();
  inline void set_has_modid();
  inline void clear_has_modid();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_atttype();
  inline void clear_has_atttype();
  inline void set_has_attmodid();
  inline void clear_has_attmodid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 modtype_;
  ::google::protobuf::uint32 modid_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 atttype_;
  ::google::protobuf::uint32 attmodid_;
  ::google::protobuf::uint32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stDirectDamge* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyObjDie : public ::google::protobuf::Message {
 public:
  stNotifyObjDie();
  virtual ~stNotifyObjDie();

  stNotifyObjDie(const stNotifyObjDie& from);

  inline stNotifyObjDie& operator=(const stNotifyObjDie& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyObjDie& default_instance();

  void Swap(stNotifyObjDie* other);

  // implements Message ----------------------------------------------

  stNotifyObjDie* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyObjDie& from);
  void MergeFrom(const stNotifyObjDie& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyObjDie_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyObjDie_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyObjDie_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyObjDie_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyObjDie_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyObjDie_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyObjDie_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyObjDie_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyObjDie_ProtoModID_Parse(name, value);
  }

  typedef stNotifyObjDie_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyObjDie_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyObjDie_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyObjDie_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyObjDie_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyObjDie_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyObjDie_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyObjDie_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyObjDie_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 moType = 1;
  inline bool has_motype() const;
  inline void clear_motype();
  static const int kMoTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 motype() const;
  inline void set_motype(::google::protobuf::uint32 value);

  // optional uint32 moID = 2;
  inline bool has_moid() const;
  inline void clear_moid();
  static const int kMoIDFieldNumber = 2;
  inline ::google::protobuf::uint32 moid() const;
  inline void set_moid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyObjDie)
 private:
  inline void set_has_motype();
  inline void clear_has_motype();
  inline void set_has_moid();
  inline void clear_has_moid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 motype_;
  ::google::protobuf::uint32 moid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyObjDie* default_instance_;
};
// -------------------------------------------------------------------

class stBeginBattle : public ::google::protobuf::Message {
 public:
  stBeginBattle();
  virtual ~stBeginBattle();

  stBeginBattle(const stBeginBattle& from);

  inline stBeginBattle& operator=(const stBeginBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBeginBattle& default_instance();

  void Swap(stBeginBattle* other);

  // implements Message ----------------------------------------------

  stBeginBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBeginBattle& from);
  void MergeFrom(const stBeginBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBeginBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBeginBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBeginBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBeginBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBeginBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBeginBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBeginBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBeginBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBeginBattle_ProtoModID_Parse(name, value);
  }

  typedef stBeginBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBeginBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBeginBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBeginBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBeginBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBeginBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBeginBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBeginBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBeginBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 delay = 1;
  inline bool has_delay() const;
  inline void clear_delay();
  static const int kDelayFieldNumber = 1;
  inline ::google::protobuf::uint32 delay() const;
  inline void set_delay(::google::protobuf::uint32 value);

  // optional uint32 remainTime = 2;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stBeginBattle)
 private:
  inline void set_has_delay();
  inline void clear_has_delay();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 delay_;
  ::google::protobuf::uint32 remaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stBeginBattle* default_instance_;
};
// -------------------------------------------------------------------

class stThrowSkillFail : public ::google::protobuf::Message {
 public:
  stThrowSkillFail();
  virtual ~stThrowSkillFail();

  stThrowSkillFail(const stThrowSkillFail& from);

  inline stThrowSkillFail& operator=(const stThrowSkillFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stThrowSkillFail& default_instance();

  void Swap(stThrowSkillFail* other);

  // implements Message ----------------------------------------------

  stThrowSkillFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stThrowSkillFail& from);
  void MergeFrom(const stThrowSkillFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stThrowSkillFail_eReason eReason;
  static const eReason ATTER_NOT_EXIST = stThrowSkillFail_eReason_ATTER_NOT_EXIST;
  static const eReason ATTER_SKILL_NOT_EXIST = stThrowSkillFail_eReason_ATTER_SKILL_NOT_EXIST;
  static const eReason ATTER_MP_NOT_ENOUGH = stThrowSkillFail_eReason_ATTER_MP_NOT_ENOUGH;
  static const eReason ATTER_HAS_SILENCE = stThrowSkillFail_eReason_ATTER_HAS_SILENCE;
  static inline bool eReason_IsValid(int value) {
    return stThrowSkillFail_eReason_IsValid(value);
  }
  static const eReason eReason_MIN =
    stThrowSkillFail_eReason_eReason_MIN;
  static const eReason eReason_MAX =
    stThrowSkillFail_eReason_eReason_MAX;
  static const int eReason_ARRAYSIZE =
    stThrowSkillFail_eReason_eReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eReason_descriptor() {
    return stThrowSkillFail_eReason_descriptor();
  }
  static inline const ::std::string& eReason_Name(eReason value) {
    return stThrowSkillFail_eReason_Name(value);
  }
  static inline bool eReason_Parse(const ::std::string& name,
      eReason* value) {
    return stThrowSkillFail_eReason_Parse(name, value);
  }

  typedef stThrowSkillFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stThrowSkillFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stThrowSkillFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stThrowSkillFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stThrowSkillFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stThrowSkillFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stThrowSkillFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stThrowSkillFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stThrowSkillFail_ProtoModID_Parse(name, value);
  }

  typedef stThrowSkillFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stThrowSkillFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stThrowSkillFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stThrowSkillFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stThrowSkillFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stThrowSkillFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stThrowSkillFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stThrowSkillFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stThrowSkillFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Map.stThrowSkillFail.eReason reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::Map::stThrowSkillFail_eReason reason() const;
  inline void set_reason(::Map::stThrowSkillFail_eReason value);

  // @@protoc_insertion_point(class_scope:Map.stThrowSkillFail)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stThrowSkillFail* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyResAppear : public ::google::protobuf::Message {
 public:
  stNotifyResAppear();
  virtual ~stNotifyResAppear();

  stNotifyResAppear(const stNotifyResAppear& from);

  inline stNotifyResAppear& operator=(const stNotifyResAppear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyResAppear& default_instance();

  void Swap(stNotifyResAppear* other);

  // implements Message ----------------------------------------------

  stNotifyResAppear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyResAppear& from);
  void MergeFrom(const stNotifyResAppear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyResAppear_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyResAppear_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyResAppear_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyResAppear_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyResAppear_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyResAppear_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyResAppear_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyResAppear_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyResAppear_ProtoModID_Parse(name, value);
  }

  typedef stNotifyResAppear_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyResAppear_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyResAppear_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyResAppear_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyResAppear_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyResAppear_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyResAppear_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyResAppear_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyResAppear_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyResAppear)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyResAppear* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyResDisappear : public ::google::protobuf::Message {
 public:
  stNotifyResDisappear();
  virtual ~stNotifyResDisappear();

  stNotifyResDisappear(const stNotifyResDisappear& from);

  inline stNotifyResDisappear& operator=(const stNotifyResDisappear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyResDisappear& default_instance();

  void Swap(stNotifyResDisappear* other);

  // implements Message ----------------------------------------------

  stNotifyResDisappear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyResDisappear& from);
  void MergeFrom(const stNotifyResDisappear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyResDisappear_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyResDisappear_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyResDisappear_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyResDisappear_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyResDisappear_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyResDisappear_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyResDisappear_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyResDisappear_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyResDisappear_ProtoModID_Parse(name, value);
  }

  typedef stNotifyResDisappear_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyResDisappear_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyResDisappear_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyResDisappear_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyResDisappear_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyResDisappear_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyResDisappear_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyResDisappear_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyResDisappear_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyResDisappear)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyResDisappear* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyBuffAppear : public ::google::protobuf::Message {
 public:
  stNotifyBuffAppear();
  virtual ~stNotifyBuffAppear();

  stNotifyBuffAppear(const stNotifyBuffAppear& from);

  inline stNotifyBuffAppear& operator=(const stNotifyBuffAppear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyBuffAppear& default_instance();

  void Swap(stNotifyBuffAppear* other);

  // implements Message ----------------------------------------------

  stNotifyBuffAppear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyBuffAppear& from);
  void MergeFrom(const stNotifyBuffAppear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyBuffAppear_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyBuffAppear_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyBuffAppear_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyBuffAppear_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyBuffAppear_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyBuffAppear_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyBuffAppear_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyBuffAppear_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyBuffAppear_ProtoModID_Parse(name, value);
  }

  typedef stNotifyBuffAppear_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyBuffAppear_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyBuffAppear_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyBuffAppear_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyBuffAppear_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyBuffAppear_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyBuffAppear_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyBuffAppear_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyBuffAppear_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // optional uint32 buffID = 5;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 5;
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyBuffAppear)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 buffid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyBuffAppear* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyBuffDisappear : public ::google::protobuf::Message {
 public:
  stNotifyBuffDisappear();
  virtual ~stNotifyBuffDisappear();

  stNotifyBuffDisappear(const stNotifyBuffDisappear& from);

  inline stNotifyBuffDisappear& operator=(const stNotifyBuffDisappear& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyBuffDisappear& default_instance();

  void Swap(stNotifyBuffDisappear* other);

  // implements Message ----------------------------------------------

  stNotifyBuffDisappear* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyBuffDisappear& from);
  void MergeFrom(const stNotifyBuffDisappear& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyBuffDisappear_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyBuffDisappear_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyBuffDisappear_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyBuffDisappear_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyBuffDisappear_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyBuffDisappear_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyBuffDisappear_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyBuffDisappear_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyBuffDisappear_ProtoModID_Parse(name, value);
  }

  typedef stNotifyBuffDisappear_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyBuffDisappear_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyBuffDisappear_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyBuffDisappear_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyBuffDisappear_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyBuffDisappear_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyBuffDisappear_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyBuffDisappear_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyBuffDisappear_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyBuffDisappear)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyBuffDisappear* default_instance_;
};
// -------------------------------------------------------------------

class stOpCopyMapRes : public ::google::protobuf::Message {
 public:
  stOpCopyMapRes();
  virtual ~stOpCopyMapRes();

  stOpCopyMapRes(const stOpCopyMapRes& from);

  inline stOpCopyMapRes& operator=(const stOpCopyMapRes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpCopyMapRes& default_instance();

  void Swap(stOpCopyMapRes* other);

  // implements Message ----------------------------------------------

  stOpCopyMapRes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpCopyMapRes& from);
  void MergeFrom(const stOpCopyMapRes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpCopyMapRes_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpCopyMapRes_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpCopyMapRes_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpCopyMapRes_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpCopyMapRes_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpCopyMapRes_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpCopyMapRes_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpCopyMapRes_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpCopyMapRes_ProtoModID_Parse(name, value);
  }

  typedef stOpCopyMapRes_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpCopyMapRes_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpCopyMapRes_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpCopyMapRes_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpCopyMapRes_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpCopyMapRes_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpCopyMapRes_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpCopyMapRes_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpCopyMapRes_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool collect = 1;
  inline bool has_collect() const;
  inline void clear_collect();
  static const int kCollectFieldNumber = 1;
  inline bool collect() const;
  inline void set_collect(bool value);

  // optional uint32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stOpCopyMapRes)
 private:
  inline void set_has_collect();
  inline void clear_has_collect();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool collect_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stOpCopyMapRes* default_instance_;
};
// -------------------------------------------------------------------

class stPlayerGotBuff : public ::google::protobuf::Message {
 public:
  stPlayerGotBuff();
  virtual ~stPlayerGotBuff();

  stPlayerGotBuff(const stPlayerGotBuff& from);

  inline stPlayerGotBuff& operator=(const stPlayerGotBuff& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPlayerGotBuff& default_instance();

  void Swap(stPlayerGotBuff* other);

  // implements Message ----------------------------------------------

  stPlayerGotBuff* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPlayerGotBuff& from);
  void MergeFrom(const stPlayerGotBuff& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPlayerGotBuff_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPlayerGotBuff_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPlayerGotBuff_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPlayerGotBuff_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPlayerGotBuff_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPlayerGotBuff_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPlayerGotBuff_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPlayerGotBuff_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPlayerGotBuff_ProtoModID_Parse(name, value);
  }

  typedef stPlayerGotBuff_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPlayerGotBuff_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPlayerGotBuff_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPlayerGotBuff_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPlayerGotBuff_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPlayerGotBuff_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPlayerGotBuff_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPlayerGotBuff_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPlayerGotBuff_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 buffID = 1;
  inline bool has_buffid() const;
  inline void clear_buffid();
  static const int kBuffIDFieldNumber = 1;
  inline ::google::protobuf::uint32 buffid() const;
  inline void set_buffid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stPlayerGotBuff)
 private:
  inline void set_has_buffid();
  inline void clear_has_buffid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 buffid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stPlayerGotBuff* default_instance_;
};
// -------------------------------------------------------------------

class stPlayerCollectSuccess : public ::google::protobuf::Message {
 public:
  stPlayerCollectSuccess();
  virtual ~stPlayerCollectSuccess();

  stPlayerCollectSuccess(const stPlayerCollectSuccess& from);

  inline stPlayerCollectSuccess& operator=(const stPlayerCollectSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPlayerCollectSuccess& default_instance();

  void Swap(stPlayerCollectSuccess* other);

  // implements Message ----------------------------------------------

  stPlayerCollectSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPlayerCollectSuccess& from);
  void MergeFrom(const stPlayerCollectSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPlayerCollectSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPlayerCollectSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPlayerCollectSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPlayerCollectSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPlayerCollectSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPlayerCollectSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPlayerCollectSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPlayerCollectSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPlayerCollectSuccess_ProtoModID_Parse(name, value);
  }

  typedef stPlayerCollectSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPlayerCollectSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPlayerCollectSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPlayerCollectSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPlayerCollectSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPlayerCollectSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPlayerCollectSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPlayerCollectSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPlayerCollectSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 score = 1;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 1;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stPlayerCollectSuccess)
 private:
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stPlayerCollectSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stSynCampScore : public ::google::protobuf::Message {
 public:
  stSynCampScore();
  virtual ~stSynCampScore();

  stSynCampScore(const stSynCampScore& from);

  inline stSynCampScore& operator=(const stSynCampScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynCampScore& default_instance();

  void Swap(stSynCampScore* other);

  // implements Message ----------------------------------------------

  stSynCampScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynCampScore& from);
  void MergeFrom(const stSynCampScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynCampScore_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynCampScore_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynCampScore_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynCampScore_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynCampScore_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynCampScore_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynCampScore_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynCampScore_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynCampScore_ProtoModID_Parse(name, value);
  }

  typedef stSynCampScore_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynCampScore_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynCampScore_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynCampScore_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynCampScore_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynCampScore_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynCampScore_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynCampScore_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynCampScore_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 campID = 1;
  inline bool has_campid() const;
  inline void clear_campid();
  static const int kCampIDFieldNumber = 1;
  inline ::google::protobuf::uint32 campid() const;
  inline void set_campid(::google::protobuf::uint32 value);

  // optional uint32 score = 2;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 2;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stSynCampScore)
 private:
  inline void set_has_campid();
  inline void clear_has_campid();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 campid_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stSynCampScore* default_instance_;
};
// -------------------------------------------------------------------

class stUserRelive : public ::google::protobuf::Message {
 public:
  stUserRelive();
  virtual ~stUserRelive();

  stUserRelive(const stUserRelive& from);

  inline stUserRelive& operator=(const stUserRelive& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserRelive& default_instance();

  void Swap(stUserRelive* other);

  // implements Message ----------------------------------------------

  stUserRelive* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserRelive& from);
  void MergeFrom(const stUserRelive& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserRelive_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserRelive_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserRelive_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserRelive_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserRelive_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserRelive_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserRelive_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserRelive_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserRelive_ProtoModID_Parse(name, value);
  }

  typedef stUserRelive_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserRelive_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserRelive_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserRelive_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserRelive_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserRelive_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserRelive_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserRelive_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserRelive_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint32 x = 2;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 2;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 3;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 3;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 4;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 4;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stUserRelive)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stUserRelive* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyUserPointToPos : public ::google::protobuf::Message {
 public:
  stNotifyUserPointToPos();
  virtual ~stNotifyUserPointToPos();

  stNotifyUserPointToPos(const stNotifyUserPointToPos& from);

  inline stNotifyUserPointToPos& operator=(const stNotifyUserPointToPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyUserPointToPos& default_instance();

  void Swap(stNotifyUserPointToPos* other);

  // implements Message ----------------------------------------------

  stNotifyUserPointToPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyUserPointToPos& from);
  void MergeFrom(const stNotifyUserPointToPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyUserPointToPos_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyUserPointToPos_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyUserPointToPos_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyUserPointToPos_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyUserPointToPos_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyUserPointToPos_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyUserPointToPos_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyUserPointToPos_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyUserPointToPos_ProtoModID_Parse(name, value);
  }

  typedef stNotifyUserPointToPos_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyUserPointToPos_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyUserPointToPos_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyUserPointToPos_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyUserPointToPos_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyUserPointToPos_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyUserPointToPos_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyUserPointToPos_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyUserPointToPos_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // optional uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // optional uint32 z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline ::google::protobuf::uint32 z() const;
  inline void set_z(::google::protobuf::uint32 value);

  // optional uint32 lasttime = 4;
  inline bool has_lasttime() const;
  inline void clear_lasttime();
  static const int kLasttimeFieldNumber = 4;
  inline ::google::protobuf::uint32 lasttime() const;
  inline void set_lasttime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Map.stNotifyUserPointToPos)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  inline void set_has_lasttime();
  inline void clear_has_lasttime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  ::google::protobuf::uint32 z_;
  ::google::protobuf::uint32 lasttime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2eproto();
  friend void protobuf_AssignDesc_Map_2eproto();
  friend void protobuf_ShutdownFile_Map_2eproto();

  void InitAsDefaultInstance();
  static stNotifyUserPointToPos* default_instance_;
};
// ===================================================================


// ===================================================================

// stNotifyEnterMapInfo

// optional uint32 mapID = 1;
inline bool stNotifyEnterMapInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyEnterMapInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyEnterMapInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyEnterMapInfo::clear_mapid() {
  mapid_ = 0u;
  clear_has_mapid();
}
inline ::google::protobuf::uint32 stNotifyEnterMapInfo::mapid() const {
  return mapid_;
}
inline void stNotifyEnterMapInfo::set_mapid(::google::protobuf::uint32 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// stClientLoadResFinish

// optional uint32 levelID = 1;
inline bool stClientLoadResFinish::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stClientLoadResFinish::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stClientLoadResFinish::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stClientLoadResFinish::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stClientLoadResFinish::levelid() const {
  return levelid_;
}
inline void stClientLoadResFinish::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// ReqEnterLevelMap

// optional uint32 levelID = 1;
inline bool ReqEnterLevelMap::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqEnterLevelMap::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqEnterLevelMap::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqEnterLevelMap::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 ReqEnterLevelMap::levelid() const {
  return levelid_;
}
inline void ReqEnterLevelMap::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stSynDropInfo

// optional uint32 itemID = 1;
inline bool stSynDropInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynDropInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynDropInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynDropInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSynDropInfo::itemid() const {
  return itemid_;
}
inline void stSynDropInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stSynDropInfo::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynDropInfo::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynDropInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynDropInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynDropInfo::num() const {
  return num_;
}
inline void stSynDropInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSynMonsterInfo

// optional uint32 monsterID = 1;
inline bool stSynMonsterInfo::has_monsterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMonsterInfo::set_has_monsterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMonsterInfo::clear_has_monsterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMonsterInfo::clear_monsterid() {
  monsterid_ = 0u;
  clear_has_monsterid();
}
inline ::google::protobuf::uint32 stSynMonsterInfo::monsterid() const {
  return monsterid_;
}
inline void stSynMonsterInfo::set_monsterid(::google::protobuf::uint32 value) {
  set_has_monsterid();
  monsterid_ = value;
}

// optional uint32 monsterLv = 2;
inline bool stSynMonsterInfo::has_monsterlv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMonsterInfo::set_has_monsterlv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMonsterInfo::clear_has_monsterlv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMonsterInfo::clear_monsterlv() {
  monsterlv_ = 0u;
  clear_has_monsterlv();
}
inline ::google::protobuf::uint32 stSynMonsterInfo::monsterlv() const {
  return monsterlv_;
}
inline void stSynMonsterInfo::set_monsterlv(::google::protobuf::uint32 value) {
  set_has_monsterlv();
  monsterlv_ = value;
}

// -------------------------------------------------------------------

// NotifyEnterLevelMap

// optional uint32 levelID = 1;
inline bool NotifyEnterLevelMap::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyEnterLevelMap::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyEnterLevelMap::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyEnterLevelMap::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 NotifyEnterLevelMap::levelid() const {
  return levelid_;
}
inline void NotifyEnterLevelMap::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// repeated .Map.stSynDropInfo dropInfo = 2;
inline int NotifyEnterLevelMap::dropinfo_size() const {
  return dropinfo_.size();
}
inline void NotifyEnterLevelMap::clear_dropinfo() {
  dropinfo_.Clear();
}
inline const ::Map::stSynDropInfo& NotifyEnterLevelMap::dropinfo(int index) const {
  return dropinfo_.Get(index);
}
inline ::Map::stSynDropInfo* NotifyEnterLevelMap::mutable_dropinfo(int index) {
  return dropinfo_.Mutable(index);
}
inline ::Map::stSynDropInfo* NotifyEnterLevelMap::add_dropinfo() {
  return dropinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::stSynDropInfo >&
NotifyEnterLevelMap::dropinfo() const {
  return dropinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::stSynDropInfo >*
NotifyEnterLevelMap::mutable_dropinfo() {
  return &dropinfo_;
}

// repeated .Map.stSynMonsterInfo monsterInfo = 3;
inline int NotifyEnterLevelMap::monsterinfo_size() const {
  return monsterinfo_.size();
}
inline void NotifyEnterLevelMap::clear_monsterinfo() {
  monsterinfo_.Clear();
}
inline const ::Map::stSynMonsterInfo& NotifyEnterLevelMap::monsterinfo(int index) const {
  return monsterinfo_.Get(index);
}
inline ::Map::stSynMonsterInfo* NotifyEnterLevelMap::mutable_monsterinfo(int index) {
  return monsterinfo_.Mutable(index);
}
inline ::Map::stSynMonsterInfo* NotifyEnterLevelMap::add_monsterinfo() {
  return monsterinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::stSynMonsterInfo >&
NotifyEnterLevelMap::monsterinfo() const {
  return monsterinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::stSynMonsterInfo >*
NotifyEnterLevelMap::mutable_monsterinfo() {
  return &monsterinfo_;
}

// optional .Map.stSynMonsterInfo bossInfo = 4;
inline bool NotifyEnterLevelMap::has_bossinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyEnterLevelMap::set_has_bossinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyEnterLevelMap::clear_has_bossinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyEnterLevelMap::clear_bossinfo() {
  if (bossinfo_ != NULL) bossinfo_->::Map::stSynMonsterInfo::Clear();
  clear_has_bossinfo();
}
inline const ::Map::stSynMonsterInfo& NotifyEnterLevelMap::bossinfo() const {
  return bossinfo_ != NULL ? *bossinfo_ : *default_instance_->bossinfo_;
}
inline ::Map::stSynMonsterInfo* NotifyEnterLevelMap::mutable_bossinfo() {
  set_has_bossinfo();
  if (bossinfo_ == NULL) bossinfo_ = new ::Map::stSynMonsterInfo;
  return bossinfo_;
}
inline ::Map::stSynMonsterInfo* NotifyEnterLevelMap::release_bossinfo() {
  clear_has_bossinfo();
  ::Map::stSynMonsterInfo* temp = bossinfo_;
  bossinfo_ = NULL;
  return temp;
}
inline void NotifyEnterLevelMap::set_allocated_bossinfo(::Map::stSynMonsterInfo* bossinfo) {
  delete bossinfo_;
  bossinfo_ = bossinfo;
  if (bossinfo) {
    set_has_bossinfo();
  } else {
    clear_has_bossinfo();
  }
}

// optional .Map.stSynDropInfo drawInfo = 5;
inline bool NotifyEnterLevelMap::has_drawinfo() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotifyEnterLevelMap::set_has_drawinfo() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotifyEnterLevelMap::clear_has_drawinfo() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotifyEnterLevelMap::clear_drawinfo() {
  if (drawinfo_ != NULL) drawinfo_->::Map::stSynDropInfo::Clear();
  clear_has_drawinfo();
}
inline const ::Map::stSynDropInfo& NotifyEnterLevelMap::drawinfo() const {
  return drawinfo_ != NULL ? *drawinfo_ : *default_instance_->drawinfo_;
}
inline ::Map::stSynDropInfo* NotifyEnterLevelMap::mutable_drawinfo() {
  set_has_drawinfo();
  if (drawinfo_ == NULL) drawinfo_ = new ::Map::stSynDropInfo;
  return drawinfo_;
}
inline ::Map::stSynDropInfo* NotifyEnterLevelMap::release_drawinfo() {
  clear_has_drawinfo();
  ::Map::stSynDropInfo* temp = drawinfo_;
  drawinfo_ = NULL;
  return temp;
}
inline void NotifyEnterLevelMap::set_allocated_drawinfo(::Map::stSynDropInfo* drawinfo) {
  delete drawinfo_;
  drawinfo_ = drawinfo;
  if (drawinfo) {
    set_has_drawinfo();
  } else {
    clear_has_drawinfo();
  }
}

// -------------------------------------------------------------------

// stReqLeaveLevel

// optional uint32 flag = 1;
inline bool stReqLeaveLevel::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLeaveLevel::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLeaveLevel::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLeaveLevel::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 stReqLeaveLevel::flag() const {
  return flag_;
}
inline void stReqLeaveLevel::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// stLeaveLevelSuccess

// -------------------------------------------------------------------

// stEnterLevelError

// optional .Map.stEnterLevelError.Error errorCode = 1;
inline bool stEnterLevelError::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnterLevelError::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnterLevelError::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnterLevelError::clear_errorcode() {
  errorcode_ = 1;
  clear_has_errorcode();
}
inline ::Map::stEnterLevelError_Error stEnterLevelError::errorcode() const {
  return static_cast< ::Map::stEnterLevelError_Error >(errorcode_);
}
inline void stEnterLevelError::set_errorcode(::Map::stEnterLevelError_Error value) {
  assert(::Map::stEnterLevelError_Error_IsValid(value));
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// stPlayerData

// optional uint32 moID = 1;
inline bool stPlayerData::has_moid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPlayerData::set_has_moid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPlayerData::clear_has_moid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPlayerData::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 stPlayerData::moid() const {
  return moid_;
}
inline void stPlayerData::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional string roleName = 2;
inline bool stPlayerData::has_rolename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stPlayerData::set_has_rolename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stPlayerData::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stPlayerData::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& stPlayerData::rolename() const {
  return *rolename_;
}
inline void stPlayerData::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void stPlayerData::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void stPlayerData::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPlayerData::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* stPlayerData::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPlayerData::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 3;
inline bool stPlayerData::has_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stPlayerData::set_has_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stPlayerData::clear_has_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stPlayerData::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stPlayerData::job() const {
  return job_;
}
inline void stPlayerData::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 4;
inline bool stPlayerData::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stPlayerData::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stPlayerData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stPlayerData::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stPlayerData::sex() const {
  return sex_;
}
inline void stPlayerData::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 level = 5;
inline bool stPlayerData::has_level() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stPlayerData::set_has_level() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stPlayerData::clear_has_level() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stPlayerData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stPlayerData::level() const {
  return level_;
}
inline void stPlayerData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 x = 6;
inline bool stPlayerData::has_x() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stPlayerData::set_has_x() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stPlayerData::clear_has_x() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stPlayerData::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 stPlayerData::x() const {
  return x_;
}
inline void stPlayerData::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 7;
inline bool stPlayerData::has_y() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stPlayerData::set_has_y() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stPlayerData::clear_has_y() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stPlayerData::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 stPlayerData::y() const {
  return y_;
}
inline void stPlayerData::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 8;
inline bool stPlayerData::has_z() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stPlayerData::set_has_z() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stPlayerData::clear_has_z() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stPlayerData::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 stPlayerData::z() const {
  return z_;
}
inline void stPlayerData::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// optional uint32 dir = 9;
inline bool stPlayerData::has_dir() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stPlayerData::set_has_dir() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stPlayerData::clear_has_dir() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stPlayerData::clear_dir() {
  dir_ = 0u;
  clear_has_dir();
}
inline ::google::protobuf::uint32 stPlayerData::dir() const {
  return dir_;
}
inline void stPlayerData::set_dir(::google::protobuf::uint32 value) {
  set_has_dir();
  dir_ = value;
}

// optional uint32 campID = 10;
inline bool stPlayerData::has_campid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stPlayerData::set_has_campid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stPlayerData::clear_has_campid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stPlayerData::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 stPlayerData::campid() const {
  return campid_;
}
inline void stPlayerData::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// optional uint32 hp = 11;
inline bool stPlayerData::has_hp() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stPlayerData::set_has_hp() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stPlayerData::clear_has_hp() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stPlayerData::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 stPlayerData::hp() const {
  return hp_;
}
inline void stPlayerData::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// optional uint32 maxHP = 12;
inline bool stPlayerData::has_maxhp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stPlayerData::set_has_maxhp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stPlayerData::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stPlayerData::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 stPlayerData::maxhp() const {
  return maxhp_;
}
inline void stPlayerData::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional uint32 mp = 13;
inline bool stPlayerData::has_mp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stPlayerData::set_has_mp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stPlayerData::clear_has_mp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stPlayerData::clear_mp() {
  mp_ = 0u;
  clear_has_mp();
}
inline ::google::protobuf::uint32 stPlayerData::mp() const {
  return mp_;
}
inline void stPlayerData::set_mp(::google::protobuf::uint32 value) {
  set_has_mp();
  mp_ = value;
}

// optional uint32 maxMP = 14;
inline bool stPlayerData::has_maxmp() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stPlayerData::set_has_maxmp() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stPlayerData::clear_has_maxmp() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stPlayerData::clear_maxmp() {
  maxmp_ = 0u;
  clear_has_maxmp();
}
inline ::google::protobuf::uint32 stPlayerData::maxmp() const {
  return maxmp_;
}
inline void stPlayerData::set_maxmp(::google::protobuf::uint32 value) {
  set_has_maxmp();
  maxmp_ = value;
}

// optional uint32 bati = 15;
inline bool stPlayerData::has_bati() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stPlayerData::set_has_bati() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stPlayerData::clear_has_bati() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stPlayerData::clear_bati() {
  bati_ = 0u;
  clear_has_bati();
}
inline ::google::protobuf::uint32 stPlayerData::bati() const {
  return bati_;
}
inline void stPlayerData::set_bati(::google::protobuf::uint32 value) {
  set_has_bati();
  bati_ = value;
}

// optional uint32 maxBati = 16;
inline bool stPlayerData::has_maxbati() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stPlayerData::set_has_maxbati() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stPlayerData::clear_has_maxbati() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stPlayerData::clear_maxbati() {
  maxbati_ = 0u;
  clear_has_maxbati();
}
inline ::google::protobuf::uint32 stPlayerData::maxbati() const {
  return maxbati_;
}
inline void stPlayerData::set_maxbati(::google::protobuf::uint32 value) {
  set_has_maxbati();
  maxbati_ = value;
}

// optional uint32 headID = 17;
inline bool stPlayerData::has_headid() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stPlayerData::set_has_headid() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stPlayerData::clear_has_headid() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stPlayerData::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stPlayerData::headid() const {
  return headid_;
}
inline void stPlayerData::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 bodyID = 18;
inline bool stPlayerData::has_bodyid() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stPlayerData::set_has_bodyid() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stPlayerData::clear_has_bodyid() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stPlayerData::clear_bodyid() {
  bodyid_ = 0u;
  clear_has_bodyid();
}
inline ::google::protobuf::uint32 stPlayerData::bodyid() const {
  return bodyid_;
}
inline void stPlayerData::set_bodyid(::google::protobuf::uint32 value) {
  set_has_bodyid();
  bodyid_ = value;
}

// optional uint32 weaponID = 19;
inline bool stPlayerData::has_weaponid() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stPlayerData::set_has_weaponid() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stPlayerData::clear_has_weaponid() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stPlayerData::clear_weaponid() {
  weaponid_ = 0u;
  clear_has_weaponid();
}
inline ::google::protobuf::uint32 stPlayerData::weaponid() const {
  return weaponid_;
}
inline void stPlayerData::set_weaponid(::google::protobuf::uint32 value) {
  set_has_weaponid();
  weaponid_ = value;
}

// optional uint32 cloackID = 20;
inline bool stPlayerData::has_cloackid() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stPlayerData::set_has_cloackid() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stPlayerData::clear_has_cloackid() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stPlayerData::clear_cloackid() {
  cloackid_ = 0u;
  clear_has_cloackid();
}
inline ::google::protobuf::uint32 stPlayerData::cloackid() const {
  return cloackid_;
}
inline void stPlayerData::set_cloackid(::google::protobuf::uint32 value) {
  set_has_cloackid();
  cloackid_ = value;
}

// optional uint32 wingID = 21;
inline bool stPlayerData::has_wingid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stPlayerData::set_has_wingid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stPlayerData::clear_has_wingid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stPlayerData::clear_wingid() {
  wingid_ = 0u;
  clear_has_wingid();
}
inline ::google::protobuf::uint32 stPlayerData::wingid() const {
  return wingid_;
}
inline void stPlayerData::set_wingid(::google::protobuf::uint32 value) {
  set_has_wingid();
  wingid_ = value;
}

// optional uint32 shoeID = 22;
inline bool stPlayerData::has_shoeid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stPlayerData::set_has_shoeid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stPlayerData::clear_has_shoeid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stPlayerData::clear_shoeid() {
  shoeid_ = 0u;
  clear_has_shoeid();
}
inline ::google::protobuf::uint32 stPlayerData::shoeid() const {
  return shoeid_;
}
inline void stPlayerData::set_shoeid(::google::protobuf::uint32 value) {
  set_has_shoeid();
  shoeid_ = value;
}

// optional uint32 fashionHair = 23;
inline bool stPlayerData::has_fashionhair() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stPlayerData::set_has_fashionhair() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stPlayerData::clear_has_fashionhair() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stPlayerData::clear_fashionhair() {
  fashionhair_ = 0u;
  clear_has_fashionhair();
}
inline ::google::protobuf::uint32 stPlayerData::fashionhair() const {
  return fashionhair_;
}
inline void stPlayerData::set_fashionhair(::google::protobuf::uint32 value) {
  set_has_fashionhair();
  fashionhair_ = value;
}

// optional uint32 fashionFace = 24;
inline bool stPlayerData::has_fashionface() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void stPlayerData::set_has_fashionface() {
  _has_bits_[0] |= 0x00800000u;
}
inline void stPlayerData::clear_has_fashionface() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void stPlayerData::clear_fashionface() {
  fashionface_ = 0u;
  clear_has_fashionface();
}
inline ::google::protobuf::uint32 stPlayerData::fashionface() const {
  return fashionface_;
}
inline void stPlayerData::set_fashionface(::google::protobuf::uint32 value) {
  set_has_fashionface();
  fashionface_ = value;
}

// optional uint32 fashionBody = 25;
inline bool stPlayerData::has_fashionbody() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void stPlayerData::set_has_fashionbody() {
  _has_bits_[0] |= 0x01000000u;
}
inline void stPlayerData::clear_has_fashionbody() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void stPlayerData::clear_fashionbody() {
  fashionbody_ = 0u;
  clear_has_fashionbody();
}
inline ::google::protobuf::uint32 stPlayerData::fashionbody() const {
  return fashionbody_;
}
inline void stPlayerData::set_fashionbody(::google::protobuf::uint32 value) {
  set_has_fashionbody();
  fashionbody_ = value;
}

// optional uint32 fashionWeapon = 26;
inline bool stPlayerData::has_fashionweapon() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void stPlayerData::set_has_fashionweapon() {
  _has_bits_[0] |= 0x02000000u;
}
inline void stPlayerData::clear_has_fashionweapon() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void stPlayerData::clear_fashionweapon() {
  fashionweapon_ = 0u;
  clear_has_fashionweapon();
}
inline ::google::protobuf::uint32 stPlayerData::fashionweapon() const {
  return fashionweapon_;
}
inline void stPlayerData::set_fashionweapon(::google::protobuf::uint32 value) {
  set_has_fashionweapon();
  fashionweapon_ = value;
}

// optional uint32 fashionShoe = 27;
inline bool stPlayerData::has_fashionshoe() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void stPlayerData::set_has_fashionshoe() {
  _has_bits_[0] |= 0x04000000u;
}
inline void stPlayerData::clear_has_fashionshoe() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void stPlayerData::clear_fashionshoe() {
  fashionshoe_ = 0u;
  clear_has_fashionshoe();
}
inline ::google::protobuf::uint32 stPlayerData::fashionshoe() const {
  return fashionshoe_;
}
inline void stPlayerData::set_fashionshoe(::google::protobuf::uint32 value) {
  set_has_fashionshoe();
  fashionshoe_ = value;
}

// optional uint32 fashionDecoration = 28;
inline bool stPlayerData::has_fashiondecoration() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void stPlayerData::set_has_fashiondecoration() {
  _has_bits_[0] |= 0x08000000u;
}
inline void stPlayerData::clear_has_fashiondecoration() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void stPlayerData::clear_fashiondecoration() {
  fashiondecoration_ = 0u;
  clear_has_fashiondecoration();
}
inline ::google::protobuf::uint32 stPlayerData::fashiondecoration() const {
  return fashiondecoration_;
}
inline void stPlayerData::set_fashiondecoration(::google::protobuf::uint32 value) {
  set_has_fashiondecoration();
  fashiondecoration_ = value;
}

// optional uint32 titleID = 29;
inline bool stPlayerData::has_titleid() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void stPlayerData::set_has_titleid() {
  _has_bits_[0] |= 0x10000000u;
}
inline void stPlayerData::clear_has_titleid() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void stPlayerData::clear_titleid() {
  titleid_ = 0u;
  clear_has_titleid();
}
inline ::google::protobuf::uint32 stPlayerData::titleid() const {
  return titleid_;
}
inline void stPlayerData::set_titleid(::google::protobuf::uint32 value) {
  set_has_titleid();
  titleid_ = value;
}

// optional uint32 effectID = 30;
inline bool stPlayerData::has_effectid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void stPlayerData::set_has_effectid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void stPlayerData::clear_has_effectid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void stPlayerData::clear_effectid() {
  effectid_ = 0u;
  clear_has_effectid();
}
inline ::google::protobuf::uint32 stPlayerData::effectid() const {
  return effectid_;
}
inline void stPlayerData::set_effectid(::google::protobuf::uint32 value) {
  set_has_effectid();
  effectid_ = value;
}

// optional uint32 wingBreakLv = 31;
inline bool stPlayerData::has_wingbreaklv() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void stPlayerData::set_has_wingbreaklv() {
  _has_bits_[0] |= 0x40000000u;
}
inline void stPlayerData::clear_has_wingbreaklv() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void stPlayerData::clear_wingbreaklv() {
  wingbreaklv_ = 0u;
  clear_has_wingbreaklv();
}
inline ::google::protobuf::uint32 stPlayerData::wingbreaklv() const {
  return wingbreaklv_;
}
inline void stPlayerData::set_wingbreaklv(::google::protobuf::uint32 value) {
  set_has_wingbreaklv();
  wingbreaklv_ = value;
}

// optional uint32 followSpriteId = 32;
inline bool stPlayerData::has_followspriteid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void stPlayerData::set_has_followspriteid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void stPlayerData::clear_has_followspriteid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void stPlayerData::clear_followspriteid() {
  followspriteid_ = 0u;
  clear_has_followspriteid();
}
inline ::google::protobuf::uint32 stPlayerData::followspriteid() const {
  return followspriteid_;
}
inline void stPlayerData::set_followspriteid(::google::protobuf::uint32 value) {
  set_has_followspriteid();
  followspriteid_ = value;
}

// optional uint32 followSpriteLvl = 33;
inline bool stPlayerData::has_followspritelvl() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void stPlayerData::set_has_followspritelvl() {
  _has_bits_[1] |= 0x00000001u;
}
inline void stPlayerData::clear_has_followspritelvl() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void stPlayerData::clear_followspritelvl() {
  followspritelvl_ = 0u;
  clear_has_followspritelvl();
}
inline ::google::protobuf::uint32 stPlayerData::followspritelvl() const {
  return followspritelvl_;
}
inline void stPlayerData::set_followspritelvl(::google::protobuf::uint32 value) {
  set_has_followspritelvl();
  followspritelvl_ = value;
}

// optional uint32 fashionWingID = 34;
inline bool stPlayerData::has_fashionwingid() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void stPlayerData::set_has_fashionwingid() {
  _has_bits_[1] |= 0x00000002u;
}
inline void stPlayerData::clear_has_fashionwingid() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void stPlayerData::clear_fashionwingid() {
  fashionwingid_ = 0u;
  clear_has_fashionwingid();
}
inline ::google::protobuf::uint32 stPlayerData::fashionwingid() const {
  return fashionwingid_;
}
inline void stPlayerData::set_fashionwingid(::google::protobuf::uint32 value) {
  set_has_fashionwingid();
  fashionwingid_ = value;
}

// optional string couplename = 35;
inline bool stPlayerData::has_couplename() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void stPlayerData::set_has_couplename() {
  _has_bits_[1] |= 0x00000004u;
}
inline void stPlayerData::clear_has_couplename() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void stPlayerData::clear_couplename() {
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    couplename_->clear();
  }
  clear_has_couplename();
}
inline const ::std::string& stPlayerData::couplename() const {
  return *couplename_;
}
inline void stPlayerData::set_couplename(const ::std::string& value) {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  couplename_->assign(value);
}
inline void stPlayerData::set_couplename(const char* value) {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  couplename_->assign(value);
}
inline void stPlayerData::set_couplename(const char* value, size_t size) {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  couplename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPlayerData::mutable_couplename() {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  return couplename_;
}
inline ::std::string* stPlayerData::release_couplename() {
  clear_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = couplename_;
    couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPlayerData::set_allocated_couplename(::std::string* couplename) {
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    delete couplename_;
  }
  if (couplename) {
    set_has_couplename();
    couplename_ = couplename;
  } else {
    clear_has_couplename();
    couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 mountID = 36;
inline bool stPlayerData::has_mountid() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void stPlayerData::set_has_mountid() {
  _has_bits_[1] |= 0x00000008u;
}
inline void stPlayerData::clear_has_mountid() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void stPlayerData::clear_mountid() {
  mountid_ = 0u;
  clear_has_mountid();
}
inline ::google::protobuf::uint32 stPlayerData::mountid() const {
  return mountid_;
}
inline void stPlayerData::set_mountid(::google::protobuf::uint32 value) {
  set_has_mountid();
  mountid_ = value;
}

// optional bool isRobot = 37;
inline bool stPlayerData::has_isrobot() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void stPlayerData::set_has_isrobot() {
  _has_bits_[1] |= 0x00000010u;
}
inline void stPlayerData::clear_has_isrobot() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void stPlayerData::clear_isrobot() {
  isrobot_ = false;
  clear_has_isrobot();
}
inline bool stPlayerData::isrobot() const {
  return isrobot_;
}
inline void stPlayerData::set_isrobot(bool value) {
  set_has_isrobot();
  isrobot_ = value;
}

// -------------------------------------------------------------------

// NotifyPlayerAppear

// repeated .Map.stPlayerData data = 1;
inline int NotifyPlayerAppear::data_size() const {
  return data_.size();
}
inline void NotifyPlayerAppear::clear_data() {
  data_.Clear();
}
inline const ::Map::stPlayerData& NotifyPlayerAppear::data(int index) const {
  return data_.Get(index);
}
inline ::Map::stPlayerData* NotifyPlayerAppear::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Map::stPlayerData* NotifyPlayerAppear::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData >&
NotifyPlayerAppear::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData >*
NotifyPlayerAppear::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// NotifyObjDisappear_stObjDisappearInfo

// optional uint32 moID = 1;
inline bool NotifyObjDisappear_stObjDisappearInfo::has_moid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyObjDisappear_stObjDisappearInfo::set_has_moid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyObjDisappear_stObjDisappearInfo::clear_has_moid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyObjDisappear_stObjDisappearInfo::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 NotifyObjDisappear_stObjDisappearInfo::moid() const {
  return moid_;
}
inline void NotifyObjDisappear_stObjDisappearInfo::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 moType = 2;
inline bool NotifyObjDisappear_stObjDisappearInfo::has_motype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyObjDisappear_stObjDisappearInfo::set_has_motype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyObjDisappear_stObjDisappearInfo::clear_has_motype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyObjDisappear_stObjDisappearInfo::clear_motype() {
  motype_ = 0u;
  clear_has_motype();
}
inline ::google::protobuf::uint32 NotifyObjDisappear_stObjDisappearInfo::motype() const {
  return motype_;
}
inline void NotifyObjDisappear_stObjDisappearInfo::set_motype(::google::protobuf::uint32 value) {
  set_has_motype();
  motype_ = value;
}

// -------------------------------------------------------------------

// NotifyObjDisappear

// repeated .Map.NotifyObjDisappear.stObjDisappearInfo data = 1;
inline int NotifyObjDisappear::data_size() const {
  return data_.size();
}
inline void NotifyObjDisappear::clear_data() {
  data_.Clear();
}
inline const ::Map::NotifyObjDisappear_stObjDisappearInfo& NotifyObjDisappear::data(int index) const {
  return data_.Get(index);
}
inline ::Map::NotifyObjDisappear_stObjDisappearInfo* NotifyObjDisappear::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Map::NotifyObjDisappear_stObjDisappearInfo* NotifyObjDisappear::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::NotifyObjDisappear_stObjDisappearInfo >&
NotifyObjDisappear::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::NotifyObjDisappear_stObjDisappearInfo >*
NotifyObjDisappear::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// NotifyNpcAppear_stNpcData

// optional uint32 npcID = 1;
inline bool NotifyNpcAppear_stNpcData::has_npcid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_npcid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_npcid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyNpcAppear_stNpcData::clear_npcid() {
  npcid_ = 0u;
  clear_has_npcid();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::npcid() const {
  return npcid_;
}
inline void NotifyNpcAppear_stNpcData::set_npcid(::google::protobuf::uint32 value) {
  set_has_npcid();
  npcid_ = value;
}

// optional uint32 moID = 2;
inline bool NotifyNpcAppear_stNpcData::has_moid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_moid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_moid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyNpcAppear_stNpcData::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::moid() const {
  return moid_;
}
inline void NotifyNpcAppear_stNpcData::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 x = 3;
inline bool NotifyNpcAppear_stNpcData::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyNpcAppear_stNpcData::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::x() const {
  return x_;
}
inline void NotifyNpcAppear_stNpcData::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 4;
inline bool NotifyNpcAppear_stNpcData::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyNpcAppear_stNpcData::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::y() const {
  return y_;
}
inline void NotifyNpcAppear_stNpcData::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 5;
inline bool NotifyNpcAppear_stNpcData::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotifyNpcAppear_stNpcData::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::z() const {
  return z_;
}
inline void NotifyNpcAppear_stNpcData::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// optional uint32 hp = 6;
inline bool NotifyNpcAppear_stNpcData::has_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NotifyNpcAppear_stNpcData::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::hp() const {
  return hp_;
}
inline void NotifyNpcAppear_stNpcData::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// optional uint32 level = 7;
inline bool NotifyNpcAppear_stNpcData::has_level() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_level() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_level() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NotifyNpcAppear_stNpcData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::level() const {
  return level_;
}
inline void NotifyNpcAppear_stNpcData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 bornAminID = 8;
inline bool NotifyNpcAppear_stNpcData::has_bornaminid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_bornaminid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_bornaminid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NotifyNpcAppear_stNpcData::clear_bornaminid() {
  bornaminid_ = 0u;
  clear_has_bornaminid();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::bornaminid() const {
  return bornaminid_;
}
inline void NotifyNpcAppear_stNpcData::set_bornaminid(::google::protobuf::uint32 value) {
  set_has_bornaminid();
  bornaminid_ = value;
}

// optional bool isBoss = 9;
inline bool NotifyNpcAppear_stNpcData::has_isboss() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_isboss() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_isboss() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NotifyNpcAppear_stNpcData::clear_isboss() {
  isboss_ = false;
  clear_has_isboss();
}
inline bool NotifyNpcAppear_stNpcData::isboss() const {
  return isboss_;
}
inline void NotifyNpcAppear_stNpcData::set_isboss(bool value) {
  set_has_isboss();
  isboss_ = value;
}

// optional uint32 dirAngle = 10;
inline bool NotifyNpcAppear_stNpcData::has_dirangle() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_dirangle() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_dirangle() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NotifyNpcAppear_stNpcData::clear_dirangle() {
  dirangle_ = 0u;
  clear_has_dirangle();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::dirangle() const {
  return dirangle_;
}
inline void NotifyNpcAppear_stNpcData::set_dirangle(::google::protobuf::uint32 value) {
  set_has_dirangle();
  dirangle_ = value;
}

// optional uint32 actionGroupID = 11;
inline bool NotifyNpcAppear_stNpcData::has_actiongroupid() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NotifyNpcAppear_stNpcData::set_has_actiongroupid() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NotifyNpcAppear_stNpcData::clear_has_actiongroupid() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NotifyNpcAppear_stNpcData::clear_actiongroupid() {
  actiongroupid_ = 0u;
  clear_has_actiongroupid();
}
inline ::google::protobuf::uint32 NotifyNpcAppear_stNpcData::actiongroupid() const {
  return actiongroupid_;
}
inline void NotifyNpcAppear_stNpcData::set_actiongroupid(::google::protobuf::uint32 value) {
  set_has_actiongroupid();
  actiongroupid_ = value;
}

// -------------------------------------------------------------------

// NotifyNpcAppear

// repeated .Map.NotifyNpcAppear.stNpcData data = 1;
inline int NotifyNpcAppear::data_size() const {
  return data_.size();
}
inline void NotifyNpcAppear::clear_data() {
  data_.Clear();
}
inline const ::Map::NotifyNpcAppear_stNpcData& NotifyNpcAppear::data(int index) const {
  return data_.Get(index);
}
inline ::Map::NotifyNpcAppear_stNpcData* NotifyNpcAppear::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Map::NotifyNpcAppear_stNpcData* NotifyNpcAppear::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::NotifyNpcAppear_stNpcData >&
NotifyNpcAppear::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::NotifyNpcAppear_stNpcData >*
NotifyNpcAppear::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// NotifyHeroAppear_stHeroData

// optional uint32 heroID = 1;
inline bool NotifyHeroAppear_stHeroData::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyHeroAppear_stHeroData::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::heroid() const {
  return heroid_;
}
inline void NotifyHeroAppear_stHeroData::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 moID = 2;
inline bool NotifyHeroAppear_stHeroData::has_moid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_moid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_moid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyHeroAppear_stHeroData::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::moid() const {
  return moid_;
}
inline void NotifyHeroAppear_stHeroData::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 x = 3;
inline bool NotifyHeroAppear_stHeroData::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NotifyHeroAppear_stHeroData::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::x() const {
  return x_;
}
inline void NotifyHeroAppear_stHeroData::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 4;
inline bool NotifyHeroAppear_stHeroData::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NotifyHeroAppear_stHeroData::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::y() const {
  return y_;
}
inline void NotifyHeroAppear_stHeroData::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 5;
inline bool NotifyHeroAppear_stHeroData::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NotifyHeroAppear_stHeroData::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::z() const {
  return z_;
}
inline void NotifyHeroAppear_stHeroData::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// optional uint32 hp = 6;
inline bool NotifyHeroAppear_stHeroData::has_hp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_hp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_hp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NotifyHeroAppear_stHeroData::clear_hp() {
  hp_ = 0u;
  clear_has_hp();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::hp() const {
  return hp_;
}
inline void NotifyHeroAppear_stHeroData::set_hp(::google::protobuf::uint32 value) {
  set_has_hp();
  hp_ = value;
}

// optional uint32 maxHP = 7;
inline bool NotifyHeroAppear_stHeroData::has_maxhp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_maxhp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NotifyHeroAppear_stHeroData::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::maxhp() const {
  return maxhp_;
}
inline void NotifyHeroAppear_stHeroData::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional uint32 masterMoID = 8;
inline bool NotifyHeroAppear_stHeroData::has_mastermoid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_mastermoid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_mastermoid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NotifyHeroAppear_stHeroData::clear_mastermoid() {
  mastermoid_ = 0u;
  clear_has_mastermoid();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::mastermoid() const {
  return mastermoid_;
}
inline void NotifyHeroAppear_stHeroData::set_mastermoid(::google::protobuf::uint32 value) {
  set_has_mastermoid();
  mastermoid_ = value;
}

// optional uint32 campID = 9;
inline bool NotifyHeroAppear_stHeroData::has_campid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_campid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_campid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void NotifyHeroAppear_stHeroData::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::campid() const {
  return campid_;
}
inline void NotifyHeroAppear_stHeroData::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// optional uint32 level = 10;
inline bool NotifyHeroAppear_stHeroData::has_level() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_level() {
  _has_bits_[0] |= 0x00000200u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_level() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void NotifyHeroAppear_stHeroData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::level() const {
  return level_;
}
inline void NotifyHeroAppear_stHeroData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional bool createBySkill = 11;
inline bool NotifyHeroAppear_stHeroData::has_createbyskill() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_createbyskill() {
  _has_bits_[0] |= 0x00000400u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_createbyskill() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void NotifyHeroAppear_stHeroData::clear_createbyskill() {
  createbyskill_ = false;
  clear_has_createbyskill();
}
inline bool NotifyHeroAppear_stHeroData::createbyskill() const {
  return createbyskill_;
}
inline void NotifyHeroAppear_stHeroData::set_createbyskill(bool value) {
  set_has_createbyskill();
  createbyskill_ = value;
}

// optional uint32 pos = 12;
inline bool NotifyHeroAppear_stHeroData::has_pos() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void NotifyHeroAppear_stHeroData::set_has_pos() {
  _has_bits_[0] |= 0x00000800u;
}
inline void NotifyHeroAppear_stHeroData::clear_has_pos() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void NotifyHeroAppear_stHeroData::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 NotifyHeroAppear_stHeroData::pos() const {
  return pos_;
}
inline void NotifyHeroAppear_stHeroData::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// NotifyHeroAppear

// repeated .Map.NotifyHeroAppear.stHeroData data = 1;
inline int NotifyHeroAppear::data_size() const {
  return data_.size();
}
inline void NotifyHeroAppear::clear_data() {
  data_.Clear();
}
inline const ::Map::NotifyHeroAppear_stHeroData& NotifyHeroAppear::data(int index) const {
  return data_.Get(index);
}
inline ::Map::NotifyHeroAppear_stHeroData* NotifyHeroAppear::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Map::NotifyHeroAppear_stHeroData* NotifyHeroAppear::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::NotifyHeroAppear_stHeroData >&
NotifyHeroAppear::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::NotifyHeroAppear_stHeroData >*
NotifyHeroAppear::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// Pos

// optional uint32 x = 1;
inline bool Pos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pos::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 Pos::x() const {
  return x_;
}
inline void Pos::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 2;
inline bool Pos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pos::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pos::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pos::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 Pos::y() const {
  return y_;
}
inline void Pos::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 3;
inline bool Pos::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Pos::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Pos::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Pos::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 Pos::z() const {
  return z_;
}
inline void Pos::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// ReqMove

// optional uint32 moID = 1;
inline bool ReqMove::has_moid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqMove::set_has_moid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqMove::clear_has_moid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqMove::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 ReqMove::moid() const {
  return moid_;
}
inline void ReqMove::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 type = 2;
inline bool ReqMove::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqMove::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqMove::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqMove::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 ReqMove::type() const {
  return type_;
}
inline void ReqMove::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .Map.Pos path = 3;
inline bool ReqMove::has_path() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqMove::set_has_path() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqMove::clear_has_path() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqMove::clear_path() {
  if (path_ != NULL) path_->::Map::Pos::Clear();
  clear_has_path();
}
inline const ::Map::Pos& ReqMove::path() const {
  return path_ != NULL ? *path_ : *default_instance_->path_;
}
inline ::Map::Pos* ReqMove::mutable_path() {
  set_has_path();
  if (path_ == NULL) path_ = new ::Map::Pos;
  return path_;
}
inline ::Map::Pos* ReqMove::release_path() {
  clear_has_path();
  ::Map::Pos* temp = path_;
  path_ = NULL;
  return temp;
}
inline void ReqMove::set_allocated_path(::Map::Pos* path) {
  delete path_;
  path_ = path;
  if (path) {
    set_has_path();
  } else {
    clear_has_path();
  }
}

// optional bool isInstant = 4;
inline bool ReqMove::has_isinstant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqMove::set_has_isinstant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqMove::clear_has_isinstant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqMove::clear_isinstant() {
  isinstant_ = false;
  clear_has_isinstant();
}
inline bool ReqMove::isinstant() const {
  return isinstant_;
}
inline void ReqMove::set_isinstant(bool value) {
  set_has_isinstant();
  isinstant_ = value;
}

// -------------------------------------------------------------------

// stNotifyMODMove_stModMoveInfo

// optional uint32 type = 1;
inline bool stNotifyMODMove_stModMoveInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyMODMove_stModMoveInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 stNotifyMODMove_stModMoveInfo::type() const {
  return type_;
}
inline void stNotifyMODMove_stModMoveInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 modID = 2;
inline bool stNotifyMODMove_stModMoveInfo::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyMODMove_stModMoveInfo::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stNotifyMODMove_stModMoveInfo::modid() const {
  return modid_;
}
inline void stNotifyMODMove_stModMoveInfo::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 x = 3;
inline bool stNotifyMODMove_stModMoveInfo::has_x() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyMODMove_stModMoveInfo::set_has_x() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_has_x() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 stNotifyMODMove_stModMoveInfo::x() const {
  return x_;
}
inline void stNotifyMODMove_stModMoveInfo::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 4;
inline bool stNotifyMODMove_stModMoveInfo::has_y() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyMODMove_stModMoveInfo::set_has_y() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_has_y() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 stNotifyMODMove_stModMoveInfo::y() const {
  return y_;
}
inline void stNotifyMODMove_stModMoveInfo::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 5;
inline bool stNotifyMODMove_stModMoveInfo::has_z() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stNotifyMODMove_stModMoveInfo::set_has_z() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_has_z() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 stNotifyMODMove_stModMoveInfo::z() const {
  return z_;
}
inline void stNotifyMODMove_stModMoveInfo::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// optional uint32 dir = 6;
inline bool stNotifyMODMove_stModMoveInfo::has_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stNotifyMODMove_stModMoveInfo::set_has_dir() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_has_dir() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stNotifyMODMove_stModMoveInfo::clear_dir() {
  dir_ = 0u;
  clear_has_dir();
}
inline ::google::protobuf::uint32 stNotifyMODMove_stModMoveInfo::dir() const {
  return dir_;
}
inline void stNotifyMODMove_stModMoveInfo::set_dir(::google::protobuf::uint32 value) {
  set_has_dir();
  dir_ = value;
}

// -------------------------------------------------------------------

// stNotifyMODMove

// repeated .Map.stNotifyMODMove.stModMoveInfo data = 1;
inline int stNotifyMODMove::data_size() const {
  return data_.size();
}
inline void stNotifyMODMove::clear_data() {
  data_.Clear();
}
inline const ::Map::stNotifyMODMove_stModMoveInfo& stNotifyMODMove::data(int index) const {
  return data_.Get(index);
}
inline ::Map::stNotifyMODMove_stModMoveInfo* stNotifyMODMove::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Map::stNotifyMODMove_stModMoveInfo* stNotifyMODMove::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::stNotifyMODMove_stModMoveInfo >&
stNotifyMODMove::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::stNotifyMODMove_stModMoveInfo >*
stNotifyMODMove::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// stThrowSkill

// optional uint32 skill = 1;
inline bool stThrowSkill::has_skill() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stThrowSkill::set_has_skill() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stThrowSkill::clear_has_skill() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stThrowSkill::clear_skill() {
  skill_ = 0u;
  clear_has_skill();
}
inline ::google::protobuf::uint32 stThrowSkill::skill() const {
  return skill_;
}
inline void stThrowSkill::set_skill(::google::protobuf::uint32 value) {
  set_has_skill();
  skill_ = value;
}

// optional uint32 attType = 2;
inline bool stThrowSkill::has_atttype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stThrowSkill::set_has_atttype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stThrowSkill::clear_has_atttype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stThrowSkill::clear_atttype() {
  atttype_ = 0u;
  clear_has_atttype();
}
inline ::google::protobuf::uint32 stThrowSkill::atttype() const {
  return atttype_;
}
inline void stThrowSkill::set_atttype(::google::protobuf::uint32 value) {
  set_has_atttype();
  atttype_ = value;
}

// optional uint32 attMoID = 3;
inline bool stThrowSkill::has_attmoid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stThrowSkill::set_has_attmoid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stThrowSkill::clear_has_attmoid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stThrowSkill::clear_attmoid() {
  attmoid_ = 0u;
  clear_has_attmoid();
}
inline ::google::protobuf::uint32 stThrowSkill::attmoid() const {
  return attmoid_;
}
inline void stThrowSkill::set_attmoid(::google::protobuf::uint32 value) {
  set_has_attmoid();
  attmoid_ = value;
}

// optional uint32 step = 4;
inline bool stThrowSkill::has_step() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stThrowSkill::set_has_step() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stThrowSkill::clear_has_step() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stThrowSkill::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 stThrowSkill::step() const {
  return step_;
}
inline void stThrowSkill::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
}

// -------------------------------------------------------------------

// stHitInfo

// optional uint32 moType = 1;
inline bool stHitInfo::has_motype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHitInfo::set_has_motype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHitInfo::clear_has_motype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHitInfo::clear_motype() {
  motype_ = 0u;
  clear_has_motype();
}
inline ::google::protobuf::uint32 stHitInfo::motype() const {
  return motype_;
}
inline void stHitInfo::set_motype(::google::protobuf::uint32 value) {
  set_has_motype();
  motype_ = value;
}

// optional uint32 moID = 2;
inline bool stHitInfo::has_moid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHitInfo::set_has_moid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHitInfo::clear_has_moid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHitInfo::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 stHitInfo::moid() const {
  return moid_;
}
inline void stHitInfo::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 skillID = 3;
inline bool stHitInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHitInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHitInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHitInfo::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stHitInfo::skillid() const {
  return skillid_;
}
inline void stHitInfo::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 damageTime = 4;
inline bool stHitInfo::has_damagetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stHitInfo::set_has_damagetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stHitInfo::clear_has_damagetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stHitInfo::clear_damagetime() {
  damagetime_ = 0u;
  clear_has_damagetime();
}
inline ::google::protobuf::uint32 stHitInfo::damagetime() const {
  return damagetime_;
}
inline void stHitInfo::set_damagetime(::google::protobuf::uint32 value) {
  set_has_damagetime();
  damagetime_ = value;
}

// -------------------------------------------------------------------

// stNotifyHit

// optional uint32 attType = 1;
inline bool stNotifyHit::has_atttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyHit::set_has_atttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyHit::clear_has_atttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyHit::clear_atttype() {
  atttype_ = 0u;
  clear_has_atttype();
}
inline ::google::protobuf::uint32 stNotifyHit::atttype() const {
  return atttype_;
}
inline void stNotifyHit::set_atttype(::google::protobuf::uint32 value) {
  set_has_atttype();
  atttype_ = value;
}

// optional uint32 attMoID = 2;
inline bool stNotifyHit::has_attmoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyHit::set_has_attmoid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyHit::clear_has_attmoid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyHit::clear_attmoid() {
  attmoid_ = 0u;
  clear_has_attmoid();
}
inline ::google::protobuf::uint32 stNotifyHit::attmoid() const {
  return attmoid_;
}
inline void stNotifyHit::set_attmoid(::google::protobuf::uint32 value) {
  set_has_attmoid();
  attmoid_ = value;
}

// optional uint32 step = 3;
inline bool stNotifyHit::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyHit::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyHit::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyHit::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 stNotifyHit::step() const {
  return step_;
}
inline void stNotifyHit::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
}

// repeated .Map.stHitInfo hitInfos = 4;
inline int stNotifyHit::hitinfos_size() const {
  return hitinfos_.size();
}
inline void stNotifyHit::clear_hitinfos() {
  hitinfos_.Clear();
}
inline const ::Map::stHitInfo& stNotifyHit::hitinfos(int index) const {
  return hitinfos_.Get(index);
}
inline ::Map::stHitInfo* stNotifyHit::mutable_hitinfos(int index) {
  return hitinfos_.Mutable(index);
}
inline ::Map::stHitInfo* stNotifyHit::add_hitinfos() {
  return hitinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::stHitInfo >&
stNotifyHit::hitinfos() const {
  return hitinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::stHitInfo >*
stNotifyHit::mutable_hitinfos() {
  return &hitinfos_;
}

// -------------------------------------------------------------------

// AttRetInfo

// optional uint32 type = 1;
inline bool AttRetInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttRetInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttRetInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttRetInfo::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 AttRetInfo::type() const {
  return type_;
}
inline void AttRetInfo::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional uint32 moID = 2;
inline bool AttRetInfo::has_moid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttRetInfo::set_has_moid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttRetInfo::clear_has_moid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttRetInfo::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 AttRetInfo::moid() const {
  return moid_;
}
inline void AttRetInfo::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 skill = 3;
inline bool AttRetInfo::has_skill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttRetInfo::set_has_skill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttRetInfo::clear_has_skill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttRetInfo::clear_skill() {
  skill_ = 0u;
  clear_has_skill();
}
inline ::google::protobuf::uint32 AttRetInfo::skill() const {
  return skill_;
}
inline void AttRetInfo::set_skill(::google::protobuf::uint32 value) {
  set_has_skill();
  skill_ = value;
}

// optional uint32 decHP = 4;
inline bool AttRetInfo::has_dechp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AttRetInfo::set_has_dechp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AttRetInfo::clear_has_dechp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AttRetInfo::clear_dechp() {
  dechp_ = 0u;
  clear_has_dechp();
}
inline ::google::protobuf::uint32 AttRetInfo::dechp() const {
  return dechp_;
}
inline void AttRetInfo::set_dechp(::google::protobuf::uint32 value) {
  set_has_dechp();
  dechp_ = value;
}

// optional uint32 result = 5;
inline bool AttRetInfo::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AttRetInfo::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AttRetInfo::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AttRetInfo::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 AttRetInfo::result() const {
  return result_;
}
inline void AttRetInfo::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// AttackResult

// optional uint32 attType = 1;
inline bool AttackResult::has_atttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AttackResult::set_has_atttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AttackResult::clear_has_atttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AttackResult::clear_atttype() {
  atttype_ = 0u;
  clear_has_atttype();
}
inline ::google::protobuf::uint32 AttackResult::atttype() const {
  return atttype_;
}
inline void AttackResult::set_atttype(::google::protobuf::uint32 value) {
  set_has_atttype();
  atttype_ = value;
}

// optional uint32 attMoID = 2;
inline bool AttackResult::has_attmoid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AttackResult::set_has_attmoid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AttackResult::clear_has_attmoid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AttackResult::clear_attmoid() {
  attmoid_ = 0u;
  clear_has_attmoid();
}
inline ::google::protobuf::uint32 AttackResult::attmoid() const {
  return attmoid_;
}
inline void AttackResult::set_attmoid(::google::protobuf::uint32 value) {
  set_has_attmoid();
  attmoid_ = value;
}

// optional uint32 step = 3;
inline bool AttackResult::has_step() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AttackResult::set_has_step() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AttackResult::clear_has_step() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AttackResult::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 AttackResult::step() const {
  return step_;
}
inline void AttackResult::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
}

// optional uint32 damageTime = 4;
inline bool AttackResult::has_damagetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AttackResult::set_has_damagetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AttackResult::clear_has_damagetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AttackResult::clear_damagetime() {
  damagetime_ = 0u;
  clear_has_damagetime();
}
inline ::google::protobuf::uint32 AttackResult::damagetime() const {
  return damagetime_;
}
inline void AttackResult::set_damagetime(::google::protobuf::uint32 value) {
  set_has_damagetime();
  damagetime_ = value;
}

// repeated .Map.AttRetInfo attList = 5;
inline int AttackResult::attlist_size() const {
  return attlist_.size();
}
inline void AttackResult::clear_attlist() {
  attlist_.Clear();
}
inline const ::Map::AttRetInfo& AttackResult::attlist(int index) const {
  return attlist_.Get(index);
}
inline ::Map::AttRetInfo* AttackResult::mutable_attlist(int index) {
  return attlist_.Mutable(index);
}
inline ::Map::AttRetInfo* AttackResult::add_attlist() {
  return attlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::AttRetInfo >&
AttackResult::attlist() const {
  return attlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::AttRetInfo >*
AttackResult::mutable_attlist() {
  return &attlist_;
}

// -------------------------------------------------------------------

// stMapObjAddHP

// optional uint32 moType = 1;
inline bool stMapObjAddHP::has_motype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMapObjAddHP::set_has_motype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMapObjAddHP::clear_has_motype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMapObjAddHP::clear_motype() {
  motype_ = 0u;
  clear_has_motype();
}
inline ::google::protobuf::uint32 stMapObjAddHP::motype() const {
  return motype_;
}
inline void stMapObjAddHP::set_motype(::google::protobuf::uint32 value) {
  set_has_motype();
  motype_ = value;
}

// optional uint32 moID = 2;
inline bool stMapObjAddHP::has_moid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMapObjAddHP::set_has_moid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMapObjAddHP::clear_has_moid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMapObjAddHP::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 stMapObjAddHP::moid() const {
  return moid_;
}
inline void stMapObjAddHP::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 addHP = 3;
inline bool stMapObjAddHP::has_addhp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMapObjAddHP::set_has_addhp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMapObjAddHP::clear_has_addhp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMapObjAddHP::clear_addhp() {
  addhp_ = 0u;
  clear_has_addhp();
}
inline ::google::protobuf::uint32 stMapObjAddHP::addhp() const {
  return addhp_;
}
inline void stMapObjAddHP::set_addhp(::google::protobuf::uint32 value) {
  set_has_addhp();
  addhp_ = value;
}

// -------------------------------------------------------------------

// stInstantMove

// optional uint32 moID = 1;
inline bool stInstantMove::has_moid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInstantMove::set_has_moid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInstantMove::clear_has_moid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInstantMove::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 stInstantMove::moid() const {
  return moid_;
}
inline void stInstantMove::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 type = 2;
inline bool stInstantMove::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInstantMove::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInstantMove::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInstantMove::clear_type() {
  type_ = 0u;
  clear_has_type();
}
inline ::google::protobuf::uint32 stInstantMove::type() const {
  return type_;
}
inline void stInstantMove::set_type(::google::protobuf::uint32 value) {
  set_has_type();
  type_ = value;
}

// optional .Map.Pos destPos = 3;
inline bool stInstantMove::has_destpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stInstantMove::set_has_destpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stInstantMove::clear_has_destpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stInstantMove::clear_destpos() {
  if (destpos_ != NULL) destpos_->::Map::Pos::Clear();
  clear_has_destpos();
}
inline const ::Map::Pos& stInstantMove::destpos() const {
  return destpos_ != NULL ? *destpos_ : *default_instance_->destpos_;
}
inline ::Map::Pos* stInstantMove::mutable_destpos() {
  set_has_destpos();
  if (destpos_ == NULL) destpos_ = new ::Map::Pos;
  return destpos_;
}
inline ::Map::Pos* stInstantMove::release_destpos() {
  clear_has_destpos();
  ::Map::Pos* temp = destpos_;
  destpos_ = NULL;
  return temp;
}
inline void stInstantMove::set_allocated_destpos(::Map::Pos* destpos) {
  delete destpos_;
  destpos_ = destpos;
  if (destpos) {
    set_has_destpos();
  } else {
    clear_has_destpos();
  }
}

// -------------------------------------------------------------------

// stAttackFail

// optional .Map.stAttackFail.ErrorCode errorCode = 1;
inline bool stAttackFail::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAttackFail::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAttackFail::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAttackFail::clear_errorcode() {
  errorcode_ = 1;
  clear_has_errorcode();
}
inline ::Map::stAttackFail_ErrorCode stAttackFail::errorcode() const {
  return static_cast< ::Map::stAttackFail_ErrorCode >(errorcode_);
}
inline void stAttackFail::set_errorcode(::Map::stAttackFail_ErrorCode value) {
  assert(::Map::stAttackFail_ErrorCode_IsValid(value));
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// stInterruptPlaySkill

// optional uint32 attType = 1;
inline bool stInterruptPlaySkill::has_atttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInterruptPlaySkill::set_has_atttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInterruptPlaySkill::clear_has_atttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInterruptPlaySkill::clear_atttype() {
  atttype_ = 0u;
  clear_has_atttype();
}
inline ::google::protobuf::uint32 stInterruptPlaySkill::atttype() const {
  return atttype_;
}
inline void stInterruptPlaySkill::set_atttype(::google::protobuf::uint32 value) {
  set_has_atttype();
  atttype_ = value;
}

// optional uint32 attID = 2;
inline bool stInterruptPlaySkill::has_attid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInterruptPlaySkill::set_has_attid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInterruptPlaySkill::clear_has_attid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInterruptPlaySkill::clear_attid() {
  attid_ = 0u;
  clear_has_attid();
}
inline ::google::protobuf::uint32 stInterruptPlaySkill::attid() const {
  return attid_;
}
inline void stInterruptPlaySkill::set_attid(::google::protobuf::uint32 value) {
  set_has_attid();
  attid_ = value;
}

// optional string nextAction = 3;
inline bool stInterruptPlaySkill::has_nextaction() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stInterruptPlaySkill::set_has_nextaction() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stInterruptPlaySkill::clear_has_nextaction() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stInterruptPlaySkill::clear_nextaction() {
  if (nextaction_ != &::google::protobuf::internal::kEmptyString) {
    nextaction_->clear();
  }
  clear_has_nextaction();
}
inline const ::std::string& stInterruptPlaySkill::nextaction() const {
  return *nextaction_;
}
inline void stInterruptPlaySkill::set_nextaction(const ::std::string& value) {
  set_has_nextaction();
  if (nextaction_ == &::google::protobuf::internal::kEmptyString) {
    nextaction_ = new ::std::string;
  }
  nextaction_->assign(value);
}
inline void stInterruptPlaySkill::set_nextaction(const char* value) {
  set_has_nextaction();
  if (nextaction_ == &::google::protobuf::internal::kEmptyString) {
    nextaction_ = new ::std::string;
  }
  nextaction_->assign(value);
}
inline void stInterruptPlaySkill::set_nextaction(const char* value, size_t size) {
  set_has_nextaction();
  if (nextaction_ == &::google::protobuf::internal::kEmptyString) {
    nextaction_ = new ::std::string;
  }
  nextaction_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stInterruptPlaySkill::mutable_nextaction() {
  set_has_nextaction();
  if (nextaction_ == &::google::protobuf::internal::kEmptyString) {
    nextaction_ = new ::std::string;
  }
  return nextaction_;
}
inline ::std::string* stInterruptPlaySkill::release_nextaction() {
  clear_has_nextaction();
  if (nextaction_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = nextaction_;
    nextaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stInterruptPlaySkill::set_allocated_nextaction(::std::string* nextaction) {
  if (nextaction_ != &::google::protobuf::internal::kEmptyString) {
    delete nextaction_;
  }
  if (nextaction) {
    set_has_nextaction();
    nextaction_ = nextaction;
  } else {
    clear_has_nextaction();
    nextaction_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stMapObjectChgDir

// optional uint32 moType = 1;
inline bool stMapObjectChgDir::has_motype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMapObjectChgDir::set_has_motype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMapObjectChgDir::clear_has_motype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMapObjectChgDir::clear_motype() {
  motype_ = 0u;
  clear_has_motype();
}
inline ::google::protobuf::uint32 stMapObjectChgDir::motype() const {
  return motype_;
}
inline void stMapObjectChgDir::set_motype(::google::protobuf::uint32 value) {
  set_has_motype();
  motype_ = value;
}

// optional uint32 moID = 2;
inline bool stMapObjectChgDir::has_moid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMapObjectChgDir::set_has_moid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMapObjectChgDir::clear_has_moid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMapObjectChgDir::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 stMapObjectChgDir::moid() const {
  return moid_;
}
inline void stMapObjectChgDir::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 dir = 3;
inline bool stMapObjectChgDir::has_dir() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMapObjectChgDir::set_has_dir() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMapObjectChgDir::clear_has_dir() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMapObjectChgDir::clear_dir() {
  dir_ = 0u;
  clear_has_dir();
}
inline ::google::protobuf::uint32 stMapObjectChgDir::dir() const {
  return dir_;
}
inline void stMapObjectChgDir::set_dir(::google::protobuf::uint32 value) {
  set_has_dir();
  dir_ = value;
}

// -------------------------------------------------------------------

// stReqOnlineUserOnMainCity

// optional uint32 charID = 1;
inline bool stReqOnlineUserOnMainCity::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOnlineUserOnMainCity::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOnlineUserOnMainCity::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOnlineUserOnMainCity::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOnlineUserOnMainCity::charid() const {
  return charid_;
}
inline void stReqOnlineUserOnMainCity::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOnlineUserOnMainCity

// repeated .Map.stPlayerData userList = 1;
inline int stOnlineUserOnMainCity::userlist_size() const {
  return userlist_.size();
}
inline void stOnlineUserOnMainCity::clear_userlist() {
  userlist_.Clear();
}
inline const ::Map::stPlayerData& stOnlineUserOnMainCity::userlist(int index) const {
  return userlist_.Get(index);
}
inline ::Map::stPlayerData* stOnlineUserOnMainCity::mutable_userlist(int index) {
  return userlist_.Mutable(index);
}
inline ::Map::stPlayerData* stOnlineUserOnMainCity::add_userlist() {
  return userlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData >&
stOnlineUserOnMainCity::userlist() const {
  return userlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Map::stPlayerData >*
stOnlineUserOnMainCity::mutable_userlist() {
  return &userlist_;
}

// -------------------------------------------------------------------

// stChangeHeroGroup

// optional uint32 groupID = 1;
inline bool stChangeHeroGroup::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChangeHeroGroup::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChangeHeroGroup::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChangeHeroGroup::clear_groupid() {
  groupid_ = 0u;
  clear_has_groupid();
}
inline ::google::protobuf::uint32 stChangeHeroGroup::groupid() const {
  return groupid_;
}
inline void stChangeHeroGroup::set_groupid(::google::protobuf::uint32 value) {
  set_has_groupid();
  groupid_ = value;
}

// -------------------------------------------------------------------

// stChangeHeroGroupError

// optional .Map.stChangeHeroGroupError.eResult result = 1;
inline bool stChangeHeroGroupError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChangeHeroGroupError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChangeHeroGroupError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChangeHeroGroupError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Map::stChangeHeroGroupError_eResult stChangeHeroGroupError::result() const {
  return static_cast< ::Map::stChangeHeroGroupError_eResult >(result_);
}
inline void stChangeHeroGroupError::set_result(::Map::stChangeHeroGroupError_eResult value) {
  assert(::Map::stChangeHeroGroupError_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stNotifyObjMP

// optional uint32 moType = 1;
inline bool stNotifyObjMP::has_motype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyObjMP::set_has_motype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyObjMP::clear_has_motype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyObjMP::clear_motype() {
  motype_ = 0u;
  clear_has_motype();
}
inline ::google::protobuf::uint32 stNotifyObjMP::motype() const {
  return motype_;
}
inline void stNotifyObjMP::set_motype(::google::protobuf::uint32 value) {
  set_has_motype();
  motype_ = value;
}

// optional uint32 moID = 2;
inline bool stNotifyObjMP::has_moid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyObjMP::set_has_moid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyObjMP::clear_has_moid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyObjMP::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 stNotifyObjMP::moid() const {
  return moid_;
}
inline void stNotifyObjMP::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 num = 3;
inline bool stNotifyObjMP::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyObjMP::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyObjMP::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyObjMP::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stNotifyObjMP::num() const {
  return num_;
}
inline void stNotifyObjMP::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stNotifyObjBati

// optional uint32 moType = 1;
inline bool stNotifyObjBati::has_motype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyObjBati::set_has_motype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyObjBati::clear_has_motype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyObjBati::clear_motype() {
  motype_ = 0u;
  clear_has_motype();
}
inline ::google::protobuf::uint32 stNotifyObjBati::motype() const {
  return motype_;
}
inline void stNotifyObjBati::set_motype(::google::protobuf::uint32 value) {
  set_has_motype();
  motype_ = value;
}

// optional uint32 moID = 2;
inline bool stNotifyObjBati::has_moid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyObjBati::set_has_moid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyObjBati::clear_has_moid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyObjBati::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 stNotifyObjBati::moid() const {
  return moid_;
}
inline void stNotifyObjBati::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 num = 3;
inline bool stNotifyObjBati::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyObjBati::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyObjBati::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyObjBati::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stNotifyObjBati::num() const {
  return num_;
}
inline void stNotifyObjBati::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stAddBufferState2Me

// optional uint32 attType = 1;
inline bool stAddBufferState2Me::has_atttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddBufferState2Me::set_has_atttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddBufferState2Me::clear_has_atttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddBufferState2Me::clear_atttype() {
  atttype_ = 0u;
  clear_has_atttype();
}
inline ::google::protobuf::uint32 stAddBufferState2Me::atttype() const {
  return atttype_;
}
inline void stAddBufferState2Me::set_atttype(::google::protobuf::uint32 value) {
  set_has_atttype();
  atttype_ = value;
}

// optional uint32 attModID = 2;
inline bool stAddBufferState2Me::has_attmodid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAddBufferState2Me::set_has_attmodid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAddBufferState2Me::clear_has_attmodid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAddBufferState2Me::clear_attmodid() {
  attmodid_ = 0u;
  clear_has_attmodid();
}
inline ::google::protobuf::uint32 stAddBufferState2Me::attmodid() const {
  return attmodid_;
}
inline void stAddBufferState2Me::set_attmodid(::google::protobuf::uint32 value) {
  set_has_attmodid();
  attmodid_ = value;
}

// optional uint32 stateID = 3;
inline bool stAddBufferState2Me::has_stateid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAddBufferState2Me::set_has_stateid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAddBufferState2Me::clear_has_stateid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAddBufferState2Me::clear_stateid() {
  stateid_ = 0u;
  clear_has_stateid();
}
inline ::google::protobuf::uint32 stAddBufferState2Me::stateid() const {
  return stateid_;
}
inline void stAddBufferState2Me::set_stateid(::google::protobuf::uint32 value) {
  set_has_stateid();
  stateid_ = value;
}

// optional uint32 defType = 4;
inline bool stAddBufferState2Me::has_deftype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stAddBufferState2Me::set_has_deftype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stAddBufferState2Me::clear_has_deftype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stAddBufferState2Me::clear_deftype() {
  deftype_ = 0u;
  clear_has_deftype();
}
inline ::google::protobuf::uint32 stAddBufferState2Me::deftype() const {
  return deftype_;
}
inline void stAddBufferState2Me::set_deftype(::google::protobuf::uint32 value) {
  set_has_deftype();
  deftype_ = value;
}

// optional uint32 defModID = 5;
inline bool stAddBufferState2Me::has_defmodid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stAddBufferState2Me::set_has_defmodid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stAddBufferState2Me::clear_has_defmodid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stAddBufferState2Me::clear_defmodid() {
  defmodid_ = 0u;
  clear_has_defmodid();
}
inline ::google::protobuf::uint32 stAddBufferState2Me::defmodid() const {
  return defmodid_;
}
inline void stAddBufferState2Me::set_defmodid(::google::protobuf::uint32 value) {
  set_has_defmodid();
  defmodid_ = value;
}

// optional int32 extraVal = 6;
inline bool stAddBufferState2Me::has_extraval() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stAddBufferState2Me::set_has_extraval() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stAddBufferState2Me::clear_has_extraval() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stAddBufferState2Me::clear_extraval() {
  extraval_ = 0;
  clear_has_extraval();
}
inline ::google::protobuf::int32 stAddBufferState2Me::extraval() const {
  return extraval_;
}
inline void stAddBufferState2Me::set_extraval(::google::protobuf::int32 value) {
  set_has_extraval();
  extraval_ = value;
}

// optional uint32 buffID = 7;
inline bool stAddBufferState2Me::has_buffid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stAddBufferState2Me::set_has_buffid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stAddBufferState2Me::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stAddBufferState2Me::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 stAddBufferState2Me::buffid() const {
  return buffid_;
}
inline void stAddBufferState2Me::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
}

// -------------------------------------------------------------------

// stDelBufferState

// optional uint32 stateID = 1;
inline bool stDelBufferState::has_stateid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDelBufferState::set_has_stateid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDelBufferState::clear_has_stateid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDelBufferState::clear_stateid() {
  stateid_ = 0u;
  clear_has_stateid();
}
inline ::google::protobuf::uint32 stDelBufferState::stateid() const {
  return stateid_;
}
inline void stDelBufferState::set_stateid(::google::protobuf::uint32 value) {
  set_has_stateid();
  stateid_ = value;
}

// optional uint32 moType = 2;
inline bool stDelBufferState::has_motype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDelBufferState::set_has_motype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDelBufferState::clear_has_motype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDelBufferState::clear_motype() {
  motype_ = 0u;
  clear_has_motype();
}
inline ::google::protobuf::uint32 stDelBufferState::motype() const {
  return motype_;
}
inline void stDelBufferState::set_motype(::google::protobuf::uint32 value) {
  set_has_motype();
  motype_ = value;
}

// optional uint32 moID = 3;
inline bool stDelBufferState::has_moid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDelBufferState::set_has_moid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDelBufferState::clear_has_moid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDelBufferState::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 stDelBufferState::moid() const {
  return moid_;
}
inline void stDelBufferState::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// optional uint32 bufferID = 4;
inline bool stDelBufferState::has_bufferid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDelBufferState::set_has_bufferid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDelBufferState::clear_has_bufferid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDelBufferState::clear_bufferid() {
  bufferid_ = 0u;
  clear_has_bufferid();
}
inline ::google::protobuf::uint32 stDelBufferState::bufferid() const {
  return bufferid_;
}
inline void stDelBufferState::set_bufferid(::google::protobuf::uint32 value) {
  set_has_bufferid();
  bufferid_ = value;
}

// -------------------------------------------------------------------

// stNotifyExecAI

// optional uint32 charID = 1;
inline bool stNotifyExecAI::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyExecAI::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyExecAI::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyExecAI::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyExecAI::charid() const {
  return charid_;
}
inline void stNotifyExecAI::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stAlertBossAppear

// optional uint32 delay = 1;
inline bool stAlertBossAppear::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAlertBossAppear::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAlertBossAppear::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAlertBossAppear::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 stAlertBossAppear::delay() const {
  return delay_;
}
inline void stAlertBossAppear::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
}

// -------------------------------------------------------------------

// stReqChangeMainCity

// optional uint32 levelID = 1;
inline bool stReqChangeMainCity::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChangeMainCity::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChangeMainCity::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChangeMainCity::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqChangeMainCity::levelid() const {
  return levelid_;
}
inline void stReqChangeMainCity::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stNotifyAddFireWall

// optional uint32 x = 1;
inline bool stNotifyAddFireWall::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyAddFireWall::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyAddFireWall::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyAddFireWall::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 stNotifyAddFireWall::x() const {
  return x_;
}
inline void stNotifyAddFireWall::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 2;
inline bool stNotifyAddFireWall::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyAddFireWall::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyAddFireWall::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyAddFireWall::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 stNotifyAddFireWall::y() const {
  return y_;
}
inline void stNotifyAddFireWall::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 3;
inline bool stNotifyAddFireWall::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyAddFireWall::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyAddFireWall::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyAddFireWall::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 stNotifyAddFireWall::z() const {
  return z_;
}
inline void stNotifyAddFireWall::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// optional uint32 lastTime = 4;
inline bool stNotifyAddFireWall::has_lasttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyAddFireWall::set_has_lasttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyAddFireWall::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyAddFireWall::clear_lasttime() {
  lasttime_ = 0u;
  clear_has_lasttime();
}
inline ::google::protobuf::uint32 stNotifyAddFireWall::lasttime() const {
  return lasttime_;
}
inline void stNotifyAddFireWall::set_lasttime(::google::protobuf::uint32 value) {
  set_has_lasttime();
  lasttime_ = value;
}

// -------------------------------------------------------------------

// stBeginThunderDamage

// optional uint32 attModType = 1;
inline bool stBeginThunderDamage::has_attmodtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBeginThunderDamage::set_has_attmodtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBeginThunderDamage::clear_has_attmodtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBeginThunderDamage::clear_attmodtype() {
  attmodtype_ = 0u;
  clear_has_attmodtype();
}
inline ::google::protobuf::uint32 stBeginThunderDamage::attmodtype() const {
  return attmodtype_;
}
inline void stBeginThunderDamage::set_attmodtype(::google::protobuf::uint32 value) {
  set_has_attmodtype();
  attmodtype_ = value;
}

// optional uint32 attModID = 2;
inline bool stBeginThunderDamage::has_attmodid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBeginThunderDamage::set_has_attmodid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBeginThunderDamage::clear_has_attmodid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBeginThunderDamage::clear_attmodid() {
  attmodid_ = 0u;
  clear_has_attmodid();
}
inline ::google::protobuf::uint32 stBeginThunderDamage::attmodid() const {
  return attmodid_;
}
inline void stBeginThunderDamage::set_attmodid(::google::protobuf::uint32 value) {
  set_has_attmodid();
  attmodid_ = value;
}

// optional uint32 defType = 3;
inline bool stBeginThunderDamage::has_deftype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBeginThunderDamage::set_has_deftype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBeginThunderDamage::clear_has_deftype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBeginThunderDamage::clear_deftype() {
  deftype_ = 0u;
  clear_has_deftype();
}
inline ::google::protobuf::uint32 stBeginThunderDamage::deftype() const {
  return deftype_;
}
inline void stBeginThunderDamage::set_deftype(::google::protobuf::uint32 value) {
  set_has_deftype();
  deftype_ = value;
}

// optional uint32 defModID = 4;
inline bool stBeginThunderDamage::has_defmodid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stBeginThunderDamage::set_has_defmodid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stBeginThunderDamage::clear_has_defmodid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stBeginThunderDamage::clear_defmodid() {
  defmodid_ = 0u;
  clear_has_defmodid();
}
inline ::google::protobuf::uint32 stBeginThunderDamage::defmodid() const {
  return defmodid_;
}
inline void stBeginThunderDamage::set_defmodid(::google::protobuf::uint32 value) {
  set_has_defmodid();
  defmodid_ = value;
}

// -------------------------------------------------------------------

// stCalcThunderDamage

// optional uint32 attModType = 1;
inline bool stCalcThunderDamage::has_attmodtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCalcThunderDamage::set_has_attmodtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCalcThunderDamage::clear_has_attmodtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCalcThunderDamage::clear_attmodtype() {
  attmodtype_ = 0u;
  clear_has_attmodtype();
}
inline ::google::protobuf::uint32 stCalcThunderDamage::attmodtype() const {
  return attmodtype_;
}
inline void stCalcThunderDamage::set_attmodtype(::google::protobuf::uint32 value) {
  set_has_attmodtype();
  attmodtype_ = value;
}

// optional uint32 attModID = 2;
inline bool stCalcThunderDamage::has_attmodid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCalcThunderDamage::set_has_attmodid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCalcThunderDamage::clear_has_attmodid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCalcThunderDamage::clear_attmodid() {
  attmodid_ = 0u;
  clear_has_attmodid();
}
inline ::google::protobuf::uint32 stCalcThunderDamage::attmodid() const {
  return attmodid_;
}
inline void stCalcThunderDamage::set_attmodid(::google::protobuf::uint32 value) {
  set_has_attmodid();
  attmodid_ = value;
}

// optional uint32 defType = 3;
inline bool stCalcThunderDamage::has_deftype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stCalcThunderDamage::set_has_deftype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stCalcThunderDamage::clear_has_deftype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stCalcThunderDamage::clear_deftype() {
  deftype_ = 0u;
  clear_has_deftype();
}
inline ::google::protobuf::uint32 stCalcThunderDamage::deftype() const {
  return deftype_;
}
inline void stCalcThunderDamage::set_deftype(::google::protobuf::uint32 value) {
  set_has_deftype();
  deftype_ = value;
}

// optional uint32 defModID = 4;
inline bool stCalcThunderDamage::has_defmodid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stCalcThunderDamage::set_has_defmodid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stCalcThunderDamage::clear_has_defmodid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stCalcThunderDamage::clear_defmodid() {
  defmodid_ = 0u;
  clear_has_defmodid();
}
inline ::google::protobuf::uint32 stCalcThunderDamage::defmodid() const {
  return defmodid_;
}
inline void stCalcThunderDamage::set_defmodid(::google::protobuf::uint32 value) {
  set_has_defmodid();
  defmodid_ = value;
}

// -------------------------------------------------------------------

// stDirectDamge

// optional uint32 modType = 1;
inline bool stDirectDamge::has_modtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDirectDamge::set_has_modtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDirectDamge::clear_has_modtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDirectDamge::clear_modtype() {
  modtype_ = 0u;
  clear_has_modtype();
}
inline ::google::protobuf::uint32 stDirectDamge::modtype() const {
  return modtype_;
}
inline void stDirectDamge::set_modtype(::google::protobuf::uint32 value) {
  set_has_modtype();
  modtype_ = value;
}

// optional uint32 modID = 2;
inline bool stDirectDamge::has_modid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDirectDamge::set_has_modid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDirectDamge::clear_has_modid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDirectDamge::clear_modid() {
  modid_ = 0u;
  clear_has_modid();
}
inline ::google::protobuf::uint32 stDirectDamge::modid() const {
  return modid_;
}
inline void stDirectDamge::set_modid(::google::protobuf::uint32 value) {
  set_has_modid();
  modid_ = value;
}

// optional uint32 damage = 3;
inline bool stDirectDamge::has_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stDirectDamge::set_has_damage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stDirectDamge::clear_has_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stDirectDamge::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 stDirectDamge::damage() const {
  return damage_;
}
inline void stDirectDamge::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// optional uint32 attType = 4;
inline bool stDirectDamge::has_atttype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stDirectDamge::set_has_atttype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stDirectDamge::clear_has_atttype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stDirectDamge::clear_atttype() {
  atttype_ = 0u;
  clear_has_atttype();
}
inline ::google::protobuf::uint32 stDirectDamge::atttype() const {
  return atttype_;
}
inline void stDirectDamge::set_atttype(::google::protobuf::uint32 value) {
  set_has_atttype();
  atttype_ = value;
}

// optional uint32 attModID = 5;
inline bool stDirectDamge::has_attmodid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stDirectDamge::set_has_attmodid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stDirectDamge::clear_has_attmodid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stDirectDamge::clear_attmodid() {
  attmodid_ = 0u;
  clear_has_attmodid();
}
inline ::google::protobuf::uint32 stDirectDamge::attmodid() const {
  return attmodid_;
}
inline void stDirectDamge::set_attmodid(::google::protobuf::uint32 value) {
  set_has_attmodid();
  attmodid_ = value;
}

// optional uint32 result = 6;
inline bool stDirectDamge::has_result() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stDirectDamge::set_has_result() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stDirectDamge::clear_has_result() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stDirectDamge::clear_result() {
  result_ = 0u;
  clear_has_result();
}
inline ::google::protobuf::uint32 stDirectDamge::result() const {
  return result_;
}
inline void stDirectDamge::set_result(::google::protobuf::uint32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stNotifyObjDie

// optional uint32 moType = 1;
inline bool stNotifyObjDie::has_motype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyObjDie::set_has_motype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyObjDie::clear_has_motype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyObjDie::clear_motype() {
  motype_ = 0u;
  clear_has_motype();
}
inline ::google::protobuf::uint32 stNotifyObjDie::motype() const {
  return motype_;
}
inline void stNotifyObjDie::set_motype(::google::protobuf::uint32 value) {
  set_has_motype();
  motype_ = value;
}

// optional uint32 moID = 2;
inline bool stNotifyObjDie::has_moid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyObjDie::set_has_moid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyObjDie::clear_has_moid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyObjDie::clear_moid() {
  moid_ = 0u;
  clear_has_moid();
}
inline ::google::protobuf::uint32 stNotifyObjDie::moid() const {
  return moid_;
}
inline void stNotifyObjDie::set_moid(::google::protobuf::uint32 value) {
  set_has_moid();
  moid_ = value;
}

// -------------------------------------------------------------------

// stBeginBattle

// optional uint32 delay = 1;
inline bool stBeginBattle::has_delay() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBeginBattle::set_has_delay() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBeginBattle::clear_has_delay() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBeginBattle::clear_delay() {
  delay_ = 0u;
  clear_has_delay();
}
inline ::google::protobuf::uint32 stBeginBattle::delay() const {
  return delay_;
}
inline void stBeginBattle::set_delay(::google::protobuf::uint32 value) {
  set_has_delay();
  delay_ = value;
}

// optional uint32 remainTime = 2;
inline bool stBeginBattle::has_remaintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBeginBattle::set_has_remaintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBeginBattle::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBeginBattle::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stBeginBattle::remaintime() const {
  return remaintime_;
}
inline void stBeginBattle::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// -------------------------------------------------------------------

// stThrowSkillFail

// optional .Map.stThrowSkillFail.eReason reason = 1;
inline bool stThrowSkillFail::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stThrowSkillFail::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stThrowSkillFail::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stThrowSkillFail::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::Map::stThrowSkillFail_eReason stThrowSkillFail::reason() const {
  return static_cast< ::Map::stThrowSkillFail_eReason >(reason_);
}
inline void stThrowSkillFail::set_reason(::Map::stThrowSkillFail_eReason value) {
  assert(::Map::stThrowSkillFail_eReason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// stNotifyResAppear

// optional uint32 id = 1;
inline bool stNotifyResAppear::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyResAppear::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyResAppear::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyResAppear::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stNotifyResAppear::id() const {
  return id_;
}
inline void stNotifyResAppear::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 x = 2;
inline bool stNotifyResAppear::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyResAppear::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyResAppear::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyResAppear::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 stNotifyResAppear::x() const {
  return x_;
}
inline void stNotifyResAppear::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 3;
inline bool stNotifyResAppear::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyResAppear::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyResAppear::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyResAppear::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 stNotifyResAppear::y() const {
  return y_;
}
inline void stNotifyResAppear::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 4;
inline bool stNotifyResAppear::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyResAppear::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyResAppear::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyResAppear::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 stNotifyResAppear::z() const {
  return z_;
}
inline void stNotifyResAppear::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// stNotifyResDisappear

// optional uint32 id = 1;
inline bool stNotifyResDisappear::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyResDisappear::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyResDisappear::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyResDisappear::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stNotifyResDisappear::id() const {
  return id_;
}
inline void stNotifyResDisappear::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stNotifyBuffAppear

// optional uint32 id = 1;
inline bool stNotifyBuffAppear::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyBuffAppear::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyBuffAppear::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyBuffAppear::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stNotifyBuffAppear::id() const {
  return id_;
}
inline void stNotifyBuffAppear::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 x = 2;
inline bool stNotifyBuffAppear::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyBuffAppear::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyBuffAppear::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyBuffAppear::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 stNotifyBuffAppear::x() const {
  return x_;
}
inline void stNotifyBuffAppear::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 3;
inline bool stNotifyBuffAppear::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyBuffAppear::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyBuffAppear::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyBuffAppear::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 stNotifyBuffAppear::y() const {
  return y_;
}
inline void stNotifyBuffAppear::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 4;
inline bool stNotifyBuffAppear::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyBuffAppear::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyBuffAppear::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyBuffAppear::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 stNotifyBuffAppear::z() const {
  return z_;
}
inline void stNotifyBuffAppear::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// optional uint32 buffID = 5;
inline bool stNotifyBuffAppear::has_buffid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stNotifyBuffAppear::set_has_buffid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stNotifyBuffAppear::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stNotifyBuffAppear::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 stNotifyBuffAppear::buffid() const {
  return buffid_;
}
inline void stNotifyBuffAppear::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
}

// -------------------------------------------------------------------

// stNotifyBuffDisappear

// optional uint32 id = 1;
inline bool stNotifyBuffDisappear::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyBuffDisappear::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyBuffDisappear::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyBuffDisappear::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stNotifyBuffDisappear::id() const {
  return id_;
}
inline void stNotifyBuffDisappear::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stOpCopyMapRes

// optional bool collect = 1;
inline bool stOpCopyMapRes::has_collect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOpCopyMapRes::set_has_collect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOpCopyMapRes::clear_has_collect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOpCopyMapRes::clear_collect() {
  collect_ = false;
  clear_has_collect();
}
inline bool stOpCopyMapRes::collect() const {
  return collect_;
}
inline void stOpCopyMapRes::set_collect(bool value) {
  set_has_collect();
  collect_ = value;
}

// optional uint32 time = 2;
inline bool stOpCopyMapRes::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOpCopyMapRes::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOpCopyMapRes::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOpCopyMapRes::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 stOpCopyMapRes::time() const {
  return time_;
}
inline void stOpCopyMapRes::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// stPlayerGotBuff

// optional uint32 buffID = 1;
inline bool stPlayerGotBuff::has_buffid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPlayerGotBuff::set_has_buffid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPlayerGotBuff::clear_has_buffid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPlayerGotBuff::clear_buffid() {
  buffid_ = 0u;
  clear_has_buffid();
}
inline ::google::protobuf::uint32 stPlayerGotBuff::buffid() const {
  return buffid_;
}
inline void stPlayerGotBuff::set_buffid(::google::protobuf::uint32 value) {
  set_has_buffid();
  buffid_ = value;
}

// -------------------------------------------------------------------

// stPlayerCollectSuccess

// optional uint32 score = 1;
inline bool stPlayerCollectSuccess::has_score() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPlayerCollectSuccess::set_has_score() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPlayerCollectSuccess::clear_has_score() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPlayerCollectSuccess::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stPlayerCollectSuccess::score() const {
  return score_;
}
inline void stPlayerCollectSuccess::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// stSynCampScore

// optional uint32 campID = 1;
inline bool stSynCampScore::has_campid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynCampScore::set_has_campid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynCampScore::clear_has_campid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynCampScore::clear_campid() {
  campid_ = 0u;
  clear_has_campid();
}
inline ::google::protobuf::uint32 stSynCampScore::campid() const {
  return campid_;
}
inline void stSynCampScore::set_campid(::google::protobuf::uint32 value) {
  set_has_campid();
  campid_ = value;
}

// optional uint32 score = 2;
inline bool stSynCampScore::has_score() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynCampScore::set_has_score() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynCampScore::clear_has_score() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynCampScore::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stSynCampScore::score() const {
  return score_;
}
inline void stSynCampScore::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// stUserRelive

// optional uint32 charID = 1;
inline bool stUserRelive::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserRelive::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserRelive::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserRelive::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stUserRelive::charid() const {
  return charid_;
}
inline void stUserRelive::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint32 x = 2;
inline bool stUserRelive::has_x() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUserRelive::set_has_x() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUserRelive::clear_has_x() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUserRelive::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 stUserRelive::x() const {
  return x_;
}
inline void stUserRelive::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 3;
inline bool stUserRelive::has_y() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUserRelive::set_has_y() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUserRelive::clear_has_y() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUserRelive::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 stUserRelive::y() const {
  return y_;
}
inline void stUserRelive::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 4;
inline bool stUserRelive::has_z() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUserRelive::set_has_z() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUserRelive::clear_has_z() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUserRelive::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 stUserRelive::z() const {
  return z_;
}
inline void stUserRelive::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// stNotifyUserPointToPos

// optional uint32 x = 1;
inline bool stNotifyUserPointToPos::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyUserPointToPos::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyUserPointToPos::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyUserPointToPos::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 stNotifyUserPointToPos::x() const {
  return x_;
}
inline void stNotifyUserPointToPos::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
}

// optional uint32 y = 2;
inline bool stNotifyUserPointToPos::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyUserPointToPos::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyUserPointToPos::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyUserPointToPos::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 stNotifyUserPointToPos::y() const {
  return y_;
}
inline void stNotifyUserPointToPos::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
}

// optional uint32 z = 3;
inline bool stNotifyUserPointToPos::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stNotifyUserPointToPos::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stNotifyUserPointToPos::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stNotifyUserPointToPos::clear_z() {
  z_ = 0u;
  clear_has_z();
}
inline ::google::protobuf::uint32 stNotifyUserPointToPos::z() const {
  return z_;
}
inline void stNotifyUserPointToPos::set_z(::google::protobuf::uint32 value) {
  set_has_z();
  z_ = value;
}

// optional uint32 lasttime = 4;
inline bool stNotifyUserPointToPos::has_lasttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stNotifyUserPointToPos::set_has_lasttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stNotifyUserPointToPos::clear_has_lasttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stNotifyUserPointToPos::clear_lasttime() {
  lasttime_ = 0u;
  clear_has_lasttime();
}
inline ::google::protobuf::uint32 stNotifyUserPointToPos::lasttime() const {
  return lasttime_;
}
inline void stNotifyUserPointToPos::set_lasttime(::google::protobuf::uint32 value) {
  set_has_lasttime();
  lasttime_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Map

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyEnterMapInfo_ProtoModID>() {
  return ::Map::stNotifyEnterMapInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyEnterMapInfo_ProtoFunID>() {
  return ::Map::stNotifyEnterMapInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stClientLoadResFinish_ProtoModID>() {
  return ::Map::stClientLoadResFinish_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stClientLoadResFinish_ProtoFunID>() {
  return ::Map::stClientLoadResFinish_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::ReqEnterLevelMap_ProtoModID>() {
  return ::Map::ReqEnterLevelMap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::ReqEnterLevelMap_ProtoFunID>() {
  return ::Map::ReqEnterLevelMap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyEnterLevelMap_ProtoModID>() {
  return ::Map::NotifyEnterLevelMap_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyEnterLevelMap_ProtoFunID>() {
  return ::Map::NotifyEnterLevelMap_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stReqLeaveLevel_ProtoModID>() {
  return ::Map::stReqLeaveLevel_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stReqLeaveLevel_ProtoFunID>() {
  return ::Map::stReqLeaveLevel_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stLeaveLevelSuccess_ProtoModID>() {
  return ::Map::stLeaveLevelSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stLeaveLevelSuccess_ProtoFunID>() {
  return ::Map::stLeaveLevelSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stEnterLevelError_Error>() {
  return ::Map::stEnterLevelError_Error_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stEnterLevelError_ProtoModID>() {
  return ::Map::stEnterLevelError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stEnterLevelError_ProtoFunID>() {
  return ::Map::stEnterLevelError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyPlayerAppear_ProtoModID>() {
  return ::Map::NotifyPlayerAppear_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyPlayerAppear_ProtoFunID>() {
  return ::Map::NotifyPlayerAppear_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyObjDisappear_ProtoModID>() {
  return ::Map::NotifyObjDisappear_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyObjDisappear_ProtoFunID>() {
  return ::Map::NotifyObjDisappear_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyNpcAppear_ProtoModID>() {
  return ::Map::NotifyNpcAppear_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyNpcAppear_ProtoFunID>() {
  return ::Map::NotifyNpcAppear_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyHeroAppear_ProtoModID>() {
  return ::Map::NotifyHeroAppear_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::NotifyHeroAppear_ProtoFunID>() {
  return ::Map::NotifyHeroAppear_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::ReqMove_ProtoModID>() {
  return ::Map::ReqMove_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::ReqMove_ProtoFunID>() {
  return ::Map::ReqMove_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyMODMove_ProtoModID>() {
  return ::Map::stNotifyMODMove_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyMODMove_ProtoFunID>() {
  return ::Map::stNotifyMODMove_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stThrowSkill_ProtoModID>() {
  return ::Map::stThrowSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stThrowSkill_ProtoFunID>() {
  return ::Map::stThrowSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyHit_ProtoModID>() {
  return ::Map::stNotifyHit_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyHit_ProtoFunID>() {
  return ::Map::stNotifyHit_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::AttackResult_ProtoModID>() {
  return ::Map::AttackResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::AttackResult_ProtoFunID>() {
  return ::Map::AttackResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stMapObjAddHP_ProtoModID>() {
  return ::Map::stMapObjAddHP_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stMapObjAddHP_ProtoFunID>() {
  return ::Map::stMapObjAddHP_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stInstantMove_ProtoModID>() {
  return ::Map::stInstantMove_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stInstantMove_ProtoFunID>() {
  return ::Map::stInstantMove_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stAttackFail_ErrorCode>() {
  return ::Map::stAttackFail_ErrorCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stAttackFail_ProtoModID>() {
  return ::Map::stAttackFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stAttackFail_ProtoFunID>() {
  return ::Map::stAttackFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stInterruptPlaySkill_ProtoModID>() {
  return ::Map::stInterruptPlaySkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stInterruptPlaySkill_ProtoFunID>() {
  return ::Map::stInterruptPlaySkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stMapObjectChgDir_ProtoModID>() {
  return ::Map::stMapObjectChgDir_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stMapObjectChgDir_ProtoFunID>() {
  return ::Map::stMapObjectChgDir_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stReqOnlineUserOnMainCity_ProtoModID>() {
  return ::Map::stReqOnlineUserOnMainCity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stReqOnlineUserOnMainCity_ProtoFunID>() {
  return ::Map::stReqOnlineUserOnMainCity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stOnlineUserOnMainCity_ProtoModID>() {
  return ::Map::stOnlineUserOnMainCity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stOnlineUserOnMainCity_ProtoFunID>() {
  return ::Map::stOnlineUserOnMainCity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stChangeHeroGroup_ProtoModID>() {
  return ::Map::stChangeHeroGroup_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stChangeHeroGroup_ProtoFunID>() {
  return ::Map::stChangeHeroGroup_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stChangeHeroGroupError_eResult>() {
  return ::Map::stChangeHeroGroupError_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stChangeHeroGroupError_ProtoModID>() {
  return ::Map::stChangeHeroGroupError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stChangeHeroGroupError_ProtoFunID>() {
  return ::Map::stChangeHeroGroupError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyObjMP_ProtoModID>() {
  return ::Map::stNotifyObjMP_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyObjMP_ProtoFunID>() {
  return ::Map::stNotifyObjMP_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyObjBati_ProtoModID>() {
  return ::Map::stNotifyObjBati_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyObjBati_ProtoFunID>() {
  return ::Map::stNotifyObjBati_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stAddBufferState2Me_ProtoModID>() {
  return ::Map::stAddBufferState2Me_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stAddBufferState2Me_ProtoFunID>() {
  return ::Map::stAddBufferState2Me_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stDelBufferState_ProtoModID>() {
  return ::Map::stDelBufferState_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stDelBufferState_ProtoFunID>() {
  return ::Map::stDelBufferState_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyExecAI_ProtoModID>() {
  return ::Map::stNotifyExecAI_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyExecAI_ProtoFunID>() {
  return ::Map::stNotifyExecAI_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stAlertBossAppear_ProtoModID>() {
  return ::Map::stAlertBossAppear_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stAlertBossAppear_ProtoFunID>() {
  return ::Map::stAlertBossAppear_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stReqChangeMainCity_ProtoModID>() {
  return ::Map::stReqChangeMainCity_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stReqChangeMainCity_ProtoFunID>() {
  return ::Map::stReqChangeMainCity_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyAddFireWall_ProtoModID>() {
  return ::Map::stNotifyAddFireWall_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyAddFireWall_ProtoFunID>() {
  return ::Map::stNotifyAddFireWall_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stBeginThunderDamage_ProtoModID>() {
  return ::Map::stBeginThunderDamage_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stBeginThunderDamage_ProtoFunID>() {
  return ::Map::stBeginThunderDamage_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stCalcThunderDamage_ProtoModID>() {
  return ::Map::stCalcThunderDamage_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stCalcThunderDamage_ProtoFunID>() {
  return ::Map::stCalcThunderDamage_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stDirectDamge_ProtoModID>() {
  return ::Map::stDirectDamge_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stDirectDamge_ProtoFunID>() {
  return ::Map::stDirectDamge_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyObjDie_ProtoModID>() {
  return ::Map::stNotifyObjDie_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyObjDie_ProtoFunID>() {
  return ::Map::stNotifyObjDie_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stBeginBattle_ProtoModID>() {
  return ::Map::stBeginBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stBeginBattle_ProtoFunID>() {
  return ::Map::stBeginBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stThrowSkillFail_eReason>() {
  return ::Map::stThrowSkillFail_eReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stThrowSkillFail_ProtoModID>() {
  return ::Map::stThrowSkillFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stThrowSkillFail_ProtoFunID>() {
  return ::Map::stThrowSkillFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyResAppear_ProtoModID>() {
  return ::Map::stNotifyResAppear_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyResAppear_ProtoFunID>() {
  return ::Map::stNotifyResAppear_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyResDisappear_ProtoModID>() {
  return ::Map::stNotifyResDisappear_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyResDisappear_ProtoFunID>() {
  return ::Map::stNotifyResDisappear_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyBuffAppear_ProtoModID>() {
  return ::Map::stNotifyBuffAppear_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyBuffAppear_ProtoFunID>() {
  return ::Map::stNotifyBuffAppear_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyBuffDisappear_ProtoModID>() {
  return ::Map::stNotifyBuffDisappear_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyBuffDisappear_ProtoFunID>() {
  return ::Map::stNotifyBuffDisappear_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stOpCopyMapRes_ProtoModID>() {
  return ::Map::stOpCopyMapRes_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stOpCopyMapRes_ProtoFunID>() {
  return ::Map::stOpCopyMapRes_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stPlayerGotBuff_ProtoModID>() {
  return ::Map::stPlayerGotBuff_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stPlayerGotBuff_ProtoFunID>() {
  return ::Map::stPlayerGotBuff_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stPlayerCollectSuccess_ProtoModID>() {
  return ::Map::stPlayerCollectSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stPlayerCollectSuccess_ProtoFunID>() {
  return ::Map::stPlayerCollectSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stSynCampScore_ProtoModID>() {
  return ::Map::stSynCampScore_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stSynCampScore_ProtoFunID>() {
  return ::Map::stSynCampScore_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stUserRelive_ProtoModID>() {
  return ::Map::stUserRelive_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stUserRelive_ProtoFunID>() {
  return ::Map::stUserRelive_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyUserPointToPos_ProtoModID>() {
  return ::Map::stNotifyUserPointToPos_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::stNotifyUserPointToPos_ProtoFunID>() {
  return ::Map::stNotifyUserPointToPos_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::eBeingState>() {
  return ::Map::eBeingState_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::eMapObjectType>() {
  return ::Map::eMapObjectType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::eCamp>() {
  return ::Map::eCamp_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Map::eAttResultType>() {
  return ::Map::eAttResultType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Map_2eproto__INCLUDED
