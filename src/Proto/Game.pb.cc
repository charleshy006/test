// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Game.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Game.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Game {

namespace {

const ::google::protobuf::Descriptor* stLoginGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLoginGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginGame_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginGame_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGateForwardGame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGateForwardGame_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGateForwardGame_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGateForwardGame_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGameForwardGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGameForwardGate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGameForwardGate_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGameForwardGate_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stKillOutUser_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stKillOutUser_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillOutUser_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillOutUser_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBroadbastProto2World_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadbastProto2World_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadbastProto2World_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadbastProto2World_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserLoginGameResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserLoginGameResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLoginGameResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLoginGameResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stBroadcastProto2UserList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stBroadcastProto2UserList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadcastProto2UserList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stBroadcastProto2UserList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyLevelUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyLevelUp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyLevelUp_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyLevelUp_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserLevelupLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserLevelupLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLevelupLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLevelupLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserLoginLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserLoginLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLoginLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserLoginLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stVipLevelupLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stVipLevelupLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stVipLevelupLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stVipLevelupLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHonourChgLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHonourChgLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHonourChgLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHonourChgLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stItemChgLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stItemChgLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stItemChgLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stItemChgLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stResourceChgLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stResourceChgLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDailyTaskLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDailyTaskLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDailyTaskLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDailyTaskLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRechargeLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRechargeLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRechargeLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRechargeLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPublishActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPublishActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPublishActivity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPublishActivity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPublishActivityResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPublishActivityResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPublishActivityResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPublishActivityResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUnloadActivity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUnloadActivity_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnloadActivity_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnloadActivity_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUnloadActivityResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUnloadActivityResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnloadActivityResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUnloadActivityResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMallBuyLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMallBuyLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMallBuyLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMallBuyLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stHeroPropChgLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stHeroPropChgLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroPropChgLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stHeroPropChgLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendGuildLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendGuildLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* sstSendGuildResLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  sstSendGuildResLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendModuleLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendModuleLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSkillChgLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSkillChgLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSkillChgLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSkillChgLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSpriteLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSpriteLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSpriteLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCopymapLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCopymapLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCopymapLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCopymapLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEquipChgLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEquipChgLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEquipChgLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEquipChgLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stActivityLog_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stActivityLog_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stActivityLog_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stActivityLog_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserCancel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserCancel_CancelType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserCancel_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserCancel_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUserCancelRes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUserCancelRes_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserCancelRes_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUserCancelRes_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPayType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPayType_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPayTypeCb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPayTypeCb_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stUpdateSvrOpenTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stUpdateSvrOpenTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAcitivityLimitPetItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAcitivityLimitPetItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSendLimitPetActivityData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendLimitPetActivityData_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GameModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eLoginGameResultType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Game_2eproto() {
  protobuf_AddDesc_Game_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Game.proto");
  GOOGLE_CHECK(file != NULL);
  stLoginGame_descriptor_ = file->message_type(0);
  static const int stLoginGame_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGame, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGame, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGame, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGame, port_),
  };
  stLoginGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLoginGame_descriptor_,
      stLoginGame::default_instance_,
      stLoginGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLoginGame));
  stLoginGame_ProtoModID_descriptor_ = stLoginGame_descriptor_->enum_type(0);
  stLoginGame_ProtoFunID_descriptor_ = stLoginGame_descriptor_->enum_type(1);
  stGateForwardGame_descriptor_ = file->message_type(1);
  static const int stGateForwardGame_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardGame, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardGame, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardGame, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardGame, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardGame, data_),
  };
  stGateForwardGame_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGateForwardGame_descriptor_,
      stGateForwardGame::default_instance_,
      stGateForwardGame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardGame, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGateForwardGame, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGateForwardGame));
  stGateForwardGame_ProtoModID_descriptor_ = stGateForwardGame_descriptor_->enum_type(0);
  stGateForwardGame_ProtoFunID_descriptor_ = stGateForwardGame_descriptor_->enum_type(1);
  stGameForwardGate_descriptor_ = file->message_type(2);
  static const int stGameForwardGate_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameForwardGate, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameForwardGate, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameForwardGate, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameForwardGate, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameForwardGate, data_),
  };
  stGameForwardGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGameForwardGate_descriptor_,
      stGameForwardGate::default_instance_,
      stGameForwardGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameForwardGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGameForwardGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGameForwardGate));
  stGameForwardGate_ProtoModID_descriptor_ = stGameForwardGate_descriptor_->enum_type(0);
  stGameForwardGate_ProtoFunID_descriptor_ = stGameForwardGate_descriptor_->enum_type(1);
  stKillOutUser_descriptor_ = file->message_type(3);
  static const int stKillOutUser_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutUser, charid_),
  };
  stKillOutUser_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stKillOutUser_descriptor_,
      stKillOutUser::default_instance_,
      stKillOutUser_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutUser, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutUser, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stKillOutUser));
  stKillOutUser_ProtoModID_descriptor_ = stKillOutUser_descriptor_->enum_type(0);
  stKillOutUser_ProtoFunID_descriptor_ = stKillOutUser_descriptor_->enum_type(1);
  stBroadbastProto2World_descriptor_ = file->message_type(4);
  static const int stBroadbastProto2World_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadbastProto2World, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadbastProto2World, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadbastProto2World, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadbastProto2World, data_),
  };
  stBroadbastProto2World_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadbastProto2World_descriptor_,
      stBroadbastProto2World::default_instance_,
      stBroadbastProto2World_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadbastProto2World, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadbastProto2World, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadbastProto2World));
  stBroadbastProto2World_ProtoModID_descriptor_ = stBroadbastProto2World_descriptor_->enum_type(0);
  stBroadbastProto2World_ProtoFunID_descriptor_ = stBroadbastProto2World_descriptor_->enum_type(1);
  stUserLoginGameResult_descriptor_ = file->message_type(5);
  static const int stUserLoginGameResult_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginGameResult, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginGameResult, accountid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginGameResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginGameResult, gameid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginGameResult, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginGameResult, type_),
  };
  stUserLoginGameResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserLoginGameResult_descriptor_,
      stUserLoginGameResult::default_instance_,
      stUserLoginGameResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginGameResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginGameResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserLoginGameResult));
  stUserLoginGameResult_ProtoModID_descriptor_ = stUserLoginGameResult_descriptor_->enum_type(0);
  stUserLoginGameResult_ProtoFunID_descriptor_ = stUserLoginGameResult_descriptor_->enum_type(1);
  stBroadcastProto2UserList_descriptor_ = file->message_type(6);
  static const int stBroadcastProto2UserList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2UserList, userlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2UserList, modid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2UserList, funid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2UserList, cmdlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2UserList, data_),
  };
  stBroadcastProto2UserList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stBroadcastProto2UserList_descriptor_,
      stBroadcastProto2UserList::default_instance_,
      stBroadcastProto2UserList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2UserList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stBroadcastProto2UserList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stBroadcastProto2UserList));
  stBroadcastProto2UserList_ProtoModID_descriptor_ = stBroadcastProto2UserList_descriptor_->enum_type(0);
  stBroadcastProto2UserList_ProtoFunID_descriptor_ = stBroadcastProto2UserList_descriptor_->enum_type(1);
  stNotifyLevelUp_descriptor_ = file->message_type(7);
  static const int stNotifyLevelUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLevelUp, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLevelUp, level_),
  };
  stNotifyLevelUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyLevelUp_descriptor_,
      stNotifyLevelUp::default_instance_,
      stNotifyLevelUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLevelUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLevelUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyLevelUp));
  stNotifyLevelUp_ProtoModID_descriptor_ = stNotifyLevelUp_descriptor_->enum_type(0);
  stNotifyLevelUp_ProtoFunID_descriptor_ = stNotifyLevelUp_descriptor_->enum_type(1);
  stUserLevelupLog_descriptor_ = file->message_type(8);
  static const int stUserLevelupLog_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLevelupLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLevelupLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLevelupLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLevelupLog, oldexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLevelupLog, newexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLevelupLog, oldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLevelupLog, newlv_),
  };
  stUserLevelupLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserLevelupLog_descriptor_,
      stUserLevelupLog::default_instance_,
      stUserLevelupLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLevelupLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLevelupLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserLevelupLog));
  stUserLevelupLog_ProtoModID_descriptor_ = stUserLevelupLog_descriptor_->enum_type(0);
  stUserLevelupLog_ProtoFunID_descriptor_ = stUserLevelupLog_descriptor_->enum_type(1);
  stUserLoginLog_descriptor_ = file->message_type(9);
  static const int stUserLoginLog_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, isadvuser_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, deviceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, isenterselectlog_),
  };
  stUserLoginLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserLoginLog_descriptor_,
      stUserLoginLog::default_instance_,
      stUserLoginLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserLoginLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserLoginLog));
  stUserLoginLog_ProtoModID_descriptor_ = stUserLoginLog_descriptor_->enum_type(0);
  stUserLoginLog_ProtoFunID_descriptor_ = stUserLoginLog_descriptor_->enum_type(1);
  stVipLevelupLog_descriptor_ = file->message_type(10);
  static const int stVipLevelupLog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVipLevelupLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVipLevelupLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVipLevelupLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVipLevelupLog, oldexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVipLevelupLog, newexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVipLevelupLog, adddiamond_),
  };
  stVipLevelupLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stVipLevelupLog_descriptor_,
      stVipLevelupLog::default_instance_,
      stVipLevelupLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVipLevelupLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stVipLevelupLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stVipLevelupLog));
  stVipLevelupLog_ProtoModID_descriptor_ = stVipLevelupLog_descriptor_->enum_type(0);
  stVipLevelupLog_ProtoFunID_descriptor_ = stVipLevelupLog_descriptor_->enum_type(1);
  stHonourChgLog_descriptor_ = file->message_type(11);
  static const int stHonourChgLog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonourChgLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonourChgLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonourChgLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonourChgLog, oldhonour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonourChgLog, newhonour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonourChgLog, reason_),
  };
  stHonourChgLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHonourChgLog_descriptor_,
      stHonourChgLog::default_instance_,
      stHonourChgLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonourChgLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHonourChgLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHonourChgLog));
  stHonourChgLog_ProtoModID_descriptor_ = stHonourChgLog_descriptor_->enum_type(0);
  stHonourChgLog_ProtoFunID_descriptor_ = stHonourChgLog_descriptor_->enum_type(1);
  stItemChgLog_descriptor_ = file->message_type(12);
  static const int stItemChgLog_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, reason_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, userlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, isadd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, raiselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, refinelv_),
  };
  stItemChgLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stItemChgLog_descriptor_,
      stItemChgLog::default_instance_,
      stItemChgLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stItemChgLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stItemChgLog));
  stItemChgLog_ProtoModID_descriptor_ = stItemChgLog_descriptor_->enum_type(0);
  stItemChgLog_ProtoFunID_descriptor_ = stItemChgLog_descriptor_->enum_type(1);
  stResourceChgLog_descriptor_ = file->message_type(13);
  static const int stResourceChgLog_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, addnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, oldvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, newvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, reason_),
  };
  stResourceChgLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stResourceChgLog_descriptor_,
      stResourceChgLog::default_instance_,
      stResourceChgLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stResourceChgLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stResourceChgLog));
  stResourceChgLog_ProtoModID_descriptor_ = stResourceChgLog_descriptor_->enum_type(0);
  stResourceChgLog_ProtoFunID_descriptor_ = stResourceChgLog_descriptor_->enum_type(1);
  stDailyTaskLog_descriptor_ = file->message_type(14);
  static const int stDailyTaskLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskLog, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskLog, taskname_),
  };
  stDailyTaskLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDailyTaskLog_descriptor_,
      stDailyTaskLog::default_instance_,
      stDailyTaskLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDailyTaskLog));
  stDailyTaskLog_ProtoModID_descriptor_ = stDailyTaskLog_descriptor_->enum_type(0);
  stDailyTaskLog_ProtoFunID_descriptor_ = stDailyTaskLog_descriptor_->enum_type(1);
  stRechargeLog_descriptor_ = file->message_type(15);
  static const int stRechargeLog_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, tid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, rechargenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, diamondnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, newrecharge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, adddiamond_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, itemid_),
  };
  stRechargeLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRechargeLog_descriptor_,
      stRechargeLog::default_instance_,
      stRechargeLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRechargeLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRechargeLog));
  stRechargeLog_ProtoModID_descriptor_ = stRechargeLog_descriptor_->enum_type(0);
  stRechargeLog_ProtoFunID_descriptor_ = stRechargeLog_descriptor_->enum_type(1);
  stPublishActivity_descriptor_ = file->message_type(16);
  static const int stPublishActivity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPublishActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPublishActivity, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPublishActivity, webconnid_),
  };
  stPublishActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPublishActivity_descriptor_,
      stPublishActivity::default_instance_,
      stPublishActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPublishActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPublishActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPublishActivity));
  stPublishActivity_ProtoModID_descriptor_ = stPublishActivity_descriptor_->enum_type(0);
  stPublishActivity_ProtoFunID_descriptor_ = stPublishActivity_descriptor_->enum_type(1);
  stPublishActivityResult_descriptor_ = file->message_type(17);
  static const int stPublishActivityResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPublishActivityResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPublishActivityResult, webconnid_),
  };
  stPublishActivityResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPublishActivityResult_descriptor_,
      stPublishActivityResult::default_instance_,
      stPublishActivityResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPublishActivityResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPublishActivityResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPublishActivityResult));
  stPublishActivityResult_ProtoModID_descriptor_ = stPublishActivityResult_descriptor_->enum_type(0);
  stPublishActivityResult_ProtoFunID_descriptor_ = stPublishActivityResult_descriptor_->enum_type(1);
  stUnloadActivity_descriptor_ = file->message_type(18);
  static const int stUnloadActivity_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnloadActivity, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnloadActivity, webconnid_),
  };
  stUnloadActivity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUnloadActivity_descriptor_,
      stUnloadActivity::default_instance_,
      stUnloadActivity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnloadActivity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnloadActivity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUnloadActivity));
  stUnloadActivity_ProtoModID_descriptor_ = stUnloadActivity_descriptor_->enum_type(0);
  stUnloadActivity_ProtoFunID_descriptor_ = stUnloadActivity_descriptor_->enum_type(1);
  stUnloadActivityResult_descriptor_ = file->message_type(19);
  static const int stUnloadActivityResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnloadActivityResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnloadActivityResult, webconnid_),
  };
  stUnloadActivityResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUnloadActivityResult_descriptor_,
      stUnloadActivityResult::default_instance_,
      stUnloadActivityResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnloadActivityResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUnloadActivityResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUnloadActivityResult));
  stUnloadActivityResult_ProtoModID_descriptor_ = stUnloadActivityResult_descriptor_->enum_type(0);
  stUnloadActivityResult_ProtoFunID_descriptor_ = stUnloadActivityResult_descriptor_->enum_type(1);
  stMallBuyLog_descriptor_ = file->message_type(20);
  static const int stMallBuyLog_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, shopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, resid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, resnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, itemnum_),
  };
  stMallBuyLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMallBuyLog_descriptor_,
      stMallBuyLog::default_instance_,
      stMallBuyLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMallBuyLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMallBuyLog));
  stMallBuyLog_ProtoModID_descriptor_ = stMallBuyLog_descriptor_->enum_type(0);
  stMallBuyLog_ProtoFunID_descriptor_ = stMallBuyLog_descriptor_->enum_type(1);
  stHeroPropChgLog_descriptor_ = file->message_type(21);
  static const int stHeroPropChgLog_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, heroid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, oldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, newlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, oldevolv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, newevolv_),
  };
  stHeroPropChgLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stHeroPropChgLog_descriptor_,
      stHeroPropChgLog::default_instance_,
      stHeroPropChgLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stHeroPropChgLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stHeroPropChgLog));
  stHeroPropChgLog_ProtoModID_descriptor_ = stHeroPropChgLog_descriptor_->enum_type(0);
  stHeroPropChgLog_ProtoFunID_descriptor_ = stHeroPropChgLog_descriptor_->enum_type(1);
  stSendGuildLog_descriptor_ = file->message_type(22);
  static const int stSendGuildLog_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, opobjid_),
  };
  stSendGuildLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendGuildLog_descriptor_,
      stSendGuildLog::default_instance_,
      stSendGuildLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendGuildLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendGuildLog));
  stSendGuildLog_ProtoModID_descriptor_ = stSendGuildLog_descriptor_->enum_type(0);
  stSendGuildLog_ProtoFunID_descriptor_ = stSendGuildLog_descriptor_->enum_type(1);
  sstSendGuildResLog_descriptor_ = file->message_type(23);
  static const int sstSendGuildResLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, oldval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, newval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, reason_),
  };
  sstSendGuildResLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      sstSendGuildResLog_descriptor_,
      sstSendGuildResLog::default_instance_,
      sstSendGuildResLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(sstSendGuildResLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(sstSendGuildResLog));
  sstSendGuildResLog_ProtoModID_descriptor_ = sstSendGuildResLog_descriptor_->enum_type(0);
  sstSendGuildResLog_ProtoFunID_descriptor_ = sstSendGuildResLog_descriptor_->enum_type(1);
  stSendModuleLog_descriptor_ = file->message_type(24);
  static const int stSendModuleLog_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, account_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, opid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, module_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, othercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, oldrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, newrank_),
  };
  stSendModuleLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendModuleLog_descriptor_,
      stSendModuleLog::default_instance_,
      stSendModuleLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendModuleLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendModuleLog));
  stSendModuleLog_ProtoModID_descriptor_ = stSendModuleLog_descriptor_->enum_type(0);
  stSendModuleLog_ProtoFunID_descriptor_ = stSendModuleLog_descriptor_->enum_type(1);
  stSkillChgLog_descriptor_ = file->message_type(25);
  static const int stSkillChgLog_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSkillChgLog, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSkillChgLog, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSkillChgLog, oldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSkillChgLog, newlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSkillChgLog, decgoldcoind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSkillChgLog, action_),
  };
  stSkillChgLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSkillChgLog_descriptor_,
      stSkillChgLog::default_instance_,
      stSkillChgLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSkillChgLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSkillChgLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSkillChgLog));
  stSkillChgLog_ProtoModID_descriptor_ = stSkillChgLog_descriptor_->enum_type(0);
  stSkillChgLog_ProtoFunID_descriptor_ = stSkillChgLog_descriptor_->enum_type(1);
  stSpriteLog_descriptor_ = file->message_type(26);
  static const int stSpriteLog_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteLog, spriteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteLog, oldlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteLog, newlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteLog, consume_),
  };
  stSpriteLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSpriteLog_descriptor_,
      stSpriteLog::default_instance_,
      stSpriteLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSpriteLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSpriteLog));
  stSpriteLog_ProtoModID_descriptor_ = stSpriteLog_descriptor_->enum_type(0);
  stSpriteLog_ProtoFunID_descriptor_ = stSpriteLog_descriptor_->enum_type(1);
  stCopymapLog_descriptor_ = file->message_type(27);
  static const int stCopymapLog_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapLog, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapLog, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapLog, action_),
  };
  stCopymapLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCopymapLog_descriptor_,
      stCopymapLog::default_instance_,
      stCopymapLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCopymapLog));
  stCopymapLog_ProtoModID_descriptor_ = stCopymapLog_descriptor_->enum_type(0);
  stCopymapLog_ProtoFunID_descriptor_ = stCopymapLog_descriptor_->enum_type(1);
  stEquipChgLog_descriptor_ = file->message_type(28);
  static const int stEquipChgLog_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, oldraiselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, newraiselv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, oldrefinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, newrefinelv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, decgoldcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, decyuntie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, decitemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, addgoldcoin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, addyuntie_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, additemid_),
  };
  stEquipChgLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEquipChgLog_descriptor_,
      stEquipChgLog::default_instance_,
      stEquipChgLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEquipChgLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEquipChgLog));
  stEquipChgLog_ProtoModID_descriptor_ = stEquipChgLog_descriptor_->enum_type(0);
  stEquipChgLog_ProtoFunID_descriptor_ = stEquipChgLog_descriptor_->enum_type(1);
  stActivityLog_descriptor_ = file->message_type(29);
  static const int stActivityLog_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityLog, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityLog, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityLog, activityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityLog, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityLog, desc_),
  };
  stActivityLog_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stActivityLog_descriptor_,
      stActivityLog::default_instance_,
      stActivityLog_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityLog, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stActivityLog, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stActivityLog));
  stActivityLog_ProtoModID_descriptor_ = stActivityLog_descriptor_->enum_type(0);
  stActivityLog_ProtoFunID_descriptor_ = stActivityLog_descriptor_->enum_type(1);
  stUserCancel_descriptor_ = file->message_type(30);
  static const int stUserCancel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCancel, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCancel, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCancel, webconnid_),
  };
  stUserCancel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserCancel_descriptor_,
      stUserCancel::default_instance_,
      stUserCancel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCancel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCancel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserCancel));
  stUserCancel_CancelType_descriptor_ = stUserCancel_descriptor_->enum_type(0);
  stUserCancel_ProtoModID_descriptor_ = stUserCancel_descriptor_->enum_type(1);
  stUserCancel_ProtoFunID_descriptor_ = stUserCancel_descriptor_->enum_type(2);
  stUserCancelRes_descriptor_ = file->message_type(31);
  static const int stUserCancelRes_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCancelRes, res_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCancelRes, webconnid_),
  };
  stUserCancelRes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUserCancelRes_descriptor_,
      stUserCancelRes::default_instance_,
      stUserCancelRes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCancelRes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUserCancelRes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUserCancelRes));
  stUserCancelRes_ProtoModID_descriptor_ = stUserCancelRes_descriptor_->enum_type(0);
  stUserCancelRes_ProtoFunID_descriptor_ = stUserCancelRes_descriptor_->enum_type(1);
  stReqPayType_descriptor_ = file->message_type(32);
  static const int stReqPayType_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, isextend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, data_),
  };
  stReqPayType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPayType_descriptor_,
      stReqPayType::default_instance_,
      stReqPayType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPayType));
  stReqPayType_ProtoModID_descriptor_ = stReqPayType_descriptor_->enum_type(0);
  stReqPayType_ProtoFunID_descriptor_ = stReqPayType_descriptor_->enum_type(1);
  stReqPayTypeCb_descriptor_ = file->message_type(33);
  static const int stReqPayTypeCb_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, paytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, res_),
  };
  stReqPayTypeCb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPayTypeCb_descriptor_,
      stReqPayTypeCb::default_instance_,
      stReqPayTypeCb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPayTypeCb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPayTypeCb));
  stReqPayTypeCb_ProtoModID_descriptor_ = stReqPayTypeCb_descriptor_->enum_type(0);
  stReqPayTypeCb_ProtoFunID_descriptor_ = stReqPayTypeCb_descriptor_->enum_type(1);
  stUpdateSvrOpenTime_descriptor_ = file->message_type(34);
  static const int stUpdateSvrOpenTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateSvrOpenTime, time_),
  };
  stUpdateSvrOpenTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stUpdateSvrOpenTime_descriptor_,
      stUpdateSvrOpenTime::default_instance_,
      stUpdateSvrOpenTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateSvrOpenTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stUpdateSvrOpenTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stUpdateSvrOpenTime));
  stUpdateSvrOpenTime_ProtoModID_descriptor_ = stUpdateSvrOpenTime_descriptor_->enum_type(0);
  stUpdateSvrOpenTime_ProtoFunID_descriptor_ = stUpdateSvrOpenTime_descriptor_->enum_type(1);
  stAcitivityLimitPetItem_descriptor_ = file->message_type(35);
  static const int stAcitivityLimitPetItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, activiyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, endtime_),
  };
  stAcitivityLimitPetItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAcitivityLimitPetItem_descriptor_,
      stAcitivityLimitPetItem::default_instance_,
      stAcitivityLimitPetItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcitivityLimitPetItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAcitivityLimitPetItem));
  stSendLimitPetActivityData_descriptor_ = file->message_type(36);
  static const int stSendLimitPetActivityData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLimitPetActivityData, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLimitPetActivityData, item_),
  };
  stSendLimitPetActivityData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendLimitPetActivityData_descriptor_,
      stSendLimitPetActivityData::default_instance_,
      stSendLimitPetActivityData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLimitPetActivityData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendLimitPetActivityData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendLimitPetActivityData));
  stSendLimitPetActivityData_ProtoModID_descriptor_ = stSendLimitPetActivityData_descriptor_->enum_type(0);
  stSendLimitPetActivityData_ProtoFunID_descriptor_ = stSendLimitPetActivityData_descriptor_->enum_type(1);
  GameModID_descriptor_ = file->enum_type(0);
  eLoginGameResultType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Game_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLoginGame_descriptor_, &stLoginGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGateForwardGame_descriptor_, &stGateForwardGame::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGameForwardGate_descriptor_, &stGameForwardGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stKillOutUser_descriptor_, &stKillOutUser::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadbastProto2World_descriptor_, &stBroadbastProto2World::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserLoginGameResult_descriptor_, &stUserLoginGameResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stBroadcastProto2UserList_descriptor_, &stBroadcastProto2UserList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyLevelUp_descriptor_, &stNotifyLevelUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserLevelupLog_descriptor_, &stUserLevelupLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserLoginLog_descriptor_, &stUserLoginLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stVipLevelupLog_descriptor_, &stVipLevelupLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHonourChgLog_descriptor_, &stHonourChgLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stItemChgLog_descriptor_, &stItemChgLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stResourceChgLog_descriptor_, &stResourceChgLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDailyTaskLog_descriptor_, &stDailyTaskLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRechargeLog_descriptor_, &stRechargeLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPublishActivity_descriptor_, &stPublishActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPublishActivityResult_descriptor_, &stPublishActivityResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUnloadActivity_descriptor_, &stUnloadActivity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUnloadActivityResult_descriptor_, &stUnloadActivityResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMallBuyLog_descriptor_, &stMallBuyLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stHeroPropChgLog_descriptor_, &stHeroPropChgLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendGuildLog_descriptor_, &stSendGuildLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    sstSendGuildResLog_descriptor_, &sstSendGuildResLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendModuleLog_descriptor_, &stSendModuleLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSkillChgLog_descriptor_, &stSkillChgLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSpriteLog_descriptor_, &stSpriteLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCopymapLog_descriptor_, &stCopymapLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEquipChgLog_descriptor_, &stEquipChgLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stActivityLog_descriptor_, &stActivityLog::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserCancel_descriptor_, &stUserCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUserCancelRes_descriptor_, &stUserCancelRes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPayType_descriptor_, &stReqPayType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPayTypeCb_descriptor_, &stReqPayTypeCb::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stUpdateSvrOpenTime_descriptor_, &stUpdateSvrOpenTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAcitivityLimitPetItem_descriptor_, &stAcitivityLimitPetItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendLimitPetActivityData_descriptor_, &stSendLimitPetActivityData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Game_2eproto() {
  delete stLoginGame::default_instance_;
  delete stLoginGame_reflection_;
  delete stGateForwardGame::default_instance_;
  delete stGateForwardGame_reflection_;
  delete stGameForwardGate::default_instance_;
  delete stGameForwardGate_reflection_;
  delete stKillOutUser::default_instance_;
  delete stKillOutUser_reflection_;
  delete stBroadbastProto2World::default_instance_;
  delete stBroadbastProto2World_reflection_;
  delete stUserLoginGameResult::default_instance_;
  delete stUserLoginGameResult_reflection_;
  delete stBroadcastProto2UserList::default_instance_;
  delete stBroadcastProto2UserList_reflection_;
  delete stNotifyLevelUp::default_instance_;
  delete stNotifyLevelUp_reflection_;
  delete stUserLevelupLog::default_instance_;
  delete stUserLevelupLog_reflection_;
  delete stUserLoginLog::default_instance_;
  delete stUserLoginLog_reflection_;
  delete stVipLevelupLog::default_instance_;
  delete stVipLevelupLog_reflection_;
  delete stHonourChgLog::default_instance_;
  delete stHonourChgLog_reflection_;
  delete stItemChgLog::default_instance_;
  delete stItemChgLog_reflection_;
  delete stResourceChgLog::default_instance_;
  delete stResourceChgLog_reflection_;
  delete stDailyTaskLog::default_instance_;
  delete stDailyTaskLog_reflection_;
  delete stRechargeLog::default_instance_;
  delete stRechargeLog_reflection_;
  delete stPublishActivity::default_instance_;
  delete stPublishActivity_reflection_;
  delete stPublishActivityResult::default_instance_;
  delete stPublishActivityResult_reflection_;
  delete stUnloadActivity::default_instance_;
  delete stUnloadActivity_reflection_;
  delete stUnloadActivityResult::default_instance_;
  delete stUnloadActivityResult_reflection_;
  delete stMallBuyLog::default_instance_;
  delete stMallBuyLog_reflection_;
  delete stHeroPropChgLog::default_instance_;
  delete stHeroPropChgLog_reflection_;
  delete stSendGuildLog::default_instance_;
  delete stSendGuildLog_reflection_;
  delete sstSendGuildResLog::default_instance_;
  delete sstSendGuildResLog_reflection_;
  delete stSendModuleLog::default_instance_;
  delete stSendModuleLog_reflection_;
  delete stSkillChgLog::default_instance_;
  delete stSkillChgLog_reflection_;
  delete stSpriteLog::default_instance_;
  delete stSpriteLog_reflection_;
  delete stCopymapLog::default_instance_;
  delete stCopymapLog_reflection_;
  delete stEquipChgLog::default_instance_;
  delete stEquipChgLog_reflection_;
  delete stActivityLog::default_instance_;
  delete stActivityLog_reflection_;
  delete stUserCancel::default_instance_;
  delete stUserCancel_reflection_;
  delete stUserCancelRes::default_instance_;
  delete stUserCancelRes_reflection_;
  delete stReqPayType::default_instance_;
  delete stReqPayType_reflection_;
  delete stReqPayTypeCb::default_instance_;
  delete stReqPayTypeCb_reflection_;
  delete stUpdateSvrOpenTime::default_instance_;
  delete stUpdateSvrOpenTime_reflection_;
  delete stAcitivityLimitPetItem::default_instance_;
  delete stAcitivityLimitPetItem_reflection_;
  delete stSendLimitPetActivityData::default_instance_;
  delete stSendLimitPetActivityData_reflection_;
}

void protobuf_AddDesc_Game_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nGame.proto\022\004Game\"y\n\013stLoginGame\022\017\n\007svr"
    "Type\030\001 \001(\r\022\r\n\005svrID\030\002 \001(\r\022\n\n\002ip\030\003 \001(\t\022\014\n"
    "\004port\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\001\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\001\"\221\001\n\021stGateForwardG"
    "ame\022\016\n\006charID\030\001 \001(\r\022\r\n\005modID\030\002 \001(\r\022\r\n\005fu"
    "nID\030\003 \001(\r\022\016\n\006cmdLen\030\004 \001(\r\022\014\n\004data\030\005 \001(\014\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\001\"\221\001\n\021stGameForwardGate\022\016\n\006charI"
    "D\030\001 \001(\r\022\r\n\005modID\030\002 \001(\r\022\r\n\005funID\030\003 \001(\r\022\016\n"
    "\006cmdLen\030\004 \001(\r\022\014\n\004data\030\005 \001(\014\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\002\"Q\n"
    "\rstKillOutUser\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\003"
    "\"\206\001\n\026stBroadbastProto2World\022\r\n\005modID\030\001 \001"
    "(\r\022\r\n\005funID\030\002 \001(\r\022\016\n\006cmdLen\030\003 \001(\r\022\014\n\004dat"
    "a\030\004 \001(\014\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\004\"\304\001\n\025stUserLoginGameRes"
    "ult\022\017\n\007account\030\001 \001(\t\022\021\n\taccountID\030\002 \001(\r\022"
    "\016\n\006charID\030\003 \001(\r\022\016\n\006gameID\030\004 \001(\r\022\013\n\003ret\030\005"
    " \001(\r\022(\n\004type\030\006 \001(\0162\032.Game.eLoginGameResu"
    "ltType\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\005\"\233\001\n\031stBroadcastProto2Us"
    "erList\022\020\n\010userList\030\001 \003(\r\022\r\n\005modID\030\002 \001(\r\022"
    "\r\n\005funID\030\003 \001(\r\022\016\n\006cmdLen\030\004 \001(\r\022\014\n\004data\030\005"
    " \001(\014\"\027\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\006\"b\n\017stNotifyLevelUp\022\016\n\006cha"
    "rID\030\001 \001(\r\022\r\n\005level\030\002 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n\005FunID\020\007\"\261\001\n\020s"
    "tUserLevelupLog\022\016\n\006charID\030\001 \001(\r\022\017\n\007accou"
    "nt\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\016\n\006oldExp\030\004 \001(\r\022\016"
    "\n\006newExp\030\005 \001(\r\022\r\n\005oldLv\030\006 \001(\r\022\r\n\005newLv\030\007"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\001\"\336\001\n\016stUserLoginLog\022\016\n\006cha"
    "rID\030\001 \001(\r\022\017\n\007account\030\002 \001(\t\022\014\n\004name\030\003 \001(\t"
    "\022\n\n\002ip\030\004 \001(\t\022\021\n\tisAdvUser\030\005 \001(\r\022\014\n\004opID\030"
    "\006 \001(\r\022\022\n\ncreateTime\030\007 \001(\t\022\020\n\010deviceID\030\010 "
    "\001(\t\022\030\n\020isEnterSelectLog\030\t \001(\010\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\002\""
    "\246\001\n\017stVipLevelupLog\022\016\n\006charID\030\001 \001(\r\022\017\n\007a"
    "ccount\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\016\n\006oldExp\030\004 \001"
    "(\r\022\016\n\006newExp\030\005 \001(\r\022\022\n\naddDiamond\030\006 \001(\r\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020\003\"\247\001\n\016stHonourChgLog\022\016\n\006charID\030\001 "
    "\001(\r\022\017\n\007account\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\021\n\tol"
    "dHonour\030\004 \001(\r\022\021\n\tnewHonour\030\005 \001(\r\022\016\n\006reas"
    "on\030\006 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\004\"\355\001\n\014stItemChgLog\022\016\n\006c"
    "harID\030\001 \001(\r\022\017\n\007account\030\002 \001(\t\022\014\n\004name\030\003 \001"
    "(\t\022\016\n\006itemID\030\004 \001(\r\022\013\n\003num\030\005 \001(\r\022\016\n\006reaso"
    "n\030\006 \001(\t\022\016\n\006userLv\030\007 \001(\r\022\r\n\005vipLv\030\010 \001(\r\022\r"
    "\n\005isAdd\030\t \001(\010\022\017\n\007raiseLv\030\n \001(\r\022\020\n\010refine"
    "Lv\030\013 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\005\"\306\001\n\020stResourceChgLog\022"
    "\016\n\006charID\030\001 \001(\r\022\017\n\007account\030\002 \001(\t\022\014\n\004name"
    "\030\003 \001(\t\022\r\n\005resID\030\004 \001(\r\022\016\n\006addNum\030\005 \001(\r\022\020\n"
    "\010oldValue\030\006 \001(\r\022\020\n\010newValue\030\007 \001(\r\022\016\n\006rea"
    "son\030\010 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020\006\"\223\001\n\016stDailyTaskLog\022\016"
    "\n\006charID\030\001 \001(\r\022\017\n\007account\030\002 \001(\t\022\014\n\004name\030"
    "\003 \001(\t\022\016\n\006taskID\030\004 \001(\r\022\020\n\010taskName\030\005 \001(\t\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\007\"\374\001\n\rstRechargeLog\022\016\n\006charID\030\001 "
    "\001(\r\022\014\n\004name\030\002 \001(\t\022\017\n\007account\030\003 \001(\t\022\013\n\003ti"
    "d\030\004 \001(\t\022\023\n\013rechargeNum\030\005 \001(\r\022\022\n\ndiamondN"
    "um\030\006 \001(\r\022\023\n\013newRecharge\030\007 \001(\010\022\014\n\004opID\030\010 "
    "\001(\r\022\022\n\naddDiamond\030\t \001(\r\022\r\n\005vipLv\030\n \001(\r\022\016"
    "\n\006itemID\030\013 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020\010\"t\n\021stPublishAct"
    "ivity\022\n\n\002id\030\001 \001(\r\022\016\n\006config\030\002 \001(\t\022\021\n\tweb"
    "ConnID\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\t\"n\n\027stPublishActiv"
    "ityResult\022\016\n\006result\030\001 \001(\010\022\021\n\twebConnID\030\002"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020\n\"c\n\020stUnloadActivity\022\n\n\002id"
    "\030\001 \001(\r\022\021\n\twebConnID\030\002 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\013\"m\n\026s"
    "tUnloadActivityResult\022\016\n\006result\030\001 \001(\010\022\021\n"
    "\twebConnID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\014\"\335\001\n\014stMallBuy"
    "Log\022\016\n\006charID\030\001 \001(\r\022\017\n\007account\030\002 \001(\t\022\014\n\004"
    "name\030\003 \001(\t\022\r\n\005level\030\004 \001(\r\022\r\n\005vipLv\030\005 \001(\r"
    "\022\016\n\006shopID\030\006 \001(\r\022\r\n\005resID\030\007 \001(\r\022\016\n\006resNu"
    "m\030\010 \001(\r\022\016\n\006itemID\030\t \001(\r\022\017\n\007itemNum\030\n \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\r\"\363\001\n\020stHeroPropChgLog\022\016\n\006charI"
    "D\030\001 \001(\r\022\017\n\007account\030\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\r"
    "\n\005level\030\004 \001(\r\022\r\n\005vipLv\030\005 \001(\r\022\016\n\006heroID\030\006"
    " \001(\r\022\016\n\006action\030\007 \001(\r\022\r\n\005oldLv\030\010 \001(\r\022\r\n\005n"
    "ewLv\030\t \001(\r\022\020\n\010oldEvoLv\030\n \001(\r\022\020\n\010newEvoLv"
    "\030\013 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\016\"\301\001\n\016stSendGuildLog\022\017\n\007a"
    "ccount\030\001 \001(\t\022\014\n\004opID\030\002 \001(\r\022\016\n\006charID\030\003 \001"
    "(\r\022\r\n\005level\030\004 \001(\r\022\r\n\005vipLv\030\005 \001(\r\022\017\n\007guil"
    "dID\030\006 \001(\r\022\016\n\006action\030\007 \001(\t\022\017\n\007opObjID\030\010 \001"
    "(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\017\"\224\001\n\022sstSendGuildResLog\022\017\n\007g"
    "uildID\030\001 \001(\r\022\013\n\003res\030\002 \001(\t\022\016\n\006oldVal\030\003 \001("
    "\r\022\016\n\006newVal\030\004 \001(\r\022\016\n\006reason\030\005 \001(\t\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\020\"\372\001\n\017stSendModuleLog\022\017\n\007account\030\001 \001(\t"
    "\022\014\n\004opID\030\002 \001(\r\022\016\n\006charID\030\003 \001(\r\022\r\n\005level\030"
    "\004 \001(\r\022\r\n\005vipLv\030\005 \001(\r\022\016\n\006module\030\006 \001(\t\022\021\n\t"
    "copymapID\030\007 \001(\r\022\023\n\013otherCharID\030\010 \001(\t\022\016\n\006"
    "result\030\t \001(\010\022\017\n\007oldRank\030\n \001(\r\022\017\n\007newRank"
    "\030\013 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\021\"\243\001\n\rstSkillChgLog\022\017\n\007sk"
    "illID\030\001 \001(\r\022\013\n\003pos\030\002 \001(\r\022\r\n\005oldLv\030\003 \001(\r\022"
    "\r\n\005newLv\030\004 \001(\r\022\024\n\014decGoldCoind\030\005 \001(\r\022\016\n\006"
    "action\030\006 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\022\"\200\001\n\013stSpriteLog\022\020"
    "\n\010spriteID\030\001 \001(\r\022\r\n\005oldLv\030\002 \001(\r\022\r\n\005newLv"
    "\030\003 \001(\r\022\017\n\007consume\030\004 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\023\"p\n\014stC"
    "opymapLog\022\021\n\tcopymapID\030\001 \001(\r\022\013\n\003win\030\002 \001("
    "\010\022\016\n\006action\030\003 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\024\"\251\002\n\rstEquipC"
    "hgLog\022\016\n\006itemID\030\001 \001(\r\022\022\n\noldRaiseLv\030\002 \001("
    "\r\022\022\n\nnewRaiseLv\030\003 \001(\r\022\023\n\013oldRefineLv\030\004 \001"
    "(\r\022\023\n\013newRefineLv\030\005 \001(\r\022\016\n\006action\030\006 \001(\t\022"
    "\023\n\013decGoldcoin\030\007 \001(\r\022\021\n\tdecYuntie\030\010 \001(\r\022"
    "\021\n\tdecItemID\030\t \001(\r\022\023\n\013addGoldcoin\030\n \001(\r\022"
    "\021\n\taddYuntie\030\013 \001(\r\022\021\n\taddItemID\030\014 \001(\r\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\025\"\231\001\n\rstActivityLog\022\016\n\006charID\030\001 \001("
    "\r\022\022\n\nactivityID\030\002 \001(\r\022\024\n\014activityName\030\003 "
    "\001(\t\022\016\n\006stepID\030\004 \001(\r\022\014\n\004desc\030\005 \001(\t\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\026\"\261\001\n\014stUserCancel\022\016\n\006charID\030\001 \001(\r\022\014\n\004"
    "type\030\002 \001(\r\022\021\n\twebConnID\030\003 \001(\r\">\n\nCancelT"
    "ype\022\016\n\nMonth_Card\020\001\022\020\n\014Forever_Card\020\002\022\016\n"
    "\nGrown_Card\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020\027\"c\n\017stUserCancelR"
    "es\022\013\n\003res\030\001 \001(\t\022\021\n\twebConnID\030\002 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\030\"\242\001\n\014stReqPayType\022\016\n\006charID\030\001 \001(\r\022\016\n"
    "\006itemId\030\002 \001(\r\022\017\n\007orderId\030\003 \001(\t\022\017\n\007payTyp"
    "e\030\004 \001(\t\022\020\n\010isExtend\030\005 \001(\010\022\014\n\004data\030\006 \001(\t\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020\031\"\221\001\n\016stReqPayTypeCb\022\016\n\006charID\030\001"
    " \001(\r\022\016\n\006itemId\030\002 \001(\r\022\017\n\007orderId\030\003 \001(\t\022\017\n"
    "\007payType\030\004 \001(\t\022\013\n\003res\030\005 \001(\010\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\032\"U\n"
    "\023stUpdateSvrOpenTime\022\014\n\004time\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\033\"\\\n\027stAcitivityLimitPetItem\022\n\n\002id\030\001 "
    "\001(\r\022\021\n\tactiviyId\030\002 \001(\r\022\021\n\tstartTime\030\003 \001("
    "\r\022\017\n\007endTime\030\004 \001(\r\"\210\001\n\032stSendLimitPetAct"
    "ivityData\022\013\n\003msg\030\001 \001(\t\022+\n\004item\030\002 \003(\0132\035.G"
    "ame.stAcitivityLimitPetItem\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\003\"\027\n\nProtoFunID\022\t\n\005FunID\020\034*>\n"
    "\tGameModID\022\r\n\tLOGIN_MOD\020\001\022\021\n\rGATE2GAME_M"
    "OD\020\002\022\017\n\013WEBGAME_MOD\020\003*G\n\024eLoginGameResul"
    "tType\022\026\n\022eLoginResult_Login\020\001\022\027\n\023eLoginR"
    "esult_ChgSvr\020\002", 6134);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Game.proto", &protobuf_RegisterTypes);
  stLoginGame::default_instance_ = new stLoginGame();
  stGateForwardGame::default_instance_ = new stGateForwardGame();
  stGameForwardGate::default_instance_ = new stGameForwardGate();
  stKillOutUser::default_instance_ = new stKillOutUser();
  stBroadbastProto2World::default_instance_ = new stBroadbastProto2World();
  stUserLoginGameResult::default_instance_ = new stUserLoginGameResult();
  stBroadcastProto2UserList::default_instance_ = new stBroadcastProto2UserList();
  stNotifyLevelUp::default_instance_ = new stNotifyLevelUp();
  stUserLevelupLog::default_instance_ = new stUserLevelupLog();
  stUserLoginLog::default_instance_ = new stUserLoginLog();
  stVipLevelupLog::default_instance_ = new stVipLevelupLog();
  stHonourChgLog::default_instance_ = new stHonourChgLog();
  stItemChgLog::default_instance_ = new stItemChgLog();
  stResourceChgLog::default_instance_ = new stResourceChgLog();
  stDailyTaskLog::default_instance_ = new stDailyTaskLog();
  stRechargeLog::default_instance_ = new stRechargeLog();
  stPublishActivity::default_instance_ = new stPublishActivity();
  stPublishActivityResult::default_instance_ = new stPublishActivityResult();
  stUnloadActivity::default_instance_ = new stUnloadActivity();
  stUnloadActivityResult::default_instance_ = new stUnloadActivityResult();
  stMallBuyLog::default_instance_ = new stMallBuyLog();
  stHeroPropChgLog::default_instance_ = new stHeroPropChgLog();
  stSendGuildLog::default_instance_ = new stSendGuildLog();
  sstSendGuildResLog::default_instance_ = new sstSendGuildResLog();
  stSendModuleLog::default_instance_ = new stSendModuleLog();
  stSkillChgLog::default_instance_ = new stSkillChgLog();
  stSpriteLog::default_instance_ = new stSpriteLog();
  stCopymapLog::default_instance_ = new stCopymapLog();
  stEquipChgLog::default_instance_ = new stEquipChgLog();
  stActivityLog::default_instance_ = new stActivityLog();
  stUserCancel::default_instance_ = new stUserCancel();
  stUserCancelRes::default_instance_ = new stUserCancelRes();
  stReqPayType::default_instance_ = new stReqPayType();
  stReqPayTypeCb::default_instance_ = new stReqPayTypeCb();
  stUpdateSvrOpenTime::default_instance_ = new stUpdateSvrOpenTime();
  stAcitivityLimitPetItem::default_instance_ = new stAcitivityLimitPetItem();
  stSendLimitPetActivityData::default_instance_ = new stSendLimitPetActivityData();
  stLoginGame::default_instance_->InitAsDefaultInstance();
  stGateForwardGame::default_instance_->InitAsDefaultInstance();
  stGameForwardGate::default_instance_->InitAsDefaultInstance();
  stKillOutUser::default_instance_->InitAsDefaultInstance();
  stBroadbastProto2World::default_instance_->InitAsDefaultInstance();
  stUserLoginGameResult::default_instance_->InitAsDefaultInstance();
  stBroadcastProto2UserList::default_instance_->InitAsDefaultInstance();
  stNotifyLevelUp::default_instance_->InitAsDefaultInstance();
  stUserLevelupLog::default_instance_->InitAsDefaultInstance();
  stUserLoginLog::default_instance_->InitAsDefaultInstance();
  stVipLevelupLog::default_instance_->InitAsDefaultInstance();
  stHonourChgLog::default_instance_->InitAsDefaultInstance();
  stItemChgLog::default_instance_->InitAsDefaultInstance();
  stResourceChgLog::default_instance_->InitAsDefaultInstance();
  stDailyTaskLog::default_instance_->InitAsDefaultInstance();
  stRechargeLog::default_instance_->InitAsDefaultInstance();
  stPublishActivity::default_instance_->InitAsDefaultInstance();
  stPublishActivityResult::default_instance_->InitAsDefaultInstance();
  stUnloadActivity::default_instance_->InitAsDefaultInstance();
  stUnloadActivityResult::default_instance_->InitAsDefaultInstance();
  stMallBuyLog::default_instance_->InitAsDefaultInstance();
  stHeroPropChgLog::default_instance_->InitAsDefaultInstance();
  stSendGuildLog::default_instance_->InitAsDefaultInstance();
  sstSendGuildResLog::default_instance_->InitAsDefaultInstance();
  stSendModuleLog::default_instance_->InitAsDefaultInstance();
  stSkillChgLog::default_instance_->InitAsDefaultInstance();
  stSpriteLog::default_instance_->InitAsDefaultInstance();
  stCopymapLog::default_instance_->InitAsDefaultInstance();
  stEquipChgLog::default_instance_->InitAsDefaultInstance();
  stActivityLog::default_instance_->InitAsDefaultInstance();
  stUserCancel::default_instance_->InitAsDefaultInstance();
  stUserCancelRes::default_instance_->InitAsDefaultInstance();
  stReqPayType::default_instance_->InitAsDefaultInstance();
  stReqPayTypeCb::default_instance_->InitAsDefaultInstance();
  stUpdateSvrOpenTime::default_instance_->InitAsDefaultInstance();
  stAcitivityLimitPetItem::default_instance_->InitAsDefaultInstance();
  stSendLimitPetActivityData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Game_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Game_2eproto {
  StaticDescriptorInitializer_Game_2eproto() {
    protobuf_AddDesc_Game_2eproto();
  }
} static_descriptor_initializer_Game_2eproto_;
const ::google::protobuf::EnumDescriptor* GameModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GameModID_descriptor_;
}
bool GameModID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eLoginGameResultType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eLoginGameResultType_descriptor_;
}
bool eLoginGameResultType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLoginGame_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGame_ProtoModID_descriptor_;
}
bool stLoginGame_ProtoModID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginGame_ProtoModID stLoginGame::ModID;
const stLoginGame_ProtoModID stLoginGame::ProtoModID_MIN;
const stLoginGame_ProtoModID stLoginGame::ProtoModID_MAX;
const int stLoginGame::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLoginGame_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGame_ProtoFunID_descriptor_;
}
bool stLoginGame_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginGame_ProtoFunID stLoginGame::FunID;
const stLoginGame_ProtoFunID stLoginGame::ProtoFunID_MIN;
const stLoginGame_ProtoFunID stLoginGame::ProtoFunID_MAX;
const int stLoginGame::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLoginGame::kSvrTypeFieldNumber;
const int stLoginGame::kSvrIDFieldNumber;
const int stLoginGame::kIpFieldNumber;
const int stLoginGame::kPortFieldNumber;
#endif  // !_MSC_VER

stLoginGame::stLoginGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLoginGame::InitAsDefaultInstance() {
}

stLoginGame::stLoginGame(const stLoginGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLoginGame::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0u;
  svrid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLoginGame::~stLoginGame() {
  SharedDtor();
}

void stLoginGame::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void stLoginGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLoginGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginGame_descriptor_;
}

const stLoginGame& stLoginGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stLoginGame* stLoginGame::default_instance_ = NULL;

stLoginGame* stLoginGame::New() const {
  return new stLoginGame;
}

void stLoginGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrtype_ = 0u;
    svrid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLoginGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrID;
        break;
      }

      // optional uint32 svrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLoginGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrType = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtype(), output);
  }

  // optional uint32 svrID = 2;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLoginGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrType = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtype(), target);
  }

  // optional uint32 svrID = 2;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLoginGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrType = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

    // optional uint32 svrID = 2;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLoginGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLoginGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLoginGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLoginGame::MergeFrom(const stLoginGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLoginGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLoginGame::CopyFrom(const stLoginGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLoginGame::IsInitialized() const {

  return true;
}

void stLoginGame::Swap(stLoginGame* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    std::swap(svrid_, other->svrid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLoginGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLoginGame_descriptor_;
  metadata.reflection = stLoginGame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGateForwardGame_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGateForwardGame_ProtoModID_descriptor_;
}
bool stGateForwardGame_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGateForwardGame_ProtoModID stGateForwardGame::ModID;
const stGateForwardGame_ProtoModID stGateForwardGame::ProtoModID_MIN;
const stGateForwardGame_ProtoModID stGateForwardGame::ProtoModID_MAX;
const int stGateForwardGame::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGateForwardGame_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGateForwardGame_ProtoFunID_descriptor_;
}
bool stGateForwardGame_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGateForwardGame_ProtoFunID stGateForwardGame::FunID;
const stGateForwardGame_ProtoFunID stGateForwardGame::ProtoFunID_MIN;
const stGateForwardGame_ProtoFunID stGateForwardGame::ProtoFunID_MAX;
const int stGateForwardGame::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGateForwardGame::kCharIDFieldNumber;
const int stGateForwardGame::kModIDFieldNumber;
const int stGateForwardGame::kFunIDFieldNumber;
const int stGateForwardGame::kCmdLenFieldNumber;
const int stGateForwardGame::kDataFieldNumber;
#endif  // !_MSC_VER

stGateForwardGame::stGateForwardGame()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGateForwardGame::InitAsDefaultInstance() {
}

stGateForwardGame::stGateForwardGame(const stGateForwardGame& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGateForwardGame::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGateForwardGame::~stGateForwardGame() {
  SharedDtor();
}

void stGateForwardGame::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stGateForwardGame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGateForwardGame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGateForwardGame_descriptor_;
}

const stGateForwardGame& stGateForwardGame::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stGateForwardGame* stGateForwardGame::default_instance_ = NULL;

stGateForwardGame* stGateForwardGame::New() const {
  return new stGateForwardGame;
}

void stGateForwardGame::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGateForwardGame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGateForwardGame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdlen(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGateForwardGame::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdlen(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGateForwardGame::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 4;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGateForwardGame::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGateForwardGame* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGateForwardGame*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGateForwardGame::MergeFrom(const stGateForwardGame& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGateForwardGame::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGateForwardGame::CopyFrom(const stGateForwardGame& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGateForwardGame::IsInitialized() const {

  return true;
}

void stGateForwardGame::Swap(stGateForwardGame* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGateForwardGame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGateForwardGame_descriptor_;
  metadata.reflection = stGateForwardGame_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGameForwardGate_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGameForwardGate_ProtoModID_descriptor_;
}
bool stGameForwardGate_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGameForwardGate_ProtoModID stGameForwardGate::ModID;
const stGameForwardGate_ProtoModID stGameForwardGate::ProtoModID_MIN;
const stGameForwardGate_ProtoModID stGameForwardGate::ProtoModID_MAX;
const int stGameForwardGate::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGameForwardGate_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGameForwardGate_ProtoFunID_descriptor_;
}
bool stGameForwardGate_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGameForwardGate_ProtoFunID stGameForwardGate::FunID;
const stGameForwardGate_ProtoFunID stGameForwardGate::ProtoFunID_MIN;
const stGameForwardGate_ProtoFunID stGameForwardGate::ProtoFunID_MAX;
const int stGameForwardGate::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGameForwardGate::kCharIDFieldNumber;
const int stGameForwardGate::kModIDFieldNumber;
const int stGameForwardGate::kFunIDFieldNumber;
const int stGameForwardGate::kCmdLenFieldNumber;
const int stGameForwardGate::kDataFieldNumber;
#endif  // !_MSC_VER

stGameForwardGate::stGameForwardGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGameForwardGate::InitAsDefaultInstance() {
}

stGameForwardGate::stGameForwardGate(const stGameForwardGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGameForwardGate::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGameForwardGate::~stGameForwardGate() {
  SharedDtor();
}

void stGameForwardGate::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stGameForwardGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGameForwardGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGameForwardGate_descriptor_;
}

const stGameForwardGate& stGameForwardGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stGameForwardGate* stGameForwardGate::default_instance_ = NULL;

stGameForwardGate* stGameForwardGate::New() const {
  return new stGameForwardGate;
}

void stGameForwardGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGameForwardGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGameForwardGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdlen(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGameForwardGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdlen(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGameForwardGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 4;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGameForwardGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGameForwardGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGameForwardGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGameForwardGate::MergeFrom(const stGameForwardGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGameForwardGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGameForwardGate::CopyFrom(const stGameForwardGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGameForwardGate::IsInitialized() const {

  return true;
}

void stGameForwardGate::Swap(stGameForwardGate* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGameForwardGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGameForwardGate_descriptor_;
  metadata.reflection = stGameForwardGate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stKillOutUser_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutUser_ProtoModID_descriptor_;
}
bool stKillOutUser_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillOutUser_ProtoModID stKillOutUser::ModID;
const stKillOutUser_ProtoModID stKillOutUser::ProtoModID_MIN;
const stKillOutUser_ProtoModID stKillOutUser::ProtoModID_MAX;
const int stKillOutUser::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stKillOutUser_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutUser_ProtoFunID_descriptor_;
}
bool stKillOutUser_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillOutUser_ProtoFunID stKillOutUser::FunID;
const stKillOutUser_ProtoFunID stKillOutUser::ProtoFunID_MIN;
const stKillOutUser_ProtoFunID stKillOutUser::ProtoFunID_MAX;
const int stKillOutUser::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stKillOutUser::kCharIDFieldNumber;
#endif  // !_MSC_VER

stKillOutUser::stKillOutUser()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stKillOutUser::InitAsDefaultInstance() {
}

stKillOutUser::stKillOutUser(const stKillOutUser& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stKillOutUser::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stKillOutUser::~stKillOutUser() {
  SharedDtor();
}

void stKillOutUser::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stKillOutUser::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stKillOutUser::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutUser_descriptor_;
}

const stKillOutUser& stKillOutUser::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stKillOutUser* stKillOutUser::default_instance_ = NULL;

stKillOutUser* stKillOutUser::New() const {
  return new stKillOutUser;
}

void stKillOutUser::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stKillOutUser::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stKillOutUser::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stKillOutUser::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stKillOutUser::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stKillOutUser::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stKillOutUser* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stKillOutUser*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stKillOutUser::MergeFrom(const stKillOutUser& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stKillOutUser::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stKillOutUser::CopyFrom(const stKillOutUser& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stKillOutUser::IsInitialized() const {

  return true;
}

void stKillOutUser::Swap(stKillOutUser* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stKillOutUser::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stKillOutUser_descriptor_;
  metadata.reflection = stKillOutUser_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBroadbastProto2World_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadbastProto2World_ProtoModID_descriptor_;
}
bool stBroadbastProto2World_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadbastProto2World_ProtoModID stBroadbastProto2World::ModID;
const stBroadbastProto2World_ProtoModID stBroadbastProto2World::ProtoModID_MIN;
const stBroadbastProto2World_ProtoModID stBroadbastProto2World::ProtoModID_MAX;
const int stBroadbastProto2World::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBroadbastProto2World_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadbastProto2World_ProtoFunID_descriptor_;
}
bool stBroadbastProto2World_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadbastProto2World_ProtoFunID stBroadbastProto2World::FunID;
const stBroadbastProto2World_ProtoFunID stBroadbastProto2World::ProtoFunID_MIN;
const stBroadbastProto2World_ProtoFunID stBroadbastProto2World::ProtoFunID_MAX;
const int stBroadbastProto2World::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBroadbastProto2World::kModIDFieldNumber;
const int stBroadbastProto2World::kFunIDFieldNumber;
const int stBroadbastProto2World::kCmdLenFieldNumber;
const int stBroadbastProto2World::kDataFieldNumber;
#endif  // !_MSC_VER

stBroadbastProto2World::stBroadbastProto2World()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBroadbastProto2World::InitAsDefaultInstance() {
}

stBroadbastProto2World::stBroadbastProto2World(const stBroadbastProto2World& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBroadbastProto2World::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadbastProto2World::~stBroadbastProto2World() {
  SharedDtor();
}

void stBroadbastProto2World::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stBroadbastProto2World::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadbastProto2World::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadbastProto2World_descriptor_;
}

const stBroadbastProto2World& stBroadbastProto2World::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stBroadbastProto2World* stBroadbastProto2World::default_instance_ = NULL;

stBroadbastProto2World* stBroadbastProto2World::New() const {
  return new stBroadbastProto2World;
}

void stBroadbastProto2World::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadbastProto2World::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 modID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_data;
        break;
      }

      // optional bytes data = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBroadbastProto2World::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 modID = 1;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->modid(), output);
  }

  // optional uint32 funID = 2;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->funid(), output);
  }

  // optional uint32 cmdLen = 3;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cmdlen(), output);
  }

  // optional bytes data = 4;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBroadbastProto2World::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 modID = 1;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->modid(), target);
  }

  // optional uint32 funID = 2;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->funid(), target);
  }

  // optional uint32 cmdLen = 3;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->cmdlen(), target);
  }

  // optional bytes data = 4;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBroadbastProto2World::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 modID = 1;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 2;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 3;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 4;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadbastProto2World::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadbastProto2World* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadbastProto2World*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadbastProto2World::MergeFrom(const stBroadbastProto2World& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadbastProto2World::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadbastProto2World::CopyFrom(const stBroadbastProto2World& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadbastProto2World::IsInitialized() const {

  return true;
}

void stBroadbastProto2World::Swap(stBroadbastProto2World* other) {
  if (other != this) {
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadbastProto2World::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadbastProto2World_descriptor_;
  metadata.reflection = stBroadbastProto2World_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserLoginGameResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLoginGameResult_ProtoModID_descriptor_;
}
bool stUserLoginGameResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLoginGameResult_ProtoModID stUserLoginGameResult::ModID;
const stUserLoginGameResult_ProtoModID stUserLoginGameResult::ProtoModID_MIN;
const stUserLoginGameResult_ProtoModID stUserLoginGameResult::ProtoModID_MAX;
const int stUserLoginGameResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserLoginGameResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLoginGameResult_ProtoFunID_descriptor_;
}
bool stUserLoginGameResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLoginGameResult_ProtoFunID stUserLoginGameResult::FunID;
const stUserLoginGameResult_ProtoFunID stUserLoginGameResult::ProtoFunID_MIN;
const stUserLoginGameResult_ProtoFunID stUserLoginGameResult::ProtoFunID_MAX;
const int stUserLoginGameResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserLoginGameResult::kAccountFieldNumber;
const int stUserLoginGameResult::kAccountIDFieldNumber;
const int stUserLoginGameResult::kCharIDFieldNumber;
const int stUserLoginGameResult::kGameIDFieldNumber;
const int stUserLoginGameResult::kRetFieldNumber;
const int stUserLoginGameResult::kTypeFieldNumber;
#endif  // !_MSC_VER

stUserLoginGameResult::stUserLoginGameResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserLoginGameResult::InitAsDefaultInstance() {
}

stUserLoginGameResult::stUserLoginGameResult(const stUserLoginGameResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserLoginGameResult::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountid_ = 0u;
  charid_ = 0u;
  gameid_ = 0u;
  ret_ = 0u;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserLoginGameResult::~stUserLoginGameResult() {
  SharedDtor();
}

void stUserLoginGameResult::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (this != default_instance_) {
  }
}

void stUserLoginGameResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserLoginGameResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLoginGameResult_descriptor_;
}

const stUserLoginGameResult& stUserLoginGameResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stUserLoginGameResult* stUserLoginGameResult::default_instance_ = NULL;

stUserLoginGameResult* stUserLoginGameResult::New() const {
  return new stUserLoginGameResult;
}

void stUserLoginGameResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    accountid_ = 0u;
    charid_ = 0u;
    gameid_ = 0u;
    ret_ = 0u;
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserLoginGameResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_accountID;
        break;
      }

      // optional uint32 accountID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &accountid_)));
          set_has_accountid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_gameID;
        break;
      }

      // optional uint32 gameID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gameID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &gameid_)));
          set_has_gameid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ret;
        break;
      }

      // optional uint32 ret = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_type;
        break;
      }

      // optional .Game.eLoginGameResultType type = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::Game::eLoginGameResultType_IsValid(value)) {
            set_type(static_cast< ::Game::eLoginGameResultType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(6, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserLoginGameResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 accountID = 2;
  if (has_accountid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->accountid(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional uint32 gameID = 4;
  if (has_gameid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->gameid(), output);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->ret(), output);
  }

  // optional .Game.eLoginGameResultType type = 6;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserLoginGameResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 accountID = 2;
  if (has_accountid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->accountid(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional uint32 gameID = 4;
  if (has_gameid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->gameid(), target);
  }

  // optional uint32 ret = 5;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->ret(), target);
  }

  // optional .Game.eLoginGameResultType type = 6;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserLoginGameResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 accountID = 2;
    if (has_accountid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->accountid());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 gameID = 4;
    if (has_gameid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->gameid());
    }

    // optional uint32 ret = 5;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ret());
    }

    // optional .Game.eLoginGameResultType type = 6;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserLoginGameResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserLoginGameResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserLoginGameResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserLoginGameResult::MergeFrom(const stUserLoginGameResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_accountid()) {
      set_accountid(from.accountid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gameid()) {
      set_gameid(from.gameid());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserLoginGameResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserLoginGameResult::CopyFrom(const stUserLoginGameResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserLoginGameResult::IsInitialized() const {

  return true;
}

void stUserLoginGameResult::Swap(stUserLoginGameResult* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(accountid_, other->accountid_);
    std::swap(charid_, other->charid_);
    std::swap(gameid_, other->gameid_);
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserLoginGameResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserLoginGameResult_descriptor_;
  metadata.reflection = stUserLoginGameResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stBroadcastProto2UserList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastProto2UserList_ProtoModID_descriptor_;
}
bool stBroadcastProto2UserList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadcastProto2UserList_ProtoModID stBroadcastProto2UserList::ModID;
const stBroadcastProto2UserList_ProtoModID stBroadcastProto2UserList::ProtoModID_MIN;
const stBroadcastProto2UserList_ProtoModID stBroadcastProto2UserList::ProtoModID_MAX;
const int stBroadcastProto2UserList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stBroadcastProto2UserList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastProto2UserList_ProtoFunID_descriptor_;
}
bool stBroadcastProto2UserList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stBroadcastProto2UserList_ProtoFunID stBroadcastProto2UserList::FunID;
const stBroadcastProto2UserList_ProtoFunID stBroadcastProto2UserList::ProtoFunID_MIN;
const stBroadcastProto2UserList_ProtoFunID stBroadcastProto2UserList::ProtoFunID_MAX;
const int stBroadcastProto2UserList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stBroadcastProto2UserList::kUserListFieldNumber;
const int stBroadcastProto2UserList::kModIDFieldNumber;
const int stBroadcastProto2UserList::kFunIDFieldNumber;
const int stBroadcastProto2UserList::kCmdLenFieldNumber;
const int stBroadcastProto2UserList::kDataFieldNumber;
#endif  // !_MSC_VER

stBroadcastProto2UserList::stBroadcastProto2UserList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stBroadcastProto2UserList::InitAsDefaultInstance() {
}

stBroadcastProto2UserList::stBroadcastProto2UserList(const stBroadcastProto2UserList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stBroadcastProto2UserList::SharedCtor() {
  _cached_size_ = 0;
  modid_ = 0u;
  funid_ = 0u;
  cmdlen_ = 0u;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stBroadcastProto2UserList::~stBroadcastProto2UserList() {
  SharedDtor();
}

void stBroadcastProto2UserList::SharedDtor() {
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stBroadcastProto2UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stBroadcastProto2UserList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stBroadcastProto2UserList_descriptor_;
}

const stBroadcastProto2UserList& stBroadcastProto2UserList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stBroadcastProto2UserList* stBroadcastProto2UserList::default_instance_ = NULL;

stBroadcastProto2UserList* stBroadcastProto2UserList::New() const {
  return new stBroadcastProto2UserList;
}

void stBroadcastProto2UserList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    modid_ = 0u;
    funid_ = 0u;
    cmdlen_ = 0u;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  userlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stBroadcastProto2UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 userList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_userlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_userlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_userList;
        if (input->ExpectTag(16)) goto parse_modID;
        break;
      }

      // optional uint32 modID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_modID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &modid_)));
          set_has_modid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_funID;
        break;
      }

      // optional uint32 funID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_funID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &funid_)));
          set_has_funid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_cmdLen;
        break;
      }

      // optional uint32 cmdLen = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cmdLen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cmdlen_)));
          set_has_cmdlen();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_data;
        break;
      }

      // optional bytes data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stBroadcastProto2UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 userList = 1;
  for (int i = 0; i < this->userlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->userlist(i), output);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->modid(), output);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->funid(), output);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cmdlen(), output);
  }

  // optional bytes data = 5;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stBroadcastProto2UserList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 userList = 1;
  for (int i = 0; i < this->userlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->userlist(i), target);
  }

  // optional uint32 modID = 2;
  if (has_modid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->modid(), target);
  }

  // optional uint32 funID = 3;
  if (has_funid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->funid(), target);
  }

  // optional uint32 cmdLen = 4;
  if (has_cmdlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cmdlen(), target);
  }

  // optional bytes data = 5;
  if (has_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stBroadcastProto2UserList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 modID = 2;
    if (has_modid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->modid());
    }

    // optional uint32 funID = 3;
    if (has_funid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->funid());
    }

    // optional uint32 cmdLen = 4;
    if (has_cmdlen()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cmdlen());
    }

    // optional bytes data = 5;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->data());
    }

  }
  // repeated uint32 userList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->userlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->userlist(i));
    }
    total_size += 1 * this->userlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stBroadcastProto2UserList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stBroadcastProto2UserList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stBroadcastProto2UserList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stBroadcastProto2UserList::MergeFrom(const stBroadcastProto2UserList& from) {
  GOOGLE_CHECK_NE(&from, this);
  userlist_.MergeFrom(from.userlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_modid()) {
      set_modid(from.modid());
    }
    if (from.has_funid()) {
      set_funid(from.funid());
    }
    if (from.has_cmdlen()) {
      set_cmdlen(from.cmdlen());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stBroadcastProto2UserList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stBroadcastProto2UserList::CopyFrom(const stBroadcastProto2UserList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stBroadcastProto2UserList::IsInitialized() const {

  return true;
}

void stBroadcastProto2UserList::Swap(stBroadcastProto2UserList* other) {
  if (other != this) {
    userlist_.Swap(&other->userlist_);
    std::swap(modid_, other->modid_);
    std::swap(funid_, other->funid_);
    std::swap(cmdlen_, other->cmdlen_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stBroadcastProto2UserList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stBroadcastProto2UserList_descriptor_;
  metadata.reflection = stBroadcastProto2UserList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyLevelUp_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLevelUp_ProtoModID_descriptor_;
}
bool stNotifyLevelUp_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyLevelUp_ProtoModID stNotifyLevelUp::ModID;
const stNotifyLevelUp_ProtoModID stNotifyLevelUp::ProtoModID_MIN;
const stNotifyLevelUp_ProtoModID stNotifyLevelUp::ProtoModID_MAX;
const int stNotifyLevelUp::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyLevelUp_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLevelUp_ProtoFunID_descriptor_;
}
bool stNotifyLevelUp_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyLevelUp_ProtoFunID stNotifyLevelUp::FunID;
const stNotifyLevelUp_ProtoFunID stNotifyLevelUp::ProtoFunID_MIN;
const stNotifyLevelUp_ProtoFunID stNotifyLevelUp::ProtoFunID_MAX;
const int stNotifyLevelUp::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyLevelUp::kCharIDFieldNumber;
const int stNotifyLevelUp::kLevelFieldNumber;
#endif  // !_MSC_VER

stNotifyLevelUp::stNotifyLevelUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyLevelUp::InitAsDefaultInstance() {
}

stNotifyLevelUp::stNotifyLevelUp(const stNotifyLevelUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyLevelUp::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  level_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyLevelUp::~stNotifyLevelUp() {
  SharedDtor();
}

void stNotifyLevelUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyLevelUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyLevelUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLevelUp_descriptor_;
}

const stNotifyLevelUp& stNotifyLevelUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stNotifyLevelUp* stNotifyLevelUp::default_instance_ = NULL;

stNotifyLevelUp* stNotifyLevelUp::New() const {
  return new stNotifyLevelUp;
}

void stNotifyLevelUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    level_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyLevelUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyLevelUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyLevelUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyLevelUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyLevelUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyLevelUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyLevelUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyLevelUp::MergeFrom(const stNotifyLevelUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyLevelUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyLevelUp::CopyFrom(const stNotifyLevelUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyLevelUp::IsInitialized() const {

  return true;
}

void stNotifyLevelUp::Swap(stNotifyLevelUp* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyLevelUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyLevelUp_descriptor_;
  metadata.reflection = stNotifyLevelUp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserLevelupLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLevelupLog_ProtoModID_descriptor_;
}
bool stUserLevelupLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLevelupLog_ProtoModID stUserLevelupLog::ModID;
const stUserLevelupLog_ProtoModID stUserLevelupLog::ProtoModID_MIN;
const stUserLevelupLog_ProtoModID stUserLevelupLog::ProtoModID_MAX;
const int stUserLevelupLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserLevelupLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLevelupLog_ProtoFunID_descriptor_;
}
bool stUserLevelupLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLevelupLog_ProtoFunID stUserLevelupLog::FunID;
const stUserLevelupLog_ProtoFunID stUserLevelupLog::ProtoFunID_MIN;
const stUserLevelupLog_ProtoFunID stUserLevelupLog::ProtoFunID_MAX;
const int stUserLevelupLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserLevelupLog::kCharIDFieldNumber;
const int stUserLevelupLog::kAccountFieldNumber;
const int stUserLevelupLog::kNameFieldNumber;
const int stUserLevelupLog::kOldExpFieldNumber;
const int stUserLevelupLog::kNewExpFieldNumber;
const int stUserLevelupLog::kOldLvFieldNumber;
const int stUserLevelupLog::kNewLvFieldNumber;
#endif  // !_MSC_VER

stUserLevelupLog::stUserLevelupLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserLevelupLog::InitAsDefaultInstance() {
}

stUserLevelupLog::stUserLevelupLog(const stUserLevelupLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserLevelupLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldexp_ = 0u;
  newexp_ = 0u;
  oldlv_ = 0u;
  newlv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserLevelupLog::~stUserLevelupLog() {
  SharedDtor();
}

void stUserLevelupLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stUserLevelupLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserLevelupLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLevelupLog_descriptor_;
}

const stUserLevelupLog& stUserLevelupLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stUserLevelupLog* stUserLevelupLog::default_instance_ = NULL;

stUserLevelupLog* stUserLevelupLog::New() const {
  return new stUserLevelupLog;
}

void stUserLevelupLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    oldexp_ = 0u;
    newexp_ = 0u;
    oldlv_ = 0u;
    newlv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserLevelupLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oldExp;
        break;
      }

      // optional uint32 oldExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldexp_)));
          set_has_oldexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newExp;
        break;
      }

      // optional uint32 newExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newexp_)));
          set_has_newexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_oldLv;
        break;
      }

      // optional uint32 oldLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldlv_)));
          set_has_oldlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_newLv;
        break;
      }

      // optional uint32 newLv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newlv_)));
          set_has_newlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserLevelupLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 oldExp = 4;
  if (has_oldexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oldexp(), output);
  }

  // optional uint32 newExp = 5;
  if (has_newexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->newexp(), output);
  }

  // optional uint32 oldLv = 6;
  if (has_oldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->oldlv(), output);
  }

  // optional uint32 newLv = 7;
  if (has_newlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->newlv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserLevelupLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 oldExp = 4;
  if (has_oldexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oldexp(), target);
  }

  // optional uint32 newExp = 5;
  if (has_newexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->newexp(), target);
  }

  // optional uint32 oldLv = 6;
  if (has_oldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->oldlv(), target);
  }

  // optional uint32 newLv = 7;
  if (has_newlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->newlv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserLevelupLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 oldExp = 4;
    if (has_oldexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldexp());
    }

    // optional uint32 newExp = 5;
    if (has_newexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newexp());
    }

    // optional uint32 oldLv = 6;
    if (has_oldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldlv());
    }

    // optional uint32 newLv = 7;
    if (has_newlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newlv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserLevelupLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserLevelupLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserLevelupLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserLevelupLog::MergeFrom(const stUserLevelupLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_oldexp()) {
      set_oldexp(from.oldexp());
    }
    if (from.has_newexp()) {
      set_newexp(from.newexp());
    }
    if (from.has_oldlv()) {
      set_oldlv(from.oldlv());
    }
    if (from.has_newlv()) {
      set_newlv(from.newlv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserLevelupLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserLevelupLog::CopyFrom(const stUserLevelupLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserLevelupLog::IsInitialized() const {

  return true;
}

void stUserLevelupLog::Swap(stUserLevelupLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(oldexp_, other->oldexp_);
    std::swap(newexp_, other->newexp_);
    std::swap(oldlv_, other->oldlv_);
    std::swap(newlv_, other->newlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserLevelupLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserLevelupLog_descriptor_;
  metadata.reflection = stUserLevelupLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserLoginLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLoginLog_ProtoModID_descriptor_;
}
bool stUserLoginLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLoginLog_ProtoModID stUserLoginLog::ModID;
const stUserLoginLog_ProtoModID stUserLoginLog::ProtoModID_MIN;
const stUserLoginLog_ProtoModID stUserLoginLog::ProtoModID_MAX;
const int stUserLoginLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserLoginLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLoginLog_ProtoFunID_descriptor_;
}
bool stUserLoginLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserLoginLog_ProtoFunID stUserLoginLog::FunID;
const stUserLoginLog_ProtoFunID stUserLoginLog::ProtoFunID_MIN;
const stUserLoginLog_ProtoFunID stUserLoginLog::ProtoFunID_MAX;
const int stUserLoginLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserLoginLog::kCharIDFieldNumber;
const int stUserLoginLog::kAccountFieldNumber;
const int stUserLoginLog::kNameFieldNumber;
const int stUserLoginLog::kIpFieldNumber;
const int stUserLoginLog::kIsAdvUserFieldNumber;
const int stUserLoginLog::kOpIDFieldNumber;
const int stUserLoginLog::kCreateTimeFieldNumber;
const int stUserLoginLog::kDeviceIDFieldNumber;
const int stUserLoginLog::kIsEnterSelectLogFieldNumber;
#endif  // !_MSC_VER

stUserLoginLog::stUserLoginLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserLoginLog::InitAsDefaultInstance() {
}

stUserLoginLog::stUserLoginLog(const stUserLoginLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserLoginLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isadvuser_ = 0u;
  opid_ = 0u;
  createtime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  deviceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isenterselectlog_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserLoginLog::~stUserLoginLog() {
  SharedDtor();
}

void stUserLoginLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (createtime_ != &::google::protobuf::internal::kEmptyString) {
    delete createtime_;
  }
  if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
    delete deviceid_;
  }
  if (this != default_instance_) {
  }
}

void stUserLoginLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserLoginLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserLoginLog_descriptor_;
}

const stUserLoginLog& stUserLoginLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stUserLoginLog* stUserLoginLog::default_instance_ = NULL;

stUserLoginLog* stUserLoginLog::New() const {
  return new stUserLoginLog;
}

void stUserLoginLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    isadvuser_ = 0u;
    opid_ = 0u;
    if (has_createtime()) {
      if (createtime_ != &::google::protobuf::internal::kEmptyString) {
        createtime_->clear();
      }
    }
    if (has_deviceid()) {
      if (deviceid_ != &::google::protobuf::internal::kEmptyString) {
        deviceid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isenterselectlog_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserLoginLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isAdvUser;
        break;
      }

      // optional uint32 isAdvUser = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdvUser:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &isadvuser_)));
          set_has_isadvuser();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_createTime;
        break;
      }

      // optional string createTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_createtime()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->createtime().data(), this->createtime().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_deviceID;
        break;
      }

      // optional string deviceID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_deviceID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->deviceid().data(), this->deviceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isEnterSelectLog;
        break;
      }

      // optional bool isEnterSelectLog = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEnterSelectLog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isenterselectlog_)));
          set_has_isenterselectlog();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserLoginLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional uint32 isAdvUser = 5;
  if (has_isadvuser()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->isadvuser(), output);
  }

  // optional uint32 opID = 6;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->opid(), output);
  }

  // optional string createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->createtime(), output);
  }

  // optional string deviceID = 8;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->deviceid(), output);
  }

  // optional bool isEnterSelectLog = 9;
  if (has_isenterselectlog()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isenterselectlog(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserLoginLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional uint32 isAdvUser = 5;
  if (has_isadvuser()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->isadvuser(), target);
  }

  // optional uint32 opID = 6;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->opid(), target);
  }

  // optional string createTime = 7;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->createtime().data(), this->createtime().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->createtime(), target);
  }

  // optional string deviceID = 8;
  if (has_deviceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->deviceid().data(), this->deviceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->deviceid(), target);
  }

  // optional bool isEnterSelectLog = 9;
  if (has_isenterselectlog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isenterselectlog(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserLoginLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 isAdvUser = 5;
    if (has_isadvuser()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->isadvuser());
    }

    // optional uint32 opID = 6;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional string createTime = 7;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->createtime());
    }

    // optional string deviceID = 8;
    if (has_deviceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->deviceid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isEnterSelectLog = 9;
    if (has_isenterselectlog()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserLoginLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserLoginLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserLoginLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserLoginLog::MergeFrom(const stUserLoginLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_isadvuser()) {
      set_isadvuser(from.isadvuser());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_deviceid()) {
      set_deviceid(from.deviceid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isenterselectlog()) {
      set_isenterselectlog(from.isenterselectlog());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserLoginLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserLoginLog::CopyFrom(const stUserLoginLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserLoginLog::IsInitialized() const {

  return true;
}

void stUserLoginLog::Swap(stUserLoginLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(isadvuser_, other->isadvuser_);
    std::swap(opid_, other->opid_);
    std::swap(createtime_, other->createtime_);
    std::swap(deviceid_, other->deviceid_);
    std::swap(isenterselectlog_, other->isenterselectlog_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserLoginLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserLoginLog_descriptor_;
  metadata.reflection = stUserLoginLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stVipLevelupLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stVipLevelupLog_ProtoModID_descriptor_;
}
bool stVipLevelupLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stVipLevelupLog_ProtoModID stVipLevelupLog::ModID;
const stVipLevelupLog_ProtoModID stVipLevelupLog::ProtoModID_MIN;
const stVipLevelupLog_ProtoModID stVipLevelupLog::ProtoModID_MAX;
const int stVipLevelupLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stVipLevelupLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stVipLevelupLog_ProtoFunID_descriptor_;
}
bool stVipLevelupLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stVipLevelupLog_ProtoFunID stVipLevelupLog::FunID;
const stVipLevelupLog_ProtoFunID stVipLevelupLog::ProtoFunID_MIN;
const stVipLevelupLog_ProtoFunID stVipLevelupLog::ProtoFunID_MAX;
const int stVipLevelupLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stVipLevelupLog::kCharIDFieldNumber;
const int stVipLevelupLog::kAccountFieldNumber;
const int stVipLevelupLog::kNameFieldNumber;
const int stVipLevelupLog::kOldExpFieldNumber;
const int stVipLevelupLog::kNewExpFieldNumber;
const int stVipLevelupLog::kAddDiamondFieldNumber;
#endif  // !_MSC_VER

stVipLevelupLog::stVipLevelupLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stVipLevelupLog::InitAsDefaultInstance() {
}

stVipLevelupLog::stVipLevelupLog(const stVipLevelupLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stVipLevelupLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldexp_ = 0u;
  newexp_ = 0u;
  adddiamond_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stVipLevelupLog::~stVipLevelupLog() {
  SharedDtor();
}

void stVipLevelupLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stVipLevelupLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stVipLevelupLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stVipLevelupLog_descriptor_;
}

const stVipLevelupLog& stVipLevelupLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stVipLevelupLog* stVipLevelupLog::default_instance_ = NULL;

stVipLevelupLog* stVipLevelupLog::New() const {
  return new stVipLevelupLog;
}

void stVipLevelupLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    oldexp_ = 0u;
    newexp_ = 0u;
    adddiamond_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stVipLevelupLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oldExp;
        break;
      }

      // optional uint32 oldExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldexp_)));
          set_has_oldexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newExp;
        break;
      }

      // optional uint32 newExp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newexp_)));
          set_has_newexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_addDiamond;
        break;
      }

      // optional uint32 addDiamond = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adddiamond_)));
          set_has_adddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stVipLevelupLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 oldExp = 4;
  if (has_oldexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oldexp(), output);
  }

  // optional uint32 newExp = 5;
  if (has_newexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->newexp(), output);
  }

  // optional uint32 addDiamond = 6;
  if (has_adddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->adddiamond(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stVipLevelupLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 oldExp = 4;
  if (has_oldexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oldexp(), target);
  }

  // optional uint32 newExp = 5;
  if (has_newexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->newexp(), target);
  }

  // optional uint32 addDiamond = 6;
  if (has_adddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->adddiamond(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stVipLevelupLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 oldExp = 4;
    if (has_oldexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldexp());
    }

    // optional uint32 newExp = 5;
    if (has_newexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newexp());
    }

    // optional uint32 addDiamond = 6;
    if (has_adddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adddiamond());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stVipLevelupLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stVipLevelupLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stVipLevelupLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stVipLevelupLog::MergeFrom(const stVipLevelupLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_oldexp()) {
      set_oldexp(from.oldexp());
    }
    if (from.has_newexp()) {
      set_newexp(from.newexp());
    }
    if (from.has_adddiamond()) {
      set_adddiamond(from.adddiamond());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stVipLevelupLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stVipLevelupLog::CopyFrom(const stVipLevelupLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stVipLevelupLog::IsInitialized() const {

  return true;
}

void stVipLevelupLog::Swap(stVipLevelupLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(oldexp_, other->oldexp_);
    std::swap(newexp_, other->newexp_);
    std::swap(adddiamond_, other->adddiamond_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stVipLevelupLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stVipLevelupLog_descriptor_;
  metadata.reflection = stVipLevelupLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHonourChgLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHonourChgLog_ProtoModID_descriptor_;
}
bool stHonourChgLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHonourChgLog_ProtoModID stHonourChgLog::ModID;
const stHonourChgLog_ProtoModID stHonourChgLog::ProtoModID_MIN;
const stHonourChgLog_ProtoModID stHonourChgLog::ProtoModID_MAX;
const int stHonourChgLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHonourChgLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHonourChgLog_ProtoFunID_descriptor_;
}
bool stHonourChgLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHonourChgLog_ProtoFunID stHonourChgLog::FunID;
const stHonourChgLog_ProtoFunID stHonourChgLog::ProtoFunID_MIN;
const stHonourChgLog_ProtoFunID stHonourChgLog::ProtoFunID_MAX;
const int stHonourChgLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHonourChgLog::kCharIDFieldNumber;
const int stHonourChgLog::kAccountFieldNumber;
const int stHonourChgLog::kNameFieldNumber;
const int stHonourChgLog::kOldHonourFieldNumber;
const int stHonourChgLog::kNewHonourFieldNumber;
const int stHonourChgLog::kReasonFieldNumber;
#endif  // !_MSC_VER

stHonourChgLog::stHonourChgLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHonourChgLog::InitAsDefaultInstance() {
}

stHonourChgLog::stHonourChgLog(const stHonourChgLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHonourChgLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldhonour_ = 0u;
  newhonour_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHonourChgLog::~stHonourChgLog() {
  SharedDtor();
}

void stHonourChgLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void stHonourChgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHonourChgLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHonourChgLog_descriptor_;
}

const stHonourChgLog& stHonourChgLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stHonourChgLog* stHonourChgLog::default_instance_ = NULL;

stHonourChgLog* stHonourChgLog::New() const {
  return new stHonourChgLog;
}

void stHonourChgLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    oldhonour_ = 0u;
    newhonour_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHonourChgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oldHonour;
        break;
      }

      // optional uint32 oldHonour = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldHonour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldhonour_)));
          set_has_oldhonour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newHonour;
        break;
      }

      // optional uint32 newHonour = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newHonour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newhonour_)));
          set_has_newhonour();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reason;
        break;
      }

      // optional string reason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHonourChgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 oldHonour = 4;
  if (has_oldhonour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oldhonour(), output);
  }

  // optional uint32 newHonour = 5;
  if (has_newhonour()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->newhonour(), output);
  }

  // optional string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHonourChgLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 oldHonour = 4;
  if (has_oldhonour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oldhonour(), target);
  }

  // optional uint32 newHonour = 5;
  if (has_newhonour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->newhonour(), target);
  }

  // optional string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHonourChgLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 oldHonour = 4;
    if (has_oldhonour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldhonour());
    }

    // optional uint32 newHonour = 5;
    if (has_newhonour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newhonour());
    }

    // optional string reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHonourChgLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHonourChgLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHonourChgLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHonourChgLog::MergeFrom(const stHonourChgLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_oldhonour()) {
      set_oldhonour(from.oldhonour());
    }
    if (from.has_newhonour()) {
      set_newhonour(from.newhonour());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHonourChgLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHonourChgLog::CopyFrom(const stHonourChgLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHonourChgLog::IsInitialized() const {

  return true;
}

void stHonourChgLog::Swap(stHonourChgLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(oldhonour_, other->oldhonour_);
    std::swap(newhonour_, other->newhonour_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHonourChgLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHonourChgLog_descriptor_;
  metadata.reflection = stHonourChgLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stItemChgLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stItemChgLog_ProtoModID_descriptor_;
}
bool stItemChgLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stItemChgLog_ProtoModID stItemChgLog::ModID;
const stItemChgLog_ProtoModID stItemChgLog::ProtoModID_MIN;
const stItemChgLog_ProtoModID stItemChgLog::ProtoModID_MAX;
const int stItemChgLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stItemChgLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stItemChgLog_ProtoFunID_descriptor_;
}
bool stItemChgLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stItemChgLog_ProtoFunID stItemChgLog::FunID;
const stItemChgLog_ProtoFunID stItemChgLog::ProtoFunID_MIN;
const stItemChgLog_ProtoFunID stItemChgLog::ProtoFunID_MAX;
const int stItemChgLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stItemChgLog::kCharIDFieldNumber;
const int stItemChgLog::kAccountFieldNumber;
const int stItemChgLog::kNameFieldNumber;
const int stItemChgLog::kItemIDFieldNumber;
const int stItemChgLog::kNumFieldNumber;
const int stItemChgLog::kReasonFieldNumber;
const int stItemChgLog::kUserLvFieldNumber;
const int stItemChgLog::kVipLvFieldNumber;
const int stItemChgLog::kIsAddFieldNumber;
const int stItemChgLog::kRaiseLvFieldNumber;
const int stItemChgLog::kRefineLvFieldNumber;
#endif  // !_MSC_VER

stItemChgLog::stItemChgLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stItemChgLog::InitAsDefaultInstance() {
}

stItemChgLog::stItemChgLog(const stItemChgLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stItemChgLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = 0u;
  num_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  userlv_ = 0u;
  viplv_ = 0u;
  isadd_ = false;
  raiselv_ = 0u;
  refinelv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stItemChgLog::~stItemChgLog() {
  SharedDtor();
}

void stItemChgLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void stItemChgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stItemChgLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stItemChgLog_descriptor_;
}

const stItemChgLog& stItemChgLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stItemChgLog* stItemChgLog::default_instance_ = NULL;

stItemChgLog* stItemChgLog::New() const {
  return new stItemChgLog;
}

void stItemChgLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    itemid_ = 0u;
    num_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
    userlv_ = 0u;
    viplv_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    isadd_ = false;
    raiselv_ = 0u;
    refinelv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stItemChgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional uint32 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_reason;
        break;
      }

      // optional string reason = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_userLv;
        break;
      }

      // optional uint32 userLv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_userLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &userlv_)));
          set_has_userlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_isAdd;
        break;
      }

      // optional bool isAdd = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isadd_)));
          set_has_isadd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_raiseLv;
        break;
      }

      // optional uint32 raiseLv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_raiseLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &raiselv_)));
          set_has_raiselv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_refineLv;
        break;
      }

      // optional uint32 refineLv = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &refinelv_)));
          set_has_refinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stItemChgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 itemID = 4;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->itemid(), output);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->num(), output);
  }

  // optional string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->reason(), output);
  }

  // optional uint32 userLv = 7;
  if (has_userlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->userlv(), output);
  }

  // optional uint32 vipLv = 8;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->viplv(), output);
  }

  // optional bool isAdd = 9;
  if (has_isadd()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->isadd(), output);
  }

  // optional uint32 raiseLv = 10;
  if (has_raiselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->raiselv(), output);
  }

  // optional uint32 refineLv = 11;
  if (has_refinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->refinelv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stItemChgLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 itemID = 4;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->itemid(), target);
  }

  // optional uint32 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->num(), target);
  }

  // optional string reason = 6;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->reason(), target);
  }

  // optional uint32 userLv = 7;
  if (has_userlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->userlv(), target);
  }

  // optional uint32 vipLv = 8;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->viplv(), target);
  }

  // optional bool isAdd = 9;
  if (has_isadd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->isadd(), target);
  }

  // optional uint32 raiseLv = 10;
  if (has_raiselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->raiselv(), target);
  }

  // optional uint32 refineLv = 11;
  if (has_refinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->refinelv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stItemChgLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 itemID = 4;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

    // optional string reason = 6;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

    // optional uint32 userLv = 7;
    if (has_userlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->userlv());
    }

    // optional uint32 vipLv = 8;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool isAdd = 9;
    if (has_isadd()) {
      total_size += 1 + 1;
    }

    // optional uint32 raiseLv = 10;
    if (has_raiselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->raiselv());
    }

    // optional uint32 refineLv = 11;
    if (has_refinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->refinelv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stItemChgLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stItemChgLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stItemChgLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stItemChgLog::MergeFrom(const stItemChgLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
    if (from.has_userlv()) {
      set_userlv(from.userlv());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_isadd()) {
      set_isadd(from.isadd());
    }
    if (from.has_raiselv()) {
      set_raiselv(from.raiselv());
    }
    if (from.has_refinelv()) {
      set_refinelv(from.refinelv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stItemChgLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stItemChgLog::CopyFrom(const stItemChgLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stItemChgLog::IsInitialized() const {

  return true;
}

void stItemChgLog::Swap(stItemChgLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(reason_, other->reason_);
    std::swap(userlv_, other->userlv_);
    std::swap(viplv_, other->viplv_);
    std::swap(isadd_, other->isadd_);
    std::swap(raiselv_, other->raiselv_);
    std::swap(refinelv_, other->refinelv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stItemChgLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stItemChgLog_descriptor_;
  metadata.reflection = stItemChgLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResourceChgLog_ProtoModID_descriptor_;
}
bool stResourceChgLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResourceChgLog_ProtoModID stResourceChgLog::ModID;
const stResourceChgLog_ProtoModID stResourceChgLog::ProtoModID_MIN;
const stResourceChgLog_ProtoModID stResourceChgLog::ProtoModID_MAX;
const int stResourceChgLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stResourceChgLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResourceChgLog_ProtoFunID_descriptor_;
}
bool stResourceChgLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stResourceChgLog_ProtoFunID stResourceChgLog::FunID;
const stResourceChgLog_ProtoFunID stResourceChgLog::ProtoFunID_MIN;
const stResourceChgLog_ProtoFunID stResourceChgLog::ProtoFunID_MAX;
const int stResourceChgLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stResourceChgLog::kCharIDFieldNumber;
const int stResourceChgLog::kAccountFieldNumber;
const int stResourceChgLog::kNameFieldNumber;
const int stResourceChgLog::kResIDFieldNumber;
const int stResourceChgLog::kAddNumFieldNumber;
const int stResourceChgLog::kOldValueFieldNumber;
const int stResourceChgLog::kNewValueFieldNumber;
const int stResourceChgLog::kReasonFieldNumber;
#endif  // !_MSC_VER

stResourceChgLog::stResourceChgLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stResourceChgLog::InitAsDefaultInstance() {
}

stResourceChgLog::stResourceChgLog(const stResourceChgLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stResourceChgLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  resid_ = 0u;
  addnum_ = 0u;
  oldvalue_ = 0u;
  newvalue_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stResourceChgLog::~stResourceChgLog() {
  SharedDtor();
}

void stResourceChgLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void stResourceChgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stResourceChgLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stResourceChgLog_descriptor_;
}

const stResourceChgLog& stResourceChgLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stResourceChgLog* stResourceChgLog::default_instance_ = NULL;

stResourceChgLog* stResourceChgLog::New() const {
  return new stResourceChgLog;
}

void stResourceChgLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    resid_ = 0u;
    addnum_ = 0u;
    oldvalue_ = 0u;
    newvalue_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stResourceChgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_resID;
        break;
      }

      // optional uint32 resID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_addNum;
        break;
      }

      // optional uint32 addNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addnum_)));
          set_has_addnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_oldValue;
        break;
      }

      // optional uint32 oldValue = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldvalue_)));
          set_has_oldvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_newValue;
        break;
      }

      // optional uint32 newValue = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newValue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newvalue_)));
          set_has_newvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_reason;
        break;
      }

      // optional string reason = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stResourceChgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 resID = 4;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->resid(), output);
  }

  // optional uint32 addNum = 5;
  if (has_addnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->addnum(), output);
  }

  // optional uint32 oldValue = 6;
  if (has_oldvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->oldvalue(), output);
  }

  // optional uint32 newValue = 7;
  if (has_newvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->newvalue(), output);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stResourceChgLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 resID = 4;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->resid(), target);
  }

  // optional uint32 addNum = 5;
  if (has_addnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->addnum(), target);
  }

  // optional uint32 oldValue = 6;
  if (has_oldvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->oldvalue(), target);
  }

  // optional uint32 newValue = 7;
  if (has_newvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->newvalue(), target);
  }

  // optional string reason = 8;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stResourceChgLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 resID = 4;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

    // optional uint32 addNum = 5;
    if (has_addnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addnum());
    }

    // optional uint32 oldValue = 6;
    if (has_oldvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldvalue());
    }

    // optional uint32 newValue = 7;
    if (has_newvalue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newvalue());
    }

    // optional string reason = 8;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stResourceChgLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stResourceChgLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stResourceChgLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stResourceChgLog::MergeFrom(const stResourceChgLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_addnum()) {
      set_addnum(from.addnum());
    }
    if (from.has_oldvalue()) {
      set_oldvalue(from.oldvalue());
    }
    if (from.has_newvalue()) {
      set_newvalue(from.newvalue());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stResourceChgLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stResourceChgLog::CopyFrom(const stResourceChgLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stResourceChgLog::IsInitialized() const {

  return true;
}

void stResourceChgLog::Swap(stResourceChgLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(resid_, other->resid_);
    std::swap(addnum_, other->addnum_);
    std::swap(oldvalue_, other->oldvalue_);
    std::swap(newvalue_, other->newvalue_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stResourceChgLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stResourceChgLog_descriptor_;
  metadata.reflection = stResourceChgLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDailyTaskLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskLog_ProtoModID_descriptor_;
}
bool stDailyTaskLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDailyTaskLog_ProtoModID stDailyTaskLog::ModID;
const stDailyTaskLog_ProtoModID stDailyTaskLog::ProtoModID_MIN;
const stDailyTaskLog_ProtoModID stDailyTaskLog::ProtoModID_MAX;
const int stDailyTaskLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDailyTaskLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskLog_ProtoFunID_descriptor_;
}
bool stDailyTaskLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDailyTaskLog_ProtoFunID stDailyTaskLog::FunID;
const stDailyTaskLog_ProtoFunID stDailyTaskLog::ProtoFunID_MIN;
const stDailyTaskLog_ProtoFunID stDailyTaskLog::ProtoFunID_MAX;
const int stDailyTaskLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDailyTaskLog::kCharIDFieldNumber;
const int stDailyTaskLog::kAccountFieldNumber;
const int stDailyTaskLog::kNameFieldNumber;
const int stDailyTaskLog::kTaskIDFieldNumber;
const int stDailyTaskLog::kTaskNameFieldNumber;
#endif  // !_MSC_VER

stDailyTaskLog::stDailyTaskLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDailyTaskLog::InitAsDefaultInstance() {
}

stDailyTaskLog::stDailyTaskLog(const stDailyTaskLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDailyTaskLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  taskid_ = 0u;
  taskname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDailyTaskLog::~stDailyTaskLog() {
  SharedDtor();
}

void stDailyTaskLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (taskname_ != &::google::protobuf::internal::kEmptyString) {
    delete taskname_;
  }
  if (this != default_instance_) {
  }
}

void stDailyTaskLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDailyTaskLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskLog_descriptor_;
}

const stDailyTaskLog& stDailyTaskLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stDailyTaskLog* stDailyTaskLog::default_instance_ = NULL;

stDailyTaskLog* stDailyTaskLog::New() const {
  return new stDailyTaskLog;
}

void stDailyTaskLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    taskid_ = 0u;
    if (has_taskname()) {
      if (taskname_ != &::google::protobuf::internal::kEmptyString) {
        taskname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDailyTaskLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_taskID;
        break;
      }

      // optional uint32 taskID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_taskName;
        break;
      }

      // optional string taskName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskname().data(), this->taskname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDailyTaskLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 taskID = 4;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->taskid(), output);
  }

  // optional string taskName = 5;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->taskname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDailyTaskLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 taskID = 4;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->taskid(), target);
  }

  // optional string taskName = 5;
  if (has_taskname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskname().data(), this->taskname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->taskname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDailyTaskLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 taskID = 4;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional string taskName = 5;
    if (has_taskname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDailyTaskLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDailyTaskLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDailyTaskLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDailyTaskLog::MergeFrom(const stDailyTaskLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_taskname()) {
      set_taskname(from.taskname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDailyTaskLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDailyTaskLog::CopyFrom(const stDailyTaskLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDailyTaskLog::IsInitialized() const {

  return true;
}

void stDailyTaskLog::Swap(stDailyTaskLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(taskid_, other->taskid_);
    std::swap(taskname_, other->taskname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDailyTaskLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDailyTaskLog_descriptor_;
  metadata.reflection = stDailyTaskLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRechargeLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechargeLog_ProtoModID_descriptor_;
}
bool stRechargeLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRechargeLog_ProtoModID stRechargeLog::ModID;
const stRechargeLog_ProtoModID stRechargeLog::ProtoModID_MIN;
const stRechargeLog_ProtoModID stRechargeLog::ProtoModID_MAX;
const int stRechargeLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRechargeLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechargeLog_ProtoFunID_descriptor_;
}
bool stRechargeLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRechargeLog_ProtoFunID stRechargeLog::FunID;
const stRechargeLog_ProtoFunID stRechargeLog::ProtoFunID_MIN;
const stRechargeLog_ProtoFunID stRechargeLog::ProtoFunID_MAX;
const int stRechargeLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRechargeLog::kCharIDFieldNumber;
const int stRechargeLog::kNameFieldNumber;
const int stRechargeLog::kAccountFieldNumber;
const int stRechargeLog::kTidFieldNumber;
const int stRechargeLog::kRechargeNumFieldNumber;
const int stRechargeLog::kDiamondNumFieldNumber;
const int stRechargeLog::kNewRechargeFieldNumber;
const int stRechargeLog::kOpIDFieldNumber;
const int stRechargeLog::kAddDiamondFieldNumber;
const int stRechargeLog::kVipLvFieldNumber;
const int stRechargeLog::kItemIDFieldNumber;
#endif  // !_MSC_VER

stRechargeLog::stRechargeLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRechargeLog::InitAsDefaultInstance() {
}

stRechargeLog::stRechargeLog(const stRechargeLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRechargeLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rechargenum_ = 0u;
  diamondnum_ = 0u;
  newrecharge_ = false;
  opid_ = 0u;
  adddiamond_ = 0u;
  viplv_ = 0u;
  itemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRechargeLog::~stRechargeLog() {
  SharedDtor();
}

void stRechargeLog::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (tid_ != &::google::protobuf::internal::kEmptyString) {
    delete tid_;
  }
  if (this != default_instance_) {
  }
}

void stRechargeLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRechargeLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRechargeLog_descriptor_;
}

const stRechargeLog& stRechargeLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stRechargeLog* stRechargeLog::default_instance_ = NULL;

stRechargeLog* stRechargeLog::New() const {
  return new stRechargeLog;
}

void stRechargeLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_tid()) {
      if (tid_ != &::google::protobuf::internal::kEmptyString) {
        tid_->clear();
      }
    }
    rechargenum_ = 0u;
    diamondnum_ = 0u;
    newrecharge_ = false;
    opid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    adddiamond_ = 0u;
    viplv_ = 0u;
    itemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRechargeLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_account;
        break;
      }

      // optional string account = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_tid;
        break;
      }

      // optional string tid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_tid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->tid().data(), this->tid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rechargeNum;
        break;
      }

      // optional uint32 rechargeNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rechargenum_)));
          set_has_rechargenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_diamondNum;
        break;
      }

      // optional uint32 diamondNum = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_diamondNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &diamondnum_)));
          set_has_diamondnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_newRecharge;
        break;
      }

      // optional bool newRecharge = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newRecharge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &newrecharge_)));
          set_has_newrecharge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_addDiamond;
        break;
      }

      // optional uint32 addDiamond = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addDiamond:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &adddiamond_)));
          set_has_adddiamond();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRechargeLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->account(), output);
  }

  // optional string tid = 4;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tid(), output);
  }

  // optional uint32 rechargeNum = 5;
  if (has_rechargenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->rechargenum(), output);
  }

  // optional uint32 diamondNum = 6;
  if (has_diamondnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->diamondnum(), output);
  }

  // optional bool newRecharge = 7;
  if (has_newrecharge()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->newrecharge(), output);
  }

  // optional uint32 opID = 8;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->opid(), output);
  }

  // optional uint32 addDiamond = 9;
  if (has_adddiamond()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->adddiamond(), output);
  }

  // optional uint32 vipLv = 10;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->viplv(), output);
  }

  // optional uint32 itemID = 11;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRechargeLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string account = 3;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->account(), target);
  }

  // optional string tid = 4;
  if (has_tid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->tid().data(), this->tid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->tid(), target);
  }

  // optional uint32 rechargeNum = 5;
  if (has_rechargenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->rechargenum(), target);
  }

  // optional uint32 diamondNum = 6;
  if (has_diamondnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->diamondnum(), target);
  }

  // optional bool newRecharge = 7;
  if (has_newrecharge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->newrecharge(), target);
  }

  // optional uint32 opID = 8;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->opid(), target);
  }

  // optional uint32 addDiamond = 9;
  if (has_adddiamond()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->adddiamond(), target);
  }

  // optional uint32 vipLv = 10;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->viplv(), target);
  }

  // optional uint32 itemID = 11;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRechargeLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string account = 3;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string tid = 4;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->tid());
    }

    // optional uint32 rechargeNum = 5;
    if (has_rechargenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rechargenum());
    }

    // optional uint32 diamondNum = 6;
    if (has_diamondnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->diamondnum());
    }

    // optional bool newRecharge = 7;
    if (has_newrecharge()) {
      total_size += 1 + 1;
    }

    // optional uint32 opID = 8;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 addDiamond = 9;
    if (has_adddiamond()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->adddiamond());
    }

    // optional uint32 vipLv = 10;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 itemID = 11;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRechargeLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRechargeLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRechargeLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRechargeLog::MergeFrom(const stRechargeLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_tid()) {
      set_tid(from.tid());
    }
    if (from.has_rechargenum()) {
      set_rechargenum(from.rechargenum());
    }
    if (from.has_diamondnum()) {
      set_diamondnum(from.diamondnum());
    }
    if (from.has_newrecharge()) {
      set_newrecharge(from.newrecharge());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_adddiamond()) {
      set_adddiamond(from.adddiamond());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRechargeLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRechargeLog::CopyFrom(const stRechargeLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRechargeLog::IsInitialized() const {

  return true;
}

void stRechargeLog::Swap(stRechargeLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(account_, other->account_);
    std::swap(tid_, other->tid_);
    std::swap(rechargenum_, other->rechargenum_);
    std::swap(diamondnum_, other->diamondnum_);
    std::swap(newrecharge_, other->newrecharge_);
    std::swap(opid_, other->opid_);
    std::swap(adddiamond_, other->adddiamond_);
    std::swap(viplv_, other->viplv_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRechargeLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRechargeLog_descriptor_;
  metadata.reflection = stRechargeLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPublishActivity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPublishActivity_ProtoModID_descriptor_;
}
bool stPublishActivity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPublishActivity_ProtoModID stPublishActivity::ModID;
const stPublishActivity_ProtoModID stPublishActivity::ProtoModID_MIN;
const stPublishActivity_ProtoModID stPublishActivity::ProtoModID_MAX;
const int stPublishActivity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPublishActivity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPublishActivity_ProtoFunID_descriptor_;
}
bool stPublishActivity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPublishActivity_ProtoFunID stPublishActivity::FunID;
const stPublishActivity_ProtoFunID stPublishActivity::ProtoFunID_MIN;
const stPublishActivity_ProtoFunID stPublishActivity::ProtoFunID_MAX;
const int stPublishActivity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPublishActivity::kIdFieldNumber;
const int stPublishActivity::kConfigFieldNumber;
const int stPublishActivity::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stPublishActivity::stPublishActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPublishActivity::InitAsDefaultInstance() {
}

stPublishActivity::stPublishActivity(const stPublishActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPublishActivity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  config_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPublishActivity::~stPublishActivity() {
  SharedDtor();
}

void stPublishActivity::SharedDtor() {
  if (config_ != &::google::protobuf::internal::kEmptyString) {
    delete config_;
  }
  if (this != default_instance_) {
  }
}

void stPublishActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPublishActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPublishActivity_descriptor_;
}

const stPublishActivity& stPublishActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stPublishActivity* stPublishActivity::default_instance_ = NULL;

stPublishActivity* stPublishActivity::New() const {
  return new stPublishActivity;
}

void stPublishActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    if (has_config()) {
      if (config_ != &::google::protobuf::internal::kEmptyString) {
        config_->clear();
      }
    }
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPublishActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_config;
        break;
      }

      // optional string config = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_config()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->config().data(), this->config().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPublishActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->config(), output);
  }

  // optional uint32 webConnID = 3;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPublishActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string config = 2;
  if (has_config()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->config().data(), this->config().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->config(), target);
  }

  // optional uint32 webConnID = 3;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPublishActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional string config = 2;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->config());
    }

    // optional uint32 webConnID = 3;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPublishActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPublishActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPublishActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPublishActivity::MergeFrom(const stPublishActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_config()) {
      set_config(from.config());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPublishActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPublishActivity::CopyFrom(const stPublishActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPublishActivity::IsInitialized() const {

  return true;
}

void stPublishActivity::Swap(stPublishActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(config_, other->config_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPublishActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPublishActivity_descriptor_;
  metadata.reflection = stPublishActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPublishActivityResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPublishActivityResult_ProtoModID_descriptor_;
}
bool stPublishActivityResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPublishActivityResult_ProtoModID stPublishActivityResult::ModID;
const stPublishActivityResult_ProtoModID stPublishActivityResult::ProtoModID_MIN;
const stPublishActivityResult_ProtoModID stPublishActivityResult::ProtoModID_MAX;
const int stPublishActivityResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPublishActivityResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPublishActivityResult_ProtoFunID_descriptor_;
}
bool stPublishActivityResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPublishActivityResult_ProtoFunID stPublishActivityResult::FunID;
const stPublishActivityResult_ProtoFunID stPublishActivityResult::ProtoFunID_MIN;
const stPublishActivityResult_ProtoFunID stPublishActivityResult::ProtoFunID_MAX;
const int stPublishActivityResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPublishActivityResult::kResultFieldNumber;
const int stPublishActivityResult::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stPublishActivityResult::stPublishActivityResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPublishActivityResult::InitAsDefaultInstance() {
}

stPublishActivityResult::stPublishActivityResult(const stPublishActivityResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPublishActivityResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPublishActivityResult::~stPublishActivityResult() {
  SharedDtor();
}

void stPublishActivityResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stPublishActivityResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPublishActivityResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPublishActivityResult_descriptor_;
}

const stPublishActivityResult& stPublishActivityResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stPublishActivityResult* stPublishActivityResult::default_instance_ = NULL;

stPublishActivityResult* stPublishActivityResult::New() const {
  return new stPublishActivityResult;
}

void stPublishActivityResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPublishActivityResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPublishActivityResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPublishActivityResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPublishActivityResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPublishActivityResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPublishActivityResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPublishActivityResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPublishActivityResult::MergeFrom(const stPublishActivityResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPublishActivityResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPublishActivityResult::CopyFrom(const stPublishActivityResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPublishActivityResult::IsInitialized() const {

  return true;
}

void stPublishActivityResult::Swap(stPublishActivityResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPublishActivityResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPublishActivityResult_descriptor_;
  metadata.reflection = stPublishActivityResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUnloadActivity_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnloadActivity_ProtoModID_descriptor_;
}
bool stUnloadActivity_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnloadActivity_ProtoModID stUnloadActivity::ModID;
const stUnloadActivity_ProtoModID stUnloadActivity::ProtoModID_MIN;
const stUnloadActivity_ProtoModID stUnloadActivity::ProtoModID_MAX;
const int stUnloadActivity::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUnloadActivity_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnloadActivity_ProtoFunID_descriptor_;
}
bool stUnloadActivity_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnloadActivity_ProtoFunID stUnloadActivity::FunID;
const stUnloadActivity_ProtoFunID stUnloadActivity::ProtoFunID_MIN;
const stUnloadActivity_ProtoFunID stUnloadActivity::ProtoFunID_MAX;
const int stUnloadActivity::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUnloadActivity::kIdFieldNumber;
const int stUnloadActivity::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stUnloadActivity::stUnloadActivity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUnloadActivity::InitAsDefaultInstance() {
}

stUnloadActivity::stUnloadActivity(const stUnloadActivity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUnloadActivity::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUnloadActivity::~stUnloadActivity() {
  SharedDtor();
}

void stUnloadActivity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUnloadActivity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUnloadActivity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnloadActivity_descriptor_;
}

const stUnloadActivity& stUnloadActivity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stUnloadActivity* stUnloadActivity::default_instance_ = NULL;

stUnloadActivity* stUnloadActivity::New() const {
  return new stUnloadActivity;
}

void stUnloadActivity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUnloadActivity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUnloadActivity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUnloadActivity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUnloadActivity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUnloadActivity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUnloadActivity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUnloadActivity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUnloadActivity::MergeFrom(const stUnloadActivity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUnloadActivity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUnloadActivity::CopyFrom(const stUnloadActivity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUnloadActivity::IsInitialized() const {

  return true;
}

void stUnloadActivity::Swap(stUnloadActivity* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUnloadActivity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUnloadActivity_descriptor_;
  metadata.reflection = stUnloadActivity_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUnloadActivityResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnloadActivityResult_ProtoModID_descriptor_;
}
bool stUnloadActivityResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnloadActivityResult_ProtoModID stUnloadActivityResult::ModID;
const stUnloadActivityResult_ProtoModID stUnloadActivityResult::ProtoModID_MIN;
const stUnloadActivityResult_ProtoModID stUnloadActivityResult::ProtoModID_MAX;
const int stUnloadActivityResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUnloadActivityResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnloadActivityResult_ProtoFunID_descriptor_;
}
bool stUnloadActivityResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUnloadActivityResult_ProtoFunID stUnloadActivityResult::FunID;
const stUnloadActivityResult_ProtoFunID stUnloadActivityResult::ProtoFunID_MIN;
const stUnloadActivityResult_ProtoFunID stUnloadActivityResult::ProtoFunID_MAX;
const int stUnloadActivityResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUnloadActivityResult::kResultFieldNumber;
const int stUnloadActivityResult::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stUnloadActivityResult::stUnloadActivityResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUnloadActivityResult::InitAsDefaultInstance() {
}

stUnloadActivityResult::stUnloadActivityResult(const stUnloadActivityResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUnloadActivityResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = false;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUnloadActivityResult::~stUnloadActivityResult() {
  SharedDtor();
}

void stUnloadActivityResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUnloadActivityResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUnloadActivityResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUnloadActivityResult_descriptor_;
}

const stUnloadActivityResult& stUnloadActivityResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stUnloadActivityResult* stUnloadActivityResult::default_instance_ = NULL;

stUnloadActivityResult* stUnloadActivityResult::New() const {
  return new stUnloadActivityResult;
}

void stUnloadActivityResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = false;
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUnloadActivityResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUnloadActivityResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->result(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUnloadActivityResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->result(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUnloadActivityResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool result = 1;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUnloadActivityResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUnloadActivityResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUnloadActivityResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUnloadActivityResult::MergeFrom(const stUnloadActivityResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUnloadActivityResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUnloadActivityResult::CopyFrom(const stUnloadActivityResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUnloadActivityResult::IsInitialized() const {

  return true;
}

void stUnloadActivityResult::Swap(stUnloadActivityResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUnloadActivityResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUnloadActivityResult_descriptor_;
  metadata.reflection = stUnloadActivityResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMallBuyLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMallBuyLog_ProtoModID_descriptor_;
}
bool stMallBuyLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMallBuyLog_ProtoModID stMallBuyLog::ModID;
const stMallBuyLog_ProtoModID stMallBuyLog::ProtoModID_MIN;
const stMallBuyLog_ProtoModID stMallBuyLog::ProtoModID_MAX;
const int stMallBuyLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMallBuyLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMallBuyLog_ProtoFunID_descriptor_;
}
bool stMallBuyLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMallBuyLog_ProtoFunID stMallBuyLog::FunID;
const stMallBuyLog_ProtoFunID stMallBuyLog::ProtoFunID_MIN;
const stMallBuyLog_ProtoFunID stMallBuyLog::ProtoFunID_MAX;
const int stMallBuyLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMallBuyLog::kCharIDFieldNumber;
const int stMallBuyLog::kAccountFieldNumber;
const int stMallBuyLog::kNameFieldNumber;
const int stMallBuyLog::kLevelFieldNumber;
const int stMallBuyLog::kVipLvFieldNumber;
const int stMallBuyLog::kShopIDFieldNumber;
const int stMallBuyLog::kResIDFieldNumber;
const int stMallBuyLog::kResNumFieldNumber;
const int stMallBuyLog::kItemIDFieldNumber;
const int stMallBuyLog::kItemNumFieldNumber;
#endif  // !_MSC_VER

stMallBuyLog::stMallBuyLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMallBuyLog::InitAsDefaultInstance() {
}

stMallBuyLog::stMallBuyLog(const stMallBuyLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMallBuyLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  viplv_ = 0u;
  shopid_ = 0u;
  resid_ = 0u;
  resnum_ = 0u;
  itemid_ = 0u;
  itemnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMallBuyLog::~stMallBuyLog() {
  SharedDtor();
}

void stMallBuyLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stMallBuyLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMallBuyLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMallBuyLog_descriptor_;
}

const stMallBuyLog& stMallBuyLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stMallBuyLog* stMallBuyLog::default_instance_ = NULL;

stMallBuyLog* stMallBuyLog::New() const {
  return new stMallBuyLog;
}

void stMallBuyLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    viplv_ = 0u;
    shopid_ = 0u;
    resid_ = 0u;
    resnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    itemid_ = 0u;
    itemnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMallBuyLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_shopID;
        break;
      }

      // optional uint32 shopID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shopid_)));
          set_has_shopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_resID;
        break;
      }

      // optional uint32 resID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resid_)));
          set_has_resid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_resNum;
        break;
      }

      // optional uint32 resNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_resNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &resnum_)));
          set_has_resnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_itemID;
        break;
      }

      // optional uint32 itemID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_itemNum;
        break;
      }

      // optional uint32 itemNum = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMallBuyLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplv(), output);
  }

  // optional uint32 shopID = 6;
  if (has_shopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->shopid(), output);
  }

  // optional uint32 resID = 7;
  if (has_resid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->resid(), output);
  }

  // optional uint32 resNum = 8;
  if (has_resnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->resnum(), output);
  }

  // optional uint32 itemID = 9;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->itemid(), output);
  }

  // optional uint32 itemNum = 10;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMallBuyLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplv(), target);
  }

  // optional uint32 shopID = 6;
  if (has_shopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->shopid(), target);
  }

  // optional uint32 resID = 7;
  if (has_resid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->resid(), target);
  }

  // optional uint32 resNum = 8;
  if (has_resnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->resnum(), target);
  }

  // optional uint32 itemID = 9;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->itemid(), target);
  }

  // optional uint32 itemNum = 10;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMallBuyLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLv = 5;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 shopID = 6;
    if (has_shopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shopid());
    }

    // optional uint32 resID = 7;
    if (has_resid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resid());
    }

    // optional uint32 resNum = 8;
    if (has_resnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->resnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 itemID = 9;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 itemNum = 10;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMallBuyLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMallBuyLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMallBuyLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMallBuyLog::MergeFrom(const stMallBuyLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_shopid()) {
      set_shopid(from.shopid());
    }
    if (from.has_resid()) {
      set_resid(from.resid());
    }
    if (from.has_resnum()) {
      set_resnum(from.resnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMallBuyLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMallBuyLog::CopyFrom(const stMallBuyLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMallBuyLog::IsInitialized() const {

  return true;
}

void stMallBuyLog::Swap(stMallBuyLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(shopid_, other->shopid_);
    std::swap(resid_, other->resid_);
    std::swap(resnum_, other->resnum_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMallBuyLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMallBuyLog_descriptor_;
  metadata.reflection = stMallBuyLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stHeroPropChgLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroPropChgLog_ProtoModID_descriptor_;
}
bool stHeroPropChgLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroPropChgLog_ProtoModID stHeroPropChgLog::ModID;
const stHeroPropChgLog_ProtoModID stHeroPropChgLog::ProtoModID_MIN;
const stHeroPropChgLog_ProtoModID stHeroPropChgLog::ProtoModID_MAX;
const int stHeroPropChgLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stHeroPropChgLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroPropChgLog_ProtoFunID_descriptor_;
}
bool stHeroPropChgLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stHeroPropChgLog_ProtoFunID stHeroPropChgLog::FunID;
const stHeroPropChgLog_ProtoFunID stHeroPropChgLog::ProtoFunID_MIN;
const stHeroPropChgLog_ProtoFunID stHeroPropChgLog::ProtoFunID_MAX;
const int stHeroPropChgLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stHeroPropChgLog::kCharIDFieldNumber;
const int stHeroPropChgLog::kAccountFieldNumber;
const int stHeroPropChgLog::kNameFieldNumber;
const int stHeroPropChgLog::kLevelFieldNumber;
const int stHeroPropChgLog::kVipLvFieldNumber;
const int stHeroPropChgLog::kHeroIDFieldNumber;
const int stHeroPropChgLog::kActionFieldNumber;
const int stHeroPropChgLog::kOldLvFieldNumber;
const int stHeroPropChgLog::kNewLvFieldNumber;
const int stHeroPropChgLog::kOldEvoLvFieldNumber;
const int stHeroPropChgLog::kNewEvoLvFieldNumber;
#endif  // !_MSC_VER

stHeroPropChgLog::stHeroPropChgLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stHeroPropChgLog::InitAsDefaultInstance() {
}

stHeroPropChgLog::stHeroPropChgLog(const stHeroPropChgLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stHeroPropChgLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  viplv_ = 0u;
  heroid_ = 0u;
  action_ = 0u;
  oldlv_ = 0u;
  newlv_ = 0u;
  oldevolv_ = 0u;
  newevolv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stHeroPropChgLog::~stHeroPropChgLog() {
  SharedDtor();
}

void stHeroPropChgLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stHeroPropChgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stHeroPropChgLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stHeroPropChgLog_descriptor_;
}

const stHeroPropChgLog& stHeroPropChgLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stHeroPropChgLog* stHeroPropChgLog::default_instance_ = NULL;

stHeroPropChgLog* stHeroPropChgLog::New() const {
  return new stHeroPropChgLog;
}

void stHeroPropChgLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    viplv_ = 0u;
    heroid_ = 0u;
    action_ = 0u;
    oldlv_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    newlv_ = 0u;
    oldevolv_ = 0u;
    newevolv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stHeroPropChgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_account;
        break;
      }

      // optional string account = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_account:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_heroID;
        break;
      }

      // optional uint32 heroID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_heroID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heroid_)));
          set_has_heroid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_action;
        break;
      }

      // optional uint32 action = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_oldLv;
        break;
      }

      // optional uint32 oldLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldlv_)));
          set_has_oldlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_newLv;
        break;
      }

      // optional uint32 newLv = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newlv_)));
          set_has_newlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_oldEvoLv;
        break;
      }

      // optional uint32 oldEvoLv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldEvoLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldevolv_)));
          set_has_oldevolv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_newEvoLv;
        break;
      }

      // optional uint32 newEvoLv = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newEvoLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newevolv_)));
          set_has_newevolv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stHeroPropChgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->account(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplv(), output);
  }

  // optional uint32 heroID = 6;
  if (has_heroid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->heroid(), output);
  }

  // optional uint32 action = 7;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->action(), output);
  }

  // optional uint32 oldLv = 8;
  if (has_oldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->oldlv(), output);
  }

  // optional uint32 newLv = 9;
  if (has_newlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->newlv(), output);
  }

  // optional uint32 oldEvoLv = 10;
  if (has_oldevolv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->oldevolv(), output);
  }

  // optional uint32 newEvoLv = 11;
  if (has_newevolv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->newevolv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stHeroPropChgLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string account = 2;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->account(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplv(), target);
  }

  // optional uint32 heroID = 6;
  if (has_heroid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->heroid(), target);
  }

  // optional uint32 action = 7;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->action(), target);
  }

  // optional uint32 oldLv = 8;
  if (has_oldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->oldlv(), target);
  }

  // optional uint32 newLv = 9;
  if (has_newlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->newlv(), target);
  }

  // optional uint32 oldEvoLv = 10;
  if (has_oldevolv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->oldevolv(), target);
  }

  // optional uint32 newEvoLv = 11;
  if (has_newevolv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->newevolv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stHeroPropChgLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string account = 2;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLv = 5;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 heroID = 6;
    if (has_heroid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heroid());
    }

    // optional uint32 action = 7;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

    // optional uint32 oldLv = 8;
    if (has_oldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldlv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 newLv = 9;
    if (has_newlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newlv());
    }

    // optional uint32 oldEvoLv = 10;
    if (has_oldevolv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldevolv());
    }

    // optional uint32 newEvoLv = 11;
    if (has_newevolv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newevolv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stHeroPropChgLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stHeroPropChgLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stHeroPropChgLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stHeroPropChgLog::MergeFrom(const stHeroPropChgLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_heroid()) {
      set_heroid(from.heroid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_oldlv()) {
      set_oldlv(from.oldlv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_newlv()) {
      set_newlv(from.newlv());
    }
    if (from.has_oldevolv()) {
      set_oldevolv(from.oldevolv());
    }
    if (from.has_newevolv()) {
      set_newevolv(from.newevolv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stHeroPropChgLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stHeroPropChgLog::CopyFrom(const stHeroPropChgLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stHeroPropChgLog::IsInitialized() const {

  return true;
}

void stHeroPropChgLog::Swap(stHeroPropChgLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(account_, other->account_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(heroid_, other->heroid_);
    std::swap(action_, other->action_);
    std::swap(oldlv_, other->oldlv_);
    std::swap(newlv_, other->newlv_);
    std::swap(oldevolv_, other->oldevolv_);
    std::swap(newevolv_, other->newevolv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stHeroPropChgLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stHeroPropChgLog_descriptor_;
  metadata.reflection = stHeroPropChgLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendGuildLog_ProtoModID_descriptor_;
}
bool stSendGuildLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendGuildLog_ProtoModID stSendGuildLog::ModID;
const stSendGuildLog_ProtoModID stSendGuildLog::ProtoModID_MIN;
const stSendGuildLog_ProtoModID stSendGuildLog::ProtoModID_MAX;
const int stSendGuildLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendGuildLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendGuildLog_ProtoFunID_descriptor_;
}
bool stSendGuildLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendGuildLog_ProtoFunID stSendGuildLog::FunID;
const stSendGuildLog_ProtoFunID stSendGuildLog::ProtoFunID_MIN;
const stSendGuildLog_ProtoFunID stSendGuildLog::ProtoFunID_MAX;
const int stSendGuildLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendGuildLog::kAccountFieldNumber;
const int stSendGuildLog::kOpIDFieldNumber;
const int stSendGuildLog::kCharIDFieldNumber;
const int stSendGuildLog::kLevelFieldNumber;
const int stSendGuildLog::kVipLvFieldNumber;
const int stSendGuildLog::kGuildIDFieldNumber;
const int stSendGuildLog::kActionFieldNumber;
const int stSendGuildLog::kOpObjIDFieldNumber;
#endif  // !_MSC_VER

stSendGuildLog::stSendGuildLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendGuildLog::InitAsDefaultInstance() {
}

stSendGuildLog::stSendGuildLog(const stSendGuildLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendGuildLog::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  charid_ = 0u;
  level_ = 0u;
  viplv_ = 0u;
  guildid_ = 0u;
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opobjid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendGuildLog::~stSendGuildLog() {
  SharedDtor();
}

void stSendGuildLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (opobjid_ != &::google::protobuf::internal::kEmptyString) {
    delete opobjid_;
  }
  if (this != default_instance_) {
  }
}

void stSendGuildLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendGuildLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendGuildLog_descriptor_;
}

const stSendGuildLog& stSendGuildLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stSendGuildLog* stSendGuildLog::default_instance_ = NULL;

stSendGuildLog* stSendGuildLog::New() const {
  return new stSendGuildLog;
}

void stSendGuildLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    opid_ = 0u;
    charid_ = 0u;
    level_ = 0u;
    viplv_ = 0u;
    guildid_ = 0u;
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::kEmptyString) {
        action_->clear();
      }
    }
    if (has_opobjid()) {
      if (opobjid_ != &::google::protobuf::internal::kEmptyString) {
        opobjid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendGuildLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_guildID;
        break;
      }

      // optional uint32 guildID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_action;
        break;
      }

      // optional string action = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_opObjID;
        break;
      }

      // optional string opObjID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_opObjID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_opobjid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->opobjid().data(), this->opobjid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendGuildLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opid(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplv(), output);
  }

  // optional uint32 guildID = 6;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->guildid(), output);
  }

  // optional string action = 7;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->action(), output);
  }

  // optional string opObjID = 8;
  if (has_opobjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opobjid().data(), this->opobjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->opobjid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendGuildLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opid(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplv(), target);
  }

  // optional uint32 guildID = 6;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->guildid(), target);
  }

  // optional string action = 7;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->action(), target);
  }

  // optional string opObjID = 8;
  if (has_opobjid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->opobjid().data(), this->opobjid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->opobjid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendGuildLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 opID = 2;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLv = 5;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 guildID = 6;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional string action = 7;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional string opObjID = 8;
    if (has_opobjid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->opobjid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendGuildLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendGuildLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendGuildLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendGuildLog::MergeFrom(const stSendGuildLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_opobjid()) {
      set_opobjid(from.opobjid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendGuildLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendGuildLog::CopyFrom(const stSendGuildLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendGuildLog::IsInitialized() const {

  return true;
}

void stSendGuildLog::Swap(stSendGuildLog* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(opid_, other->opid_);
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(guildid_, other->guildid_);
    std::swap(action_, other->action_);
    std::swap(opobjid_, other->opobjid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendGuildLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendGuildLog_descriptor_;
  metadata.reflection = stSendGuildLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sstSendGuildResLog_ProtoModID_descriptor_;
}
bool sstSendGuildResLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const sstSendGuildResLog_ProtoModID sstSendGuildResLog::ModID;
const sstSendGuildResLog_ProtoModID sstSendGuildResLog::ProtoModID_MIN;
const sstSendGuildResLog_ProtoModID sstSendGuildResLog::ProtoModID_MAX;
const int sstSendGuildResLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* sstSendGuildResLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sstSendGuildResLog_ProtoFunID_descriptor_;
}
bool sstSendGuildResLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog::FunID;
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog::ProtoFunID_MIN;
const sstSendGuildResLog_ProtoFunID sstSendGuildResLog::ProtoFunID_MAX;
const int sstSendGuildResLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int sstSendGuildResLog::kGuildIDFieldNumber;
const int sstSendGuildResLog::kResFieldNumber;
const int sstSendGuildResLog::kOldValFieldNumber;
const int sstSendGuildResLog::kNewValFieldNumber;
const int sstSendGuildResLog::kReasonFieldNumber;
#endif  // !_MSC_VER

sstSendGuildResLog::sstSendGuildResLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void sstSendGuildResLog::InitAsDefaultInstance() {
}

sstSendGuildResLog::sstSendGuildResLog(const sstSendGuildResLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void sstSendGuildResLog::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  oldval_ = 0u;
  newval_ = 0u;
  reason_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

sstSendGuildResLog::~sstSendGuildResLog() {
  SharedDtor();
}

void sstSendGuildResLog::SharedDtor() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (reason_ != &::google::protobuf::internal::kEmptyString) {
    delete reason_;
  }
  if (this != default_instance_) {
  }
}

void sstSendGuildResLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* sstSendGuildResLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return sstSendGuildResLog_descriptor_;
}

const sstSendGuildResLog& sstSendGuildResLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

sstSendGuildResLog* sstSendGuildResLog::default_instance_ = NULL;

sstSendGuildResLog* sstSendGuildResLog::New() const {
  return new sstSendGuildResLog;
}

void sstSendGuildResLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
    if (has_res()) {
      if (res_ != &::google::protobuf::internal::kEmptyString) {
        res_->clear();
      }
    }
    oldval_ = 0u;
    newval_ = 0u;
    if (has_reason()) {
      if (reason_ != &::google::protobuf::internal::kEmptyString) {
        reason_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool sstSendGuildResLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_res;
        break;
      }

      // optional string res = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_res:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res().data(), this->res().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldVal;
        break;
      }

      // optional uint32 oldVal = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldval_)));
          set_has_oldval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newVal;
        break;
      }

      // optional uint32 newVal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newval_)));
          set_has_newval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_reason;
        break;
      }

      // optional string reason = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reason:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reason()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reason().data(), this->reason().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void sstSendGuildResLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  // optional string res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->res(), output);
  }

  // optional uint32 oldVal = 3;
  if (has_oldval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldval(), output);
  }

  // optional uint32 newVal = 4;
  if (has_newval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newval(), output);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* sstSendGuildResLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  // optional string res = 2;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->res(), target);
  }

  // optional uint32 oldVal = 3;
  if (has_oldval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldval(), target);
  }

  // optional uint32 newVal = 4;
  if (has_newval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newval(), target);
  }

  // optional string reason = 5;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reason().data(), this->reason().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int sstSendGuildResLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional string res = 2;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res());
    }

    // optional uint32 oldVal = 3;
    if (has_oldval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldval());
    }

    // optional uint32 newVal = 4;
    if (has_newval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newval());
    }

    // optional string reason = 5;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void sstSendGuildResLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const sstSendGuildResLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const sstSendGuildResLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void sstSendGuildResLog::MergeFrom(const sstSendGuildResLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_oldval()) {
      set_oldval(from.oldval());
    }
    if (from.has_newval()) {
      set_newval(from.newval());
    }
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void sstSendGuildResLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void sstSendGuildResLog::CopyFrom(const sstSendGuildResLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool sstSendGuildResLog::IsInitialized() const {

  return true;
}

void sstSendGuildResLog::Swap(sstSendGuildResLog* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(res_, other->res_);
    std::swap(oldval_, other->oldval_);
    std::swap(newval_, other->newval_);
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata sstSendGuildResLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = sstSendGuildResLog_descriptor_;
  metadata.reflection = sstSendGuildResLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendModuleLog_ProtoModID_descriptor_;
}
bool stSendModuleLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendModuleLog_ProtoModID stSendModuleLog::ModID;
const stSendModuleLog_ProtoModID stSendModuleLog::ProtoModID_MIN;
const stSendModuleLog_ProtoModID stSendModuleLog::ProtoModID_MAX;
const int stSendModuleLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendModuleLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendModuleLog_ProtoFunID_descriptor_;
}
bool stSendModuleLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendModuleLog_ProtoFunID stSendModuleLog::FunID;
const stSendModuleLog_ProtoFunID stSendModuleLog::ProtoFunID_MIN;
const stSendModuleLog_ProtoFunID stSendModuleLog::ProtoFunID_MAX;
const int stSendModuleLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendModuleLog::kAccountFieldNumber;
const int stSendModuleLog::kOpIDFieldNumber;
const int stSendModuleLog::kCharIDFieldNumber;
const int stSendModuleLog::kLevelFieldNumber;
const int stSendModuleLog::kVipLvFieldNumber;
const int stSendModuleLog::kModuleFieldNumber;
const int stSendModuleLog::kCopymapIDFieldNumber;
const int stSendModuleLog::kOtherCharIDFieldNumber;
const int stSendModuleLog::kResultFieldNumber;
const int stSendModuleLog::kOldRankFieldNumber;
const int stSendModuleLog::kNewRankFieldNumber;
#endif  // !_MSC_VER

stSendModuleLog::stSendModuleLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendModuleLog::InitAsDefaultInstance() {
}

stSendModuleLog::stSendModuleLog(const stSendModuleLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendModuleLog::SharedCtor() {
  _cached_size_ = 0;
  account_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  opid_ = 0u;
  charid_ = 0u;
  level_ = 0u;
  viplv_ = 0u;
  module_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  copymapid_ = 0u;
  othercharid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  result_ = false;
  oldrank_ = 0u;
  newrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendModuleLog::~stSendModuleLog() {
  SharedDtor();
}

void stSendModuleLog::SharedDtor() {
  if (account_ != &::google::protobuf::internal::kEmptyString) {
    delete account_;
  }
  if (module_ != &::google::protobuf::internal::kEmptyString) {
    delete module_;
  }
  if (othercharid_ != &::google::protobuf::internal::kEmptyString) {
    delete othercharid_;
  }
  if (this != default_instance_) {
  }
}

void stSendModuleLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendModuleLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendModuleLog_descriptor_;
}

const stSendModuleLog& stSendModuleLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stSendModuleLog* stSendModuleLog::default_instance_ = NULL;

stSendModuleLog* stSendModuleLog::New() const {
  return new stSendModuleLog;
}

void stSendModuleLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_account()) {
      if (account_ != &::google::protobuf::internal::kEmptyString) {
        account_->clear();
      }
    }
    opid_ = 0u;
    charid_ = 0u;
    level_ = 0u;
    viplv_ = 0u;
    if (has_module()) {
      if (module_ != &::google::protobuf::internal::kEmptyString) {
        module_->clear();
      }
    }
    copymapid_ = 0u;
    if (has_othercharid()) {
      if (othercharid_ != &::google::protobuf::internal::kEmptyString) {
        othercharid_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    result_ = false;
    oldrank_ = 0u;
    newrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendModuleLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string account = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_account()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->account().data(), this->account().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_opID;
        break;
      }

      // optional uint32 opID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_opID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opid_)));
          set_has_opid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional uint32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_vipLv;
        break;
      }

      // optional uint32 vipLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_module;
        break;
      }

      // optional string module = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_module()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->module().data(), this->module().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_copymapID;
        break;
      }

      // optional uint32 copymapID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_otherCharID;
        break;
      }

      // optional string otherCharID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherCharID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othercharid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->othercharid().data(), this->othercharid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_result;
        break;
      }

      // optional bool result = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_oldRank;
        break;
      }

      // optional uint32 oldRank = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldrank_)));
          set_has_oldrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_newRank;
        break;
      }

      // optional uint32 newRank = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newrank_)));
          set_has_newrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendModuleLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->account(), output);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opid(), output);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->charid(), output);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->level(), output);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->viplv(), output);
  }

  // optional string module = 6;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->module(), output);
  }

  // optional uint32 copymapID = 7;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->copymapid(), output);
  }

  // optional string otherCharID = 8;
  if (has_othercharid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othercharid().data(), this->othercharid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->othercharid(), output);
  }

  // optional bool result = 9;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->result(), output);
  }

  // optional uint32 oldRank = 10;
  if (has_oldrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->oldrank(), output);
  }

  // optional uint32 newRank = 11;
  if (has_newrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->newrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendModuleLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string account = 1;
  if (has_account()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->account().data(), this->account().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->account(), target);
  }

  // optional uint32 opID = 2;
  if (has_opid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opid(), target);
  }

  // optional uint32 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->charid(), target);
  }

  // optional uint32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->level(), target);
  }

  // optional uint32 vipLv = 5;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->viplv(), target);
  }

  // optional string module = 6;
  if (has_module()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->module().data(), this->module().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->module(), target);
  }

  // optional uint32 copymapID = 7;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->copymapid(), target);
  }

  // optional string otherCharID = 8;
  if (has_othercharid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othercharid().data(), this->othercharid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->othercharid(), target);
  }

  // optional bool result = 9;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->result(), target);
  }

  // optional uint32 oldRank = 10;
  if (has_oldrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->oldrank(), target);
  }

  // optional uint32 newRank = 11;
  if (has_newrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->newrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendModuleLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string account = 1;
    if (has_account()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->account());
    }

    // optional uint32 opID = 2;
    if (has_opid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opid());
    }

    // optional uint32 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 vipLv = 5;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional string module = 6;
    if (has_module()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->module());
    }

    // optional uint32 copymapID = 7;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional string otherCharID = 8;
    if (has_othercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othercharid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool result = 9;
    if (has_result()) {
      total_size += 1 + 1;
    }

    // optional uint32 oldRank = 10;
    if (has_oldrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldrank());
    }

    // optional uint32 newRank = 11;
    if (has_newrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendModuleLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendModuleLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendModuleLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendModuleLog::MergeFrom(const stSendModuleLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_account()) {
      set_account(from.account());
    }
    if (from.has_opid()) {
      set_opid(from.opid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_module()) {
      set_module(from.module());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_othercharid()) {
      set_othercharid(from.othercharid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_oldrank()) {
      set_oldrank(from.oldrank());
    }
    if (from.has_newrank()) {
      set_newrank(from.newrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendModuleLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendModuleLog::CopyFrom(const stSendModuleLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendModuleLog::IsInitialized() const {

  return true;
}

void stSendModuleLog::Swap(stSendModuleLog* other) {
  if (other != this) {
    std::swap(account_, other->account_);
    std::swap(opid_, other->opid_);
    std::swap(charid_, other->charid_);
    std::swap(level_, other->level_);
    std::swap(viplv_, other->viplv_);
    std::swap(module_, other->module_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(othercharid_, other->othercharid_);
    std::swap(result_, other->result_);
    std::swap(oldrank_, other->oldrank_);
    std::swap(newrank_, other->newrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendModuleLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendModuleLog_descriptor_;
  metadata.reflection = stSendModuleLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSkillChgLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSkillChgLog_ProtoModID_descriptor_;
}
bool stSkillChgLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSkillChgLog_ProtoModID stSkillChgLog::ModID;
const stSkillChgLog_ProtoModID stSkillChgLog::ProtoModID_MIN;
const stSkillChgLog_ProtoModID stSkillChgLog::ProtoModID_MAX;
const int stSkillChgLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSkillChgLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSkillChgLog_ProtoFunID_descriptor_;
}
bool stSkillChgLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSkillChgLog_ProtoFunID stSkillChgLog::FunID;
const stSkillChgLog_ProtoFunID stSkillChgLog::ProtoFunID_MIN;
const stSkillChgLog_ProtoFunID stSkillChgLog::ProtoFunID_MAX;
const int stSkillChgLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSkillChgLog::kSkillIDFieldNumber;
const int stSkillChgLog::kPosFieldNumber;
const int stSkillChgLog::kOldLvFieldNumber;
const int stSkillChgLog::kNewLvFieldNumber;
const int stSkillChgLog::kDecGoldCoindFieldNumber;
const int stSkillChgLog::kActionFieldNumber;
#endif  // !_MSC_VER

stSkillChgLog::stSkillChgLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSkillChgLog::InitAsDefaultInstance() {
}

stSkillChgLog::stSkillChgLog(const stSkillChgLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSkillChgLog::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0u;
  pos_ = 0u;
  oldlv_ = 0u;
  newlv_ = 0u;
  decgoldcoind_ = 0u;
  action_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSkillChgLog::~stSkillChgLog() {
  SharedDtor();
}

void stSkillChgLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSkillChgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSkillChgLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSkillChgLog_descriptor_;
}

const stSkillChgLog& stSkillChgLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stSkillChgLog* stSkillChgLog::default_instance_ = NULL;

stSkillChgLog* stSkillChgLog::New() const {
  return new stSkillChgLog;
}

void stSkillChgLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0u;
    pos_ = 0u;
    oldlv_ = 0u;
    newlv_ = 0u;
    decgoldcoind_ = 0u;
    action_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSkillChgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_oldLv;
        break;
      }

      // optional uint32 oldLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldlv_)));
          set_has_oldlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_newLv;
        break;
      }

      // optional uint32 newLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newlv_)));
          set_has_newlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_decGoldCoind;
        break;
      }

      // optional uint32 decGoldCoind = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decGoldCoind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decgoldcoind_)));
          set_has_decgoldcoind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_action;
        break;
      }

      // optional uint32 action = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_action:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &action_)));
          set_has_action();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSkillChgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->skillid(), output);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->pos(), output);
  }

  // optional uint32 oldLv = 3;
  if (has_oldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->oldlv(), output);
  }

  // optional uint32 newLv = 4;
  if (has_newlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->newlv(), output);
  }

  // optional uint32 decGoldCoind = 5;
  if (has_decgoldcoind()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->decgoldcoind(), output);
  }

  // optional uint32 action = 6;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSkillChgLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->skillid(), target);
  }

  // optional uint32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->pos(), target);
  }

  // optional uint32 oldLv = 3;
  if (has_oldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->oldlv(), target);
  }

  // optional uint32 newLv = 4;
  if (has_newlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->newlv(), target);
  }

  // optional uint32 decGoldCoind = 5;
  if (has_decgoldcoind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->decgoldcoind(), target);
  }

  // optional uint32 action = 6;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSkillChgLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->skillid());
    }

    // optional uint32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 oldLv = 3;
    if (has_oldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldlv());
    }

    // optional uint32 newLv = 4;
    if (has_newlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newlv());
    }

    // optional uint32 decGoldCoind = 5;
    if (has_decgoldcoind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decgoldcoind());
    }

    // optional uint32 action = 6;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSkillChgLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSkillChgLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSkillChgLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSkillChgLog::MergeFrom(const stSkillChgLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_oldlv()) {
      set_oldlv(from.oldlv());
    }
    if (from.has_newlv()) {
      set_newlv(from.newlv());
    }
    if (from.has_decgoldcoind()) {
      set_decgoldcoind(from.decgoldcoind());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSkillChgLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSkillChgLog::CopyFrom(const stSkillChgLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSkillChgLog::IsInitialized() const {

  return true;
}

void stSkillChgLog::Swap(stSkillChgLog* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(pos_, other->pos_);
    std::swap(oldlv_, other->oldlv_);
    std::swap(newlv_, other->newlv_);
    std::swap(decgoldcoind_, other->decgoldcoind_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSkillChgLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSkillChgLog_descriptor_;
  metadata.reflection = stSkillChgLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSpriteLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteLog_ProtoModID_descriptor_;
}
bool stSpriteLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteLog_ProtoModID stSpriteLog::ModID;
const stSpriteLog_ProtoModID stSpriteLog::ProtoModID_MIN;
const stSpriteLog_ProtoModID stSpriteLog::ProtoModID_MAX;
const int stSpriteLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSpriteLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteLog_ProtoFunID_descriptor_;
}
bool stSpriteLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSpriteLog_ProtoFunID stSpriteLog::FunID;
const stSpriteLog_ProtoFunID stSpriteLog::ProtoFunID_MIN;
const stSpriteLog_ProtoFunID stSpriteLog::ProtoFunID_MAX;
const int stSpriteLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSpriteLog::kSpriteIDFieldNumber;
const int stSpriteLog::kOldLvFieldNumber;
const int stSpriteLog::kNewLvFieldNumber;
const int stSpriteLog::kConsumeFieldNumber;
#endif  // !_MSC_VER

stSpriteLog::stSpriteLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSpriteLog::InitAsDefaultInstance() {
}

stSpriteLog::stSpriteLog(const stSpriteLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSpriteLog::SharedCtor() {
  _cached_size_ = 0;
  spriteid_ = 0u;
  oldlv_ = 0u;
  newlv_ = 0u;
  consume_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSpriteLog::~stSpriteLog() {
  SharedDtor();
}

void stSpriteLog::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSpriteLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSpriteLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSpriteLog_descriptor_;
}

const stSpriteLog& stSpriteLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stSpriteLog* stSpriteLog::default_instance_ = NULL;

stSpriteLog* stSpriteLog::New() const {
  return new stSpriteLog;
}

void stSpriteLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    spriteid_ = 0u;
    oldlv_ = 0u;
    newlv_ = 0u;
    consume_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSpriteLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 spriteID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &spriteid_)));
          set_has_spriteid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oldLv;
        break;
      }

      // optional uint32 oldLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldlv_)));
          set_has_oldlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newLv;
        break;
      }

      // optional uint32 newLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newlv_)));
          set_has_newlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_consume;
        break;
      }

      // optional uint32 consume = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_consume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &consume_)));
          set_has_consume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSpriteLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->spriteid(), output);
  }

  // optional uint32 oldLv = 2;
  if (has_oldlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oldlv(), output);
  }

  // optional uint32 newLv = 3;
  if (has_newlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newlv(), output);
  }

  // optional uint32 consume = 4;
  if (has_consume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->consume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSpriteLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 spriteID = 1;
  if (has_spriteid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->spriteid(), target);
  }

  // optional uint32 oldLv = 2;
  if (has_oldlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oldlv(), target);
  }

  // optional uint32 newLv = 3;
  if (has_newlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newlv(), target);
  }

  // optional uint32 consume = 4;
  if (has_consume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->consume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSpriteLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 spriteID = 1;
    if (has_spriteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->spriteid());
    }

    // optional uint32 oldLv = 2;
    if (has_oldlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldlv());
    }

    // optional uint32 newLv = 3;
    if (has_newlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newlv());
    }

    // optional uint32 consume = 4;
    if (has_consume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->consume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSpriteLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSpriteLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSpriteLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSpriteLog::MergeFrom(const stSpriteLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_spriteid()) {
      set_spriteid(from.spriteid());
    }
    if (from.has_oldlv()) {
      set_oldlv(from.oldlv());
    }
    if (from.has_newlv()) {
      set_newlv(from.newlv());
    }
    if (from.has_consume()) {
      set_consume(from.consume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSpriteLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSpriteLog::CopyFrom(const stSpriteLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSpriteLog::IsInitialized() const {

  return true;
}

void stSpriteLog::Swap(stSpriteLog* other) {
  if (other != this) {
    std::swap(spriteid_, other->spriteid_);
    std::swap(oldlv_, other->oldlv_);
    std::swap(newlv_, other->newlv_);
    std::swap(consume_, other->consume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSpriteLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSpriteLog_descriptor_;
  metadata.reflection = stSpriteLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCopymapLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopymapLog_ProtoModID_descriptor_;
}
bool stCopymapLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCopymapLog_ProtoModID stCopymapLog::ModID;
const stCopymapLog_ProtoModID stCopymapLog::ProtoModID_MIN;
const stCopymapLog_ProtoModID stCopymapLog::ProtoModID_MAX;
const int stCopymapLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCopymapLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopymapLog_ProtoFunID_descriptor_;
}
bool stCopymapLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCopymapLog_ProtoFunID stCopymapLog::FunID;
const stCopymapLog_ProtoFunID stCopymapLog::ProtoFunID_MIN;
const stCopymapLog_ProtoFunID stCopymapLog::ProtoFunID_MAX;
const int stCopymapLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCopymapLog::kCopymapIDFieldNumber;
const int stCopymapLog::kWinFieldNumber;
const int stCopymapLog::kActionFieldNumber;
#endif  // !_MSC_VER

stCopymapLog::stCopymapLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCopymapLog::InitAsDefaultInstance() {
}

stCopymapLog::stCopymapLog(const stCopymapLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCopymapLog::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  win_ = false;
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCopymapLog::~stCopymapLog() {
  SharedDtor();
}

void stCopymapLog::SharedDtor() {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (this != default_instance_) {
  }
}

void stCopymapLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCopymapLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopymapLog_descriptor_;
}

const stCopymapLog& stCopymapLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stCopymapLog* stCopymapLog::default_instance_ = NULL;

stCopymapLog* stCopymapLog::New() const {
  return new stCopymapLog;
}

void stCopymapLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    win_ = false;
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::kEmptyString) {
        action_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCopymapLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_win;
        break;
      }

      // optional bool win = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_action;
        break;
      }

      // optional string action = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCopymapLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  // optional bool win = 2;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->win(), output);
  }

  // optional string action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->action(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCopymapLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  // optional bool win = 2;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->win(), target);
  }

  // optional string action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->action(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCopymapLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional bool win = 2;
    if (has_win()) {
      total_size += 1 + 1;
    }

    // optional string action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCopymapLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCopymapLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCopymapLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCopymapLog::MergeFrom(const stCopymapLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCopymapLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCopymapLog::CopyFrom(const stCopymapLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCopymapLog::IsInitialized() const {

  return true;
}

void stCopymapLog::Swap(stCopymapLog* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(win_, other->win_);
    std::swap(action_, other->action_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCopymapLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCopymapLog_descriptor_;
  metadata.reflection = stCopymapLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEquipChgLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEquipChgLog_ProtoModID_descriptor_;
}
bool stEquipChgLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEquipChgLog_ProtoModID stEquipChgLog::ModID;
const stEquipChgLog_ProtoModID stEquipChgLog::ProtoModID_MIN;
const stEquipChgLog_ProtoModID stEquipChgLog::ProtoModID_MAX;
const int stEquipChgLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEquipChgLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEquipChgLog_ProtoFunID_descriptor_;
}
bool stEquipChgLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEquipChgLog_ProtoFunID stEquipChgLog::FunID;
const stEquipChgLog_ProtoFunID stEquipChgLog::ProtoFunID_MIN;
const stEquipChgLog_ProtoFunID stEquipChgLog::ProtoFunID_MAX;
const int stEquipChgLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEquipChgLog::kItemIDFieldNumber;
const int stEquipChgLog::kOldRaiseLvFieldNumber;
const int stEquipChgLog::kNewRaiseLvFieldNumber;
const int stEquipChgLog::kOldRefineLvFieldNumber;
const int stEquipChgLog::kNewRefineLvFieldNumber;
const int stEquipChgLog::kActionFieldNumber;
const int stEquipChgLog::kDecGoldcoinFieldNumber;
const int stEquipChgLog::kDecYuntieFieldNumber;
const int stEquipChgLog::kDecItemIDFieldNumber;
const int stEquipChgLog::kAddGoldcoinFieldNumber;
const int stEquipChgLog::kAddYuntieFieldNumber;
const int stEquipChgLog::kAddItemIDFieldNumber;
#endif  // !_MSC_VER

stEquipChgLog::stEquipChgLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEquipChgLog::InitAsDefaultInstance() {
}

stEquipChgLog::stEquipChgLog(const stEquipChgLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEquipChgLog::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0u;
  oldraiselv_ = 0u;
  newraiselv_ = 0u;
  oldrefinelv_ = 0u;
  newrefinelv_ = 0u;
  action_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  decgoldcoin_ = 0u;
  decyuntie_ = 0u;
  decitemid_ = 0u;
  addgoldcoin_ = 0u;
  addyuntie_ = 0u;
  additemid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEquipChgLog::~stEquipChgLog() {
  SharedDtor();
}

void stEquipChgLog::SharedDtor() {
  if (action_ != &::google::protobuf::internal::kEmptyString) {
    delete action_;
  }
  if (this != default_instance_) {
  }
}

void stEquipChgLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEquipChgLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEquipChgLog_descriptor_;
}

const stEquipChgLog& stEquipChgLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stEquipChgLog* stEquipChgLog::default_instance_ = NULL;

stEquipChgLog* stEquipChgLog::New() const {
  return new stEquipChgLog;
}

void stEquipChgLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0u;
    oldraiselv_ = 0u;
    newraiselv_ = 0u;
    oldrefinelv_ = 0u;
    newrefinelv_ = 0u;
    if (has_action()) {
      if (action_ != &::google::protobuf::internal::kEmptyString) {
        action_->clear();
      }
    }
    decgoldcoin_ = 0u;
    decyuntie_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    decitemid_ = 0u;
    addgoldcoin_ = 0u;
    addyuntie_ = 0u;
    additemid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEquipChgLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_oldRaiseLv;
        break;
      }

      // optional uint32 oldRaiseLv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldRaiseLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldraiselv_)));
          set_has_oldraiselv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newRaiseLv;
        break;
      }

      // optional uint32 newRaiseLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newRaiseLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newraiselv_)));
          set_has_newraiselv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_oldRefineLv;
        break;
      }

      // optional uint32 oldRefineLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_oldRefineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &oldrefinelv_)));
          set_has_oldrefinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_newRefineLv;
        break;
      }

      // optional uint32 newRefineLv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newRefineLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &newrefinelv_)));
          set_has_newrefinelv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_action;
        break;
      }

      // optional string action = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_action:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_action()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->action().data(), this->action().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_decGoldcoin;
        break;
      }

      // optional uint32 decGoldcoin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decGoldcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decgoldcoin_)));
          set_has_decgoldcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_decYuntie;
        break;
      }

      // optional uint32 decYuntie = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decYuntie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decyuntie_)));
          set_has_decyuntie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_decItemID;
        break;
      }

      // optional uint32 decItemID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_decItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &decitemid_)));
          set_has_decitemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_addGoldcoin;
        break;
      }

      // optional uint32 addGoldcoin = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addGoldcoin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addgoldcoin_)));
          set_has_addgoldcoin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_addYuntie;
        break;
      }

      // optional uint32 addYuntie = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addYuntie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &addyuntie_)));
          set_has_addyuntie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_addItemID;
        break;
      }

      // optional uint32 addItemID = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &additemid_)));
          set_has_additemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEquipChgLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->itemid(), output);
  }

  // optional uint32 oldRaiseLv = 2;
  if (has_oldraiselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->oldraiselv(), output);
  }

  // optional uint32 newRaiseLv = 3;
  if (has_newraiselv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->newraiselv(), output);
  }

  // optional uint32 oldRefineLv = 4;
  if (has_oldrefinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->oldrefinelv(), output);
  }

  // optional uint32 newRefineLv = 5;
  if (has_newrefinelv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->newrefinelv(), output);
  }

  // optional string action = 6;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->action(), output);
  }

  // optional uint32 decGoldcoin = 7;
  if (has_decgoldcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->decgoldcoin(), output);
  }

  // optional uint32 decYuntie = 8;
  if (has_decyuntie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->decyuntie(), output);
  }

  // optional uint32 decItemID = 9;
  if (has_decitemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->decitemid(), output);
  }

  // optional uint32 addGoldcoin = 10;
  if (has_addgoldcoin()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->addgoldcoin(), output);
  }

  // optional uint32 addYuntie = 11;
  if (has_addyuntie()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->addyuntie(), output);
  }

  // optional uint32 addItemID = 12;
  if (has_additemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->additemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEquipChgLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->itemid(), target);
  }

  // optional uint32 oldRaiseLv = 2;
  if (has_oldraiselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->oldraiselv(), target);
  }

  // optional uint32 newRaiseLv = 3;
  if (has_newraiselv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->newraiselv(), target);
  }

  // optional uint32 oldRefineLv = 4;
  if (has_oldrefinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->oldrefinelv(), target);
  }

  // optional uint32 newRefineLv = 5;
  if (has_newrefinelv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->newrefinelv(), target);
  }

  // optional string action = 6;
  if (has_action()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->action().data(), this->action().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->action(), target);
  }

  // optional uint32 decGoldcoin = 7;
  if (has_decgoldcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->decgoldcoin(), target);
  }

  // optional uint32 decYuntie = 8;
  if (has_decyuntie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->decyuntie(), target);
  }

  // optional uint32 decItemID = 9;
  if (has_decitemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->decitemid(), target);
  }

  // optional uint32 addGoldcoin = 10;
  if (has_addgoldcoin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->addgoldcoin(), target);
  }

  // optional uint32 addYuntie = 11;
  if (has_addyuntie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->addyuntie(), target);
  }

  // optional uint32 addItemID = 12;
  if (has_additemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->additemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEquipChgLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional uint32 oldRaiseLv = 2;
    if (has_oldraiselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldraiselv());
    }

    // optional uint32 newRaiseLv = 3;
    if (has_newraiselv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newraiselv());
    }

    // optional uint32 oldRefineLv = 4;
    if (has_oldrefinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->oldrefinelv());
    }

    // optional uint32 newRefineLv = 5;
    if (has_newrefinelv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->newrefinelv());
    }

    // optional string action = 6;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->action());
    }

    // optional uint32 decGoldcoin = 7;
    if (has_decgoldcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decgoldcoin());
    }

    // optional uint32 decYuntie = 8;
    if (has_decyuntie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decyuntie());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 decItemID = 9;
    if (has_decitemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->decitemid());
    }

    // optional uint32 addGoldcoin = 10;
    if (has_addgoldcoin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addgoldcoin());
    }

    // optional uint32 addYuntie = 11;
    if (has_addyuntie()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->addyuntie());
    }

    // optional uint32 addItemID = 12;
    if (has_additemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->additemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEquipChgLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEquipChgLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEquipChgLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEquipChgLog::MergeFrom(const stEquipChgLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_oldraiselv()) {
      set_oldraiselv(from.oldraiselv());
    }
    if (from.has_newraiselv()) {
      set_newraiselv(from.newraiselv());
    }
    if (from.has_oldrefinelv()) {
      set_oldrefinelv(from.oldrefinelv());
    }
    if (from.has_newrefinelv()) {
      set_newrefinelv(from.newrefinelv());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_decgoldcoin()) {
      set_decgoldcoin(from.decgoldcoin());
    }
    if (from.has_decyuntie()) {
      set_decyuntie(from.decyuntie());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_decitemid()) {
      set_decitemid(from.decitemid());
    }
    if (from.has_addgoldcoin()) {
      set_addgoldcoin(from.addgoldcoin());
    }
    if (from.has_addyuntie()) {
      set_addyuntie(from.addyuntie());
    }
    if (from.has_additemid()) {
      set_additemid(from.additemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEquipChgLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEquipChgLog::CopyFrom(const stEquipChgLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEquipChgLog::IsInitialized() const {

  return true;
}

void stEquipChgLog::Swap(stEquipChgLog* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(oldraiselv_, other->oldraiselv_);
    std::swap(newraiselv_, other->newraiselv_);
    std::swap(oldrefinelv_, other->oldrefinelv_);
    std::swap(newrefinelv_, other->newrefinelv_);
    std::swap(action_, other->action_);
    std::swap(decgoldcoin_, other->decgoldcoin_);
    std::swap(decyuntie_, other->decyuntie_);
    std::swap(decitemid_, other->decitemid_);
    std::swap(addgoldcoin_, other->addgoldcoin_);
    std::swap(addyuntie_, other->addyuntie_);
    std::swap(additemid_, other->additemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEquipChgLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEquipChgLog_descriptor_;
  metadata.reflection = stEquipChgLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stActivityLog_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityLog_ProtoModID_descriptor_;
}
bool stActivityLog_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActivityLog_ProtoModID stActivityLog::ModID;
const stActivityLog_ProtoModID stActivityLog::ProtoModID_MIN;
const stActivityLog_ProtoModID stActivityLog::ProtoModID_MAX;
const int stActivityLog::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stActivityLog_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityLog_ProtoFunID_descriptor_;
}
bool stActivityLog_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stActivityLog_ProtoFunID stActivityLog::FunID;
const stActivityLog_ProtoFunID stActivityLog::ProtoFunID_MIN;
const stActivityLog_ProtoFunID stActivityLog::ProtoFunID_MAX;
const int stActivityLog::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stActivityLog::kCharIDFieldNumber;
const int stActivityLog::kActivityIDFieldNumber;
const int stActivityLog::kActivityNameFieldNumber;
const int stActivityLog::kStepIDFieldNumber;
const int stActivityLog::kDescFieldNumber;
#endif  // !_MSC_VER

stActivityLog::stActivityLog()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stActivityLog::InitAsDefaultInstance() {
}

stActivityLog::stActivityLog(const stActivityLog& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stActivityLog::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  activityid_ = 0u;
  activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  stepid_ = 0u;
  desc_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stActivityLog::~stActivityLog() {
  SharedDtor();
}

void stActivityLog::SharedDtor() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (desc_ != &::google::protobuf::internal::kEmptyString) {
    delete desc_;
  }
  if (this != default_instance_) {
  }
}

void stActivityLog::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stActivityLog::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stActivityLog_descriptor_;
}

const stActivityLog& stActivityLog::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stActivityLog* stActivityLog::default_instance_ = NULL;

stActivityLog* stActivityLog::New() const {
  return new stActivityLog;
}

void stActivityLog::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    activityid_ = 0u;
    if (has_activityname()) {
      if (activityname_ != &::google::protobuf::internal::kEmptyString) {
        activityname_->clear();
      }
    }
    stepid_ = 0u;
    if (has_desc()) {
      if (desc_ != &::google::protobuf::internal::kEmptyString) {
        desc_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stActivityLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activityID;
        break;
      }

      // optional uint32 activityID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activityName;
        break;
      }

      // optional string activityName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activityname().data(), this->activityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_desc;
        break;
      }

      // optional string desc = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_desc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_desc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->desc().data(), this->desc().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stActivityLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 activityID = 2;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activityid(), output);
  }

  // optional string activityName = 3;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->activityname(), output);
  }

  // optional uint32 stepID = 4;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->stepid(), output);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->desc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stActivityLog::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 activityID = 2;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activityid(), target);
  }

  // optional string activityName = 3;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->activityname(), target);
  }

  // optional uint32 stepID = 4;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->stepid(), target);
  }

  // optional string desc = 5;
  if (has_desc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->desc().data(), this->desc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->desc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stActivityLog::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 activityID = 2;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityid());
    }

    // optional string activityName = 3;
    if (has_activityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activityname());
    }

    // optional uint32 stepID = 4;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional string desc = 5;
    if (has_desc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->desc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stActivityLog::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stActivityLog* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stActivityLog*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stActivityLog::MergeFrom(const stActivityLog& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
    if (from.has_activityname()) {
      set_activityname(from.activityname());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_desc()) {
      set_desc(from.desc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stActivityLog::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stActivityLog::CopyFrom(const stActivityLog& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stActivityLog::IsInitialized() const {

  return true;
}

void stActivityLog::Swap(stActivityLog* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(activityid_, other->activityid_);
    std::swap(activityname_, other->activityname_);
    std::swap(stepid_, other->stepid_);
    std::swap(desc_, other->desc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stActivityLog::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stActivityLog_descriptor_;
  metadata.reflection = stActivityLog_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserCancel_CancelType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserCancel_CancelType_descriptor_;
}
bool stUserCancel_CancelType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserCancel_CancelType stUserCancel::Month_Card;
const stUserCancel_CancelType stUserCancel::Forever_Card;
const stUserCancel_CancelType stUserCancel::Grown_Card;
const stUserCancel_CancelType stUserCancel::CancelType_MIN;
const stUserCancel_CancelType stUserCancel::CancelType_MAX;
const int stUserCancel::CancelType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserCancel_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserCancel_ProtoModID_descriptor_;
}
bool stUserCancel_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserCancel_ProtoModID stUserCancel::ModID;
const stUserCancel_ProtoModID stUserCancel::ProtoModID_MIN;
const stUserCancel_ProtoModID stUserCancel::ProtoModID_MAX;
const int stUserCancel::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserCancel_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserCancel_ProtoFunID_descriptor_;
}
bool stUserCancel_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserCancel_ProtoFunID stUserCancel::FunID;
const stUserCancel_ProtoFunID stUserCancel::ProtoFunID_MIN;
const stUserCancel_ProtoFunID stUserCancel::ProtoFunID_MAX;
const int stUserCancel::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserCancel::kCharIDFieldNumber;
const int stUserCancel::kTypeFieldNumber;
const int stUserCancel::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stUserCancel::stUserCancel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserCancel::InitAsDefaultInstance() {
}

stUserCancel::stUserCancel(const stUserCancel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserCancel::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  type_ = 0u;
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserCancel::~stUserCancel() {
  SharedDtor();
}

void stUserCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUserCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserCancel_descriptor_;
}

const stUserCancel& stUserCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stUserCancel* stUserCancel::default_instance_ = NULL;

stUserCancel* stUserCancel::New() const {
  return new stUserCancel;
}

void stUserCancel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    type_ = 0u;
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserCancel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional uint32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserCancel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->type(), output);
  }

  // optional uint32 webConnID = 3;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserCancel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->type(), target);
  }

  // optional uint32 webConnID = 3;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserCancel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->type());
    }

    // optional uint32 webConnID = 3;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserCancel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserCancel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserCancel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserCancel::MergeFrom(const stUserCancel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserCancel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserCancel::CopyFrom(const stUserCancel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserCancel::IsInitialized() const {

  return true;
}

void stUserCancel::Swap(stUserCancel* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserCancel_descriptor_;
  metadata.reflection = stUserCancel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUserCancelRes_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserCancelRes_ProtoModID_descriptor_;
}
bool stUserCancelRes_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserCancelRes_ProtoModID stUserCancelRes::ModID;
const stUserCancelRes_ProtoModID stUserCancelRes::ProtoModID_MIN;
const stUserCancelRes_ProtoModID stUserCancelRes::ProtoModID_MAX;
const int stUserCancelRes::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUserCancelRes_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserCancelRes_ProtoFunID_descriptor_;
}
bool stUserCancelRes_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUserCancelRes_ProtoFunID stUserCancelRes::FunID;
const stUserCancelRes_ProtoFunID stUserCancelRes::ProtoFunID_MIN;
const stUserCancelRes_ProtoFunID stUserCancelRes::ProtoFunID_MAX;
const int stUserCancelRes::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUserCancelRes::kResFieldNumber;
const int stUserCancelRes::kWebConnIDFieldNumber;
#endif  // !_MSC_VER

stUserCancelRes::stUserCancelRes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUserCancelRes::InitAsDefaultInstance() {
}

stUserCancelRes::stUserCancelRes(const stUserCancelRes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUserCancelRes::SharedCtor() {
  _cached_size_ = 0;
  res_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  webconnid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUserCancelRes::~stUserCancelRes() {
  SharedDtor();
}

void stUserCancelRes::SharedDtor() {
  if (res_ != &::google::protobuf::internal::kEmptyString) {
    delete res_;
  }
  if (this != default_instance_) {
  }
}

void stUserCancelRes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUserCancelRes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUserCancelRes_descriptor_;
}

const stUserCancelRes& stUserCancelRes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stUserCancelRes* stUserCancelRes::default_instance_ = NULL;

stUserCancelRes* stUserCancelRes::New() const {
  return new stUserCancelRes;
}

void stUserCancelRes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_res()) {
      if (res_ != &::google::protobuf::internal::kEmptyString) {
        res_->clear();
      }
    }
    webconnid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUserCancelRes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string res = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_res()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->res().data(), this->res().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_webConnID;
        break;
      }

      // optional uint32 webConnID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_webConnID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &webconnid_)));
          set_has_webconnid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUserCancelRes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->res(), output);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->webconnid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUserCancelRes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string res = 1;
  if (has_res()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->res().data(), this->res().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->res(), target);
  }

  // optional uint32 webConnID = 2;
  if (has_webconnid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->webconnid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUserCancelRes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string res = 1;
    if (has_res()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->res());
    }

    // optional uint32 webConnID = 2;
    if (has_webconnid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->webconnid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUserCancelRes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUserCancelRes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUserCancelRes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUserCancelRes::MergeFrom(const stUserCancelRes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_res()) {
      set_res(from.res());
    }
    if (from.has_webconnid()) {
      set_webconnid(from.webconnid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUserCancelRes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUserCancelRes::CopyFrom(const stUserCancelRes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUserCancelRes::IsInitialized() const {

  return true;
}

void stUserCancelRes::Swap(stUserCancelRes* other) {
  if (other != this) {
    std::swap(res_, other->res_);
    std::swap(webconnid_, other->webconnid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUserCancelRes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUserCancelRes_descriptor_;
  metadata.reflection = stUserCancelRes_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayType_ProtoModID_descriptor_;
}
bool stReqPayType_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPayType_ProtoModID stReqPayType::ModID;
const stReqPayType_ProtoModID stReqPayType::ProtoModID_MIN;
const stReqPayType_ProtoModID stReqPayType::ProtoModID_MAX;
const int stReqPayType::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPayType_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayType_ProtoFunID_descriptor_;
}
bool stReqPayType_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPayType_ProtoFunID stReqPayType::FunID;
const stReqPayType_ProtoFunID stReqPayType::ProtoFunID_MIN;
const stReqPayType_ProtoFunID stReqPayType::ProtoFunID_MAX;
const int stReqPayType::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPayType::kCharIDFieldNumber;
const int stReqPayType::kItemIdFieldNumber;
const int stReqPayType::kOrderIdFieldNumber;
const int stReqPayType::kPayTypeFieldNumber;
const int stReqPayType::kIsExtendFieldNumber;
const int stReqPayType::kDataFieldNumber;
#endif  // !_MSC_VER

stReqPayType::stReqPayType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPayType::InitAsDefaultInstance() {
}

stReqPayType::stReqPayType(const stReqPayType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPayType::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  itemid_ = 0u;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isextend_ = false;
  data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPayType::~stReqPayType() {
  SharedDtor();
}

void stReqPayType::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (paytype_ != &::google::protobuf::internal::kEmptyString) {
    delete paytype_;
  }
  if (data_ != &::google::protobuf::internal::kEmptyString) {
    delete data_;
  }
  if (this != default_instance_) {
  }
}

void stReqPayType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPayType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayType_descriptor_;
}

const stReqPayType& stReqPayType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stReqPayType* stReqPayType::default_instance_ = NULL;

stReqPayType* stReqPayType::New() const {
  return new stReqPayType;
}

void stReqPayType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    itemid_ = 0u;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    if (has_paytype()) {
      if (paytype_ != &::google::protobuf::internal::kEmptyString) {
        paytype_->clear();
      }
    }
    isextend_ = false;
    if (has_data()) {
      if (data_ != &::google::protobuf::internal::kEmptyString) {
        data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPayType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderId;
        break;
      }

      // optional string orderId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_payType;
        break;
      }

      // optional string payType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paytype().data(), this->paytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isExtend;
        break;
      }

      // optional bool isExtend = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isExtend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isextend_)));
          set_has_isextend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // optional string data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->data().data(), this->data().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPayType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  // optional string payType = 4;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paytype().data(), this->paytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->paytype(), output);
  }

  // optional bool isExtend = 5;
  if (has_isextend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isextend(), output);
  }

  // optional string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPayType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // optional string payType = 4;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paytype().data(), this->paytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->paytype(), target);
  }

  // optional bool isExtend = 5;
  if (has_isextend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isextend(), target);
  }

  // optional string data = 6;
  if (has_data()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->data().data(), this->data().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPayType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string orderId = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional string payType = 4;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paytype());
    }

    // optional bool isExtend = 5;
    if (has_isextend()) {
      total_size += 1 + 1;
    }

    // optional string data = 6;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPayType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPayType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPayType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPayType::MergeFrom(const stReqPayType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_isextend()) {
      set_isextend(from.isextend());
    }
    if (from.has_data()) {
      set_data(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPayType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPayType::CopyFrom(const stReqPayType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPayType::IsInitialized() const {

  return true;
}

void stReqPayType::Swap(stReqPayType* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(orderid_, other->orderid_);
    std::swap(paytype_, other->paytype_);
    std::swap(isextend_, other->isextend_);
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPayType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPayType_descriptor_;
  metadata.reflection = stReqPayType_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayTypeCb_ProtoModID_descriptor_;
}
bool stReqPayTypeCb_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPayTypeCb_ProtoModID stReqPayTypeCb::ModID;
const stReqPayTypeCb_ProtoModID stReqPayTypeCb::ProtoModID_MIN;
const stReqPayTypeCb_ProtoModID stReqPayTypeCb::ProtoModID_MAX;
const int stReqPayTypeCb::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPayTypeCb_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayTypeCb_ProtoFunID_descriptor_;
}
bool stReqPayTypeCb_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb::FunID;
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb::ProtoFunID_MIN;
const stReqPayTypeCb_ProtoFunID stReqPayTypeCb::ProtoFunID_MAX;
const int stReqPayTypeCb::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPayTypeCb::kCharIDFieldNumber;
const int stReqPayTypeCb::kItemIdFieldNumber;
const int stReqPayTypeCb::kOrderIdFieldNumber;
const int stReqPayTypeCb::kPayTypeFieldNumber;
const int stReqPayTypeCb::kResFieldNumber;
#endif  // !_MSC_VER

stReqPayTypeCb::stReqPayTypeCb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPayTypeCb::InitAsDefaultInstance() {
}

stReqPayTypeCb::stReqPayTypeCb(const stReqPayTypeCb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPayTypeCb::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  itemid_ = 0u;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  paytype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  res_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPayTypeCb::~stReqPayTypeCb() {
  SharedDtor();
}

void stReqPayTypeCb::SharedDtor() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (paytype_ != &::google::protobuf::internal::kEmptyString) {
    delete paytype_;
  }
  if (this != default_instance_) {
  }
}

void stReqPayTypeCb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPayTypeCb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPayTypeCb_descriptor_;
}

const stReqPayTypeCb& stReqPayTypeCb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stReqPayTypeCb* stReqPayTypeCb::default_instance_ = NULL;

stReqPayTypeCb* stReqPayTypeCb::New() const {
  return new stReqPayTypeCb;
}

void stReqPayTypeCb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    itemid_ = 0u;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    if (has_paytype()) {
      if (paytype_ != &::google::protobuf::internal::kEmptyString) {
        paytype_->clear();
      }
    }
    res_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPayTypeCb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional uint32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderId;
        break;
      }

      // optional string orderId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_payType;
        break;
      }

      // optional string payType = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paytype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->paytype().data(), this->paytype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_res;
        break;
      }

      // optional bool res = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_res:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &res_)));
          set_has_res();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPayTypeCb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->itemid(), output);
  }

  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  // optional string payType = 4;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paytype().data(), this->paytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->paytype(), output);
  }

  // optional bool res = 5;
  if (has_res()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->res(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPayTypeCb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->itemid(), target);
  }

  // optional string orderId = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // optional string payType = 4;
  if (has_paytype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->paytype().data(), this->paytype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->paytype(), target);
  }

  // optional bool res = 5;
  if (has_res()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->res(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPayTypeCb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->itemid());
    }

    // optional string orderId = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // optional string payType = 4;
    if (has_paytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paytype());
    }

    // optional bool res = 5;
    if (has_res()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPayTypeCb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPayTypeCb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPayTypeCb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPayTypeCb::MergeFrom(const stReqPayTypeCb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_paytype()) {
      set_paytype(from.paytype());
    }
    if (from.has_res()) {
      set_res(from.res());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPayTypeCb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPayTypeCb::CopyFrom(const stReqPayTypeCb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPayTypeCb::IsInitialized() const {

  return true;
}

void stReqPayTypeCb::Swap(stReqPayTypeCb* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(orderid_, other->orderid_);
    std::swap(paytype_, other->paytype_);
    std::swap(res_, other->res_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPayTypeCb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPayTypeCb_descriptor_;
  metadata.reflection = stReqPayTypeCb_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateSvrOpenTime_ProtoModID_descriptor_;
}
bool stUpdateSvrOpenTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime::ModID;
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime::ProtoModID_MIN;
const stUpdateSvrOpenTime_ProtoModID stUpdateSvrOpenTime::ProtoModID_MAX;
const int stUpdateSvrOpenTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stUpdateSvrOpenTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateSvrOpenTime_ProtoFunID_descriptor_;
}
bool stUpdateSvrOpenTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime::FunID;
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime::ProtoFunID_MIN;
const stUpdateSvrOpenTime_ProtoFunID stUpdateSvrOpenTime::ProtoFunID_MAX;
const int stUpdateSvrOpenTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stUpdateSvrOpenTime::kTimeFieldNumber;
#endif  // !_MSC_VER

stUpdateSvrOpenTime::stUpdateSvrOpenTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stUpdateSvrOpenTime::InitAsDefaultInstance() {
}

stUpdateSvrOpenTime::stUpdateSvrOpenTime(const stUpdateSvrOpenTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stUpdateSvrOpenTime::SharedCtor() {
  _cached_size_ = 0;
  time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stUpdateSvrOpenTime::~stUpdateSvrOpenTime() {
  SharedDtor();
}

void stUpdateSvrOpenTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stUpdateSvrOpenTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stUpdateSvrOpenTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stUpdateSvrOpenTime_descriptor_;
}

const stUpdateSvrOpenTime& stUpdateSvrOpenTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stUpdateSvrOpenTime* stUpdateSvrOpenTime::default_instance_ = NULL;

stUpdateSvrOpenTime* stUpdateSvrOpenTime::New() const {
  return new stUpdateSvrOpenTime;
}

void stUpdateSvrOpenTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stUpdateSvrOpenTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stUpdateSvrOpenTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stUpdateSvrOpenTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stUpdateSvrOpenTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stUpdateSvrOpenTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stUpdateSvrOpenTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stUpdateSvrOpenTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stUpdateSvrOpenTime::MergeFrom(const stUpdateSvrOpenTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stUpdateSvrOpenTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stUpdateSvrOpenTime::CopyFrom(const stUpdateSvrOpenTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stUpdateSvrOpenTime::IsInitialized() const {

  return true;
}

void stUpdateSvrOpenTime::Swap(stUpdateSvrOpenTime* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stUpdateSvrOpenTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stUpdateSvrOpenTime_descriptor_;
  metadata.reflection = stUpdateSvrOpenTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stAcitivityLimitPetItem::kIdFieldNumber;
const int stAcitivityLimitPetItem::kActiviyIdFieldNumber;
const int stAcitivityLimitPetItem::kStartTimeFieldNumber;
const int stAcitivityLimitPetItem::kEndTimeFieldNumber;
#endif  // !_MSC_VER

stAcitivityLimitPetItem::stAcitivityLimitPetItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAcitivityLimitPetItem::InitAsDefaultInstance() {
}

stAcitivityLimitPetItem::stAcitivityLimitPetItem(const stAcitivityLimitPetItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAcitivityLimitPetItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  activiyid_ = 0u;
  starttime_ = 0u;
  endtime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAcitivityLimitPetItem::~stAcitivityLimitPetItem() {
  SharedDtor();
}

void stAcitivityLimitPetItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAcitivityLimitPetItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAcitivityLimitPetItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAcitivityLimitPetItem_descriptor_;
}

const stAcitivityLimitPetItem& stAcitivityLimitPetItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stAcitivityLimitPetItem* stAcitivityLimitPetItem::default_instance_ = NULL;

stAcitivityLimitPetItem* stAcitivityLimitPetItem::New() const {
  return new stAcitivityLimitPetItem;
}

void stAcitivityLimitPetItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
    activiyid_ = 0u;
    starttime_ = 0u;
    endtime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAcitivityLimitPetItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_activiyId;
        break;
      }

      // optional uint32 activiyId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activiyId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activiyid_)));
          set_has_activiyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_startTime;
        break;
      }

      // optional uint32 startTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }

      // optional uint32 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAcitivityLimitPetItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional uint32 activiyId = 2;
  if (has_activiyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->activiyid(), output);
  }

  // optional uint32 startTime = 3;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->starttime(), output);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAcitivityLimitPetItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional uint32 activiyId = 2;
  if (has_activiyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->activiyid(), target);
  }

  // optional uint32 startTime = 3;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->starttime(), target);
  }

  // optional uint32 endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAcitivityLimitPetItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 activiyId = 2;
    if (has_activiyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activiyid());
    }

    // optional uint32 startTime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAcitivityLimitPetItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAcitivityLimitPetItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAcitivityLimitPetItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAcitivityLimitPetItem::MergeFrom(const stAcitivityLimitPetItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_activiyid()) {
      set_activiyid(from.activiyid());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAcitivityLimitPetItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAcitivityLimitPetItem::CopyFrom(const stAcitivityLimitPetItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAcitivityLimitPetItem::IsInitialized() const {

  return true;
}

void stAcitivityLimitPetItem::Swap(stAcitivityLimitPetItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(activiyid_, other->activiyid_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAcitivityLimitPetItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAcitivityLimitPetItem_descriptor_;
  metadata.reflection = stAcitivityLimitPetItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLimitPetActivityData_ProtoModID_descriptor_;
}
bool stSendLimitPetActivityData_ProtoModID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData::ModID;
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData::ProtoModID_MIN;
const stSendLimitPetActivityData_ProtoModID stSendLimitPetActivityData::ProtoModID_MAX;
const int stSendLimitPetActivityData::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendLimitPetActivityData_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLimitPetActivityData_ProtoFunID_descriptor_;
}
bool stSendLimitPetActivityData_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData::FunID;
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData::ProtoFunID_MIN;
const stSendLimitPetActivityData_ProtoFunID stSendLimitPetActivityData::ProtoFunID_MAX;
const int stSendLimitPetActivityData::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendLimitPetActivityData::kMsgFieldNumber;
const int stSendLimitPetActivityData::kItemFieldNumber;
#endif  // !_MSC_VER

stSendLimitPetActivityData::stSendLimitPetActivityData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendLimitPetActivityData::InitAsDefaultInstance() {
}

stSendLimitPetActivityData::stSendLimitPetActivityData(const stSendLimitPetActivityData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendLimitPetActivityData::SharedCtor() {
  _cached_size_ = 0;
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendLimitPetActivityData::~stSendLimitPetActivityData() {
  SharedDtor();
}

void stSendLimitPetActivityData::SharedDtor() {
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void stSendLimitPetActivityData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendLimitPetActivityData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendLimitPetActivityData_descriptor_;
}

const stSendLimitPetActivityData& stSendLimitPetActivityData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Game_2eproto();
  return *default_instance_;
}

stSendLimitPetActivityData* stSendLimitPetActivityData::default_instance_ = NULL;

stSendLimitPetActivityData* stSendLimitPetActivityData::New() const {
  return new stSendLimitPetActivityData;
}

void stSendLimitPetActivityData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendLimitPetActivityData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string msg = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .Game.stAcitivityLimitPetItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendLimitPetActivityData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->msg(), output);
  }

  // repeated .Game.stAcitivityLimitPetItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendLimitPetActivityData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string msg = 1;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->msg(), target);
  }

  // repeated .Game.stAcitivityLimitPetItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendLimitPetActivityData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  // repeated .Game.stAcitivityLimitPetItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendLimitPetActivityData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendLimitPetActivityData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendLimitPetActivityData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendLimitPetActivityData::MergeFrom(const stSendLimitPetActivityData& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendLimitPetActivityData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendLimitPetActivityData::CopyFrom(const stSendLimitPetActivityData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendLimitPetActivityData::IsInitialized() const {

  return true;
}

void stSendLimitPetActivityData::Swap(stSendLimitPetActivityData* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendLimitPetActivityData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendLimitPetActivityData_descriptor_;
  metadata.reflection = stSendLimitPetActivityData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Game

// @@protoc_insertion_point(global_scope)
