// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Task.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TaskProto {

namespace {

const ::google::protobuf::Descriptor* stSynFinishTaskID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynFinishTaskID_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynFinishTaskID_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynFinishTaskID_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyTaskFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyTaskFinish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyTaskFinish_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyTaskFinish_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stTaskCounter_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stTaskCounter_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stSynAllAcceptTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynAllAcceptTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllAcceptTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynAllAcceptTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqAcceptTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqAcceptTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAcceptTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqAcceptTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyAddTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyAddTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyAddTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAcceptTaskError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAcceptTaskError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAcceptTaskError_eReason_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAcceptTaskError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAcceptTaskError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshTaskInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshTaskInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshTaskInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCommitTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCommitTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCommitTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCommitTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCommitTaskResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCommitTaskResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCommitTaskResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCommitTaskResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCommitTaskResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChgTaskSubStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChgTaskSubStatus_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChgTaskSubStatus_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChgTaskSubStatus_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSaveCurrentTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSaveCurrentTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveCurrentTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSaveCurrentTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyCurrentTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyCurrentTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCurrentTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyCurrentTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqBatchAcceptTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqBatchAcceptTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBatchAcceptTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqBatchAcceptTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetBatchAccpetTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetBatchAccpetTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetBatchAccpetTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetBatchAccpetTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynDailyTaskScore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynDailyTaskScore_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynDailyTaskScore_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynDailyTaskScore_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDailyTaskScoreInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDailyTaskScoreInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDailyTaskScoreInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDailyTaskScoreInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDailyTaskScoreReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDailyTaskScoreReward_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDailyTaskScoreReward_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDailyTaskScoreReward_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDailyTaskScoreRewardResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDailyTaskScoreRewardResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDailyTaskScoreRewardResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDailyTaskScoreRewardResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDailyTaskScoreRewardResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenTaskWindow_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenTaskWindow_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenTaskWindow_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenTaskWindow_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshAllDailyTask_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshAllDailyTask_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshAllDailyTask_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshAllDailyTask_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* GAME_EVENT_TYPE_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* TASK_STATUS_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Task_2eproto() {
  protobuf_AddDesc_Task_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Task.proto");
  GOOGLE_CHECK(file != NULL);
  stSynFinishTaskID_descriptor_ = file->message_type(0);
  static const int stSynFinishTaskID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFinishTaskID, finishtaskidlist_),
  };
  stSynFinishTaskID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynFinishTaskID_descriptor_,
      stSynFinishTaskID::default_instance_,
      stSynFinishTaskID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFinishTaskID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFinishTaskID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynFinishTaskID));
  stSynFinishTaskID_ProtoModID_descriptor_ = stSynFinishTaskID_descriptor_->enum_type(0);
  stSynFinishTaskID_ProtoFunID_descriptor_ = stSynFinishTaskID_descriptor_->enum_type(1);
  stNotifyTaskFinish_descriptor_ = file->message_type(1);
  static const int stNotifyTaskFinish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyTaskFinish, taskid_),
  };
  stNotifyTaskFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyTaskFinish_descriptor_,
      stNotifyTaskFinish::default_instance_,
      stNotifyTaskFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyTaskFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyTaskFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyTaskFinish));
  stNotifyTaskFinish_ProtoModID_descriptor_ = stNotifyTaskFinish_descriptor_->enum_type(0);
  stNotifyTaskFinish_ProtoFunID_descriptor_ = stNotifyTaskFinish_descriptor_->enum_type(1);
  stTaskCounter_descriptor_ = file->message_type(2);
  static const int stTaskCounter_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTaskCounter, eventtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTaskCounter, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTaskCounter, value_),
  };
  stTaskCounter_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stTaskCounter_descriptor_,
      stTaskCounter::default_instance_,
      stTaskCounter_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTaskCounter, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stTaskCounter, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stTaskCounter));
  stSynTaskInfo_descriptor_ = file->message_type(3);
  static const int stSynTaskInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTaskInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTaskInfo, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTaskInfo, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTaskInfo, subts_),
  };
  stSynTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynTaskInfo_descriptor_,
      stSynTaskInfo::default_instance_,
      stSynTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynTaskInfo));
  stSynAllAcceptTask_descriptor_ = file->message_type(4);
  static const int stSynAllAcceptTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllAcceptTask, taskinfolist_),
  };
  stSynAllAcceptTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynAllAcceptTask_descriptor_,
      stSynAllAcceptTask::default_instance_,
      stSynAllAcceptTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllAcceptTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynAllAcceptTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynAllAcceptTask));
  stSynAllAcceptTask_ProtoModID_descriptor_ = stSynAllAcceptTask_descriptor_->enum_type(0);
  stSynAllAcceptTask_ProtoFunID_descriptor_ = stSynAllAcceptTask_descriptor_->enum_type(1);
  stReqAcceptTask_descriptor_ = file->message_type(5);
  static const int stReqAcceptTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAcceptTask, taskid_),
  };
  stReqAcceptTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqAcceptTask_descriptor_,
      stReqAcceptTask::default_instance_,
      stReqAcceptTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAcceptTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqAcceptTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqAcceptTask));
  stReqAcceptTask_ProtoModID_descriptor_ = stReqAcceptTask_descriptor_->enum_type(0);
  stReqAcceptTask_ProtoFunID_descriptor_ = stReqAcceptTask_descriptor_->enum_type(1);
  stNotifyAddTask_descriptor_ = file->message_type(6);
  static const int stNotifyAddTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddTask, taskinfo_),
  };
  stNotifyAddTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyAddTask_descriptor_,
      stNotifyAddTask::default_instance_,
      stNotifyAddTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyAddTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyAddTask));
  stNotifyAddTask_ProtoModID_descriptor_ = stNotifyAddTask_descriptor_->enum_type(0);
  stNotifyAddTask_ProtoFunID_descriptor_ = stNotifyAddTask_descriptor_->enum_type(1);
  stAcceptTaskError_descriptor_ = file->message_type(7);
  static const int stAcceptTaskError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcceptTaskError, reason_),
  };
  stAcceptTaskError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAcceptTaskError_descriptor_,
      stAcceptTaskError::default_instance_,
      stAcceptTaskError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcceptTaskError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAcceptTaskError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAcceptTaskError));
  stAcceptTaskError_eReason_descriptor_ = stAcceptTaskError_descriptor_->enum_type(0);
  stAcceptTaskError_ProtoModID_descriptor_ = stAcceptTaskError_descriptor_->enum_type(1);
  stAcceptTaskError_ProtoFunID_descriptor_ = stAcceptTaskError_descriptor_->enum_type(2);
  stRefreshTaskInfo_descriptor_ = file->message_type(8);
  static const int stRefreshTaskInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshTaskInfo, taskinfo_),
  };
  stRefreshTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshTaskInfo_descriptor_,
      stRefreshTaskInfo::default_instance_,
      stRefreshTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshTaskInfo));
  stRefreshTaskInfo_ProtoModID_descriptor_ = stRefreshTaskInfo_descriptor_->enum_type(0);
  stRefreshTaskInfo_ProtoFunID_descriptor_ = stRefreshTaskInfo_descriptor_->enum_type(1);
  stReqCommitTask_descriptor_ = file->message_type(9);
  static const int stReqCommitTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCommitTask, taskid_),
  };
  stReqCommitTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCommitTask_descriptor_,
      stReqCommitTask::default_instance_,
      stReqCommitTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCommitTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCommitTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCommitTask));
  stReqCommitTask_ProtoModID_descriptor_ = stReqCommitTask_descriptor_->enum_type(0);
  stReqCommitTask_ProtoFunID_descriptor_ = stReqCommitTask_descriptor_->enum_type(1);
  stCommitTaskResult_descriptor_ = file->message_type(10);
  static const int stCommitTaskResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommitTaskResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommitTaskResult, taskid_),
  };
  stCommitTaskResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCommitTaskResult_descriptor_,
      stCommitTaskResult::default_instance_,
      stCommitTaskResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommitTaskResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCommitTaskResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCommitTaskResult));
  stCommitTaskResult_eResult_descriptor_ = stCommitTaskResult_descriptor_->enum_type(0);
  stCommitTaskResult_ProtoModID_descriptor_ = stCommitTaskResult_descriptor_->enum_type(1);
  stCommitTaskResult_ProtoFunID_descriptor_ = stCommitTaskResult_descriptor_->enum_type(2);
  stChgTaskSubStatus_descriptor_ = file->message_type(11);
  static const int stChgTaskSubStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgTaskSubStatus, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgTaskSubStatus, subts_),
  };
  stChgTaskSubStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChgTaskSubStatus_descriptor_,
      stChgTaskSubStatus::default_instance_,
      stChgTaskSubStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgTaskSubStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgTaskSubStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChgTaskSubStatus));
  stChgTaskSubStatus_ProtoModID_descriptor_ = stChgTaskSubStatus_descriptor_->enum_type(0);
  stChgTaskSubStatus_ProtoFunID_descriptor_ = stChgTaskSubStatus_descriptor_->enum_type(1);
  stSaveCurrentTask_descriptor_ = file->message_type(12);
  static const int stSaveCurrentTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveCurrentTask, curtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveCurrentTask, curstage_),
  };
  stSaveCurrentTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSaveCurrentTask_descriptor_,
      stSaveCurrentTask::default_instance_,
      stSaveCurrentTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveCurrentTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSaveCurrentTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSaveCurrentTask));
  stSaveCurrentTask_ProtoModID_descriptor_ = stSaveCurrentTask_descriptor_->enum_type(0);
  stSaveCurrentTask_ProtoFunID_descriptor_ = stSaveCurrentTask_descriptor_->enum_type(1);
  stNotifyCurrentTask_descriptor_ = file->message_type(13);
  static const int stNotifyCurrentTask_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurrentTask, curtaskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurrentTask, curstate_),
  };
  stNotifyCurrentTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyCurrentTask_descriptor_,
      stNotifyCurrentTask::default_instance_,
      stNotifyCurrentTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurrentTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyCurrentTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyCurrentTask));
  stNotifyCurrentTask_ProtoModID_descriptor_ = stNotifyCurrentTask_descriptor_->enum_type(0);
  stNotifyCurrentTask_ProtoFunID_descriptor_ = stNotifyCurrentTask_descriptor_->enum_type(1);
  stReqBatchAcceptTask_descriptor_ = file->message_type(14);
  static const int stReqBatchAcceptTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBatchAcceptTask, taskids_),
  };
  stReqBatchAcceptTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqBatchAcceptTask_descriptor_,
      stReqBatchAcceptTask::default_instance_,
      stReqBatchAcceptTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBatchAcceptTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqBatchAcceptTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqBatchAcceptTask));
  stReqBatchAcceptTask_ProtoModID_descriptor_ = stReqBatchAcceptTask_descriptor_->enum_type(0);
  stReqBatchAcceptTask_ProtoFunID_descriptor_ = stReqBatchAcceptTask_descriptor_->enum_type(1);
  stRetBatchAccpetTask_descriptor_ = file->message_type(15);
  static const int stRetBatchAccpetTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBatchAccpetTask, taskinfos_),
  };
  stRetBatchAccpetTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetBatchAccpetTask_descriptor_,
      stRetBatchAccpetTask::default_instance_,
      stRetBatchAccpetTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBatchAccpetTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetBatchAccpetTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetBatchAccpetTask));
  stRetBatchAccpetTask_ProtoModID_descriptor_ = stRetBatchAccpetTask_descriptor_->enum_type(0);
  stRetBatchAccpetTask_ProtoFunID_descriptor_ = stRetBatchAccpetTask_descriptor_->enum_type(1);
  stSynDailyTaskScore_descriptor_ = file->message_type(16);
  static const int stSynDailyTaskScore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDailyTaskScore, num_),
  };
  stSynDailyTaskScore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynDailyTaskScore_descriptor_,
      stSynDailyTaskScore::default_instance_,
      stSynDailyTaskScore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDailyTaskScore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynDailyTaskScore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynDailyTaskScore));
  stSynDailyTaskScore_ProtoModID_descriptor_ = stSynDailyTaskScore_descriptor_->enum_type(0);
  stSynDailyTaskScore_ProtoFunID_descriptor_ = stSynDailyTaskScore_descriptor_->enum_type(1);
  stDailyTaskScoreInfo_descriptor_ = file->message_type(17);
  static const int stDailyTaskScoreInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskScoreInfo, dailytaskscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskScoreInfo, rewardids_),
  };
  stDailyTaskScoreInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDailyTaskScoreInfo_descriptor_,
      stDailyTaskScoreInfo::default_instance_,
      stDailyTaskScoreInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskScoreInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskScoreInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDailyTaskScoreInfo));
  stDailyTaskScoreInfo_ProtoModID_descriptor_ = stDailyTaskScoreInfo_descriptor_->enum_type(0);
  stDailyTaskScoreInfo_ProtoFunID_descriptor_ = stDailyTaskScoreInfo_descriptor_->enum_type(1);
  stReqDailyTaskScoreReward_descriptor_ = file->message_type(18);
  static const int stReqDailyTaskScoreReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDailyTaskScoreReward, id_),
  };
  stReqDailyTaskScoreReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDailyTaskScoreReward_descriptor_,
      stReqDailyTaskScoreReward::default_instance_,
      stReqDailyTaskScoreReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDailyTaskScoreReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDailyTaskScoreReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDailyTaskScoreReward));
  stReqDailyTaskScoreReward_ProtoModID_descriptor_ = stReqDailyTaskScoreReward_descriptor_->enum_type(0);
  stReqDailyTaskScoreReward_ProtoFunID_descriptor_ = stReqDailyTaskScoreReward_descriptor_->enum_type(1);
  stDailyTaskScoreRewardResult_descriptor_ = file->message_type(19);
  static const int stDailyTaskScoreRewardResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskScoreRewardResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskScoreRewardResult, id_),
  };
  stDailyTaskScoreRewardResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDailyTaskScoreRewardResult_descriptor_,
      stDailyTaskScoreRewardResult::default_instance_,
      stDailyTaskScoreRewardResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskScoreRewardResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDailyTaskScoreRewardResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDailyTaskScoreRewardResult));
  stDailyTaskScoreRewardResult_eResult_descriptor_ = stDailyTaskScoreRewardResult_descriptor_->enum_type(0);
  stDailyTaskScoreRewardResult_ProtoModID_descriptor_ = stDailyTaskScoreRewardResult_descriptor_->enum_type(1);
  stDailyTaskScoreRewardResult_ProtoFunID_descriptor_ = stDailyTaskScoreRewardResult_descriptor_->enum_type(2);
  stCancelTask_descriptor_ = file->message_type(20);
  static const int stCancelTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelTask, taskid_),
  };
  stCancelTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelTask_descriptor_,
      stCancelTask::default_instance_,
      stCancelTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelTask));
  stCancelTask_ProtoModID_descriptor_ = stCancelTask_descriptor_->enum_type(0);
  stCancelTask_ProtoFunID_descriptor_ = stCancelTask_descriptor_->enum_type(1);
  stReqOpenTaskWindow_descriptor_ = file->message_type(21);
  static const int stReqOpenTaskWindow_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenTaskWindow, charid_),
  };
  stReqOpenTaskWindow_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenTaskWindow_descriptor_,
      stReqOpenTaskWindow::default_instance_,
      stReqOpenTaskWindow_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenTaskWindow, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenTaskWindow, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenTaskWindow));
  stReqOpenTaskWindow_ProtoModID_descriptor_ = stReqOpenTaskWindow_descriptor_->enum_type(0);
  stReqOpenTaskWindow_ProtoFunID_descriptor_ = stReqOpenTaskWindow_descriptor_->enum_type(1);
  stRefreshAllDailyTask_descriptor_ = file->message_type(22);
  static const int stRefreshAllDailyTask_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshAllDailyTask, tasks_),
  };
  stRefreshAllDailyTask_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshAllDailyTask_descriptor_,
      stRefreshAllDailyTask::default_instance_,
      stRefreshAllDailyTask_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshAllDailyTask, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshAllDailyTask, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshAllDailyTask));
  stRefreshAllDailyTask_ProtoModID_descriptor_ = stRefreshAllDailyTask_descriptor_->enum_type(0);
  stRefreshAllDailyTask_ProtoFunID_descriptor_ = stRefreshAllDailyTask_descriptor_->enum_type(1);
  GAME_EVENT_TYPE_descriptor_ = file->enum_type(0);
  TASK_STATUS_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Task_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynFinishTaskID_descriptor_, &stSynFinishTaskID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyTaskFinish_descriptor_, &stNotifyTaskFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stTaskCounter_descriptor_, &stTaskCounter::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynTaskInfo_descriptor_, &stSynTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynAllAcceptTask_descriptor_, &stSynAllAcceptTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqAcceptTask_descriptor_, &stReqAcceptTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyAddTask_descriptor_, &stNotifyAddTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAcceptTaskError_descriptor_, &stAcceptTaskError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshTaskInfo_descriptor_, &stRefreshTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCommitTask_descriptor_, &stReqCommitTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCommitTaskResult_descriptor_, &stCommitTaskResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChgTaskSubStatus_descriptor_, &stChgTaskSubStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSaveCurrentTask_descriptor_, &stSaveCurrentTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyCurrentTask_descriptor_, &stNotifyCurrentTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqBatchAcceptTask_descriptor_, &stReqBatchAcceptTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetBatchAccpetTask_descriptor_, &stRetBatchAccpetTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynDailyTaskScore_descriptor_, &stSynDailyTaskScore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDailyTaskScoreInfo_descriptor_, &stDailyTaskScoreInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDailyTaskScoreReward_descriptor_, &stReqDailyTaskScoreReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDailyTaskScoreRewardResult_descriptor_, &stDailyTaskScoreRewardResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelTask_descriptor_, &stCancelTask::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenTaskWindow_descriptor_, &stReqOpenTaskWindow::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshAllDailyTask_descriptor_, &stRefreshAllDailyTask::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Task_2eproto() {
  delete stSynFinishTaskID::default_instance_;
  delete stSynFinishTaskID_reflection_;
  delete stNotifyTaskFinish::default_instance_;
  delete stNotifyTaskFinish_reflection_;
  delete stTaskCounter::default_instance_;
  delete stTaskCounter_reflection_;
  delete stSynTaskInfo::default_instance_;
  delete stSynTaskInfo_reflection_;
  delete stSynAllAcceptTask::default_instance_;
  delete stSynAllAcceptTask_reflection_;
  delete stReqAcceptTask::default_instance_;
  delete stReqAcceptTask_reflection_;
  delete stNotifyAddTask::default_instance_;
  delete stNotifyAddTask_reflection_;
  delete stAcceptTaskError::default_instance_;
  delete stAcceptTaskError_reflection_;
  delete stRefreshTaskInfo::default_instance_;
  delete stRefreshTaskInfo_reflection_;
  delete stReqCommitTask::default_instance_;
  delete stReqCommitTask_reflection_;
  delete stCommitTaskResult::default_instance_;
  delete stCommitTaskResult_reflection_;
  delete stChgTaskSubStatus::default_instance_;
  delete stChgTaskSubStatus_reflection_;
  delete stSaveCurrentTask::default_instance_;
  delete stSaveCurrentTask_reflection_;
  delete stNotifyCurrentTask::default_instance_;
  delete stNotifyCurrentTask_reflection_;
  delete stReqBatchAcceptTask::default_instance_;
  delete stReqBatchAcceptTask_reflection_;
  delete stRetBatchAccpetTask::default_instance_;
  delete stRetBatchAccpetTask_reflection_;
  delete stSynDailyTaskScore::default_instance_;
  delete stSynDailyTaskScore_reflection_;
  delete stDailyTaskScoreInfo::default_instance_;
  delete stDailyTaskScoreInfo_reflection_;
  delete stReqDailyTaskScoreReward::default_instance_;
  delete stReqDailyTaskScoreReward_reflection_;
  delete stDailyTaskScoreRewardResult::default_instance_;
  delete stDailyTaskScoreRewardResult_reflection_;
  delete stCancelTask::default_instance_;
  delete stCancelTask_reflection_;
  delete stReqOpenTaskWindow::default_instance_;
  delete stReqOpenTaskWindow_reflection_;
  delete stRefreshAllDailyTask::default_instance_;
  delete stRefreshAllDailyTask_reflection_;
}

void protobuf_AddDesc_Task_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_ModID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nTask.proto\022\tTaskProto\032\013ModID.proto\"_\n\021"
    "stSynFinishTaskID\022\030\n\020finishTaskIDList\030\001 "
    "\003(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\001\"V\n\022stNotifyTaskFinish\022\016\n\006t"
    "askID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\002\"Y\n\rstTaskCounter\022-"
    "\n\teventType\030\001 \001(\0162\032.TaskProto.GAME_EVENT"
    "_TYPE\022\n\n\002id\030\002 \001(\r\022\r\n\005value\030\003 \001(\r\"e\n\rstSy"
    "nTaskInfo\022\016\n\006taskID\030\001 \001(\r\022\n\n\002ts\030\002 \001(\r\022)\n"
    "\007counter\030\003 \003(\0132\030.TaskProto.stTaskCounter"
    "\022\r\n\005subTs\030\004 \001(\r\"v\n\022stSynAllAcceptTask\022.\n"
    "\014taskInfoList\030\001 \003(\0132\030.TaskProto.stSynTas"
    "kInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\003\"S\n\017stReqAcceptTask\022\016\n\006ta"
    "skID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020\004\"o\n\017stNotifyAddTask\022"
    "*\n\010taskInfo\030\001 \001(\0132\030.TaskProto.stSynTaskI"
    "nfo\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\005\"\233\001\n\021stAcceptTaskError\0224\n\006r"
    "eason\030\001 \001(\0162$.TaskProto.stAcceptTaskErro"
    "r.eReason\"\036\n\007eReason\022\023\n\017eCon_Not_Enough\020"
    "\001\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020\006\"q\n\021stRefreshTaskInfo\022*\n\010task"
    "Info\030\001 \001(\0132\030.TaskProto.stSynTaskInfo\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\007\"S\n\017stReqCommitTask\022\016\n\006taskID\030\001 \001("
    "\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020\010\"\273\001\n\022stCommitTaskResult\0225\n\006re"
    "sult\030\001 \001(\0162%.TaskProto.stCommitTaskResul"
    "t.eResult\022\016\n\006taskID\030\002 \001(\r\",\n\007eResult\022\014\n\010"
    "eSUCCESS\020\001\022\023\n\017eCON_NOT_ENOUGH\020\002\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\004\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\t\"e\n\022stChgTaskSubStatus\022\016\n\006taskID\030\001 \001(\r\022"
    "\r\n\005subTs\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020\n\"j\n\021stSaveCurren"
    "tTask\022\021\n\tcurTaskID\030\001 \001(\r\022\020\n\010curStage\030\002 \001"
    "(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\013\"l\n\023stNotifyCurrentTask\022\021\n\tc"
    "urTaskID\030\001 \001(\r\022\020\n\010curState\030\002 \001(\r\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\004\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\020\014\"Y\n\024stReqBatchAcceptTask\022\017\n\007taskIDs\030\001 "
    "\003(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\r\"u\n\024stRetBatchAccpetTask\022+\n"
    "\ttaskInfos\030\001 \003(\0132\030.TaskProto.stSynTaskIn"
    "fo\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFunI"
    "D\022\t\n\005FunID\020\016\"T\n\023stSynDailyTaskScore\022\013\n\003n"
    "um\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\017\"s\n\024stDailyTaskScoreIn"
    "fo\022\026\n\016dailyTaskScore\030\001 \001(\r\022\021\n\trewardIDs\030"
    "\002 \003(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\020\"Y\n\031stReqDailyTaskScoreRe"
    "ward\022\n\n\002id\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020"
    "\004\"\027\n\nProtoFunID\022\t\n\005FunID\020\021\"\203\002\n\034stDailyTa"
    "skScoreRewardResult\022\?\n\006result\030\001 \001(\0162/.Ta"
    "skProto.stDailyTaskScoreRewardResult.eRe"
    "sult\022\n\n\002id\030\002 \001(\r\"d\n\007eResult\022\014\n\010eSuccess\020"
    "\001\022\025\n\021eScore_Not_Enough\020\002\022\023\n\017eHas_Got_Rew"
    "ard\020\003\022\020\n\014eInner_Error\020\004\022\r\n\teBag_Full\020\005\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020\022\"P\n\014stCancelTask\022\016\n\006taskID\030\001 \001(\r"
    "\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoFunID\022"
    "\t\n\005FunID\020\023\"W\n\023stReqOpenTaskWindow\022\016\n\006cha"
    "rID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020\024\"r\n\025stRefreshAllDaily"
    "Task\022\'\n\005tasks\030\001 \003(\0132\030.TaskProto.stSynTas"
    "kInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\004\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020\025*\325\006\n\017GAME_EVENT_TYPE\022\025\n\021E"
    "T_FINISH_COPYMAP\020\001\022\030\n\024ET_RAISE_EQUIP_TO_"
    "LV\020\013\022\031\n\025ET_REFINE_EQUIP_TO_LV\020\014\022\031\n\025ET_HE"
    "RO_BREAK_INTO_LV\020\r\022\031\n\025ET_HERO_LEVELUP_TO"
    "_LV\020\016\022\030\n\024ET_RAISE_SKILL_TO_LV\020\017\022\026\n\022ET_EQ"
    "UIP_FUWEN_NUM\020\020\022\030\n\024ET_RAISE_FUWEN_TO_LV\020"
    "\021\022\032\n\026ET_COLLECT_FASHION_NUM\020\022\022\017\n\013ET_DRAW"
    "_NUM\020\037\022\034\n\030ET_CAPTRURE_TREASURE_NUM\020 \022\020\n\014"
    "ET_ARENA_NUM\020!\022\036\n\032ET_TEAM_FINISH_COPYMAP"
    "_NUM\020\"\022\026\n\022ET_DIANFENG_PK_NUM\020#\022\033\n\027ET_REA"
    "LTIME_COPYMAP_NUM\020$\022\031\n\025ET_LEITAI_COPYMAP"
    "_NUM\020%\022\033\n\027ET_SHENGCUN_COPYMAP_NUM\020&\022\033\n\027E"
    "T_GOLDCOIN_COPYMAP_NUM\020\'\022\030\n\024ET_ELITE_COP"
    "YMAP_NUM\020(\022\025\n\021ET_RAISE_HERO_NUM\020*\022\026\n\022ET_"
    "RAISE_SKILL_NUM\020+\022\026\n\022ET_RAISE_EQUIP_NUM\020"
    ",\022\026\n\022ET_RAISE_FUWEN_NUM\020-\022\027\n\023ET_GET_WELF"
    "ARE_CARD\0203\022\025\n\021ET_GET_MONTH_CARD\0204\022\027\n\023ET_"
    "GET_QUARTER_CARD\0205\022\024\n\020ET_GET_YEAR_CARD\0206"
    "\022\014\n\010ET_GUARD\020>\022\020\n\014ET_INTERCEPT\020\?\022\030\n\024ET_B"
    "UY_SHOP_ITEM_NUM\020@\022\025\n\021ET_EXPEDITION_NUM\020"
    "A\022\025\n\021ET_RESET_RUSH_NUM\020B\022\026\n\022ET_GIVE_LILI"
    "AN_NUM\020C\022\025\n\021ET_GUILD_PRAY_NUM\020D*_\n\013TASK_"
    "STATUS\022\016\n\nTS_INVALID\020\000\022\021\n\rTS_INCOMPLETE\020"
    "\001\022\017\n\013TS_COMPLETE\020\002\022\r\n\tTS_FAILED\020\003\022\r\n\tTS_"
    "REWARD\020\004", 3608);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Task.proto", &protobuf_RegisterTypes);
  stSynFinishTaskID::default_instance_ = new stSynFinishTaskID();
  stNotifyTaskFinish::default_instance_ = new stNotifyTaskFinish();
  stTaskCounter::default_instance_ = new stTaskCounter();
  stSynTaskInfo::default_instance_ = new stSynTaskInfo();
  stSynAllAcceptTask::default_instance_ = new stSynAllAcceptTask();
  stReqAcceptTask::default_instance_ = new stReqAcceptTask();
  stNotifyAddTask::default_instance_ = new stNotifyAddTask();
  stAcceptTaskError::default_instance_ = new stAcceptTaskError();
  stRefreshTaskInfo::default_instance_ = new stRefreshTaskInfo();
  stReqCommitTask::default_instance_ = new stReqCommitTask();
  stCommitTaskResult::default_instance_ = new stCommitTaskResult();
  stChgTaskSubStatus::default_instance_ = new stChgTaskSubStatus();
  stSaveCurrentTask::default_instance_ = new stSaveCurrentTask();
  stNotifyCurrentTask::default_instance_ = new stNotifyCurrentTask();
  stReqBatchAcceptTask::default_instance_ = new stReqBatchAcceptTask();
  stRetBatchAccpetTask::default_instance_ = new stRetBatchAccpetTask();
  stSynDailyTaskScore::default_instance_ = new stSynDailyTaskScore();
  stDailyTaskScoreInfo::default_instance_ = new stDailyTaskScoreInfo();
  stReqDailyTaskScoreReward::default_instance_ = new stReqDailyTaskScoreReward();
  stDailyTaskScoreRewardResult::default_instance_ = new stDailyTaskScoreRewardResult();
  stCancelTask::default_instance_ = new stCancelTask();
  stReqOpenTaskWindow::default_instance_ = new stReqOpenTaskWindow();
  stRefreshAllDailyTask::default_instance_ = new stRefreshAllDailyTask();
  stSynFinishTaskID::default_instance_->InitAsDefaultInstance();
  stNotifyTaskFinish::default_instance_->InitAsDefaultInstance();
  stTaskCounter::default_instance_->InitAsDefaultInstance();
  stSynTaskInfo::default_instance_->InitAsDefaultInstance();
  stSynAllAcceptTask::default_instance_->InitAsDefaultInstance();
  stReqAcceptTask::default_instance_->InitAsDefaultInstance();
  stNotifyAddTask::default_instance_->InitAsDefaultInstance();
  stAcceptTaskError::default_instance_->InitAsDefaultInstance();
  stRefreshTaskInfo::default_instance_->InitAsDefaultInstance();
  stReqCommitTask::default_instance_->InitAsDefaultInstance();
  stCommitTaskResult::default_instance_->InitAsDefaultInstance();
  stChgTaskSubStatus::default_instance_->InitAsDefaultInstance();
  stSaveCurrentTask::default_instance_->InitAsDefaultInstance();
  stNotifyCurrentTask::default_instance_->InitAsDefaultInstance();
  stReqBatchAcceptTask::default_instance_->InitAsDefaultInstance();
  stRetBatchAccpetTask::default_instance_->InitAsDefaultInstance();
  stSynDailyTaskScore::default_instance_->InitAsDefaultInstance();
  stDailyTaskScoreInfo::default_instance_->InitAsDefaultInstance();
  stReqDailyTaskScoreReward::default_instance_->InitAsDefaultInstance();
  stDailyTaskScoreRewardResult::default_instance_->InitAsDefaultInstance();
  stCancelTask::default_instance_->InitAsDefaultInstance();
  stReqOpenTaskWindow::default_instance_->InitAsDefaultInstance();
  stRefreshAllDailyTask::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Task_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Task_2eproto {
  StaticDescriptorInitializer_Task_2eproto() {
    protobuf_AddDesc_Task_2eproto();
  }
} static_descriptor_initializer_Task_2eproto_;
const ::google::protobuf::EnumDescriptor* GAME_EVENT_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GAME_EVENT_TYPE_descriptor_;
}
bool GAME_EVENT_TYPE_IsValid(int value) {
  switch(value) {
    case 1:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 42:
    case 43:
    case 44:
    case 45:
    case 51:
    case 52:
    case 53:
    case 54:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TASK_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TASK_STATUS_descriptor_;
}
bool TASK_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynFinishTaskID_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynFinishTaskID_ProtoModID_descriptor_;
}
bool stSynFinishTaskID_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynFinishTaskID_ProtoModID stSynFinishTaskID::ModID;
const stSynFinishTaskID_ProtoModID stSynFinishTaskID::ProtoModID_MIN;
const stSynFinishTaskID_ProtoModID stSynFinishTaskID::ProtoModID_MAX;
const int stSynFinishTaskID::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynFinishTaskID_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynFinishTaskID_ProtoFunID_descriptor_;
}
bool stSynFinishTaskID_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynFinishTaskID_ProtoFunID stSynFinishTaskID::FunID;
const stSynFinishTaskID_ProtoFunID stSynFinishTaskID::ProtoFunID_MIN;
const stSynFinishTaskID_ProtoFunID stSynFinishTaskID::ProtoFunID_MAX;
const int stSynFinishTaskID::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynFinishTaskID::kFinishTaskIDListFieldNumber;
#endif  // !_MSC_VER

stSynFinishTaskID::stSynFinishTaskID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynFinishTaskID::InitAsDefaultInstance() {
}

stSynFinishTaskID::stSynFinishTaskID(const stSynFinishTaskID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynFinishTaskID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynFinishTaskID::~stSynFinishTaskID() {
  SharedDtor();
}

void stSynFinishTaskID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynFinishTaskID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynFinishTaskID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynFinishTaskID_descriptor_;
}

const stSynFinishTaskID& stSynFinishTaskID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stSynFinishTaskID* stSynFinishTaskID::default_instance_ = NULL;

stSynFinishTaskID* stSynFinishTaskID::New() const {
  return new stSynFinishTaskID;
}

void stSynFinishTaskID::Clear() {
  finishtaskidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynFinishTaskID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 finishTaskIDList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finishTaskIDList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_finishtaskidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_finishtaskidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_finishTaskIDList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynFinishTaskID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 finishTaskIDList = 1;
  for (int i = 0; i < this->finishtaskidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->finishtaskidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynFinishTaskID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 finishTaskIDList = 1;
  for (int i = 0; i < this->finishtaskidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->finishtaskidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynFinishTaskID::ByteSize() const {
  int total_size = 0;

  // repeated uint32 finishTaskIDList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->finishtaskidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->finishtaskidlist(i));
    }
    total_size += 1 * this->finishtaskidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynFinishTaskID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynFinishTaskID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynFinishTaskID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynFinishTaskID::MergeFrom(const stSynFinishTaskID& from) {
  GOOGLE_CHECK_NE(&from, this);
  finishtaskidlist_.MergeFrom(from.finishtaskidlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynFinishTaskID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynFinishTaskID::CopyFrom(const stSynFinishTaskID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynFinishTaskID::IsInitialized() const {

  return true;
}

void stSynFinishTaskID::Swap(stSynFinishTaskID* other) {
  if (other != this) {
    finishtaskidlist_.Swap(&other->finishtaskidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynFinishTaskID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynFinishTaskID_descriptor_;
  metadata.reflection = stSynFinishTaskID_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyTaskFinish_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyTaskFinish_ProtoModID_descriptor_;
}
bool stNotifyTaskFinish_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyTaskFinish_ProtoModID stNotifyTaskFinish::ModID;
const stNotifyTaskFinish_ProtoModID stNotifyTaskFinish::ProtoModID_MIN;
const stNotifyTaskFinish_ProtoModID stNotifyTaskFinish::ProtoModID_MAX;
const int stNotifyTaskFinish::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyTaskFinish_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyTaskFinish_ProtoFunID_descriptor_;
}
bool stNotifyTaskFinish_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyTaskFinish_ProtoFunID stNotifyTaskFinish::FunID;
const stNotifyTaskFinish_ProtoFunID stNotifyTaskFinish::ProtoFunID_MIN;
const stNotifyTaskFinish_ProtoFunID stNotifyTaskFinish::ProtoFunID_MAX;
const int stNotifyTaskFinish::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyTaskFinish::kTaskIDFieldNumber;
#endif  // !_MSC_VER

stNotifyTaskFinish::stNotifyTaskFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyTaskFinish::InitAsDefaultInstance() {
}

stNotifyTaskFinish::stNotifyTaskFinish(const stNotifyTaskFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyTaskFinish::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyTaskFinish::~stNotifyTaskFinish() {
  SharedDtor();
}

void stNotifyTaskFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyTaskFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyTaskFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyTaskFinish_descriptor_;
}

const stNotifyTaskFinish& stNotifyTaskFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stNotifyTaskFinish* stNotifyTaskFinish::default_instance_ = NULL;

stNotifyTaskFinish* stNotifyTaskFinish::New() const {
  return new stNotifyTaskFinish;
}

void stNotifyTaskFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyTaskFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyTaskFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyTaskFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyTaskFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyTaskFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyTaskFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyTaskFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyTaskFinish::MergeFrom(const stNotifyTaskFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyTaskFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyTaskFinish::CopyFrom(const stNotifyTaskFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyTaskFinish::IsInitialized() const {

  return true;
}

void stNotifyTaskFinish::Swap(stNotifyTaskFinish* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyTaskFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyTaskFinish_descriptor_;
  metadata.reflection = stNotifyTaskFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stTaskCounter::kEventTypeFieldNumber;
const int stTaskCounter::kIdFieldNumber;
const int stTaskCounter::kValueFieldNumber;
#endif  // !_MSC_VER

stTaskCounter::stTaskCounter()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stTaskCounter::InitAsDefaultInstance() {
}

stTaskCounter::stTaskCounter(const stTaskCounter& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stTaskCounter::SharedCtor() {
  _cached_size_ = 0;
  eventtype_ = 1;
  id_ = 0u;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stTaskCounter::~stTaskCounter() {
  SharedDtor();
}

void stTaskCounter::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stTaskCounter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stTaskCounter::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stTaskCounter_descriptor_;
}

const stTaskCounter& stTaskCounter::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stTaskCounter* stTaskCounter::default_instance_ = NULL;

stTaskCounter* stTaskCounter::New() const {
  return new stTaskCounter;
}

void stTaskCounter::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    eventtype_ = 1;
    id_ = 0u;
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stTaskCounter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TaskProto.GAME_EVENT_TYPE eventType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TaskProto::GAME_EVENT_TYPE_IsValid(value)) {
            set_eventtype(static_cast< ::TaskProto::GAME_EVENT_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional uint32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stTaskCounter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TaskProto.GAME_EVENT_TYPE eventType = 1;
  if (has_eventtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->eventtype(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stTaskCounter::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TaskProto.GAME_EVENT_TYPE eventType = 1;
  if (has_eventtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->eventtype(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  // optional uint32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stTaskCounter::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TaskProto.GAME_EVENT_TYPE eventType = 1;
    if (has_eventtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->eventtype());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional uint32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stTaskCounter::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stTaskCounter* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stTaskCounter*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stTaskCounter::MergeFrom(const stTaskCounter& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_eventtype()) {
      set_eventtype(from.eventtype());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stTaskCounter::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stTaskCounter::CopyFrom(const stTaskCounter& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stTaskCounter::IsInitialized() const {

  return true;
}

void stTaskCounter::Swap(stTaskCounter* other) {
  if (other != this) {
    std::swap(eventtype_, other->eventtype_);
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stTaskCounter::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stTaskCounter_descriptor_;
  metadata.reflection = stTaskCounter_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynTaskInfo::kTaskIDFieldNumber;
const int stSynTaskInfo::kTsFieldNumber;
const int stSynTaskInfo::kCounterFieldNumber;
const int stSynTaskInfo::kSubTsFieldNumber;
#endif  // !_MSC_VER

stSynTaskInfo::stSynTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynTaskInfo::InitAsDefaultInstance() {
}

stSynTaskInfo::stSynTaskInfo(const stSynTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ts_ = 0u;
  subts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynTaskInfo::~stSynTaskInfo() {
  SharedDtor();
}

void stSynTaskInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynTaskInfo_descriptor_;
}

const stSynTaskInfo& stSynTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stSynTaskInfo* stSynTaskInfo::default_instance_ = NULL;

stSynTaskInfo* stSynTaskInfo::New() const {
  return new stSynTaskInfo;
}

void stSynTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    ts_ = 0u;
    subts_ = 0u;
  }
  counter_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ts;
        break;
      }

      // optional uint32 ts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_)));
          set_has_ts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_counter;
        break;
      }

      // repeated .TaskProto.stTaskCounter counter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_counter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_counter;
        if (input->ExpectTag(32)) goto parse_subTs;
        break;
      }

      // optional uint32 subTs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subts_)));
          set_has_subts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 ts = 2;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ts(), output);
  }

  // repeated .TaskProto.stTaskCounter counter = 3;
  for (int i = 0; i < this->counter_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->counter(i), output);
  }

  // optional uint32 subTs = 4;
  if (has_subts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->subts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 ts = 2;
  if (has_ts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ts(), target);
  }

  // repeated .TaskProto.stTaskCounter counter = 3;
  for (int i = 0; i < this->counter_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->counter(i), target);
  }

  // optional uint32 subTs = 4;
  if (has_subts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->subts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 ts = 2;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts());
    }

    // optional uint32 subTs = 4;
    if (has_subts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subts());
    }

  }
  // repeated .TaskProto.stTaskCounter counter = 3;
  total_size += 1 * this->counter_size();
  for (int i = 0; i < this->counter_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->counter(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynTaskInfo::MergeFrom(const stSynTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  counter_.MergeFrom(from.counter_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_subts()) {
      set_subts(from.subts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynTaskInfo::CopyFrom(const stSynTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynTaskInfo::IsInitialized() const {

  return true;
}

void stSynTaskInfo::Swap(stSynTaskInfo* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(ts_, other->ts_);
    counter_.Swap(&other->counter_);
    std::swap(subts_, other->subts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynTaskInfo_descriptor_;
  metadata.reflection = stSynTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynAllAcceptTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllAcceptTask_ProtoModID_descriptor_;
}
bool stSynAllAcceptTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllAcceptTask_ProtoModID stSynAllAcceptTask::ModID;
const stSynAllAcceptTask_ProtoModID stSynAllAcceptTask::ProtoModID_MIN;
const stSynAllAcceptTask_ProtoModID stSynAllAcceptTask::ProtoModID_MAX;
const int stSynAllAcceptTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynAllAcceptTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllAcceptTask_ProtoFunID_descriptor_;
}
bool stSynAllAcceptTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynAllAcceptTask_ProtoFunID stSynAllAcceptTask::FunID;
const stSynAllAcceptTask_ProtoFunID stSynAllAcceptTask::ProtoFunID_MIN;
const stSynAllAcceptTask_ProtoFunID stSynAllAcceptTask::ProtoFunID_MAX;
const int stSynAllAcceptTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynAllAcceptTask::kTaskInfoListFieldNumber;
#endif  // !_MSC_VER

stSynAllAcceptTask::stSynAllAcceptTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynAllAcceptTask::InitAsDefaultInstance() {
}

stSynAllAcceptTask::stSynAllAcceptTask(const stSynAllAcceptTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynAllAcceptTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynAllAcceptTask::~stSynAllAcceptTask() {
  SharedDtor();
}

void stSynAllAcceptTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynAllAcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynAllAcceptTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynAllAcceptTask_descriptor_;
}

const stSynAllAcceptTask& stSynAllAcceptTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stSynAllAcceptTask* stSynAllAcceptTask::default_instance_ = NULL;

stSynAllAcceptTask* stSynAllAcceptTask::New() const {
  return new stSynAllAcceptTask;
}

void stSynAllAcceptTask::Clear() {
  taskinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynAllAcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TaskProto.stSynTaskInfo taskInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynAllAcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TaskProto.stSynTaskInfo taskInfoList = 1;
  for (int i = 0; i < this->taskinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynAllAcceptTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TaskProto.stSynTaskInfo taskInfoList = 1;
  for (int i = 0; i < this->taskinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynAllAcceptTask::ByteSize() const {
  int total_size = 0;

  // repeated .TaskProto.stSynTaskInfo taskInfoList = 1;
  total_size += 1 * this->taskinfolist_size();
  for (int i = 0; i < this->taskinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynAllAcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynAllAcceptTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynAllAcceptTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynAllAcceptTask::MergeFrom(const stSynAllAcceptTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfolist_.MergeFrom(from.taskinfolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynAllAcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynAllAcceptTask::CopyFrom(const stSynAllAcceptTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynAllAcceptTask::IsInitialized() const {

  return true;
}

void stSynAllAcceptTask::Swap(stSynAllAcceptTask* other) {
  if (other != this) {
    taskinfolist_.Swap(&other->taskinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynAllAcceptTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynAllAcceptTask_descriptor_;
  metadata.reflection = stSynAllAcceptTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqAcceptTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAcceptTask_ProtoModID_descriptor_;
}
bool stReqAcceptTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAcceptTask_ProtoModID stReqAcceptTask::ModID;
const stReqAcceptTask_ProtoModID stReqAcceptTask::ProtoModID_MIN;
const stReqAcceptTask_ProtoModID stReqAcceptTask::ProtoModID_MAX;
const int stReqAcceptTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqAcceptTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAcceptTask_ProtoFunID_descriptor_;
}
bool stReqAcceptTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqAcceptTask_ProtoFunID stReqAcceptTask::FunID;
const stReqAcceptTask_ProtoFunID stReqAcceptTask::ProtoFunID_MIN;
const stReqAcceptTask_ProtoFunID stReqAcceptTask::ProtoFunID_MAX;
const int stReqAcceptTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqAcceptTask::kTaskIDFieldNumber;
#endif  // !_MSC_VER

stReqAcceptTask::stReqAcceptTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqAcceptTask::InitAsDefaultInstance() {
}

stReqAcceptTask::stReqAcceptTask(const stReqAcceptTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqAcceptTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqAcceptTask::~stReqAcceptTask() {
  SharedDtor();
}

void stReqAcceptTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqAcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqAcceptTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqAcceptTask_descriptor_;
}

const stReqAcceptTask& stReqAcceptTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stReqAcceptTask* stReqAcceptTask::default_instance_ = NULL;

stReqAcceptTask* stReqAcceptTask::New() const {
  return new stReqAcceptTask;
}

void stReqAcceptTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqAcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqAcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqAcceptTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqAcceptTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqAcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqAcceptTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqAcceptTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqAcceptTask::MergeFrom(const stReqAcceptTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqAcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqAcceptTask::CopyFrom(const stReqAcceptTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqAcceptTask::IsInitialized() const {

  return true;
}

void stReqAcceptTask::Swap(stReqAcceptTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqAcceptTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqAcceptTask_descriptor_;
  metadata.reflection = stReqAcceptTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyAddTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddTask_ProtoModID_descriptor_;
}
bool stNotifyAddTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddTask_ProtoModID stNotifyAddTask::ModID;
const stNotifyAddTask_ProtoModID stNotifyAddTask::ProtoModID_MIN;
const stNotifyAddTask_ProtoModID stNotifyAddTask::ProtoModID_MAX;
const int stNotifyAddTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyAddTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddTask_ProtoFunID_descriptor_;
}
bool stNotifyAddTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyAddTask_ProtoFunID stNotifyAddTask::FunID;
const stNotifyAddTask_ProtoFunID stNotifyAddTask::ProtoFunID_MIN;
const stNotifyAddTask_ProtoFunID stNotifyAddTask::ProtoFunID_MAX;
const int stNotifyAddTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyAddTask::kTaskInfoFieldNumber;
#endif  // !_MSC_VER

stNotifyAddTask::stNotifyAddTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyAddTask::InitAsDefaultInstance() {
  taskinfo_ = const_cast< ::TaskProto::stSynTaskInfo*>(&::TaskProto::stSynTaskInfo::default_instance());
}

stNotifyAddTask::stNotifyAddTask(const stNotifyAddTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyAddTask::SharedCtor() {
  _cached_size_ = 0;
  taskinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyAddTask::~stNotifyAddTask() {
  SharedDtor();
}

void stNotifyAddTask::SharedDtor() {
  if (this != default_instance_) {
    delete taskinfo_;
  }
}

void stNotifyAddTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyAddTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyAddTask_descriptor_;
}

const stNotifyAddTask& stNotifyAddTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stNotifyAddTask* stNotifyAddTask::default_instance_ = NULL;

stNotifyAddTask* stNotifyAddTask::New() const {
  return new stNotifyAddTask;
}

void stNotifyAddTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskinfo()) {
      if (taskinfo_ != NULL) taskinfo_->::TaskProto::stSynTaskInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyAddTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TaskProto.stSynTaskInfo taskInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyAddTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TaskProto.stSynTaskInfo taskInfo = 1;
  if (has_taskinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyAddTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TaskProto.stSynTaskInfo taskInfo = 1;
  if (has_taskinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyAddTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TaskProto.stSynTaskInfo taskInfo = 1;
    if (has_taskinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyAddTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyAddTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyAddTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyAddTask::MergeFrom(const stNotifyAddTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskinfo()) {
      mutable_taskinfo()->::TaskProto::stSynTaskInfo::MergeFrom(from.taskinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyAddTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyAddTask::CopyFrom(const stNotifyAddTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyAddTask::IsInitialized() const {

  return true;
}

void stNotifyAddTask::Swap(stNotifyAddTask* other) {
  if (other != this) {
    std::swap(taskinfo_, other->taskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyAddTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyAddTask_descriptor_;
  metadata.reflection = stNotifyAddTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAcceptTaskError_eReason_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAcceptTaskError_eReason_descriptor_;
}
bool stAcceptTaskError_eReason_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAcceptTaskError_eReason stAcceptTaskError::eCon_Not_Enough;
const stAcceptTaskError_eReason stAcceptTaskError::eReason_MIN;
const stAcceptTaskError_eReason stAcceptTaskError::eReason_MAX;
const int stAcceptTaskError::eReason_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAcceptTaskError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAcceptTaskError_ProtoModID_descriptor_;
}
bool stAcceptTaskError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAcceptTaskError_ProtoModID stAcceptTaskError::ModID;
const stAcceptTaskError_ProtoModID stAcceptTaskError::ProtoModID_MIN;
const stAcceptTaskError_ProtoModID stAcceptTaskError::ProtoModID_MAX;
const int stAcceptTaskError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAcceptTaskError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAcceptTaskError_ProtoFunID_descriptor_;
}
bool stAcceptTaskError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAcceptTaskError_ProtoFunID stAcceptTaskError::FunID;
const stAcceptTaskError_ProtoFunID stAcceptTaskError::ProtoFunID_MIN;
const stAcceptTaskError_ProtoFunID stAcceptTaskError::ProtoFunID_MAX;
const int stAcceptTaskError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAcceptTaskError::kReasonFieldNumber;
#endif  // !_MSC_VER

stAcceptTaskError::stAcceptTaskError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAcceptTaskError::InitAsDefaultInstance() {
}

stAcceptTaskError::stAcceptTaskError(const stAcceptTaskError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAcceptTaskError::SharedCtor() {
  _cached_size_ = 0;
  reason_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAcceptTaskError::~stAcceptTaskError() {
  SharedDtor();
}

void stAcceptTaskError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAcceptTaskError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAcceptTaskError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAcceptTaskError_descriptor_;
}

const stAcceptTaskError& stAcceptTaskError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stAcceptTaskError* stAcceptTaskError::default_instance_ = NULL;

stAcceptTaskError* stAcceptTaskError::New() const {
  return new stAcceptTaskError;
}

void stAcceptTaskError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reason_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAcceptTaskError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TaskProto.stAcceptTaskError.eReason reason = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TaskProto::stAcceptTaskError_eReason_IsValid(value)) {
            set_reason(static_cast< ::TaskProto::stAcceptTaskError_eReason >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAcceptTaskError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TaskProto.stAcceptTaskError.eReason reason = 1;
  if (has_reason()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->reason(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAcceptTaskError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TaskProto.stAcceptTaskError.eReason reason = 1;
  if (has_reason()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->reason(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAcceptTaskError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TaskProto.stAcceptTaskError.eReason reason = 1;
    if (has_reason()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->reason());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAcceptTaskError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAcceptTaskError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAcceptTaskError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAcceptTaskError::MergeFrom(const stAcceptTaskError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reason()) {
      set_reason(from.reason());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAcceptTaskError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAcceptTaskError::CopyFrom(const stAcceptTaskError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAcceptTaskError::IsInitialized() const {

  return true;
}

void stAcceptTaskError::Swap(stAcceptTaskError* other) {
  if (other != this) {
    std::swap(reason_, other->reason_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAcceptTaskError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAcceptTaskError_descriptor_;
  metadata.reflection = stAcceptTaskError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshTaskInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshTaskInfo_ProtoModID_descriptor_;
}
bool stRefreshTaskInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshTaskInfo_ProtoModID stRefreshTaskInfo::ModID;
const stRefreshTaskInfo_ProtoModID stRefreshTaskInfo::ProtoModID_MIN;
const stRefreshTaskInfo_ProtoModID stRefreshTaskInfo::ProtoModID_MAX;
const int stRefreshTaskInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshTaskInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshTaskInfo_ProtoFunID_descriptor_;
}
bool stRefreshTaskInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshTaskInfo_ProtoFunID stRefreshTaskInfo::FunID;
const stRefreshTaskInfo_ProtoFunID stRefreshTaskInfo::ProtoFunID_MIN;
const stRefreshTaskInfo_ProtoFunID stRefreshTaskInfo::ProtoFunID_MAX;
const int stRefreshTaskInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshTaskInfo::kTaskInfoFieldNumber;
#endif  // !_MSC_VER

stRefreshTaskInfo::stRefreshTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshTaskInfo::InitAsDefaultInstance() {
  taskinfo_ = const_cast< ::TaskProto::stSynTaskInfo*>(&::TaskProto::stSynTaskInfo::default_instance());
}

stRefreshTaskInfo::stRefreshTaskInfo(const stRefreshTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  taskinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshTaskInfo::~stRefreshTaskInfo() {
  SharedDtor();
}

void stRefreshTaskInfo::SharedDtor() {
  if (this != default_instance_) {
    delete taskinfo_;
  }
}

void stRefreshTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshTaskInfo_descriptor_;
}

const stRefreshTaskInfo& stRefreshTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stRefreshTaskInfo* stRefreshTaskInfo::default_instance_ = NULL;

stRefreshTaskInfo* stRefreshTaskInfo::New() const {
  return new stRefreshTaskInfo;
}

void stRefreshTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskinfo()) {
      if (taskinfo_ != NULL) taskinfo_->::TaskProto::stSynTaskInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TaskProto.stSynTaskInfo taskInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_taskinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TaskProto.stSynTaskInfo taskInfo = 1;
  if (has_taskinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TaskProto.stSynTaskInfo taskInfo = 1;
  if (has_taskinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TaskProto.stSynTaskInfo taskInfo = 1;
    if (has_taskinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->taskinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshTaskInfo::MergeFrom(const stRefreshTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskinfo()) {
      mutable_taskinfo()->::TaskProto::stSynTaskInfo::MergeFrom(from.taskinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshTaskInfo::CopyFrom(const stRefreshTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshTaskInfo::IsInitialized() const {

  return true;
}

void stRefreshTaskInfo::Swap(stRefreshTaskInfo* other) {
  if (other != this) {
    std::swap(taskinfo_, other->taskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshTaskInfo_descriptor_;
  metadata.reflection = stRefreshTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCommitTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCommitTask_ProtoModID_descriptor_;
}
bool stReqCommitTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCommitTask_ProtoModID stReqCommitTask::ModID;
const stReqCommitTask_ProtoModID stReqCommitTask::ProtoModID_MIN;
const stReqCommitTask_ProtoModID stReqCommitTask::ProtoModID_MAX;
const int stReqCommitTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCommitTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCommitTask_ProtoFunID_descriptor_;
}
bool stReqCommitTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCommitTask_ProtoFunID stReqCommitTask::FunID;
const stReqCommitTask_ProtoFunID stReqCommitTask::ProtoFunID_MIN;
const stReqCommitTask_ProtoFunID stReqCommitTask::ProtoFunID_MAX;
const int stReqCommitTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCommitTask::kTaskIDFieldNumber;
#endif  // !_MSC_VER

stReqCommitTask::stReqCommitTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCommitTask::InitAsDefaultInstance() {
}

stReqCommitTask::stReqCommitTask(const stReqCommitTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCommitTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCommitTask::~stReqCommitTask() {
  SharedDtor();
}

void stReqCommitTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqCommitTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCommitTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCommitTask_descriptor_;
}

const stReqCommitTask& stReqCommitTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stReqCommitTask* stReqCommitTask::default_instance_ = NULL;

stReqCommitTask* stReqCommitTask::New() const {
  return new stReqCommitTask;
}

void stReqCommitTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCommitTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCommitTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCommitTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCommitTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCommitTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCommitTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCommitTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCommitTask::MergeFrom(const stReqCommitTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCommitTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCommitTask::CopyFrom(const stReqCommitTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCommitTask::IsInitialized() const {

  return true;
}

void stReqCommitTask::Swap(stReqCommitTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCommitTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCommitTask_descriptor_;
  metadata.reflection = stReqCommitTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCommitTaskResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCommitTaskResult_eResult_descriptor_;
}
bool stCommitTaskResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCommitTaskResult_eResult stCommitTaskResult::eSUCCESS;
const stCommitTaskResult_eResult stCommitTaskResult::eCON_NOT_ENOUGH;
const stCommitTaskResult_eResult stCommitTaskResult::eResult_MIN;
const stCommitTaskResult_eResult stCommitTaskResult::eResult_MAX;
const int stCommitTaskResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCommitTaskResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCommitTaskResult_ProtoModID_descriptor_;
}
bool stCommitTaskResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCommitTaskResult_ProtoModID stCommitTaskResult::ModID;
const stCommitTaskResult_ProtoModID stCommitTaskResult::ProtoModID_MIN;
const stCommitTaskResult_ProtoModID stCommitTaskResult::ProtoModID_MAX;
const int stCommitTaskResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCommitTaskResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCommitTaskResult_ProtoFunID_descriptor_;
}
bool stCommitTaskResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCommitTaskResult_ProtoFunID stCommitTaskResult::FunID;
const stCommitTaskResult_ProtoFunID stCommitTaskResult::ProtoFunID_MIN;
const stCommitTaskResult_ProtoFunID stCommitTaskResult::ProtoFunID_MAX;
const int stCommitTaskResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCommitTaskResult::kResultFieldNumber;
const int stCommitTaskResult::kTaskIDFieldNumber;
#endif  // !_MSC_VER

stCommitTaskResult::stCommitTaskResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCommitTaskResult::InitAsDefaultInstance() {
}

stCommitTaskResult::stCommitTaskResult(const stCommitTaskResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCommitTaskResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCommitTaskResult::~stCommitTaskResult() {
  SharedDtor();
}

void stCommitTaskResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCommitTaskResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCommitTaskResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCommitTaskResult_descriptor_;
}

const stCommitTaskResult& stCommitTaskResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stCommitTaskResult* stCommitTaskResult::default_instance_ = NULL;

stCommitTaskResult* stCommitTaskResult::New() const {
  return new stCommitTaskResult;
}

void stCommitTaskResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCommitTaskResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TaskProto.stCommitTaskResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TaskProto::stCommitTaskResult_eResult_IsValid(value)) {
            set_result(static_cast< ::TaskProto::stCommitTaskResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_taskID;
        break;
      }

      // optional uint32 taskID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCommitTaskResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TaskProto.stCommitTaskResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 taskID = 2;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCommitTaskResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TaskProto.stCommitTaskResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 taskID = 2;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCommitTaskResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TaskProto.stCommitTaskResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 taskID = 2;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCommitTaskResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCommitTaskResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCommitTaskResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCommitTaskResult::MergeFrom(const stCommitTaskResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCommitTaskResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCommitTaskResult::CopyFrom(const stCommitTaskResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCommitTaskResult::IsInitialized() const {

  return true;
}

void stCommitTaskResult::Swap(stCommitTaskResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCommitTaskResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCommitTaskResult_descriptor_;
  metadata.reflection = stCommitTaskResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChgTaskSubStatus_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgTaskSubStatus_ProtoModID_descriptor_;
}
bool stChgTaskSubStatus_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChgTaskSubStatus_ProtoModID stChgTaskSubStatus::ModID;
const stChgTaskSubStatus_ProtoModID stChgTaskSubStatus::ProtoModID_MIN;
const stChgTaskSubStatus_ProtoModID stChgTaskSubStatus::ProtoModID_MAX;
const int stChgTaskSubStatus::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChgTaskSubStatus_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgTaskSubStatus_ProtoFunID_descriptor_;
}
bool stChgTaskSubStatus_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChgTaskSubStatus_ProtoFunID stChgTaskSubStatus::FunID;
const stChgTaskSubStatus_ProtoFunID stChgTaskSubStatus::ProtoFunID_MIN;
const stChgTaskSubStatus_ProtoFunID stChgTaskSubStatus::ProtoFunID_MAX;
const int stChgTaskSubStatus::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChgTaskSubStatus::kTaskIDFieldNumber;
const int stChgTaskSubStatus::kSubTsFieldNumber;
#endif  // !_MSC_VER

stChgTaskSubStatus::stChgTaskSubStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChgTaskSubStatus::InitAsDefaultInstance() {
}

stChgTaskSubStatus::stChgTaskSubStatus(const stChgTaskSubStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChgTaskSubStatus::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  subts_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChgTaskSubStatus::~stChgTaskSubStatus() {
  SharedDtor();
}

void stChgTaskSubStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChgTaskSubStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChgTaskSubStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgTaskSubStatus_descriptor_;
}

const stChgTaskSubStatus& stChgTaskSubStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stChgTaskSubStatus* stChgTaskSubStatus::default_instance_ = NULL;

stChgTaskSubStatus* stChgTaskSubStatus::New() const {
  return new stChgTaskSubStatus;
}

void stChgTaskSubStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
    subts_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChgTaskSubStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_subTs;
        break;
      }

      // optional uint32 subTs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_subTs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &subts_)));
          set_has_subts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChgTaskSubStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  // optional uint32 subTs = 2;
  if (has_subts()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->subts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChgTaskSubStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  // optional uint32 subTs = 2;
  if (has_subts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->subts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChgTaskSubStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

    // optional uint32 subTs = 2;
    if (has_subts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->subts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChgTaskSubStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChgTaskSubStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChgTaskSubStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChgTaskSubStatus::MergeFrom(const stChgTaskSubStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_subts()) {
      set_subts(from.subts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChgTaskSubStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChgTaskSubStatus::CopyFrom(const stChgTaskSubStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChgTaskSubStatus::IsInitialized() const {

  return true;
}

void stChgTaskSubStatus::Swap(stChgTaskSubStatus* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(subts_, other->subts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChgTaskSubStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChgTaskSubStatus_descriptor_;
  metadata.reflection = stChgTaskSubStatus_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSaveCurrentTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveCurrentTask_ProtoModID_descriptor_;
}
bool stSaveCurrentTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveCurrentTask_ProtoModID stSaveCurrentTask::ModID;
const stSaveCurrentTask_ProtoModID stSaveCurrentTask::ProtoModID_MIN;
const stSaveCurrentTask_ProtoModID stSaveCurrentTask::ProtoModID_MAX;
const int stSaveCurrentTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSaveCurrentTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveCurrentTask_ProtoFunID_descriptor_;
}
bool stSaveCurrentTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSaveCurrentTask_ProtoFunID stSaveCurrentTask::FunID;
const stSaveCurrentTask_ProtoFunID stSaveCurrentTask::ProtoFunID_MIN;
const stSaveCurrentTask_ProtoFunID stSaveCurrentTask::ProtoFunID_MAX;
const int stSaveCurrentTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSaveCurrentTask::kCurTaskIDFieldNumber;
const int stSaveCurrentTask::kCurStageFieldNumber;
#endif  // !_MSC_VER

stSaveCurrentTask::stSaveCurrentTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSaveCurrentTask::InitAsDefaultInstance() {
}

stSaveCurrentTask::stSaveCurrentTask(const stSaveCurrentTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSaveCurrentTask::SharedCtor() {
  _cached_size_ = 0;
  curtaskid_ = 0u;
  curstage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSaveCurrentTask::~stSaveCurrentTask() {
  SharedDtor();
}

void stSaveCurrentTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSaveCurrentTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSaveCurrentTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSaveCurrentTask_descriptor_;
}

const stSaveCurrentTask& stSaveCurrentTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stSaveCurrentTask* stSaveCurrentTask::default_instance_ = NULL;

stSaveCurrentTask* stSaveCurrentTask::New() const {
  return new stSaveCurrentTask;
}

void stSaveCurrentTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curtaskid_ = 0u;
    curstage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSaveCurrentTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curTaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtaskid_)));
          set_has_curtaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curStage;
        break;
      }

      // optional uint32 curStage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curStage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstage_)));
          set_has_curstage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSaveCurrentTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curTaskID = 1;
  if (has_curtaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curtaskid(), output);
  }

  // optional uint32 curStage = 2;
  if (has_curstage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curstage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSaveCurrentTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curTaskID = 1;
  if (has_curtaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curtaskid(), target);
  }

  // optional uint32 curStage = 2;
  if (has_curstage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curstage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSaveCurrentTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curTaskID = 1;
    if (has_curtaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtaskid());
    }

    // optional uint32 curStage = 2;
    if (has_curstage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSaveCurrentTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSaveCurrentTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSaveCurrentTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSaveCurrentTask::MergeFrom(const stSaveCurrentTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curtaskid()) {
      set_curtaskid(from.curtaskid());
    }
    if (from.has_curstage()) {
      set_curstage(from.curstage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSaveCurrentTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSaveCurrentTask::CopyFrom(const stSaveCurrentTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSaveCurrentTask::IsInitialized() const {

  return true;
}

void stSaveCurrentTask::Swap(stSaveCurrentTask* other) {
  if (other != this) {
    std::swap(curtaskid_, other->curtaskid_);
    std::swap(curstage_, other->curstage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSaveCurrentTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSaveCurrentTask_descriptor_;
  metadata.reflection = stSaveCurrentTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyCurrentTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCurrentTask_ProtoModID_descriptor_;
}
bool stNotifyCurrentTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCurrentTask_ProtoModID stNotifyCurrentTask::ModID;
const stNotifyCurrentTask_ProtoModID stNotifyCurrentTask::ProtoModID_MIN;
const stNotifyCurrentTask_ProtoModID stNotifyCurrentTask::ProtoModID_MAX;
const int stNotifyCurrentTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyCurrentTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCurrentTask_ProtoFunID_descriptor_;
}
bool stNotifyCurrentTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyCurrentTask_ProtoFunID stNotifyCurrentTask::FunID;
const stNotifyCurrentTask_ProtoFunID stNotifyCurrentTask::ProtoFunID_MIN;
const stNotifyCurrentTask_ProtoFunID stNotifyCurrentTask::ProtoFunID_MAX;
const int stNotifyCurrentTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyCurrentTask::kCurTaskIDFieldNumber;
const int stNotifyCurrentTask::kCurStateFieldNumber;
#endif  // !_MSC_VER

stNotifyCurrentTask::stNotifyCurrentTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyCurrentTask::InitAsDefaultInstance() {
}

stNotifyCurrentTask::stNotifyCurrentTask(const stNotifyCurrentTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyCurrentTask::SharedCtor() {
  _cached_size_ = 0;
  curtaskid_ = 0u;
  curstate_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyCurrentTask::~stNotifyCurrentTask() {
  SharedDtor();
}

void stNotifyCurrentTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyCurrentTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyCurrentTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyCurrentTask_descriptor_;
}

const stNotifyCurrentTask& stNotifyCurrentTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stNotifyCurrentTask* stNotifyCurrentTask::default_instance_ = NULL;

stNotifyCurrentTask* stNotifyCurrentTask::New() const {
  return new stNotifyCurrentTask;
}

void stNotifyCurrentTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curtaskid_ = 0u;
    curstate_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyCurrentTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 curTaskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curtaskid_)));
          set_has_curtaskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curState;
        break;
      }

      // optional uint32 curState = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curstate_)));
          set_has_curstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyCurrentTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 curTaskID = 1;
  if (has_curtaskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->curtaskid(), output);
  }

  // optional uint32 curState = 2;
  if (has_curstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyCurrentTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 curTaskID = 1;
  if (has_curtaskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->curtaskid(), target);
  }

  // optional uint32 curState = 2;
  if (has_curstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyCurrentTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 curTaskID = 1;
    if (has_curtaskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curtaskid());
    }

    // optional uint32 curState = 2;
    if (has_curstate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curstate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyCurrentTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyCurrentTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyCurrentTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyCurrentTask::MergeFrom(const stNotifyCurrentTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curtaskid()) {
      set_curtaskid(from.curtaskid());
    }
    if (from.has_curstate()) {
      set_curstate(from.curstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyCurrentTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyCurrentTask::CopyFrom(const stNotifyCurrentTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyCurrentTask::IsInitialized() const {

  return true;
}

void stNotifyCurrentTask::Swap(stNotifyCurrentTask* other) {
  if (other != this) {
    std::swap(curtaskid_, other->curtaskid_);
    std::swap(curstate_, other->curstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyCurrentTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyCurrentTask_descriptor_;
  metadata.reflection = stNotifyCurrentTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqBatchAcceptTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBatchAcceptTask_ProtoModID_descriptor_;
}
bool stReqBatchAcceptTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBatchAcceptTask_ProtoModID stReqBatchAcceptTask::ModID;
const stReqBatchAcceptTask_ProtoModID stReqBatchAcceptTask::ProtoModID_MIN;
const stReqBatchAcceptTask_ProtoModID stReqBatchAcceptTask::ProtoModID_MAX;
const int stReqBatchAcceptTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqBatchAcceptTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBatchAcceptTask_ProtoFunID_descriptor_;
}
bool stReqBatchAcceptTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqBatchAcceptTask_ProtoFunID stReqBatchAcceptTask::FunID;
const stReqBatchAcceptTask_ProtoFunID stReqBatchAcceptTask::ProtoFunID_MIN;
const stReqBatchAcceptTask_ProtoFunID stReqBatchAcceptTask::ProtoFunID_MAX;
const int stReqBatchAcceptTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqBatchAcceptTask::kTaskIDsFieldNumber;
#endif  // !_MSC_VER

stReqBatchAcceptTask::stReqBatchAcceptTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqBatchAcceptTask::InitAsDefaultInstance() {
}

stReqBatchAcceptTask::stReqBatchAcceptTask(const stReqBatchAcceptTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqBatchAcceptTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqBatchAcceptTask::~stReqBatchAcceptTask() {
  SharedDtor();
}

void stReqBatchAcceptTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqBatchAcceptTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqBatchAcceptTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqBatchAcceptTask_descriptor_;
}

const stReqBatchAcceptTask& stReqBatchAcceptTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stReqBatchAcceptTask* stReqBatchAcceptTask::default_instance_ = NULL;

stReqBatchAcceptTask* stReqBatchAcceptTask::New() const {
  return new stReqBatchAcceptTask;
}

void stReqBatchAcceptTask::Clear() {
  taskids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqBatchAcceptTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 taskIDs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_taskIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_taskids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_taskids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_taskIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqBatchAcceptTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 taskIDs = 1;
  for (int i = 0; i < this->taskids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->taskids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqBatchAcceptTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 taskIDs = 1;
  for (int i = 0; i < this->taskids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->taskids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqBatchAcceptTask::ByteSize() const {
  int total_size = 0;

  // repeated uint32 taskIDs = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->taskids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->taskids(i));
    }
    total_size += 1 * this->taskids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqBatchAcceptTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqBatchAcceptTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqBatchAcceptTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqBatchAcceptTask::MergeFrom(const stReqBatchAcceptTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskids_.MergeFrom(from.taskids_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqBatchAcceptTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqBatchAcceptTask::CopyFrom(const stReqBatchAcceptTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqBatchAcceptTask::IsInitialized() const {

  return true;
}

void stReqBatchAcceptTask::Swap(stReqBatchAcceptTask* other) {
  if (other != this) {
    taskids_.Swap(&other->taskids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqBatchAcceptTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqBatchAcceptTask_descriptor_;
  metadata.reflection = stReqBatchAcceptTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetBatchAccpetTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBatchAccpetTask_ProtoModID_descriptor_;
}
bool stRetBatchAccpetTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetBatchAccpetTask_ProtoModID stRetBatchAccpetTask::ModID;
const stRetBatchAccpetTask_ProtoModID stRetBatchAccpetTask::ProtoModID_MIN;
const stRetBatchAccpetTask_ProtoModID stRetBatchAccpetTask::ProtoModID_MAX;
const int stRetBatchAccpetTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetBatchAccpetTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBatchAccpetTask_ProtoFunID_descriptor_;
}
bool stRetBatchAccpetTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetBatchAccpetTask_ProtoFunID stRetBatchAccpetTask::FunID;
const stRetBatchAccpetTask_ProtoFunID stRetBatchAccpetTask::ProtoFunID_MIN;
const stRetBatchAccpetTask_ProtoFunID stRetBatchAccpetTask::ProtoFunID_MAX;
const int stRetBatchAccpetTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetBatchAccpetTask::kTaskInfosFieldNumber;
#endif  // !_MSC_VER

stRetBatchAccpetTask::stRetBatchAccpetTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetBatchAccpetTask::InitAsDefaultInstance() {
}

stRetBatchAccpetTask::stRetBatchAccpetTask(const stRetBatchAccpetTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetBatchAccpetTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetBatchAccpetTask::~stRetBatchAccpetTask() {
  SharedDtor();
}

void stRetBatchAccpetTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetBatchAccpetTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetBatchAccpetTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetBatchAccpetTask_descriptor_;
}

const stRetBatchAccpetTask& stRetBatchAccpetTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stRetBatchAccpetTask* stRetBatchAccpetTask::default_instance_ = NULL;

stRetBatchAccpetTask* stRetBatchAccpetTask::New() const {
  return new stRetBatchAccpetTask;
}

void stRetBatchAccpetTask::Clear() {
  taskinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetBatchAccpetTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TaskProto.stSynTaskInfo taskInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_taskInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetBatchAccpetTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TaskProto.stSynTaskInfo taskInfos = 1;
  for (int i = 0; i < this->taskinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->taskinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetBatchAccpetTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TaskProto.stSynTaskInfo taskInfos = 1;
  for (int i = 0; i < this->taskinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->taskinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetBatchAccpetTask::ByteSize() const {
  int total_size = 0;

  // repeated .TaskProto.stSynTaskInfo taskInfos = 1;
  total_size += 1 * this->taskinfos_size();
  for (int i = 0; i < this->taskinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetBatchAccpetTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetBatchAccpetTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetBatchAccpetTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetBatchAccpetTask::MergeFrom(const stRetBatchAccpetTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfos_.MergeFrom(from.taskinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetBatchAccpetTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetBatchAccpetTask::CopyFrom(const stRetBatchAccpetTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetBatchAccpetTask::IsInitialized() const {

  return true;
}

void stRetBatchAccpetTask::Swap(stRetBatchAccpetTask* other) {
  if (other != this) {
    taskinfos_.Swap(&other->taskinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetBatchAccpetTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetBatchAccpetTask_descriptor_;
  metadata.reflection = stRetBatchAccpetTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynDailyTaskScore_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynDailyTaskScore_ProtoModID_descriptor_;
}
bool stSynDailyTaskScore_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynDailyTaskScore_ProtoModID stSynDailyTaskScore::ModID;
const stSynDailyTaskScore_ProtoModID stSynDailyTaskScore::ProtoModID_MIN;
const stSynDailyTaskScore_ProtoModID stSynDailyTaskScore::ProtoModID_MAX;
const int stSynDailyTaskScore::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynDailyTaskScore_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynDailyTaskScore_ProtoFunID_descriptor_;
}
bool stSynDailyTaskScore_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynDailyTaskScore_ProtoFunID stSynDailyTaskScore::FunID;
const stSynDailyTaskScore_ProtoFunID stSynDailyTaskScore::ProtoFunID_MIN;
const stSynDailyTaskScore_ProtoFunID stSynDailyTaskScore::ProtoFunID_MAX;
const int stSynDailyTaskScore::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynDailyTaskScore::kNumFieldNumber;
#endif  // !_MSC_VER

stSynDailyTaskScore::stSynDailyTaskScore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynDailyTaskScore::InitAsDefaultInstance() {
}

stSynDailyTaskScore::stSynDailyTaskScore(const stSynDailyTaskScore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynDailyTaskScore::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynDailyTaskScore::~stSynDailyTaskScore() {
  SharedDtor();
}

void stSynDailyTaskScore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynDailyTaskScore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynDailyTaskScore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynDailyTaskScore_descriptor_;
}

const stSynDailyTaskScore& stSynDailyTaskScore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stSynDailyTaskScore* stSynDailyTaskScore::default_instance_ = NULL;

stSynDailyTaskScore* stSynDailyTaskScore::New() const {
  return new stSynDailyTaskScore;
}

void stSynDailyTaskScore::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynDailyTaskScore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynDailyTaskScore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynDailyTaskScore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynDailyTaskScore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynDailyTaskScore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynDailyTaskScore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynDailyTaskScore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynDailyTaskScore::MergeFrom(const stSynDailyTaskScore& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynDailyTaskScore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynDailyTaskScore::CopyFrom(const stSynDailyTaskScore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynDailyTaskScore::IsInitialized() const {

  return true;
}

void stSynDailyTaskScore::Swap(stSynDailyTaskScore* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynDailyTaskScore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynDailyTaskScore_descriptor_;
  metadata.reflection = stSynDailyTaskScore_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDailyTaskScoreInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskScoreInfo_ProtoModID_descriptor_;
}
bool stDailyTaskScoreInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDailyTaskScoreInfo_ProtoModID stDailyTaskScoreInfo::ModID;
const stDailyTaskScoreInfo_ProtoModID stDailyTaskScoreInfo::ProtoModID_MIN;
const stDailyTaskScoreInfo_ProtoModID stDailyTaskScoreInfo::ProtoModID_MAX;
const int stDailyTaskScoreInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDailyTaskScoreInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskScoreInfo_ProtoFunID_descriptor_;
}
bool stDailyTaskScoreInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDailyTaskScoreInfo_ProtoFunID stDailyTaskScoreInfo::FunID;
const stDailyTaskScoreInfo_ProtoFunID stDailyTaskScoreInfo::ProtoFunID_MIN;
const stDailyTaskScoreInfo_ProtoFunID stDailyTaskScoreInfo::ProtoFunID_MAX;
const int stDailyTaskScoreInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDailyTaskScoreInfo::kDailyTaskScoreFieldNumber;
const int stDailyTaskScoreInfo::kRewardIDsFieldNumber;
#endif  // !_MSC_VER

stDailyTaskScoreInfo::stDailyTaskScoreInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDailyTaskScoreInfo::InitAsDefaultInstance() {
}

stDailyTaskScoreInfo::stDailyTaskScoreInfo(const stDailyTaskScoreInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDailyTaskScoreInfo::SharedCtor() {
  _cached_size_ = 0;
  dailytaskscore_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDailyTaskScoreInfo::~stDailyTaskScoreInfo() {
  SharedDtor();
}

void stDailyTaskScoreInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDailyTaskScoreInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDailyTaskScoreInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskScoreInfo_descriptor_;
}

const stDailyTaskScoreInfo& stDailyTaskScoreInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stDailyTaskScoreInfo* stDailyTaskScoreInfo::default_instance_ = NULL;

stDailyTaskScoreInfo* stDailyTaskScoreInfo::New() const {
  return new stDailyTaskScoreInfo;
}

void stDailyTaskScoreInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dailytaskscore_ = 0u;
  }
  rewardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDailyTaskScoreInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 dailyTaskScore = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dailytaskscore_)));
          set_has_dailytaskscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardIDs;
        break;
      }

      // repeated uint32 rewardIDs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardIDs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 16, input, this->mutable_rewardids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_rewardids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rewardIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDailyTaskScoreInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 dailyTaskScore = 1;
  if (has_dailytaskscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dailytaskscore(), output);
  }

  // repeated uint32 rewardIDs = 2;
  for (int i = 0; i < this->rewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      2, this->rewardids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDailyTaskScoreInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 dailyTaskScore = 1;
  if (has_dailytaskscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->dailytaskscore(), target);
  }

  // repeated uint32 rewardIDs = 2;
  for (int i = 0; i < this->rewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(2, this->rewardids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDailyTaskScoreInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 dailyTaskScore = 1;
    if (has_dailytaskscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dailytaskscore());
    }

  }
  // repeated uint32 rewardIDs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->rewardids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->rewardids(i));
    }
    total_size += 1 * this->rewardids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDailyTaskScoreInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDailyTaskScoreInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDailyTaskScoreInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDailyTaskScoreInfo::MergeFrom(const stDailyTaskScoreInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardids_.MergeFrom(from.rewardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dailytaskscore()) {
      set_dailytaskscore(from.dailytaskscore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDailyTaskScoreInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDailyTaskScoreInfo::CopyFrom(const stDailyTaskScoreInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDailyTaskScoreInfo::IsInitialized() const {

  return true;
}

void stDailyTaskScoreInfo::Swap(stDailyTaskScoreInfo* other) {
  if (other != this) {
    std::swap(dailytaskscore_, other->dailytaskscore_);
    rewardids_.Swap(&other->rewardids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDailyTaskScoreInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDailyTaskScoreInfo_descriptor_;
  metadata.reflection = stDailyTaskScoreInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDailyTaskScoreReward_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDailyTaskScoreReward_ProtoModID_descriptor_;
}
bool stReqDailyTaskScoreReward_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDailyTaskScoreReward_ProtoModID stReqDailyTaskScoreReward::ModID;
const stReqDailyTaskScoreReward_ProtoModID stReqDailyTaskScoreReward::ProtoModID_MIN;
const stReqDailyTaskScoreReward_ProtoModID stReqDailyTaskScoreReward::ProtoModID_MAX;
const int stReqDailyTaskScoreReward::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDailyTaskScoreReward_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDailyTaskScoreReward_ProtoFunID_descriptor_;
}
bool stReqDailyTaskScoreReward_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDailyTaskScoreReward_ProtoFunID stReqDailyTaskScoreReward::FunID;
const stReqDailyTaskScoreReward_ProtoFunID stReqDailyTaskScoreReward::ProtoFunID_MIN;
const stReqDailyTaskScoreReward_ProtoFunID stReqDailyTaskScoreReward::ProtoFunID_MAX;
const int stReqDailyTaskScoreReward::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDailyTaskScoreReward::kIdFieldNumber;
#endif  // !_MSC_VER

stReqDailyTaskScoreReward::stReqDailyTaskScoreReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDailyTaskScoreReward::InitAsDefaultInstance() {
}

stReqDailyTaskScoreReward::stReqDailyTaskScoreReward(const stReqDailyTaskScoreReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDailyTaskScoreReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDailyTaskScoreReward::~stReqDailyTaskScoreReward() {
  SharedDtor();
}

void stReqDailyTaskScoreReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDailyTaskScoreReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDailyTaskScoreReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDailyTaskScoreReward_descriptor_;
}

const stReqDailyTaskScoreReward& stReqDailyTaskScoreReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stReqDailyTaskScoreReward* stReqDailyTaskScoreReward::default_instance_ = NULL;

stReqDailyTaskScoreReward* stReqDailyTaskScoreReward::New() const {
  return new stReqDailyTaskScoreReward;
}

void stReqDailyTaskScoreReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDailyTaskScoreReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDailyTaskScoreReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDailyTaskScoreReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDailyTaskScoreReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDailyTaskScoreReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDailyTaskScoreReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDailyTaskScoreReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDailyTaskScoreReward::MergeFrom(const stReqDailyTaskScoreReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDailyTaskScoreReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDailyTaskScoreReward::CopyFrom(const stReqDailyTaskScoreReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDailyTaskScoreReward::IsInitialized() const {

  return true;
}

void stReqDailyTaskScoreReward::Swap(stReqDailyTaskScoreReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDailyTaskScoreReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDailyTaskScoreReward_descriptor_;
  metadata.reflection = stReqDailyTaskScoreReward_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDailyTaskScoreRewardResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskScoreRewardResult_eResult_descriptor_;
}
bool stDailyTaskScoreRewardResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult::eSuccess;
const stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult::eScore_Not_Enough;
const stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult::eHas_Got_Reward;
const stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult::eInner_Error;
const stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult::eBag_Full;
const stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult::eResult_MIN;
const stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult::eResult_MAX;
const int stDailyTaskScoreRewardResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDailyTaskScoreRewardResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskScoreRewardResult_ProtoModID_descriptor_;
}
bool stDailyTaskScoreRewardResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDailyTaskScoreRewardResult_ProtoModID stDailyTaskScoreRewardResult::ModID;
const stDailyTaskScoreRewardResult_ProtoModID stDailyTaskScoreRewardResult::ProtoModID_MIN;
const stDailyTaskScoreRewardResult_ProtoModID stDailyTaskScoreRewardResult::ProtoModID_MAX;
const int stDailyTaskScoreRewardResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDailyTaskScoreRewardResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskScoreRewardResult_ProtoFunID_descriptor_;
}
bool stDailyTaskScoreRewardResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDailyTaskScoreRewardResult_ProtoFunID stDailyTaskScoreRewardResult::FunID;
const stDailyTaskScoreRewardResult_ProtoFunID stDailyTaskScoreRewardResult::ProtoFunID_MIN;
const stDailyTaskScoreRewardResult_ProtoFunID stDailyTaskScoreRewardResult::ProtoFunID_MAX;
const int stDailyTaskScoreRewardResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDailyTaskScoreRewardResult::kResultFieldNumber;
const int stDailyTaskScoreRewardResult::kIdFieldNumber;
#endif  // !_MSC_VER

stDailyTaskScoreRewardResult::stDailyTaskScoreRewardResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDailyTaskScoreRewardResult::InitAsDefaultInstance() {
}

stDailyTaskScoreRewardResult::stDailyTaskScoreRewardResult(const stDailyTaskScoreRewardResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDailyTaskScoreRewardResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDailyTaskScoreRewardResult::~stDailyTaskScoreRewardResult() {
  SharedDtor();
}

void stDailyTaskScoreRewardResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDailyTaskScoreRewardResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDailyTaskScoreRewardResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDailyTaskScoreRewardResult_descriptor_;
}

const stDailyTaskScoreRewardResult& stDailyTaskScoreRewardResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stDailyTaskScoreRewardResult* stDailyTaskScoreRewardResult::default_instance_ = NULL;

stDailyTaskScoreRewardResult* stDailyTaskScoreRewardResult::New() const {
  return new stDailyTaskScoreRewardResult;
}

void stDailyTaskScoreRewardResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    id_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDailyTaskScoreRewardResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .TaskProto.stDailyTaskScoreRewardResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::TaskProto::stDailyTaskScoreRewardResult_eResult_IsValid(value)) {
            set_result(static_cast< ::TaskProto::stDailyTaskScoreRewardResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional uint32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDailyTaskScoreRewardResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .TaskProto.stDailyTaskScoreRewardResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDailyTaskScoreRewardResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .TaskProto.stDailyTaskScoreRewardResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDailyTaskScoreRewardResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .TaskProto.stDailyTaskScoreRewardResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDailyTaskScoreRewardResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDailyTaskScoreRewardResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDailyTaskScoreRewardResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDailyTaskScoreRewardResult::MergeFrom(const stDailyTaskScoreRewardResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDailyTaskScoreRewardResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDailyTaskScoreRewardResult::CopyFrom(const stDailyTaskScoreRewardResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDailyTaskScoreRewardResult::IsInitialized() const {

  return true;
}

void stDailyTaskScoreRewardResult::Swap(stDailyTaskScoreRewardResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDailyTaskScoreRewardResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDailyTaskScoreRewardResult_descriptor_;
  metadata.reflection = stDailyTaskScoreRewardResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelTask_ProtoModID_descriptor_;
}
bool stCancelTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelTask_ProtoModID stCancelTask::ModID;
const stCancelTask_ProtoModID stCancelTask::ProtoModID_MIN;
const stCancelTask_ProtoModID stCancelTask::ProtoModID_MAX;
const int stCancelTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelTask_ProtoFunID_descriptor_;
}
bool stCancelTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelTask_ProtoFunID stCancelTask::FunID;
const stCancelTask_ProtoFunID stCancelTask::ProtoFunID_MIN;
const stCancelTask_ProtoFunID stCancelTask::ProtoFunID_MAX;
const int stCancelTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelTask::kTaskIDFieldNumber;
#endif  // !_MSC_VER

stCancelTask::stCancelTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelTask::InitAsDefaultInstance() {
}

stCancelTask::stCancelTask(const stCancelTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelTask::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelTask::~stCancelTask() {
  SharedDtor();
}

void stCancelTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelTask_descriptor_;
}

const stCancelTask& stCancelTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stCancelTask* stCancelTask::default_instance_ = NULL;

stCancelTask* stCancelTask::New() const {
  return new stCancelTask;
}

void stCancelTask::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    taskid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 taskID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &taskid_)));
          set_has_taskid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->taskid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 taskID = 1;
  if (has_taskid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->taskid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelTask::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 taskID = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->taskid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelTask::MergeFrom(const stCancelTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelTask::CopyFrom(const stCancelTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelTask::IsInitialized() const {

  return true;
}

void stCancelTask::Swap(stCancelTask* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelTask_descriptor_;
  metadata.reflection = stCancelTask_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenTaskWindow_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenTaskWindow_ProtoModID_descriptor_;
}
bool stReqOpenTaskWindow_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenTaskWindow_ProtoModID stReqOpenTaskWindow::ModID;
const stReqOpenTaskWindow_ProtoModID stReqOpenTaskWindow::ProtoModID_MIN;
const stReqOpenTaskWindow_ProtoModID stReqOpenTaskWindow::ProtoModID_MAX;
const int stReqOpenTaskWindow::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenTaskWindow_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenTaskWindow_ProtoFunID_descriptor_;
}
bool stReqOpenTaskWindow_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenTaskWindow_ProtoFunID stReqOpenTaskWindow::FunID;
const stReqOpenTaskWindow_ProtoFunID stReqOpenTaskWindow::ProtoFunID_MIN;
const stReqOpenTaskWindow_ProtoFunID stReqOpenTaskWindow::ProtoFunID_MAX;
const int stReqOpenTaskWindow::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenTaskWindow::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenTaskWindow::stReqOpenTaskWindow()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenTaskWindow::InitAsDefaultInstance() {
}

stReqOpenTaskWindow::stReqOpenTaskWindow(const stReqOpenTaskWindow& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenTaskWindow::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenTaskWindow::~stReqOpenTaskWindow() {
  SharedDtor();
}

void stReqOpenTaskWindow::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenTaskWindow::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenTaskWindow::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenTaskWindow_descriptor_;
}

const stReqOpenTaskWindow& stReqOpenTaskWindow::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stReqOpenTaskWindow* stReqOpenTaskWindow::default_instance_ = NULL;

stReqOpenTaskWindow* stReqOpenTaskWindow::New() const {
  return new stReqOpenTaskWindow;
}

void stReqOpenTaskWindow::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenTaskWindow::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenTaskWindow::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenTaskWindow::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenTaskWindow::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenTaskWindow::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenTaskWindow* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenTaskWindow*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenTaskWindow::MergeFrom(const stReqOpenTaskWindow& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenTaskWindow::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenTaskWindow::CopyFrom(const stReqOpenTaskWindow& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenTaskWindow::IsInitialized() const {

  return true;
}

void stReqOpenTaskWindow::Swap(stReqOpenTaskWindow* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenTaskWindow::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenTaskWindow_descriptor_;
  metadata.reflection = stReqOpenTaskWindow_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshAllDailyTask_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshAllDailyTask_ProtoModID_descriptor_;
}
bool stRefreshAllDailyTask_ProtoModID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshAllDailyTask_ProtoModID stRefreshAllDailyTask::ModID;
const stRefreshAllDailyTask_ProtoModID stRefreshAllDailyTask::ProtoModID_MIN;
const stRefreshAllDailyTask_ProtoModID stRefreshAllDailyTask::ProtoModID_MAX;
const int stRefreshAllDailyTask::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshAllDailyTask_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshAllDailyTask_ProtoFunID_descriptor_;
}
bool stRefreshAllDailyTask_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshAllDailyTask_ProtoFunID stRefreshAllDailyTask::FunID;
const stRefreshAllDailyTask_ProtoFunID stRefreshAllDailyTask::ProtoFunID_MIN;
const stRefreshAllDailyTask_ProtoFunID stRefreshAllDailyTask::ProtoFunID_MAX;
const int stRefreshAllDailyTask::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshAllDailyTask::kTasksFieldNumber;
#endif  // !_MSC_VER

stRefreshAllDailyTask::stRefreshAllDailyTask()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshAllDailyTask::InitAsDefaultInstance() {
}

stRefreshAllDailyTask::stRefreshAllDailyTask(const stRefreshAllDailyTask& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshAllDailyTask::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshAllDailyTask::~stRefreshAllDailyTask() {
  SharedDtor();
}

void stRefreshAllDailyTask::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefreshAllDailyTask::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshAllDailyTask::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshAllDailyTask_descriptor_;
}

const stRefreshAllDailyTask& stRefreshAllDailyTask::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Task_2eproto();
  return *default_instance_;
}

stRefreshAllDailyTask* stRefreshAllDailyTask::default_instance_ = NULL;

stRefreshAllDailyTask* stRefreshAllDailyTask::New() const {
  return new stRefreshAllDailyTask;
}

void stRefreshAllDailyTask::Clear() {
  tasks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshAllDailyTask::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .TaskProto.stSynTaskInfo tasks = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tasks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tasks()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_tasks;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshAllDailyTask::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .TaskProto.stSynTaskInfo tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->tasks(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshAllDailyTask::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .TaskProto.stSynTaskInfo tasks = 1;
  for (int i = 0; i < this->tasks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->tasks(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshAllDailyTask::ByteSize() const {
  int total_size = 0;

  // repeated .TaskProto.stSynTaskInfo tasks = 1;
  total_size += 1 * this->tasks_size();
  for (int i = 0; i < this->tasks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tasks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshAllDailyTask::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshAllDailyTask* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshAllDailyTask*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshAllDailyTask::MergeFrom(const stRefreshAllDailyTask& from) {
  GOOGLE_CHECK_NE(&from, this);
  tasks_.MergeFrom(from.tasks_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshAllDailyTask::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshAllDailyTask::CopyFrom(const stRefreshAllDailyTask& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshAllDailyTask::IsInitialized() const {

  return true;
}

void stRefreshAllDailyTask::Swap(stRefreshAllDailyTask* other) {
  if (other != this) {
    tasks_.Swap(&other->tasks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshAllDailyTask::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshAllDailyTask_descriptor_;
  metadata.reflection = stRefreshAllDailyTask_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TaskProto

// @@protoc_insertion_point(global_scope)
