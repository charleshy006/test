// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Task.proto

#ifndef PROTOBUF_Task_2eproto__INCLUDED
#define PROTOBUF_Task_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ModID.pb.h"
// @@protoc_insertion_point(includes)

namespace TaskProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Task_2eproto();
void protobuf_AssignDesc_Task_2eproto();
void protobuf_ShutdownFile_Task_2eproto();

class stSynFinishTaskID;
class stNotifyTaskFinish;
class stTaskCounter;
class stSynTaskInfo;
class stSynAllAcceptTask;
class stReqAcceptTask;
class stNotifyAddTask;
class stAcceptTaskError;
class stRefreshTaskInfo;
class stReqCommitTask;
class stCommitTaskResult;
class stChgTaskSubStatus;
class stSaveCurrentTask;
class stNotifyCurrentTask;
class stReqBatchAcceptTask;
class stRetBatchAccpetTask;
class stSynDailyTaskScore;
class stDailyTaskScoreInfo;
class stReqDailyTaskScoreReward;
class stDailyTaskScoreRewardResult;
class stCancelTask;
class stReqOpenTaskWindow;
class stRefreshAllDailyTask;

enum stSynFinishTaskID_ProtoModID {
  stSynFinishTaskID_ProtoModID_ModID = 4
};
bool stSynFinishTaskID_ProtoModID_IsValid(int value);
const stSynFinishTaskID_ProtoModID stSynFinishTaskID_ProtoModID_ProtoModID_MIN = stSynFinishTaskID_ProtoModID_ModID;
const stSynFinishTaskID_ProtoModID stSynFinishTaskID_ProtoModID_ProtoModID_MAX = stSynFinishTaskID_ProtoModID_ModID;
const int stSynFinishTaskID_ProtoModID_ProtoModID_ARRAYSIZE = stSynFinishTaskID_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynFinishTaskID_ProtoModID_descriptor();
inline const ::std::string& stSynFinishTaskID_ProtoModID_Name(stSynFinishTaskID_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynFinishTaskID_ProtoModID_descriptor(), value);
}
inline bool stSynFinishTaskID_ProtoModID_Parse(
    const ::std::string& name, stSynFinishTaskID_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynFinishTaskID_ProtoModID>(
    stSynFinishTaskID_ProtoModID_descriptor(), name, value);
}
enum stSynFinishTaskID_ProtoFunID {
  stSynFinishTaskID_ProtoFunID_FunID = 1
};
bool stSynFinishTaskID_ProtoFunID_IsValid(int value);
const stSynFinishTaskID_ProtoFunID stSynFinishTaskID_ProtoFunID_ProtoFunID_MIN = stSynFinishTaskID_ProtoFunID_FunID;
const stSynFinishTaskID_ProtoFunID stSynFinishTaskID_ProtoFunID_ProtoFunID_MAX = stSynFinishTaskID_ProtoFunID_FunID;
const int stSynFinishTaskID_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynFinishTaskID_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynFinishTaskID_ProtoFunID_descriptor();
inline const ::std::string& stSynFinishTaskID_ProtoFunID_Name(stSynFinishTaskID_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynFinishTaskID_ProtoFunID_descriptor(), value);
}
inline bool stSynFinishTaskID_ProtoFunID_Parse(
    const ::std::string& name, stSynFinishTaskID_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynFinishTaskID_ProtoFunID>(
    stSynFinishTaskID_ProtoFunID_descriptor(), name, value);
}
enum stNotifyTaskFinish_ProtoModID {
  stNotifyTaskFinish_ProtoModID_ModID = 4
};
bool stNotifyTaskFinish_ProtoModID_IsValid(int value);
const stNotifyTaskFinish_ProtoModID stNotifyTaskFinish_ProtoModID_ProtoModID_MIN = stNotifyTaskFinish_ProtoModID_ModID;
const stNotifyTaskFinish_ProtoModID stNotifyTaskFinish_ProtoModID_ProtoModID_MAX = stNotifyTaskFinish_ProtoModID_ModID;
const int stNotifyTaskFinish_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyTaskFinish_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyTaskFinish_ProtoModID_descriptor();
inline const ::std::string& stNotifyTaskFinish_ProtoModID_Name(stNotifyTaskFinish_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyTaskFinish_ProtoModID_descriptor(), value);
}
inline bool stNotifyTaskFinish_ProtoModID_Parse(
    const ::std::string& name, stNotifyTaskFinish_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyTaskFinish_ProtoModID>(
    stNotifyTaskFinish_ProtoModID_descriptor(), name, value);
}
enum stNotifyTaskFinish_ProtoFunID {
  stNotifyTaskFinish_ProtoFunID_FunID = 2
};
bool stNotifyTaskFinish_ProtoFunID_IsValid(int value);
const stNotifyTaskFinish_ProtoFunID stNotifyTaskFinish_ProtoFunID_ProtoFunID_MIN = stNotifyTaskFinish_ProtoFunID_FunID;
const stNotifyTaskFinish_ProtoFunID stNotifyTaskFinish_ProtoFunID_ProtoFunID_MAX = stNotifyTaskFinish_ProtoFunID_FunID;
const int stNotifyTaskFinish_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyTaskFinish_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyTaskFinish_ProtoFunID_descriptor();
inline const ::std::string& stNotifyTaskFinish_ProtoFunID_Name(stNotifyTaskFinish_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyTaskFinish_ProtoFunID_descriptor(), value);
}
inline bool stNotifyTaskFinish_ProtoFunID_Parse(
    const ::std::string& name, stNotifyTaskFinish_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyTaskFinish_ProtoFunID>(
    stNotifyTaskFinish_ProtoFunID_descriptor(), name, value);
}
enum stSynAllAcceptTask_ProtoModID {
  stSynAllAcceptTask_ProtoModID_ModID = 4
};
bool stSynAllAcceptTask_ProtoModID_IsValid(int value);
const stSynAllAcceptTask_ProtoModID stSynAllAcceptTask_ProtoModID_ProtoModID_MIN = stSynAllAcceptTask_ProtoModID_ModID;
const stSynAllAcceptTask_ProtoModID stSynAllAcceptTask_ProtoModID_ProtoModID_MAX = stSynAllAcceptTask_ProtoModID_ModID;
const int stSynAllAcceptTask_ProtoModID_ProtoModID_ARRAYSIZE = stSynAllAcceptTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllAcceptTask_ProtoModID_descriptor();
inline const ::std::string& stSynAllAcceptTask_ProtoModID_Name(stSynAllAcceptTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllAcceptTask_ProtoModID_descriptor(), value);
}
inline bool stSynAllAcceptTask_ProtoModID_Parse(
    const ::std::string& name, stSynAllAcceptTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllAcceptTask_ProtoModID>(
    stSynAllAcceptTask_ProtoModID_descriptor(), name, value);
}
enum stSynAllAcceptTask_ProtoFunID {
  stSynAllAcceptTask_ProtoFunID_FunID = 3
};
bool stSynAllAcceptTask_ProtoFunID_IsValid(int value);
const stSynAllAcceptTask_ProtoFunID stSynAllAcceptTask_ProtoFunID_ProtoFunID_MIN = stSynAllAcceptTask_ProtoFunID_FunID;
const stSynAllAcceptTask_ProtoFunID stSynAllAcceptTask_ProtoFunID_ProtoFunID_MAX = stSynAllAcceptTask_ProtoFunID_FunID;
const int stSynAllAcceptTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynAllAcceptTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllAcceptTask_ProtoFunID_descriptor();
inline const ::std::string& stSynAllAcceptTask_ProtoFunID_Name(stSynAllAcceptTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllAcceptTask_ProtoFunID_descriptor(), value);
}
inline bool stSynAllAcceptTask_ProtoFunID_Parse(
    const ::std::string& name, stSynAllAcceptTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllAcceptTask_ProtoFunID>(
    stSynAllAcceptTask_ProtoFunID_descriptor(), name, value);
}
enum stReqAcceptTask_ProtoModID {
  stReqAcceptTask_ProtoModID_ModID = 4
};
bool stReqAcceptTask_ProtoModID_IsValid(int value);
const stReqAcceptTask_ProtoModID stReqAcceptTask_ProtoModID_ProtoModID_MIN = stReqAcceptTask_ProtoModID_ModID;
const stReqAcceptTask_ProtoModID stReqAcceptTask_ProtoModID_ProtoModID_MAX = stReqAcceptTask_ProtoModID_ModID;
const int stReqAcceptTask_ProtoModID_ProtoModID_ARRAYSIZE = stReqAcceptTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAcceptTask_ProtoModID_descriptor();
inline const ::std::string& stReqAcceptTask_ProtoModID_Name(stReqAcceptTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAcceptTask_ProtoModID_descriptor(), value);
}
inline bool stReqAcceptTask_ProtoModID_Parse(
    const ::std::string& name, stReqAcceptTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAcceptTask_ProtoModID>(
    stReqAcceptTask_ProtoModID_descriptor(), name, value);
}
enum stReqAcceptTask_ProtoFunID {
  stReqAcceptTask_ProtoFunID_FunID = 4
};
bool stReqAcceptTask_ProtoFunID_IsValid(int value);
const stReqAcceptTask_ProtoFunID stReqAcceptTask_ProtoFunID_ProtoFunID_MIN = stReqAcceptTask_ProtoFunID_FunID;
const stReqAcceptTask_ProtoFunID stReqAcceptTask_ProtoFunID_ProtoFunID_MAX = stReqAcceptTask_ProtoFunID_FunID;
const int stReqAcceptTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAcceptTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAcceptTask_ProtoFunID_descriptor();
inline const ::std::string& stReqAcceptTask_ProtoFunID_Name(stReqAcceptTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAcceptTask_ProtoFunID_descriptor(), value);
}
inline bool stReqAcceptTask_ProtoFunID_Parse(
    const ::std::string& name, stReqAcceptTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAcceptTask_ProtoFunID>(
    stReqAcceptTask_ProtoFunID_descriptor(), name, value);
}
enum stNotifyAddTask_ProtoModID {
  stNotifyAddTask_ProtoModID_ModID = 4
};
bool stNotifyAddTask_ProtoModID_IsValid(int value);
const stNotifyAddTask_ProtoModID stNotifyAddTask_ProtoModID_ProtoModID_MIN = stNotifyAddTask_ProtoModID_ModID;
const stNotifyAddTask_ProtoModID stNotifyAddTask_ProtoModID_ProtoModID_MAX = stNotifyAddTask_ProtoModID_ModID;
const int stNotifyAddTask_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyAddTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddTask_ProtoModID_descriptor();
inline const ::std::string& stNotifyAddTask_ProtoModID_Name(stNotifyAddTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddTask_ProtoModID_descriptor(), value);
}
inline bool stNotifyAddTask_ProtoModID_Parse(
    const ::std::string& name, stNotifyAddTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddTask_ProtoModID>(
    stNotifyAddTask_ProtoModID_descriptor(), name, value);
}
enum stNotifyAddTask_ProtoFunID {
  stNotifyAddTask_ProtoFunID_FunID = 5
};
bool stNotifyAddTask_ProtoFunID_IsValid(int value);
const stNotifyAddTask_ProtoFunID stNotifyAddTask_ProtoFunID_ProtoFunID_MIN = stNotifyAddTask_ProtoFunID_FunID;
const stNotifyAddTask_ProtoFunID stNotifyAddTask_ProtoFunID_ProtoFunID_MAX = stNotifyAddTask_ProtoFunID_FunID;
const int stNotifyAddTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyAddTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddTask_ProtoFunID_descriptor();
inline const ::std::string& stNotifyAddTask_ProtoFunID_Name(stNotifyAddTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddTask_ProtoFunID_descriptor(), value);
}
inline bool stNotifyAddTask_ProtoFunID_Parse(
    const ::std::string& name, stNotifyAddTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddTask_ProtoFunID>(
    stNotifyAddTask_ProtoFunID_descriptor(), name, value);
}
enum stAcceptTaskError_eReason {
  stAcceptTaskError_eReason_eCon_Not_Enough = 1
};
bool stAcceptTaskError_eReason_IsValid(int value);
const stAcceptTaskError_eReason stAcceptTaskError_eReason_eReason_MIN = stAcceptTaskError_eReason_eCon_Not_Enough;
const stAcceptTaskError_eReason stAcceptTaskError_eReason_eReason_MAX = stAcceptTaskError_eReason_eCon_Not_Enough;
const int stAcceptTaskError_eReason_eReason_ARRAYSIZE = stAcceptTaskError_eReason_eReason_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAcceptTaskError_eReason_descriptor();
inline const ::std::string& stAcceptTaskError_eReason_Name(stAcceptTaskError_eReason value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAcceptTaskError_eReason_descriptor(), value);
}
inline bool stAcceptTaskError_eReason_Parse(
    const ::std::string& name, stAcceptTaskError_eReason* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAcceptTaskError_eReason>(
    stAcceptTaskError_eReason_descriptor(), name, value);
}
enum stAcceptTaskError_ProtoModID {
  stAcceptTaskError_ProtoModID_ModID = 4
};
bool stAcceptTaskError_ProtoModID_IsValid(int value);
const stAcceptTaskError_ProtoModID stAcceptTaskError_ProtoModID_ProtoModID_MIN = stAcceptTaskError_ProtoModID_ModID;
const stAcceptTaskError_ProtoModID stAcceptTaskError_ProtoModID_ProtoModID_MAX = stAcceptTaskError_ProtoModID_ModID;
const int stAcceptTaskError_ProtoModID_ProtoModID_ARRAYSIZE = stAcceptTaskError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAcceptTaskError_ProtoModID_descriptor();
inline const ::std::string& stAcceptTaskError_ProtoModID_Name(stAcceptTaskError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAcceptTaskError_ProtoModID_descriptor(), value);
}
inline bool stAcceptTaskError_ProtoModID_Parse(
    const ::std::string& name, stAcceptTaskError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAcceptTaskError_ProtoModID>(
    stAcceptTaskError_ProtoModID_descriptor(), name, value);
}
enum stAcceptTaskError_ProtoFunID {
  stAcceptTaskError_ProtoFunID_FunID = 6
};
bool stAcceptTaskError_ProtoFunID_IsValid(int value);
const stAcceptTaskError_ProtoFunID stAcceptTaskError_ProtoFunID_ProtoFunID_MIN = stAcceptTaskError_ProtoFunID_FunID;
const stAcceptTaskError_ProtoFunID stAcceptTaskError_ProtoFunID_ProtoFunID_MAX = stAcceptTaskError_ProtoFunID_FunID;
const int stAcceptTaskError_ProtoFunID_ProtoFunID_ARRAYSIZE = stAcceptTaskError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAcceptTaskError_ProtoFunID_descriptor();
inline const ::std::string& stAcceptTaskError_ProtoFunID_Name(stAcceptTaskError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAcceptTaskError_ProtoFunID_descriptor(), value);
}
inline bool stAcceptTaskError_ProtoFunID_Parse(
    const ::std::string& name, stAcceptTaskError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAcceptTaskError_ProtoFunID>(
    stAcceptTaskError_ProtoFunID_descriptor(), name, value);
}
enum stRefreshTaskInfo_ProtoModID {
  stRefreshTaskInfo_ProtoModID_ModID = 4
};
bool stRefreshTaskInfo_ProtoModID_IsValid(int value);
const stRefreshTaskInfo_ProtoModID stRefreshTaskInfo_ProtoModID_ProtoModID_MIN = stRefreshTaskInfo_ProtoModID_ModID;
const stRefreshTaskInfo_ProtoModID stRefreshTaskInfo_ProtoModID_ProtoModID_MAX = stRefreshTaskInfo_ProtoModID_ModID;
const int stRefreshTaskInfo_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshTaskInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshTaskInfo_ProtoModID_descriptor();
inline const ::std::string& stRefreshTaskInfo_ProtoModID_Name(stRefreshTaskInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshTaskInfo_ProtoModID_descriptor(), value);
}
inline bool stRefreshTaskInfo_ProtoModID_Parse(
    const ::std::string& name, stRefreshTaskInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshTaskInfo_ProtoModID>(
    stRefreshTaskInfo_ProtoModID_descriptor(), name, value);
}
enum stRefreshTaskInfo_ProtoFunID {
  stRefreshTaskInfo_ProtoFunID_FunID = 7
};
bool stRefreshTaskInfo_ProtoFunID_IsValid(int value);
const stRefreshTaskInfo_ProtoFunID stRefreshTaskInfo_ProtoFunID_ProtoFunID_MIN = stRefreshTaskInfo_ProtoFunID_FunID;
const stRefreshTaskInfo_ProtoFunID stRefreshTaskInfo_ProtoFunID_ProtoFunID_MAX = stRefreshTaskInfo_ProtoFunID_FunID;
const int stRefreshTaskInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshTaskInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshTaskInfo_ProtoFunID_descriptor();
inline const ::std::string& stRefreshTaskInfo_ProtoFunID_Name(stRefreshTaskInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshTaskInfo_ProtoFunID_descriptor(), value);
}
inline bool stRefreshTaskInfo_ProtoFunID_Parse(
    const ::std::string& name, stRefreshTaskInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshTaskInfo_ProtoFunID>(
    stRefreshTaskInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqCommitTask_ProtoModID {
  stReqCommitTask_ProtoModID_ModID = 4
};
bool stReqCommitTask_ProtoModID_IsValid(int value);
const stReqCommitTask_ProtoModID stReqCommitTask_ProtoModID_ProtoModID_MIN = stReqCommitTask_ProtoModID_ModID;
const stReqCommitTask_ProtoModID stReqCommitTask_ProtoModID_ProtoModID_MAX = stReqCommitTask_ProtoModID_ModID;
const int stReqCommitTask_ProtoModID_ProtoModID_ARRAYSIZE = stReqCommitTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCommitTask_ProtoModID_descriptor();
inline const ::std::string& stReqCommitTask_ProtoModID_Name(stReqCommitTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCommitTask_ProtoModID_descriptor(), value);
}
inline bool stReqCommitTask_ProtoModID_Parse(
    const ::std::string& name, stReqCommitTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCommitTask_ProtoModID>(
    stReqCommitTask_ProtoModID_descriptor(), name, value);
}
enum stReqCommitTask_ProtoFunID {
  stReqCommitTask_ProtoFunID_FunID = 8
};
bool stReqCommitTask_ProtoFunID_IsValid(int value);
const stReqCommitTask_ProtoFunID stReqCommitTask_ProtoFunID_ProtoFunID_MIN = stReqCommitTask_ProtoFunID_FunID;
const stReqCommitTask_ProtoFunID stReqCommitTask_ProtoFunID_ProtoFunID_MAX = stReqCommitTask_ProtoFunID_FunID;
const int stReqCommitTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCommitTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCommitTask_ProtoFunID_descriptor();
inline const ::std::string& stReqCommitTask_ProtoFunID_Name(stReqCommitTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCommitTask_ProtoFunID_descriptor(), value);
}
inline bool stReqCommitTask_ProtoFunID_Parse(
    const ::std::string& name, stReqCommitTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCommitTask_ProtoFunID>(
    stReqCommitTask_ProtoFunID_descriptor(), name, value);
}
enum stCommitTaskResult_eResult {
  stCommitTaskResult_eResult_eSUCCESS = 1,
  stCommitTaskResult_eResult_eCON_NOT_ENOUGH = 2
};
bool stCommitTaskResult_eResult_IsValid(int value);
const stCommitTaskResult_eResult stCommitTaskResult_eResult_eResult_MIN = stCommitTaskResult_eResult_eSUCCESS;
const stCommitTaskResult_eResult stCommitTaskResult_eResult_eResult_MAX = stCommitTaskResult_eResult_eCON_NOT_ENOUGH;
const int stCommitTaskResult_eResult_eResult_ARRAYSIZE = stCommitTaskResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCommitTaskResult_eResult_descriptor();
inline const ::std::string& stCommitTaskResult_eResult_Name(stCommitTaskResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCommitTaskResult_eResult_descriptor(), value);
}
inline bool stCommitTaskResult_eResult_Parse(
    const ::std::string& name, stCommitTaskResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCommitTaskResult_eResult>(
    stCommitTaskResult_eResult_descriptor(), name, value);
}
enum stCommitTaskResult_ProtoModID {
  stCommitTaskResult_ProtoModID_ModID = 4
};
bool stCommitTaskResult_ProtoModID_IsValid(int value);
const stCommitTaskResult_ProtoModID stCommitTaskResult_ProtoModID_ProtoModID_MIN = stCommitTaskResult_ProtoModID_ModID;
const stCommitTaskResult_ProtoModID stCommitTaskResult_ProtoModID_ProtoModID_MAX = stCommitTaskResult_ProtoModID_ModID;
const int stCommitTaskResult_ProtoModID_ProtoModID_ARRAYSIZE = stCommitTaskResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCommitTaskResult_ProtoModID_descriptor();
inline const ::std::string& stCommitTaskResult_ProtoModID_Name(stCommitTaskResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCommitTaskResult_ProtoModID_descriptor(), value);
}
inline bool stCommitTaskResult_ProtoModID_Parse(
    const ::std::string& name, stCommitTaskResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCommitTaskResult_ProtoModID>(
    stCommitTaskResult_ProtoModID_descriptor(), name, value);
}
enum stCommitTaskResult_ProtoFunID {
  stCommitTaskResult_ProtoFunID_FunID = 9
};
bool stCommitTaskResult_ProtoFunID_IsValid(int value);
const stCommitTaskResult_ProtoFunID stCommitTaskResult_ProtoFunID_ProtoFunID_MIN = stCommitTaskResult_ProtoFunID_FunID;
const stCommitTaskResult_ProtoFunID stCommitTaskResult_ProtoFunID_ProtoFunID_MAX = stCommitTaskResult_ProtoFunID_FunID;
const int stCommitTaskResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCommitTaskResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCommitTaskResult_ProtoFunID_descriptor();
inline const ::std::string& stCommitTaskResult_ProtoFunID_Name(stCommitTaskResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCommitTaskResult_ProtoFunID_descriptor(), value);
}
inline bool stCommitTaskResult_ProtoFunID_Parse(
    const ::std::string& name, stCommitTaskResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCommitTaskResult_ProtoFunID>(
    stCommitTaskResult_ProtoFunID_descriptor(), name, value);
}
enum stChgTaskSubStatus_ProtoModID {
  stChgTaskSubStatus_ProtoModID_ModID = 4
};
bool stChgTaskSubStatus_ProtoModID_IsValid(int value);
const stChgTaskSubStatus_ProtoModID stChgTaskSubStatus_ProtoModID_ProtoModID_MIN = stChgTaskSubStatus_ProtoModID_ModID;
const stChgTaskSubStatus_ProtoModID stChgTaskSubStatus_ProtoModID_ProtoModID_MAX = stChgTaskSubStatus_ProtoModID_ModID;
const int stChgTaskSubStatus_ProtoModID_ProtoModID_ARRAYSIZE = stChgTaskSubStatus_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChgTaskSubStatus_ProtoModID_descriptor();
inline const ::std::string& stChgTaskSubStatus_ProtoModID_Name(stChgTaskSubStatus_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChgTaskSubStatus_ProtoModID_descriptor(), value);
}
inline bool stChgTaskSubStatus_ProtoModID_Parse(
    const ::std::string& name, stChgTaskSubStatus_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChgTaskSubStatus_ProtoModID>(
    stChgTaskSubStatus_ProtoModID_descriptor(), name, value);
}
enum stChgTaskSubStatus_ProtoFunID {
  stChgTaskSubStatus_ProtoFunID_FunID = 10
};
bool stChgTaskSubStatus_ProtoFunID_IsValid(int value);
const stChgTaskSubStatus_ProtoFunID stChgTaskSubStatus_ProtoFunID_ProtoFunID_MIN = stChgTaskSubStatus_ProtoFunID_FunID;
const stChgTaskSubStatus_ProtoFunID stChgTaskSubStatus_ProtoFunID_ProtoFunID_MAX = stChgTaskSubStatus_ProtoFunID_FunID;
const int stChgTaskSubStatus_ProtoFunID_ProtoFunID_ARRAYSIZE = stChgTaskSubStatus_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChgTaskSubStatus_ProtoFunID_descriptor();
inline const ::std::string& stChgTaskSubStatus_ProtoFunID_Name(stChgTaskSubStatus_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChgTaskSubStatus_ProtoFunID_descriptor(), value);
}
inline bool stChgTaskSubStatus_ProtoFunID_Parse(
    const ::std::string& name, stChgTaskSubStatus_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChgTaskSubStatus_ProtoFunID>(
    stChgTaskSubStatus_ProtoFunID_descriptor(), name, value);
}
enum stSaveCurrentTask_ProtoModID {
  stSaveCurrentTask_ProtoModID_ModID = 4
};
bool stSaveCurrentTask_ProtoModID_IsValid(int value);
const stSaveCurrentTask_ProtoModID stSaveCurrentTask_ProtoModID_ProtoModID_MIN = stSaveCurrentTask_ProtoModID_ModID;
const stSaveCurrentTask_ProtoModID stSaveCurrentTask_ProtoModID_ProtoModID_MAX = stSaveCurrentTask_ProtoModID_ModID;
const int stSaveCurrentTask_ProtoModID_ProtoModID_ARRAYSIZE = stSaveCurrentTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveCurrentTask_ProtoModID_descriptor();
inline const ::std::string& stSaveCurrentTask_ProtoModID_Name(stSaveCurrentTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveCurrentTask_ProtoModID_descriptor(), value);
}
inline bool stSaveCurrentTask_ProtoModID_Parse(
    const ::std::string& name, stSaveCurrentTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveCurrentTask_ProtoModID>(
    stSaveCurrentTask_ProtoModID_descriptor(), name, value);
}
enum stSaveCurrentTask_ProtoFunID {
  stSaveCurrentTask_ProtoFunID_FunID = 11
};
bool stSaveCurrentTask_ProtoFunID_IsValid(int value);
const stSaveCurrentTask_ProtoFunID stSaveCurrentTask_ProtoFunID_ProtoFunID_MIN = stSaveCurrentTask_ProtoFunID_FunID;
const stSaveCurrentTask_ProtoFunID stSaveCurrentTask_ProtoFunID_ProtoFunID_MAX = stSaveCurrentTask_ProtoFunID_FunID;
const int stSaveCurrentTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stSaveCurrentTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveCurrentTask_ProtoFunID_descriptor();
inline const ::std::string& stSaveCurrentTask_ProtoFunID_Name(stSaveCurrentTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveCurrentTask_ProtoFunID_descriptor(), value);
}
inline bool stSaveCurrentTask_ProtoFunID_Parse(
    const ::std::string& name, stSaveCurrentTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveCurrentTask_ProtoFunID>(
    stSaveCurrentTask_ProtoFunID_descriptor(), name, value);
}
enum stNotifyCurrentTask_ProtoModID {
  stNotifyCurrentTask_ProtoModID_ModID = 4
};
bool stNotifyCurrentTask_ProtoModID_IsValid(int value);
const stNotifyCurrentTask_ProtoModID stNotifyCurrentTask_ProtoModID_ProtoModID_MIN = stNotifyCurrentTask_ProtoModID_ModID;
const stNotifyCurrentTask_ProtoModID stNotifyCurrentTask_ProtoModID_ProtoModID_MAX = stNotifyCurrentTask_ProtoModID_ModID;
const int stNotifyCurrentTask_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyCurrentTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCurrentTask_ProtoModID_descriptor();
inline const ::std::string& stNotifyCurrentTask_ProtoModID_Name(stNotifyCurrentTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCurrentTask_ProtoModID_descriptor(), value);
}
inline bool stNotifyCurrentTask_ProtoModID_Parse(
    const ::std::string& name, stNotifyCurrentTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCurrentTask_ProtoModID>(
    stNotifyCurrentTask_ProtoModID_descriptor(), name, value);
}
enum stNotifyCurrentTask_ProtoFunID {
  stNotifyCurrentTask_ProtoFunID_FunID = 12
};
bool stNotifyCurrentTask_ProtoFunID_IsValid(int value);
const stNotifyCurrentTask_ProtoFunID stNotifyCurrentTask_ProtoFunID_ProtoFunID_MIN = stNotifyCurrentTask_ProtoFunID_FunID;
const stNotifyCurrentTask_ProtoFunID stNotifyCurrentTask_ProtoFunID_ProtoFunID_MAX = stNotifyCurrentTask_ProtoFunID_FunID;
const int stNotifyCurrentTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyCurrentTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyCurrentTask_ProtoFunID_descriptor();
inline const ::std::string& stNotifyCurrentTask_ProtoFunID_Name(stNotifyCurrentTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyCurrentTask_ProtoFunID_descriptor(), value);
}
inline bool stNotifyCurrentTask_ProtoFunID_Parse(
    const ::std::string& name, stNotifyCurrentTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyCurrentTask_ProtoFunID>(
    stNotifyCurrentTask_ProtoFunID_descriptor(), name, value);
}
enum stReqBatchAcceptTask_ProtoModID {
  stReqBatchAcceptTask_ProtoModID_ModID = 4
};
bool stReqBatchAcceptTask_ProtoModID_IsValid(int value);
const stReqBatchAcceptTask_ProtoModID stReqBatchAcceptTask_ProtoModID_ProtoModID_MIN = stReqBatchAcceptTask_ProtoModID_ModID;
const stReqBatchAcceptTask_ProtoModID stReqBatchAcceptTask_ProtoModID_ProtoModID_MAX = stReqBatchAcceptTask_ProtoModID_ModID;
const int stReqBatchAcceptTask_ProtoModID_ProtoModID_ARRAYSIZE = stReqBatchAcceptTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBatchAcceptTask_ProtoModID_descriptor();
inline const ::std::string& stReqBatchAcceptTask_ProtoModID_Name(stReqBatchAcceptTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBatchAcceptTask_ProtoModID_descriptor(), value);
}
inline bool stReqBatchAcceptTask_ProtoModID_Parse(
    const ::std::string& name, stReqBatchAcceptTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBatchAcceptTask_ProtoModID>(
    stReqBatchAcceptTask_ProtoModID_descriptor(), name, value);
}
enum stReqBatchAcceptTask_ProtoFunID {
  stReqBatchAcceptTask_ProtoFunID_FunID = 13
};
bool stReqBatchAcceptTask_ProtoFunID_IsValid(int value);
const stReqBatchAcceptTask_ProtoFunID stReqBatchAcceptTask_ProtoFunID_ProtoFunID_MIN = stReqBatchAcceptTask_ProtoFunID_FunID;
const stReqBatchAcceptTask_ProtoFunID stReqBatchAcceptTask_ProtoFunID_ProtoFunID_MAX = stReqBatchAcceptTask_ProtoFunID_FunID;
const int stReqBatchAcceptTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBatchAcceptTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBatchAcceptTask_ProtoFunID_descriptor();
inline const ::std::string& stReqBatchAcceptTask_ProtoFunID_Name(stReqBatchAcceptTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBatchAcceptTask_ProtoFunID_descriptor(), value);
}
inline bool stReqBatchAcceptTask_ProtoFunID_Parse(
    const ::std::string& name, stReqBatchAcceptTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBatchAcceptTask_ProtoFunID>(
    stReqBatchAcceptTask_ProtoFunID_descriptor(), name, value);
}
enum stRetBatchAccpetTask_ProtoModID {
  stRetBatchAccpetTask_ProtoModID_ModID = 4
};
bool stRetBatchAccpetTask_ProtoModID_IsValid(int value);
const stRetBatchAccpetTask_ProtoModID stRetBatchAccpetTask_ProtoModID_ProtoModID_MIN = stRetBatchAccpetTask_ProtoModID_ModID;
const stRetBatchAccpetTask_ProtoModID stRetBatchAccpetTask_ProtoModID_ProtoModID_MAX = stRetBatchAccpetTask_ProtoModID_ModID;
const int stRetBatchAccpetTask_ProtoModID_ProtoModID_ARRAYSIZE = stRetBatchAccpetTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetBatchAccpetTask_ProtoModID_descriptor();
inline const ::std::string& stRetBatchAccpetTask_ProtoModID_Name(stRetBatchAccpetTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetBatchAccpetTask_ProtoModID_descriptor(), value);
}
inline bool stRetBatchAccpetTask_ProtoModID_Parse(
    const ::std::string& name, stRetBatchAccpetTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetBatchAccpetTask_ProtoModID>(
    stRetBatchAccpetTask_ProtoModID_descriptor(), name, value);
}
enum stRetBatchAccpetTask_ProtoFunID {
  stRetBatchAccpetTask_ProtoFunID_FunID = 14
};
bool stRetBatchAccpetTask_ProtoFunID_IsValid(int value);
const stRetBatchAccpetTask_ProtoFunID stRetBatchAccpetTask_ProtoFunID_ProtoFunID_MIN = stRetBatchAccpetTask_ProtoFunID_FunID;
const stRetBatchAccpetTask_ProtoFunID stRetBatchAccpetTask_ProtoFunID_ProtoFunID_MAX = stRetBatchAccpetTask_ProtoFunID_FunID;
const int stRetBatchAccpetTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetBatchAccpetTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetBatchAccpetTask_ProtoFunID_descriptor();
inline const ::std::string& stRetBatchAccpetTask_ProtoFunID_Name(stRetBatchAccpetTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetBatchAccpetTask_ProtoFunID_descriptor(), value);
}
inline bool stRetBatchAccpetTask_ProtoFunID_Parse(
    const ::std::string& name, stRetBatchAccpetTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetBatchAccpetTask_ProtoFunID>(
    stRetBatchAccpetTask_ProtoFunID_descriptor(), name, value);
}
enum stSynDailyTaskScore_ProtoModID {
  stSynDailyTaskScore_ProtoModID_ModID = 4
};
bool stSynDailyTaskScore_ProtoModID_IsValid(int value);
const stSynDailyTaskScore_ProtoModID stSynDailyTaskScore_ProtoModID_ProtoModID_MIN = stSynDailyTaskScore_ProtoModID_ModID;
const stSynDailyTaskScore_ProtoModID stSynDailyTaskScore_ProtoModID_ProtoModID_MAX = stSynDailyTaskScore_ProtoModID_ModID;
const int stSynDailyTaskScore_ProtoModID_ProtoModID_ARRAYSIZE = stSynDailyTaskScore_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynDailyTaskScore_ProtoModID_descriptor();
inline const ::std::string& stSynDailyTaskScore_ProtoModID_Name(stSynDailyTaskScore_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynDailyTaskScore_ProtoModID_descriptor(), value);
}
inline bool stSynDailyTaskScore_ProtoModID_Parse(
    const ::std::string& name, stSynDailyTaskScore_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynDailyTaskScore_ProtoModID>(
    stSynDailyTaskScore_ProtoModID_descriptor(), name, value);
}
enum stSynDailyTaskScore_ProtoFunID {
  stSynDailyTaskScore_ProtoFunID_FunID = 15
};
bool stSynDailyTaskScore_ProtoFunID_IsValid(int value);
const stSynDailyTaskScore_ProtoFunID stSynDailyTaskScore_ProtoFunID_ProtoFunID_MIN = stSynDailyTaskScore_ProtoFunID_FunID;
const stSynDailyTaskScore_ProtoFunID stSynDailyTaskScore_ProtoFunID_ProtoFunID_MAX = stSynDailyTaskScore_ProtoFunID_FunID;
const int stSynDailyTaskScore_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynDailyTaskScore_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynDailyTaskScore_ProtoFunID_descriptor();
inline const ::std::string& stSynDailyTaskScore_ProtoFunID_Name(stSynDailyTaskScore_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynDailyTaskScore_ProtoFunID_descriptor(), value);
}
inline bool stSynDailyTaskScore_ProtoFunID_Parse(
    const ::std::string& name, stSynDailyTaskScore_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynDailyTaskScore_ProtoFunID>(
    stSynDailyTaskScore_ProtoFunID_descriptor(), name, value);
}
enum stDailyTaskScoreInfo_ProtoModID {
  stDailyTaskScoreInfo_ProtoModID_ModID = 4
};
bool stDailyTaskScoreInfo_ProtoModID_IsValid(int value);
const stDailyTaskScoreInfo_ProtoModID stDailyTaskScoreInfo_ProtoModID_ProtoModID_MIN = stDailyTaskScoreInfo_ProtoModID_ModID;
const stDailyTaskScoreInfo_ProtoModID stDailyTaskScoreInfo_ProtoModID_ProtoModID_MAX = stDailyTaskScoreInfo_ProtoModID_ModID;
const int stDailyTaskScoreInfo_ProtoModID_ProtoModID_ARRAYSIZE = stDailyTaskScoreInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDailyTaskScoreInfo_ProtoModID_descriptor();
inline const ::std::string& stDailyTaskScoreInfo_ProtoModID_Name(stDailyTaskScoreInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDailyTaskScoreInfo_ProtoModID_descriptor(), value);
}
inline bool stDailyTaskScoreInfo_ProtoModID_Parse(
    const ::std::string& name, stDailyTaskScoreInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDailyTaskScoreInfo_ProtoModID>(
    stDailyTaskScoreInfo_ProtoModID_descriptor(), name, value);
}
enum stDailyTaskScoreInfo_ProtoFunID {
  stDailyTaskScoreInfo_ProtoFunID_FunID = 16
};
bool stDailyTaskScoreInfo_ProtoFunID_IsValid(int value);
const stDailyTaskScoreInfo_ProtoFunID stDailyTaskScoreInfo_ProtoFunID_ProtoFunID_MIN = stDailyTaskScoreInfo_ProtoFunID_FunID;
const stDailyTaskScoreInfo_ProtoFunID stDailyTaskScoreInfo_ProtoFunID_ProtoFunID_MAX = stDailyTaskScoreInfo_ProtoFunID_FunID;
const int stDailyTaskScoreInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stDailyTaskScoreInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDailyTaskScoreInfo_ProtoFunID_descriptor();
inline const ::std::string& stDailyTaskScoreInfo_ProtoFunID_Name(stDailyTaskScoreInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDailyTaskScoreInfo_ProtoFunID_descriptor(), value);
}
inline bool stDailyTaskScoreInfo_ProtoFunID_Parse(
    const ::std::string& name, stDailyTaskScoreInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDailyTaskScoreInfo_ProtoFunID>(
    stDailyTaskScoreInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqDailyTaskScoreReward_ProtoModID {
  stReqDailyTaskScoreReward_ProtoModID_ModID = 4
};
bool stReqDailyTaskScoreReward_ProtoModID_IsValid(int value);
const stReqDailyTaskScoreReward_ProtoModID stReqDailyTaskScoreReward_ProtoModID_ProtoModID_MIN = stReqDailyTaskScoreReward_ProtoModID_ModID;
const stReqDailyTaskScoreReward_ProtoModID stReqDailyTaskScoreReward_ProtoModID_ProtoModID_MAX = stReqDailyTaskScoreReward_ProtoModID_ModID;
const int stReqDailyTaskScoreReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqDailyTaskScoreReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDailyTaskScoreReward_ProtoModID_descriptor();
inline const ::std::string& stReqDailyTaskScoreReward_ProtoModID_Name(stReqDailyTaskScoreReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDailyTaskScoreReward_ProtoModID_descriptor(), value);
}
inline bool stReqDailyTaskScoreReward_ProtoModID_Parse(
    const ::std::string& name, stReqDailyTaskScoreReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDailyTaskScoreReward_ProtoModID>(
    stReqDailyTaskScoreReward_ProtoModID_descriptor(), name, value);
}
enum stReqDailyTaskScoreReward_ProtoFunID {
  stReqDailyTaskScoreReward_ProtoFunID_FunID = 17
};
bool stReqDailyTaskScoreReward_ProtoFunID_IsValid(int value);
const stReqDailyTaskScoreReward_ProtoFunID stReqDailyTaskScoreReward_ProtoFunID_ProtoFunID_MIN = stReqDailyTaskScoreReward_ProtoFunID_FunID;
const stReqDailyTaskScoreReward_ProtoFunID stReqDailyTaskScoreReward_ProtoFunID_ProtoFunID_MAX = stReqDailyTaskScoreReward_ProtoFunID_FunID;
const int stReqDailyTaskScoreReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDailyTaskScoreReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDailyTaskScoreReward_ProtoFunID_descriptor();
inline const ::std::string& stReqDailyTaskScoreReward_ProtoFunID_Name(stReqDailyTaskScoreReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDailyTaskScoreReward_ProtoFunID_descriptor(), value);
}
inline bool stReqDailyTaskScoreReward_ProtoFunID_Parse(
    const ::std::string& name, stReqDailyTaskScoreReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDailyTaskScoreReward_ProtoFunID>(
    stReqDailyTaskScoreReward_ProtoFunID_descriptor(), name, value);
}
enum stDailyTaskScoreRewardResult_eResult {
  stDailyTaskScoreRewardResult_eResult_eSuccess = 1,
  stDailyTaskScoreRewardResult_eResult_eScore_Not_Enough = 2,
  stDailyTaskScoreRewardResult_eResult_eHas_Got_Reward = 3,
  stDailyTaskScoreRewardResult_eResult_eInner_Error = 4,
  stDailyTaskScoreRewardResult_eResult_eBag_Full = 5
};
bool stDailyTaskScoreRewardResult_eResult_IsValid(int value);
const stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult_eResult_eResult_MIN = stDailyTaskScoreRewardResult_eResult_eSuccess;
const stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult_eResult_eResult_MAX = stDailyTaskScoreRewardResult_eResult_eBag_Full;
const int stDailyTaskScoreRewardResult_eResult_eResult_ARRAYSIZE = stDailyTaskScoreRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDailyTaskScoreRewardResult_eResult_descriptor();
inline const ::std::string& stDailyTaskScoreRewardResult_eResult_Name(stDailyTaskScoreRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDailyTaskScoreRewardResult_eResult_descriptor(), value);
}
inline bool stDailyTaskScoreRewardResult_eResult_Parse(
    const ::std::string& name, stDailyTaskScoreRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDailyTaskScoreRewardResult_eResult>(
    stDailyTaskScoreRewardResult_eResult_descriptor(), name, value);
}
enum stDailyTaskScoreRewardResult_ProtoModID {
  stDailyTaskScoreRewardResult_ProtoModID_ModID = 4
};
bool stDailyTaskScoreRewardResult_ProtoModID_IsValid(int value);
const stDailyTaskScoreRewardResult_ProtoModID stDailyTaskScoreRewardResult_ProtoModID_ProtoModID_MIN = stDailyTaskScoreRewardResult_ProtoModID_ModID;
const stDailyTaskScoreRewardResult_ProtoModID stDailyTaskScoreRewardResult_ProtoModID_ProtoModID_MAX = stDailyTaskScoreRewardResult_ProtoModID_ModID;
const int stDailyTaskScoreRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stDailyTaskScoreRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDailyTaskScoreRewardResult_ProtoModID_descriptor();
inline const ::std::string& stDailyTaskScoreRewardResult_ProtoModID_Name(stDailyTaskScoreRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDailyTaskScoreRewardResult_ProtoModID_descriptor(), value);
}
inline bool stDailyTaskScoreRewardResult_ProtoModID_Parse(
    const ::std::string& name, stDailyTaskScoreRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDailyTaskScoreRewardResult_ProtoModID>(
    stDailyTaskScoreRewardResult_ProtoModID_descriptor(), name, value);
}
enum stDailyTaskScoreRewardResult_ProtoFunID {
  stDailyTaskScoreRewardResult_ProtoFunID_FunID = 18
};
bool stDailyTaskScoreRewardResult_ProtoFunID_IsValid(int value);
const stDailyTaskScoreRewardResult_ProtoFunID stDailyTaskScoreRewardResult_ProtoFunID_ProtoFunID_MIN = stDailyTaskScoreRewardResult_ProtoFunID_FunID;
const stDailyTaskScoreRewardResult_ProtoFunID stDailyTaskScoreRewardResult_ProtoFunID_ProtoFunID_MAX = stDailyTaskScoreRewardResult_ProtoFunID_FunID;
const int stDailyTaskScoreRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stDailyTaskScoreRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDailyTaskScoreRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stDailyTaskScoreRewardResult_ProtoFunID_Name(stDailyTaskScoreRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDailyTaskScoreRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stDailyTaskScoreRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stDailyTaskScoreRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDailyTaskScoreRewardResult_ProtoFunID>(
    stDailyTaskScoreRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stCancelTask_ProtoModID {
  stCancelTask_ProtoModID_ModID = 4
};
bool stCancelTask_ProtoModID_IsValid(int value);
const stCancelTask_ProtoModID stCancelTask_ProtoModID_ProtoModID_MIN = stCancelTask_ProtoModID_ModID;
const stCancelTask_ProtoModID stCancelTask_ProtoModID_ProtoModID_MAX = stCancelTask_ProtoModID_ModID;
const int stCancelTask_ProtoModID_ProtoModID_ARRAYSIZE = stCancelTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelTask_ProtoModID_descriptor();
inline const ::std::string& stCancelTask_ProtoModID_Name(stCancelTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelTask_ProtoModID_descriptor(), value);
}
inline bool stCancelTask_ProtoModID_Parse(
    const ::std::string& name, stCancelTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelTask_ProtoModID>(
    stCancelTask_ProtoModID_descriptor(), name, value);
}
enum stCancelTask_ProtoFunID {
  stCancelTask_ProtoFunID_FunID = 19
};
bool stCancelTask_ProtoFunID_IsValid(int value);
const stCancelTask_ProtoFunID stCancelTask_ProtoFunID_ProtoFunID_MIN = stCancelTask_ProtoFunID_FunID;
const stCancelTask_ProtoFunID stCancelTask_ProtoFunID_ProtoFunID_MAX = stCancelTask_ProtoFunID_FunID;
const int stCancelTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stCancelTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCancelTask_ProtoFunID_descriptor();
inline const ::std::string& stCancelTask_ProtoFunID_Name(stCancelTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCancelTask_ProtoFunID_descriptor(), value);
}
inline bool stCancelTask_ProtoFunID_Parse(
    const ::std::string& name, stCancelTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCancelTask_ProtoFunID>(
    stCancelTask_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenTaskWindow_ProtoModID {
  stReqOpenTaskWindow_ProtoModID_ModID = 4
};
bool stReqOpenTaskWindow_ProtoModID_IsValid(int value);
const stReqOpenTaskWindow_ProtoModID stReqOpenTaskWindow_ProtoModID_ProtoModID_MIN = stReqOpenTaskWindow_ProtoModID_ModID;
const stReqOpenTaskWindow_ProtoModID stReqOpenTaskWindow_ProtoModID_ProtoModID_MAX = stReqOpenTaskWindow_ProtoModID_ModID;
const int stReqOpenTaskWindow_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenTaskWindow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenTaskWindow_ProtoModID_descriptor();
inline const ::std::string& stReqOpenTaskWindow_ProtoModID_Name(stReqOpenTaskWindow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenTaskWindow_ProtoModID_descriptor(), value);
}
inline bool stReqOpenTaskWindow_ProtoModID_Parse(
    const ::std::string& name, stReqOpenTaskWindow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenTaskWindow_ProtoModID>(
    stReqOpenTaskWindow_ProtoModID_descriptor(), name, value);
}
enum stReqOpenTaskWindow_ProtoFunID {
  stReqOpenTaskWindow_ProtoFunID_FunID = 20
};
bool stReqOpenTaskWindow_ProtoFunID_IsValid(int value);
const stReqOpenTaskWindow_ProtoFunID stReqOpenTaskWindow_ProtoFunID_ProtoFunID_MIN = stReqOpenTaskWindow_ProtoFunID_FunID;
const stReqOpenTaskWindow_ProtoFunID stReqOpenTaskWindow_ProtoFunID_ProtoFunID_MAX = stReqOpenTaskWindow_ProtoFunID_FunID;
const int stReqOpenTaskWindow_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenTaskWindow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenTaskWindow_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenTaskWindow_ProtoFunID_Name(stReqOpenTaskWindow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenTaskWindow_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenTaskWindow_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenTaskWindow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenTaskWindow_ProtoFunID>(
    stReqOpenTaskWindow_ProtoFunID_descriptor(), name, value);
}
enum stRefreshAllDailyTask_ProtoModID {
  stRefreshAllDailyTask_ProtoModID_ModID = 4
};
bool stRefreshAllDailyTask_ProtoModID_IsValid(int value);
const stRefreshAllDailyTask_ProtoModID stRefreshAllDailyTask_ProtoModID_ProtoModID_MIN = stRefreshAllDailyTask_ProtoModID_ModID;
const stRefreshAllDailyTask_ProtoModID stRefreshAllDailyTask_ProtoModID_ProtoModID_MAX = stRefreshAllDailyTask_ProtoModID_ModID;
const int stRefreshAllDailyTask_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshAllDailyTask_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshAllDailyTask_ProtoModID_descriptor();
inline const ::std::string& stRefreshAllDailyTask_ProtoModID_Name(stRefreshAllDailyTask_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshAllDailyTask_ProtoModID_descriptor(), value);
}
inline bool stRefreshAllDailyTask_ProtoModID_Parse(
    const ::std::string& name, stRefreshAllDailyTask_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshAllDailyTask_ProtoModID>(
    stRefreshAllDailyTask_ProtoModID_descriptor(), name, value);
}
enum stRefreshAllDailyTask_ProtoFunID {
  stRefreshAllDailyTask_ProtoFunID_FunID = 21
};
bool stRefreshAllDailyTask_ProtoFunID_IsValid(int value);
const stRefreshAllDailyTask_ProtoFunID stRefreshAllDailyTask_ProtoFunID_ProtoFunID_MIN = stRefreshAllDailyTask_ProtoFunID_FunID;
const stRefreshAllDailyTask_ProtoFunID stRefreshAllDailyTask_ProtoFunID_ProtoFunID_MAX = stRefreshAllDailyTask_ProtoFunID_FunID;
const int stRefreshAllDailyTask_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshAllDailyTask_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshAllDailyTask_ProtoFunID_descriptor();
inline const ::std::string& stRefreshAllDailyTask_ProtoFunID_Name(stRefreshAllDailyTask_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshAllDailyTask_ProtoFunID_descriptor(), value);
}
inline bool stRefreshAllDailyTask_ProtoFunID_Parse(
    const ::std::string& name, stRefreshAllDailyTask_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshAllDailyTask_ProtoFunID>(
    stRefreshAllDailyTask_ProtoFunID_descriptor(), name, value);
}
enum GAME_EVENT_TYPE {
  ET_FINISH_COPYMAP = 1,
  ET_RAISE_EQUIP_TO_LV = 11,
  ET_REFINE_EQUIP_TO_LV = 12,
  ET_HERO_BREAK_INTO_LV = 13,
  ET_HERO_LEVELUP_TO_LV = 14,
  ET_RAISE_SKILL_TO_LV = 15,
  ET_EQUIP_FUWEN_NUM = 16,
  ET_RAISE_FUWEN_TO_LV = 17,
  ET_COLLECT_FASHION_NUM = 18,
  ET_DRAW_NUM = 31,
  ET_CAPTRURE_TREASURE_NUM = 32,
  ET_ARENA_NUM = 33,
  ET_TEAM_FINISH_COPYMAP_NUM = 34,
  ET_DIANFENG_PK_NUM = 35,
  ET_REALTIME_COPYMAP_NUM = 36,
  ET_LEITAI_COPYMAP_NUM = 37,
  ET_SHENGCUN_COPYMAP_NUM = 38,
  ET_GOLDCOIN_COPYMAP_NUM = 39,
  ET_ELITE_COPYMAP_NUM = 40,
  ET_RAISE_HERO_NUM = 42,
  ET_RAISE_SKILL_NUM = 43,
  ET_RAISE_EQUIP_NUM = 44,
  ET_RAISE_FUWEN_NUM = 45,
  ET_GET_WELFARE_CARD = 51,
  ET_GET_MONTH_CARD = 52,
  ET_GET_QUARTER_CARD = 53,
  ET_GET_YEAR_CARD = 54,
  ET_GUARD = 62,
  ET_INTERCEPT = 63,
  ET_BUY_SHOP_ITEM_NUM = 64,
  ET_EXPEDITION_NUM = 65,
  ET_RESET_RUSH_NUM = 66,
  ET_GIVE_LILIAN_NUM = 67,
  ET_GUILD_PRAY_NUM = 68
};
bool GAME_EVENT_TYPE_IsValid(int value);
const GAME_EVENT_TYPE GAME_EVENT_TYPE_MIN = ET_FINISH_COPYMAP;
const GAME_EVENT_TYPE GAME_EVENT_TYPE_MAX = ET_GUILD_PRAY_NUM;
const int GAME_EVENT_TYPE_ARRAYSIZE = GAME_EVENT_TYPE_MAX + 1;

const ::google::protobuf::EnumDescriptor* GAME_EVENT_TYPE_descriptor();
inline const ::std::string& GAME_EVENT_TYPE_Name(GAME_EVENT_TYPE value) {
  return ::google::protobuf::internal::NameOfEnum(
    GAME_EVENT_TYPE_descriptor(), value);
}
inline bool GAME_EVENT_TYPE_Parse(
    const ::std::string& name, GAME_EVENT_TYPE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GAME_EVENT_TYPE>(
    GAME_EVENT_TYPE_descriptor(), name, value);
}
enum TASK_STATUS {
  TS_INVALID = 0,
  TS_INCOMPLETE = 1,
  TS_COMPLETE = 2,
  TS_FAILED = 3,
  TS_REWARD = 4
};
bool TASK_STATUS_IsValid(int value);
const TASK_STATUS TASK_STATUS_MIN = TS_INVALID;
const TASK_STATUS TASK_STATUS_MAX = TS_REWARD;
const int TASK_STATUS_ARRAYSIZE = TASK_STATUS_MAX + 1;

const ::google::protobuf::EnumDescriptor* TASK_STATUS_descriptor();
inline const ::std::string& TASK_STATUS_Name(TASK_STATUS value) {
  return ::google::protobuf::internal::NameOfEnum(
    TASK_STATUS_descriptor(), value);
}
inline bool TASK_STATUS_Parse(
    const ::std::string& name, TASK_STATUS* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TASK_STATUS>(
    TASK_STATUS_descriptor(), name, value);
}
// ===================================================================

class stSynFinishTaskID : public ::google::protobuf::Message {
 public:
  stSynFinishTaskID();
  virtual ~stSynFinishTaskID();

  stSynFinishTaskID(const stSynFinishTaskID& from);

  inline stSynFinishTaskID& operator=(const stSynFinishTaskID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynFinishTaskID& default_instance();

  void Swap(stSynFinishTaskID* other);

  // implements Message ----------------------------------------------

  stSynFinishTaskID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynFinishTaskID& from);
  void MergeFrom(const stSynFinishTaskID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynFinishTaskID_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynFinishTaskID_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynFinishTaskID_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynFinishTaskID_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynFinishTaskID_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynFinishTaskID_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynFinishTaskID_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynFinishTaskID_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynFinishTaskID_ProtoModID_Parse(name, value);
  }

  typedef stSynFinishTaskID_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynFinishTaskID_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynFinishTaskID_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynFinishTaskID_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynFinishTaskID_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynFinishTaskID_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynFinishTaskID_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynFinishTaskID_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynFinishTaskID_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 finishTaskIDList = 1;
  inline int finishtaskidlist_size() const;
  inline void clear_finishtaskidlist();
  static const int kFinishTaskIDListFieldNumber = 1;
  inline ::google::protobuf::uint32 finishtaskidlist(int index) const;
  inline void set_finishtaskidlist(int index, ::google::protobuf::uint32 value);
  inline void add_finishtaskidlist(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      finishtaskidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_finishtaskidlist();

  // @@protoc_insertion_point(class_scope:TaskProto.stSynFinishTaskID)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > finishtaskidlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stSynFinishTaskID* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyTaskFinish : public ::google::protobuf::Message {
 public:
  stNotifyTaskFinish();
  virtual ~stNotifyTaskFinish();

  stNotifyTaskFinish(const stNotifyTaskFinish& from);

  inline stNotifyTaskFinish& operator=(const stNotifyTaskFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyTaskFinish& default_instance();

  void Swap(stNotifyTaskFinish* other);

  // implements Message ----------------------------------------------

  stNotifyTaskFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyTaskFinish& from);
  void MergeFrom(const stNotifyTaskFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyTaskFinish_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyTaskFinish_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyTaskFinish_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyTaskFinish_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyTaskFinish_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyTaskFinish_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyTaskFinish_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyTaskFinish_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyTaskFinish_ProtoModID_Parse(name, value);
  }

  typedef stNotifyTaskFinish_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyTaskFinish_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyTaskFinish_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyTaskFinish_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyTaskFinish_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyTaskFinish_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyTaskFinish_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyTaskFinish_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyTaskFinish_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stNotifyTaskFinish)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stNotifyTaskFinish* default_instance_;
};
// -------------------------------------------------------------------

class stTaskCounter : public ::google::protobuf::Message {
 public:
  stTaskCounter();
  virtual ~stTaskCounter();

  stTaskCounter(const stTaskCounter& from);

  inline stTaskCounter& operator=(const stTaskCounter& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTaskCounter& default_instance();

  void Swap(stTaskCounter* other);

  // implements Message ----------------------------------------------

  stTaskCounter* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTaskCounter& from);
  void MergeFrom(const stTaskCounter& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .TaskProto.GAME_EVENT_TYPE eventType = 1;
  inline bool has_eventtype() const;
  inline void clear_eventtype();
  static const int kEventTypeFieldNumber = 1;
  inline ::TaskProto::GAME_EVENT_TYPE eventtype() const;
  inline void set_eventtype(::TaskProto::GAME_EVENT_TYPE value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::uint32 value() const;
  inline void set_value(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stTaskCounter)
 private:
  inline void set_has_eventtype();
  inline void clear_has_eventtype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int eventtype_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stTaskCounter* default_instance_;
};
// -------------------------------------------------------------------

class stSynTaskInfo : public ::google::protobuf::Message {
 public:
  stSynTaskInfo();
  virtual ~stSynTaskInfo();

  stSynTaskInfo(const stSynTaskInfo& from);

  inline stSynTaskInfo& operator=(const stSynTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynTaskInfo& default_instance();

  void Swap(stSynTaskInfo* other);

  // implements Message ----------------------------------------------

  stSynTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynTaskInfo& from);
  void MergeFrom(const stSynTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint32 ts = 2;
  inline bool has_ts() const;
  inline void clear_ts();
  static const int kTsFieldNumber = 2;
  inline ::google::protobuf::uint32 ts() const;
  inline void set_ts(::google::protobuf::uint32 value);

  // repeated .TaskProto.stTaskCounter counter = 3;
  inline int counter_size() const;
  inline void clear_counter();
  static const int kCounterFieldNumber = 3;
  inline const ::TaskProto::stTaskCounter& counter(int index) const;
  inline ::TaskProto::stTaskCounter* mutable_counter(int index);
  inline ::TaskProto::stTaskCounter* add_counter();
  inline const ::google::protobuf::RepeatedPtrField< ::TaskProto::stTaskCounter >&
      counter() const;
  inline ::google::protobuf::RepeatedPtrField< ::TaskProto::stTaskCounter >*
      mutable_counter();

  // optional uint32 subTs = 4;
  inline bool has_subts() const;
  inline void clear_subts();
  static const int kSubTsFieldNumber = 4;
  inline ::google::protobuf::uint32 subts() const;
  inline void set_subts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stSynTaskInfo)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_ts();
  inline void clear_has_ts();
  inline void set_has_subts();
  inline void clear_has_subts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 ts_;
  ::google::protobuf::RepeatedPtrField< ::TaskProto::stTaskCounter > counter_;
  ::google::protobuf::uint32 subts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stSynTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynAllAcceptTask : public ::google::protobuf::Message {
 public:
  stSynAllAcceptTask();
  virtual ~stSynAllAcceptTask();

  stSynAllAcceptTask(const stSynAllAcceptTask& from);

  inline stSynAllAcceptTask& operator=(const stSynAllAcceptTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynAllAcceptTask& default_instance();

  void Swap(stSynAllAcceptTask* other);

  // implements Message ----------------------------------------------

  stSynAllAcceptTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynAllAcceptTask& from);
  void MergeFrom(const stSynAllAcceptTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynAllAcceptTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynAllAcceptTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynAllAcceptTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynAllAcceptTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynAllAcceptTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynAllAcceptTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynAllAcceptTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynAllAcceptTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynAllAcceptTask_ProtoModID_Parse(name, value);
  }

  typedef stSynAllAcceptTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynAllAcceptTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynAllAcceptTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynAllAcceptTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynAllAcceptTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynAllAcceptTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynAllAcceptTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynAllAcceptTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynAllAcceptTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .TaskProto.stSynTaskInfo taskInfoList = 1;
  inline int taskinfolist_size() const;
  inline void clear_taskinfolist();
  static const int kTaskInfoListFieldNumber = 1;
  inline const ::TaskProto::stSynTaskInfo& taskinfolist(int index) const;
  inline ::TaskProto::stSynTaskInfo* mutable_taskinfolist(int index);
  inline ::TaskProto::stSynTaskInfo* add_taskinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >&
      taskinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >*
      mutable_taskinfolist();

  // @@protoc_insertion_point(class_scope:TaskProto.stSynAllAcceptTask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo > taskinfolist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stSynAllAcceptTask* default_instance_;
};
// -------------------------------------------------------------------

class stReqAcceptTask : public ::google::protobuf::Message {
 public:
  stReqAcceptTask();
  virtual ~stReqAcceptTask();

  stReqAcceptTask(const stReqAcceptTask& from);

  inline stReqAcceptTask& operator=(const stReqAcceptTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAcceptTask& default_instance();

  void Swap(stReqAcceptTask* other);

  // implements Message ----------------------------------------------

  stReqAcceptTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAcceptTask& from);
  void MergeFrom(const stReqAcceptTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAcceptTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAcceptTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAcceptTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAcceptTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAcceptTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAcceptTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAcceptTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAcceptTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAcceptTask_ProtoModID_Parse(name, value);
  }

  typedef stReqAcceptTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAcceptTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAcceptTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAcceptTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAcceptTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAcceptTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAcceptTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAcceptTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAcceptTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stReqAcceptTask)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stReqAcceptTask* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyAddTask : public ::google::protobuf::Message {
 public:
  stNotifyAddTask();
  virtual ~stNotifyAddTask();

  stNotifyAddTask(const stNotifyAddTask& from);

  inline stNotifyAddTask& operator=(const stNotifyAddTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyAddTask& default_instance();

  void Swap(stNotifyAddTask* other);

  // implements Message ----------------------------------------------

  stNotifyAddTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyAddTask& from);
  void MergeFrom(const stNotifyAddTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyAddTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyAddTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyAddTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyAddTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyAddTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyAddTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyAddTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyAddTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyAddTask_ProtoModID_Parse(name, value);
  }

  typedef stNotifyAddTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyAddTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyAddTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyAddTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyAddTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyAddTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyAddTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyAddTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyAddTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TaskProto.stSynTaskInfo taskInfo = 1;
  inline bool has_taskinfo() const;
  inline void clear_taskinfo();
  static const int kTaskInfoFieldNumber = 1;
  inline const ::TaskProto::stSynTaskInfo& taskinfo() const;
  inline ::TaskProto::stSynTaskInfo* mutable_taskinfo();
  inline ::TaskProto::stSynTaskInfo* release_taskinfo();
  inline void set_allocated_taskinfo(::TaskProto::stSynTaskInfo* taskinfo);

  // @@protoc_insertion_point(class_scope:TaskProto.stNotifyAddTask)
 private:
  inline void set_has_taskinfo();
  inline void clear_has_taskinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TaskProto::stSynTaskInfo* taskinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stNotifyAddTask* default_instance_;
};
// -------------------------------------------------------------------

class stAcceptTaskError : public ::google::protobuf::Message {
 public:
  stAcceptTaskError();
  virtual ~stAcceptTaskError();

  stAcceptTaskError(const stAcceptTaskError& from);

  inline stAcceptTaskError& operator=(const stAcceptTaskError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAcceptTaskError& default_instance();

  void Swap(stAcceptTaskError* other);

  // implements Message ----------------------------------------------

  stAcceptTaskError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAcceptTaskError& from);
  void MergeFrom(const stAcceptTaskError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAcceptTaskError_eReason eReason;
  static const eReason eCon_Not_Enough = stAcceptTaskError_eReason_eCon_Not_Enough;
  static inline bool eReason_IsValid(int value) {
    return stAcceptTaskError_eReason_IsValid(value);
  }
  static const eReason eReason_MIN =
    stAcceptTaskError_eReason_eReason_MIN;
  static const eReason eReason_MAX =
    stAcceptTaskError_eReason_eReason_MAX;
  static const int eReason_ARRAYSIZE =
    stAcceptTaskError_eReason_eReason_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eReason_descriptor() {
    return stAcceptTaskError_eReason_descriptor();
  }
  static inline const ::std::string& eReason_Name(eReason value) {
    return stAcceptTaskError_eReason_Name(value);
  }
  static inline bool eReason_Parse(const ::std::string& name,
      eReason* value) {
    return stAcceptTaskError_eReason_Parse(name, value);
  }

  typedef stAcceptTaskError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAcceptTaskError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAcceptTaskError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAcceptTaskError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAcceptTaskError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAcceptTaskError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAcceptTaskError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAcceptTaskError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAcceptTaskError_ProtoModID_Parse(name, value);
  }

  typedef stAcceptTaskError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAcceptTaskError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAcceptTaskError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAcceptTaskError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAcceptTaskError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAcceptTaskError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAcceptTaskError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAcceptTaskError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAcceptTaskError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TaskProto.stAcceptTaskError.eReason reason = 1;
  inline bool has_reason() const;
  inline void clear_reason();
  static const int kReasonFieldNumber = 1;
  inline ::TaskProto::stAcceptTaskError_eReason reason() const;
  inline void set_reason(::TaskProto::stAcceptTaskError_eReason value);

  // @@protoc_insertion_point(class_scope:TaskProto.stAcceptTaskError)
 private:
  inline void set_has_reason();
  inline void clear_has_reason();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int reason_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stAcceptTaskError* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshTaskInfo : public ::google::protobuf::Message {
 public:
  stRefreshTaskInfo();
  virtual ~stRefreshTaskInfo();

  stRefreshTaskInfo(const stRefreshTaskInfo& from);

  inline stRefreshTaskInfo& operator=(const stRefreshTaskInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshTaskInfo& default_instance();

  void Swap(stRefreshTaskInfo* other);

  // implements Message ----------------------------------------------

  stRefreshTaskInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshTaskInfo& from);
  void MergeFrom(const stRefreshTaskInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshTaskInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshTaskInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshTaskInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshTaskInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshTaskInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshTaskInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshTaskInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshTaskInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshTaskInfo_ProtoModID_Parse(name, value);
  }

  typedef stRefreshTaskInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshTaskInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshTaskInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshTaskInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshTaskInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshTaskInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshTaskInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshTaskInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshTaskInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TaskProto.stSynTaskInfo taskInfo = 1;
  inline bool has_taskinfo() const;
  inline void clear_taskinfo();
  static const int kTaskInfoFieldNumber = 1;
  inline const ::TaskProto::stSynTaskInfo& taskinfo() const;
  inline ::TaskProto::stSynTaskInfo* mutable_taskinfo();
  inline ::TaskProto::stSynTaskInfo* release_taskinfo();
  inline void set_allocated_taskinfo(::TaskProto::stSynTaskInfo* taskinfo);

  // @@protoc_insertion_point(class_scope:TaskProto.stRefreshTaskInfo)
 private:
  inline void set_has_taskinfo();
  inline void clear_has_taskinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::TaskProto::stSynTaskInfo* taskinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stRefreshTaskInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqCommitTask : public ::google::protobuf::Message {
 public:
  stReqCommitTask();
  virtual ~stReqCommitTask();

  stReqCommitTask(const stReqCommitTask& from);

  inline stReqCommitTask& operator=(const stReqCommitTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCommitTask& default_instance();

  void Swap(stReqCommitTask* other);

  // implements Message ----------------------------------------------

  stReqCommitTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCommitTask& from);
  void MergeFrom(const stReqCommitTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCommitTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCommitTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCommitTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCommitTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCommitTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCommitTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCommitTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCommitTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCommitTask_ProtoModID_Parse(name, value);
  }

  typedef stReqCommitTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCommitTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCommitTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCommitTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCommitTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCommitTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCommitTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCommitTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCommitTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stReqCommitTask)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stReqCommitTask* default_instance_;
};
// -------------------------------------------------------------------

class stCommitTaskResult : public ::google::protobuf::Message {
 public:
  stCommitTaskResult();
  virtual ~stCommitTaskResult();

  stCommitTaskResult(const stCommitTaskResult& from);

  inline stCommitTaskResult& operator=(const stCommitTaskResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCommitTaskResult& default_instance();

  void Swap(stCommitTaskResult* other);

  // implements Message ----------------------------------------------

  stCommitTaskResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCommitTaskResult& from);
  void MergeFrom(const stCommitTaskResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCommitTaskResult_eResult eResult;
  static const eResult eSUCCESS = stCommitTaskResult_eResult_eSUCCESS;
  static const eResult eCON_NOT_ENOUGH = stCommitTaskResult_eResult_eCON_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stCommitTaskResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCommitTaskResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCommitTaskResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCommitTaskResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCommitTaskResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCommitTaskResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCommitTaskResult_eResult_Parse(name, value);
  }

  typedef stCommitTaskResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCommitTaskResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCommitTaskResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCommitTaskResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCommitTaskResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCommitTaskResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCommitTaskResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCommitTaskResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCommitTaskResult_ProtoModID_Parse(name, value);
  }

  typedef stCommitTaskResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCommitTaskResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCommitTaskResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCommitTaskResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCommitTaskResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCommitTaskResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCommitTaskResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCommitTaskResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCommitTaskResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TaskProto.stCommitTaskResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::TaskProto::stCommitTaskResult_eResult result() const;
  inline void set_result(::TaskProto::stCommitTaskResult_eResult value);

  // optional uint32 taskID = 2;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 2;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stCommitTaskResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 taskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stCommitTaskResult* default_instance_;
};
// -------------------------------------------------------------------

class stChgTaskSubStatus : public ::google::protobuf::Message {
 public:
  stChgTaskSubStatus();
  virtual ~stChgTaskSubStatus();

  stChgTaskSubStatus(const stChgTaskSubStatus& from);

  inline stChgTaskSubStatus& operator=(const stChgTaskSubStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChgTaskSubStatus& default_instance();

  void Swap(stChgTaskSubStatus* other);

  // implements Message ----------------------------------------------

  stChgTaskSubStatus* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChgTaskSubStatus& from);
  void MergeFrom(const stChgTaskSubStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChgTaskSubStatus_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChgTaskSubStatus_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChgTaskSubStatus_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChgTaskSubStatus_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChgTaskSubStatus_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChgTaskSubStatus_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChgTaskSubStatus_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChgTaskSubStatus_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChgTaskSubStatus_ProtoModID_Parse(name, value);
  }

  typedef stChgTaskSubStatus_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChgTaskSubStatus_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChgTaskSubStatus_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChgTaskSubStatus_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChgTaskSubStatus_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChgTaskSubStatus_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChgTaskSubStatus_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChgTaskSubStatus_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChgTaskSubStatus_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // optional uint32 subTs = 2;
  inline bool has_subts() const;
  inline void clear_subts();
  static const int kSubTsFieldNumber = 2;
  inline ::google::protobuf::uint32 subts() const;
  inline void set_subts(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stChgTaskSubStatus)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();
  inline void set_has_subts();
  inline void clear_has_subts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;
  ::google::protobuf::uint32 subts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stChgTaskSubStatus* default_instance_;
};
// -------------------------------------------------------------------

class stSaveCurrentTask : public ::google::protobuf::Message {
 public:
  stSaveCurrentTask();
  virtual ~stSaveCurrentTask();

  stSaveCurrentTask(const stSaveCurrentTask& from);

  inline stSaveCurrentTask& operator=(const stSaveCurrentTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSaveCurrentTask& default_instance();

  void Swap(stSaveCurrentTask* other);

  // implements Message ----------------------------------------------

  stSaveCurrentTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSaveCurrentTask& from);
  void MergeFrom(const stSaveCurrentTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSaveCurrentTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSaveCurrentTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSaveCurrentTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSaveCurrentTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSaveCurrentTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSaveCurrentTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSaveCurrentTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSaveCurrentTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSaveCurrentTask_ProtoModID_Parse(name, value);
  }

  typedef stSaveCurrentTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSaveCurrentTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSaveCurrentTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSaveCurrentTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSaveCurrentTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSaveCurrentTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSaveCurrentTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSaveCurrentTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSaveCurrentTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 curTaskID = 1;
  inline bool has_curtaskid() const;
  inline void clear_curtaskid();
  static const int kCurTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 curtaskid() const;
  inline void set_curtaskid(::google::protobuf::uint32 value);

  // optional uint32 curStage = 2;
  inline bool has_curstage() const;
  inline void clear_curstage();
  static const int kCurStageFieldNumber = 2;
  inline ::google::protobuf::uint32 curstage() const;
  inline void set_curstage(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stSaveCurrentTask)
 private:
  inline void set_has_curtaskid();
  inline void clear_has_curtaskid();
  inline void set_has_curstage();
  inline void clear_has_curstage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 curtaskid_;
  ::google::protobuf::uint32 curstage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stSaveCurrentTask* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyCurrentTask : public ::google::protobuf::Message {
 public:
  stNotifyCurrentTask();
  virtual ~stNotifyCurrentTask();

  stNotifyCurrentTask(const stNotifyCurrentTask& from);

  inline stNotifyCurrentTask& operator=(const stNotifyCurrentTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyCurrentTask& default_instance();

  void Swap(stNotifyCurrentTask* other);

  // implements Message ----------------------------------------------

  stNotifyCurrentTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyCurrentTask& from);
  void MergeFrom(const stNotifyCurrentTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyCurrentTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyCurrentTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyCurrentTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyCurrentTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyCurrentTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyCurrentTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyCurrentTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyCurrentTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyCurrentTask_ProtoModID_Parse(name, value);
  }

  typedef stNotifyCurrentTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyCurrentTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyCurrentTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyCurrentTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyCurrentTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyCurrentTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyCurrentTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyCurrentTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyCurrentTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 curTaskID = 1;
  inline bool has_curtaskid() const;
  inline void clear_curtaskid();
  static const int kCurTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 curtaskid() const;
  inline void set_curtaskid(::google::protobuf::uint32 value);

  // optional uint32 curState = 2;
  inline bool has_curstate() const;
  inline void clear_curstate();
  static const int kCurStateFieldNumber = 2;
  inline ::google::protobuf::uint32 curstate() const;
  inline void set_curstate(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stNotifyCurrentTask)
 private:
  inline void set_has_curtaskid();
  inline void clear_has_curtaskid();
  inline void set_has_curstate();
  inline void clear_has_curstate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 curtaskid_;
  ::google::protobuf::uint32 curstate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stNotifyCurrentTask* default_instance_;
};
// -------------------------------------------------------------------

class stReqBatchAcceptTask : public ::google::protobuf::Message {
 public:
  stReqBatchAcceptTask();
  virtual ~stReqBatchAcceptTask();

  stReqBatchAcceptTask(const stReqBatchAcceptTask& from);

  inline stReqBatchAcceptTask& operator=(const stReqBatchAcceptTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBatchAcceptTask& default_instance();

  void Swap(stReqBatchAcceptTask* other);

  // implements Message ----------------------------------------------

  stReqBatchAcceptTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBatchAcceptTask& from);
  void MergeFrom(const stReqBatchAcceptTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBatchAcceptTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBatchAcceptTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBatchAcceptTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBatchAcceptTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBatchAcceptTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBatchAcceptTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBatchAcceptTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBatchAcceptTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBatchAcceptTask_ProtoModID_Parse(name, value);
  }

  typedef stReqBatchAcceptTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBatchAcceptTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBatchAcceptTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBatchAcceptTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBatchAcceptTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBatchAcceptTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBatchAcceptTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBatchAcceptTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBatchAcceptTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 taskIDs = 1;
  inline int taskids_size() const;
  inline void clear_taskids();
  static const int kTaskIDsFieldNumber = 1;
  inline ::google::protobuf::uint32 taskids(int index) const;
  inline void set_taskids(int index, ::google::protobuf::uint32 value);
  inline void add_taskids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      taskids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_taskids();

  // @@protoc_insertion_point(class_scope:TaskProto.stReqBatchAcceptTask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > taskids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stReqBatchAcceptTask* default_instance_;
};
// -------------------------------------------------------------------

class stRetBatchAccpetTask : public ::google::protobuf::Message {
 public:
  stRetBatchAccpetTask();
  virtual ~stRetBatchAccpetTask();

  stRetBatchAccpetTask(const stRetBatchAccpetTask& from);

  inline stRetBatchAccpetTask& operator=(const stRetBatchAccpetTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetBatchAccpetTask& default_instance();

  void Swap(stRetBatchAccpetTask* other);

  // implements Message ----------------------------------------------

  stRetBatchAccpetTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetBatchAccpetTask& from);
  void MergeFrom(const stRetBatchAccpetTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetBatchAccpetTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetBatchAccpetTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetBatchAccpetTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetBatchAccpetTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetBatchAccpetTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetBatchAccpetTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetBatchAccpetTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetBatchAccpetTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetBatchAccpetTask_ProtoModID_Parse(name, value);
  }

  typedef stRetBatchAccpetTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetBatchAccpetTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetBatchAccpetTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetBatchAccpetTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetBatchAccpetTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetBatchAccpetTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetBatchAccpetTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetBatchAccpetTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetBatchAccpetTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .TaskProto.stSynTaskInfo taskInfos = 1;
  inline int taskinfos_size() const;
  inline void clear_taskinfos();
  static const int kTaskInfosFieldNumber = 1;
  inline const ::TaskProto::stSynTaskInfo& taskinfos(int index) const;
  inline ::TaskProto::stSynTaskInfo* mutable_taskinfos(int index);
  inline ::TaskProto::stSynTaskInfo* add_taskinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >&
      taskinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >*
      mutable_taskinfos();

  // @@protoc_insertion_point(class_scope:TaskProto.stRetBatchAccpetTask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo > taskinfos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stRetBatchAccpetTask* default_instance_;
};
// -------------------------------------------------------------------

class stSynDailyTaskScore : public ::google::protobuf::Message {
 public:
  stSynDailyTaskScore();
  virtual ~stSynDailyTaskScore();

  stSynDailyTaskScore(const stSynDailyTaskScore& from);

  inline stSynDailyTaskScore& operator=(const stSynDailyTaskScore& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynDailyTaskScore& default_instance();

  void Swap(stSynDailyTaskScore* other);

  // implements Message ----------------------------------------------

  stSynDailyTaskScore* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynDailyTaskScore& from);
  void MergeFrom(const stSynDailyTaskScore& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynDailyTaskScore_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynDailyTaskScore_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynDailyTaskScore_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynDailyTaskScore_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynDailyTaskScore_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynDailyTaskScore_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynDailyTaskScore_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynDailyTaskScore_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynDailyTaskScore_ProtoModID_Parse(name, value);
  }

  typedef stSynDailyTaskScore_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynDailyTaskScore_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynDailyTaskScore_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynDailyTaskScore_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynDailyTaskScore_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynDailyTaskScore_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynDailyTaskScore_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynDailyTaskScore_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynDailyTaskScore_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stSynDailyTaskScore)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stSynDailyTaskScore* default_instance_;
};
// -------------------------------------------------------------------

class stDailyTaskScoreInfo : public ::google::protobuf::Message {
 public:
  stDailyTaskScoreInfo();
  virtual ~stDailyTaskScoreInfo();

  stDailyTaskScoreInfo(const stDailyTaskScoreInfo& from);

  inline stDailyTaskScoreInfo& operator=(const stDailyTaskScoreInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDailyTaskScoreInfo& default_instance();

  void Swap(stDailyTaskScoreInfo* other);

  // implements Message ----------------------------------------------

  stDailyTaskScoreInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDailyTaskScoreInfo& from);
  void MergeFrom(const stDailyTaskScoreInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDailyTaskScoreInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDailyTaskScoreInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDailyTaskScoreInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDailyTaskScoreInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDailyTaskScoreInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDailyTaskScoreInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDailyTaskScoreInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDailyTaskScoreInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDailyTaskScoreInfo_ProtoModID_Parse(name, value);
  }

  typedef stDailyTaskScoreInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDailyTaskScoreInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDailyTaskScoreInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDailyTaskScoreInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDailyTaskScoreInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDailyTaskScoreInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDailyTaskScoreInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDailyTaskScoreInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDailyTaskScoreInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 dailyTaskScore = 1;
  inline bool has_dailytaskscore() const;
  inline void clear_dailytaskscore();
  static const int kDailyTaskScoreFieldNumber = 1;
  inline ::google::protobuf::uint32 dailytaskscore() const;
  inline void set_dailytaskscore(::google::protobuf::uint32 value);

  // repeated uint32 rewardIDs = 2;
  inline int rewardids_size() const;
  inline void clear_rewardids();
  static const int kRewardIDsFieldNumber = 2;
  inline ::google::protobuf::uint32 rewardids(int index) const;
  inline void set_rewardids(int index, ::google::protobuf::uint32 value);
  inline void add_rewardids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      rewardids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_rewardids();

  // @@protoc_insertion_point(class_scope:TaskProto.stDailyTaskScoreInfo)
 private:
  inline void set_has_dailytaskscore();
  inline void clear_has_dailytaskscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > rewardids_;
  ::google::protobuf::uint32 dailytaskscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stDailyTaskScoreInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqDailyTaskScoreReward : public ::google::protobuf::Message {
 public:
  stReqDailyTaskScoreReward();
  virtual ~stReqDailyTaskScoreReward();

  stReqDailyTaskScoreReward(const stReqDailyTaskScoreReward& from);

  inline stReqDailyTaskScoreReward& operator=(const stReqDailyTaskScoreReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDailyTaskScoreReward& default_instance();

  void Swap(stReqDailyTaskScoreReward* other);

  // implements Message ----------------------------------------------

  stReqDailyTaskScoreReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDailyTaskScoreReward& from);
  void MergeFrom(const stReqDailyTaskScoreReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDailyTaskScoreReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDailyTaskScoreReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDailyTaskScoreReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDailyTaskScoreReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDailyTaskScoreReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDailyTaskScoreReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDailyTaskScoreReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDailyTaskScoreReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDailyTaskScoreReward_ProtoModID_Parse(name, value);
  }

  typedef stReqDailyTaskScoreReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDailyTaskScoreReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDailyTaskScoreReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDailyTaskScoreReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDailyTaskScoreReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDailyTaskScoreReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDailyTaskScoreReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDailyTaskScoreReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDailyTaskScoreReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stReqDailyTaskScoreReward)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stReqDailyTaskScoreReward* default_instance_;
};
// -------------------------------------------------------------------

class stDailyTaskScoreRewardResult : public ::google::protobuf::Message {
 public:
  stDailyTaskScoreRewardResult();
  virtual ~stDailyTaskScoreRewardResult();

  stDailyTaskScoreRewardResult(const stDailyTaskScoreRewardResult& from);

  inline stDailyTaskScoreRewardResult& operator=(const stDailyTaskScoreRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDailyTaskScoreRewardResult& default_instance();

  void Swap(stDailyTaskScoreRewardResult* other);

  // implements Message ----------------------------------------------

  stDailyTaskScoreRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDailyTaskScoreRewardResult& from);
  void MergeFrom(const stDailyTaskScoreRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDailyTaskScoreRewardResult_eResult eResult;
  static const eResult eSuccess = stDailyTaskScoreRewardResult_eResult_eSuccess;
  static const eResult eScore_Not_Enough = stDailyTaskScoreRewardResult_eResult_eScore_Not_Enough;
  static const eResult eHas_Got_Reward = stDailyTaskScoreRewardResult_eResult_eHas_Got_Reward;
  static const eResult eInner_Error = stDailyTaskScoreRewardResult_eResult_eInner_Error;
  static const eResult eBag_Full = stDailyTaskScoreRewardResult_eResult_eBag_Full;
  static inline bool eResult_IsValid(int value) {
    return stDailyTaskScoreRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stDailyTaskScoreRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stDailyTaskScoreRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stDailyTaskScoreRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stDailyTaskScoreRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stDailyTaskScoreRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stDailyTaskScoreRewardResult_eResult_Parse(name, value);
  }

  typedef stDailyTaskScoreRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDailyTaskScoreRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDailyTaskScoreRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDailyTaskScoreRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDailyTaskScoreRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDailyTaskScoreRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDailyTaskScoreRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDailyTaskScoreRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDailyTaskScoreRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stDailyTaskScoreRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDailyTaskScoreRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDailyTaskScoreRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDailyTaskScoreRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDailyTaskScoreRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDailyTaskScoreRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDailyTaskScoreRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDailyTaskScoreRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDailyTaskScoreRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .TaskProto.stDailyTaskScoreRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::TaskProto::stDailyTaskScoreRewardResult_eResult result() const;
  inline void set_result(::TaskProto::stDailyTaskScoreRewardResult_eResult value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stDailyTaskScoreRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stDailyTaskScoreRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stCancelTask : public ::google::protobuf::Message {
 public:
  stCancelTask();
  virtual ~stCancelTask();

  stCancelTask(const stCancelTask& from);

  inline stCancelTask& operator=(const stCancelTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCancelTask& default_instance();

  void Swap(stCancelTask* other);

  // implements Message ----------------------------------------------

  stCancelTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCancelTask& from);
  void MergeFrom(const stCancelTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCancelTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCancelTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCancelTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCancelTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCancelTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCancelTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCancelTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCancelTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCancelTask_ProtoModID_Parse(name, value);
  }

  typedef stCancelTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCancelTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCancelTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCancelTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCancelTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCancelTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCancelTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCancelTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCancelTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 taskID = 1;
  inline bool has_taskid() const;
  inline void clear_taskid();
  static const int kTaskIDFieldNumber = 1;
  inline ::google::protobuf::uint32 taskid() const;
  inline void set_taskid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stCancelTask)
 private:
  inline void set_has_taskid();
  inline void clear_has_taskid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 taskid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stCancelTask* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenTaskWindow : public ::google::protobuf::Message {
 public:
  stReqOpenTaskWindow();
  virtual ~stReqOpenTaskWindow();

  stReqOpenTaskWindow(const stReqOpenTaskWindow& from);

  inline stReqOpenTaskWindow& operator=(const stReqOpenTaskWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenTaskWindow& default_instance();

  void Swap(stReqOpenTaskWindow* other);

  // implements Message ----------------------------------------------

  stReqOpenTaskWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenTaskWindow& from);
  void MergeFrom(const stReqOpenTaskWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenTaskWindow_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenTaskWindow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenTaskWindow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenTaskWindow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenTaskWindow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenTaskWindow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenTaskWindow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenTaskWindow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenTaskWindow_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenTaskWindow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenTaskWindow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenTaskWindow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenTaskWindow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenTaskWindow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenTaskWindow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenTaskWindow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenTaskWindow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenTaskWindow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TaskProto.stReqOpenTaskWindow)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenTaskWindow* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshAllDailyTask : public ::google::protobuf::Message {
 public:
  stRefreshAllDailyTask();
  virtual ~stRefreshAllDailyTask();

  stRefreshAllDailyTask(const stRefreshAllDailyTask& from);

  inline stRefreshAllDailyTask& operator=(const stRefreshAllDailyTask& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshAllDailyTask& default_instance();

  void Swap(stRefreshAllDailyTask* other);

  // implements Message ----------------------------------------------

  stRefreshAllDailyTask* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshAllDailyTask& from);
  void MergeFrom(const stRefreshAllDailyTask& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshAllDailyTask_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshAllDailyTask_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshAllDailyTask_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshAllDailyTask_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshAllDailyTask_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshAllDailyTask_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshAllDailyTask_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshAllDailyTask_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshAllDailyTask_ProtoModID_Parse(name, value);
  }

  typedef stRefreshAllDailyTask_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshAllDailyTask_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshAllDailyTask_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshAllDailyTask_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshAllDailyTask_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshAllDailyTask_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshAllDailyTask_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshAllDailyTask_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshAllDailyTask_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .TaskProto.stSynTaskInfo tasks = 1;
  inline int tasks_size() const;
  inline void clear_tasks();
  static const int kTasksFieldNumber = 1;
  inline const ::TaskProto::stSynTaskInfo& tasks(int index) const;
  inline ::TaskProto::stSynTaskInfo* mutable_tasks(int index);
  inline ::TaskProto::stSynTaskInfo* add_tasks();
  inline const ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >&
      tasks() const;
  inline ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >*
      mutable_tasks();

  // @@protoc_insertion_point(class_scope:TaskProto.stRefreshAllDailyTask)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo > tasks_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Task_2eproto();
  friend void protobuf_AssignDesc_Task_2eproto();
  friend void protobuf_ShutdownFile_Task_2eproto();

  void InitAsDefaultInstance();
  static stRefreshAllDailyTask* default_instance_;
};
// ===================================================================


// ===================================================================

// stSynFinishTaskID

// repeated uint32 finishTaskIDList = 1;
inline int stSynFinishTaskID::finishtaskidlist_size() const {
  return finishtaskidlist_.size();
}
inline void stSynFinishTaskID::clear_finishtaskidlist() {
  finishtaskidlist_.Clear();
}
inline ::google::protobuf::uint32 stSynFinishTaskID::finishtaskidlist(int index) const {
  return finishtaskidlist_.Get(index);
}
inline void stSynFinishTaskID::set_finishtaskidlist(int index, ::google::protobuf::uint32 value) {
  finishtaskidlist_.Set(index, value);
}
inline void stSynFinishTaskID::add_finishtaskidlist(::google::protobuf::uint32 value) {
  finishtaskidlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stSynFinishTaskID::finishtaskidlist() const {
  return finishtaskidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stSynFinishTaskID::mutable_finishtaskidlist() {
  return &finishtaskidlist_;
}

// -------------------------------------------------------------------

// stNotifyTaskFinish

// optional uint32 taskID = 1;
inline bool stNotifyTaskFinish::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyTaskFinish::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyTaskFinish::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyTaskFinish::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stNotifyTaskFinish::taskid() const {
  return taskid_;
}
inline void stNotifyTaskFinish::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// -------------------------------------------------------------------

// stTaskCounter

// optional .TaskProto.GAME_EVENT_TYPE eventType = 1;
inline bool stTaskCounter::has_eventtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTaskCounter::set_has_eventtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTaskCounter::clear_has_eventtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTaskCounter::clear_eventtype() {
  eventtype_ = 1;
  clear_has_eventtype();
}
inline ::TaskProto::GAME_EVENT_TYPE stTaskCounter::eventtype() const {
  return static_cast< ::TaskProto::GAME_EVENT_TYPE >(eventtype_);
}
inline void stTaskCounter::set_eventtype(::TaskProto::GAME_EVENT_TYPE value) {
  assert(::TaskProto::GAME_EVENT_TYPE_IsValid(value));
  set_has_eventtype();
  eventtype_ = value;
}

// optional uint32 id = 2;
inline bool stTaskCounter::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTaskCounter::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTaskCounter::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTaskCounter::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stTaskCounter::id() const {
  return id_;
}
inline void stTaskCounter::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 value = 3;
inline bool stTaskCounter::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stTaskCounter::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stTaskCounter::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stTaskCounter::clear_value() {
  value_ = 0u;
  clear_has_value();
}
inline ::google::protobuf::uint32 stTaskCounter::value() const {
  return value_;
}
inline void stTaskCounter::set_value(::google::protobuf::uint32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// stSynTaskInfo

// optional uint32 taskID = 1;
inline bool stSynTaskInfo::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynTaskInfo::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynTaskInfo::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynTaskInfo::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stSynTaskInfo::taskid() const {
  return taskid_;
}
inline void stSynTaskInfo::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional uint32 ts = 2;
inline bool stSynTaskInfo::has_ts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynTaskInfo::set_has_ts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynTaskInfo::clear_has_ts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynTaskInfo::clear_ts() {
  ts_ = 0u;
  clear_has_ts();
}
inline ::google::protobuf::uint32 stSynTaskInfo::ts() const {
  return ts_;
}
inline void stSynTaskInfo::set_ts(::google::protobuf::uint32 value) {
  set_has_ts();
  ts_ = value;
}

// repeated .TaskProto.stTaskCounter counter = 3;
inline int stSynTaskInfo::counter_size() const {
  return counter_.size();
}
inline void stSynTaskInfo::clear_counter() {
  counter_.Clear();
}
inline const ::TaskProto::stTaskCounter& stSynTaskInfo::counter(int index) const {
  return counter_.Get(index);
}
inline ::TaskProto::stTaskCounter* stSynTaskInfo::mutable_counter(int index) {
  return counter_.Mutable(index);
}
inline ::TaskProto::stTaskCounter* stSynTaskInfo::add_counter() {
  return counter_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TaskProto::stTaskCounter >&
stSynTaskInfo::counter() const {
  return counter_;
}
inline ::google::protobuf::RepeatedPtrField< ::TaskProto::stTaskCounter >*
stSynTaskInfo::mutable_counter() {
  return &counter_;
}

// optional uint32 subTs = 4;
inline bool stSynTaskInfo::has_subts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynTaskInfo::set_has_subts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynTaskInfo::clear_has_subts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynTaskInfo::clear_subts() {
  subts_ = 0u;
  clear_has_subts();
}
inline ::google::protobuf::uint32 stSynTaskInfo::subts() const {
  return subts_;
}
inline void stSynTaskInfo::set_subts(::google::protobuf::uint32 value) {
  set_has_subts();
  subts_ = value;
}

// -------------------------------------------------------------------

// stSynAllAcceptTask

// repeated .TaskProto.stSynTaskInfo taskInfoList = 1;
inline int stSynAllAcceptTask::taskinfolist_size() const {
  return taskinfolist_.size();
}
inline void stSynAllAcceptTask::clear_taskinfolist() {
  taskinfolist_.Clear();
}
inline const ::TaskProto::stSynTaskInfo& stSynAllAcceptTask::taskinfolist(int index) const {
  return taskinfolist_.Get(index);
}
inline ::TaskProto::stSynTaskInfo* stSynAllAcceptTask::mutable_taskinfolist(int index) {
  return taskinfolist_.Mutable(index);
}
inline ::TaskProto::stSynTaskInfo* stSynAllAcceptTask::add_taskinfolist() {
  return taskinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >&
stSynAllAcceptTask::taskinfolist() const {
  return taskinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >*
stSynAllAcceptTask::mutable_taskinfolist() {
  return &taskinfolist_;
}

// -------------------------------------------------------------------

// stReqAcceptTask

// optional uint32 taskID = 1;
inline bool stReqAcceptTask::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAcceptTask::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAcceptTask::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAcceptTask::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stReqAcceptTask::taskid() const {
  return taskid_;
}
inline void stReqAcceptTask::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// -------------------------------------------------------------------

// stNotifyAddTask

// optional .TaskProto.stSynTaskInfo taskInfo = 1;
inline bool stNotifyAddTask::has_taskinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyAddTask::set_has_taskinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyAddTask::clear_has_taskinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyAddTask::clear_taskinfo() {
  if (taskinfo_ != NULL) taskinfo_->::TaskProto::stSynTaskInfo::Clear();
  clear_has_taskinfo();
}
inline const ::TaskProto::stSynTaskInfo& stNotifyAddTask::taskinfo() const {
  return taskinfo_ != NULL ? *taskinfo_ : *default_instance_->taskinfo_;
}
inline ::TaskProto::stSynTaskInfo* stNotifyAddTask::mutable_taskinfo() {
  set_has_taskinfo();
  if (taskinfo_ == NULL) taskinfo_ = new ::TaskProto::stSynTaskInfo;
  return taskinfo_;
}
inline ::TaskProto::stSynTaskInfo* stNotifyAddTask::release_taskinfo() {
  clear_has_taskinfo();
  ::TaskProto::stSynTaskInfo* temp = taskinfo_;
  taskinfo_ = NULL;
  return temp;
}
inline void stNotifyAddTask::set_allocated_taskinfo(::TaskProto::stSynTaskInfo* taskinfo) {
  delete taskinfo_;
  taskinfo_ = taskinfo;
  if (taskinfo) {
    set_has_taskinfo();
  } else {
    clear_has_taskinfo();
  }
}

// -------------------------------------------------------------------

// stAcceptTaskError

// optional .TaskProto.stAcceptTaskError.eReason reason = 1;
inline bool stAcceptTaskError::has_reason() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAcceptTaskError::set_has_reason() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAcceptTaskError::clear_has_reason() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAcceptTaskError::clear_reason() {
  reason_ = 1;
  clear_has_reason();
}
inline ::TaskProto::stAcceptTaskError_eReason stAcceptTaskError::reason() const {
  return static_cast< ::TaskProto::stAcceptTaskError_eReason >(reason_);
}
inline void stAcceptTaskError::set_reason(::TaskProto::stAcceptTaskError_eReason value) {
  assert(::TaskProto::stAcceptTaskError_eReason_IsValid(value));
  set_has_reason();
  reason_ = value;
}

// -------------------------------------------------------------------

// stRefreshTaskInfo

// optional .TaskProto.stSynTaskInfo taskInfo = 1;
inline bool stRefreshTaskInfo::has_taskinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshTaskInfo::set_has_taskinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshTaskInfo::clear_has_taskinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshTaskInfo::clear_taskinfo() {
  if (taskinfo_ != NULL) taskinfo_->::TaskProto::stSynTaskInfo::Clear();
  clear_has_taskinfo();
}
inline const ::TaskProto::stSynTaskInfo& stRefreshTaskInfo::taskinfo() const {
  return taskinfo_ != NULL ? *taskinfo_ : *default_instance_->taskinfo_;
}
inline ::TaskProto::stSynTaskInfo* stRefreshTaskInfo::mutable_taskinfo() {
  set_has_taskinfo();
  if (taskinfo_ == NULL) taskinfo_ = new ::TaskProto::stSynTaskInfo;
  return taskinfo_;
}
inline ::TaskProto::stSynTaskInfo* stRefreshTaskInfo::release_taskinfo() {
  clear_has_taskinfo();
  ::TaskProto::stSynTaskInfo* temp = taskinfo_;
  taskinfo_ = NULL;
  return temp;
}
inline void stRefreshTaskInfo::set_allocated_taskinfo(::TaskProto::stSynTaskInfo* taskinfo) {
  delete taskinfo_;
  taskinfo_ = taskinfo;
  if (taskinfo) {
    set_has_taskinfo();
  } else {
    clear_has_taskinfo();
  }
}

// -------------------------------------------------------------------

// stReqCommitTask

// optional uint32 taskID = 1;
inline bool stReqCommitTask::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCommitTask::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCommitTask::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCommitTask::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stReqCommitTask::taskid() const {
  return taskid_;
}
inline void stReqCommitTask::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// -------------------------------------------------------------------

// stCommitTaskResult

// optional .TaskProto.stCommitTaskResult.eResult result = 1;
inline bool stCommitTaskResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCommitTaskResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCommitTaskResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCommitTaskResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::TaskProto::stCommitTaskResult_eResult stCommitTaskResult::result() const {
  return static_cast< ::TaskProto::stCommitTaskResult_eResult >(result_);
}
inline void stCommitTaskResult::set_result(::TaskProto::stCommitTaskResult_eResult value) {
  assert(::TaskProto::stCommitTaskResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 taskID = 2;
inline bool stCommitTaskResult::has_taskid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCommitTaskResult::set_has_taskid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCommitTaskResult::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCommitTaskResult::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stCommitTaskResult::taskid() const {
  return taskid_;
}
inline void stCommitTaskResult::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// -------------------------------------------------------------------

// stChgTaskSubStatus

// optional uint32 taskID = 1;
inline bool stChgTaskSubStatus::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChgTaskSubStatus::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChgTaskSubStatus::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChgTaskSubStatus::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stChgTaskSubStatus::taskid() const {
  return taskid_;
}
inline void stChgTaskSubStatus::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// optional uint32 subTs = 2;
inline bool stChgTaskSubStatus::has_subts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stChgTaskSubStatus::set_has_subts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stChgTaskSubStatus::clear_has_subts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stChgTaskSubStatus::clear_subts() {
  subts_ = 0u;
  clear_has_subts();
}
inline ::google::protobuf::uint32 stChgTaskSubStatus::subts() const {
  return subts_;
}
inline void stChgTaskSubStatus::set_subts(::google::protobuf::uint32 value) {
  set_has_subts();
  subts_ = value;
}

// -------------------------------------------------------------------

// stSaveCurrentTask

// optional uint32 curTaskID = 1;
inline bool stSaveCurrentTask::has_curtaskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSaveCurrentTask::set_has_curtaskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSaveCurrentTask::clear_has_curtaskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSaveCurrentTask::clear_curtaskid() {
  curtaskid_ = 0u;
  clear_has_curtaskid();
}
inline ::google::protobuf::uint32 stSaveCurrentTask::curtaskid() const {
  return curtaskid_;
}
inline void stSaveCurrentTask::set_curtaskid(::google::protobuf::uint32 value) {
  set_has_curtaskid();
  curtaskid_ = value;
}

// optional uint32 curStage = 2;
inline bool stSaveCurrentTask::has_curstage() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSaveCurrentTask::set_has_curstage() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSaveCurrentTask::clear_has_curstage() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSaveCurrentTask::clear_curstage() {
  curstage_ = 0u;
  clear_has_curstage();
}
inline ::google::protobuf::uint32 stSaveCurrentTask::curstage() const {
  return curstage_;
}
inline void stSaveCurrentTask::set_curstage(::google::protobuf::uint32 value) {
  set_has_curstage();
  curstage_ = value;
}

// -------------------------------------------------------------------

// stNotifyCurrentTask

// optional uint32 curTaskID = 1;
inline bool stNotifyCurrentTask::has_curtaskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyCurrentTask::set_has_curtaskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyCurrentTask::clear_has_curtaskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyCurrentTask::clear_curtaskid() {
  curtaskid_ = 0u;
  clear_has_curtaskid();
}
inline ::google::protobuf::uint32 stNotifyCurrentTask::curtaskid() const {
  return curtaskid_;
}
inline void stNotifyCurrentTask::set_curtaskid(::google::protobuf::uint32 value) {
  set_has_curtaskid();
  curtaskid_ = value;
}

// optional uint32 curState = 2;
inline bool stNotifyCurrentTask::has_curstate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyCurrentTask::set_has_curstate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyCurrentTask::clear_has_curstate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyCurrentTask::clear_curstate() {
  curstate_ = 0u;
  clear_has_curstate();
}
inline ::google::protobuf::uint32 stNotifyCurrentTask::curstate() const {
  return curstate_;
}
inline void stNotifyCurrentTask::set_curstate(::google::protobuf::uint32 value) {
  set_has_curstate();
  curstate_ = value;
}

// -------------------------------------------------------------------

// stReqBatchAcceptTask

// repeated uint32 taskIDs = 1;
inline int stReqBatchAcceptTask::taskids_size() const {
  return taskids_.size();
}
inline void stReqBatchAcceptTask::clear_taskids() {
  taskids_.Clear();
}
inline ::google::protobuf::uint32 stReqBatchAcceptTask::taskids(int index) const {
  return taskids_.Get(index);
}
inline void stReqBatchAcceptTask::set_taskids(int index, ::google::protobuf::uint32 value) {
  taskids_.Set(index, value);
}
inline void stReqBatchAcceptTask::add_taskids(::google::protobuf::uint32 value) {
  taskids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stReqBatchAcceptTask::taskids() const {
  return taskids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stReqBatchAcceptTask::mutable_taskids() {
  return &taskids_;
}

// -------------------------------------------------------------------

// stRetBatchAccpetTask

// repeated .TaskProto.stSynTaskInfo taskInfos = 1;
inline int stRetBatchAccpetTask::taskinfos_size() const {
  return taskinfos_.size();
}
inline void stRetBatchAccpetTask::clear_taskinfos() {
  taskinfos_.Clear();
}
inline const ::TaskProto::stSynTaskInfo& stRetBatchAccpetTask::taskinfos(int index) const {
  return taskinfos_.Get(index);
}
inline ::TaskProto::stSynTaskInfo* stRetBatchAccpetTask::mutable_taskinfos(int index) {
  return taskinfos_.Mutable(index);
}
inline ::TaskProto::stSynTaskInfo* stRetBatchAccpetTask::add_taskinfos() {
  return taskinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >&
stRetBatchAccpetTask::taskinfos() const {
  return taskinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >*
stRetBatchAccpetTask::mutable_taskinfos() {
  return &taskinfos_;
}

// -------------------------------------------------------------------

// stSynDailyTaskScore

// optional uint32 num = 1;
inline bool stSynDailyTaskScore::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynDailyTaskScore::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynDailyTaskScore::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynDailyTaskScore::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynDailyTaskScore::num() const {
  return num_;
}
inline void stSynDailyTaskScore::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stDailyTaskScoreInfo

// optional uint32 dailyTaskScore = 1;
inline bool stDailyTaskScoreInfo::has_dailytaskscore() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDailyTaskScoreInfo::set_has_dailytaskscore() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDailyTaskScoreInfo::clear_has_dailytaskscore() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDailyTaskScoreInfo::clear_dailytaskscore() {
  dailytaskscore_ = 0u;
  clear_has_dailytaskscore();
}
inline ::google::protobuf::uint32 stDailyTaskScoreInfo::dailytaskscore() const {
  return dailytaskscore_;
}
inline void stDailyTaskScoreInfo::set_dailytaskscore(::google::protobuf::uint32 value) {
  set_has_dailytaskscore();
  dailytaskscore_ = value;
}

// repeated uint32 rewardIDs = 2;
inline int stDailyTaskScoreInfo::rewardids_size() const {
  return rewardids_.size();
}
inline void stDailyTaskScoreInfo::clear_rewardids() {
  rewardids_.Clear();
}
inline ::google::protobuf::uint32 stDailyTaskScoreInfo::rewardids(int index) const {
  return rewardids_.Get(index);
}
inline void stDailyTaskScoreInfo::set_rewardids(int index, ::google::protobuf::uint32 value) {
  rewardids_.Set(index, value);
}
inline void stDailyTaskScoreInfo::add_rewardids(::google::protobuf::uint32 value) {
  rewardids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stDailyTaskScoreInfo::rewardids() const {
  return rewardids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stDailyTaskScoreInfo::mutable_rewardids() {
  return &rewardids_;
}

// -------------------------------------------------------------------

// stReqDailyTaskScoreReward

// optional uint32 id = 1;
inline bool stReqDailyTaskScoreReward::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDailyTaskScoreReward::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDailyTaskScoreReward::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDailyTaskScoreReward::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqDailyTaskScoreReward::id() const {
  return id_;
}
inline void stReqDailyTaskScoreReward::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stDailyTaskScoreRewardResult

// optional .TaskProto.stDailyTaskScoreRewardResult.eResult result = 1;
inline bool stDailyTaskScoreRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDailyTaskScoreRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDailyTaskScoreRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDailyTaskScoreRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::TaskProto::stDailyTaskScoreRewardResult_eResult stDailyTaskScoreRewardResult::result() const {
  return static_cast< ::TaskProto::stDailyTaskScoreRewardResult_eResult >(result_);
}
inline void stDailyTaskScoreRewardResult::set_result(::TaskProto::stDailyTaskScoreRewardResult_eResult value) {
  assert(::TaskProto::stDailyTaskScoreRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 id = 2;
inline bool stDailyTaskScoreRewardResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDailyTaskScoreRewardResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDailyTaskScoreRewardResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDailyTaskScoreRewardResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stDailyTaskScoreRewardResult::id() const {
  return id_;
}
inline void stDailyTaskScoreRewardResult::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stCancelTask

// optional uint32 taskID = 1;
inline bool stCancelTask::has_taskid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCancelTask::set_has_taskid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCancelTask::clear_has_taskid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCancelTask::clear_taskid() {
  taskid_ = 0u;
  clear_has_taskid();
}
inline ::google::protobuf::uint32 stCancelTask::taskid() const {
  return taskid_;
}
inline void stCancelTask::set_taskid(::google::protobuf::uint32 value) {
  set_has_taskid();
  taskid_ = value;
}

// -------------------------------------------------------------------

// stReqOpenTaskWindow

// optional uint32 charID = 1;
inline bool stReqOpenTaskWindow::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenTaskWindow::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenTaskWindow::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenTaskWindow::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenTaskWindow::charid() const {
  return charid_;
}
inline void stReqOpenTaskWindow::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRefreshAllDailyTask

// repeated .TaskProto.stSynTaskInfo tasks = 1;
inline int stRefreshAllDailyTask::tasks_size() const {
  return tasks_.size();
}
inline void stRefreshAllDailyTask::clear_tasks() {
  tasks_.Clear();
}
inline const ::TaskProto::stSynTaskInfo& stRefreshAllDailyTask::tasks(int index) const {
  return tasks_.Get(index);
}
inline ::TaskProto::stSynTaskInfo* stRefreshAllDailyTask::mutable_tasks(int index) {
  return tasks_.Mutable(index);
}
inline ::TaskProto::stSynTaskInfo* stRefreshAllDailyTask::add_tasks() {
  return tasks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >&
stRefreshAllDailyTask::tasks() const {
  return tasks_;
}
inline ::google::protobuf::RepeatedPtrField< ::TaskProto::stSynTaskInfo >*
stRefreshAllDailyTask::mutable_tasks() {
  return &tasks_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TaskProto

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stSynFinishTaskID_ProtoModID>() {
  return ::TaskProto::stSynFinishTaskID_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stSynFinishTaskID_ProtoFunID>() {
  return ::TaskProto::stSynFinishTaskID_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stNotifyTaskFinish_ProtoModID>() {
  return ::TaskProto::stNotifyTaskFinish_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stNotifyTaskFinish_ProtoFunID>() {
  return ::TaskProto::stNotifyTaskFinish_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stSynAllAcceptTask_ProtoModID>() {
  return ::TaskProto::stSynAllAcceptTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stSynAllAcceptTask_ProtoFunID>() {
  return ::TaskProto::stSynAllAcceptTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqAcceptTask_ProtoModID>() {
  return ::TaskProto::stReqAcceptTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqAcceptTask_ProtoFunID>() {
  return ::TaskProto::stReqAcceptTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stNotifyAddTask_ProtoModID>() {
  return ::TaskProto::stNotifyAddTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stNotifyAddTask_ProtoFunID>() {
  return ::TaskProto::stNotifyAddTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stAcceptTaskError_eReason>() {
  return ::TaskProto::stAcceptTaskError_eReason_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stAcceptTaskError_ProtoModID>() {
  return ::TaskProto::stAcceptTaskError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stAcceptTaskError_ProtoFunID>() {
  return ::TaskProto::stAcceptTaskError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stRefreshTaskInfo_ProtoModID>() {
  return ::TaskProto::stRefreshTaskInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stRefreshTaskInfo_ProtoFunID>() {
  return ::TaskProto::stRefreshTaskInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqCommitTask_ProtoModID>() {
  return ::TaskProto::stReqCommitTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqCommitTask_ProtoFunID>() {
  return ::TaskProto::stReqCommitTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stCommitTaskResult_eResult>() {
  return ::TaskProto::stCommitTaskResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stCommitTaskResult_ProtoModID>() {
  return ::TaskProto::stCommitTaskResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stCommitTaskResult_ProtoFunID>() {
  return ::TaskProto::stCommitTaskResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stChgTaskSubStatus_ProtoModID>() {
  return ::TaskProto::stChgTaskSubStatus_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stChgTaskSubStatus_ProtoFunID>() {
  return ::TaskProto::stChgTaskSubStatus_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stSaveCurrentTask_ProtoModID>() {
  return ::TaskProto::stSaveCurrentTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stSaveCurrentTask_ProtoFunID>() {
  return ::TaskProto::stSaveCurrentTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stNotifyCurrentTask_ProtoModID>() {
  return ::TaskProto::stNotifyCurrentTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stNotifyCurrentTask_ProtoFunID>() {
  return ::TaskProto::stNotifyCurrentTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqBatchAcceptTask_ProtoModID>() {
  return ::TaskProto::stReqBatchAcceptTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqBatchAcceptTask_ProtoFunID>() {
  return ::TaskProto::stReqBatchAcceptTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stRetBatchAccpetTask_ProtoModID>() {
  return ::TaskProto::stRetBatchAccpetTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stRetBatchAccpetTask_ProtoFunID>() {
  return ::TaskProto::stRetBatchAccpetTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stSynDailyTaskScore_ProtoModID>() {
  return ::TaskProto::stSynDailyTaskScore_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stSynDailyTaskScore_ProtoFunID>() {
  return ::TaskProto::stSynDailyTaskScore_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stDailyTaskScoreInfo_ProtoModID>() {
  return ::TaskProto::stDailyTaskScoreInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stDailyTaskScoreInfo_ProtoFunID>() {
  return ::TaskProto::stDailyTaskScoreInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqDailyTaskScoreReward_ProtoModID>() {
  return ::TaskProto::stReqDailyTaskScoreReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqDailyTaskScoreReward_ProtoFunID>() {
  return ::TaskProto::stReqDailyTaskScoreReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stDailyTaskScoreRewardResult_eResult>() {
  return ::TaskProto::stDailyTaskScoreRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stDailyTaskScoreRewardResult_ProtoModID>() {
  return ::TaskProto::stDailyTaskScoreRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stDailyTaskScoreRewardResult_ProtoFunID>() {
  return ::TaskProto::stDailyTaskScoreRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stCancelTask_ProtoModID>() {
  return ::TaskProto::stCancelTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stCancelTask_ProtoFunID>() {
  return ::TaskProto::stCancelTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqOpenTaskWindow_ProtoModID>() {
  return ::TaskProto::stReqOpenTaskWindow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stReqOpenTaskWindow_ProtoFunID>() {
  return ::TaskProto::stReqOpenTaskWindow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stRefreshAllDailyTask_ProtoModID>() {
  return ::TaskProto::stRefreshAllDailyTask_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::stRefreshAllDailyTask_ProtoFunID>() {
  return ::TaskProto::stRefreshAllDailyTask_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::GAME_EVENT_TYPE>() {
  return ::TaskProto::GAME_EVENT_TYPE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TaskProto::TASK_STATUS>() {
  return ::TaskProto::TASK_STATUS_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Task_2eproto__INCLUDED
