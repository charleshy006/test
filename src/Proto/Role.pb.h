// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Role.proto

#ifndef PROTOBUF_Role_2eproto__INCLUDED
#define PROTOBUF_Role_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "ModID.pb.h"
// @@protoc_insertion_point(includes)

namespace Role {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Role_2eproto();
void protobuf_AssignDesc_Role_2eproto();
void protobuf_ShutdownFile_Role_2eproto();

class stBattleProp;
class stRoleMainData;
class stInitMainData;
class ReqCreateRole;
class CreateRoleResult;
class stSynSnapData;
class RefreshSnapData;
class ReqEnterGame;
class stSynGoldCoin;
class stSynPointCard;
class stBagPos;
class stItemSkillInfo;
class stRaiseSkillProp;
class stEnchantInfo;
class stSynItemInfo;
class stNotifyAddItem;
class stDeleteItem;
class stRefreshItem;
class stInitAllItem;
class stReqOpenShop;
class stShopItem;
class stRetShopItemList;
class stReqBuyItem;
class stBuyItemResult;
class stSynHeroSkill;
class stImpactHeroInfo;
class stSynHeroInfo;
class stInitAllHero;
class stNotifyAddHero;
class stRefreshHero;
class stReqHeroGoOutForBattle;
class HeroGoOutForBattleResult;
class ReqHeroChange2WaitState;
class HeroChange2WaitStateResult;
class stNotifyRoleAddExp;
class stSynRoleLevel;
class stSynHeroLv;
class stSynBagPos;
class stMoveItem;
class stReqArrangeMainBag;
class stReArrangeMainBagError;
class stRefreshMainBag;
class stReqCombineHero;
class stCombineHeroResult;
class stReqLevelupHero;
class stLevelupHeroResult;
class stReqHeroEvolution;
class stEvolutionHeroResult;
class stReqHeroStudySkill;
class stHeroStudySkillResult;
class stReqRefineHeroSkill;
class stRefineHeroSkillResult;
class stSynSkillExp;
class stReqReplaceHeroSkill;
class stReplaceHeroSkillResult;
class stReqUpgradeHeroSkill;
class stUpgradeHeroSkillResult;
class stReqSellItem;
class stSellItemResult;
class stReqRaiseItem;
class stRaiseItemResult;
class stReqSmeltEquip;
class stSmeltEquipResult;
class stReqRecastEquip;
class RecastEquipResult;
class stReqCombineItem;
class stCombineItemResult;
class stReqRefreshShoplist;
class stRefreshShoplistResult;
class stChatCmd;
class stSynResource;
class stSynLevelInfo;
class stSynCharpterInfo;
class stSynAllLevelInfo;
class stObtainItem;
class stReqFinishLv;
class stFinishLvResult;
class stReqCharpterReward;
class stCharpterRewardResult;
class stReqRushLevel;
class stSynRushReward;
class stLevelRushResult;
class stReqResetRushNum;
class stResetRushNumResult;
class stReqRefineEquip;
class stRefineEquipResult;
class stSynTotoalRecharge;
class stSynSkillInfo;
class stSynUserAllSkill;
class stAddUserSkill;
class stReqUserDetailInfo;
class stUserDetailInfo;
class stUseItem;
class stUseItemError;
class stSynTipItem;
class stObtainItemTip;
class stReqGetEquipSkill;
class stGetEquipSkillResult;
class stReqRefineEquipSkill;
class stRefineEquipSkillResult;
class stMoveEquipSkill2Slot;
class stMoveEquipSkillResult;
class stReqUpgradeEquipSkill;
class stUpgradeEquipSkillResult;
class stSendPKUserData;
class stReqRaiseUserSkillLv;
class stRaiseUserSkillLvResult;
class stNotifyNewBieGuideStep;
class stSaveNewBieGuideStep;
class stOpenLevelBox;
class stChangeRole;
class stGotoSelectRole;
class stSynRMPShopItem;
class stSynRMBShopInfo;
class stSynOne2OnePVPItem;
class stOne2OnePVPResult;
class stPrivateChatNotUser;
class stReqRecoverRemainTime;
class stSPAndLilianRecoverRemainTime;
class stSwapHeroBattlePos;
class stSwapHeroBattlePosError;
class stSynSystemSetting;
class stReqSaveSystemSetting;
class stUnlockRareSkill;
class stUnlockRareSkillResult;
class stUpgradeRareSkill;
class stUpgradeRareSkillResult;
class stReqGiftBag;
class stGotGiftBagResult;
class stSynRealTimeItem;
class stRealTimePKResult;
class stReqFiveRaiseEquip;
class stFiveRaiseEquipResult;
class stSynBattleProp;
class stSynTeamCopyMapNum;
class stSynRealTimePKNum;
class stCopymapFail;
class stReqHero10TimeStudySkill;
class stHero10TimesStudySkillResult;
class st10TimesGetEquipSkill;
class st10TimesGetEquipSkillResult;
class stReqFirstRechargeReward;
class stRetFirstRechargeReward;
class stSynMobaItem;
class stMobaPKResult;
class stSubNewBieGuideID;
class stResetTeamCopyMapNum;
class stResetTeampCopyMapNumResult;
class stResetRealTimeCopyMapNum;
class stResetRealTimeCopymapNumResult;
class stBuyRMBItemSuccess;
class stOne2OnePVPFail;
class stRealTimeFail;
class stDataInitFinish;
class stReqFirst10RechargeReward;
class stRetFirst10RechargeReward;
class stChatInWorldCoolDown;
class stSynRoleCreateTime;
class stReqChgEquipSkill;
class stRetChgEquipSkillResult;
class stHasCloseBetaReward;
class stReqGotCloseBetaReward;
class stGotCloseBetaRewardResult;
class stReqUseMonthCardItem;
class stRetUseMonthCardItem;
class stReqUseSelectItemBox;
class stRetUseSelectItemBox;
class stReqUseHeroSkillBook;
class stRetUseHeroSkillBook;
class stReqUseEquipSkillBook;
class stRetUseEquipSkillBook;
class stReqBreakEquip;
class stBreakEquipResult;
class stReqRecastHero;
class stRecastHeroResult;
class stReqChangeName;
class stChangeNameResult;
class stReqOpenBuyGoldWindow;
class stOpenBuyGoldWindowResult;
class stReqBuyGold;
class stBuyGoldResult;
class stSendImpactHeroInfo;
class stExpBookLevelLimit;
class stNotifyPubUniqueID;
class EnchantItem;
class stReqEnchant;
class stRetEnchant;
class stReqRecastEnchant;
class stRetRecastEnchant;
class stReqLockEnchant;
class stRetLockEnchant;
class stHeroLeagueItem;
class stHerLeagueResult;
class stReqHeroRune;
class stHeroRuneInfo;
class stRetHeroRune;
class stReqAddHeroRune;
class stRetAddHeroRune;
class stReqDelHeroRune;
class stRetDelHeroRune;
class stReqRunePieceCombine;
class stRetRunePieceCombine;
class stReqRuneIntensify;
class stRetRuneIntensify;
class stReqRuneEvolve;
class stRetRuneEvolve;
class stReqExtractGem;
class ExtractGemResult;
class stReqWedding;
class stReqAgreeWedding;
class ResultWedding;
class stReqInviteToRoom;
class NotifyEnterWedding;
class stReqAgreeEnterWedding;
class ResultEnterWedding;
class MarryInviterPlace;
class stReqDivorce;
class RejectDivorce;
class stReqRejectDivorce;
class stRetRejectDivorce;
class BoardcastMarryInfo;
class stReqUseFirework;
class ResultUseFirework;
class NotifyFirework;
class stReqTakeCandy;
class ResultTakeCandy;
class stReqBuyFirework;
class ResultBuyFirework;
class stReqEnterWeddingAlone;
class ResultEnterWeddingAlone;
class stReqQuitWeddingScene;
class stRetQuitWeddingScene;
class stNotifyFriendAction;
class stSendCharCreateTime;
class stReqDrawWeddingRing;
class stRetDrawWeddingRing;
class stReqBuyNum;
class stBuyNumResult;
class stReqRefreshNum;
class stRefreshNumResult;
class stReqColumnList;
class stItemInfo;
class stColumnListResult;
class stReqMarketBuyItem;
class stMarketBuyItemResult;
class stReqOpenWindow;
class stOpenWindowResult;
class stReqRefreshList;
class stRefreshListResult;
class stReqAKeyRaiseUserSkillLv;
class stAKeyRaiseUserSkillLvResult;
class stMountItemInfo;
class stReqStoneSynthesis;
class stStoneSynthesisResult;
class stReqStoneEvolvement;
class stStoneEvolvementResult;
class stReqStoneProp;
class stStonePropResult;
class stReqChangePhoto;
class stChangePhotoResult;
class stReqHasPhotoID;
class stHasPhotoIDResult;
class stReqUnlockPhoto;
class stUnlockPhotoResult;
class stSpriteInfo;
class stSpriteInfoResult;
class stTrainHeroReq;
class stTrainHeroResult;
class stGuaJiTimeNtf;
class stGuaJiAwardReq;
class stGuaJiAwardResult;
class stNftVipNtf;
class stGuaJiStartReq;
class stGuaJiStartResult;
class stSynRMPShopItem2;
class stSynRMBShopInfo2;

enum stInitMainData_ProtoModID {
  stInitMainData_ProtoModID_ModID = 2
};
bool stInitMainData_ProtoModID_IsValid(int value);
const stInitMainData_ProtoModID stInitMainData_ProtoModID_ProtoModID_MIN = stInitMainData_ProtoModID_ModID;
const stInitMainData_ProtoModID stInitMainData_ProtoModID_ProtoModID_MAX = stInitMainData_ProtoModID_ModID;
const int stInitMainData_ProtoModID_ProtoModID_ARRAYSIZE = stInitMainData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInitMainData_ProtoModID_descriptor();
inline const ::std::string& stInitMainData_ProtoModID_Name(stInitMainData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInitMainData_ProtoModID_descriptor(), value);
}
inline bool stInitMainData_ProtoModID_Parse(
    const ::std::string& name, stInitMainData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInitMainData_ProtoModID>(
    stInitMainData_ProtoModID_descriptor(), name, value);
}
enum stInitMainData_ProtoFunID {
  stInitMainData_ProtoFunID_FunID = 1
};
bool stInitMainData_ProtoFunID_IsValid(int value);
const stInitMainData_ProtoFunID stInitMainData_ProtoFunID_ProtoFunID_MIN = stInitMainData_ProtoFunID_FunID;
const stInitMainData_ProtoFunID stInitMainData_ProtoFunID_ProtoFunID_MAX = stInitMainData_ProtoFunID_FunID;
const int stInitMainData_ProtoFunID_ProtoFunID_ARRAYSIZE = stInitMainData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInitMainData_ProtoFunID_descriptor();
inline const ::std::string& stInitMainData_ProtoFunID_Name(stInitMainData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInitMainData_ProtoFunID_descriptor(), value);
}
inline bool stInitMainData_ProtoFunID_Parse(
    const ::std::string& name, stInitMainData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInitMainData_ProtoFunID>(
    stInitMainData_ProtoFunID_descriptor(), name, value);
}
enum ReqCreateRole_ProtoModID {
  ReqCreateRole_ProtoModID_ModID = 2
};
bool ReqCreateRole_ProtoModID_IsValid(int value);
const ReqCreateRole_ProtoModID ReqCreateRole_ProtoModID_ProtoModID_MIN = ReqCreateRole_ProtoModID_ModID;
const ReqCreateRole_ProtoModID ReqCreateRole_ProtoModID_ProtoModID_MAX = ReqCreateRole_ProtoModID_ModID;
const int ReqCreateRole_ProtoModID_ProtoModID_ARRAYSIZE = ReqCreateRole_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqCreateRole_ProtoModID_descriptor();
inline const ::std::string& ReqCreateRole_ProtoModID_Name(ReqCreateRole_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqCreateRole_ProtoModID_descriptor(), value);
}
inline bool ReqCreateRole_ProtoModID_Parse(
    const ::std::string& name, ReqCreateRole_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqCreateRole_ProtoModID>(
    ReqCreateRole_ProtoModID_descriptor(), name, value);
}
enum ReqCreateRole_ProtoFunID {
  ReqCreateRole_ProtoFunID_FunID = 2
};
bool ReqCreateRole_ProtoFunID_IsValid(int value);
const ReqCreateRole_ProtoFunID ReqCreateRole_ProtoFunID_ProtoFunID_MIN = ReqCreateRole_ProtoFunID_FunID;
const ReqCreateRole_ProtoFunID ReqCreateRole_ProtoFunID_ProtoFunID_MAX = ReqCreateRole_ProtoFunID_FunID;
const int ReqCreateRole_ProtoFunID_ProtoFunID_ARRAYSIZE = ReqCreateRole_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqCreateRole_ProtoFunID_descriptor();
inline const ::std::string& ReqCreateRole_ProtoFunID_Name(ReqCreateRole_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqCreateRole_ProtoFunID_descriptor(), value);
}
inline bool ReqCreateRole_ProtoFunID_Parse(
    const ::std::string& name, ReqCreateRole_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqCreateRole_ProtoFunID>(
    ReqCreateRole_ProtoFunID_descriptor(), name, value);
}
enum CreateRoleResult_ProtoModID {
  CreateRoleResult_ProtoModID_ModID = 2
};
bool CreateRoleResult_ProtoModID_IsValid(int value);
const CreateRoleResult_ProtoModID CreateRoleResult_ProtoModID_ProtoModID_MIN = CreateRoleResult_ProtoModID_ModID;
const CreateRoleResult_ProtoModID CreateRoleResult_ProtoModID_ProtoModID_MAX = CreateRoleResult_ProtoModID_ModID;
const int CreateRoleResult_ProtoModID_ProtoModID_ARRAYSIZE = CreateRoleResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateRoleResult_ProtoModID_descriptor();
inline const ::std::string& CreateRoleResult_ProtoModID_Name(CreateRoleResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateRoleResult_ProtoModID_descriptor(), value);
}
inline bool CreateRoleResult_ProtoModID_Parse(
    const ::std::string& name, CreateRoleResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateRoleResult_ProtoModID>(
    CreateRoleResult_ProtoModID_descriptor(), name, value);
}
enum CreateRoleResult_ProtoFunID {
  CreateRoleResult_ProtoFunID_FunID = 3
};
bool CreateRoleResult_ProtoFunID_IsValid(int value);
const CreateRoleResult_ProtoFunID CreateRoleResult_ProtoFunID_ProtoFunID_MIN = CreateRoleResult_ProtoFunID_FunID;
const CreateRoleResult_ProtoFunID CreateRoleResult_ProtoFunID_ProtoFunID_MAX = CreateRoleResult_ProtoFunID_FunID;
const int CreateRoleResult_ProtoFunID_ProtoFunID_ARRAYSIZE = CreateRoleResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateRoleResult_ProtoFunID_descriptor();
inline const ::std::string& CreateRoleResult_ProtoFunID_Name(CreateRoleResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateRoleResult_ProtoFunID_descriptor(), value);
}
inline bool CreateRoleResult_ProtoFunID_Parse(
    const ::std::string& name, CreateRoleResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateRoleResult_ProtoFunID>(
    CreateRoleResult_ProtoFunID_descriptor(), name, value);
}
enum RefreshSnapData_ProtoModID {
  RefreshSnapData_ProtoModID_ModID = 2
};
bool RefreshSnapData_ProtoModID_IsValid(int value);
const RefreshSnapData_ProtoModID RefreshSnapData_ProtoModID_ProtoModID_MIN = RefreshSnapData_ProtoModID_ModID;
const RefreshSnapData_ProtoModID RefreshSnapData_ProtoModID_ProtoModID_MAX = RefreshSnapData_ProtoModID_ModID;
const int RefreshSnapData_ProtoModID_ProtoModID_ARRAYSIZE = RefreshSnapData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RefreshSnapData_ProtoModID_descriptor();
inline const ::std::string& RefreshSnapData_ProtoModID_Name(RefreshSnapData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RefreshSnapData_ProtoModID_descriptor(), value);
}
inline bool RefreshSnapData_ProtoModID_Parse(
    const ::std::string& name, RefreshSnapData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RefreshSnapData_ProtoModID>(
    RefreshSnapData_ProtoModID_descriptor(), name, value);
}
enum RefreshSnapData_ProtoFunID {
  RefreshSnapData_ProtoFunID_FunID = 4
};
bool RefreshSnapData_ProtoFunID_IsValid(int value);
const RefreshSnapData_ProtoFunID RefreshSnapData_ProtoFunID_ProtoFunID_MIN = RefreshSnapData_ProtoFunID_FunID;
const RefreshSnapData_ProtoFunID RefreshSnapData_ProtoFunID_ProtoFunID_MAX = RefreshSnapData_ProtoFunID_FunID;
const int RefreshSnapData_ProtoFunID_ProtoFunID_ARRAYSIZE = RefreshSnapData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RefreshSnapData_ProtoFunID_descriptor();
inline const ::std::string& RefreshSnapData_ProtoFunID_Name(RefreshSnapData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RefreshSnapData_ProtoFunID_descriptor(), value);
}
inline bool RefreshSnapData_ProtoFunID_Parse(
    const ::std::string& name, RefreshSnapData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RefreshSnapData_ProtoFunID>(
    RefreshSnapData_ProtoFunID_descriptor(), name, value);
}
enum ReqEnterGame_ProtoModID {
  ReqEnterGame_ProtoModID_ModID = 2
};
bool ReqEnterGame_ProtoModID_IsValid(int value);
const ReqEnterGame_ProtoModID ReqEnterGame_ProtoModID_ProtoModID_MIN = ReqEnterGame_ProtoModID_ModID;
const ReqEnterGame_ProtoModID ReqEnterGame_ProtoModID_ProtoModID_MAX = ReqEnterGame_ProtoModID_ModID;
const int ReqEnterGame_ProtoModID_ProtoModID_ARRAYSIZE = ReqEnterGame_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqEnterGame_ProtoModID_descriptor();
inline const ::std::string& ReqEnterGame_ProtoModID_Name(ReqEnterGame_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqEnterGame_ProtoModID_descriptor(), value);
}
inline bool ReqEnterGame_ProtoModID_Parse(
    const ::std::string& name, ReqEnterGame_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqEnterGame_ProtoModID>(
    ReqEnterGame_ProtoModID_descriptor(), name, value);
}
enum ReqEnterGame_ProtoFunID {
  ReqEnterGame_ProtoFunID_FunID = 5
};
bool ReqEnterGame_ProtoFunID_IsValid(int value);
const ReqEnterGame_ProtoFunID ReqEnterGame_ProtoFunID_ProtoFunID_MIN = ReqEnterGame_ProtoFunID_FunID;
const ReqEnterGame_ProtoFunID ReqEnterGame_ProtoFunID_ProtoFunID_MAX = ReqEnterGame_ProtoFunID_FunID;
const int ReqEnterGame_ProtoFunID_ProtoFunID_ARRAYSIZE = ReqEnterGame_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqEnterGame_ProtoFunID_descriptor();
inline const ::std::string& ReqEnterGame_ProtoFunID_Name(ReqEnterGame_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqEnterGame_ProtoFunID_descriptor(), value);
}
inline bool ReqEnterGame_ProtoFunID_Parse(
    const ::std::string& name, ReqEnterGame_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqEnterGame_ProtoFunID>(
    ReqEnterGame_ProtoFunID_descriptor(), name, value);
}
enum stSynGoldCoin_ProtoModID {
  stSynGoldCoin_ProtoModID_ModID = 2
};
bool stSynGoldCoin_ProtoModID_IsValid(int value);
const stSynGoldCoin_ProtoModID stSynGoldCoin_ProtoModID_ProtoModID_MIN = stSynGoldCoin_ProtoModID_ModID;
const stSynGoldCoin_ProtoModID stSynGoldCoin_ProtoModID_ProtoModID_MAX = stSynGoldCoin_ProtoModID_ModID;
const int stSynGoldCoin_ProtoModID_ProtoModID_ARRAYSIZE = stSynGoldCoin_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGoldCoin_ProtoModID_descriptor();
inline const ::std::string& stSynGoldCoin_ProtoModID_Name(stSynGoldCoin_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGoldCoin_ProtoModID_descriptor(), value);
}
inline bool stSynGoldCoin_ProtoModID_Parse(
    const ::std::string& name, stSynGoldCoin_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGoldCoin_ProtoModID>(
    stSynGoldCoin_ProtoModID_descriptor(), name, value);
}
enum stSynGoldCoin_ProtoFunID {
  stSynGoldCoin_ProtoFunID_FunID = 6
};
bool stSynGoldCoin_ProtoFunID_IsValid(int value);
const stSynGoldCoin_ProtoFunID stSynGoldCoin_ProtoFunID_ProtoFunID_MIN = stSynGoldCoin_ProtoFunID_FunID;
const stSynGoldCoin_ProtoFunID stSynGoldCoin_ProtoFunID_ProtoFunID_MAX = stSynGoldCoin_ProtoFunID_FunID;
const int stSynGoldCoin_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynGoldCoin_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynGoldCoin_ProtoFunID_descriptor();
inline const ::std::string& stSynGoldCoin_ProtoFunID_Name(stSynGoldCoin_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynGoldCoin_ProtoFunID_descriptor(), value);
}
inline bool stSynGoldCoin_ProtoFunID_Parse(
    const ::std::string& name, stSynGoldCoin_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynGoldCoin_ProtoFunID>(
    stSynGoldCoin_ProtoFunID_descriptor(), name, value);
}
enum stSynPointCard_ProtoModID {
  stSynPointCard_ProtoModID_ModID = 2
};
bool stSynPointCard_ProtoModID_IsValid(int value);
const stSynPointCard_ProtoModID stSynPointCard_ProtoModID_ProtoModID_MIN = stSynPointCard_ProtoModID_ModID;
const stSynPointCard_ProtoModID stSynPointCard_ProtoModID_ProtoModID_MAX = stSynPointCard_ProtoModID_ModID;
const int stSynPointCard_ProtoModID_ProtoModID_ARRAYSIZE = stSynPointCard_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynPointCard_ProtoModID_descriptor();
inline const ::std::string& stSynPointCard_ProtoModID_Name(stSynPointCard_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynPointCard_ProtoModID_descriptor(), value);
}
inline bool stSynPointCard_ProtoModID_Parse(
    const ::std::string& name, stSynPointCard_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynPointCard_ProtoModID>(
    stSynPointCard_ProtoModID_descriptor(), name, value);
}
enum stSynPointCard_ProtoFunID {
  stSynPointCard_ProtoFunID_FunID = 7
};
bool stSynPointCard_ProtoFunID_IsValid(int value);
const stSynPointCard_ProtoFunID stSynPointCard_ProtoFunID_ProtoFunID_MIN = stSynPointCard_ProtoFunID_FunID;
const stSynPointCard_ProtoFunID stSynPointCard_ProtoFunID_ProtoFunID_MAX = stSynPointCard_ProtoFunID_FunID;
const int stSynPointCard_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynPointCard_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynPointCard_ProtoFunID_descriptor();
inline const ::std::string& stSynPointCard_ProtoFunID_Name(stSynPointCard_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynPointCard_ProtoFunID_descriptor(), value);
}
inline bool stSynPointCard_ProtoFunID_Parse(
    const ::std::string& name, stSynPointCard_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynPointCard_ProtoFunID>(
    stSynPointCard_ProtoFunID_descriptor(), name, value);
}
enum stNotifyAddItem_ProtoModID {
  stNotifyAddItem_ProtoModID_ModID = 2
};
bool stNotifyAddItem_ProtoModID_IsValid(int value);
const stNotifyAddItem_ProtoModID stNotifyAddItem_ProtoModID_ProtoModID_MIN = stNotifyAddItem_ProtoModID_ModID;
const stNotifyAddItem_ProtoModID stNotifyAddItem_ProtoModID_ProtoModID_MAX = stNotifyAddItem_ProtoModID_ModID;
const int stNotifyAddItem_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyAddItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddItem_ProtoModID_descriptor();
inline const ::std::string& stNotifyAddItem_ProtoModID_Name(stNotifyAddItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddItem_ProtoModID_descriptor(), value);
}
inline bool stNotifyAddItem_ProtoModID_Parse(
    const ::std::string& name, stNotifyAddItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddItem_ProtoModID>(
    stNotifyAddItem_ProtoModID_descriptor(), name, value);
}
enum stNotifyAddItem_ProtoFunID {
  stNotifyAddItem_ProtoFunID_FunID = 35
};
bool stNotifyAddItem_ProtoFunID_IsValid(int value);
const stNotifyAddItem_ProtoFunID stNotifyAddItem_ProtoFunID_ProtoFunID_MIN = stNotifyAddItem_ProtoFunID_FunID;
const stNotifyAddItem_ProtoFunID stNotifyAddItem_ProtoFunID_ProtoFunID_MAX = stNotifyAddItem_ProtoFunID_FunID;
const int stNotifyAddItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyAddItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddItem_ProtoFunID_descriptor();
inline const ::std::string& stNotifyAddItem_ProtoFunID_Name(stNotifyAddItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddItem_ProtoFunID_descriptor(), value);
}
inline bool stNotifyAddItem_ProtoFunID_Parse(
    const ::std::string& name, stNotifyAddItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddItem_ProtoFunID>(
    stNotifyAddItem_ProtoFunID_descriptor(), name, value);
}
enum stDeleteItem_ProtoModID {
  stDeleteItem_ProtoModID_ModID = 2
};
bool stDeleteItem_ProtoModID_IsValid(int value);
const stDeleteItem_ProtoModID stDeleteItem_ProtoModID_ProtoModID_MIN = stDeleteItem_ProtoModID_ModID;
const stDeleteItem_ProtoModID stDeleteItem_ProtoModID_ProtoModID_MAX = stDeleteItem_ProtoModID_ModID;
const int stDeleteItem_ProtoModID_ProtoModID_ARRAYSIZE = stDeleteItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDeleteItem_ProtoModID_descriptor();
inline const ::std::string& stDeleteItem_ProtoModID_Name(stDeleteItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDeleteItem_ProtoModID_descriptor(), value);
}
inline bool stDeleteItem_ProtoModID_Parse(
    const ::std::string& name, stDeleteItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDeleteItem_ProtoModID>(
    stDeleteItem_ProtoModID_descriptor(), name, value);
}
enum stDeleteItem_ProtoFunID {
  stDeleteItem_ProtoFunID_FunID = 8
};
bool stDeleteItem_ProtoFunID_IsValid(int value);
const stDeleteItem_ProtoFunID stDeleteItem_ProtoFunID_ProtoFunID_MIN = stDeleteItem_ProtoFunID_FunID;
const stDeleteItem_ProtoFunID stDeleteItem_ProtoFunID_ProtoFunID_MAX = stDeleteItem_ProtoFunID_FunID;
const int stDeleteItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stDeleteItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDeleteItem_ProtoFunID_descriptor();
inline const ::std::string& stDeleteItem_ProtoFunID_Name(stDeleteItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDeleteItem_ProtoFunID_descriptor(), value);
}
inline bool stDeleteItem_ProtoFunID_Parse(
    const ::std::string& name, stDeleteItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDeleteItem_ProtoFunID>(
    stDeleteItem_ProtoFunID_descriptor(), name, value);
}
enum stRefreshItem_ProtoModID {
  stRefreshItem_ProtoModID_ModID = 2
};
bool stRefreshItem_ProtoModID_IsValid(int value);
const stRefreshItem_ProtoModID stRefreshItem_ProtoModID_ProtoModID_MIN = stRefreshItem_ProtoModID_ModID;
const stRefreshItem_ProtoModID stRefreshItem_ProtoModID_ProtoModID_MAX = stRefreshItem_ProtoModID_ModID;
const int stRefreshItem_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshItem_ProtoModID_descriptor();
inline const ::std::string& stRefreshItem_ProtoModID_Name(stRefreshItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshItem_ProtoModID_descriptor(), value);
}
inline bool stRefreshItem_ProtoModID_Parse(
    const ::std::string& name, stRefreshItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshItem_ProtoModID>(
    stRefreshItem_ProtoModID_descriptor(), name, value);
}
enum stRefreshItem_ProtoFunID {
  stRefreshItem_ProtoFunID_FunID = 9
};
bool stRefreshItem_ProtoFunID_IsValid(int value);
const stRefreshItem_ProtoFunID stRefreshItem_ProtoFunID_ProtoFunID_MIN = stRefreshItem_ProtoFunID_FunID;
const stRefreshItem_ProtoFunID stRefreshItem_ProtoFunID_ProtoFunID_MAX = stRefreshItem_ProtoFunID_FunID;
const int stRefreshItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshItem_ProtoFunID_descriptor();
inline const ::std::string& stRefreshItem_ProtoFunID_Name(stRefreshItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshItem_ProtoFunID_descriptor(), value);
}
inline bool stRefreshItem_ProtoFunID_Parse(
    const ::std::string& name, stRefreshItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshItem_ProtoFunID>(
    stRefreshItem_ProtoFunID_descriptor(), name, value);
}
enum stInitAllItem_ProtoModID {
  stInitAllItem_ProtoModID_ModID = 2
};
bool stInitAllItem_ProtoModID_IsValid(int value);
const stInitAllItem_ProtoModID stInitAllItem_ProtoModID_ProtoModID_MIN = stInitAllItem_ProtoModID_ModID;
const stInitAllItem_ProtoModID stInitAllItem_ProtoModID_ProtoModID_MAX = stInitAllItem_ProtoModID_ModID;
const int stInitAllItem_ProtoModID_ProtoModID_ARRAYSIZE = stInitAllItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInitAllItem_ProtoModID_descriptor();
inline const ::std::string& stInitAllItem_ProtoModID_Name(stInitAllItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInitAllItem_ProtoModID_descriptor(), value);
}
inline bool stInitAllItem_ProtoModID_Parse(
    const ::std::string& name, stInitAllItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInitAllItem_ProtoModID>(
    stInitAllItem_ProtoModID_descriptor(), name, value);
}
enum stInitAllItem_ProtoFunID {
  stInitAllItem_ProtoFunID_FunID = 10
};
bool stInitAllItem_ProtoFunID_IsValid(int value);
const stInitAllItem_ProtoFunID stInitAllItem_ProtoFunID_ProtoFunID_MIN = stInitAllItem_ProtoFunID_FunID;
const stInitAllItem_ProtoFunID stInitAllItem_ProtoFunID_ProtoFunID_MAX = stInitAllItem_ProtoFunID_FunID;
const int stInitAllItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stInitAllItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInitAllItem_ProtoFunID_descriptor();
inline const ::std::string& stInitAllItem_ProtoFunID_Name(stInitAllItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInitAllItem_ProtoFunID_descriptor(), value);
}
inline bool stInitAllItem_ProtoFunID_Parse(
    const ::std::string& name, stInitAllItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInitAllItem_ProtoFunID>(
    stInitAllItem_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenShop_ProtoModID {
  stReqOpenShop_ProtoModID_ModID = 2
};
bool stReqOpenShop_ProtoModID_IsValid(int value);
const stReqOpenShop_ProtoModID stReqOpenShop_ProtoModID_ProtoModID_MIN = stReqOpenShop_ProtoModID_ModID;
const stReqOpenShop_ProtoModID stReqOpenShop_ProtoModID_ProtoModID_MAX = stReqOpenShop_ProtoModID_ModID;
const int stReqOpenShop_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenShop_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenShop_ProtoModID_descriptor();
inline const ::std::string& stReqOpenShop_ProtoModID_Name(stReqOpenShop_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenShop_ProtoModID_descriptor(), value);
}
inline bool stReqOpenShop_ProtoModID_Parse(
    const ::std::string& name, stReqOpenShop_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenShop_ProtoModID>(
    stReqOpenShop_ProtoModID_descriptor(), name, value);
}
enum stReqOpenShop_ProtoFunID {
  stReqOpenShop_ProtoFunID_FunID = 11
};
bool stReqOpenShop_ProtoFunID_IsValid(int value);
const stReqOpenShop_ProtoFunID stReqOpenShop_ProtoFunID_ProtoFunID_MIN = stReqOpenShop_ProtoFunID_FunID;
const stReqOpenShop_ProtoFunID stReqOpenShop_ProtoFunID_ProtoFunID_MAX = stReqOpenShop_ProtoFunID_FunID;
const int stReqOpenShop_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenShop_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenShop_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenShop_ProtoFunID_Name(stReqOpenShop_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenShop_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenShop_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenShop_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenShop_ProtoFunID>(
    stReqOpenShop_ProtoFunID_descriptor(), name, value);
}
enum stRetShopItemList_ProtoModID {
  stRetShopItemList_ProtoModID_ModID = 2
};
bool stRetShopItemList_ProtoModID_IsValid(int value);
const stRetShopItemList_ProtoModID stRetShopItemList_ProtoModID_ProtoModID_MIN = stRetShopItemList_ProtoModID_ModID;
const stRetShopItemList_ProtoModID stRetShopItemList_ProtoModID_ProtoModID_MAX = stRetShopItemList_ProtoModID_ModID;
const int stRetShopItemList_ProtoModID_ProtoModID_ARRAYSIZE = stRetShopItemList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetShopItemList_ProtoModID_descriptor();
inline const ::std::string& stRetShopItemList_ProtoModID_Name(stRetShopItemList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetShopItemList_ProtoModID_descriptor(), value);
}
inline bool stRetShopItemList_ProtoModID_Parse(
    const ::std::string& name, stRetShopItemList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetShopItemList_ProtoModID>(
    stRetShopItemList_ProtoModID_descriptor(), name, value);
}
enum stRetShopItemList_ProtoFunID {
  stRetShopItemList_ProtoFunID_FunID = 12
};
bool stRetShopItemList_ProtoFunID_IsValid(int value);
const stRetShopItemList_ProtoFunID stRetShopItemList_ProtoFunID_ProtoFunID_MIN = stRetShopItemList_ProtoFunID_FunID;
const stRetShopItemList_ProtoFunID stRetShopItemList_ProtoFunID_ProtoFunID_MAX = stRetShopItemList_ProtoFunID_FunID;
const int stRetShopItemList_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetShopItemList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetShopItemList_ProtoFunID_descriptor();
inline const ::std::string& stRetShopItemList_ProtoFunID_Name(stRetShopItemList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetShopItemList_ProtoFunID_descriptor(), value);
}
inline bool stRetShopItemList_ProtoFunID_Parse(
    const ::std::string& name, stRetShopItemList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetShopItemList_ProtoFunID>(
    stRetShopItemList_ProtoFunID_descriptor(), name, value);
}
enum stReqBuyItem_ProtoModID {
  stReqBuyItem_ProtoModID_ModID = 2
};
bool stReqBuyItem_ProtoModID_IsValid(int value);
const stReqBuyItem_ProtoModID stReqBuyItem_ProtoModID_ProtoModID_MIN = stReqBuyItem_ProtoModID_ModID;
const stReqBuyItem_ProtoModID stReqBuyItem_ProtoModID_ProtoModID_MAX = stReqBuyItem_ProtoModID_ModID;
const int stReqBuyItem_ProtoModID_ProtoModID_ARRAYSIZE = stReqBuyItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyItem_ProtoModID_descriptor();
inline const ::std::string& stReqBuyItem_ProtoModID_Name(stReqBuyItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyItem_ProtoModID_descriptor(), value);
}
inline bool stReqBuyItem_ProtoModID_Parse(
    const ::std::string& name, stReqBuyItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyItem_ProtoModID>(
    stReqBuyItem_ProtoModID_descriptor(), name, value);
}
enum stReqBuyItem_ProtoFunID {
  stReqBuyItem_ProtoFunID_FunID = 13
};
bool stReqBuyItem_ProtoFunID_IsValid(int value);
const stReqBuyItem_ProtoFunID stReqBuyItem_ProtoFunID_ProtoFunID_MIN = stReqBuyItem_ProtoFunID_FunID;
const stReqBuyItem_ProtoFunID stReqBuyItem_ProtoFunID_ProtoFunID_MAX = stReqBuyItem_ProtoFunID_FunID;
const int stReqBuyItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBuyItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyItem_ProtoFunID_descriptor();
inline const ::std::string& stReqBuyItem_ProtoFunID_Name(stReqBuyItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyItem_ProtoFunID_descriptor(), value);
}
inline bool stReqBuyItem_ProtoFunID_Parse(
    const ::std::string& name, stReqBuyItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyItem_ProtoFunID>(
    stReqBuyItem_ProtoFunID_descriptor(), name, value);
}
enum stBuyItemResult_BUYRESULT {
  stBuyItemResult_BUYRESULT_BUY_SUCCESS = 1,
  stBuyItemResult_BUYRESULT_RESOURCE_NOT_ENOUGH = 2,
  stBuyItemResult_BUYRESULT_BUY_FULL = 3,
  stBuyItemResult_BUYRESULT_ITEM_NOT_EXIST = 4,
  stBuyItemResult_BUYRESULT_BUY_OUT = 5,
  stBuyItemResult_BUYRESULT_LV_LIMIT = 6,
  stBuyItemResult_BUYRESULT_GUILD_LV_LIMIT = 7,
  stBuyItemResult_BUYRESULT_ARENA_RANK_LIMIT = 8,
  stBuyItemResult_BUYRESULT_NOT_OPEN_TIME = 9
};
bool stBuyItemResult_BUYRESULT_IsValid(int value);
const stBuyItemResult_BUYRESULT stBuyItemResult_BUYRESULT_BUYRESULT_MIN = stBuyItemResult_BUYRESULT_BUY_SUCCESS;
const stBuyItemResult_BUYRESULT stBuyItemResult_BUYRESULT_BUYRESULT_MAX = stBuyItemResult_BUYRESULT_NOT_OPEN_TIME;
const int stBuyItemResult_BUYRESULT_BUYRESULT_ARRAYSIZE = stBuyItemResult_BUYRESULT_BUYRESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyItemResult_BUYRESULT_descriptor();
inline const ::std::string& stBuyItemResult_BUYRESULT_Name(stBuyItemResult_BUYRESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyItemResult_BUYRESULT_descriptor(), value);
}
inline bool stBuyItemResult_BUYRESULT_Parse(
    const ::std::string& name, stBuyItemResult_BUYRESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyItemResult_BUYRESULT>(
    stBuyItemResult_BUYRESULT_descriptor(), name, value);
}
enum stBuyItemResult_ProtoModID {
  stBuyItemResult_ProtoModID_ModID = 2
};
bool stBuyItemResult_ProtoModID_IsValid(int value);
const stBuyItemResult_ProtoModID stBuyItemResult_ProtoModID_ProtoModID_MIN = stBuyItemResult_ProtoModID_ModID;
const stBuyItemResult_ProtoModID stBuyItemResult_ProtoModID_ProtoModID_MAX = stBuyItemResult_ProtoModID_ModID;
const int stBuyItemResult_ProtoModID_ProtoModID_ARRAYSIZE = stBuyItemResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyItemResult_ProtoModID_descriptor();
inline const ::std::string& stBuyItemResult_ProtoModID_Name(stBuyItemResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyItemResult_ProtoModID_descriptor(), value);
}
inline bool stBuyItemResult_ProtoModID_Parse(
    const ::std::string& name, stBuyItemResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyItemResult_ProtoModID>(
    stBuyItemResult_ProtoModID_descriptor(), name, value);
}
enum stBuyItemResult_ProtoFunID {
  stBuyItemResult_ProtoFunID_FunID = 14
};
bool stBuyItemResult_ProtoFunID_IsValid(int value);
const stBuyItemResult_ProtoFunID stBuyItemResult_ProtoFunID_ProtoFunID_MIN = stBuyItemResult_ProtoFunID_FunID;
const stBuyItemResult_ProtoFunID stBuyItemResult_ProtoFunID_ProtoFunID_MAX = stBuyItemResult_ProtoFunID_FunID;
const int stBuyItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyItemResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyItemResult_ProtoFunID_descriptor();
inline const ::std::string& stBuyItemResult_ProtoFunID_Name(stBuyItemResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyItemResult_ProtoFunID_descriptor(), value);
}
inline bool stBuyItemResult_ProtoFunID_Parse(
    const ::std::string& name, stBuyItemResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyItemResult_ProtoFunID>(
    stBuyItemResult_ProtoFunID_descriptor(), name, value);
}
enum stInitAllHero_ProtoModID {
  stInitAllHero_ProtoModID_ModID = 2
};
bool stInitAllHero_ProtoModID_IsValid(int value);
const stInitAllHero_ProtoModID stInitAllHero_ProtoModID_ProtoModID_MIN = stInitAllHero_ProtoModID_ModID;
const stInitAllHero_ProtoModID stInitAllHero_ProtoModID_ProtoModID_MAX = stInitAllHero_ProtoModID_ModID;
const int stInitAllHero_ProtoModID_ProtoModID_ARRAYSIZE = stInitAllHero_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInitAllHero_ProtoModID_descriptor();
inline const ::std::string& stInitAllHero_ProtoModID_Name(stInitAllHero_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInitAllHero_ProtoModID_descriptor(), value);
}
inline bool stInitAllHero_ProtoModID_Parse(
    const ::std::string& name, stInitAllHero_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInitAllHero_ProtoModID>(
    stInitAllHero_ProtoModID_descriptor(), name, value);
}
enum stInitAllHero_ProtoFunID {
  stInitAllHero_ProtoFunID_FunID = 15
};
bool stInitAllHero_ProtoFunID_IsValid(int value);
const stInitAllHero_ProtoFunID stInitAllHero_ProtoFunID_ProtoFunID_MIN = stInitAllHero_ProtoFunID_FunID;
const stInitAllHero_ProtoFunID stInitAllHero_ProtoFunID_ProtoFunID_MAX = stInitAllHero_ProtoFunID_FunID;
const int stInitAllHero_ProtoFunID_ProtoFunID_ARRAYSIZE = stInitAllHero_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stInitAllHero_ProtoFunID_descriptor();
inline const ::std::string& stInitAllHero_ProtoFunID_Name(stInitAllHero_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stInitAllHero_ProtoFunID_descriptor(), value);
}
inline bool stInitAllHero_ProtoFunID_Parse(
    const ::std::string& name, stInitAllHero_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stInitAllHero_ProtoFunID>(
    stInitAllHero_ProtoFunID_descriptor(), name, value);
}
enum stNotifyAddHero_ProtoModID {
  stNotifyAddHero_ProtoModID_ModID = 2
};
bool stNotifyAddHero_ProtoModID_IsValid(int value);
const stNotifyAddHero_ProtoModID stNotifyAddHero_ProtoModID_ProtoModID_MIN = stNotifyAddHero_ProtoModID_ModID;
const stNotifyAddHero_ProtoModID stNotifyAddHero_ProtoModID_ProtoModID_MAX = stNotifyAddHero_ProtoModID_ModID;
const int stNotifyAddHero_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyAddHero_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddHero_ProtoModID_descriptor();
inline const ::std::string& stNotifyAddHero_ProtoModID_Name(stNotifyAddHero_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddHero_ProtoModID_descriptor(), value);
}
inline bool stNotifyAddHero_ProtoModID_Parse(
    const ::std::string& name, stNotifyAddHero_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddHero_ProtoModID>(
    stNotifyAddHero_ProtoModID_descriptor(), name, value);
}
enum stNotifyAddHero_ProtoFunID {
  stNotifyAddHero_ProtoFunID_FunID = 16
};
bool stNotifyAddHero_ProtoFunID_IsValid(int value);
const stNotifyAddHero_ProtoFunID stNotifyAddHero_ProtoFunID_ProtoFunID_MIN = stNotifyAddHero_ProtoFunID_FunID;
const stNotifyAddHero_ProtoFunID stNotifyAddHero_ProtoFunID_ProtoFunID_MAX = stNotifyAddHero_ProtoFunID_FunID;
const int stNotifyAddHero_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyAddHero_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyAddHero_ProtoFunID_descriptor();
inline const ::std::string& stNotifyAddHero_ProtoFunID_Name(stNotifyAddHero_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyAddHero_ProtoFunID_descriptor(), value);
}
inline bool stNotifyAddHero_ProtoFunID_Parse(
    const ::std::string& name, stNotifyAddHero_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyAddHero_ProtoFunID>(
    stNotifyAddHero_ProtoFunID_descriptor(), name, value);
}
enum stRefreshHero_ProtoModID {
  stRefreshHero_ProtoModID_ModID = 2
};
bool stRefreshHero_ProtoModID_IsValid(int value);
const stRefreshHero_ProtoModID stRefreshHero_ProtoModID_ProtoModID_MIN = stRefreshHero_ProtoModID_ModID;
const stRefreshHero_ProtoModID stRefreshHero_ProtoModID_ProtoModID_MAX = stRefreshHero_ProtoModID_ModID;
const int stRefreshHero_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshHero_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshHero_ProtoModID_descriptor();
inline const ::std::string& stRefreshHero_ProtoModID_Name(stRefreshHero_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshHero_ProtoModID_descriptor(), value);
}
inline bool stRefreshHero_ProtoModID_Parse(
    const ::std::string& name, stRefreshHero_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshHero_ProtoModID>(
    stRefreshHero_ProtoModID_descriptor(), name, value);
}
enum stRefreshHero_ProtoFunID {
  stRefreshHero_ProtoFunID_FunID = 17
};
bool stRefreshHero_ProtoFunID_IsValid(int value);
const stRefreshHero_ProtoFunID stRefreshHero_ProtoFunID_ProtoFunID_MIN = stRefreshHero_ProtoFunID_FunID;
const stRefreshHero_ProtoFunID stRefreshHero_ProtoFunID_ProtoFunID_MAX = stRefreshHero_ProtoFunID_FunID;
const int stRefreshHero_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshHero_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshHero_ProtoFunID_descriptor();
inline const ::std::string& stRefreshHero_ProtoFunID_Name(stRefreshHero_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshHero_ProtoFunID_descriptor(), value);
}
inline bool stRefreshHero_ProtoFunID_Parse(
    const ::std::string& name, stRefreshHero_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshHero_ProtoFunID>(
    stRefreshHero_ProtoFunID_descriptor(), name, value);
}
enum stReqHeroGoOutForBattle_ProtoModID {
  stReqHeroGoOutForBattle_ProtoModID_ModID = 2
};
bool stReqHeroGoOutForBattle_ProtoModID_IsValid(int value);
const stReqHeroGoOutForBattle_ProtoModID stReqHeroGoOutForBattle_ProtoModID_ProtoModID_MIN = stReqHeroGoOutForBattle_ProtoModID_ModID;
const stReqHeroGoOutForBattle_ProtoModID stReqHeroGoOutForBattle_ProtoModID_ProtoModID_MAX = stReqHeroGoOutForBattle_ProtoModID_ModID;
const int stReqHeroGoOutForBattle_ProtoModID_ProtoModID_ARRAYSIZE = stReqHeroGoOutForBattle_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroGoOutForBattle_ProtoModID_descriptor();
inline const ::std::string& stReqHeroGoOutForBattle_ProtoModID_Name(stReqHeroGoOutForBattle_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroGoOutForBattle_ProtoModID_descriptor(), value);
}
inline bool stReqHeroGoOutForBattle_ProtoModID_Parse(
    const ::std::string& name, stReqHeroGoOutForBattle_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroGoOutForBattle_ProtoModID>(
    stReqHeroGoOutForBattle_ProtoModID_descriptor(), name, value);
}
enum stReqHeroGoOutForBattle_ProtoFunID {
  stReqHeroGoOutForBattle_ProtoFunID_FunID = 18
};
bool stReqHeroGoOutForBattle_ProtoFunID_IsValid(int value);
const stReqHeroGoOutForBattle_ProtoFunID stReqHeroGoOutForBattle_ProtoFunID_ProtoFunID_MIN = stReqHeroGoOutForBattle_ProtoFunID_FunID;
const stReqHeroGoOutForBattle_ProtoFunID stReqHeroGoOutForBattle_ProtoFunID_ProtoFunID_MAX = stReqHeroGoOutForBattle_ProtoFunID_FunID;
const int stReqHeroGoOutForBattle_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqHeroGoOutForBattle_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroGoOutForBattle_ProtoFunID_descriptor();
inline const ::std::string& stReqHeroGoOutForBattle_ProtoFunID_Name(stReqHeroGoOutForBattle_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroGoOutForBattle_ProtoFunID_descriptor(), value);
}
inline bool stReqHeroGoOutForBattle_ProtoFunID_Parse(
    const ::std::string& name, stReqHeroGoOutForBattle_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroGoOutForBattle_ProtoFunID>(
    stReqHeroGoOutForBattle_ProtoFunID_descriptor(), name, value);
}
enum HeroGoOutForBattleResult_ERESULT {
  HeroGoOutForBattleResult_ERESULT_SUCCESS = 1,
  HeroGoOutForBattleResult_ERESULT_HAS_GOOUT = 2,
  HeroGoOutForBattleResult_ERESULT_GO_OUT_TOO_MANY = 3,
  HeroGoOutForBattleResult_ERESULT_INNER_ERROR = 4,
  HeroGoOutForBattleResult_ERESULT_POS_WAS_LOCKED = 5
};
bool HeroGoOutForBattleResult_ERESULT_IsValid(int value);
const HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult_ERESULT_ERESULT_MIN = HeroGoOutForBattleResult_ERESULT_SUCCESS;
const HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult_ERESULT_ERESULT_MAX = HeroGoOutForBattleResult_ERESULT_POS_WAS_LOCKED;
const int HeroGoOutForBattleResult_ERESULT_ERESULT_ARRAYSIZE = HeroGoOutForBattleResult_ERESULT_ERESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* HeroGoOutForBattleResult_ERESULT_descriptor();
inline const ::std::string& HeroGoOutForBattleResult_ERESULT_Name(HeroGoOutForBattleResult_ERESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    HeroGoOutForBattleResult_ERESULT_descriptor(), value);
}
inline bool HeroGoOutForBattleResult_ERESULT_Parse(
    const ::std::string& name, HeroGoOutForBattleResult_ERESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeroGoOutForBattleResult_ERESULT>(
    HeroGoOutForBattleResult_ERESULT_descriptor(), name, value);
}
enum HeroGoOutForBattleResult_ProtoModID {
  HeroGoOutForBattleResult_ProtoModID_ModID = 2
};
bool HeroGoOutForBattleResult_ProtoModID_IsValid(int value);
const HeroGoOutForBattleResult_ProtoModID HeroGoOutForBattleResult_ProtoModID_ProtoModID_MIN = HeroGoOutForBattleResult_ProtoModID_ModID;
const HeroGoOutForBattleResult_ProtoModID HeroGoOutForBattleResult_ProtoModID_ProtoModID_MAX = HeroGoOutForBattleResult_ProtoModID_ModID;
const int HeroGoOutForBattleResult_ProtoModID_ProtoModID_ARRAYSIZE = HeroGoOutForBattleResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* HeroGoOutForBattleResult_ProtoModID_descriptor();
inline const ::std::string& HeroGoOutForBattleResult_ProtoModID_Name(HeroGoOutForBattleResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    HeroGoOutForBattleResult_ProtoModID_descriptor(), value);
}
inline bool HeroGoOutForBattleResult_ProtoModID_Parse(
    const ::std::string& name, HeroGoOutForBattleResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeroGoOutForBattleResult_ProtoModID>(
    HeroGoOutForBattleResult_ProtoModID_descriptor(), name, value);
}
enum HeroGoOutForBattleResult_ProtoFunID {
  HeroGoOutForBattleResult_ProtoFunID_FunID = 19
};
bool HeroGoOutForBattleResult_ProtoFunID_IsValid(int value);
const HeroGoOutForBattleResult_ProtoFunID HeroGoOutForBattleResult_ProtoFunID_ProtoFunID_MIN = HeroGoOutForBattleResult_ProtoFunID_FunID;
const HeroGoOutForBattleResult_ProtoFunID HeroGoOutForBattleResult_ProtoFunID_ProtoFunID_MAX = HeroGoOutForBattleResult_ProtoFunID_FunID;
const int HeroGoOutForBattleResult_ProtoFunID_ProtoFunID_ARRAYSIZE = HeroGoOutForBattleResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* HeroGoOutForBattleResult_ProtoFunID_descriptor();
inline const ::std::string& HeroGoOutForBattleResult_ProtoFunID_Name(HeroGoOutForBattleResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    HeroGoOutForBattleResult_ProtoFunID_descriptor(), value);
}
inline bool HeroGoOutForBattleResult_ProtoFunID_Parse(
    const ::std::string& name, HeroGoOutForBattleResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeroGoOutForBattleResult_ProtoFunID>(
    HeroGoOutForBattleResult_ProtoFunID_descriptor(), name, value);
}
enum ReqHeroChange2WaitState_ProtoModID {
  ReqHeroChange2WaitState_ProtoModID_ModID = 2
};
bool ReqHeroChange2WaitState_ProtoModID_IsValid(int value);
const ReqHeroChange2WaitState_ProtoModID ReqHeroChange2WaitState_ProtoModID_ProtoModID_MIN = ReqHeroChange2WaitState_ProtoModID_ModID;
const ReqHeroChange2WaitState_ProtoModID ReqHeroChange2WaitState_ProtoModID_ProtoModID_MAX = ReqHeroChange2WaitState_ProtoModID_ModID;
const int ReqHeroChange2WaitState_ProtoModID_ProtoModID_ARRAYSIZE = ReqHeroChange2WaitState_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqHeroChange2WaitState_ProtoModID_descriptor();
inline const ::std::string& ReqHeroChange2WaitState_ProtoModID_Name(ReqHeroChange2WaitState_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqHeroChange2WaitState_ProtoModID_descriptor(), value);
}
inline bool ReqHeroChange2WaitState_ProtoModID_Parse(
    const ::std::string& name, ReqHeroChange2WaitState_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqHeroChange2WaitState_ProtoModID>(
    ReqHeroChange2WaitState_ProtoModID_descriptor(), name, value);
}
enum ReqHeroChange2WaitState_ProtoFunID {
  ReqHeroChange2WaitState_ProtoFunID_FunID = 20
};
bool ReqHeroChange2WaitState_ProtoFunID_IsValid(int value);
const ReqHeroChange2WaitState_ProtoFunID ReqHeroChange2WaitState_ProtoFunID_ProtoFunID_MIN = ReqHeroChange2WaitState_ProtoFunID_FunID;
const ReqHeroChange2WaitState_ProtoFunID ReqHeroChange2WaitState_ProtoFunID_ProtoFunID_MAX = ReqHeroChange2WaitState_ProtoFunID_FunID;
const int ReqHeroChange2WaitState_ProtoFunID_ProtoFunID_ARRAYSIZE = ReqHeroChange2WaitState_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReqHeroChange2WaitState_ProtoFunID_descriptor();
inline const ::std::string& ReqHeroChange2WaitState_ProtoFunID_Name(ReqHeroChange2WaitState_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReqHeroChange2WaitState_ProtoFunID_descriptor(), value);
}
inline bool ReqHeroChange2WaitState_ProtoFunID_Parse(
    const ::std::string& name, ReqHeroChange2WaitState_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReqHeroChange2WaitState_ProtoFunID>(
    ReqHeroChange2WaitState_ProtoFunID_descriptor(), name, value);
}
enum HeroChange2WaitStateResult_ProtoModID {
  HeroChange2WaitStateResult_ProtoModID_ModID = 2
};
bool HeroChange2WaitStateResult_ProtoModID_IsValid(int value);
const HeroChange2WaitStateResult_ProtoModID HeroChange2WaitStateResult_ProtoModID_ProtoModID_MIN = HeroChange2WaitStateResult_ProtoModID_ModID;
const HeroChange2WaitStateResult_ProtoModID HeroChange2WaitStateResult_ProtoModID_ProtoModID_MAX = HeroChange2WaitStateResult_ProtoModID_ModID;
const int HeroChange2WaitStateResult_ProtoModID_ProtoModID_ARRAYSIZE = HeroChange2WaitStateResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* HeroChange2WaitStateResult_ProtoModID_descriptor();
inline const ::std::string& HeroChange2WaitStateResult_ProtoModID_Name(HeroChange2WaitStateResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    HeroChange2WaitStateResult_ProtoModID_descriptor(), value);
}
inline bool HeroChange2WaitStateResult_ProtoModID_Parse(
    const ::std::string& name, HeroChange2WaitStateResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeroChange2WaitStateResult_ProtoModID>(
    HeroChange2WaitStateResult_ProtoModID_descriptor(), name, value);
}
enum HeroChange2WaitStateResult_ProtoFunID {
  HeroChange2WaitStateResult_ProtoFunID_FunID = 21
};
bool HeroChange2WaitStateResult_ProtoFunID_IsValid(int value);
const HeroChange2WaitStateResult_ProtoFunID HeroChange2WaitStateResult_ProtoFunID_ProtoFunID_MIN = HeroChange2WaitStateResult_ProtoFunID_FunID;
const HeroChange2WaitStateResult_ProtoFunID HeroChange2WaitStateResult_ProtoFunID_ProtoFunID_MAX = HeroChange2WaitStateResult_ProtoFunID_FunID;
const int HeroChange2WaitStateResult_ProtoFunID_ProtoFunID_ARRAYSIZE = HeroChange2WaitStateResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* HeroChange2WaitStateResult_ProtoFunID_descriptor();
inline const ::std::string& HeroChange2WaitStateResult_ProtoFunID_Name(HeroChange2WaitStateResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    HeroChange2WaitStateResult_ProtoFunID_descriptor(), value);
}
inline bool HeroChange2WaitStateResult_ProtoFunID_Parse(
    const ::std::string& name, HeroChange2WaitStateResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<HeroChange2WaitStateResult_ProtoFunID>(
    HeroChange2WaitStateResult_ProtoFunID_descriptor(), name, value);
}
enum stNotifyRoleAddExp_ProtoModID {
  stNotifyRoleAddExp_ProtoModID_ModID = 2
};
bool stNotifyRoleAddExp_ProtoModID_IsValid(int value);
const stNotifyRoleAddExp_ProtoModID stNotifyRoleAddExp_ProtoModID_ProtoModID_MIN = stNotifyRoleAddExp_ProtoModID_ModID;
const stNotifyRoleAddExp_ProtoModID stNotifyRoleAddExp_ProtoModID_ProtoModID_MAX = stNotifyRoleAddExp_ProtoModID_ModID;
const int stNotifyRoleAddExp_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyRoleAddExp_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyRoleAddExp_ProtoModID_descriptor();
inline const ::std::string& stNotifyRoleAddExp_ProtoModID_Name(stNotifyRoleAddExp_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyRoleAddExp_ProtoModID_descriptor(), value);
}
inline bool stNotifyRoleAddExp_ProtoModID_Parse(
    const ::std::string& name, stNotifyRoleAddExp_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyRoleAddExp_ProtoModID>(
    stNotifyRoleAddExp_ProtoModID_descriptor(), name, value);
}
enum stNotifyRoleAddExp_ProtoFunID {
  stNotifyRoleAddExp_ProtoFunID_FunID = 22
};
bool stNotifyRoleAddExp_ProtoFunID_IsValid(int value);
const stNotifyRoleAddExp_ProtoFunID stNotifyRoleAddExp_ProtoFunID_ProtoFunID_MIN = stNotifyRoleAddExp_ProtoFunID_FunID;
const stNotifyRoleAddExp_ProtoFunID stNotifyRoleAddExp_ProtoFunID_ProtoFunID_MAX = stNotifyRoleAddExp_ProtoFunID_FunID;
const int stNotifyRoleAddExp_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyRoleAddExp_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyRoleAddExp_ProtoFunID_descriptor();
inline const ::std::string& stNotifyRoleAddExp_ProtoFunID_Name(stNotifyRoleAddExp_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyRoleAddExp_ProtoFunID_descriptor(), value);
}
inline bool stNotifyRoleAddExp_ProtoFunID_Parse(
    const ::std::string& name, stNotifyRoleAddExp_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyRoleAddExp_ProtoFunID>(
    stNotifyRoleAddExp_ProtoFunID_descriptor(), name, value);
}
enum stSynRoleLevel_ProtoModID {
  stSynRoleLevel_ProtoModID_ModID = 2
};
bool stSynRoleLevel_ProtoModID_IsValid(int value);
const stSynRoleLevel_ProtoModID stSynRoleLevel_ProtoModID_ProtoModID_MIN = stSynRoleLevel_ProtoModID_ModID;
const stSynRoleLevel_ProtoModID stSynRoleLevel_ProtoModID_ProtoModID_MAX = stSynRoleLevel_ProtoModID_ModID;
const int stSynRoleLevel_ProtoModID_ProtoModID_ARRAYSIZE = stSynRoleLevel_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRoleLevel_ProtoModID_descriptor();
inline const ::std::string& stSynRoleLevel_ProtoModID_Name(stSynRoleLevel_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRoleLevel_ProtoModID_descriptor(), value);
}
inline bool stSynRoleLevel_ProtoModID_Parse(
    const ::std::string& name, stSynRoleLevel_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRoleLevel_ProtoModID>(
    stSynRoleLevel_ProtoModID_descriptor(), name, value);
}
enum stSynRoleLevel_ProtoFunID {
  stSynRoleLevel_ProtoFunID_FunID = 23
};
bool stSynRoleLevel_ProtoFunID_IsValid(int value);
const stSynRoleLevel_ProtoFunID stSynRoleLevel_ProtoFunID_ProtoFunID_MIN = stSynRoleLevel_ProtoFunID_FunID;
const stSynRoleLevel_ProtoFunID stSynRoleLevel_ProtoFunID_ProtoFunID_MAX = stSynRoleLevel_ProtoFunID_FunID;
const int stSynRoleLevel_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynRoleLevel_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRoleLevel_ProtoFunID_descriptor();
inline const ::std::string& stSynRoleLevel_ProtoFunID_Name(stSynRoleLevel_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRoleLevel_ProtoFunID_descriptor(), value);
}
inline bool stSynRoleLevel_ProtoFunID_Parse(
    const ::std::string& name, stSynRoleLevel_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRoleLevel_ProtoFunID>(
    stSynRoleLevel_ProtoFunID_descriptor(), name, value);
}
enum stSynHeroLv_ProtoModID {
  stSynHeroLv_ProtoModID_ModID = 2
};
bool stSynHeroLv_ProtoModID_IsValid(int value);
const stSynHeroLv_ProtoModID stSynHeroLv_ProtoModID_ProtoModID_MIN = stSynHeroLv_ProtoModID_ModID;
const stSynHeroLv_ProtoModID stSynHeroLv_ProtoModID_ProtoModID_MAX = stSynHeroLv_ProtoModID_ModID;
const int stSynHeroLv_ProtoModID_ProtoModID_ARRAYSIZE = stSynHeroLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynHeroLv_ProtoModID_descriptor();
inline const ::std::string& stSynHeroLv_ProtoModID_Name(stSynHeroLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynHeroLv_ProtoModID_descriptor(), value);
}
inline bool stSynHeroLv_ProtoModID_Parse(
    const ::std::string& name, stSynHeroLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynHeroLv_ProtoModID>(
    stSynHeroLv_ProtoModID_descriptor(), name, value);
}
enum stSynHeroLv_ProtoFunID {
  stSynHeroLv_ProtoFunID_FunID = 24
};
bool stSynHeroLv_ProtoFunID_IsValid(int value);
const stSynHeroLv_ProtoFunID stSynHeroLv_ProtoFunID_ProtoFunID_MIN = stSynHeroLv_ProtoFunID_FunID;
const stSynHeroLv_ProtoFunID stSynHeroLv_ProtoFunID_ProtoFunID_MAX = stSynHeroLv_ProtoFunID_FunID;
const int stSynHeroLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynHeroLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynHeroLv_ProtoFunID_descriptor();
inline const ::std::string& stSynHeroLv_ProtoFunID_Name(stSynHeroLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynHeroLv_ProtoFunID_descriptor(), value);
}
inline bool stSynHeroLv_ProtoFunID_Parse(
    const ::std::string& name, stSynHeroLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynHeroLv_ProtoFunID>(
    stSynHeroLv_ProtoFunID_descriptor(), name, value);
}
enum stMoveItem_ProtoModID {
  stMoveItem_ProtoModID_ModID = 2
};
bool stMoveItem_ProtoModID_IsValid(int value);
const stMoveItem_ProtoModID stMoveItem_ProtoModID_ProtoModID_MIN = stMoveItem_ProtoModID_ModID;
const stMoveItem_ProtoModID stMoveItem_ProtoModID_ProtoModID_MAX = stMoveItem_ProtoModID_ModID;
const int stMoveItem_ProtoModID_ProtoModID_ARRAYSIZE = stMoveItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMoveItem_ProtoModID_descriptor();
inline const ::std::string& stMoveItem_ProtoModID_Name(stMoveItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMoveItem_ProtoModID_descriptor(), value);
}
inline bool stMoveItem_ProtoModID_Parse(
    const ::std::string& name, stMoveItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMoveItem_ProtoModID>(
    stMoveItem_ProtoModID_descriptor(), name, value);
}
enum stMoveItem_ProtoFunID {
  stMoveItem_ProtoFunID_FunID = 25
};
bool stMoveItem_ProtoFunID_IsValid(int value);
const stMoveItem_ProtoFunID stMoveItem_ProtoFunID_ProtoFunID_MIN = stMoveItem_ProtoFunID_FunID;
const stMoveItem_ProtoFunID stMoveItem_ProtoFunID_ProtoFunID_MAX = stMoveItem_ProtoFunID_FunID;
const int stMoveItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stMoveItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMoveItem_ProtoFunID_descriptor();
inline const ::std::string& stMoveItem_ProtoFunID_Name(stMoveItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMoveItem_ProtoFunID_descriptor(), value);
}
inline bool stMoveItem_ProtoFunID_Parse(
    const ::std::string& name, stMoveItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMoveItem_ProtoFunID>(
    stMoveItem_ProtoFunID_descriptor(), name, value);
}
enum stReqArrangeMainBag_ProtoModID {
  stReqArrangeMainBag_ProtoModID_ModID = 2
};
bool stReqArrangeMainBag_ProtoModID_IsValid(int value);
const stReqArrangeMainBag_ProtoModID stReqArrangeMainBag_ProtoModID_ProtoModID_MIN = stReqArrangeMainBag_ProtoModID_ModID;
const stReqArrangeMainBag_ProtoModID stReqArrangeMainBag_ProtoModID_ProtoModID_MAX = stReqArrangeMainBag_ProtoModID_ModID;
const int stReqArrangeMainBag_ProtoModID_ProtoModID_ARRAYSIZE = stReqArrangeMainBag_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqArrangeMainBag_ProtoModID_descriptor();
inline const ::std::string& stReqArrangeMainBag_ProtoModID_Name(stReqArrangeMainBag_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqArrangeMainBag_ProtoModID_descriptor(), value);
}
inline bool stReqArrangeMainBag_ProtoModID_Parse(
    const ::std::string& name, stReqArrangeMainBag_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqArrangeMainBag_ProtoModID>(
    stReqArrangeMainBag_ProtoModID_descriptor(), name, value);
}
enum stReqArrangeMainBag_ProtoFunID {
  stReqArrangeMainBag_ProtoFunID_FunID = 26
};
bool stReqArrangeMainBag_ProtoFunID_IsValid(int value);
const stReqArrangeMainBag_ProtoFunID stReqArrangeMainBag_ProtoFunID_ProtoFunID_MIN = stReqArrangeMainBag_ProtoFunID_FunID;
const stReqArrangeMainBag_ProtoFunID stReqArrangeMainBag_ProtoFunID_ProtoFunID_MAX = stReqArrangeMainBag_ProtoFunID_FunID;
const int stReqArrangeMainBag_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqArrangeMainBag_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqArrangeMainBag_ProtoFunID_descriptor();
inline const ::std::string& stReqArrangeMainBag_ProtoFunID_Name(stReqArrangeMainBag_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqArrangeMainBag_ProtoFunID_descriptor(), value);
}
inline bool stReqArrangeMainBag_ProtoFunID_Parse(
    const ::std::string& name, stReqArrangeMainBag_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqArrangeMainBag_ProtoFunID>(
    stReqArrangeMainBag_ProtoFunID_descriptor(), name, value);
}
enum stReArrangeMainBagError_ProtoModID {
  stReArrangeMainBagError_ProtoModID_ModID = 2
};
bool stReArrangeMainBagError_ProtoModID_IsValid(int value);
const stReArrangeMainBagError_ProtoModID stReArrangeMainBagError_ProtoModID_ProtoModID_MIN = stReArrangeMainBagError_ProtoModID_ModID;
const stReArrangeMainBagError_ProtoModID stReArrangeMainBagError_ProtoModID_ProtoModID_MAX = stReArrangeMainBagError_ProtoModID_ModID;
const int stReArrangeMainBagError_ProtoModID_ProtoModID_ARRAYSIZE = stReArrangeMainBagError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReArrangeMainBagError_ProtoModID_descriptor();
inline const ::std::string& stReArrangeMainBagError_ProtoModID_Name(stReArrangeMainBagError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReArrangeMainBagError_ProtoModID_descriptor(), value);
}
inline bool stReArrangeMainBagError_ProtoModID_Parse(
    const ::std::string& name, stReArrangeMainBagError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReArrangeMainBagError_ProtoModID>(
    stReArrangeMainBagError_ProtoModID_descriptor(), name, value);
}
enum stReArrangeMainBagError_ProtoFunID {
  stReArrangeMainBagError_ProtoFunID_FunID = 27
};
bool stReArrangeMainBagError_ProtoFunID_IsValid(int value);
const stReArrangeMainBagError_ProtoFunID stReArrangeMainBagError_ProtoFunID_ProtoFunID_MIN = stReArrangeMainBagError_ProtoFunID_FunID;
const stReArrangeMainBagError_ProtoFunID stReArrangeMainBagError_ProtoFunID_ProtoFunID_MAX = stReArrangeMainBagError_ProtoFunID_FunID;
const int stReArrangeMainBagError_ProtoFunID_ProtoFunID_ARRAYSIZE = stReArrangeMainBagError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReArrangeMainBagError_ProtoFunID_descriptor();
inline const ::std::string& stReArrangeMainBagError_ProtoFunID_Name(stReArrangeMainBagError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReArrangeMainBagError_ProtoFunID_descriptor(), value);
}
inline bool stReArrangeMainBagError_ProtoFunID_Parse(
    const ::std::string& name, stReArrangeMainBagError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReArrangeMainBagError_ProtoFunID>(
    stReArrangeMainBagError_ProtoFunID_descriptor(), name, value);
}
enum stRefreshMainBag_ProtoModID {
  stRefreshMainBag_ProtoModID_ModID = 2
};
bool stRefreshMainBag_ProtoModID_IsValid(int value);
const stRefreshMainBag_ProtoModID stRefreshMainBag_ProtoModID_ProtoModID_MIN = stRefreshMainBag_ProtoModID_ModID;
const stRefreshMainBag_ProtoModID stRefreshMainBag_ProtoModID_ProtoModID_MAX = stRefreshMainBag_ProtoModID_ModID;
const int stRefreshMainBag_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshMainBag_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshMainBag_ProtoModID_descriptor();
inline const ::std::string& stRefreshMainBag_ProtoModID_Name(stRefreshMainBag_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshMainBag_ProtoModID_descriptor(), value);
}
inline bool stRefreshMainBag_ProtoModID_Parse(
    const ::std::string& name, stRefreshMainBag_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshMainBag_ProtoModID>(
    stRefreshMainBag_ProtoModID_descriptor(), name, value);
}
enum stRefreshMainBag_ProtoFunID {
  stRefreshMainBag_ProtoFunID_FunID = 28
};
bool stRefreshMainBag_ProtoFunID_IsValid(int value);
const stRefreshMainBag_ProtoFunID stRefreshMainBag_ProtoFunID_ProtoFunID_MIN = stRefreshMainBag_ProtoFunID_FunID;
const stRefreshMainBag_ProtoFunID stRefreshMainBag_ProtoFunID_ProtoFunID_MAX = stRefreshMainBag_ProtoFunID_FunID;
const int stRefreshMainBag_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshMainBag_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshMainBag_ProtoFunID_descriptor();
inline const ::std::string& stRefreshMainBag_ProtoFunID_Name(stRefreshMainBag_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshMainBag_ProtoFunID_descriptor(), value);
}
inline bool stRefreshMainBag_ProtoFunID_Parse(
    const ::std::string& name, stRefreshMainBag_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshMainBag_ProtoFunID>(
    stRefreshMainBag_ProtoFunID_descriptor(), name, value);
}
enum stReqCombineHero_ProtoModID {
  stReqCombineHero_ProtoModID_ModID = 2
};
bool stReqCombineHero_ProtoModID_IsValid(int value);
const stReqCombineHero_ProtoModID stReqCombineHero_ProtoModID_ProtoModID_MIN = stReqCombineHero_ProtoModID_ModID;
const stReqCombineHero_ProtoModID stReqCombineHero_ProtoModID_ProtoModID_MAX = stReqCombineHero_ProtoModID_ModID;
const int stReqCombineHero_ProtoModID_ProtoModID_ARRAYSIZE = stReqCombineHero_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCombineHero_ProtoModID_descriptor();
inline const ::std::string& stReqCombineHero_ProtoModID_Name(stReqCombineHero_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCombineHero_ProtoModID_descriptor(), value);
}
inline bool stReqCombineHero_ProtoModID_Parse(
    const ::std::string& name, stReqCombineHero_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCombineHero_ProtoModID>(
    stReqCombineHero_ProtoModID_descriptor(), name, value);
}
enum stReqCombineHero_ProtoFunID {
  stReqCombineHero_ProtoFunID_FunID = 29
};
bool stReqCombineHero_ProtoFunID_IsValid(int value);
const stReqCombineHero_ProtoFunID stReqCombineHero_ProtoFunID_ProtoFunID_MIN = stReqCombineHero_ProtoFunID_FunID;
const stReqCombineHero_ProtoFunID stReqCombineHero_ProtoFunID_ProtoFunID_MAX = stReqCombineHero_ProtoFunID_FunID;
const int stReqCombineHero_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCombineHero_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCombineHero_ProtoFunID_descriptor();
inline const ::std::string& stReqCombineHero_ProtoFunID_Name(stReqCombineHero_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCombineHero_ProtoFunID_descriptor(), value);
}
inline bool stReqCombineHero_ProtoFunID_Parse(
    const ::std::string& name, stReqCombineHero_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCombineHero_ProtoFunID>(
    stReqCombineHero_ProtoFunID_descriptor(), name, value);
}
enum stCombineHeroResult_Result {
  stCombineHeroResult_Result_SUCCESS = 1,
  stCombineHeroResult_Result_NOT_ENOUGH_STONE = 2,
  stCombineHeroResult_Result_HAS_EXIST = 3,
  stCombineHeroResult_Result_INNER_ERROR = 4
};
bool stCombineHeroResult_Result_IsValid(int value);
const stCombineHeroResult_Result stCombineHeroResult_Result_Result_MIN = stCombineHeroResult_Result_SUCCESS;
const stCombineHeroResult_Result stCombineHeroResult_Result_Result_MAX = stCombineHeroResult_Result_INNER_ERROR;
const int stCombineHeroResult_Result_Result_ARRAYSIZE = stCombineHeroResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCombineHeroResult_Result_descriptor();
inline const ::std::string& stCombineHeroResult_Result_Name(stCombineHeroResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCombineHeroResult_Result_descriptor(), value);
}
inline bool stCombineHeroResult_Result_Parse(
    const ::std::string& name, stCombineHeroResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCombineHeroResult_Result>(
    stCombineHeroResult_Result_descriptor(), name, value);
}
enum stCombineHeroResult_ProtoModID {
  stCombineHeroResult_ProtoModID_ModID = 2
};
bool stCombineHeroResult_ProtoModID_IsValid(int value);
const stCombineHeroResult_ProtoModID stCombineHeroResult_ProtoModID_ProtoModID_MIN = stCombineHeroResult_ProtoModID_ModID;
const stCombineHeroResult_ProtoModID stCombineHeroResult_ProtoModID_ProtoModID_MAX = stCombineHeroResult_ProtoModID_ModID;
const int stCombineHeroResult_ProtoModID_ProtoModID_ARRAYSIZE = stCombineHeroResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCombineHeroResult_ProtoModID_descriptor();
inline const ::std::string& stCombineHeroResult_ProtoModID_Name(stCombineHeroResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCombineHeroResult_ProtoModID_descriptor(), value);
}
inline bool stCombineHeroResult_ProtoModID_Parse(
    const ::std::string& name, stCombineHeroResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCombineHeroResult_ProtoModID>(
    stCombineHeroResult_ProtoModID_descriptor(), name, value);
}
enum stCombineHeroResult_ProtoFunID {
  stCombineHeroResult_ProtoFunID_FunID = 30
};
bool stCombineHeroResult_ProtoFunID_IsValid(int value);
const stCombineHeroResult_ProtoFunID stCombineHeroResult_ProtoFunID_ProtoFunID_MIN = stCombineHeroResult_ProtoFunID_FunID;
const stCombineHeroResult_ProtoFunID stCombineHeroResult_ProtoFunID_ProtoFunID_MAX = stCombineHeroResult_ProtoFunID_FunID;
const int stCombineHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCombineHeroResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCombineHeroResult_ProtoFunID_descriptor();
inline const ::std::string& stCombineHeroResult_ProtoFunID_Name(stCombineHeroResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCombineHeroResult_ProtoFunID_descriptor(), value);
}
inline bool stCombineHeroResult_ProtoFunID_Parse(
    const ::std::string& name, stCombineHeroResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCombineHeroResult_ProtoFunID>(
    stCombineHeroResult_ProtoFunID_descriptor(), name, value);
}
enum stReqLevelupHero_ProtoModID {
  stReqLevelupHero_ProtoModID_ModID = 2
};
bool stReqLevelupHero_ProtoModID_IsValid(int value);
const stReqLevelupHero_ProtoModID stReqLevelupHero_ProtoModID_ProtoModID_MIN = stReqLevelupHero_ProtoModID_ModID;
const stReqLevelupHero_ProtoModID stReqLevelupHero_ProtoModID_ProtoModID_MAX = stReqLevelupHero_ProtoModID_ModID;
const int stReqLevelupHero_ProtoModID_ProtoModID_ARRAYSIZE = stReqLevelupHero_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelupHero_ProtoModID_descriptor();
inline const ::std::string& stReqLevelupHero_ProtoModID_Name(stReqLevelupHero_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelupHero_ProtoModID_descriptor(), value);
}
inline bool stReqLevelupHero_ProtoModID_Parse(
    const ::std::string& name, stReqLevelupHero_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelupHero_ProtoModID>(
    stReqLevelupHero_ProtoModID_descriptor(), name, value);
}
enum stReqLevelupHero_ProtoFunID {
  stReqLevelupHero_ProtoFunID_FunID = 31
};
bool stReqLevelupHero_ProtoFunID_IsValid(int value);
const stReqLevelupHero_ProtoFunID stReqLevelupHero_ProtoFunID_ProtoFunID_MIN = stReqLevelupHero_ProtoFunID_FunID;
const stReqLevelupHero_ProtoFunID stReqLevelupHero_ProtoFunID_ProtoFunID_MAX = stReqLevelupHero_ProtoFunID_FunID;
const int stReqLevelupHero_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLevelupHero_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLevelupHero_ProtoFunID_descriptor();
inline const ::std::string& stReqLevelupHero_ProtoFunID_Name(stReqLevelupHero_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLevelupHero_ProtoFunID_descriptor(), value);
}
inline bool stReqLevelupHero_ProtoFunID_Parse(
    const ::std::string& name, stReqLevelupHero_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLevelupHero_ProtoFunID>(
    stReqLevelupHero_ProtoFunID_descriptor(), name, value);
}
enum stLevelupHeroResult_Result {
  stLevelupHeroResult_Result_SUCCESS = 1,
  stLevelupHeroResult_Result_NOT_ENOUGH_STONE = 2,
  stLevelupHeroResult_Result_NOT_ENOUGH_MONEY = 3,
  stLevelupHeroResult_Result_HERO_NOT_EXIST = 4,
  stLevelupHeroResult_Result_INNER_ERROR = 5,
  stLevelupHeroResult_Result_ROLE_LV_LIMIT = 6
};
bool stLevelupHeroResult_Result_IsValid(int value);
const stLevelupHeroResult_Result stLevelupHeroResult_Result_Result_MIN = stLevelupHeroResult_Result_SUCCESS;
const stLevelupHeroResult_Result stLevelupHeroResult_Result_Result_MAX = stLevelupHeroResult_Result_ROLE_LV_LIMIT;
const int stLevelupHeroResult_Result_Result_ARRAYSIZE = stLevelupHeroResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelupHeroResult_Result_descriptor();
inline const ::std::string& stLevelupHeroResult_Result_Name(stLevelupHeroResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelupHeroResult_Result_descriptor(), value);
}
inline bool stLevelupHeroResult_Result_Parse(
    const ::std::string& name, stLevelupHeroResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelupHeroResult_Result>(
    stLevelupHeroResult_Result_descriptor(), name, value);
}
enum stLevelupHeroResult_ProtoModID {
  stLevelupHeroResult_ProtoModID_ModID = 2
};
bool stLevelupHeroResult_ProtoModID_IsValid(int value);
const stLevelupHeroResult_ProtoModID stLevelupHeroResult_ProtoModID_ProtoModID_MIN = stLevelupHeroResult_ProtoModID_ModID;
const stLevelupHeroResult_ProtoModID stLevelupHeroResult_ProtoModID_ProtoModID_MAX = stLevelupHeroResult_ProtoModID_ModID;
const int stLevelupHeroResult_ProtoModID_ProtoModID_ARRAYSIZE = stLevelupHeroResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelupHeroResult_ProtoModID_descriptor();
inline const ::std::string& stLevelupHeroResult_ProtoModID_Name(stLevelupHeroResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelupHeroResult_ProtoModID_descriptor(), value);
}
inline bool stLevelupHeroResult_ProtoModID_Parse(
    const ::std::string& name, stLevelupHeroResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelupHeroResult_ProtoModID>(
    stLevelupHeroResult_ProtoModID_descriptor(), name, value);
}
enum stLevelupHeroResult_ProtoFunID {
  stLevelupHeroResult_ProtoFunID_FunID = 32
};
bool stLevelupHeroResult_ProtoFunID_IsValid(int value);
const stLevelupHeroResult_ProtoFunID stLevelupHeroResult_ProtoFunID_ProtoFunID_MIN = stLevelupHeroResult_ProtoFunID_FunID;
const stLevelupHeroResult_ProtoFunID stLevelupHeroResult_ProtoFunID_ProtoFunID_MAX = stLevelupHeroResult_ProtoFunID_FunID;
const int stLevelupHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLevelupHeroResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelupHeroResult_ProtoFunID_descriptor();
inline const ::std::string& stLevelupHeroResult_ProtoFunID_Name(stLevelupHeroResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelupHeroResult_ProtoFunID_descriptor(), value);
}
inline bool stLevelupHeroResult_ProtoFunID_Parse(
    const ::std::string& name, stLevelupHeroResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelupHeroResult_ProtoFunID>(
    stLevelupHeroResult_ProtoFunID_descriptor(), name, value);
}
enum stReqHeroEvolution_ProtoModID {
  stReqHeroEvolution_ProtoModID_ModID = 2
};
bool stReqHeroEvolution_ProtoModID_IsValid(int value);
const stReqHeroEvolution_ProtoModID stReqHeroEvolution_ProtoModID_ProtoModID_MIN = stReqHeroEvolution_ProtoModID_ModID;
const stReqHeroEvolution_ProtoModID stReqHeroEvolution_ProtoModID_ProtoModID_MAX = stReqHeroEvolution_ProtoModID_ModID;
const int stReqHeroEvolution_ProtoModID_ProtoModID_ARRAYSIZE = stReqHeroEvolution_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroEvolution_ProtoModID_descriptor();
inline const ::std::string& stReqHeroEvolution_ProtoModID_Name(stReqHeroEvolution_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroEvolution_ProtoModID_descriptor(), value);
}
inline bool stReqHeroEvolution_ProtoModID_Parse(
    const ::std::string& name, stReqHeroEvolution_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroEvolution_ProtoModID>(
    stReqHeroEvolution_ProtoModID_descriptor(), name, value);
}
enum stReqHeroEvolution_ProtoFunID {
  stReqHeroEvolution_ProtoFunID_FunID = 33
};
bool stReqHeroEvolution_ProtoFunID_IsValid(int value);
const stReqHeroEvolution_ProtoFunID stReqHeroEvolution_ProtoFunID_ProtoFunID_MIN = stReqHeroEvolution_ProtoFunID_FunID;
const stReqHeroEvolution_ProtoFunID stReqHeroEvolution_ProtoFunID_ProtoFunID_MAX = stReqHeroEvolution_ProtoFunID_FunID;
const int stReqHeroEvolution_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqHeroEvolution_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroEvolution_ProtoFunID_descriptor();
inline const ::std::string& stReqHeroEvolution_ProtoFunID_Name(stReqHeroEvolution_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroEvolution_ProtoFunID_descriptor(), value);
}
inline bool stReqHeroEvolution_ProtoFunID_Parse(
    const ::std::string& name, stReqHeroEvolution_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroEvolution_ProtoFunID>(
    stReqHeroEvolution_ProtoFunID_descriptor(), name, value);
}
enum stEvolutionHeroResult_Result {
  stEvolutionHeroResult_Result_SUCCESS = 1,
  stEvolutionHeroResult_Result_NOT_ENOUGH_STONE = 2,
  stEvolutionHeroResult_Result_FULL_LEVEL = 3,
  stEvolutionHeroResult_Result_HERO_NOT_EXIST = 4,
  stEvolutionHeroResult_Result_INNER_ERROR = 5
};
bool stEvolutionHeroResult_Result_IsValid(int value);
const stEvolutionHeroResult_Result stEvolutionHeroResult_Result_Result_MIN = stEvolutionHeroResult_Result_SUCCESS;
const stEvolutionHeroResult_Result stEvolutionHeroResult_Result_Result_MAX = stEvolutionHeroResult_Result_INNER_ERROR;
const int stEvolutionHeroResult_Result_Result_ARRAYSIZE = stEvolutionHeroResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEvolutionHeroResult_Result_descriptor();
inline const ::std::string& stEvolutionHeroResult_Result_Name(stEvolutionHeroResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEvolutionHeroResult_Result_descriptor(), value);
}
inline bool stEvolutionHeroResult_Result_Parse(
    const ::std::string& name, stEvolutionHeroResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEvolutionHeroResult_Result>(
    stEvolutionHeroResult_Result_descriptor(), name, value);
}
enum stEvolutionHeroResult_ProtoModID {
  stEvolutionHeroResult_ProtoModID_ModID = 2
};
bool stEvolutionHeroResult_ProtoModID_IsValid(int value);
const stEvolutionHeroResult_ProtoModID stEvolutionHeroResult_ProtoModID_ProtoModID_MIN = stEvolutionHeroResult_ProtoModID_ModID;
const stEvolutionHeroResult_ProtoModID stEvolutionHeroResult_ProtoModID_ProtoModID_MAX = stEvolutionHeroResult_ProtoModID_ModID;
const int stEvolutionHeroResult_ProtoModID_ProtoModID_ARRAYSIZE = stEvolutionHeroResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEvolutionHeroResult_ProtoModID_descriptor();
inline const ::std::string& stEvolutionHeroResult_ProtoModID_Name(stEvolutionHeroResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEvolutionHeroResult_ProtoModID_descriptor(), value);
}
inline bool stEvolutionHeroResult_ProtoModID_Parse(
    const ::std::string& name, stEvolutionHeroResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEvolutionHeroResult_ProtoModID>(
    stEvolutionHeroResult_ProtoModID_descriptor(), name, value);
}
enum stEvolutionHeroResult_ProtoFunID {
  stEvolutionHeroResult_ProtoFunID_FunID = 34
};
bool stEvolutionHeroResult_ProtoFunID_IsValid(int value);
const stEvolutionHeroResult_ProtoFunID stEvolutionHeroResult_ProtoFunID_ProtoFunID_MIN = stEvolutionHeroResult_ProtoFunID_FunID;
const stEvolutionHeroResult_ProtoFunID stEvolutionHeroResult_ProtoFunID_ProtoFunID_MAX = stEvolutionHeroResult_ProtoFunID_FunID;
const int stEvolutionHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stEvolutionHeroResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stEvolutionHeroResult_ProtoFunID_descriptor();
inline const ::std::string& stEvolutionHeroResult_ProtoFunID_Name(stEvolutionHeroResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stEvolutionHeroResult_ProtoFunID_descriptor(), value);
}
inline bool stEvolutionHeroResult_ProtoFunID_Parse(
    const ::std::string& name, stEvolutionHeroResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stEvolutionHeroResult_ProtoFunID>(
    stEvolutionHeroResult_ProtoFunID_descriptor(), name, value);
}
enum stReqHeroStudySkill_Type {
  stReqHeroStudySkill_Type_USE_ITEM = 1,
  stReqHeroStudySkill_Type_USE_DIAMOND = 2
};
bool stReqHeroStudySkill_Type_IsValid(int value);
const stReqHeroStudySkill_Type stReqHeroStudySkill_Type_Type_MIN = stReqHeroStudySkill_Type_USE_ITEM;
const stReqHeroStudySkill_Type stReqHeroStudySkill_Type_Type_MAX = stReqHeroStudySkill_Type_USE_DIAMOND;
const int stReqHeroStudySkill_Type_Type_ARRAYSIZE = stReqHeroStudySkill_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroStudySkill_Type_descriptor();
inline const ::std::string& stReqHeroStudySkill_Type_Name(stReqHeroStudySkill_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroStudySkill_Type_descriptor(), value);
}
inline bool stReqHeroStudySkill_Type_Parse(
    const ::std::string& name, stReqHeroStudySkill_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroStudySkill_Type>(
    stReqHeroStudySkill_Type_descriptor(), name, value);
}
enum stReqHeroStudySkill_ProtoModID {
  stReqHeroStudySkill_ProtoModID_ModID = 2
};
bool stReqHeroStudySkill_ProtoModID_IsValid(int value);
const stReqHeroStudySkill_ProtoModID stReqHeroStudySkill_ProtoModID_ProtoModID_MIN = stReqHeroStudySkill_ProtoModID_ModID;
const stReqHeroStudySkill_ProtoModID stReqHeroStudySkill_ProtoModID_ProtoModID_MAX = stReqHeroStudySkill_ProtoModID_ModID;
const int stReqHeroStudySkill_ProtoModID_ProtoModID_ARRAYSIZE = stReqHeroStudySkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroStudySkill_ProtoModID_descriptor();
inline const ::std::string& stReqHeroStudySkill_ProtoModID_Name(stReqHeroStudySkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroStudySkill_ProtoModID_descriptor(), value);
}
inline bool stReqHeroStudySkill_ProtoModID_Parse(
    const ::std::string& name, stReqHeroStudySkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroStudySkill_ProtoModID>(
    stReqHeroStudySkill_ProtoModID_descriptor(), name, value);
}
enum stReqHeroStudySkill_ProtoFunID {
  stReqHeroStudySkill_ProtoFunID_FunID = 35
};
bool stReqHeroStudySkill_ProtoFunID_IsValid(int value);
const stReqHeroStudySkill_ProtoFunID stReqHeroStudySkill_ProtoFunID_ProtoFunID_MIN = stReqHeroStudySkill_ProtoFunID_FunID;
const stReqHeroStudySkill_ProtoFunID stReqHeroStudySkill_ProtoFunID_ProtoFunID_MAX = stReqHeroStudySkill_ProtoFunID_FunID;
const int stReqHeroStudySkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqHeroStudySkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroStudySkill_ProtoFunID_descriptor();
inline const ::std::string& stReqHeroStudySkill_ProtoFunID_Name(stReqHeroStudySkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroStudySkill_ProtoFunID_descriptor(), value);
}
inline bool stReqHeroStudySkill_ProtoFunID_Parse(
    const ::std::string& name, stReqHeroStudySkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroStudySkill_ProtoFunID>(
    stReqHeroStudySkill_ProtoFunID_descriptor(), name, value);
}
enum stHeroStudySkillResult_Result {
  stHeroStudySkillResult_Result_SUCCESS = 1,
  stHeroStudySkillResult_Result_NOT_ENOUGH_ITEM = 2,
  stHeroStudySkillResult_Result_NOT_ENOUGH_DIAMOND = 3,
  stHeroStudySkillResult_Result_USE_DIAMOND_NUM_NOT_ENOUGH = 4,
  stHeroStudySkillResult_Result_HERO_NOT_EXIST = 5,
  stHeroStudySkillResult_Result_INNER_ERROR = 6
};
bool stHeroStudySkillResult_Result_IsValid(int value);
const stHeroStudySkillResult_Result stHeroStudySkillResult_Result_Result_MIN = stHeroStudySkillResult_Result_SUCCESS;
const stHeroStudySkillResult_Result stHeroStudySkillResult_Result_Result_MAX = stHeroStudySkillResult_Result_INNER_ERROR;
const int stHeroStudySkillResult_Result_Result_ARRAYSIZE = stHeroStudySkillResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroStudySkillResult_Result_descriptor();
inline const ::std::string& stHeroStudySkillResult_Result_Name(stHeroStudySkillResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroStudySkillResult_Result_descriptor(), value);
}
inline bool stHeroStudySkillResult_Result_Parse(
    const ::std::string& name, stHeroStudySkillResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroStudySkillResult_Result>(
    stHeroStudySkillResult_Result_descriptor(), name, value);
}
enum stHeroStudySkillResult_ProtoModID {
  stHeroStudySkillResult_ProtoModID_ModID = 2
};
bool stHeroStudySkillResult_ProtoModID_IsValid(int value);
const stHeroStudySkillResult_ProtoModID stHeroStudySkillResult_ProtoModID_ProtoModID_MIN = stHeroStudySkillResult_ProtoModID_ModID;
const stHeroStudySkillResult_ProtoModID stHeroStudySkillResult_ProtoModID_ProtoModID_MAX = stHeroStudySkillResult_ProtoModID_ModID;
const int stHeroStudySkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stHeroStudySkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroStudySkillResult_ProtoModID_descriptor();
inline const ::std::string& stHeroStudySkillResult_ProtoModID_Name(stHeroStudySkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroStudySkillResult_ProtoModID_descriptor(), value);
}
inline bool stHeroStudySkillResult_ProtoModID_Parse(
    const ::std::string& name, stHeroStudySkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroStudySkillResult_ProtoModID>(
    stHeroStudySkillResult_ProtoModID_descriptor(), name, value);
}
enum stHeroStudySkillResult_ProtoFunID {
  stHeroStudySkillResult_ProtoFunID_FunID = 36
};
bool stHeroStudySkillResult_ProtoFunID_IsValid(int value);
const stHeroStudySkillResult_ProtoFunID stHeroStudySkillResult_ProtoFunID_ProtoFunID_MIN = stHeroStudySkillResult_ProtoFunID_FunID;
const stHeroStudySkillResult_ProtoFunID stHeroStudySkillResult_ProtoFunID_ProtoFunID_MAX = stHeroStudySkillResult_ProtoFunID_FunID;
const int stHeroStudySkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stHeroStudySkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHeroStudySkillResult_ProtoFunID_descriptor();
inline const ::std::string& stHeroStudySkillResult_ProtoFunID_Name(stHeroStudySkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHeroStudySkillResult_ProtoFunID_descriptor(), value);
}
inline bool stHeroStudySkillResult_ProtoFunID_Parse(
    const ::std::string& name, stHeroStudySkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHeroStudySkillResult_ProtoFunID>(
    stHeroStudySkillResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRefineHeroSkill_ProtoModID {
  stReqRefineHeroSkill_ProtoModID_ModID = 2
};
bool stReqRefineHeroSkill_ProtoModID_IsValid(int value);
const stReqRefineHeroSkill_ProtoModID stReqRefineHeroSkill_ProtoModID_ProtoModID_MIN = stReqRefineHeroSkill_ProtoModID_ModID;
const stReqRefineHeroSkill_ProtoModID stReqRefineHeroSkill_ProtoModID_ProtoModID_MAX = stReqRefineHeroSkill_ProtoModID_ModID;
const int stReqRefineHeroSkill_ProtoModID_ProtoModID_ARRAYSIZE = stReqRefineHeroSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefineHeroSkill_ProtoModID_descriptor();
inline const ::std::string& stReqRefineHeroSkill_ProtoModID_Name(stReqRefineHeroSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefineHeroSkill_ProtoModID_descriptor(), value);
}
inline bool stReqRefineHeroSkill_ProtoModID_Parse(
    const ::std::string& name, stReqRefineHeroSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefineHeroSkill_ProtoModID>(
    stReqRefineHeroSkill_ProtoModID_descriptor(), name, value);
}
enum stReqRefineHeroSkill_ProtoFunID {
  stReqRefineHeroSkill_ProtoFunID_FunID = 37
};
bool stReqRefineHeroSkill_ProtoFunID_IsValid(int value);
const stReqRefineHeroSkill_ProtoFunID stReqRefineHeroSkill_ProtoFunID_ProtoFunID_MIN = stReqRefineHeroSkill_ProtoFunID_FunID;
const stReqRefineHeroSkill_ProtoFunID stReqRefineHeroSkill_ProtoFunID_ProtoFunID_MAX = stReqRefineHeroSkill_ProtoFunID_FunID;
const int stReqRefineHeroSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRefineHeroSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefineHeroSkill_ProtoFunID_descriptor();
inline const ::std::string& stReqRefineHeroSkill_ProtoFunID_Name(stReqRefineHeroSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefineHeroSkill_ProtoFunID_descriptor(), value);
}
inline bool stReqRefineHeroSkill_ProtoFunID_Parse(
    const ::std::string& name, stReqRefineHeroSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefineHeroSkill_ProtoFunID>(
    stReqRefineHeroSkill_ProtoFunID_descriptor(), name, value);
}
enum stRefineHeroSkillResult_Result {
  stRefineHeroSkillResult_Result_SUCCESS = 1,
  stRefineHeroSkillResult_Result_HAS_NO_STUDY_SKILL = 2,
  stRefineHeroSkillResult_Result_HERO_NOT_EXIST = 3,
  stRefineHeroSkillResult_Result_INNER_ERROR = 4
};
bool stRefineHeroSkillResult_Result_IsValid(int value);
const stRefineHeroSkillResult_Result stRefineHeroSkillResult_Result_Result_MIN = stRefineHeroSkillResult_Result_SUCCESS;
const stRefineHeroSkillResult_Result stRefineHeroSkillResult_Result_Result_MAX = stRefineHeroSkillResult_Result_INNER_ERROR;
const int stRefineHeroSkillResult_Result_Result_ARRAYSIZE = stRefineHeroSkillResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefineHeroSkillResult_Result_descriptor();
inline const ::std::string& stRefineHeroSkillResult_Result_Name(stRefineHeroSkillResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefineHeroSkillResult_Result_descriptor(), value);
}
inline bool stRefineHeroSkillResult_Result_Parse(
    const ::std::string& name, stRefineHeroSkillResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefineHeroSkillResult_Result>(
    stRefineHeroSkillResult_Result_descriptor(), name, value);
}
enum stRefineHeroSkillResult_ProtoModID {
  stRefineHeroSkillResult_ProtoModID_ModID = 2
};
bool stRefineHeroSkillResult_ProtoModID_IsValid(int value);
const stRefineHeroSkillResult_ProtoModID stRefineHeroSkillResult_ProtoModID_ProtoModID_MIN = stRefineHeroSkillResult_ProtoModID_ModID;
const stRefineHeroSkillResult_ProtoModID stRefineHeroSkillResult_ProtoModID_ProtoModID_MAX = stRefineHeroSkillResult_ProtoModID_ModID;
const int stRefineHeroSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stRefineHeroSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefineHeroSkillResult_ProtoModID_descriptor();
inline const ::std::string& stRefineHeroSkillResult_ProtoModID_Name(stRefineHeroSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefineHeroSkillResult_ProtoModID_descriptor(), value);
}
inline bool stRefineHeroSkillResult_ProtoModID_Parse(
    const ::std::string& name, stRefineHeroSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefineHeroSkillResult_ProtoModID>(
    stRefineHeroSkillResult_ProtoModID_descriptor(), name, value);
}
enum stRefineHeroSkillResult_ProtoFunID {
  stRefineHeroSkillResult_ProtoFunID_FunID = 38
};
bool stRefineHeroSkillResult_ProtoFunID_IsValid(int value);
const stRefineHeroSkillResult_ProtoFunID stRefineHeroSkillResult_ProtoFunID_ProtoFunID_MIN = stRefineHeroSkillResult_ProtoFunID_FunID;
const stRefineHeroSkillResult_ProtoFunID stRefineHeroSkillResult_ProtoFunID_ProtoFunID_MAX = stRefineHeroSkillResult_ProtoFunID_FunID;
const int stRefineHeroSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefineHeroSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefineHeroSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stRefineHeroSkillResult_ProtoFunID_Name(stRefineHeroSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefineHeroSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stRefineHeroSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stRefineHeroSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefineHeroSkillResult_ProtoFunID>(
    stRefineHeroSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stSynSkillExp_ProtoModID {
  stSynSkillExp_ProtoModID_ModID = 2
};
bool stSynSkillExp_ProtoModID_IsValid(int value);
const stSynSkillExp_ProtoModID stSynSkillExp_ProtoModID_ProtoModID_MIN = stSynSkillExp_ProtoModID_ModID;
const stSynSkillExp_ProtoModID stSynSkillExp_ProtoModID_ProtoModID_MAX = stSynSkillExp_ProtoModID_ModID;
const int stSynSkillExp_ProtoModID_ProtoModID_ARRAYSIZE = stSynSkillExp_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynSkillExp_ProtoModID_descriptor();
inline const ::std::string& stSynSkillExp_ProtoModID_Name(stSynSkillExp_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynSkillExp_ProtoModID_descriptor(), value);
}
inline bool stSynSkillExp_ProtoModID_Parse(
    const ::std::string& name, stSynSkillExp_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynSkillExp_ProtoModID>(
    stSynSkillExp_ProtoModID_descriptor(), name, value);
}
enum stSynSkillExp_ProtoFunID {
  stSynSkillExp_ProtoFunID_FunID = 39
};
bool stSynSkillExp_ProtoFunID_IsValid(int value);
const stSynSkillExp_ProtoFunID stSynSkillExp_ProtoFunID_ProtoFunID_MIN = stSynSkillExp_ProtoFunID_FunID;
const stSynSkillExp_ProtoFunID stSynSkillExp_ProtoFunID_ProtoFunID_MAX = stSynSkillExp_ProtoFunID_FunID;
const int stSynSkillExp_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynSkillExp_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynSkillExp_ProtoFunID_descriptor();
inline const ::std::string& stSynSkillExp_ProtoFunID_Name(stSynSkillExp_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynSkillExp_ProtoFunID_descriptor(), value);
}
inline bool stSynSkillExp_ProtoFunID_Parse(
    const ::std::string& name, stSynSkillExp_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynSkillExp_ProtoFunID>(
    stSynSkillExp_ProtoFunID_descriptor(), name, value);
}
enum stReqReplaceHeroSkill_ProtoModID {
  stReqReplaceHeroSkill_ProtoModID_ModID = 2
};
bool stReqReplaceHeroSkill_ProtoModID_IsValid(int value);
const stReqReplaceHeroSkill_ProtoModID stReqReplaceHeroSkill_ProtoModID_ProtoModID_MIN = stReqReplaceHeroSkill_ProtoModID_ModID;
const stReqReplaceHeroSkill_ProtoModID stReqReplaceHeroSkill_ProtoModID_ProtoModID_MAX = stReqReplaceHeroSkill_ProtoModID_ModID;
const int stReqReplaceHeroSkill_ProtoModID_ProtoModID_ARRAYSIZE = stReqReplaceHeroSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReplaceHeroSkill_ProtoModID_descriptor();
inline const ::std::string& stReqReplaceHeroSkill_ProtoModID_Name(stReqReplaceHeroSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReplaceHeroSkill_ProtoModID_descriptor(), value);
}
inline bool stReqReplaceHeroSkill_ProtoModID_Parse(
    const ::std::string& name, stReqReplaceHeroSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReplaceHeroSkill_ProtoModID>(
    stReqReplaceHeroSkill_ProtoModID_descriptor(), name, value);
}
enum stReqReplaceHeroSkill_ProtoFunID {
  stReqReplaceHeroSkill_ProtoFunID_FunID = 40
};
bool stReqReplaceHeroSkill_ProtoFunID_IsValid(int value);
const stReqReplaceHeroSkill_ProtoFunID stReqReplaceHeroSkill_ProtoFunID_ProtoFunID_MIN = stReqReplaceHeroSkill_ProtoFunID_FunID;
const stReqReplaceHeroSkill_ProtoFunID stReqReplaceHeroSkill_ProtoFunID_ProtoFunID_MAX = stReqReplaceHeroSkill_ProtoFunID_FunID;
const int stReqReplaceHeroSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqReplaceHeroSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqReplaceHeroSkill_ProtoFunID_descriptor();
inline const ::std::string& stReqReplaceHeroSkill_ProtoFunID_Name(stReqReplaceHeroSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqReplaceHeroSkill_ProtoFunID_descriptor(), value);
}
inline bool stReqReplaceHeroSkill_ProtoFunID_Parse(
    const ::std::string& name, stReqReplaceHeroSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqReplaceHeroSkill_ProtoFunID>(
    stReqReplaceHeroSkill_ProtoFunID_descriptor(), name, value);
}
enum stReplaceHeroSkillResult_Result {
  stReplaceHeroSkillResult_Result_SUCCESS = 1,
  stReplaceHeroSkillResult_Result_HERO_NOT_EXIST = 2,
  stReplaceHeroSkillResult_Result_STUDY_SKILL_NOT_EXIST = 3,
  stReplaceHeroSkillResult_Result_SKILL_HAS_EQUIP = 4,
  stReplaceHeroSkillResult_Result_INNER_ERRRO = 5
};
bool stReplaceHeroSkillResult_Result_IsValid(int value);
const stReplaceHeroSkillResult_Result stReplaceHeroSkillResult_Result_Result_MIN = stReplaceHeroSkillResult_Result_SUCCESS;
const stReplaceHeroSkillResult_Result stReplaceHeroSkillResult_Result_Result_MAX = stReplaceHeroSkillResult_Result_INNER_ERRRO;
const int stReplaceHeroSkillResult_Result_Result_ARRAYSIZE = stReplaceHeroSkillResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplaceHeroSkillResult_Result_descriptor();
inline const ::std::string& stReplaceHeroSkillResult_Result_Name(stReplaceHeroSkillResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplaceHeroSkillResult_Result_descriptor(), value);
}
inline bool stReplaceHeroSkillResult_Result_Parse(
    const ::std::string& name, stReplaceHeroSkillResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplaceHeroSkillResult_Result>(
    stReplaceHeroSkillResult_Result_descriptor(), name, value);
}
enum stReplaceHeroSkillResult_ProtoModID {
  stReplaceHeroSkillResult_ProtoModID_ModID = 2
};
bool stReplaceHeroSkillResult_ProtoModID_IsValid(int value);
const stReplaceHeroSkillResult_ProtoModID stReplaceHeroSkillResult_ProtoModID_ProtoModID_MIN = stReplaceHeroSkillResult_ProtoModID_ModID;
const stReplaceHeroSkillResult_ProtoModID stReplaceHeroSkillResult_ProtoModID_ProtoModID_MAX = stReplaceHeroSkillResult_ProtoModID_ModID;
const int stReplaceHeroSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stReplaceHeroSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplaceHeroSkillResult_ProtoModID_descriptor();
inline const ::std::string& stReplaceHeroSkillResult_ProtoModID_Name(stReplaceHeroSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplaceHeroSkillResult_ProtoModID_descriptor(), value);
}
inline bool stReplaceHeroSkillResult_ProtoModID_Parse(
    const ::std::string& name, stReplaceHeroSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplaceHeroSkillResult_ProtoModID>(
    stReplaceHeroSkillResult_ProtoModID_descriptor(), name, value);
}
enum stReplaceHeroSkillResult_ProtoFunID {
  stReplaceHeroSkillResult_ProtoFunID_FunID = 41
};
bool stReplaceHeroSkillResult_ProtoFunID_IsValid(int value);
const stReplaceHeroSkillResult_ProtoFunID stReplaceHeroSkillResult_ProtoFunID_ProtoFunID_MIN = stReplaceHeroSkillResult_ProtoFunID_FunID;
const stReplaceHeroSkillResult_ProtoFunID stReplaceHeroSkillResult_ProtoFunID_ProtoFunID_MAX = stReplaceHeroSkillResult_ProtoFunID_FunID;
const int stReplaceHeroSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stReplaceHeroSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReplaceHeroSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stReplaceHeroSkillResult_ProtoFunID_Name(stReplaceHeroSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReplaceHeroSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stReplaceHeroSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stReplaceHeroSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReplaceHeroSkillResult_ProtoFunID>(
    stReplaceHeroSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stReqUpgradeHeroSkill_ProtoModID {
  stReqUpgradeHeroSkill_ProtoModID_ModID = 2
};
bool stReqUpgradeHeroSkill_ProtoModID_IsValid(int value);
const stReqUpgradeHeroSkill_ProtoModID stReqUpgradeHeroSkill_ProtoModID_ProtoModID_MIN = stReqUpgradeHeroSkill_ProtoModID_ModID;
const stReqUpgradeHeroSkill_ProtoModID stReqUpgradeHeroSkill_ProtoModID_ProtoModID_MAX = stReqUpgradeHeroSkill_ProtoModID_ModID;
const int stReqUpgradeHeroSkill_ProtoModID_ProtoModID_ARRAYSIZE = stReqUpgradeHeroSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUpgradeHeroSkill_ProtoModID_descriptor();
inline const ::std::string& stReqUpgradeHeroSkill_ProtoModID_Name(stReqUpgradeHeroSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUpgradeHeroSkill_ProtoModID_descriptor(), value);
}
inline bool stReqUpgradeHeroSkill_ProtoModID_Parse(
    const ::std::string& name, stReqUpgradeHeroSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUpgradeHeroSkill_ProtoModID>(
    stReqUpgradeHeroSkill_ProtoModID_descriptor(), name, value);
}
enum stReqUpgradeHeroSkill_ProtoFunID {
  stReqUpgradeHeroSkill_ProtoFunID_FunID = 42
};
bool stReqUpgradeHeroSkill_ProtoFunID_IsValid(int value);
const stReqUpgradeHeroSkill_ProtoFunID stReqUpgradeHeroSkill_ProtoFunID_ProtoFunID_MIN = stReqUpgradeHeroSkill_ProtoFunID_FunID;
const stReqUpgradeHeroSkill_ProtoFunID stReqUpgradeHeroSkill_ProtoFunID_ProtoFunID_MAX = stReqUpgradeHeroSkill_ProtoFunID_FunID;
const int stReqUpgradeHeroSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUpgradeHeroSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUpgradeHeroSkill_ProtoFunID_descriptor();
inline const ::std::string& stReqUpgradeHeroSkill_ProtoFunID_Name(stReqUpgradeHeroSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUpgradeHeroSkill_ProtoFunID_descriptor(), value);
}
inline bool stReqUpgradeHeroSkill_ProtoFunID_Parse(
    const ::std::string& name, stReqUpgradeHeroSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUpgradeHeroSkill_ProtoFunID>(
    stReqUpgradeHeroSkill_ProtoFunID_descriptor(), name, value);
}
enum stUpgradeHeroSkillResult_Result {
  stUpgradeHeroSkillResult_Result_SUCCESS = 1,
  stUpgradeHeroSkillResult_Result_NOT_ENOUGH_EXP = 2,
  stUpgradeHeroSkillResult_Result_HERO_NOT_EXIST = 3,
  stUpgradeHeroSkillResult_Result_SKILL_NOT_EXIST = 4,
  stUpgradeHeroSkillResult_Result_INNER_ERROR = 5
};
bool stUpgradeHeroSkillResult_Result_IsValid(int value);
const stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult_Result_Result_MIN = stUpgradeHeroSkillResult_Result_SUCCESS;
const stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult_Result_Result_MAX = stUpgradeHeroSkillResult_Result_INNER_ERROR;
const int stUpgradeHeroSkillResult_Result_Result_ARRAYSIZE = stUpgradeHeroSkillResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeHeroSkillResult_Result_descriptor();
inline const ::std::string& stUpgradeHeroSkillResult_Result_Name(stUpgradeHeroSkillResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeHeroSkillResult_Result_descriptor(), value);
}
inline bool stUpgradeHeroSkillResult_Result_Parse(
    const ::std::string& name, stUpgradeHeroSkillResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeHeroSkillResult_Result>(
    stUpgradeHeroSkillResult_Result_descriptor(), name, value);
}
enum stUpgradeHeroSkillResult_ProtoModID {
  stUpgradeHeroSkillResult_ProtoModID_ModID = 2
};
bool stUpgradeHeroSkillResult_ProtoModID_IsValid(int value);
const stUpgradeHeroSkillResult_ProtoModID stUpgradeHeroSkillResult_ProtoModID_ProtoModID_MIN = stUpgradeHeroSkillResult_ProtoModID_ModID;
const stUpgradeHeroSkillResult_ProtoModID stUpgradeHeroSkillResult_ProtoModID_ProtoModID_MAX = stUpgradeHeroSkillResult_ProtoModID_ModID;
const int stUpgradeHeroSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stUpgradeHeroSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeHeroSkillResult_ProtoModID_descriptor();
inline const ::std::string& stUpgradeHeroSkillResult_ProtoModID_Name(stUpgradeHeroSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeHeroSkillResult_ProtoModID_descriptor(), value);
}
inline bool stUpgradeHeroSkillResult_ProtoModID_Parse(
    const ::std::string& name, stUpgradeHeroSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeHeroSkillResult_ProtoModID>(
    stUpgradeHeroSkillResult_ProtoModID_descriptor(), name, value);
}
enum stUpgradeHeroSkillResult_ProtoFunID {
  stUpgradeHeroSkillResult_ProtoFunID_FunID = 43
};
bool stUpgradeHeroSkillResult_ProtoFunID_IsValid(int value);
const stUpgradeHeroSkillResult_ProtoFunID stUpgradeHeroSkillResult_ProtoFunID_ProtoFunID_MIN = stUpgradeHeroSkillResult_ProtoFunID_FunID;
const stUpgradeHeroSkillResult_ProtoFunID stUpgradeHeroSkillResult_ProtoFunID_ProtoFunID_MAX = stUpgradeHeroSkillResult_ProtoFunID_FunID;
const int stUpgradeHeroSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stUpgradeHeroSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeHeroSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stUpgradeHeroSkillResult_ProtoFunID_Name(stUpgradeHeroSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeHeroSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stUpgradeHeroSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stUpgradeHeroSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeHeroSkillResult_ProtoFunID>(
    stUpgradeHeroSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stReqSellItem_ProtoModID {
  stReqSellItem_ProtoModID_ModID = 2
};
bool stReqSellItem_ProtoModID_IsValid(int value);
const stReqSellItem_ProtoModID stReqSellItem_ProtoModID_ProtoModID_MIN = stReqSellItem_ProtoModID_ModID;
const stReqSellItem_ProtoModID stReqSellItem_ProtoModID_ProtoModID_MAX = stReqSellItem_ProtoModID_ModID;
const int stReqSellItem_ProtoModID_ProtoModID_ARRAYSIZE = stReqSellItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSellItem_ProtoModID_descriptor();
inline const ::std::string& stReqSellItem_ProtoModID_Name(stReqSellItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSellItem_ProtoModID_descriptor(), value);
}
inline bool stReqSellItem_ProtoModID_Parse(
    const ::std::string& name, stReqSellItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSellItem_ProtoModID>(
    stReqSellItem_ProtoModID_descriptor(), name, value);
}
enum stReqSellItem_ProtoFunID {
  stReqSellItem_ProtoFunID_FunID = 44
};
bool stReqSellItem_ProtoFunID_IsValid(int value);
const stReqSellItem_ProtoFunID stReqSellItem_ProtoFunID_ProtoFunID_MIN = stReqSellItem_ProtoFunID_FunID;
const stReqSellItem_ProtoFunID stReqSellItem_ProtoFunID_ProtoFunID_MAX = stReqSellItem_ProtoFunID_FunID;
const int stReqSellItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSellItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSellItem_ProtoFunID_descriptor();
inline const ::std::string& stReqSellItem_ProtoFunID_Name(stReqSellItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSellItem_ProtoFunID_descriptor(), value);
}
inline bool stReqSellItem_ProtoFunID_Parse(
    const ::std::string& name, stReqSellItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSellItem_ProtoFunID>(
    stReqSellItem_ProtoFunID_descriptor(), name, value);
}
enum stSellItemResult_Result {
  stSellItemResult_Result_SUCCESS = 1,
  stSellItemResult_Result_NOT_EXIST = 2,
  stSellItemResult_Result_CAN_NOT_SELL = 3
};
bool stSellItemResult_Result_IsValid(int value);
const stSellItemResult_Result stSellItemResult_Result_Result_MIN = stSellItemResult_Result_SUCCESS;
const stSellItemResult_Result stSellItemResult_Result_Result_MAX = stSellItemResult_Result_CAN_NOT_SELL;
const int stSellItemResult_Result_Result_ARRAYSIZE = stSellItemResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSellItemResult_Result_descriptor();
inline const ::std::string& stSellItemResult_Result_Name(stSellItemResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSellItemResult_Result_descriptor(), value);
}
inline bool stSellItemResult_Result_Parse(
    const ::std::string& name, stSellItemResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSellItemResult_Result>(
    stSellItemResult_Result_descriptor(), name, value);
}
enum stSellItemResult_ProtoModID {
  stSellItemResult_ProtoModID_ModID = 2
};
bool stSellItemResult_ProtoModID_IsValid(int value);
const stSellItemResult_ProtoModID stSellItemResult_ProtoModID_ProtoModID_MIN = stSellItemResult_ProtoModID_ModID;
const stSellItemResult_ProtoModID stSellItemResult_ProtoModID_ProtoModID_MAX = stSellItemResult_ProtoModID_ModID;
const int stSellItemResult_ProtoModID_ProtoModID_ARRAYSIZE = stSellItemResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSellItemResult_ProtoModID_descriptor();
inline const ::std::string& stSellItemResult_ProtoModID_Name(stSellItemResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSellItemResult_ProtoModID_descriptor(), value);
}
inline bool stSellItemResult_ProtoModID_Parse(
    const ::std::string& name, stSellItemResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSellItemResult_ProtoModID>(
    stSellItemResult_ProtoModID_descriptor(), name, value);
}
enum stSellItemResult_ProtoFunID {
  stSellItemResult_ProtoFunID_FunID = 45
};
bool stSellItemResult_ProtoFunID_IsValid(int value);
const stSellItemResult_ProtoFunID stSellItemResult_ProtoFunID_ProtoFunID_MIN = stSellItemResult_ProtoFunID_FunID;
const stSellItemResult_ProtoFunID stSellItemResult_ProtoFunID_ProtoFunID_MAX = stSellItemResult_ProtoFunID_FunID;
const int stSellItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSellItemResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSellItemResult_ProtoFunID_descriptor();
inline const ::std::string& stSellItemResult_ProtoFunID_Name(stSellItemResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSellItemResult_ProtoFunID_descriptor(), value);
}
inline bool stSellItemResult_ProtoFunID_Parse(
    const ::std::string& name, stSellItemResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSellItemResult_ProtoFunID>(
    stSellItemResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRaiseItem_eRaiseType {
  stReqRaiseItem_eRaiseType_USE_STONE = 1,
  stReqRaiseItem_eRaiseType_USE_EQUIP = 2
};
bool stReqRaiseItem_eRaiseType_IsValid(int value);
const stReqRaiseItem_eRaiseType stReqRaiseItem_eRaiseType_eRaiseType_MIN = stReqRaiseItem_eRaiseType_USE_STONE;
const stReqRaiseItem_eRaiseType stReqRaiseItem_eRaiseType_eRaiseType_MAX = stReqRaiseItem_eRaiseType_USE_EQUIP;
const int stReqRaiseItem_eRaiseType_eRaiseType_ARRAYSIZE = stReqRaiseItem_eRaiseType_eRaiseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRaiseItem_eRaiseType_descriptor();
inline const ::std::string& stReqRaiseItem_eRaiseType_Name(stReqRaiseItem_eRaiseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRaiseItem_eRaiseType_descriptor(), value);
}
inline bool stReqRaiseItem_eRaiseType_Parse(
    const ::std::string& name, stReqRaiseItem_eRaiseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRaiseItem_eRaiseType>(
    stReqRaiseItem_eRaiseType_descriptor(), name, value);
}
enum stReqRaiseItem_ProtoModID {
  stReqRaiseItem_ProtoModID_ModID = 2
};
bool stReqRaiseItem_ProtoModID_IsValid(int value);
const stReqRaiseItem_ProtoModID stReqRaiseItem_ProtoModID_ProtoModID_MIN = stReqRaiseItem_ProtoModID_ModID;
const stReqRaiseItem_ProtoModID stReqRaiseItem_ProtoModID_ProtoModID_MAX = stReqRaiseItem_ProtoModID_ModID;
const int stReqRaiseItem_ProtoModID_ProtoModID_ARRAYSIZE = stReqRaiseItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRaiseItem_ProtoModID_descriptor();
inline const ::std::string& stReqRaiseItem_ProtoModID_Name(stReqRaiseItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRaiseItem_ProtoModID_descriptor(), value);
}
inline bool stReqRaiseItem_ProtoModID_Parse(
    const ::std::string& name, stReqRaiseItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRaiseItem_ProtoModID>(
    stReqRaiseItem_ProtoModID_descriptor(), name, value);
}
enum stReqRaiseItem_ProtoFunID {
  stReqRaiseItem_ProtoFunID_FunID = 46
};
bool stReqRaiseItem_ProtoFunID_IsValid(int value);
const stReqRaiseItem_ProtoFunID stReqRaiseItem_ProtoFunID_ProtoFunID_MIN = stReqRaiseItem_ProtoFunID_FunID;
const stReqRaiseItem_ProtoFunID stReqRaiseItem_ProtoFunID_ProtoFunID_MAX = stReqRaiseItem_ProtoFunID_FunID;
const int stReqRaiseItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRaiseItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRaiseItem_ProtoFunID_descriptor();
inline const ::std::string& stReqRaiseItem_ProtoFunID_Name(stReqRaiseItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRaiseItem_ProtoFunID_descriptor(), value);
}
inline bool stReqRaiseItem_ProtoFunID_Parse(
    const ::std::string& name, stReqRaiseItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRaiseItem_ProtoFunID>(
    stReqRaiseItem_ProtoFunID_descriptor(), name, value);
}
enum stRaiseItemResult_Result {
  stRaiseItemResult_Result_SUCCESS = 1,
  stRaiseItemResult_Result_EQUIP_NOT_EXIST = 2,
  stRaiseItemResult_Result_STONE_NOT_EXIST = 3,
  stRaiseItemResult_Result_MONEY_NOT_ENOUGH = 4,
  stRaiseItemResult_Result_INNER_ERROR = 5,
  stRaiseItemResult_Result_ROLE_LV_LIMIT = 6
};
bool stRaiseItemResult_Result_IsValid(int value);
const stRaiseItemResult_Result stRaiseItemResult_Result_Result_MIN = stRaiseItemResult_Result_SUCCESS;
const stRaiseItemResult_Result stRaiseItemResult_Result_Result_MAX = stRaiseItemResult_Result_ROLE_LV_LIMIT;
const int stRaiseItemResult_Result_Result_ARRAYSIZE = stRaiseItemResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRaiseItemResult_Result_descriptor();
inline const ::std::string& stRaiseItemResult_Result_Name(stRaiseItemResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRaiseItemResult_Result_descriptor(), value);
}
inline bool stRaiseItemResult_Result_Parse(
    const ::std::string& name, stRaiseItemResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRaiseItemResult_Result>(
    stRaiseItemResult_Result_descriptor(), name, value);
}
enum stRaiseItemResult_ProtoModID {
  stRaiseItemResult_ProtoModID_ModID = 2
};
bool stRaiseItemResult_ProtoModID_IsValid(int value);
const stRaiseItemResult_ProtoModID stRaiseItemResult_ProtoModID_ProtoModID_MIN = stRaiseItemResult_ProtoModID_ModID;
const stRaiseItemResult_ProtoModID stRaiseItemResult_ProtoModID_ProtoModID_MAX = stRaiseItemResult_ProtoModID_ModID;
const int stRaiseItemResult_ProtoModID_ProtoModID_ARRAYSIZE = stRaiseItemResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRaiseItemResult_ProtoModID_descriptor();
inline const ::std::string& stRaiseItemResult_ProtoModID_Name(stRaiseItemResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRaiseItemResult_ProtoModID_descriptor(), value);
}
inline bool stRaiseItemResult_ProtoModID_Parse(
    const ::std::string& name, stRaiseItemResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRaiseItemResult_ProtoModID>(
    stRaiseItemResult_ProtoModID_descriptor(), name, value);
}
enum stRaiseItemResult_ProtoFunID {
  stRaiseItemResult_ProtoFunID_FunID = 47
};
bool stRaiseItemResult_ProtoFunID_IsValid(int value);
const stRaiseItemResult_ProtoFunID stRaiseItemResult_ProtoFunID_ProtoFunID_MIN = stRaiseItemResult_ProtoFunID_FunID;
const stRaiseItemResult_ProtoFunID stRaiseItemResult_ProtoFunID_ProtoFunID_MAX = stRaiseItemResult_ProtoFunID_FunID;
const int stRaiseItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRaiseItemResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRaiseItemResult_ProtoFunID_descriptor();
inline const ::std::string& stRaiseItemResult_ProtoFunID_Name(stRaiseItemResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRaiseItemResult_ProtoFunID_descriptor(), value);
}
inline bool stRaiseItemResult_ProtoFunID_Parse(
    const ::std::string& name, stRaiseItemResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRaiseItemResult_ProtoFunID>(
    stRaiseItemResult_ProtoFunID_descriptor(), name, value);
}
enum stReqSmeltEquip_ProtoModID {
  stReqSmeltEquip_ProtoModID_ModID = 2
};
bool stReqSmeltEquip_ProtoModID_IsValid(int value);
const stReqSmeltEquip_ProtoModID stReqSmeltEquip_ProtoModID_ProtoModID_MIN = stReqSmeltEquip_ProtoModID_ModID;
const stReqSmeltEquip_ProtoModID stReqSmeltEquip_ProtoModID_ProtoModID_MAX = stReqSmeltEquip_ProtoModID_ModID;
const int stReqSmeltEquip_ProtoModID_ProtoModID_ARRAYSIZE = stReqSmeltEquip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSmeltEquip_ProtoModID_descriptor();
inline const ::std::string& stReqSmeltEquip_ProtoModID_Name(stReqSmeltEquip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSmeltEquip_ProtoModID_descriptor(), value);
}
inline bool stReqSmeltEquip_ProtoModID_Parse(
    const ::std::string& name, stReqSmeltEquip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSmeltEquip_ProtoModID>(
    stReqSmeltEquip_ProtoModID_descriptor(), name, value);
}
enum stReqSmeltEquip_ProtoFunID {
  stReqSmeltEquip_ProtoFunID_FunID = 48
};
bool stReqSmeltEquip_ProtoFunID_IsValid(int value);
const stReqSmeltEquip_ProtoFunID stReqSmeltEquip_ProtoFunID_ProtoFunID_MIN = stReqSmeltEquip_ProtoFunID_FunID;
const stReqSmeltEquip_ProtoFunID stReqSmeltEquip_ProtoFunID_ProtoFunID_MAX = stReqSmeltEquip_ProtoFunID_FunID;
const int stReqSmeltEquip_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSmeltEquip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSmeltEquip_ProtoFunID_descriptor();
inline const ::std::string& stReqSmeltEquip_ProtoFunID_Name(stReqSmeltEquip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSmeltEquip_ProtoFunID_descriptor(), value);
}
inline bool stReqSmeltEquip_ProtoFunID_Parse(
    const ::std::string& name, stReqSmeltEquip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSmeltEquip_ProtoFunID>(
    stReqSmeltEquip_ProtoFunID_descriptor(), name, value);
}
enum stSmeltEquipResult_Result {
  stSmeltEquipResult_Result_SUCCESS = 1,
  stSmeltEquipResult_Result_BAG_FULL = 2,
  stSmeltEquipResult_Result_CANNT_SMELT = 3,
  stSmeltEquipResult_Result_EQUIP_NOT_EXIST = 4,
  stSmeltEquipResult_Result_INNER_ERROR = 5
};
bool stSmeltEquipResult_Result_IsValid(int value);
const stSmeltEquipResult_Result stSmeltEquipResult_Result_Result_MIN = stSmeltEquipResult_Result_SUCCESS;
const stSmeltEquipResult_Result stSmeltEquipResult_Result_Result_MAX = stSmeltEquipResult_Result_INNER_ERROR;
const int stSmeltEquipResult_Result_Result_ARRAYSIZE = stSmeltEquipResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSmeltEquipResult_Result_descriptor();
inline const ::std::string& stSmeltEquipResult_Result_Name(stSmeltEquipResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSmeltEquipResult_Result_descriptor(), value);
}
inline bool stSmeltEquipResult_Result_Parse(
    const ::std::string& name, stSmeltEquipResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSmeltEquipResult_Result>(
    stSmeltEquipResult_Result_descriptor(), name, value);
}
enum stSmeltEquipResult_ProtoModID {
  stSmeltEquipResult_ProtoModID_ModID = 2
};
bool stSmeltEquipResult_ProtoModID_IsValid(int value);
const stSmeltEquipResult_ProtoModID stSmeltEquipResult_ProtoModID_ProtoModID_MIN = stSmeltEquipResult_ProtoModID_ModID;
const stSmeltEquipResult_ProtoModID stSmeltEquipResult_ProtoModID_ProtoModID_MAX = stSmeltEquipResult_ProtoModID_ModID;
const int stSmeltEquipResult_ProtoModID_ProtoModID_ARRAYSIZE = stSmeltEquipResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSmeltEquipResult_ProtoModID_descriptor();
inline const ::std::string& stSmeltEquipResult_ProtoModID_Name(stSmeltEquipResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSmeltEquipResult_ProtoModID_descriptor(), value);
}
inline bool stSmeltEquipResult_ProtoModID_Parse(
    const ::std::string& name, stSmeltEquipResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSmeltEquipResult_ProtoModID>(
    stSmeltEquipResult_ProtoModID_descriptor(), name, value);
}
enum stSmeltEquipResult_ProtoFunID {
  stSmeltEquipResult_ProtoFunID_FunID = 49
};
bool stSmeltEquipResult_ProtoFunID_IsValid(int value);
const stSmeltEquipResult_ProtoFunID stSmeltEquipResult_ProtoFunID_ProtoFunID_MIN = stSmeltEquipResult_ProtoFunID_FunID;
const stSmeltEquipResult_ProtoFunID stSmeltEquipResult_ProtoFunID_ProtoFunID_MAX = stSmeltEquipResult_ProtoFunID_FunID;
const int stSmeltEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSmeltEquipResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSmeltEquipResult_ProtoFunID_descriptor();
inline const ::std::string& stSmeltEquipResult_ProtoFunID_Name(stSmeltEquipResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSmeltEquipResult_ProtoFunID_descriptor(), value);
}
inline bool stSmeltEquipResult_ProtoFunID_Parse(
    const ::std::string& name, stSmeltEquipResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSmeltEquipResult_ProtoFunID>(
    stSmeltEquipResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRecastEquip_ProtoModID {
  stReqRecastEquip_ProtoModID_ModID = 2
};
bool stReqRecastEquip_ProtoModID_IsValid(int value);
const stReqRecastEquip_ProtoModID stReqRecastEquip_ProtoModID_ProtoModID_MIN = stReqRecastEquip_ProtoModID_ModID;
const stReqRecastEquip_ProtoModID stReqRecastEquip_ProtoModID_ProtoModID_MAX = stReqRecastEquip_ProtoModID_ModID;
const int stReqRecastEquip_ProtoModID_ProtoModID_ARRAYSIZE = stReqRecastEquip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecastEquip_ProtoModID_descriptor();
inline const ::std::string& stReqRecastEquip_ProtoModID_Name(stReqRecastEquip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecastEquip_ProtoModID_descriptor(), value);
}
inline bool stReqRecastEquip_ProtoModID_Parse(
    const ::std::string& name, stReqRecastEquip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecastEquip_ProtoModID>(
    stReqRecastEquip_ProtoModID_descriptor(), name, value);
}
enum stReqRecastEquip_ProtoFunID {
  stReqRecastEquip_ProtoFunID_FunID = 50
};
bool stReqRecastEquip_ProtoFunID_IsValid(int value);
const stReqRecastEquip_ProtoFunID stReqRecastEquip_ProtoFunID_ProtoFunID_MIN = stReqRecastEquip_ProtoFunID_FunID;
const stReqRecastEquip_ProtoFunID stReqRecastEquip_ProtoFunID_ProtoFunID_MAX = stReqRecastEquip_ProtoFunID_FunID;
const int stReqRecastEquip_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRecastEquip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecastEquip_ProtoFunID_descriptor();
inline const ::std::string& stReqRecastEquip_ProtoFunID_Name(stReqRecastEquip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecastEquip_ProtoFunID_descriptor(), value);
}
inline bool stReqRecastEquip_ProtoFunID_Parse(
    const ::std::string& name, stReqRecastEquip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecastEquip_ProtoFunID>(
    stReqRecastEquip_ProtoFunID_descriptor(), name, value);
}
enum RecastEquipResult_Result {
  RecastEquipResult_Result_SUCCESS = 1,
  RecastEquipResult_Result_DIAMOND_NOT_ENOUGH = 2,
  RecastEquipResult_Result_BAG_FULL = 3,
  RecastEquipResult_Result_CANNT_SMELT = 4,
  RecastEquipResult_Result_EQUIP_NOT_EXIST = 5,
  RecastEquipResult_Result_INNER_ERROR = 6
};
bool RecastEquipResult_Result_IsValid(int value);
const RecastEquipResult_Result RecastEquipResult_Result_Result_MIN = RecastEquipResult_Result_SUCCESS;
const RecastEquipResult_Result RecastEquipResult_Result_Result_MAX = RecastEquipResult_Result_INNER_ERROR;
const int RecastEquipResult_Result_Result_ARRAYSIZE = RecastEquipResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecastEquipResult_Result_descriptor();
inline const ::std::string& RecastEquipResult_Result_Name(RecastEquipResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecastEquipResult_Result_descriptor(), value);
}
inline bool RecastEquipResult_Result_Parse(
    const ::std::string& name, RecastEquipResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecastEquipResult_Result>(
    RecastEquipResult_Result_descriptor(), name, value);
}
enum RecastEquipResult_ProtoModID {
  RecastEquipResult_ProtoModID_ModID = 2
};
bool RecastEquipResult_ProtoModID_IsValid(int value);
const RecastEquipResult_ProtoModID RecastEquipResult_ProtoModID_ProtoModID_MIN = RecastEquipResult_ProtoModID_ModID;
const RecastEquipResult_ProtoModID RecastEquipResult_ProtoModID_ProtoModID_MAX = RecastEquipResult_ProtoModID_ModID;
const int RecastEquipResult_ProtoModID_ProtoModID_ARRAYSIZE = RecastEquipResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecastEquipResult_ProtoModID_descriptor();
inline const ::std::string& RecastEquipResult_ProtoModID_Name(RecastEquipResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecastEquipResult_ProtoModID_descriptor(), value);
}
inline bool RecastEquipResult_ProtoModID_Parse(
    const ::std::string& name, RecastEquipResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecastEquipResult_ProtoModID>(
    RecastEquipResult_ProtoModID_descriptor(), name, value);
}
enum RecastEquipResult_ProtoFunID {
  RecastEquipResult_ProtoFunID_FunID = 51
};
bool RecastEquipResult_ProtoFunID_IsValid(int value);
const RecastEquipResult_ProtoFunID RecastEquipResult_ProtoFunID_ProtoFunID_MIN = RecastEquipResult_ProtoFunID_FunID;
const RecastEquipResult_ProtoFunID RecastEquipResult_ProtoFunID_ProtoFunID_MAX = RecastEquipResult_ProtoFunID_FunID;
const int RecastEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE = RecastEquipResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RecastEquipResult_ProtoFunID_descriptor();
inline const ::std::string& RecastEquipResult_ProtoFunID_Name(RecastEquipResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RecastEquipResult_ProtoFunID_descriptor(), value);
}
inline bool RecastEquipResult_ProtoFunID_Parse(
    const ::std::string& name, RecastEquipResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RecastEquipResult_ProtoFunID>(
    RecastEquipResult_ProtoFunID_descriptor(), name, value);
}
enum stReqCombineItem_ProtoModID {
  stReqCombineItem_ProtoModID_ModID = 2
};
bool stReqCombineItem_ProtoModID_IsValid(int value);
const stReqCombineItem_ProtoModID stReqCombineItem_ProtoModID_ProtoModID_MIN = stReqCombineItem_ProtoModID_ModID;
const stReqCombineItem_ProtoModID stReqCombineItem_ProtoModID_ProtoModID_MAX = stReqCombineItem_ProtoModID_ModID;
const int stReqCombineItem_ProtoModID_ProtoModID_ARRAYSIZE = stReqCombineItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCombineItem_ProtoModID_descriptor();
inline const ::std::string& stReqCombineItem_ProtoModID_Name(stReqCombineItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCombineItem_ProtoModID_descriptor(), value);
}
inline bool stReqCombineItem_ProtoModID_Parse(
    const ::std::string& name, stReqCombineItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCombineItem_ProtoModID>(
    stReqCombineItem_ProtoModID_descriptor(), name, value);
}
enum stReqCombineItem_ProtoFunID {
  stReqCombineItem_ProtoFunID_FunID = 52
};
bool stReqCombineItem_ProtoFunID_IsValid(int value);
const stReqCombineItem_ProtoFunID stReqCombineItem_ProtoFunID_ProtoFunID_MIN = stReqCombineItem_ProtoFunID_FunID;
const stReqCombineItem_ProtoFunID stReqCombineItem_ProtoFunID_ProtoFunID_MAX = stReqCombineItem_ProtoFunID_FunID;
const int stReqCombineItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCombineItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCombineItem_ProtoFunID_descriptor();
inline const ::std::string& stReqCombineItem_ProtoFunID_Name(stReqCombineItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCombineItem_ProtoFunID_descriptor(), value);
}
inline bool stReqCombineItem_ProtoFunID_Parse(
    const ::std::string& name, stReqCombineItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCombineItem_ProtoFunID>(
    stReqCombineItem_ProtoFunID_descriptor(), name, value);
}
enum stCombineItemResult_Result {
  stCombineItemResult_Result_SUCCESS = 1,
  stCombineItemResult_Result_FAILURE = 2,
  stCombineItemResult_Result_BAG_FULL = 3,
  stCombineItemResult_Result_NOT_ENOUGH_PIECE = 4
};
bool stCombineItemResult_Result_IsValid(int value);
const stCombineItemResult_Result stCombineItemResult_Result_Result_MIN = stCombineItemResult_Result_SUCCESS;
const stCombineItemResult_Result stCombineItemResult_Result_Result_MAX = stCombineItemResult_Result_NOT_ENOUGH_PIECE;
const int stCombineItemResult_Result_Result_ARRAYSIZE = stCombineItemResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCombineItemResult_Result_descriptor();
inline const ::std::string& stCombineItemResult_Result_Name(stCombineItemResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCombineItemResult_Result_descriptor(), value);
}
inline bool stCombineItemResult_Result_Parse(
    const ::std::string& name, stCombineItemResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCombineItemResult_Result>(
    stCombineItemResult_Result_descriptor(), name, value);
}
enum stCombineItemResult_ProtoModID {
  stCombineItemResult_ProtoModID_ModID = 2
};
bool stCombineItemResult_ProtoModID_IsValid(int value);
const stCombineItemResult_ProtoModID stCombineItemResult_ProtoModID_ProtoModID_MIN = stCombineItemResult_ProtoModID_ModID;
const stCombineItemResult_ProtoModID stCombineItemResult_ProtoModID_ProtoModID_MAX = stCombineItemResult_ProtoModID_ModID;
const int stCombineItemResult_ProtoModID_ProtoModID_ARRAYSIZE = stCombineItemResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCombineItemResult_ProtoModID_descriptor();
inline const ::std::string& stCombineItemResult_ProtoModID_Name(stCombineItemResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCombineItemResult_ProtoModID_descriptor(), value);
}
inline bool stCombineItemResult_ProtoModID_Parse(
    const ::std::string& name, stCombineItemResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCombineItemResult_ProtoModID>(
    stCombineItemResult_ProtoModID_descriptor(), name, value);
}
enum stCombineItemResult_ProtoFunID {
  stCombineItemResult_ProtoFunID_FunID = 53
};
bool stCombineItemResult_ProtoFunID_IsValid(int value);
const stCombineItemResult_ProtoFunID stCombineItemResult_ProtoFunID_ProtoFunID_MIN = stCombineItemResult_ProtoFunID_FunID;
const stCombineItemResult_ProtoFunID stCombineItemResult_ProtoFunID_ProtoFunID_MAX = stCombineItemResult_ProtoFunID_FunID;
const int stCombineItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCombineItemResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCombineItemResult_ProtoFunID_descriptor();
inline const ::std::string& stCombineItemResult_ProtoFunID_Name(stCombineItemResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCombineItemResult_ProtoFunID_descriptor(), value);
}
inline bool stCombineItemResult_ProtoFunID_Parse(
    const ::std::string& name, stCombineItemResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCombineItemResult_ProtoFunID>(
    stCombineItemResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRefreshShoplist_ProtoModID {
  stReqRefreshShoplist_ProtoModID_ModID = 2
};
bool stReqRefreshShoplist_ProtoModID_IsValid(int value);
const stReqRefreshShoplist_ProtoModID stReqRefreshShoplist_ProtoModID_ProtoModID_MIN = stReqRefreshShoplist_ProtoModID_ModID;
const stReqRefreshShoplist_ProtoModID stReqRefreshShoplist_ProtoModID_ProtoModID_MAX = stReqRefreshShoplist_ProtoModID_ModID;
const int stReqRefreshShoplist_ProtoModID_ProtoModID_ARRAYSIZE = stReqRefreshShoplist_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshShoplist_ProtoModID_descriptor();
inline const ::std::string& stReqRefreshShoplist_ProtoModID_Name(stReqRefreshShoplist_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshShoplist_ProtoModID_descriptor(), value);
}
inline bool stReqRefreshShoplist_ProtoModID_Parse(
    const ::std::string& name, stReqRefreshShoplist_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshShoplist_ProtoModID>(
    stReqRefreshShoplist_ProtoModID_descriptor(), name, value);
}
enum stReqRefreshShoplist_ProtoFunID {
  stReqRefreshShoplist_ProtoFunID_FunID = 54
};
bool stReqRefreshShoplist_ProtoFunID_IsValid(int value);
const stReqRefreshShoplist_ProtoFunID stReqRefreshShoplist_ProtoFunID_ProtoFunID_MIN = stReqRefreshShoplist_ProtoFunID_FunID;
const stReqRefreshShoplist_ProtoFunID stReqRefreshShoplist_ProtoFunID_ProtoFunID_MAX = stReqRefreshShoplist_ProtoFunID_FunID;
const int stReqRefreshShoplist_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRefreshShoplist_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshShoplist_ProtoFunID_descriptor();
inline const ::std::string& stReqRefreshShoplist_ProtoFunID_Name(stReqRefreshShoplist_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshShoplist_ProtoFunID_descriptor(), value);
}
inline bool stReqRefreshShoplist_ProtoFunID_Parse(
    const ::std::string& name, stReqRefreshShoplist_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshShoplist_ProtoFunID>(
    stReqRefreshShoplist_ProtoFunID_descriptor(), name, value);
}
enum stRefreshShoplistResult_Result {
  stRefreshShoplistResult_Result_SUCCESS = 1,
  stRefreshShoplistResult_Result_RESOURCE_NOT_ENOUGH = 2,
  stRefreshShoplistResult_Result_SHOP_NOT_EXIST = 3,
  stRefreshShoplistResult_Result_REFRESH_NUM_USE_OUT = 4
};
bool stRefreshShoplistResult_Result_IsValid(int value);
const stRefreshShoplistResult_Result stRefreshShoplistResult_Result_Result_MIN = stRefreshShoplistResult_Result_SUCCESS;
const stRefreshShoplistResult_Result stRefreshShoplistResult_Result_Result_MAX = stRefreshShoplistResult_Result_REFRESH_NUM_USE_OUT;
const int stRefreshShoplistResult_Result_Result_ARRAYSIZE = stRefreshShoplistResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshShoplistResult_Result_descriptor();
inline const ::std::string& stRefreshShoplistResult_Result_Name(stRefreshShoplistResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshShoplistResult_Result_descriptor(), value);
}
inline bool stRefreshShoplistResult_Result_Parse(
    const ::std::string& name, stRefreshShoplistResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshShoplistResult_Result>(
    stRefreshShoplistResult_Result_descriptor(), name, value);
}
enum stRefreshShoplistResult_ProtoModID {
  stRefreshShoplistResult_ProtoModID_ModID = 2
};
bool stRefreshShoplistResult_ProtoModID_IsValid(int value);
const stRefreshShoplistResult_ProtoModID stRefreshShoplistResult_ProtoModID_ProtoModID_MIN = stRefreshShoplistResult_ProtoModID_ModID;
const stRefreshShoplistResult_ProtoModID stRefreshShoplistResult_ProtoModID_ProtoModID_MAX = stRefreshShoplistResult_ProtoModID_ModID;
const int stRefreshShoplistResult_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshShoplistResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshShoplistResult_ProtoModID_descriptor();
inline const ::std::string& stRefreshShoplistResult_ProtoModID_Name(stRefreshShoplistResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshShoplistResult_ProtoModID_descriptor(), value);
}
inline bool stRefreshShoplistResult_ProtoModID_Parse(
    const ::std::string& name, stRefreshShoplistResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshShoplistResult_ProtoModID>(
    stRefreshShoplistResult_ProtoModID_descriptor(), name, value);
}
enum stRefreshShoplistResult_ProtoFunID {
  stRefreshShoplistResult_ProtoFunID_FunID = 54
};
bool stRefreshShoplistResult_ProtoFunID_IsValid(int value);
const stRefreshShoplistResult_ProtoFunID stRefreshShoplistResult_ProtoFunID_ProtoFunID_MIN = stRefreshShoplistResult_ProtoFunID_FunID;
const stRefreshShoplistResult_ProtoFunID stRefreshShoplistResult_ProtoFunID_ProtoFunID_MAX = stRefreshShoplistResult_ProtoFunID_FunID;
const int stRefreshShoplistResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshShoplistResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshShoplistResult_ProtoFunID_descriptor();
inline const ::std::string& stRefreshShoplistResult_ProtoFunID_Name(stRefreshShoplistResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshShoplistResult_ProtoFunID_descriptor(), value);
}
inline bool stRefreshShoplistResult_ProtoFunID_Parse(
    const ::std::string& name, stRefreshShoplistResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshShoplistResult_ProtoFunID>(
    stRefreshShoplistResult_ProtoFunID_descriptor(), name, value);
}
enum stChatCmd_ProtoModID {
  stChatCmd_ProtoModID_ModID = 2
};
bool stChatCmd_ProtoModID_IsValid(int value);
const stChatCmd_ProtoModID stChatCmd_ProtoModID_ProtoModID_MIN = stChatCmd_ProtoModID_ModID;
const stChatCmd_ProtoModID stChatCmd_ProtoModID_ProtoModID_MAX = stChatCmd_ProtoModID_ModID;
const int stChatCmd_ProtoModID_ProtoModID_ARRAYSIZE = stChatCmd_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChatCmd_ProtoModID_descriptor();
inline const ::std::string& stChatCmd_ProtoModID_Name(stChatCmd_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChatCmd_ProtoModID_descriptor(), value);
}
inline bool stChatCmd_ProtoModID_Parse(
    const ::std::string& name, stChatCmd_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChatCmd_ProtoModID>(
    stChatCmd_ProtoModID_descriptor(), name, value);
}
enum stChatCmd_ProtoFunID {
  stChatCmd_ProtoFunID_FunID = 55
};
bool stChatCmd_ProtoFunID_IsValid(int value);
const stChatCmd_ProtoFunID stChatCmd_ProtoFunID_ProtoFunID_MIN = stChatCmd_ProtoFunID_FunID;
const stChatCmd_ProtoFunID stChatCmd_ProtoFunID_ProtoFunID_MAX = stChatCmd_ProtoFunID_FunID;
const int stChatCmd_ProtoFunID_ProtoFunID_ARRAYSIZE = stChatCmd_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChatCmd_ProtoFunID_descriptor();
inline const ::std::string& stChatCmd_ProtoFunID_Name(stChatCmd_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChatCmd_ProtoFunID_descriptor(), value);
}
inline bool stChatCmd_ProtoFunID_Parse(
    const ::std::string& name, stChatCmd_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChatCmd_ProtoFunID>(
    stChatCmd_ProtoFunID_descriptor(), name, value);
}
enum stSynResource_ProtoModID {
  stSynResource_ProtoModID_ModID = 2
};
bool stSynResource_ProtoModID_IsValid(int value);
const stSynResource_ProtoModID stSynResource_ProtoModID_ProtoModID_MIN = stSynResource_ProtoModID_ModID;
const stSynResource_ProtoModID stSynResource_ProtoModID_ProtoModID_MAX = stSynResource_ProtoModID_ModID;
const int stSynResource_ProtoModID_ProtoModID_ARRAYSIZE = stSynResource_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResource_ProtoModID_descriptor();
inline const ::std::string& stSynResource_ProtoModID_Name(stSynResource_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResource_ProtoModID_descriptor(), value);
}
inline bool stSynResource_ProtoModID_Parse(
    const ::std::string& name, stSynResource_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResource_ProtoModID>(
    stSynResource_ProtoModID_descriptor(), name, value);
}
enum stSynResource_ProtoFunID {
  stSynResource_ProtoFunID_FunID = 56
};
bool stSynResource_ProtoFunID_IsValid(int value);
const stSynResource_ProtoFunID stSynResource_ProtoFunID_ProtoFunID_MIN = stSynResource_ProtoFunID_FunID;
const stSynResource_ProtoFunID stSynResource_ProtoFunID_ProtoFunID_MAX = stSynResource_ProtoFunID_FunID;
const int stSynResource_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynResource_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynResource_ProtoFunID_descriptor();
inline const ::std::string& stSynResource_ProtoFunID_Name(stSynResource_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynResource_ProtoFunID_descriptor(), value);
}
inline bool stSynResource_ProtoFunID_Parse(
    const ::std::string& name, stSynResource_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynResource_ProtoFunID>(
    stSynResource_ProtoFunID_descriptor(), name, value);
}
enum stSynAllLevelInfo_ProtoModID {
  stSynAllLevelInfo_ProtoModID_ModID = 2
};
bool stSynAllLevelInfo_ProtoModID_IsValid(int value);
const stSynAllLevelInfo_ProtoModID stSynAllLevelInfo_ProtoModID_ProtoModID_MIN = stSynAllLevelInfo_ProtoModID_ModID;
const stSynAllLevelInfo_ProtoModID stSynAllLevelInfo_ProtoModID_ProtoModID_MAX = stSynAllLevelInfo_ProtoModID_ModID;
const int stSynAllLevelInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSynAllLevelInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllLevelInfo_ProtoModID_descriptor();
inline const ::std::string& stSynAllLevelInfo_ProtoModID_Name(stSynAllLevelInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllLevelInfo_ProtoModID_descriptor(), value);
}
inline bool stSynAllLevelInfo_ProtoModID_Parse(
    const ::std::string& name, stSynAllLevelInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllLevelInfo_ProtoModID>(
    stSynAllLevelInfo_ProtoModID_descriptor(), name, value);
}
enum stSynAllLevelInfo_ProtoFunID {
  stSynAllLevelInfo_ProtoFunID_FunID = 57
};
bool stSynAllLevelInfo_ProtoFunID_IsValid(int value);
const stSynAllLevelInfo_ProtoFunID stSynAllLevelInfo_ProtoFunID_ProtoFunID_MIN = stSynAllLevelInfo_ProtoFunID_FunID;
const stSynAllLevelInfo_ProtoFunID stSynAllLevelInfo_ProtoFunID_ProtoFunID_MAX = stSynAllLevelInfo_ProtoFunID_FunID;
const int stSynAllLevelInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynAllLevelInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynAllLevelInfo_ProtoFunID_descriptor();
inline const ::std::string& stSynAllLevelInfo_ProtoFunID_Name(stSynAllLevelInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynAllLevelInfo_ProtoFunID_descriptor(), value);
}
inline bool stSynAllLevelInfo_ProtoFunID_Parse(
    const ::std::string& name, stSynAllLevelInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynAllLevelInfo_ProtoFunID>(
    stSynAllLevelInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqFinishLv_ProtoModID {
  stReqFinishLv_ProtoModID_ModID = 2
};
bool stReqFinishLv_ProtoModID_IsValid(int value);
const stReqFinishLv_ProtoModID stReqFinishLv_ProtoModID_ProtoModID_MIN = stReqFinishLv_ProtoModID_ModID;
const stReqFinishLv_ProtoModID stReqFinishLv_ProtoModID_ProtoModID_MAX = stReqFinishLv_ProtoModID_ModID;
const int stReqFinishLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqFinishLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFinishLv_ProtoModID_descriptor();
inline const ::std::string& stReqFinishLv_ProtoModID_Name(stReqFinishLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFinishLv_ProtoModID_descriptor(), value);
}
inline bool stReqFinishLv_ProtoModID_Parse(
    const ::std::string& name, stReqFinishLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFinishLv_ProtoModID>(
    stReqFinishLv_ProtoModID_descriptor(), name, value);
}
enum stReqFinishLv_ProtoFunID {
  stReqFinishLv_ProtoFunID_FunID = 58
};
bool stReqFinishLv_ProtoFunID_IsValid(int value);
const stReqFinishLv_ProtoFunID stReqFinishLv_ProtoFunID_ProtoFunID_MIN = stReqFinishLv_ProtoFunID_FunID;
const stReqFinishLv_ProtoFunID stReqFinishLv_ProtoFunID_ProtoFunID_MAX = stReqFinishLv_ProtoFunID_FunID;
const int stReqFinishLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqFinishLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFinishLv_ProtoFunID_descriptor();
inline const ::std::string& stReqFinishLv_ProtoFunID_Name(stReqFinishLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFinishLv_ProtoFunID_descriptor(), value);
}
inline bool stReqFinishLv_ProtoFunID_Parse(
    const ::std::string& name, stReqFinishLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFinishLv_ProtoFunID>(
    stReqFinishLv_ProtoFunID_descriptor(), name, value);
}
enum stFinishLvResult_eResult {
  stFinishLvResult_eResult_SUCCESS = 1,
  stFinishLvResult_eResult_COND_NOT_MEET = 2,
  stFinishLvResult_eResult_INNER_ERROR = 3,
  stFinishLvResult_eResult_SP_NOT_ENOUGH = 4,
  stFinishLvResult_eResult_LILIAN_NOT_ENOUGH = 5,
  stFinishLvResult_eResult_ROLE_LV_TOO_LOW = 6,
  stFinishLvResult_eResult_PRE_LEVEL_NOT_FINISH = 7,
  stFinishLvResult_eResult_TIME_USE_OUT = 8
};
bool stFinishLvResult_eResult_IsValid(int value);
const stFinishLvResult_eResult stFinishLvResult_eResult_eResult_MIN = stFinishLvResult_eResult_SUCCESS;
const stFinishLvResult_eResult stFinishLvResult_eResult_eResult_MAX = stFinishLvResult_eResult_TIME_USE_OUT;
const int stFinishLvResult_eResult_eResult_ARRAYSIZE = stFinishLvResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFinishLvResult_eResult_descriptor();
inline const ::std::string& stFinishLvResult_eResult_Name(stFinishLvResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFinishLvResult_eResult_descriptor(), value);
}
inline bool stFinishLvResult_eResult_Parse(
    const ::std::string& name, stFinishLvResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFinishLvResult_eResult>(
    stFinishLvResult_eResult_descriptor(), name, value);
}
enum stFinishLvResult_ProtoModID {
  stFinishLvResult_ProtoModID_ModID = 2
};
bool stFinishLvResult_ProtoModID_IsValid(int value);
const stFinishLvResult_ProtoModID stFinishLvResult_ProtoModID_ProtoModID_MIN = stFinishLvResult_ProtoModID_ModID;
const stFinishLvResult_ProtoModID stFinishLvResult_ProtoModID_ProtoModID_MAX = stFinishLvResult_ProtoModID_ModID;
const int stFinishLvResult_ProtoModID_ProtoModID_ARRAYSIZE = stFinishLvResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFinishLvResult_ProtoModID_descriptor();
inline const ::std::string& stFinishLvResult_ProtoModID_Name(stFinishLvResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFinishLvResult_ProtoModID_descriptor(), value);
}
inline bool stFinishLvResult_ProtoModID_Parse(
    const ::std::string& name, stFinishLvResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFinishLvResult_ProtoModID>(
    stFinishLvResult_ProtoModID_descriptor(), name, value);
}
enum stFinishLvResult_ProtoFunID {
  stFinishLvResult_ProtoFunID_FunID = 59
};
bool stFinishLvResult_ProtoFunID_IsValid(int value);
const stFinishLvResult_ProtoFunID stFinishLvResult_ProtoFunID_ProtoFunID_MIN = stFinishLvResult_ProtoFunID_FunID;
const stFinishLvResult_ProtoFunID stFinishLvResult_ProtoFunID_ProtoFunID_MAX = stFinishLvResult_ProtoFunID_FunID;
const int stFinishLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stFinishLvResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFinishLvResult_ProtoFunID_descriptor();
inline const ::std::string& stFinishLvResult_ProtoFunID_Name(stFinishLvResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFinishLvResult_ProtoFunID_descriptor(), value);
}
inline bool stFinishLvResult_ProtoFunID_Parse(
    const ::std::string& name, stFinishLvResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFinishLvResult_ProtoFunID>(
    stFinishLvResult_ProtoFunID_descriptor(), name, value);
}
enum stReqCharpterReward_ProtoModID {
  stReqCharpterReward_ProtoModID_ModID = 2
};
bool stReqCharpterReward_ProtoModID_IsValid(int value);
const stReqCharpterReward_ProtoModID stReqCharpterReward_ProtoModID_ProtoModID_MIN = stReqCharpterReward_ProtoModID_ModID;
const stReqCharpterReward_ProtoModID stReqCharpterReward_ProtoModID_ProtoModID_MAX = stReqCharpterReward_ProtoModID_ModID;
const int stReqCharpterReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqCharpterReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCharpterReward_ProtoModID_descriptor();
inline const ::std::string& stReqCharpterReward_ProtoModID_Name(stReqCharpterReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCharpterReward_ProtoModID_descriptor(), value);
}
inline bool stReqCharpterReward_ProtoModID_Parse(
    const ::std::string& name, stReqCharpterReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCharpterReward_ProtoModID>(
    stReqCharpterReward_ProtoModID_descriptor(), name, value);
}
enum stReqCharpterReward_ProtoFunID {
  stReqCharpterReward_ProtoFunID_FunID = 60
};
bool stReqCharpterReward_ProtoFunID_IsValid(int value);
const stReqCharpterReward_ProtoFunID stReqCharpterReward_ProtoFunID_ProtoFunID_MIN = stReqCharpterReward_ProtoFunID_FunID;
const stReqCharpterReward_ProtoFunID stReqCharpterReward_ProtoFunID_ProtoFunID_MAX = stReqCharpterReward_ProtoFunID_FunID;
const int stReqCharpterReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqCharpterReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqCharpterReward_ProtoFunID_descriptor();
inline const ::std::string& stReqCharpterReward_ProtoFunID_Name(stReqCharpterReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqCharpterReward_ProtoFunID_descriptor(), value);
}
inline bool stReqCharpterReward_ProtoFunID_Parse(
    const ::std::string& name, stReqCharpterReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqCharpterReward_ProtoFunID>(
    stReqCharpterReward_ProtoFunID_descriptor(), name, value);
}
enum stCharpterRewardResult_eResult {
  stCharpterRewardResult_eResult_SUCCESS = 1,
  stCharpterRewardResult_eResult_INNER_ERROR = 2,
  stCharpterRewardResult_eResult_CHARPTER_NOT_EXSIT = 3,
  stCharpterRewardResult_eResult_STARNUM_NOT_ENOUGH = 4,
  stCharpterRewardResult_eResult_HAS_GET_REWARD = 5,
  stCharpterRewardResult_eResult_BAG_FULL = 6
};
bool stCharpterRewardResult_eResult_IsValid(int value);
const stCharpterRewardResult_eResult stCharpterRewardResult_eResult_eResult_MIN = stCharpterRewardResult_eResult_SUCCESS;
const stCharpterRewardResult_eResult stCharpterRewardResult_eResult_eResult_MAX = stCharpterRewardResult_eResult_BAG_FULL;
const int stCharpterRewardResult_eResult_eResult_ARRAYSIZE = stCharpterRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCharpterRewardResult_eResult_descriptor();
inline const ::std::string& stCharpterRewardResult_eResult_Name(stCharpterRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCharpterRewardResult_eResult_descriptor(), value);
}
inline bool stCharpterRewardResult_eResult_Parse(
    const ::std::string& name, stCharpterRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCharpterRewardResult_eResult>(
    stCharpterRewardResult_eResult_descriptor(), name, value);
}
enum stCharpterRewardResult_ProtoModID {
  stCharpterRewardResult_ProtoModID_ModID = 2
};
bool stCharpterRewardResult_ProtoModID_IsValid(int value);
const stCharpterRewardResult_ProtoModID stCharpterRewardResult_ProtoModID_ProtoModID_MIN = stCharpterRewardResult_ProtoModID_ModID;
const stCharpterRewardResult_ProtoModID stCharpterRewardResult_ProtoModID_ProtoModID_MAX = stCharpterRewardResult_ProtoModID_ModID;
const int stCharpterRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stCharpterRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCharpterRewardResult_ProtoModID_descriptor();
inline const ::std::string& stCharpterRewardResult_ProtoModID_Name(stCharpterRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCharpterRewardResult_ProtoModID_descriptor(), value);
}
inline bool stCharpterRewardResult_ProtoModID_Parse(
    const ::std::string& name, stCharpterRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCharpterRewardResult_ProtoModID>(
    stCharpterRewardResult_ProtoModID_descriptor(), name, value);
}
enum stCharpterRewardResult_ProtoFunID {
  stCharpterRewardResult_ProtoFunID_FunID = 61
};
bool stCharpterRewardResult_ProtoFunID_IsValid(int value);
const stCharpterRewardResult_ProtoFunID stCharpterRewardResult_ProtoFunID_ProtoFunID_MIN = stCharpterRewardResult_ProtoFunID_FunID;
const stCharpterRewardResult_ProtoFunID stCharpterRewardResult_ProtoFunID_ProtoFunID_MAX = stCharpterRewardResult_ProtoFunID_FunID;
const int stCharpterRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stCharpterRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCharpterRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stCharpterRewardResult_ProtoFunID_Name(stCharpterRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCharpterRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stCharpterRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stCharpterRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCharpterRewardResult_ProtoFunID>(
    stCharpterRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRushLevel_ProtoModID {
  stReqRushLevel_ProtoModID_ModID = 2
};
bool stReqRushLevel_ProtoModID_IsValid(int value);
const stReqRushLevel_ProtoModID stReqRushLevel_ProtoModID_ProtoModID_MIN = stReqRushLevel_ProtoModID_ModID;
const stReqRushLevel_ProtoModID stReqRushLevel_ProtoModID_ProtoModID_MAX = stReqRushLevel_ProtoModID_ModID;
const int stReqRushLevel_ProtoModID_ProtoModID_ARRAYSIZE = stReqRushLevel_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRushLevel_ProtoModID_descriptor();
inline const ::std::string& stReqRushLevel_ProtoModID_Name(stReqRushLevel_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRushLevel_ProtoModID_descriptor(), value);
}
inline bool stReqRushLevel_ProtoModID_Parse(
    const ::std::string& name, stReqRushLevel_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRushLevel_ProtoModID>(
    stReqRushLevel_ProtoModID_descriptor(), name, value);
}
enum stReqRushLevel_ProtoFunID {
  stReqRushLevel_ProtoFunID_FunID = 62
};
bool stReqRushLevel_ProtoFunID_IsValid(int value);
const stReqRushLevel_ProtoFunID stReqRushLevel_ProtoFunID_ProtoFunID_MIN = stReqRushLevel_ProtoFunID_FunID;
const stReqRushLevel_ProtoFunID stReqRushLevel_ProtoFunID_ProtoFunID_MAX = stReqRushLevel_ProtoFunID_FunID;
const int stReqRushLevel_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRushLevel_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRushLevel_ProtoFunID_descriptor();
inline const ::std::string& stReqRushLevel_ProtoFunID_Name(stReqRushLevel_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRushLevel_ProtoFunID_descriptor(), value);
}
inline bool stReqRushLevel_ProtoFunID_Parse(
    const ::std::string& name, stReqRushLevel_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRushLevel_ProtoFunID>(
    stReqRushLevel_ProtoFunID_descriptor(), name, value);
}
enum stLevelRushResult_eResult {
  stLevelRushResult_eResult_SUCCESS = 1,
  stLevelRushResult_eResult_INNER_ERROR = 2,
  stLevelRushResult_eResult_NOT_3_STAR = 3,
  stLevelRushResult_eResult_SP_NOT_ENOUGH = 4,
  stLevelRushResult_eResult_LILIAN_NOT_ENOUGH = 5,
  stLevelRushResult_eResult_RUSH_NUM_OUT = 6,
  stLevelRushResult_eResult_LV_CANNT_RUSH = 7,
  stLevelRushResult_eResult_BAG_FULL = 8,
  stLevelRushResult_eResult_VIP_LV_TOO_LOW = 9,
  stLevelRushResult_eResult_RUSH_TICKET_NOT_ENOUGH = 10,
  stLevelRushResult_eResult_BATTLEPOWER = 11
};
bool stLevelRushResult_eResult_IsValid(int value);
const stLevelRushResult_eResult stLevelRushResult_eResult_eResult_MIN = stLevelRushResult_eResult_SUCCESS;
const stLevelRushResult_eResult stLevelRushResult_eResult_eResult_MAX = stLevelRushResult_eResult_BATTLEPOWER;
const int stLevelRushResult_eResult_eResult_ARRAYSIZE = stLevelRushResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelRushResult_eResult_descriptor();
inline const ::std::string& stLevelRushResult_eResult_Name(stLevelRushResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelRushResult_eResult_descriptor(), value);
}
inline bool stLevelRushResult_eResult_Parse(
    const ::std::string& name, stLevelRushResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelRushResult_eResult>(
    stLevelRushResult_eResult_descriptor(), name, value);
}
enum stLevelRushResult_ProtoModID {
  stLevelRushResult_ProtoModID_ModID = 2
};
bool stLevelRushResult_ProtoModID_IsValid(int value);
const stLevelRushResult_ProtoModID stLevelRushResult_ProtoModID_ProtoModID_MIN = stLevelRushResult_ProtoModID_ModID;
const stLevelRushResult_ProtoModID stLevelRushResult_ProtoModID_ProtoModID_MAX = stLevelRushResult_ProtoModID_ModID;
const int stLevelRushResult_ProtoModID_ProtoModID_ARRAYSIZE = stLevelRushResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelRushResult_ProtoModID_descriptor();
inline const ::std::string& stLevelRushResult_ProtoModID_Name(stLevelRushResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelRushResult_ProtoModID_descriptor(), value);
}
inline bool stLevelRushResult_ProtoModID_Parse(
    const ::std::string& name, stLevelRushResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelRushResult_ProtoModID>(
    stLevelRushResult_ProtoModID_descriptor(), name, value);
}
enum stLevelRushResult_ProtoFunID {
  stLevelRushResult_ProtoFunID_FunID = 63
};
bool stLevelRushResult_ProtoFunID_IsValid(int value);
const stLevelRushResult_ProtoFunID stLevelRushResult_ProtoFunID_ProtoFunID_MIN = stLevelRushResult_ProtoFunID_FunID;
const stLevelRushResult_ProtoFunID stLevelRushResult_ProtoFunID_ProtoFunID_MAX = stLevelRushResult_ProtoFunID_FunID;
const int stLevelRushResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stLevelRushResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stLevelRushResult_ProtoFunID_descriptor();
inline const ::std::string& stLevelRushResult_ProtoFunID_Name(stLevelRushResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stLevelRushResult_ProtoFunID_descriptor(), value);
}
inline bool stLevelRushResult_ProtoFunID_Parse(
    const ::std::string& name, stLevelRushResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stLevelRushResult_ProtoFunID>(
    stLevelRushResult_ProtoFunID_descriptor(), name, value);
}
enum stReqResetRushNum_ProtoModID {
  stReqResetRushNum_ProtoModID_ModID = 2
};
bool stReqResetRushNum_ProtoModID_IsValid(int value);
const stReqResetRushNum_ProtoModID stReqResetRushNum_ProtoModID_ProtoModID_MIN = stReqResetRushNum_ProtoModID_ModID;
const stReqResetRushNum_ProtoModID stReqResetRushNum_ProtoModID_ProtoModID_MAX = stReqResetRushNum_ProtoModID_ModID;
const int stReqResetRushNum_ProtoModID_ProtoModID_ARRAYSIZE = stReqResetRushNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetRushNum_ProtoModID_descriptor();
inline const ::std::string& stReqResetRushNum_ProtoModID_Name(stReqResetRushNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetRushNum_ProtoModID_descriptor(), value);
}
inline bool stReqResetRushNum_ProtoModID_Parse(
    const ::std::string& name, stReqResetRushNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetRushNum_ProtoModID>(
    stReqResetRushNum_ProtoModID_descriptor(), name, value);
}
enum stReqResetRushNum_ProtoFunID {
  stReqResetRushNum_ProtoFunID_FunID = 64
};
bool stReqResetRushNum_ProtoFunID_IsValid(int value);
const stReqResetRushNum_ProtoFunID stReqResetRushNum_ProtoFunID_ProtoFunID_MIN = stReqResetRushNum_ProtoFunID_FunID;
const stReqResetRushNum_ProtoFunID stReqResetRushNum_ProtoFunID_ProtoFunID_MAX = stReqResetRushNum_ProtoFunID_FunID;
const int stReqResetRushNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqResetRushNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqResetRushNum_ProtoFunID_descriptor();
inline const ::std::string& stReqResetRushNum_ProtoFunID_Name(stReqResetRushNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqResetRushNum_ProtoFunID_descriptor(), value);
}
inline bool stReqResetRushNum_ProtoFunID_Parse(
    const ::std::string& name, stReqResetRushNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqResetRushNum_ProtoFunID>(
    stReqResetRushNum_ProtoFunID_descriptor(), name, value);
}
enum stResetRushNumResult_eResult {
  stResetRushNumResult_eResult_SUCCESS = 1,
  stResetRushNumResult_eResult_INNER_ERROR = 2,
  stResetRushNumResult_eResult_CHARPTER_NOT_FINISH = 3,
  stResetRushNumResult_eResult_LEVEL_NOT_FINISH = 4,
  stResetRushNumResult_eResult_DIAMOND_NOT_ENOUGH = 5
};
bool stResetRushNumResult_eResult_IsValid(int value);
const stResetRushNumResult_eResult stResetRushNumResult_eResult_eResult_MIN = stResetRushNumResult_eResult_SUCCESS;
const stResetRushNumResult_eResult stResetRushNumResult_eResult_eResult_MAX = stResetRushNumResult_eResult_DIAMOND_NOT_ENOUGH;
const int stResetRushNumResult_eResult_eResult_ARRAYSIZE = stResetRushNumResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetRushNumResult_eResult_descriptor();
inline const ::std::string& stResetRushNumResult_eResult_Name(stResetRushNumResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetRushNumResult_eResult_descriptor(), value);
}
inline bool stResetRushNumResult_eResult_Parse(
    const ::std::string& name, stResetRushNumResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetRushNumResult_eResult>(
    stResetRushNumResult_eResult_descriptor(), name, value);
}
enum stResetRushNumResult_ProtoModID {
  stResetRushNumResult_ProtoModID_ModID = 2
};
bool stResetRushNumResult_ProtoModID_IsValid(int value);
const stResetRushNumResult_ProtoModID stResetRushNumResult_ProtoModID_ProtoModID_MIN = stResetRushNumResult_ProtoModID_ModID;
const stResetRushNumResult_ProtoModID stResetRushNumResult_ProtoModID_ProtoModID_MAX = stResetRushNumResult_ProtoModID_ModID;
const int stResetRushNumResult_ProtoModID_ProtoModID_ARRAYSIZE = stResetRushNumResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetRushNumResult_ProtoModID_descriptor();
inline const ::std::string& stResetRushNumResult_ProtoModID_Name(stResetRushNumResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetRushNumResult_ProtoModID_descriptor(), value);
}
inline bool stResetRushNumResult_ProtoModID_Parse(
    const ::std::string& name, stResetRushNumResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetRushNumResult_ProtoModID>(
    stResetRushNumResult_ProtoModID_descriptor(), name, value);
}
enum stResetRushNumResult_ProtoFunID {
  stResetRushNumResult_ProtoFunID_FunID = 65
};
bool stResetRushNumResult_ProtoFunID_IsValid(int value);
const stResetRushNumResult_ProtoFunID stResetRushNumResult_ProtoFunID_ProtoFunID_MIN = stResetRushNumResult_ProtoFunID_FunID;
const stResetRushNumResult_ProtoFunID stResetRushNumResult_ProtoFunID_ProtoFunID_MAX = stResetRushNumResult_ProtoFunID_FunID;
const int stResetRushNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetRushNumResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetRushNumResult_ProtoFunID_descriptor();
inline const ::std::string& stResetRushNumResult_ProtoFunID_Name(stResetRushNumResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetRushNumResult_ProtoFunID_descriptor(), value);
}
inline bool stResetRushNumResult_ProtoFunID_Parse(
    const ::std::string& name, stResetRushNumResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetRushNumResult_ProtoFunID>(
    stResetRushNumResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRefineEquip_ProtoModID {
  stReqRefineEquip_ProtoModID_ModID = 2
};
bool stReqRefineEquip_ProtoModID_IsValid(int value);
const stReqRefineEquip_ProtoModID stReqRefineEquip_ProtoModID_ProtoModID_MIN = stReqRefineEquip_ProtoModID_ModID;
const stReqRefineEquip_ProtoModID stReqRefineEquip_ProtoModID_ProtoModID_MAX = stReqRefineEquip_ProtoModID_ModID;
const int stReqRefineEquip_ProtoModID_ProtoModID_ARRAYSIZE = stReqRefineEquip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefineEquip_ProtoModID_descriptor();
inline const ::std::string& stReqRefineEquip_ProtoModID_Name(stReqRefineEquip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefineEquip_ProtoModID_descriptor(), value);
}
inline bool stReqRefineEquip_ProtoModID_Parse(
    const ::std::string& name, stReqRefineEquip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefineEquip_ProtoModID>(
    stReqRefineEquip_ProtoModID_descriptor(), name, value);
}
enum stReqRefineEquip_ProtoFunID {
  stReqRefineEquip_ProtoFunID_FunID = 66
};
bool stReqRefineEquip_ProtoFunID_IsValid(int value);
const stReqRefineEquip_ProtoFunID stReqRefineEquip_ProtoFunID_ProtoFunID_MIN = stReqRefineEquip_ProtoFunID_FunID;
const stReqRefineEquip_ProtoFunID stReqRefineEquip_ProtoFunID_ProtoFunID_MAX = stReqRefineEquip_ProtoFunID_FunID;
const int stReqRefineEquip_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRefineEquip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefineEquip_ProtoFunID_descriptor();
inline const ::std::string& stReqRefineEquip_ProtoFunID_Name(stReqRefineEquip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefineEquip_ProtoFunID_descriptor(), value);
}
inline bool stReqRefineEquip_ProtoFunID_Parse(
    const ::std::string& name, stReqRefineEquip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefineEquip_ProtoFunID>(
    stReqRefineEquip_ProtoFunID_descriptor(), name, value);
}
enum stRefineEquipResult_eResult {
  stRefineEquipResult_eResult_eSUCCESS = 1,
  stRefineEquipResult_eResult_eEQUIP_NOT_EXIST = 2,
  stRefineEquipResult_eResult_eINNER_ERROR = 3,
  stRefineEquipResult_eResult_eGOLDCOIN_NOT_ENOUGH = 4,
  stRefineEquipResult_eResult_eITEM_NOT_ENOUGH = 5,
  stRefineEquipResult_eResult_eFULL_LV = 6
};
bool stRefineEquipResult_eResult_IsValid(int value);
const stRefineEquipResult_eResult stRefineEquipResult_eResult_eResult_MIN = stRefineEquipResult_eResult_eSUCCESS;
const stRefineEquipResult_eResult stRefineEquipResult_eResult_eResult_MAX = stRefineEquipResult_eResult_eFULL_LV;
const int stRefineEquipResult_eResult_eResult_ARRAYSIZE = stRefineEquipResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefineEquipResult_eResult_descriptor();
inline const ::std::string& stRefineEquipResult_eResult_Name(stRefineEquipResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefineEquipResult_eResult_descriptor(), value);
}
inline bool stRefineEquipResult_eResult_Parse(
    const ::std::string& name, stRefineEquipResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefineEquipResult_eResult>(
    stRefineEquipResult_eResult_descriptor(), name, value);
}
enum stRefineEquipResult_ProtoModID {
  stRefineEquipResult_ProtoModID_ModID = 2
};
bool stRefineEquipResult_ProtoModID_IsValid(int value);
const stRefineEquipResult_ProtoModID stRefineEquipResult_ProtoModID_ProtoModID_MIN = stRefineEquipResult_ProtoModID_ModID;
const stRefineEquipResult_ProtoModID stRefineEquipResult_ProtoModID_ProtoModID_MAX = stRefineEquipResult_ProtoModID_ModID;
const int stRefineEquipResult_ProtoModID_ProtoModID_ARRAYSIZE = stRefineEquipResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefineEquipResult_ProtoModID_descriptor();
inline const ::std::string& stRefineEquipResult_ProtoModID_Name(stRefineEquipResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefineEquipResult_ProtoModID_descriptor(), value);
}
inline bool stRefineEquipResult_ProtoModID_Parse(
    const ::std::string& name, stRefineEquipResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefineEquipResult_ProtoModID>(
    stRefineEquipResult_ProtoModID_descriptor(), name, value);
}
enum stRefineEquipResult_ProtoFunID {
  stRefineEquipResult_ProtoFunID_FunID = 67
};
bool stRefineEquipResult_ProtoFunID_IsValid(int value);
const stRefineEquipResult_ProtoFunID stRefineEquipResult_ProtoFunID_ProtoFunID_MIN = stRefineEquipResult_ProtoFunID_FunID;
const stRefineEquipResult_ProtoFunID stRefineEquipResult_ProtoFunID_ProtoFunID_MAX = stRefineEquipResult_ProtoFunID_FunID;
const int stRefineEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefineEquipResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefineEquipResult_ProtoFunID_descriptor();
inline const ::std::string& stRefineEquipResult_ProtoFunID_Name(stRefineEquipResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefineEquipResult_ProtoFunID_descriptor(), value);
}
inline bool stRefineEquipResult_ProtoFunID_Parse(
    const ::std::string& name, stRefineEquipResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefineEquipResult_ProtoFunID>(
    stRefineEquipResult_ProtoFunID_descriptor(), name, value);
}
enum stSynTotoalRecharge_ProtoModID {
  stSynTotoalRecharge_ProtoModID_ModID = 2
};
bool stSynTotoalRecharge_ProtoModID_IsValid(int value);
const stSynTotoalRecharge_ProtoModID stSynTotoalRecharge_ProtoModID_ProtoModID_MIN = stSynTotoalRecharge_ProtoModID_ModID;
const stSynTotoalRecharge_ProtoModID stSynTotoalRecharge_ProtoModID_ProtoModID_MAX = stSynTotoalRecharge_ProtoModID_ModID;
const int stSynTotoalRecharge_ProtoModID_ProtoModID_ARRAYSIZE = stSynTotoalRecharge_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynTotoalRecharge_ProtoModID_descriptor();
inline const ::std::string& stSynTotoalRecharge_ProtoModID_Name(stSynTotoalRecharge_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynTotoalRecharge_ProtoModID_descriptor(), value);
}
inline bool stSynTotoalRecharge_ProtoModID_Parse(
    const ::std::string& name, stSynTotoalRecharge_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynTotoalRecharge_ProtoModID>(
    stSynTotoalRecharge_ProtoModID_descriptor(), name, value);
}
enum stSynTotoalRecharge_ProtoFunID {
  stSynTotoalRecharge_ProtoFunID_FunID = 68
};
bool stSynTotoalRecharge_ProtoFunID_IsValid(int value);
const stSynTotoalRecharge_ProtoFunID stSynTotoalRecharge_ProtoFunID_ProtoFunID_MIN = stSynTotoalRecharge_ProtoFunID_FunID;
const stSynTotoalRecharge_ProtoFunID stSynTotoalRecharge_ProtoFunID_ProtoFunID_MAX = stSynTotoalRecharge_ProtoFunID_FunID;
const int stSynTotoalRecharge_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynTotoalRecharge_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynTotoalRecharge_ProtoFunID_descriptor();
inline const ::std::string& stSynTotoalRecharge_ProtoFunID_Name(stSynTotoalRecharge_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynTotoalRecharge_ProtoFunID_descriptor(), value);
}
inline bool stSynTotoalRecharge_ProtoFunID_Parse(
    const ::std::string& name, stSynTotoalRecharge_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynTotoalRecharge_ProtoFunID>(
    stSynTotoalRecharge_ProtoFunID_descriptor(), name, value);
}
enum stSynUserAllSkill_ProtoModID {
  stSynUserAllSkill_ProtoModID_ModID = 2
};
bool stSynUserAllSkill_ProtoModID_IsValid(int value);
const stSynUserAllSkill_ProtoModID stSynUserAllSkill_ProtoModID_ProtoModID_MIN = stSynUserAllSkill_ProtoModID_ModID;
const stSynUserAllSkill_ProtoModID stSynUserAllSkill_ProtoModID_ProtoModID_MAX = stSynUserAllSkill_ProtoModID_ModID;
const int stSynUserAllSkill_ProtoModID_ProtoModID_ARRAYSIZE = stSynUserAllSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynUserAllSkill_ProtoModID_descriptor();
inline const ::std::string& stSynUserAllSkill_ProtoModID_Name(stSynUserAllSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynUserAllSkill_ProtoModID_descriptor(), value);
}
inline bool stSynUserAllSkill_ProtoModID_Parse(
    const ::std::string& name, stSynUserAllSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynUserAllSkill_ProtoModID>(
    stSynUserAllSkill_ProtoModID_descriptor(), name, value);
}
enum stSynUserAllSkill_ProtoFunID {
  stSynUserAllSkill_ProtoFunID_FunID = 69
};
bool stSynUserAllSkill_ProtoFunID_IsValid(int value);
const stSynUserAllSkill_ProtoFunID stSynUserAllSkill_ProtoFunID_ProtoFunID_MIN = stSynUserAllSkill_ProtoFunID_FunID;
const stSynUserAllSkill_ProtoFunID stSynUserAllSkill_ProtoFunID_ProtoFunID_MAX = stSynUserAllSkill_ProtoFunID_FunID;
const int stSynUserAllSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynUserAllSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynUserAllSkill_ProtoFunID_descriptor();
inline const ::std::string& stSynUserAllSkill_ProtoFunID_Name(stSynUserAllSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynUserAllSkill_ProtoFunID_descriptor(), value);
}
inline bool stSynUserAllSkill_ProtoFunID_Parse(
    const ::std::string& name, stSynUserAllSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynUserAllSkill_ProtoFunID>(
    stSynUserAllSkill_ProtoFunID_descriptor(), name, value);
}
enum stAddUserSkill_ProtoModID {
  stAddUserSkill_ProtoModID_ModID = 2
};
bool stAddUserSkill_ProtoModID_IsValid(int value);
const stAddUserSkill_ProtoModID stAddUserSkill_ProtoModID_ProtoModID_MIN = stAddUserSkill_ProtoModID_ModID;
const stAddUserSkill_ProtoModID stAddUserSkill_ProtoModID_ProtoModID_MAX = stAddUserSkill_ProtoModID_ModID;
const int stAddUserSkill_ProtoModID_ProtoModID_ARRAYSIZE = stAddUserSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddUserSkill_ProtoModID_descriptor();
inline const ::std::string& stAddUserSkill_ProtoModID_Name(stAddUserSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddUserSkill_ProtoModID_descriptor(), value);
}
inline bool stAddUserSkill_ProtoModID_Parse(
    const ::std::string& name, stAddUserSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddUserSkill_ProtoModID>(
    stAddUserSkill_ProtoModID_descriptor(), name, value);
}
enum stAddUserSkill_ProtoFunID {
  stAddUserSkill_ProtoFunID_FunID = 70
};
bool stAddUserSkill_ProtoFunID_IsValid(int value);
const stAddUserSkill_ProtoFunID stAddUserSkill_ProtoFunID_ProtoFunID_MIN = stAddUserSkill_ProtoFunID_FunID;
const stAddUserSkill_ProtoFunID stAddUserSkill_ProtoFunID_ProtoFunID_MAX = stAddUserSkill_ProtoFunID_FunID;
const int stAddUserSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stAddUserSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAddUserSkill_ProtoFunID_descriptor();
inline const ::std::string& stAddUserSkill_ProtoFunID_Name(stAddUserSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAddUserSkill_ProtoFunID_descriptor(), value);
}
inline bool stAddUserSkill_ProtoFunID_Parse(
    const ::std::string& name, stAddUserSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAddUserSkill_ProtoFunID>(
    stAddUserSkill_ProtoFunID_descriptor(), name, value);
}
enum stReqUserDetailInfo_ProtoModID {
  stReqUserDetailInfo_ProtoModID_ModID = 2
};
bool stReqUserDetailInfo_ProtoModID_IsValid(int value);
const stReqUserDetailInfo_ProtoModID stReqUserDetailInfo_ProtoModID_ProtoModID_MIN = stReqUserDetailInfo_ProtoModID_ModID;
const stReqUserDetailInfo_ProtoModID stReqUserDetailInfo_ProtoModID_ProtoModID_MAX = stReqUserDetailInfo_ProtoModID_ModID;
const int stReqUserDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE = stReqUserDetailInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUserDetailInfo_ProtoModID_descriptor();
inline const ::std::string& stReqUserDetailInfo_ProtoModID_Name(stReqUserDetailInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUserDetailInfo_ProtoModID_descriptor(), value);
}
inline bool stReqUserDetailInfo_ProtoModID_Parse(
    const ::std::string& name, stReqUserDetailInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUserDetailInfo_ProtoModID>(
    stReqUserDetailInfo_ProtoModID_descriptor(), name, value);
}
enum stReqUserDetailInfo_ProtoFunID {
  stReqUserDetailInfo_ProtoFunID_FunID = 71
};
bool stReqUserDetailInfo_ProtoFunID_IsValid(int value);
const stReqUserDetailInfo_ProtoFunID stReqUserDetailInfo_ProtoFunID_ProtoFunID_MIN = stReqUserDetailInfo_ProtoFunID_FunID;
const stReqUserDetailInfo_ProtoFunID stReqUserDetailInfo_ProtoFunID_ProtoFunID_MAX = stReqUserDetailInfo_ProtoFunID_FunID;
const int stReqUserDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUserDetailInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUserDetailInfo_ProtoFunID_descriptor();
inline const ::std::string& stReqUserDetailInfo_ProtoFunID_Name(stReqUserDetailInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUserDetailInfo_ProtoFunID_descriptor(), value);
}
inline bool stReqUserDetailInfo_ProtoFunID_Parse(
    const ::std::string& name, stReqUserDetailInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUserDetailInfo_ProtoFunID>(
    stReqUserDetailInfo_ProtoFunID_descriptor(), name, value);
}
enum stUserDetailInfo_ProtoModID {
  stUserDetailInfo_ProtoModID_ModID = 2
};
bool stUserDetailInfo_ProtoModID_IsValid(int value);
const stUserDetailInfo_ProtoModID stUserDetailInfo_ProtoModID_ProtoModID_MIN = stUserDetailInfo_ProtoModID_ModID;
const stUserDetailInfo_ProtoModID stUserDetailInfo_ProtoModID_ProtoModID_MAX = stUserDetailInfo_ProtoModID_ModID;
const int stUserDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE = stUserDetailInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserDetailInfo_ProtoModID_descriptor();
inline const ::std::string& stUserDetailInfo_ProtoModID_Name(stUserDetailInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserDetailInfo_ProtoModID_descriptor(), value);
}
inline bool stUserDetailInfo_ProtoModID_Parse(
    const ::std::string& name, stUserDetailInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserDetailInfo_ProtoModID>(
    stUserDetailInfo_ProtoModID_descriptor(), name, value);
}
enum stUserDetailInfo_ProtoFunID {
  stUserDetailInfo_ProtoFunID_FunID = 72
};
bool stUserDetailInfo_ProtoFunID_IsValid(int value);
const stUserDetailInfo_ProtoFunID stUserDetailInfo_ProtoFunID_ProtoFunID_MIN = stUserDetailInfo_ProtoFunID_FunID;
const stUserDetailInfo_ProtoFunID stUserDetailInfo_ProtoFunID_ProtoFunID_MAX = stUserDetailInfo_ProtoFunID_FunID;
const int stUserDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stUserDetailInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUserDetailInfo_ProtoFunID_descriptor();
inline const ::std::string& stUserDetailInfo_ProtoFunID_Name(stUserDetailInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUserDetailInfo_ProtoFunID_descriptor(), value);
}
inline bool stUserDetailInfo_ProtoFunID_Parse(
    const ::std::string& name, stUserDetailInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUserDetailInfo_ProtoFunID>(
    stUserDetailInfo_ProtoFunID_descriptor(), name, value);
}
enum stUseItem_ProtoModID {
  stUseItem_ProtoModID_ModID = 2
};
bool stUseItem_ProtoModID_IsValid(int value);
const stUseItem_ProtoModID stUseItem_ProtoModID_ProtoModID_MIN = stUseItem_ProtoModID_ModID;
const stUseItem_ProtoModID stUseItem_ProtoModID_ProtoModID_MAX = stUseItem_ProtoModID_ModID;
const int stUseItem_ProtoModID_ProtoModID_ARRAYSIZE = stUseItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseItem_ProtoModID_descriptor();
inline const ::std::string& stUseItem_ProtoModID_Name(stUseItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseItem_ProtoModID_descriptor(), value);
}
inline bool stUseItem_ProtoModID_Parse(
    const ::std::string& name, stUseItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseItem_ProtoModID>(
    stUseItem_ProtoModID_descriptor(), name, value);
}
enum stUseItem_ProtoFunID {
  stUseItem_ProtoFunID_FunID = 73
};
bool stUseItem_ProtoFunID_IsValid(int value);
const stUseItem_ProtoFunID stUseItem_ProtoFunID_ProtoFunID_MIN = stUseItem_ProtoFunID_FunID;
const stUseItem_ProtoFunID stUseItem_ProtoFunID_ProtoFunID_MAX = stUseItem_ProtoFunID_FunID;
const int stUseItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stUseItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseItem_ProtoFunID_descriptor();
inline const ::std::string& stUseItem_ProtoFunID_Name(stUseItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseItem_ProtoFunID_descriptor(), value);
}
inline bool stUseItem_ProtoFunID_Parse(
    const ::std::string& name, stUseItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseItem_ProtoFunID>(
    stUseItem_ProtoFunID_descriptor(), name, value);
}
enum stUseItemError_eResult {
  stUseItemError_eResult_eItem_Not_Exist = 1,
  stUseItemError_eResult_eBag_Slot_Not_Enough = 2,
  stUseItemError_eResult_eBag_Need_Media_Not_Exist = 3,
  stUseItemError_eResult_eSuccess = 4,
  stUseItemError_eResult_eUse_Item_Invalid = 5
};
bool stUseItemError_eResult_IsValid(int value);
const stUseItemError_eResult stUseItemError_eResult_eResult_MIN = stUseItemError_eResult_eItem_Not_Exist;
const stUseItemError_eResult stUseItemError_eResult_eResult_MAX = stUseItemError_eResult_eUse_Item_Invalid;
const int stUseItemError_eResult_eResult_ARRAYSIZE = stUseItemError_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseItemError_eResult_descriptor();
inline const ::std::string& stUseItemError_eResult_Name(stUseItemError_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseItemError_eResult_descriptor(), value);
}
inline bool stUseItemError_eResult_Parse(
    const ::std::string& name, stUseItemError_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseItemError_eResult>(
    stUseItemError_eResult_descriptor(), name, value);
}
enum stUseItemError_ProtoModID {
  stUseItemError_ProtoModID_ModID = 2
};
bool stUseItemError_ProtoModID_IsValid(int value);
const stUseItemError_ProtoModID stUseItemError_ProtoModID_ProtoModID_MIN = stUseItemError_ProtoModID_ModID;
const stUseItemError_ProtoModID stUseItemError_ProtoModID_ProtoModID_MAX = stUseItemError_ProtoModID_ModID;
const int stUseItemError_ProtoModID_ProtoModID_ARRAYSIZE = stUseItemError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseItemError_ProtoModID_descriptor();
inline const ::std::string& stUseItemError_ProtoModID_Name(stUseItemError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseItemError_ProtoModID_descriptor(), value);
}
inline bool stUseItemError_ProtoModID_Parse(
    const ::std::string& name, stUseItemError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseItemError_ProtoModID>(
    stUseItemError_ProtoModID_descriptor(), name, value);
}
enum stUseItemError_ProtoFunID {
  stUseItemError_ProtoFunID_FunID = 74
};
bool stUseItemError_ProtoFunID_IsValid(int value);
const stUseItemError_ProtoFunID stUseItemError_ProtoFunID_ProtoFunID_MIN = stUseItemError_ProtoFunID_FunID;
const stUseItemError_ProtoFunID stUseItemError_ProtoFunID_ProtoFunID_MAX = stUseItemError_ProtoFunID_FunID;
const int stUseItemError_ProtoFunID_ProtoFunID_ARRAYSIZE = stUseItemError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUseItemError_ProtoFunID_descriptor();
inline const ::std::string& stUseItemError_ProtoFunID_Name(stUseItemError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUseItemError_ProtoFunID_descriptor(), value);
}
inline bool stUseItemError_ProtoFunID_Parse(
    const ::std::string& name, stUseItemError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUseItemError_ProtoFunID>(
    stUseItemError_ProtoFunID_descriptor(), name, value);
}
enum stObtainItemTip_ProtoModID {
  stObtainItemTip_ProtoModID_ModID = 2
};
bool stObtainItemTip_ProtoModID_IsValid(int value);
const stObtainItemTip_ProtoModID stObtainItemTip_ProtoModID_ProtoModID_MIN = stObtainItemTip_ProtoModID_ModID;
const stObtainItemTip_ProtoModID stObtainItemTip_ProtoModID_ProtoModID_MAX = stObtainItemTip_ProtoModID_ModID;
const int stObtainItemTip_ProtoModID_ProtoModID_ARRAYSIZE = stObtainItemTip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoModID_descriptor();
inline const ::std::string& stObtainItemTip_ProtoModID_Name(stObtainItemTip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stObtainItemTip_ProtoModID_descriptor(), value);
}
inline bool stObtainItemTip_ProtoModID_Parse(
    const ::std::string& name, stObtainItemTip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stObtainItemTip_ProtoModID>(
    stObtainItemTip_ProtoModID_descriptor(), name, value);
}
enum stObtainItemTip_ProtoFunID {
  stObtainItemTip_ProtoFunID_FunID = 75
};
bool stObtainItemTip_ProtoFunID_IsValid(int value);
const stObtainItemTip_ProtoFunID stObtainItemTip_ProtoFunID_ProtoFunID_MIN = stObtainItemTip_ProtoFunID_FunID;
const stObtainItemTip_ProtoFunID stObtainItemTip_ProtoFunID_ProtoFunID_MAX = stObtainItemTip_ProtoFunID_FunID;
const int stObtainItemTip_ProtoFunID_ProtoFunID_ARRAYSIZE = stObtainItemTip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stObtainItemTip_ProtoFunID_descriptor();
inline const ::std::string& stObtainItemTip_ProtoFunID_Name(stObtainItemTip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stObtainItemTip_ProtoFunID_descriptor(), value);
}
inline bool stObtainItemTip_ProtoFunID_Parse(
    const ::std::string& name, stObtainItemTip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stObtainItemTip_ProtoFunID>(
    stObtainItemTip_ProtoFunID_descriptor(), name, value);
}
enum stReqGetEquipSkill_ProtoModID {
  stReqGetEquipSkill_ProtoModID_ModID = 2
};
bool stReqGetEquipSkill_ProtoModID_IsValid(int value);
const stReqGetEquipSkill_ProtoModID stReqGetEquipSkill_ProtoModID_ProtoModID_MIN = stReqGetEquipSkill_ProtoModID_ModID;
const stReqGetEquipSkill_ProtoModID stReqGetEquipSkill_ProtoModID_ProtoModID_MAX = stReqGetEquipSkill_ProtoModID_ModID;
const int stReqGetEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE = stReqGetEquipSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGetEquipSkill_ProtoModID_descriptor();
inline const ::std::string& stReqGetEquipSkill_ProtoModID_Name(stReqGetEquipSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGetEquipSkill_ProtoModID_descriptor(), value);
}
inline bool stReqGetEquipSkill_ProtoModID_Parse(
    const ::std::string& name, stReqGetEquipSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGetEquipSkill_ProtoModID>(
    stReqGetEquipSkill_ProtoModID_descriptor(), name, value);
}
enum stReqGetEquipSkill_ProtoFunID {
  stReqGetEquipSkill_ProtoFunID_FunID = 76
};
bool stReqGetEquipSkill_ProtoFunID_IsValid(int value);
const stReqGetEquipSkill_ProtoFunID stReqGetEquipSkill_ProtoFunID_ProtoFunID_MIN = stReqGetEquipSkill_ProtoFunID_FunID;
const stReqGetEquipSkill_ProtoFunID stReqGetEquipSkill_ProtoFunID_ProtoFunID_MAX = stReqGetEquipSkill_ProtoFunID_FunID;
const int stReqGetEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGetEquipSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGetEquipSkill_ProtoFunID_descriptor();
inline const ::std::string& stReqGetEquipSkill_ProtoFunID_Name(stReqGetEquipSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGetEquipSkill_ProtoFunID_descriptor(), value);
}
inline bool stReqGetEquipSkill_ProtoFunID_Parse(
    const ::std::string& name, stReqGetEquipSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGetEquipSkill_ProtoFunID>(
    stReqGetEquipSkill_ProtoFunID_descriptor(), name, value);
}
enum stGetEquipSkillResult_eResult {
  stGetEquipSkillResult_eResult_SUCCESS = 1,
  stGetEquipSkillResult_eResult_NOT_ENOUGH_DIAMOND = 2,
  stGetEquipSkillResult_eResult_TIME_USE_OUT = 3,
  stGetEquipSkillResult_eResult_HAS_GOT_SKILL = 4
};
bool stGetEquipSkillResult_eResult_IsValid(int value);
const stGetEquipSkillResult_eResult stGetEquipSkillResult_eResult_eResult_MIN = stGetEquipSkillResult_eResult_SUCCESS;
const stGetEquipSkillResult_eResult stGetEquipSkillResult_eResult_eResult_MAX = stGetEquipSkillResult_eResult_HAS_GOT_SKILL;
const int stGetEquipSkillResult_eResult_eResult_ARRAYSIZE = stGetEquipSkillResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetEquipSkillResult_eResult_descriptor();
inline const ::std::string& stGetEquipSkillResult_eResult_Name(stGetEquipSkillResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetEquipSkillResult_eResult_descriptor(), value);
}
inline bool stGetEquipSkillResult_eResult_Parse(
    const ::std::string& name, stGetEquipSkillResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetEquipSkillResult_eResult>(
    stGetEquipSkillResult_eResult_descriptor(), name, value);
}
enum stGetEquipSkillResult_ProtoModID {
  stGetEquipSkillResult_ProtoModID_ModID = 2
};
bool stGetEquipSkillResult_ProtoModID_IsValid(int value);
const stGetEquipSkillResult_ProtoModID stGetEquipSkillResult_ProtoModID_ProtoModID_MIN = stGetEquipSkillResult_ProtoModID_ModID;
const stGetEquipSkillResult_ProtoModID stGetEquipSkillResult_ProtoModID_ProtoModID_MAX = stGetEquipSkillResult_ProtoModID_ModID;
const int stGetEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stGetEquipSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetEquipSkillResult_ProtoModID_descriptor();
inline const ::std::string& stGetEquipSkillResult_ProtoModID_Name(stGetEquipSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetEquipSkillResult_ProtoModID_descriptor(), value);
}
inline bool stGetEquipSkillResult_ProtoModID_Parse(
    const ::std::string& name, stGetEquipSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetEquipSkillResult_ProtoModID>(
    stGetEquipSkillResult_ProtoModID_descriptor(), name, value);
}
enum stGetEquipSkillResult_ProtoFunID {
  stGetEquipSkillResult_ProtoFunID_FunID = 77
};
bool stGetEquipSkillResult_ProtoFunID_IsValid(int value);
const stGetEquipSkillResult_ProtoFunID stGetEquipSkillResult_ProtoFunID_ProtoFunID_MIN = stGetEquipSkillResult_ProtoFunID_FunID;
const stGetEquipSkillResult_ProtoFunID stGetEquipSkillResult_ProtoFunID_ProtoFunID_MAX = stGetEquipSkillResult_ProtoFunID_FunID;
const int stGetEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGetEquipSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGetEquipSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stGetEquipSkillResult_ProtoFunID_Name(stGetEquipSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGetEquipSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stGetEquipSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stGetEquipSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGetEquipSkillResult_ProtoFunID>(
    stGetEquipSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRefineEquipSkill_ProtoModID {
  stReqRefineEquipSkill_ProtoModID_ModID = 2
};
bool stReqRefineEquipSkill_ProtoModID_IsValid(int value);
const stReqRefineEquipSkill_ProtoModID stReqRefineEquipSkill_ProtoModID_ProtoModID_MIN = stReqRefineEquipSkill_ProtoModID_ModID;
const stReqRefineEquipSkill_ProtoModID stReqRefineEquipSkill_ProtoModID_ProtoModID_MAX = stReqRefineEquipSkill_ProtoModID_ModID;
const int stReqRefineEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE = stReqRefineEquipSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefineEquipSkill_ProtoModID_descriptor();
inline const ::std::string& stReqRefineEquipSkill_ProtoModID_Name(stReqRefineEquipSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefineEquipSkill_ProtoModID_descriptor(), value);
}
inline bool stReqRefineEquipSkill_ProtoModID_Parse(
    const ::std::string& name, stReqRefineEquipSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefineEquipSkill_ProtoModID>(
    stReqRefineEquipSkill_ProtoModID_descriptor(), name, value);
}
enum stReqRefineEquipSkill_ProtoFunID {
  stReqRefineEquipSkill_ProtoFunID_FunID = 78
};
bool stReqRefineEquipSkill_ProtoFunID_IsValid(int value);
const stReqRefineEquipSkill_ProtoFunID stReqRefineEquipSkill_ProtoFunID_ProtoFunID_MIN = stReqRefineEquipSkill_ProtoFunID_FunID;
const stReqRefineEquipSkill_ProtoFunID stReqRefineEquipSkill_ProtoFunID_ProtoFunID_MAX = stReqRefineEquipSkill_ProtoFunID_FunID;
const int stReqRefineEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRefineEquipSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefineEquipSkill_ProtoFunID_descriptor();
inline const ::std::string& stReqRefineEquipSkill_ProtoFunID_Name(stReqRefineEquipSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefineEquipSkill_ProtoFunID_descriptor(), value);
}
inline bool stReqRefineEquipSkill_ProtoFunID_Parse(
    const ::std::string& name, stReqRefineEquipSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefineEquipSkill_ProtoFunID>(
    stReqRefineEquipSkill_ProtoFunID_descriptor(), name, value);
}
enum stRefineEquipSkillResult_eResult {
  stRefineEquipSkillResult_eResult_eSuccess = 1,
  stRefineEquipSkillResult_eResult_eSkill_Not_Exist = 2,
  stRefineEquipSkillResult_eResult_eInner_Error = 3
};
bool stRefineEquipSkillResult_eResult_IsValid(int value);
const stRefineEquipSkillResult_eResult stRefineEquipSkillResult_eResult_eResult_MIN = stRefineEquipSkillResult_eResult_eSuccess;
const stRefineEquipSkillResult_eResult stRefineEquipSkillResult_eResult_eResult_MAX = stRefineEquipSkillResult_eResult_eInner_Error;
const int stRefineEquipSkillResult_eResult_eResult_ARRAYSIZE = stRefineEquipSkillResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefineEquipSkillResult_eResult_descriptor();
inline const ::std::string& stRefineEquipSkillResult_eResult_Name(stRefineEquipSkillResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefineEquipSkillResult_eResult_descriptor(), value);
}
inline bool stRefineEquipSkillResult_eResult_Parse(
    const ::std::string& name, stRefineEquipSkillResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefineEquipSkillResult_eResult>(
    stRefineEquipSkillResult_eResult_descriptor(), name, value);
}
enum stRefineEquipSkillResult_ProtoModID {
  stRefineEquipSkillResult_ProtoModID_ModID = 2
};
bool stRefineEquipSkillResult_ProtoModID_IsValid(int value);
const stRefineEquipSkillResult_ProtoModID stRefineEquipSkillResult_ProtoModID_ProtoModID_MIN = stRefineEquipSkillResult_ProtoModID_ModID;
const stRefineEquipSkillResult_ProtoModID stRefineEquipSkillResult_ProtoModID_ProtoModID_MAX = stRefineEquipSkillResult_ProtoModID_ModID;
const int stRefineEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stRefineEquipSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefineEquipSkillResult_ProtoModID_descriptor();
inline const ::std::string& stRefineEquipSkillResult_ProtoModID_Name(stRefineEquipSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefineEquipSkillResult_ProtoModID_descriptor(), value);
}
inline bool stRefineEquipSkillResult_ProtoModID_Parse(
    const ::std::string& name, stRefineEquipSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefineEquipSkillResult_ProtoModID>(
    stRefineEquipSkillResult_ProtoModID_descriptor(), name, value);
}
enum stRefineEquipSkillResult_ProtoFunID {
  stRefineEquipSkillResult_ProtoFunID_FunID = 79
};
bool stRefineEquipSkillResult_ProtoFunID_IsValid(int value);
const stRefineEquipSkillResult_ProtoFunID stRefineEquipSkillResult_ProtoFunID_ProtoFunID_MIN = stRefineEquipSkillResult_ProtoFunID_FunID;
const stRefineEquipSkillResult_ProtoFunID stRefineEquipSkillResult_ProtoFunID_ProtoFunID_MAX = stRefineEquipSkillResult_ProtoFunID_FunID;
const int stRefineEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefineEquipSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefineEquipSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stRefineEquipSkillResult_ProtoFunID_Name(stRefineEquipSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefineEquipSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stRefineEquipSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stRefineEquipSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefineEquipSkillResult_ProtoFunID>(
    stRefineEquipSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stMoveEquipSkill2Slot_ProtoModID {
  stMoveEquipSkill2Slot_ProtoModID_ModID = 2
};
bool stMoveEquipSkill2Slot_ProtoModID_IsValid(int value);
const stMoveEquipSkill2Slot_ProtoModID stMoveEquipSkill2Slot_ProtoModID_ProtoModID_MIN = stMoveEquipSkill2Slot_ProtoModID_ModID;
const stMoveEquipSkill2Slot_ProtoModID stMoveEquipSkill2Slot_ProtoModID_ProtoModID_MAX = stMoveEquipSkill2Slot_ProtoModID_ModID;
const int stMoveEquipSkill2Slot_ProtoModID_ProtoModID_ARRAYSIZE = stMoveEquipSkill2Slot_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMoveEquipSkill2Slot_ProtoModID_descriptor();
inline const ::std::string& stMoveEquipSkill2Slot_ProtoModID_Name(stMoveEquipSkill2Slot_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMoveEquipSkill2Slot_ProtoModID_descriptor(), value);
}
inline bool stMoveEquipSkill2Slot_ProtoModID_Parse(
    const ::std::string& name, stMoveEquipSkill2Slot_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMoveEquipSkill2Slot_ProtoModID>(
    stMoveEquipSkill2Slot_ProtoModID_descriptor(), name, value);
}
enum stMoveEquipSkill2Slot_ProtoFunID {
  stMoveEquipSkill2Slot_ProtoFunID_FunID = 80
};
bool stMoveEquipSkill2Slot_ProtoFunID_IsValid(int value);
const stMoveEquipSkill2Slot_ProtoFunID stMoveEquipSkill2Slot_ProtoFunID_ProtoFunID_MIN = stMoveEquipSkill2Slot_ProtoFunID_FunID;
const stMoveEquipSkill2Slot_ProtoFunID stMoveEquipSkill2Slot_ProtoFunID_ProtoFunID_MAX = stMoveEquipSkill2Slot_ProtoFunID_FunID;
const int stMoveEquipSkill2Slot_ProtoFunID_ProtoFunID_ARRAYSIZE = stMoveEquipSkill2Slot_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMoveEquipSkill2Slot_ProtoFunID_descriptor();
inline const ::std::string& stMoveEquipSkill2Slot_ProtoFunID_Name(stMoveEquipSkill2Slot_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMoveEquipSkill2Slot_ProtoFunID_descriptor(), value);
}
inline bool stMoveEquipSkill2Slot_ProtoFunID_Parse(
    const ::std::string& name, stMoveEquipSkill2Slot_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMoveEquipSkill2Slot_ProtoFunID>(
    stMoveEquipSkill2Slot_ProtoFunID_descriptor(), name, value);
}
enum stMoveEquipSkillResult_eResult {
  stMoveEquipSkillResult_eResult_eSuccess = 1,
  stMoveEquipSkillResult_eResult_eSlot_Was_Locked = 2
};
bool stMoveEquipSkillResult_eResult_IsValid(int value);
const stMoveEquipSkillResult_eResult stMoveEquipSkillResult_eResult_eResult_MIN = stMoveEquipSkillResult_eResult_eSuccess;
const stMoveEquipSkillResult_eResult stMoveEquipSkillResult_eResult_eResult_MAX = stMoveEquipSkillResult_eResult_eSlot_Was_Locked;
const int stMoveEquipSkillResult_eResult_eResult_ARRAYSIZE = stMoveEquipSkillResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMoveEquipSkillResult_eResult_descriptor();
inline const ::std::string& stMoveEquipSkillResult_eResult_Name(stMoveEquipSkillResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMoveEquipSkillResult_eResult_descriptor(), value);
}
inline bool stMoveEquipSkillResult_eResult_Parse(
    const ::std::string& name, stMoveEquipSkillResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMoveEquipSkillResult_eResult>(
    stMoveEquipSkillResult_eResult_descriptor(), name, value);
}
enum stMoveEquipSkillResult_ProtoModID {
  stMoveEquipSkillResult_ProtoModID_ModID = 2
};
bool stMoveEquipSkillResult_ProtoModID_IsValid(int value);
const stMoveEquipSkillResult_ProtoModID stMoveEquipSkillResult_ProtoModID_ProtoModID_MIN = stMoveEquipSkillResult_ProtoModID_ModID;
const stMoveEquipSkillResult_ProtoModID stMoveEquipSkillResult_ProtoModID_ProtoModID_MAX = stMoveEquipSkillResult_ProtoModID_ModID;
const int stMoveEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stMoveEquipSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMoveEquipSkillResult_ProtoModID_descriptor();
inline const ::std::string& stMoveEquipSkillResult_ProtoModID_Name(stMoveEquipSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMoveEquipSkillResult_ProtoModID_descriptor(), value);
}
inline bool stMoveEquipSkillResult_ProtoModID_Parse(
    const ::std::string& name, stMoveEquipSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMoveEquipSkillResult_ProtoModID>(
    stMoveEquipSkillResult_ProtoModID_descriptor(), name, value);
}
enum stMoveEquipSkillResult_ProtoFunID {
  stMoveEquipSkillResult_ProtoFunID_FunID = 81
};
bool stMoveEquipSkillResult_ProtoFunID_IsValid(int value);
const stMoveEquipSkillResult_ProtoFunID stMoveEquipSkillResult_ProtoFunID_ProtoFunID_MIN = stMoveEquipSkillResult_ProtoFunID_FunID;
const stMoveEquipSkillResult_ProtoFunID stMoveEquipSkillResult_ProtoFunID_ProtoFunID_MAX = stMoveEquipSkillResult_ProtoFunID_FunID;
const int stMoveEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stMoveEquipSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMoveEquipSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stMoveEquipSkillResult_ProtoFunID_Name(stMoveEquipSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMoveEquipSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stMoveEquipSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stMoveEquipSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMoveEquipSkillResult_ProtoFunID>(
    stMoveEquipSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stReqUpgradeEquipSkill_ProtoModID {
  stReqUpgradeEquipSkill_ProtoModID_ModID = 2
};
bool stReqUpgradeEquipSkill_ProtoModID_IsValid(int value);
const stReqUpgradeEquipSkill_ProtoModID stReqUpgradeEquipSkill_ProtoModID_ProtoModID_MIN = stReqUpgradeEquipSkill_ProtoModID_ModID;
const stReqUpgradeEquipSkill_ProtoModID stReqUpgradeEquipSkill_ProtoModID_ProtoModID_MAX = stReqUpgradeEquipSkill_ProtoModID_ModID;
const int stReqUpgradeEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE = stReqUpgradeEquipSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUpgradeEquipSkill_ProtoModID_descriptor();
inline const ::std::string& stReqUpgradeEquipSkill_ProtoModID_Name(stReqUpgradeEquipSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUpgradeEquipSkill_ProtoModID_descriptor(), value);
}
inline bool stReqUpgradeEquipSkill_ProtoModID_Parse(
    const ::std::string& name, stReqUpgradeEquipSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUpgradeEquipSkill_ProtoModID>(
    stReqUpgradeEquipSkill_ProtoModID_descriptor(), name, value);
}
enum stReqUpgradeEquipSkill_ProtoFunID {
  stReqUpgradeEquipSkill_ProtoFunID_FunID = 82
};
bool stReqUpgradeEquipSkill_ProtoFunID_IsValid(int value);
const stReqUpgradeEquipSkill_ProtoFunID stReqUpgradeEquipSkill_ProtoFunID_ProtoFunID_MIN = stReqUpgradeEquipSkill_ProtoFunID_FunID;
const stReqUpgradeEquipSkill_ProtoFunID stReqUpgradeEquipSkill_ProtoFunID_ProtoFunID_MAX = stReqUpgradeEquipSkill_ProtoFunID_FunID;
const int stReqUpgradeEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUpgradeEquipSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUpgradeEquipSkill_ProtoFunID_descriptor();
inline const ::std::string& stReqUpgradeEquipSkill_ProtoFunID_Name(stReqUpgradeEquipSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUpgradeEquipSkill_ProtoFunID_descriptor(), value);
}
inline bool stReqUpgradeEquipSkill_ProtoFunID_Parse(
    const ::std::string& name, stReqUpgradeEquipSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUpgradeEquipSkill_ProtoFunID>(
    stReqUpgradeEquipSkill_ProtoFunID_descriptor(), name, value);
}
enum stUpgradeEquipSkillResult_eResult {
  stUpgradeEquipSkillResult_eResult_eSuccess = 1,
  stUpgradeEquipSkillResult_eResult_eMoney_Not_Enough = 2,
  stUpgradeEquipSkillResult_eResult_eFull_Lv = 3,
  stUpgradeEquipSkillResult_eResult_eInner_Error = 4
};
bool stUpgradeEquipSkillResult_eResult_IsValid(int value);
const stUpgradeEquipSkillResult_eResult stUpgradeEquipSkillResult_eResult_eResult_MIN = stUpgradeEquipSkillResult_eResult_eSuccess;
const stUpgradeEquipSkillResult_eResult stUpgradeEquipSkillResult_eResult_eResult_MAX = stUpgradeEquipSkillResult_eResult_eInner_Error;
const int stUpgradeEquipSkillResult_eResult_eResult_ARRAYSIZE = stUpgradeEquipSkillResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeEquipSkillResult_eResult_descriptor();
inline const ::std::string& stUpgradeEquipSkillResult_eResult_Name(stUpgradeEquipSkillResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeEquipSkillResult_eResult_descriptor(), value);
}
inline bool stUpgradeEquipSkillResult_eResult_Parse(
    const ::std::string& name, stUpgradeEquipSkillResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeEquipSkillResult_eResult>(
    stUpgradeEquipSkillResult_eResult_descriptor(), name, value);
}
enum stUpgradeEquipSkillResult_ProtoModID {
  stUpgradeEquipSkillResult_ProtoModID_ModID = 2
};
bool stUpgradeEquipSkillResult_ProtoModID_IsValid(int value);
const stUpgradeEquipSkillResult_ProtoModID stUpgradeEquipSkillResult_ProtoModID_ProtoModID_MIN = stUpgradeEquipSkillResult_ProtoModID_ModID;
const stUpgradeEquipSkillResult_ProtoModID stUpgradeEquipSkillResult_ProtoModID_ProtoModID_MAX = stUpgradeEquipSkillResult_ProtoModID_ModID;
const int stUpgradeEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stUpgradeEquipSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeEquipSkillResult_ProtoModID_descriptor();
inline const ::std::string& stUpgradeEquipSkillResult_ProtoModID_Name(stUpgradeEquipSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeEquipSkillResult_ProtoModID_descriptor(), value);
}
inline bool stUpgradeEquipSkillResult_ProtoModID_Parse(
    const ::std::string& name, stUpgradeEquipSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeEquipSkillResult_ProtoModID>(
    stUpgradeEquipSkillResult_ProtoModID_descriptor(), name, value);
}
enum stUpgradeEquipSkillResult_ProtoFunID {
  stUpgradeEquipSkillResult_ProtoFunID_FunID = 83
};
bool stUpgradeEquipSkillResult_ProtoFunID_IsValid(int value);
const stUpgradeEquipSkillResult_ProtoFunID stUpgradeEquipSkillResult_ProtoFunID_ProtoFunID_MIN = stUpgradeEquipSkillResult_ProtoFunID_FunID;
const stUpgradeEquipSkillResult_ProtoFunID stUpgradeEquipSkillResult_ProtoFunID_ProtoFunID_MAX = stUpgradeEquipSkillResult_ProtoFunID_FunID;
const int stUpgradeEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stUpgradeEquipSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeEquipSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stUpgradeEquipSkillResult_ProtoFunID_Name(stUpgradeEquipSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeEquipSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stUpgradeEquipSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stUpgradeEquipSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeEquipSkillResult_ProtoFunID>(
    stUpgradeEquipSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stSendPKUserData_ePKType {
  stSendPKUserData_ePKType_eArena_PK = 1,
  stSendPKUserData_ePKType_eLeitai_PK = 2,
  stSendPKUserData_ePKType_eIntercept_PK = 3
};
bool stSendPKUserData_ePKType_IsValid(int value);
const stSendPKUserData_ePKType stSendPKUserData_ePKType_ePKType_MIN = stSendPKUserData_ePKType_eArena_PK;
const stSendPKUserData_ePKType stSendPKUserData_ePKType_ePKType_MAX = stSendPKUserData_ePKType_eIntercept_PK;
const int stSendPKUserData_ePKType_ePKType_ARRAYSIZE = stSendPKUserData_ePKType_ePKType_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendPKUserData_ePKType_descriptor();
inline const ::std::string& stSendPKUserData_ePKType_Name(stSendPKUserData_ePKType value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendPKUserData_ePKType_descriptor(), value);
}
inline bool stSendPKUserData_ePKType_Parse(
    const ::std::string& name, stSendPKUserData_ePKType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendPKUserData_ePKType>(
    stSendPKUserData_ePKType_descriptor(), name, value);
}
enum stSendPKUserData_ProtoModID {
  stSendPKUserData_ProtoModID_ModID = 2
};
bool stSendPKUserData_ProtoModID_IsValid(int value);
const stSendPKUserData_ProtoModID stSendPKUserData_ProtoModID_ProtoModID_MIN = stSendPKUserData_ProtoModID_ModID;
const stSendPKUserData_ProtoModID stSendPKUserData_ProtoModID_ProtoModID_MAX = stSendPKUserData_ProtoModID_ModID;
const int stSendPKUserData_ProtoModID_ProtoModID_ARRAYSIZE = stSendPKUserData_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendPKUserData_ProtoModID_descriptor();
inline const ::std::string& stSendPKUserData_ProtoModID_Name(stSendPKUserData_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendPKUserData_ProtoModID_descriptor(), value);
}
inline bool stSendPKUserData_ProtoModID_Parse(
    const ::std::string& name, stSendPKUserData_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendPKUserData_ProtoModID>(
    stSendPKUserData_ProtoModID_descriptor(), name, value);
}
enum stSendPKUserData_ProtoFunID {
  stSendPKUserData_ProtoFunID_FunID = 84
};
bool stSendPKUserData_ProtoFunID_IsValid(int value);
const stSendPKUserData_ProtoFunID stSendPKUserData_ProtoFunID_ProtoFunID_MIN = stSendPKUserData_ProtoFunID_FunID;
const stSendPKUserData_ProtoFunID stSendPKUserData_ProtoFunID_ProtoFunID_MAX = stSendPKUserData_ProtoFunID_FunID;
const int stSendPKUserData_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendPKUserData_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendPKUserData_ProtoFunID_descriptor();
inline const ::std::string& stSendPKUserData_ProtoFunID_Name(stSendPKUserData_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendPKUserData_ProtoFunID_descriptor(), value);
}
inline bool stSendPKUserData_ProtoFunID_Parse(
    const ::std::string& name, stSendPKUserData_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendPKUserData_ProtoFunID>(
    stSendPKUserData_ProtoFunID_descriptor(), name, value);
}
enum stReqRaiseUserSkillLv_ProtoModID {
  stReqRaiseUserSkillLv_ProtoModID_ModID = 2
};
bool stReqRaiseUserSkillLv_ProtoModID_IsValid(int value);
const stReqRaiseUserSkillLv_ProtoModID stReqRaiseUserSkillLv_ProtoModID_ProtoModID_MIN = stReqRaiseUserSkillLv_ProtoModID_ModID;
const stReqRaiseUserSkillLv_ProtoModID stReqRaiseUserSkillLv_ProtoModID_ProtoModID_MAX = stReqRaiseUserSkillLv_ProtoModID_ModID;
const int stReqRaiseUserSkillLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqRaiseUserSkillLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRaiseUserSkillLv_ProtoModID_descriptor();
inline const ::std::string& stReqRaiseUserSkillLv_ProtoModID_Name(stReqRaiseUserSkillLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRaiseUserSkillLv_ProtoModID_descriptor(), value);
}
inline bool stReqRaiseUserSkillLv_ProtoModID_Parse(
    const ::std::string& name, stReqRaiseUserSkillLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRaiseUserSkillLv_ProtoModID>(
    stReqRaiseUserSkillLv_ProtoModID_descriptor(), name, value);
}
enum stReqRaiseUserSkillLv_ProtoFunID {
  stReqRaiseUserSkillLv_ProtoFunID_FunID = 85
};
bool stReqRaiseUserSkillLv_ProtoFunID_IsValid(int value);
const stReqRaiseUserSkillLv_ProtoFunID stReqRaiseUserSkillLv_ProtoFunID_ProtoFunID_MIN = stReqRaiseUserSkillLv_ProtoFunID_FunID;
const stReqRaiseUserSkillLv_ProtoFunID stReqRaiseUserSkillLv_ProtoFunID_ProtoFunID_MAX = stReqRaiseUserSkillLv_ProtoFunID_FunID;
const int stReqRaiseUserSkillLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRaiseUserSkillLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRaiseUserSkillLv_ProtoFunID_descriptor();
inline const ::std::string& stReqRaiseUserSkillLv_ProtoFunID_Name(stReqRaiseUserSkillLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRaiseUserSkillLv_ProtoFunID_descriptor(), value);
}
inline bool stReqRaiseUserSkillLv_ProtoFunID_Parse(
    const ::std::string& name, stReqRaiseUserSkillLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRaiseUserSkillLv_ProtoFunID>(
    stReqRaiseUserSkillLv_ProtoFunID_descriptor(), name, value);
}
enum stRaiseUserSkillLvResult_eResult {
  stRaiseUserSkillLvResult_eResult_eSuccess = 1,
  stRaiseUserSkillLvResult_eResult_eSkill_Not_Exist = 2,
  stRaiseUserSkillLvResult_eResult_eInner_Cfg_Error = 3,
  stRaiseUserSkillLvResult_eResult_eGoldCoin_Not_Enough = 4,
  stRaiseUserSkillLvResult_eResult_eRole_Lv_Limit = 5
};
bool stRaiseUserSkillLvResult_eResult_IsValid(int value);
const stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult_eResult_eResult_MIN = stRaiseUserSkillLvResult_eResult_eSuccess;
const stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult_eResult_eResult_MAX = stRaiseUserSkillLvResult_eResult_eRole_Lv_Limit;
const int stRaiseUserSkillLvResult_eResult_eResult_ARRAYSIZE = stRaiseUserSkillLvResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRaiseUserSkillLvResult_eResult_descriptor();
inline const ::std::string& stRaiseUserSkillLvResult_eResult_Name(stRaiseUserSkillLvResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRaiseUserSkillLvResult_eResult_descriptor(), value);
}
inline bool stRaiseUserSkillLvResult_eResult_Parse(
    const ::std::string& name, stRaiseUserSkillLvResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRaiseUserSkillLvResult_eResult>(
    stRaiseUserSkillLvResult_eResult_descriptor(), name, value);
}
enum stRaiseUserSkillLvResult_ProtoModID {
  stRaiseUserSkillLvResult_ProtoModID_ModID = 2
};
bool stRaiseUserSkillLvResult_ProtoModID_IsValid(int value);
const stRaiseUserSkillLvResult_ProtoModID stRaiseUserSkillLvResult_ProtoModID_ProtoModID_MIN = stRaiseUserSkillLvResult_ProtoModID_ModID;
const stRaiseUserSkillLvResult_ProtoModID stRaiseUserSkillLvResult_ProtoModID_ProtoModID_MAX = stRaiseUserSkillLvResult_ProtoModID_ModID;
const int stRaiseUserSkillLvResult_ProtoModID_ProtoModID_ARRAYSIZE = stRaiseUserSkillLvResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRaiseUserSkillLvResult_ProtoModID_descriptor();
inline const ::std::string& stRaiseUserSkillLvResult_ProtoModID_Name(stRaiseUserSkillLvResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRaiseUserSkillLvResult_ProtoModID_descriptor(), value);
}
inline bool stRaiseUserSkillLvResult_ProtoModID_Parse(
    const ::std::string& name, stRaiseUserSkillLvResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRaiseUserSkillLvResult_ProtoModID>(
    stRaiseUserSkillLvResult_ProtoModID_descriptor(), name, value);
}
enum stRaiseUserSkillLvResult_ProtoFunID {
  stRaiseUserSkillLvResult_ProtoFunID_FunID = 86
};
bool stRaiseUserSkillLvResult_ProtoFunID_IsValid(int value);
const stRaiseUserSkillLvResult_ProtoFunID stRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MIN = stRaiseUserSkillLvResult_ProtoFunID_FunID;
const stRaiseUserSkillLvResult_ProtoFunID stRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MAX = stRaiseUserSkillLvResult_ProtoFunID_FunID;
const int stRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRaiseUserSkillLvResult_ProtoFunID_descriptor();
inline const ::std::string& stRaiseUserSkillLvResult_ProtoFunID_Name(stRaiseUserSkillLvResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRaiseUserSkillLvResult_ProtoFunID_descriptor(), value);
}
inline bool stRaiseUserSkillLvResult_ProtoFunID_Parse(
    const ::std::string& name, stRaiseUserSkillLvResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRaiseUserSkillLvResult_ProtoFunID>(
    stRaiseUserSkillLvResult_ProtoFunID_descriptor(), name, value);
}
enum stNotifyNewBieGuideStep_ProtoModID {
  stNotifyNewBieGuideStep_ProtoModID_ModID = 2
};
bool stNotifyNewBieGuideStep_ProtoModID_IsValid(int value);
const stNotifyNewBieGuideStep_ProtoModID stNotifyNewBieGuideStep_ProtoModID_ProtoModID_MIN = stNotifyNewBieGuideStep_ProtoModID_ModID;
const stNotifyNewBieGuideStep_ProtoModID stNotifyNewBieGuideStep_ProtoModID_ProtoModID_MAX = stNotifyNewBieGuideStep_ProtoModID_ModID;
const int stNotifyNewBieGuideStep_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyNewBieGuideStep_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyNewBieGuideStep_ProtoModID_descriptor();
inline const ::std::string& stNotifyNewBieGuideStep_ProtoModID_Name(stNotifyNewBieGuideStep_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyNewBieGuideStep_ProtoModID_descriptor(), value);
}
inline bool stNotifyNewBieGuideStep_ProtoModID_Parse(
    const ::std::string& name, stNotifyNewBieGuideStep_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyNewBieGuideStep_ProtoModID>(
    stNotifyNewBieGuideStep_ProtoModID_descriptor(), name, value);
}
enum stNotifyNewBieGuideStep_ProtoFunID {
  stNotifyNewBieGuideStep_ProtoFunID_FunID = 87
};
bool stNotifyNewBieGuideStep_ProtoFunID_IsValid(int value);
const stNotifyNewBieGuideStep_ProtoFunID stNotifyNewBieGuideStep_ProtoFunID_ProtoFunID_MIN = stNotifyNewBieGuideStep_ProtoFunID_FunID;
const stNotifyNewBieGuideStep_ProtoFunID stNotifyNewBieGuideStep_ProtoFunID_ProtoFunID_MAX = stNotifyNewBieGuideStep_ProtoFunID_FunID;
const int stNotifyNewBieGuideStep_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyNewBieGuideStep_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyNewBieGuideStep_ProtoFunID_descriptor();
inline const ::std::string& stNotifyNewBieGuideStep_ProtoFunID_Name(stNotifyNewBieGuideStep_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyNewBieGuideStep_ProtoFunID_descriptor(), value);
}
inline bool stNotifyNewBieGuideStep_ProtoFunID_Parse(
    const ::std::string& name, stNotifyNewBieGuideStep_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyNewBieGuideStep_ProtoFunID>(
    stNotifyNewBieGuideStep_ProtoFunID_descriptor(), name, value);
}
enum stSaveNewBieGuideStep_ProtoModID {
  stSaveNewBieGuideStep_ProtoModID_ModID = 2
};
bool stSaveNewBieGuideStep_ProtoModID_IsValid(int value);
const stSaveNewBieGuideStep_ProtoModID stSaveNewBieGuideStep_ProtoModID_ProtoModID_MIN = stSaveNewBieGuideStep_ProtoModID_ModID;
const stSaveNewBieGuideStep_ProtoModID stSaveNewBieGuideStep_ProtoModID_ProtoModID_MAX = stSaveNewBieGuideStep_ProtoModID_ModID;
const int stSaveNewBieGuideStep_ProtoModID_ProtoModID_ARRAYSIZE = stSaveNewBieGuideStep_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveNewBieGuideStep_ProtoModID_descriptor();
inline const ::std::string& stSaveNewBieGuideStep_ProtoModID_Name(stSaveNewBieGuideStep_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveNewBieGuideStep_ProtoModID_descriptor(), value);
}
inline bool stSaveNewBieGuideStep_ProtoModID_Parse(
    const ::std::string& name, stSaveNewBieGuideStep_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveNewBieGuideStep_ProtoModID>(
    stSaveNewBieGuideStep_ProtoModID_descriptor(), name, value);
}
enum stSaveNewBieGuideStep_ProtoFunID {
  stSaveNewBieGuideStep_ProtoFunID_FunID = 88
};
bool stSaveNewBieGuideStep_ProtoFunID_IsValid(int value);
const stSaveNewBieGuideStep_ProtoFunID stSaveNewBieGuideStep_ProtoFunID_ProtoFunID_MIN = stSaveNewBieGuideStep_ProtoFunID_FunID;
const stSaveNewBieGuideStep_ProtoFunID stSaveNewBieGuideStep_ProtoFunID_ProtoFunID_MAX = stSaveNewBieGuideStep_ProtoFunID_FunID;
const int stSaveNewBieGuideStep_ProtoFunID_ProtoFunID_ARRAYSIZE = stSaveNewBieGuideStep_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSaveNewBieGuideStep_ProtoFunID_descriptor();
inline const ::std::string& stSaveNewBieGuideStep_ProtoFunID_Name(stSaveNewBieGuideStep_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSaveNewBieGuideStep_ProtoFunID_descriptor(), value);
}
inline bool stSaveNewBieGuideStep_ProtoFunID_Parse(
    const ::std::string& name, stSaveNewBieGuideStep_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSaveNewBieGuideStep_ProtoFunID>(
    stSaveNewBieGuideStep_ProtoFunID_descriptor(), name, value);
}
enum stOpenLevelBox_ProtoModID {
  stOpenLevelBox_ProtoModID_ModID = 2
};
bool stOpenLevelBox_ProtoModID_IsValid(int value);
const stOpenLevelBox_ProtoModID stOpenLevelBox_ProtoModID_ProtoModID_MIN = stOpenLevelBox_ProtoModID_ModID;
const stOpenLevelBox_ProtoModID stOpenLevelBox_ProtoModID_ProtoModID_MAX = stOpenLevelBox_ProtoModID_ModID;
const int stOpenLevelBox_ProtoModID_ProtoModID_ARRAYSIZE = stOpenLevelBox_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenLevelBox_ProtoModID_descriptor();
inline const ::std::string& stOpenLevelBox_ProtoModID_Name(stOpenLevelBox_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenLevelBox_ProtoModID_descriptor(), value);
}
inline bool stOpenLevelBox_ProtoModID_Parse(
    const ::std::string& name, stOpenLevelBox_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenLevelBox_ProtoModID>(
    stOpenLevelBox_ProtoModID_descriptor(), name, value);
}
enum stOpenLevelBox_ProtoFunID {
  stOpenLevelBox_ProtoFunID_FunID = 89
};
bool stOpenLevelBox_ProtoFunID_IsValid(int value);
const stOpenLevelBox_ProtoFunID stOpenLevelBox_ProtoFunID_ProtoFunID_MIN = stOpenLevelBox_ProtoFunID_FunID;
const stOpenLevelBox_ProtoFunID stOpenLevelBox_ProtoFunID_ProtoFunID_MAX = stOpenLevelBox_ProtoFunID_FunID;
const int stOpenLevelBox_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpenLevelBox_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenLevelBox_ProtoFunID_descriptor();
inline const ::std::string& stOpenLevelBox_ProtoFunID_Name(stOpenLevelBox_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenLevelBox_ProtoFunID_descriptor(), value);
}
inline bool stOpenLevelBox_ProtoFunID_Parse(
    const ::std::string& name, stOpenLevelBox_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenLevelBox_ProtoFunID>(
    stOpenLevelBox_ProtoFunID_descriptor(), name, value);
}
enum stChangeRole_ProtoModID {
  stChangeRole_ProtoModID_ModID = 2
};
bool stChangeRole_ProtoModID_IsValid(int value);
const stChangeRole_ProtoModID stChangeRole_ProtoModID_ProtoModID_MIN = stChangeRole_ProtoModID_ModID;
const stChangeRole_ProtoModID stChangeRole_ProtoModID_ProtoModID_MAX = stChangeRole_ProtoModID_ModID;
const int stChangeRole_ProtoModID_ProtoModID_ARRAYSIZE = stChangeRole_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeRole_ProtoModID_descriptor();
inline const ::std::string& stChangeRole_ProtoModID_Name(stChangeRole_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeRole_ProtoModID_descriptor(), value);
}
inline bool stChangeRole_ProtoModID_Parse(
    const ::std::string& name, stChangeRole_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeRole_ProtoModID>(
    stChangeRole_ProtoModID_descriptor(), name, value);
}
enum stChangeRole_ProtoFunID {
  stChangeRole_ProtoFunID_FunID = 90
};
bool stChangeRole_ProtoFunID_IsValid(int value);
const stChangeRole_ProtoFunID stChangeRole_ProtoFunID_ProtoFunID_MIN = stChangeRole_ProtoFunID_FunID;
const stChangeRole_ProtoFunID stChangeRole_ProtoFunID_ProtoFunID_MAX = stChangeRole_ProtoFunID_FunID;
const int stChangeRole_ProtoFunID_ProtoFunID_ARRAYSIZE = stChangeRole_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeRole_ProtoFunID_descriptor();
inline const ::std::string& stChangeRole_ProtoFunID_Name(stChangeRole_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeRole_ProtoFunID_descriptor(), value);
}
inline bool stChangeRole_ProtoFunID_Parse(
    const ::std::string& name, stChangeRole_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeRole_ProtoFunID>(
    stChangeRole_ProtoFunID_descriptor(), name, value);
}
enum stGotoSelectRole_ProtoModID {
  stGotoSelectRole_ProtoModID_ModID = 2
};
bool stGotoSelectRole_ProtoModID_IsValid(int value);
const stGotoSelectRole_ProtoModID stGotoSelectRole_ProtoModID_ProtoModID_MIN = stGotoSelectRole_ProtoModID_ModID;
const stGotoSelectRole_ProtoModID stGotoSelectRole_ProtoModID_ProtoModID_MAX = stGotoSelectRole_ProtoModID_ModID;
const int stGotoSelectRole_ProtoModID_ProtoModID_ARRAYSIZE = stGotoSelectRole_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotoSelectRole_ProtoModID_descriptor();
inline const ::std::string& stGotoSelectRole_ProtoModID_Name(stGotoSelectRole_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotoSelectRole_ProtoModID_descriptor(), value);
}
inline bool stGotoSelectRole_ProtoModID_Parse(
    const ::std::string& name, stGotoSelectRole_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotoSelectRole_ProtoModID>(
    stGotoSelectRole_ProtoModID_descriptor(), name, value);
}
enum stGotoSelectRole_ProtoFunID {
  stGotoSelectRole_ProtoFunID_FunID = 91
};
bool stGotoSelectRole_ProtoFunID_IsValid(int value);
const stGotoSelectRole_ProtoFunID stGotoSelectRole_ProtoFunID_ProtoFunID_MIN = stGotoSelectRole_ProtoFunID_FunID;
const stGotoSelectRole_ProtoFunID stGotoSelectRole_ProtoFunID_ProtoFunID_MAX = stGotoSelectRole_ProtoFunID_FunID;
const int stGotoSelectRole_ProtoFunID_ProtoFunID_ARRAYSIZE = stGotoSelectRole_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotoSelectRole_ProtoFunID_descriptor();
inline const ::std::string& stGotoSelectRole_ProtoFunID_Name(stGotoSelectRole_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotoSelectRole_ProtoFunID_descriptor(), value);
}
inline bool stGotoSelectRole_ProtoFunID_Parse(
    const ::std::string& name, stGotoSelectRole_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotoSelectRole_ProtoFunID>(
    stGotoSelectRole_ProtoFunID_descriptor(), name, value);
}
enum stSynRMBShopInfo_ProtoModID {
  stSynRMBShopInfo_ProtoModID_ModID = 2
};
bool stSynRMBShopInfo_ProtoModID_IsValid(int value);
const stSynRMBShopInfo_ProtoModID stSynRMBShopInfo_ProtoModID_ProtoModID_MIN = stSynRMBShopInfo_ProtoModID_ModID;
const stSynRMBShopInfo_ProtoModID stSynRMBShopInfo_ProtoModID_ProtoModID_MAX = stSynRMBShopInfo_ProtoModID_ModID;
const int stSynRMBShopInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSynRMBShopInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo_ProtoModID_descriptor();
inline const ::std::string& stSynRMBShopInfo_ProtoModID_Name(stSynRMBShopInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRMBShopInfo_ProtoModID_descriptor(), value);
}
inline bool stSynRMBShopInfo_ProtoModID_Parse(
    const ::std::string& name, stSynRMBShopInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRMBShopInfo_ProtoModID>(
    stSynRMBShopInfo_ProtoModID_descriptor(), name, value);
}
enum stSynRMBShopInfo_ProtoFunID {
  stSynRMBShopInfo_ProtoFunID_FunID = 92
};
bool stSynRMBShopInfo_ProtoFunID_IsValid(int value);
const stSynRMBShopInfo_ProtoFunID stSynRMBShopInfo_ProtoFunID_ProtoFunID_MIN = stSynRMBShopInfo_ProtoFunID_FunID;
const stSynRMBShopInfo_ProtoFunID stSynRMBShopInfo_ProtoFunID_ProtoFunID_MAX = stSynRMBShopInfo_ProtoFunID_FunID;
const int stSynRMBShopInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynRMBShopInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo_ProtoFunID_descriptor();
inline const ::std::string& stSynRMBShopInfo_ProtoFunID_Name(stSynRMBShopInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRMBShopInfo_ProtoFunID_descriptor(), value);
}
inline bool stSynRMBShopInfo_ProtoFunID_Parse(
    const ::std::string& name, stSynRMBShopInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRMBShopInfo_ProtoFunID>(
    stSynRMBShopInfo_ProtoFunID_descriptor(), name, value);
}
enum stOne2OnePVPResult_ProtoModID {
  stOne2OnePVPResult_ProtoModID_ModID = 2
};
bool stOne2OnePVPResult_ProtoModID_IsValid(int value);
const stOne2OnePVPResult_ProtoModID stOne2OnePVPResult_ProtoModID_ProtoModID_MIN = stOne2OnePVPResult_ProtoModID_ModID;
const stOne2OnePVPResult_ProtoModID stOne2OnePVPResult_ProtoModID_ProtoModID_MAX = stOne2OnePVPResult_ProtoModID_ModID;
const int stOne2OnePVPResult_ProtoModID_ProtoModID_ARRAYSIZE = stOne2OnePVPResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPResult_ProtoModID_descriptor();
inline const ::std::string& stOne2OnePVPResult_ProtoModID_Name(stOne2OnePVPResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPResult_ProtoModID_descriptor(), value);
}
inline bool stOne2OnePVPResult_ProtoModID_Parse(
    const ::std::string& name, stOne2OnePVPResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPResult_ProtoModID>(
    stOne2OnePVPResult_ProtoModID_descriptor(), name, value);
}
enum stOne2OnePVPResult_ProtoFunID {
  stOne2OnePVPResult_ProtoFunID_FunID = 93
};
bool stOne2OnePVPResult_ProtoFunID_IsValid(int value);
const stOne2OnePVPResult_ProtoFunID stOne2OnePVPResult_ProtoFunID_ProtoFunID_MIN = stOne2OnePVPResult_ProtoFunID_FunID;
const stOne2OnePVPResult_ProtoFunID stOne2OnePVPResult_ProtoFunID_ProtoFunID_MAX = stOne2OnePVPResult_ProtoFunID_FunID;
const int stOne2OnePVPResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stOne2OnePVPResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPResult_ProtoFunID_descriptor();
inline const ::std::string& stOne2OnePVPResult_ProtoFunID_Name(stOne2OnePVPResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPResult_ProtoFunID_descriptor(), value);
}
inline bool stOne2OnePVPResult_ProtoFunID_Parse(
    const ::std::string& name, stOne2OnePVPResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPResult_ProtoFunID>(
    stOne2OnePVPResult_ProtoFunID_descriptor(), name, value);
}
enum stPrivateChatNotUser_ProtoModID {
  stPrivateChatNotUser_ProtoModID_ModID = 2
};
bool stPrivateChatNotUser_ProtoModID_IsValid(int value);
const stPrivateChatNotUser_ProtoModID stPrivateChatNotUser_ProtoModID_ProtoModID_MIN = stPrivateChatNotUser_ProtoModID_ModID;
const stPrivateChatNotUser_ProtoModID stPrivateChatNotUser_ProtoModID_ProtoModID_MAX = stPrivateChatNotUser_ProtoModID_ModID;
const int stPrivateChatNotUser_ProtoModID_ProtoModID_ARRAYSIZE = stPrivateChatNotUser_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPrivateChatNotUser_ProtoModID_descriptor();
inline const ::std::string& stPrivateChatNotUser_ProtoModID_Name(stPrivateChatNotUser_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPrivateChatNotUser_ProtoModID_descriptor(), value);
}
inline bool stPrivateChatNotUser_ProtoModID_Parse(
    const ::std::string& name, stPrivateChatNotUser_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPrivateChatNotUser_ProtoModID>(
    stPrivateChatNotUser_ProtoModID_descriptor(), name, value);
}
enum stPrivateChatNotUser_ProtoFunID {
  stPrivateChatNotUser_ProtoFunID_FunID = 94
};
bool stPrivateChatNotUser_ProtoFunID_IsValid(int value);
const stPrivateChatNotUser_ProtoFunID stPrivateChatNotUser_ProtoFunID_ProtoFunID_MIN = stPrivateChatNotUser_ProtoFunID_FunID;
const stPrivateChatNotUser_ProtoFunID stPrivateChatNotUser_ProtoFunID_ProtoFunID_MAX = stPrivateChatNotUser_ProtoFunID_FunID;
const int stPrivateChatNotUser_ProtoFunID_ProtoFunID_ARRAYSIZE = stPrivateChatNotUser_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stPrivateChatNotUser_ProtoFunID_descriptor();
inline const ::std::string& stPrivateChatNotUser_ProtoFunID_Name(stPrivateChatNotUser_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stPrivateChatNotUser_ProtoFunID_descriptor(), value);
}
inline bool stPrivateChatNotUser_ProtoFunID_Parse(
    const ::std::string& name, stPrivateChatNotUser_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stPrivateChatNotUser_ProtoFunID>(
    stPrivateChatNotUser_ProtoFunID_descriptor(), name, value);
}
enum stReqRecoverRemainTime_ProtoModID {
  stReqRecoverRemainTime_ProtoModID_ModID = 2
};
bool stReqRecoverRemainTime_ProtoModID_IsValid(int value);
const stReqRecoverRemainTime_ProtoModID stReqRecoverRemainTime_ProtoModID_ProtoModID_MIN = stReqRecoverRemainTime_ProtoModID_ModID;
const stReqRecoverRemainTime_ProtoModID stReqRecoverRemainTime_ProtoModID_ProtoModID_MAX = stReqRecoverRemainTime_ProtoModID_ModID;
const int stReqRecoverRemainTime_ProtoModID_ProtoModID_ARRAYSIZE = stReqRecoverRemainTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecoverRemainTime_ProtoModID_descriptor();
inline const ::std::string& stReqRecoverRemainTime_ProtoModID_Name(stReqRecoverRemainTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecoverRemainTime_ProtoModID_descriptor(), value);
}
inline bool stReqRecoverRemainTime_ProtoModID_Parse(
    const ::std::string& name, stReqRecoverRemainTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecoverRemainTime_ProtoModID>(
    stReqRecoverRemainTime_ProtoModID_descriptor(), name, value);
}
enum stReqRecoverRemainTime_ProtoFunID {
  stReqRecoverRemainTime_ProtoFunID_FunID = 95
};
bool stReqRecoverRemainTime_ProtoFunID_IsValid(int value);
const stReqRecoverRemainTime_ProtoFunID stReqRecoverRemainTime_ProtoFunID_ProtoFunID_MIN = stReqRecoverRemainTime_ProtoFunID_FunID;
const stReqRecoverRemainTime_ProtoFunID stReqRecoverRemainTime_ProtoFunID_ProtoFunID_MAX = stReqRecoverRemainTime_ProtoFunID_FunID;
const int stReqRecoverRemainTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRecoverRemainTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecoverRemainTime_ProtoFunID_descriptor();
inline const ::std::string& stReqRecoverRemainTime_ProtoFunID_Name(stReqRecoverRemainTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecoverRemainTime_ProtoFunID_descriptor(), value);
}
inline bool stReqRecoverRemainTime_ProtoFunID_Parse(
    const ::std::string& name, stReqRecoverRemainTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecoverRemainTime_ProtoFunID>(
    stReqRecoverRemainTime_ProtoFunID_descriptor(), name, value);
}
enum stSPAndLilianRecoverRemainTime_ProtoModID {
  stSPAndLilianRecoverRemainTime_ProtoModID_ModID = 2
};
bool stSPAndLilianRecoverRemainTime_ProtoModID_IsValid(int value);
const stSPAndLilianRecoverRemainTime_ProtoModID stSPAndLilianRecoverRemainTime_ProtoModID_ProtoModID_MIN = stSPAndLilianRecoverRemainTime_ProtoModID_ModID;
const stSPAndLilianRecoverRemainTime_ProtoModID stSPAndLilianRecoverRemainTime_ProtoModID_ProtoModID_MAX = stSPAndLilianRecoverRemainTime_ProtoModID_ModID;
const int stSPAndLilianRecoverRemainTime_ProtoModID_ProtoModID_ARRAYSIZE = stSPAndLilianRecoverRemainTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSPAndLilianRecoverRemainTime_ProtoModID_descriptor();
inline const ::std::string& stSPAndLilianRecoverRemainTime_ProtoModID_Name(stSPAndLilianRecoverRemainTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSPAndLilianRecoverRemainTime_ProtoModID_descriptor(), value);
}
inline bool stSPAndLilianRecoverRemainTime_ProtoModID_Parse(
    const ::std::string& name, stSPAndLilianRecoverRemainTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSPAndLilianRecoverRemainTime_ProtoModID>(
    stSPAndLilianRecoverRemainTime_ProtoModID_descriptor(), name, value);
}
enum stSPAndLilianRecoverRemainTime_ProtoFunID {
  stSPAndLilianRecoverRemainTime_ProtoFunID_FunID = 96
};
bool stSPAndLilianRecoverRemainTime_ProtoFunID_IsValid(int value);
const stSPAndLilianRecoverRemainTime_ProtoFunID stSPAndLilianRecoverRemainTime_ProtoFunID_ProtoFunID_MIN = stSPAndLilianRecoverRemainTime_ProtoFunID_FunID;
const stSPAndLilianRecoverRemainTime_ProtoFunID stSPAndLilianRecoverRemainTime_ProtoFunID_ProtoFunID_MAX = stSPAndLilianRecoverRemainTime_ProtoFunID_FunID;
const int stSPAndLilianRecoverRemainTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stSPAndLilianRecoverRemainTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSPAndLilianRecoverRemainTime_ProtoFunID_descriptor();
inline const ::std::string& stSPAndLilianRecoverRemainTime_ProtoFunID_Name(stSPAndLilianRecoverRemainTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSPAndLilianRecoverRemainTime_ProtoFunID_descriptor(), value);
}
inline bool stSPAndLilianRecoverRemainTime_ProtoFunID_Parse(
    const ::std::string& name, stSPAndLilianRecoverRemainTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSPAndLilianRecoverRemainTime_ProtoFunID>(
    stSPAndLilianRecoverRemainTime_ProtoFunID_descriptor(), name, value);
}
enum stSwapHeroBattlePos_ProtoModID {
  stSwapHeroBattlePos_ProtoModID_ModID = 2
};
bool stSwapHeroBattlePos_ProtoModID_IsValid(int value);
const stSwapHeroBattlePos_ProtoModID stSwapHeroBattlePos_ProtoModID_ProtoModID_MIN = stSwapHeroBattlePos_ProtoModID_ModID;
const stSwapHeroBattlePos_ProtoModID stSwapHeroBattlePos_ProtoModID_ProtoModID_MAX = stSwapHeroBattlePos_ProtoModID_ModID;
const int stSwapHeroBattlePos_ProtoModID_ProtoModID_ARRAYSIZE = stSwapHeroBattlePos_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePos_ProtoModID_descriptor();
inline const ::std::string& stSwapHeroBattlePos_ProtoModID_Name(stSwapHeroBattlePos_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSwapHeroBattlePos_ProtoModID_descriptor(), value);
}
inline bool stSwapHeroBattlePos_ProtoModID_Parse(
    const ::std::string& name, stSwapHeroBattlePos_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSwapHeroBattlePos_ProtoModID>(
    stSwapHeroBattlePos_ProtoModID_descriptor(), name, value);
}
enum stSwapHeroBattlePos_ProtoFunID {
  stSwapHeroBattlePos_ProtoFunID_FunID = 97
};
bool stSwapHeroBattlePos_ProtoFunID_IsValid(int value);
const stSwapHeroBattlePos_ProtoFunID stSwapHeroBattlePos_ProtoFunID_ProtoFunID_MIN = stSwapHeroBattlePos_ProtoFunID_FunID;
const stSwapHeroBattlePos_ProtoFunID stSwapHeroBattlePos_ProtoFunID_ProtoFunID_MAX = stSwapHeroBattlePos_ProtoFunID_FunID;
const int stSwapHeroBattlePos_ProtoFunID_ProtoFunID_ARRAYSIZE = stSwapHeroBattlePos_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePos_ProtoFunID_descriptor();
inline const ::std::string& stSwapHeroBattlePos_ProtoFunID_Name(stSwapHeroBattlePos_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSwapHeroBattlePos_ProtoFunID_descriptor(), value);
}
inline bool stSwapHeroBattlePos_ProtoFunID_Parse(
    const ::std::string& name, stSwapHeroBattlePos_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSwapHeroBattlePos_ProtoFunID>(
    stSwapHeroBattlePos_ProtoFunID_descriptor(), name, value);
}
enum stSwapHeroBattlePosError_eResult {
  stSwapHeroBattlePosError_eResult_eHERO_NOT_EXIST = 1,
  stSwapHeroBattlePosError_eResult_eHERO_NOT_GOOUT = 2
};
bool stSwapHeroBattlePosError_eResult_IsValid(int value);
const stSwapHeroBattlePosError_eResult stSwapHeroBattlePosError_eResult_eResult_MIN = stSwapHeroBattlePosError_eResult_eHERO_NOT_EXIST;
const stSwapHeroBattlePosError_eResult stSwapHeroBattlePosError_eResult_eResult_MAX = stSwapHeroBattlePosError_eResult_eHERO_NOT_GOOUT;
const int stSwapHeroBattlePosError_eResult_eResult_ARRAYSIZE = stSwapHeroBattlePosError_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePosError_eResult_descriptor();
inline const ::std::string& stSwapHeroBattlePosError_eResult_Name(stSwapHeroBattlePosError_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSwapHeroBattlePosError_eResult_descriptor(), value);
}
inline bool stSwapHeroBattlePosError_eResult_Parse(
    const ::std::string& name, stSwapHeroBattlePosError_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSwapHeroBattlePosError_eResult>(
    stSwapHeroBattlePosError_eResult_descriptor(), name, value);
}
enum stSwapHeroBattlePosError_ProtoModID {
  stSwapHeroBattlePosError_ProtoModID_ModID = 2
};
bool stSwapHeroBattlePosError_ProtoModID_IsValid(int value);
const stSwapHeroBattlePosError_ProtoModID stSwapHeroBattlePosError_ProtoModID_ProtoModID_MIN = stSwapHeroBattlePosError_ProtoModID_ModID;
const stSwapHeroBattlePosError_ProtoModID stSwapHeroBattlePosError_ProtoModID_ProtoModID_MAX = stSwapHeroBattlePosError_ProtoModID_ModID;
const int stSwapHeroBattlePosError_ProtoModID_ProtoModID_ARRAYSIZE = stSwapHeroBattlePosError_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePosError_ProtoModID_descriptor();
inline const ::std::string& stSwapHeroBattlePosError_ProtoModID_Name(stSwapHeroBattlePosError_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSwapHeroBattlePosError_ProtoModID_descriptor(), value);
}
inline bool stSwapHeroBattlePosError_ProtoModID_Parse(
    const ::std::string& name, stSwapHeroBattlePosError_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSwapHeroBattlePosError_ProtoModID>(
    stSwapHeroBattlePosError_ProtoModID_descriptor(), name, value);
}
enum stSwapHeroBattlePosError_ProtoFunID {
  stSwapHeroBattlePosError_ProtoFunID_FunID = 98
};
bool stSwapHeroBattlePosError_ProtoFunID_IsValid(int value);
const stSwapHeroBattlePosError_ProtoFunID stSwapHeroBattlePosError_ProtoFunID_ProtoFunID_MIN = stSwapHeroBattlePosError_ProtoFunID_FunID;
const stSwapHeroBattlePosError_ProtoFunID stSwapHeroBattlePosError_ProtoFunID_ProtoFunID_MAX = stSwapHeroBattlePosError_ProtoFunID_FunID;
const int stSwapHeroBattlePosError_ProtoFunID_ProtoFunID_ARRAYSIZE = stSwapHeroBattlePosError_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSwapHeroBattlePosError_ProtoFunID_descriptor();
inline const ::std::string& stSwapHeroBattlePosError_ProtoFunID_Name(stSwapHeroBattlePosError_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSwapHeroBattlePosError_ProtoFunID_descriptor(), value);
}
inline bool stSwapHeroBattlePosError_ProtoFunID_Parse(
    const ::std::string& name, stSwapHeroBattlePosError_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSwapHeroBattlePosError_ProtoFunID>(
    stSwapHeroBattlePosError_ProtoFunID_descriptor(), name, value);
}
enum stSynSystemSetting_ProtoModID {
  stSynSystemSetting_ProtoModID_ModID = 2
};
bool stSynSystemSetting_ProtoModID_IsValid(int value);
const stSynSystemSetting_ProtoModID stSynSystemSetting_ProtoModID_ProtoModID_MIN = stSynSystemSetting_ProtoModID_ModID;
const stSynSystemSetting_ProtoModID stSynSystemSetting_ProtoModID_ProtoModID_MAX = stSynSystemSetting_ProtoModID_ModID;
const int stSynSystemSetting_ProtoModID_ProtoModID_ARRAYSIZE = stSynSystemSetting_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynSystemSetting_ProtoModID_descriptor();
inline const ::std::string& stSynSystemSetting_ProtoModID_Name(stSynSystemSetting_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynSystemSetting_ProtoModID_descriptor(), value);
}
inline bool stSynSystemSetting_ProtoModID_Parse(
    const ::std::string& name, stSynSystemSetting_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynSystemSetting_ProtoModID>(
    stSynSystemSetting_ProtoModID_descriptor(), name, value);
}
enum stSynSystemSetting_ProtoFunID {
  stSynSystemSetting_ProtoFunID_FunID = 99
};
bool stSynSystemSetting_ProtoFunID_IsValid(int value);
const stSynSystemSetting_ProtoFunID stSynSystemSetting_ProtoFunID_ProtoFunID_MIN = stSynSystemSetting_ProtoFunID_FunID;
const stSynSystemSetting_ProtoFunID stSynSystemSetting_ProtoFunID_ProtoFunID_MAX = stSynSystemSetting_ProtoFunID_FunID;
const int stSynSystemSetting_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynSystemSetting_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynSystemSetting_ProtoFunID_descriptor();
inline const ::std::string& stSynSystemSetting_ProtoFunID_Name(stSynSystemSetting_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynSystemSetting_ProtoFunID_descriptor(), value);
}
inline bool stSynSystemSetting_ProtoFunID_Parse(
    const ::std::string& name, stSynSystemSetting_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynSystemSetting_ProtoFunID>(
    stSynSystemSetting_ProtoFunID_descriptor(), name, value);
}
enum stReqSaveSystemSetting_ProtoModID {
  stReqSaveSystemSetting_ProtoModID_ModID = 2
};
bool stReqSaveSystemSetting_ProtoModID_IsValid(int value);
const stReqSaveSystemSetting_ProtoModID stReqSaveSystemSetting_ProtoModID_ProtoModID_MIN = stReqSaveSystemSetting_ProtoModID_ModID;
const stReqSaveSystemSetting_ProtoModID stReqSaveSystemSetting_ProtoModID_ProtoModID_MAX = stReqSaveSystemSetting_ProtoModID_ModID;
const int stReqSaveSystemSetting_ProtoModID_ProtoModID_ARRAYSIZE = stReqSaveSystemSetting_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSaveSystemSetting_ProtoModID_descriptor();
inline const ::std::string& stReqSaveSystemSetting_ProtoModID_Name(stReqSaveSystemSetting_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSaveSystemSetting_ProtoModID_descriptor(), value);
}
inline bool stReqSaveSystemSetting_ProtoModID_Parse(
    const ::std::string& name, stReqSaveSystemSetting_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSaveSystemSetting_ProtoModID>(
    stReqSaveSystemSetting_ProtoModID_descriptor(), name, value);
}
enum stReqSaveSystemSetting_ProtoFunID {
  stReqSaveSystemSetting_ProtoFunID_FunID = 100
};
bool stReqSaveSystemSetting_ProtoFunID_IsValid(int value);
const stReqSaveSystemSetting_ProtoFunID stReqSaveSystemSetting_ProtoFunID_ProtoFunID_MIN = stReqSaveSystemSetting_ProtoFunID_FunID;
const stReqSaveSystemSetting_ProtoFunID stReqSaveSystemSetting_ProtoFunID_ProtoFunID_MAX = stReqSaveSystemSetting_ProtoFunID_FunID;
const int stReqSaveSystemSetting_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqSaveSystemSetting_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqSaveSystemSetting_ProtoFunID_descriptor();
inline const ::std::string& stReqSaveSystemSetting_ProtoFunID_Name(stReqSaveSystemSetting_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqSaveSystemSetting_ProtoFunID_descriptor(), value);
}
inline bool stReqSaveSystemSetting_ProtoFunID_Parse(
    const ::std::string& name, stReqSaveSystemSetting_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqSaveSystemSetting_ProtoFunID>(
    stReqSaveSystemSetting_ProtoFunID_descriptor(), name, value);
}
enum stUnlockRareSkill_ProtoModID {
  stUnlockRareSkill_ProtoModID_ModID = 2
};
bool stUnlockRareSkill_ProtoModID_IsValid(int value);
const stUnlockRareSkill_ProtoModID stUnlockRareSkill_ProtoModID_ProtoModID_MIN = stUnlockRareSkill_ProtoModID_ModID;
const stUnlockRareSkill_ProtoModID stUnlockRareSkill_ProtoModID_ProtoModID_MAX = stUnlockRareSkill_ProtoModID_ModID;
const int stUnlockRareSkill_ProtoModID_ProtoModID_ARRAYSIZE = stUnlockRareSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockRareSkill_ProtoModID_descriptor();
inline const ::std::string& stUnlockRareSkill_ProtoModID_Name(stUnlockRareSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockRareSkill_ProtoModID_descriptor(), value);
}
inline bool stUnlockRareSkill_ProtoModID_Parse(
    const ::std::string& name, stUnlockRareSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockRareSkill_ProtoModID>(
    stUnlockRareSkill_ProtoModID_descriptor(), name, value);
}
enum stUnlockRareSkill_ProtoFunID {
  stUnlockRareSkill_ProtoFunID_FunID = 101
};
bool stUnlockRareSkill_ProtoFunID_IsValid(int value);
const stUnlockRareSkill_ProtoFunID stUnlockRareSkill_ProtoFunID_ProtoFunID_MIN = stUnlockRareSkill_ProtoFunID_FunID;
const stUnlockRareSkill_ProtoFunID stUnlockRareSkill_ProtoFunID_ProtoFunID_MAX = stUnlockRareSkill_ProtoFunID_FunID;
const int stUnlockRareSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stUnlockRareSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockRareSkill_ProtoFunID_descriptor();
inline const ::std::string& stUnlockRareSkill_ProtoFunID_Name(stUnlockRareSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockRareSkill_ProtoFunID_descriptor(), value);
}
inline bool stUnlockRareSkill_ProtoFunID_Parse(
    const ::std::string& name, stUnlockRareSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockRareSkill_ProtoFunID>(
    stUnlockRareSkill_ProtoFunID_descriptor(), name, value);
}
enum stUnlockRareSkillResult_eResult {
  stUnlockRareSkillResult_eResult_eSuccess = 1,
  stUnlockRareSkillResult_eResult_eHas_No_GoldCoin = 2,
  stUnlockRareSkillResult_eResult_eLevel_Limit = 3,
  stUnlockRareSkillResult_eResult_eHero_Not_Exist = 4,
  stUnlockRareSkillResult_eResult_eInner_Error = 5
};
bool stUnlockRareSkillResult_eResult_IsValid(int value);
const stUnlockRareSkillResult_eResult stUnlockRareSkillResult_eResult_eResult_MIN = stUnlockRareSkillResult_eResult_eSuccess;
const stUnlockRareSkillResult_eResult stUnlockRareSkillResult_eResult_eResult_MAX = stUnlockRareSkillResult_eResult_eInner_Error;
const int stUnlockRareSkillResult_eResult_eResult_ARRAYSIZE = stUnlockRareSkillResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockRareSkillResult_eResult_descriptor();
inline const ::std::string& stUnlockRareSkillResult_eResult_Name(stUnlockRareSkillResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockRareSkillResult_eResult_descriptor(), value);
}
inline bool stUnlockRareSkillResult_eResult_Parse(
    const ::std::string& name, stUnlockRareSkillResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockRareSkillResult_eResult>(
    stUnlockRareSkillResult_eResult_descriptor(), name, value);
}
enum stUnlockRareSkillResult_ProtoModID {
  stUnlockRareSkillResult_ProtoModID_ModID = 2
};
bool stUnlockRareSkillResult_ProtoModID_IsValid(int value);
const stUnlockRareSkillResult_ProtoModID stUnlockRareSkillResult_ProtoModID_ProtoModID_MIN = stUnlockRareSkillResult_ProtoModID_ModID;
const stUnlockRareSkillResult_ProtoModID stUnlockRareSkillResult_ProtoModID_ProtoModID_MAX = stUnlockRareSkillResult_ProtoModID_ModID;
const int stUnlockRareSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stUnlockRareSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockRareSkillResult_ProtoModID_descriptor();
inline const ::std::string& stUnlockRareSkillResult_ProtoModID_Name(stUnlockRareSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockRareSkillResult_ProtoModID_descriptor(), value);
}
inline bool stUnlockRareSkillResult_ProtoModID_Parse(
    const ::std::string& name, stUnlockRareSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockRareSkillResult_ProtoModID>(
    stUnlockRareSkillResult_ProtoModID_descriptor(), name, value);
}
enum stUnlockRareSkillResult_ProtoFunID {
  stUnlockRareSkillResult_ProtoFunID_FunID = 102
};
bool stUnlockRareSkillResult_ProtoFunID_IsValid(int value);
const stUnlockRareSkillResult_ProtoFunID stUnlockRareSkillResult_ProtoFunID_ProtoFunID_MIN = stUnlockRareSkillResult_ProtoFunID_FunID;
const stUnlockRareSkillResult_ProtoFunID stUnlockRareSkillResult_ProtoFunID_ProtoFunID_MAX = stUnlockRareSkillResult_ProtoFunID_FunID;
const int stUnlockRareSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stUnlockRareSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockRareSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stUnlockRareSkillResult_ProtoFunID_Name(stUnlockRareSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockRareSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stUnlockRareSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stUnlockRareSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockRareSkillResult_ProtoFunID>(
    stUnlockRareSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stUpgradeRareSkill_ProtoModID {
  stUpgradeRareSkill_ProtoModID_ModID = 2
};
bool stUpgradeRareSkill_ProtoModID_IsValid(int value);
const stUpgradeRareSkill_ProtoModID stUpgradeRareSkill_ProtoModID_ProtoModID_MIN = stUpgradeRareSkill_ProtoModID_ModID;
const stUpgradeRareSkill_ProtoModID stUpgradeRareSkill_ProtoModID_ProtoModID_MAX = stUpgradeRareSkill_ProtoModID_ModID;
const int stUpgradeRareSkill_ProtoModID_ProtoModID_ARRAYSIZE = stUpgradeRareSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeRareSkill_ProtoModID_descriptor();
inline const ::std::string& stUpgradeRareSkill_ProtoModID_Name(stUpgradeRareSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeRareSkill_ProtoModID_descriptor(), value);
}
inline bool stUpgradeRareSkill_ProtoModID_Parse(
    const ::std::string& name, stUpgradeRareSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeRareSkill_ProtoModID>(
    stUpgradeRareSkill_ProtoModID_descriptor(), name, value);
}
enum stUpgradeRareSkill_ProtoFunID {
  stUpgradeRareSkill_ProtoFunID_FunID = 103
};
bool stUpgradeRareSkill_ProtoFunID_IsValid(int value);
const stUpgradeRareSkill_ProtoFunID stUpgradeRareSkill_ProtoFunID_ProtoFunID_MIN = stUpgradeRareSkill_ProtoFunID_FunID;
const stUpgradeRareSkill_ProtoFunID stUpgradeRareSkill_ProtoFunID_ProtoFunID_MAX = stUpgradeRareSkill_ProtoFunID_FunID;
const int stUpgradeRareSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stUpgradeRareSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeRareSkill_ProtoFunID_descriptor();
inline const ::std::string& stUpgradeRareSkill_ProtoFunID_Name(stUpgradeRareSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeRareSkill_ProtoFunID_descriptor(), value);
}
inline bool stUpgradeRareSkill_ProtoFunID_Parse(
    const ::std::string& name, stUpgradeRareSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeRareSkill_ProtoFunID>(
    stUpgradeRareSkill_ProtoFunID_descriptor(), name, value);
}
enum stUpgradeRareSkillResult_eResult {
  stUpgradeRareSkillResult_eResult_eSuccess = 1,
  stUpgradeRareSkillResult_eResult_eHas_No_GoldCoin = 2,
  stUpgradeRareSkillResult_eResult_eLevel_Limit = 3,
  stUpgradeRareSkillResult_eResult_eHero_Not_Exist = 4,
  stUpgradeRareSkillResult_eResult_eInner_Error = 5
};
bool stUpgradeRareSkillResult_eResult_IsValid(int value);
const stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult_eResult_eResult_MIN = stUpgradeRareSkillResult_eResult_eSuccess;
const stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult_eResult_eResult_MAX = stUpgradeRareSkillResult_eResult_eInner_Error;
const int stUpgradeRareSkillResult_eResult_eResult_ARRAYSIZE = stUpgradeRareSkillResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeRareSkillResult_eResult_descriptor();
inline const ::std::string& stUpgradeRareSkillResult_eResult_Name(stUpgradeRareSkillResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeRareSkillResult_eResult_descriptor(), value);
}
inline bool stUpgradeRareSkillResult_eResult_Parse(
    const ::std::string& name, stUpgradeRareSkillResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeRareSkillResult_eResult>(
    stUpgradeRareSkillResult_eResult_descriptor(), name, value);
}
enum stUpgradeRareSkillResult_ProtoModID {
  stUpgradeRareSkillResult_ProtoModID_ModID = 2
};
bool stUpgradeRareSkillResult_ProtoModID_IsValid(int value);
const stUpgradeRareSkillResult_ProtoModID stUpgradeRareSkillResult_ProtoModID_ProtoModID_MIN = stUpgradeRareSkillResult_ProtoModID_ModID;
const stUpgradeRareSkillResult_ProtoModID stUpgradeRareSkillResult_ProtoModID_ProtoModID_MAX = stUpgradeRareSkillResult_ProtoModID_ModID;
const int stUpgradeRareSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stUpgradeRareSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeRareSkillResult_ProtoModID_descriptor();
inline const ::std::string& stUpgradeRareSkillResult_ProtoModID_Name(stUpgradeRareSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeRareSkillResult_ProtoModID_descriptor(), value);
}
inline bool stUpgradeRareSkillResult_ProtoModID_Parse(
    const ::std::string& name, stUpgradeRareSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeRareSkillResult_ProtoModID>(
    stUpgradeRareSkillResult_ProtoModID_descriptor(), name, value);
}
enum stUpgradeRareSkillResult_ProtoFunID {
  stUpgradeRareSkillResult_ProtoFunID_FunID = 104
};
bool stUpgradeRareSkillResult_ProtoFunID_IsValid(int value);
const stUpgradeRareSkillResult_ProtoFunID stUpgradeRareSkillResult_ProtoFunID_ProtoFunID_MIN = stUpgradeRareSkillResult_ProtoFunID_FunID;
const stUpgradeRareSkillResult_ProtoFunID stUpgradeRareSkillResult_ProtoFunID_ProtoFunID_MAX = stUpgradeRareSkillResult_ProtoFunID_FunID;
const int stUpgradeRareSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stUpgradeRareSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUpgradeRareSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stUpgradeRareSkillResult_ProtoFunID_Name(stUpgradeRareSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUpgradeRareSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stUpgradeRareSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stUpgradeRareSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUpgradeRareSkillResult_ProtoFunID>(
    stUpgradeRareSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stReqGiftBag_ProtoModID {
  stReqGiftBag_ProtoModID_ModID = 2
};
bool stReqGiftBag_ProtoModID_IsValid(int value);
const stReqGiftBag_ProtoModID stReqGiftBag_ProtoModID_ProtoModID_MIN = stReqGiftBag_ProtoModID_ModID;
const stReqGiftBag_ProtoModID stReqGiftBag_ProtoModID_ProtoModID_MAX = stReqGiftBag_ProtoModID_ModID;
const int stReqGiftBag_ProtoModID_ProtoModID_ARRAYSIZE = stReqGiftBag_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGiftBag_ProtoModID_descriptor();
inline const ::std::string& stReqGiftBag_ProtoModID_Name(stReqGiftBag_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGiftBag_ProtoModID_descriptor(), value);
}
inline bool stReqGiftBag_ProtoModID_Parse(
    const ::std::string& name, stReqGiftBag_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGiftBag_ProtoModID>(
    stReqGiftBag_ProtoModID_descriptor(), name, value);
}
enum stReqGiftBag_ProtoFunID {
  stReqGiftBag_ProtoFunID_FunID = 105
};
bool stReqGiftBag_ProtoFunID_IsValid(int value);
const stReqGiftBag_ProtoFunID stReqGiftBag_ProtoFunID_ProtoFunID_MIN = stReqGiftBag_ProtoFunID_FunID;
const stReqGiftBag_ProtoFunID stReqGiftBag_ProtoFunID_ProtoFunID_MAX = stReqGiftBag_ProtoFunID_FunID;
const int stReqGiftBag_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGiftBag_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGiftBag_ProtoFunID_descriptor();
inline const ::std::string& stReqGiftBag_ProtoFunID_Name(stReqGiftBag_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGiftBag_ProtoFunID_descriptor(), value);
}
inline bool stReqGiftBag_ProtoFunID_Parse(
    const ::std::string& name, stReqGiftBag_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGiftBag_ProtoFunID>(
    stReqGiftBag_ProtoFunID_descriptor(), name, value);
}
enum stGotGiftBagResult_eResult {
  stGotGiftBagResult_eResult_eSuccess = 1,
  stGotGiftBagResult_eResult_eInnerError = 2,
  stGotGiftBagResult_eResult_eTime_Expire = 3,
  stGotGiftBagResult_eResult_eCode_Invalid = 4,
  stGotGiftBagResult_eResult_eCode_Not_Exist = 5,
  stGotGiftBagResult_eResult_eCode_Error_Other = 6,
  stGotGiftBagResult_eResult_eCode_Used_Not_Other = 7
};
bool stGotGiftBagResult_eResult_IsValid(int value);
const stGotGiftBagResult_eResult stGotGiftBagResult_eResult_eResult_MIN = stGotGiftBagResult_eResult_eSuccess;
const stGotGiftBagResult_eResult stGotGiftBagResult_eResult_eResult_MAX = stGotGiftBagResult_eResult_eCode_Used_Not_Other;
const int stGotGiftBagResult_eResult_eResult_ARRAYSIZE = stGotGiftBagResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotGiftBagResult_eResult_descriptor();
inline const ::std::string& stGotGiftBagResult_eResult_Name(stGotGiftBagResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotGiftBagResult_eResult_descriptor(), value);
}
inline bool stGotGiftBagResult_eResult_Parse(
    const ::std::string& name, stGotGiftBagResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotGiftBagResult_eResult>(
    stGotGiftBagResult_eResult_descriptor(), name, value);
}
enum stGotGiftBagResult_ProtoModID {
  stGotGiftBagResult_ProtoModID_ModID = 2
};
bool stGotGiftBagResult_ProtoModID_IsValid(int value);
const stGotGiftBagResult_ProtoModID stGotGiftBagResult_ProtoModID_ProtoModID_MIN = stGotGiftBagResult_ProtoModID_ModID;
const stGotGiftBagResult_ProtoModID stGotGiftBagResult_ProtoModID_ProtoModID_MAX = stGotGiftBagResult_ProtoModID_ModID;
const int stGotGiftBagResult_ProtoModID_ProtoModID_ARRAYSIZE = stGotGiftBagResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotGiftBagResult_ProtoModID_descriptor();
inline const ::std::string& stGotGiftBagResult_ProtoModID_Name(stGotGiftBagResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotGiftBagResult_ProtoModID_descriptor(), value);
}
inline bool stGotGiftBagResult_ProtoModID_Parse(
    const ::std::string& name, stGotGiftBagResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotGiftBagResult_ProtoModID>(
    stGotGiftBagResult_ProtoModID_descriptor(), name, value);
}
enum stGotGiftBagResult_ProtoFunID {
  stGotGiftBagResult_ProtoFunID_FunID = 106
};
bool stGotGiftBagResult_ProtoFunID_IsValid(int value);
const stGotGiftBagResult_ProtoFunID stGotGiftBagResult_ProtoFunID_ProtoFunID_MIN = stGotGiftBagResult_ProtoFunID_FunID;
const stGotGiftBagResult_ProtoFunID stGotGiftBagResult_ProtoFunID_ProtoFunID_MAX = stGotGiftBagResult_ProtoFunID_FunID;
const int stGotGiftBagResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGotGiftBagResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotGiftBagResult_ProtoFunID_descriptor();
inline const ::std::string& stGotGiftBagResult_ProtoFunID_Name(stGotGiftBagResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotGiftBagResult_ProtoFunID_descriptor(), value);
}
inline bool stGotGiftBagResult_ProtoFunID_Parse(
    const ::std::string& name, stGotGiftBagResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotGiftBagResult_ProtoFunID>(
    stGotGiftBagResult_ProtoFunID_descriptor(), name, value);
}
enum stRealTimePKResult_ProtoModID {
  stRealTimePKResult_ProtoModID_ModID = 2
};
bool stRealTimePKResult_ProtoModID_IsValid(int value);
const stRealTimePKResult_ProtoModID stRealTimePKResult_ProtoModID_ProtoModID_MIN = stRealTimePKResult_ProtoModID_ModID;
const stRealTimePKResult_ProtoModID stRealTimePKResult_ProtoModID_ProtoModID_MAX = stRealTimePKResult_ProtoModID_ModID;
const int stRealTimePKResult_ProtoModID_ProtoModID_ARRAYSIZE = stRealTimePKResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimePKResult_ProtoModID_descriptor();
inline const ::std::string& stRealTimePKResult_ProtoModID_Name(stRealTimePKResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimePKResult_ProtoModID_descriptor(), value);
}
inline bool stRealTimePKResult_ProtoModID_Parse(
    const ::std::string& name, stRealTimePKResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimePKResult_ProtoModID>(
    stRealTimePKResult_ProtoModID_descriptor(), name, value);
}
enum stRealTimePKResult_ProtoFunID {
  stRealTimePKResult_ProtoFunID_FunID = 107
};
bool stRealTimePKResult_ProtoFunID_IsValid(int value);
const stRealTimePKResult_ProtoFunID stRealTimePKResult_ProtoFunID_ProtoFunID_MIN = stRealTimePKResult_ProtoFunID_FunID;
const stRealTimePKResult_ProtoFunID stRealTimePKResult_ProtoFunID_ProtoFunID_MAX = stRealTimePKResult_ProtoFunID_FunID;
const int stRealTimePKResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRealTimePKResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimePKResult_ProtoFunID_descriptor();
inline const ::std::string& stRealTimePKResult_ProtoFunID_Name(stRealTimePKResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimePKResult_ProtoFunID_descriptor(), value);
}
inline bool stRealTimePKResult_ProtoFunID_Parse(
    const ::std::string& name, stRealTimePKResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimePKResult_ProtoFunID>(
    stRealTimePKResult_ProtoFunID_descriptor(), name, value);
}
enum stReqFiveRaiseEquip_ProtoModID {
  stReqFiveRaiseEquip_ProtoModID_ModID = 2
};
bool stReqFiveRaiseEquip_ProtoModID_IsValid(int value);
const stReqFiveRaiseEquip_ProtoModID stReqFiveRaiseEquip_ProtoModID_ProtoModID_MIN = stReqFiveRaiseEquip_ProtoModID_ModID;
const stReqFiveRaiseEquip_ProtoModID stReqFiveRaiseEquip_ProtoModID_ProtoModID_MAX = stReqFiveRaiseEquip_ProtoModID_ModID;
const int stReqFiveRaiseEquip_ProtoModID_ProtoModID_ARRAYSIZE = stReqFiveRaiseEquip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFiveRaiseEquip_ProtoModID_descriptor();
inline const ::std::string& stReqFiveRaiseEquip_ProtoModID_Name(stReqFiveRaiseEquip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFiveRaiseEquip_ProtoModID_descriptor(), value);
}
inline bool stReqFiveRaiseEquip_ProtoModID_Parse(
    const ::std::string& name, stReqFiveRaiseEquip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFiveRaiseEquip_ProtoModID>(
    stReqFiveRaiseEquip_ProtoModID_descriptor(), name, value);
}
enum stReqFiveRaiseEquip_ProtoFunID {
  stReqFiveRaiseEquip_ProtoFunID_FunID = 108
};
bool stReqFiveRaiseEquip_ProtoFunID_IsValid(int value);
const stReqFiveRaiseEquip_ProtoFunID stReqFiveRaiseEquip_ProtoFunID_ProtoFunID_MIN = stReqFiveRaiseEquip_ProtoFunID_FunID;
const stReqFiveRaiseEquip_ProtoFunID stReqFiveRaiseEquip_ProtoFunID_ProtoFunID_MAX = stReqFiveRaiseEquip_ProtoFunID_FunID;
const int stReqFiveRaiseEquip_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqFiveRaiseEquip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFiveRaiseEquip_ProtoFunID_descriptor();
inline const ::std::string& stReqFiveRaiseEquip_ProtoFunID_Name(stReqFiveRaiseEquip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFiveRaiseEquip_ProtoFunID_descriptor(), value);
}
inline bool stReqFiveRaiseEquip_ProtoFunID_Parse(
    const ::std::string& name, stReqFiveRaiseEquip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFiveRaiseEquip_ProtoFunID>(
    stReqFiveRaiseEquip_ProtoFunID_descriptor(), name, value);
}
enum stFiveRaiseEquipResult_eResult {
  stFiveRaiseEquipResult_eResult_eSUCCESS = 1,
  stFiveRaiseEquipResult_eResult_eINNER_ERROR = 2,
  stFiveRaiseEquipResult_eResult_eROLE_LV_LIMIT = 3,
  stFiveRaiseEquipResult_eResult_eYUNTIE_NOT_ENOUGH = 4,
  stFiveRaiseEquipResult_eResult_eMONEY_NOT_ENOUGH = 5
};
bool stFiveRaiseEquipResult_eResult_IsValid(int value);
const stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult_eResult_eResult_MIN = stFiveRaiseEquipResult_eResult_eSUCCESS;
const stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult_eResult_eResult_MAX = stFiveRaiseEquipResult_eResult_eMONEY_NOT_ENOUGH;
const int stFiveRaiseEquipResult_eResult_eResult_ARRAYSIZE = stFiveRaiseEquipResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFiveRaiseEquipResult_eResult_descriptor();
inline const ::std::string& stFiveRaiseEquipResult_eResult_Name(stFiveRaiseEquipResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFiveRaiseEquipResult_eResult_descriptor(), value);
}
inline bool stFiveRaiseEquipResult_eResult_Parse(
    const ::std::string& name, stFiveRaiseEquipResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFiveRaiseEquipResult_eResult>(
    stFiveRaiseEquipResult_eResult_descriptor(), name, value);
}
enum stFiveRaiseEquipResult_ProtoModID {
  stFiveRaiseEquipResult_ProtoModID_ModID = 2
};
bool stFiveRaiseEquipResult_ProtoModID_IsValid(int value);
const stFiveRaiseEquipResult_ProtoModID stFiveRaiseEquipResult_ProtoModID_ProtoModID_MIN = stFiveRaiseEquipResult_ProtoModID_ModID;
const stFiveRaiseEquipResult_ProtoModID stFiveRaiseEquipResult_ProtoModID_ProtoModID_MAX = stFiveRaiseEquipResult_ProtoModID_ModID;
const int stFiveRaiseEquipResult_ProtoModID_ProtoModID_ARRAYSIZE = stFiveRaiseEquipResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFiveRaiseEquipResult_ProtoModID_descriptor();
inline const ::std::string& stFiveRaiseEquipResult_ProtoModID_Name(stFiveRaiseEquipResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFiveRaiseEquipResult_ProtoModID_descriptor(), value);
}
inline bool stFiveRaiseEquipResult_ProtoModID_Parse(
    const ::std::string& name, stFiveRaiseEquipResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFiveRaiseEquipResult_ProtoModID>(
    stFiveRaiseEquipResult_ProtoModID_descriptor(), name, value);
}
enum stFiveRaiseEquipResult_ProtoFunID {
  stFiveRaiseEquipResult_ProtoFunID_FunID = 109
};
bool stFiveRaiseEquipResult_ProtoFunID_IsValid(int value);
const stFiveRaiseEquipResult_ProtoFunID stFiveRaiseEquipResult_ProtoFunID_ProtoFunID_MIN = stFiveRaiseEquipResult_ProtoFunID_FunID;
const stFiveRaiseEquipResult_ProtoFunID stFiveRaiseEquipResult_ProtoFunID_ProtoFunID_MAX = stFiveRaiseEquipResult_ProtoFunID_FunID;
const int stFiveRaiseEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stFiveRaiseEquipResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stFiveRaiseEquipResult_ProtoFunID_descriptor();
inline const ::std::string& stFiveRaiseEquipResult_ProtoFunID_Name(stFiveRaiseEquipResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stFiveRaiseEquipResult_ProtoFunID_descriptor(), value);
}
inline bool stFiveRaiseEquipResult_ProtoFunID_Parse(
    const ::std::string& name, stFiveRaiseEquipResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stFiveRaiseEquipResult_ProtoFunID>(
    stFiveRaiseEquipResult_ProtoFunID_descriptor(), name, value);
}
enum stSynBattleProp_ProtoModID {
  stSynBattleProp_ProtoModID_ModID = 2
};
bool stSynBattleProp_ProtoModID_IsValid(int value);
const stSynBattleProp_ProtoModID stSynBattleProp_ProtoModID_ProtoModID_MIN = stSynBattleProp_ProtoModID_ModID;
const stSynBattleProp_ProtoModID stSynBattleProp_ProtoModID_ProtoModID_MAX = stSynBattleProp_ProtoModID_ModID;
const int stSynBattleProp_ProtoModID_ProtoModID_ARRAYSIZE = stSynBattleProp_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynBattleProp_ProtoModID_descriptor();
inline const ::std::string& stSynBattleProp_ProtoModID_Name(stSynBattleProp_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynBattleProp_ProtoModID_descriptor(), value);
}
inline bool stSynBattleProp_ProtoModID_Parse(
    const ::std::string& name, stSynBattleProp_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynBattleProp_ProtoModID>(
    stSynBattleProp_ProtoModID_descriptor(), name, value);
}
enum stSynBattleProp_ProtoFunID {
  stSynBattleProp_ProtoFunID_FunID = 110
};
bool stSynBattleProp_ProtoFunID_IsValid(int value);
const stSynBattleProp_ProtoFunID stSynBattleProp_ProtoFunID_ProtoFunID_MIN = stSynBattleProp_ProtoFunID_FunID;
const stSynBattleProp_ProtoFunID stSynBattleProp_ProtoFunID_ProtoFunID_MAX = stSynBattleProp_ProtoFunID_FunID;
const int stSynBattleProp_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynBattleProp_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynBattleProp_ProtoFunID_descriptor();
inline const ::std::string& stSynBattleProp_ProtoFunID_Name(stSynBattleProp_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynBattleProp_ProtoFunID_descriptor(), value);
}
inline bool stSynBattleProp_ProtoFunID_Parse(
    const ::std::string& name, stSynBattleProp_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynBattleProp_ProtoFunID>(
    stSynBattleProp_ProtoFunID_descriptor(), name, value);
}
enum stSynTeamCopyMapNum_ProtoModID {
  stSynTeamCopyMapNum_ProtoModID_ModID = 2
};
bool stSynTeamCopyMapNum_ProtoModID_IsValid(int value);
const stSynTeamCopyMapNum_ProtoModID stSynTeamCopyMapNum_ProtoModID_ProtoModID_MIN = stSynTeamCopyMapNum_ProtoModID_ModID;
const stSynTeamCopyMapNum_ProtoModID stSynTeamCopyMapNum_ProtoModID_ProtoModID_MAX = stSynTeamCopyMapNum_ProtoModID_ModID;
const int stSynTeamCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE = stSynTeamCopyMapNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynTeamCopyMapNum_ProtoModID_descriptor();
inline const ::std::string& stSynTeamCopyMapNum_ProtoModID_Name(stSynTeamCopyMapNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynTeamCopyMapNum_ProtoModID_descriptor(), value);
}
inline bool stSynTeamCopyMapNum_ProtoModID_Parse(
    const ::std::string& name, stSynTeamCopyMapNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynTeamCopyMapNum_ProtoModID>(
    stSynTeamCopyMapNum_ProtoModID_descriptor(), name, value);
}
enum stSynTeamCopyMapNum_ProtoFunID {
  stSynTeamCopyMapNum_ProtoFunID_FunID = 111
};
bool stSynTeamCopyMapNum_ProtoFunID_IsValid(int value);
const stSynTeamCopyMapNum_ProtoFunID stSynTeamCopyMapNum_ProtoFunID_ProtoFunID_MIN = stSynTeamCopyMapNum_ProtoFunID_FunID;
const stSynTeamCopyMapNum_ProtoFunID stSynTeamCopyMapNum_ProtoFunID_ProtoFunID_MAX = stSynTeamCopyMapNum_ProtoFunID_FunID;
const int stSynTeamCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynTeamCopyMapNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynTeamCopyMapNum_ProtoFunID_descriptor();
inline const ::std::string& stSynTeamCopyMapNum_ProtoFunID_Name(stSynTeamCopyMapNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynTeamCopyMapNum_ProtoFunID_descriptor(), value);
}
inline bool stSynTeamCopyMapNum_ProtoFunID_Parse(
    const ::std::string& name, stSynTeamCopyMapNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynTeamCopyMapNum_ProtoFunID>(
    stSynTeamCopyMapNum_ProtoFunID_descriptor(), name, value);
}
enum stSynRealTimePKNum_ProtoModID {
  stSynRealTimePKNum_ProtoModID_ModID = 2
};
bool stSynRealTimePKNum_ProtoModID_IsValid(int value);
const stSynRealTimePKNum_ProtoModID stSynRealTimePKNum_ProtoModID_ProtoModID_MIN = stSynRealTimePKNum_ProtoModID_ModID;
const stSynRealTimePKNum_ProtoModID stSynRealTimePKNum_ProtoModID_ProtoModID_MAX = stSynRealTimePKNum_ProtoModID_ModID;
const int stSynRealTimePKNum_ProtoModID_ProtoModID_ARRAYSIZE = stSynRealTimePKNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRealTimePKNum_ProtoModID_descriptor();
inline const ::std::string& stSynRealTimePKNum_ProtoModID_Name(stSynRealTimePKNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRealTimePKNum_ProtoModID_descriptor(), value);
}
inline bool stSynRealTimePKNum_ProtoModID_Parse(
    const ::std::string& name, stSynRealTimePKNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRealTimePKNum_ProtoModID>(
    stSynRealTimePKNum_ProtoModID_descriptor(), name, value);
}
enum stSynRealTimePKNum_ProtoFunID {
  stSynRealTimePKNum_ProtoFunID_FunID = 112
};
bool stSynRealTimePKNum_ProtoFunID_IsValid(int value);
const stSynRealTimePKNum_ProtoFunID stSynRealTimePKNum_ProtoFunID_ProtoFunID_MIN = stSynRealTimePKNum_ProtoFunID_FunID;
const stSynRealTimePKNum_ProtoFunID stSynRealTimePKNum_ProtoFunID_ProtoFunID_MAX = stSynRealTimePKNum_ProtoFunID_FunID;
const int stSynRealTimePKNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynRealTimePKNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRealTimePKNum_ProtoFunID_descriptor();
inline const ::std::string& stSynRealTimePKNum_ProtoFunID_Name(stSynRealTimePKNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRealTimePKNum_ProtoFunID_descriptor(), value);
}
inline bool stSynRealTimePKNum_ProtoFunID_Parse(
    const ::std::string& name, stSynRealTimePKNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRealTimePKNum_ProtoFunID>(
    stSynRealTimePKNum_ProtoFunID_descriptor(), name, value);
}
enum stCopymapFail_ProtoModID {
  stCopymapFail_ProtoModID_ModID = 2
};
bool stCopymapFail_ProtoModID_IsValid(int value);
const stCopymapFail_ProtoModID stCopymapFail_ProtoModID_ProtoModID_MIN = stCopymapFail_ProtoModID_ModID;
const stCopymapFail_ProtoModID stCopymapFail_ProtoModID_ProtoModID_MAX = stCopymapFail_ProtoModID_ModID;
const int stCopymapFail_ProtoModID_ProtoModID_ARRAYSIZE = stCopymapFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCopymapFail_ProtoModID_descriptor();
inline const ::std::string& stCopymapFail_ProtoModID_Name(stCopymapFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCopymapFail_ProtoModID_descriptor(), value);
}
inline bool stCopymapFail_ProtoModID_Parse(
    const ::std::string& name, stCopymapFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCopymapFail_ProtoModID>(
    stCopymapFail_ProtoModID_descriptor(), name, value);
}
enum stCopymapFail_ProtoFunID {
  stCopymapFail_ProtoFunID_FunID = 113
};
bool stCopymapFail_ProtoFunID_IsValid(int value);
const stCopymapFail_ProtoFunID stCopymapFail_ProtoFunID_ProtoFunID_MIN = stCopymapFail_ProtoFunID_FunID;
const stCopymapFail_ProtoFunID stCopymapFail_ProtoFunID_ProtoFunID_MAX = stCopymapFail_ProtoFunID_FunID;
const int stCopymapFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stCopymapFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stCopymapFail_ProtoFunID_descriptor();
inline const ::std::string& stCopymapFail_ProtoFunID_Name(stCopymapFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stCopymapFail_ProtoFunID_descriptor(), value);
}
inline bool stCopymapFail_ProtoFunID_Parse(
    const ::std::string& name, stCopymapFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stCopymapFail_ProtoFunID>(
    stCopymapFail_ProtoFunID_descriptor(), name, value);
}
enum stReqHero10TimeStudySkill_ProtoModID {
  stReqHero10TimeStudySkill_ProtoModID_ModID = 2
};
bool stReqHero10TimeStudySkill_ProtoModID_IsValid(int value);
const stReqHero10TimeStudySkill_ProtoModID stReqHero10TimeStudySkill_ProtoModID_ProtoModID_MIN = stReqHero10TimeStudySkill_ProtoModID_ModID;
const stReqHero10TimeStudySkill_ProtoModID stReqHero10TimeStudySkill_ProtoModID_ProtoModID_MAX = stReqHero10TimeStudySkill_ProtoModID_ModID;
const int stReqHero10TimeStudySkill_ProtoModID_ProtoModID_ARRAYSIZE = stReqHero10TimeStudySkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHero10TimeStudySkill_ProtoModID_descriptor();
inline const ::std::string& stReqHero10TimeStudySkill_ProtoModID_Name(stReqHero10TimeStudySkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHero10TimeStudySkill_ProtoModID_descriptor(), value);
}
inline bool stReqHero10TimeStudySkill_ProtoModID_Parse(
    const ::std::string& name, stReqHero10TimeStudySkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHero10TimeStudySkill_ProtoModID>(
    stReqHero10TimeStudySkill_ProtoModID_descriptor(), name, value);
}
enum stReqHero10TimeStudySkill_ProtoFunID {
  stReqHero10TimeStudySkill_ProtoFunID_FunID = 114
};
bool stReqHero10TimeStudySkill_ProtoFunID_IsValid(int value);
const stReqHero10TimeStudySkill_ProtoFunID stReqHero10TimeStudySkill_ProtoFunID_ProtoFunID_MIN = stReqHero10TimeStudySkill_ProtoFunID_FunID;
const stReqHero10TimeStudySkill_ProtoFunID stReqHero10TimeStudySkill_ProtoFunID_ProtoFunID_MAX = stReqHero10TimeStudySkill_ProtoFunID_FunID;
const int stReqHero10TimeStudySkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqHero10TimeStudySkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHero10TimeStudySkill_ProtoFunID_descriptor();
inline const ::std::string& stReqHero10TimeStudySkill_ProtoFunID_Name(stReqHero10TimeStudySkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHero10TimeStudySkill_ProtoFunID_descriptor(), value);
}
inline bool stReqHero10TimeStudySkill_ProtoFunID_Parse(
    const ::std::string& name, stReqHero10TimeStudySkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHero10TimeStudySkill_ProtoFunID>(
    stReqHero10TimeStudySkill_ProtoFunID_descriptor(), name, value);
}
enum stHero10TimesStudySkillResult_eResult {
  stHero10TimesStudySkillResult_eResult_eSuccess = 1,
  stHero10TimesStudySkillResult_eResult_eHero_Not_Exist = 2,
  stHero10TimesStudySkillResult_eResult_eInner_Error = 3,
  stHero10TimesStudySkillResult_eResult_eNot_Enough_Diamond = 4,
  stHero10TimesStudySkillResult_eResult_eNot_Enough_Item = 5,
  stHero10TimesStudySkillResult_eResult_eUse_Diamond_Num_Not_Enough = 6,
  stHero10TimesStudySkillResult_eResult_eHas_VipRight = 7
};
bool stHero10TimesStudySkillResult_eResult_IsValid(int value);
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult_eResult_eResult_MIN = stHero10TimesStudySkillResult_eResult_eSuccess;
const stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult_eResult_eResult_MAX = stHero10TimesStudySkillResult_eResult_eHas_VipRight;
const int stHero10TimesStudySkillResult_eResult_eResult_ARRAYSIZE = stHero10TimesStudySkillResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHero10TimesStudySkillResult_eResult_descriptor();
inline const ::std::string& stHero10TimesStudySkillResult_eResult_Name(stHero10TimesStudySkillResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHero10TimesStudySkillResult_eResult_descriptor(), value);
}
inline bool stHero10TimesStudySkillResult_eResult_Parse(
    const ::std::string& name, stHero10TimesStudySkillResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHero10TimesStudySkillResult_eResult>(
    stHero10TimesStudySkillResult_eResult_descriptor(), name, value);
}
enum stHero10TimesStudySkillResult_ProtoModID {
  stHero10TimesStudySkillResult_ProtoModID_ModID = 2
};
bool stHero10TimesStudySkillResult_ProtoModID_IsValid(int value);
const stHero10TimesStudySkillResult_ProtoModID stHero10TimesStudySkillResult_ProtoModID_ProtoModID_MIN = stHero10TimesStudySkillResult_ProtoModID_ModID;
const stHero10TimesStudySkillResult_ProtoModID stHero10TimesStudySkillResult_ProtoModID_ProtoModID_MAX = stHero10TimesStudySkillResult_ProtoModID_ModID;
const int stHero10TimesStudySkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stHero10TimesStudySkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHero10TimesStudySkillResult_ProtoModID_descriptor();
inline const ::std::string& stHero10TimesStudySkillResult_ProtoModID_Name(stHero10TimesStudySkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHero10TimesStudySkillResult_ProtoModID_descriptor(), value);
}
inline bool stHero10TimesStudySkillResult_ProtoModID_Parse(
    const ::std::string& name, stHero10TimesStudySkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHero10TimesStudySkillResult_ProtoModID>(
    stHero10TimesStudySkillResult_ProtoModID_descriptor(), name, value);
}
enum stHero10TimesStudySkillResult_ProtoFunID {
  stHero10TimesStudySkillResult_ProtoFunID_FunID = 115
};
bool stHero10TimesStudySkillResult_ProtoFunID_IsValid(int value);
const stHero10TimesStudySkillResult_ProtoFunID stHero10TimesStudySkillResult_ProtoFunID_ProtoFunID_MIN = stHero10TimesStudySkillResult_ProtoFunID_FunID;
const stHero10TimesStudySkillResult_ProtoFunID stHero10TimesStudySkillResult_ProtoFunID_ProtoFunID_MAX = stHero10TimesStudySkillResult_ProtoFunID_FunID;
const int stHero10TimesStudySkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stHero10TimesStudySkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHero10TimesStudySkillResult_ProtoFunID_descriptor();
inline const ::std::string& stHero10TimesStudySkillResult_ProtoFunID_Name(stHero10TimesStudySkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHero10TimesStudySkillResult_ProtoFunID_descriptor(), value);
}
inline bool stHero10TimesStudySkillResult_ProtoFunID_Parse(
    const ::std::string& name, stHero10TimesStudySkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHero10TimesStudySkillResult_ProtoFunID>(
    stHero10TimesStudySkillResult_ProtoFunID_descriptor(), name, value);
}
enum st10TimesGetEquipSkill_ProtoModID {
  st10TimesGetEquipSkill_ProtoModID_ModID = 2
};
bool st10TimesGetEquipSkill_ProtoModID_IsValid(int value);
const st10TimesGetEquipSkill_ProtoModID st10TimesGetEquipSkill_ProtoModID_ProtoModID_MIN = st10TimesGetEquipSkill_ProtoModID_ModID;
const st10TimesGetEquipSkill_ProtoModID st10TimesGetEquipSkill_ProtoModID_ProtoModID_MAX = st10TimesGetEquipSkill_ProtoModID_ModID;
const int st10TimesGetEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE = st10TimesGetEquipSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkill_ProtoModID_descriptor();
inline const ::std::string& st10TimesGetEquipSkill_ProtoModID_Name(st10TimesGetEquipSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    st10TimesGetEquipSkill_ProtoModID_descriptor(), value);
}
inline bool st10TimesGetEquipSkill_ProtoModID_Parse(
    const ::std::string& name, st10TimesGetEquipSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<st10TimesGetEquipSkill_ProtoModID>(
    st10TimesGetEquipSkill_ProtoModID_descriptor(), name, value);
}
enum st10TimesGetEquipSkill_ProtoFunID {
  st10TimesGetEquipSkill_ProtoFunID_FunID = 116
};
bool st10TimesGetEquipSkill_ProtoFunID_IsValid(int value);
const st10TimesGetEquipSkill_ProtoFunID st10TimesGetEquipSkill_ProtoFunID_ProtoFunID_MIN = st10TimesGetEquipSkill_ProtoFunID_FunID;
const st10TimesGetEquipSkill_ProtoFunID st10TimesGetEquipSkill_ProtoFunID_ProtoFunID_MAX = st10TimesGetEquipSkill_ProtoFunID_FunID;
const int st10TimesGetEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = st10TimesGetEquipSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkill_ProtoFunID_descriptor();
inline const ::std::string& st10TimesGetEquipSkill_ProtoFunID_Name(st10TimesGetEquipSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    st10TimesGetEquipSkill_ProtoFunID_descriptor(), value);
}
inline bool st10TimesGetEquipSkill_ProtoFunID_Parse(
    const ::std::string& name, st10TimesGetEquipSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<st10TimesGetEquipSkill_ProtoFunID>(
    st10TimesGetEquipSkill_ProtoFunID_descriptor(), name, value);
}
enum st10TimesGetEquipSkillResult_eResult {
  st10TimesGetEquipSkillResult_eResult_eSuccess = 1,
  st10TimesGetEquipSkillResult_eResult_eEquip_Not_Exist = 2,
  st10TimesGetEquipSkillResult_eResult_eTime_Use_Out = 3,
  st10TimesGetEquipSkillResult_eResult_eItem_Not_Enough = 4,
  st10TimesGetEquipSkillResult_eResult_eDiamond_Not_Enough = 5,
  st10TimesGetEquipSkillResult_eResult_eHas_Exist_Skill = 6,
  st10TimesGetEquipSkillResult_eResult_eInner_Error = 7,
  st10TimesGetEquipSkillResult_eResult_eHas_No_VipRight = 8
};
bool st10TimesGetEquipSkillResult_eResult_IsValid(int value);
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult_eResult_eResult_MIN = st10TimesGetEquipSkillResult_eResult_eSuccess;
const st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult_eResult_eResult_MAX = st10TimesGetEquipSkillResult_eResult_eHas_No_VipRight;
const int st10TimesGetEquipSkillResult_eResult_eResult_ARRAYSIZE = st10TimesGetEquipSkillResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkillResult_eResult_descriptor();
inline const ::std::string& st10TimesGetEquipSkillResult_eResult_Name(st10TimesGetEquipSkillResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    st10TimesGetEquipSkillResult_eResult_descriptor(), value);
}
inline bool st10TimesGetEquipSkillResult_eResult_Parse(
    const ::std::string& name, st10TimesGetEquipSkillResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<st10TimesGetEquipSkillResult_eResult>(
    st10TimesGetEquipSkillResult_eResult_descriptor(), name, value);
}
enum st10TimesGetEquipSkillResult_ProtoModID {
  st10TimesGetEquipSkillResult_ProtoModID_ModID = 2
};
bool st10TimesGetEquipSkillResult_ProtoModID_IsValid(int value);
const st10TimesGetEquipSkillResult_ProtoModID st10TimesGetEquipSkillResult_ProtoModID_ProtoModID_MIN = st10TimesGetEquipSkillResult_ProtoModID_ModID;
const st10TimesGetEquipSkillResult_ProtoModID st10TimesGetEquipSkillResult_ProtoModID_ProtoModID_MAX = st10TimesGetEquipSkillResult_ProtoModID_ModID;
const int st10TimesGetEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = st10TimesGetEquipSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkillResult_ProtoModID_descriptor();
inline const ::std::string& st10TimesGetEquipSkillResult_ProtoModID_Name(st10TimesGetEquipSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    st10TimesGetEquipSkillResult_ProtoModID_descriptor(), value);
}
inline bool st10TimesGetEquipSkillResult_ProtoModID_Parse(
    const ::std::string& name, st10TimesGetEquipSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<st10TimesGetEquipSkillResult_ProtoModID>(
    st10TimesGetEquipSkillResult_ProtoModID_descriptor(), name, value);
}
enum st10TimesGetEquipSkillResult_ProtoFunID {
  st10TimesGetEquipSkillResult_ProtoFunID_FunID = 117
};
bool st10TimesGetEquipSkillResult_ProtoFunID_IsValid(int value);
const st10TimesGetEquipSkillResult_ProtoFunID st10TimesGetEquipSkillResult_ProtoFunID_ProtoFunID_MIN = st10TimesGetEquipSkillResult_ProtoFunID_FunID;
const st10TimesGetEquipSkillResult_ProtoFunID st10TimesGetEquipSkillResult_ProtoFunID_ProtoFunID_MAX = st10TimesGetEquipSkillResult_ProtoFunID_FunID;
const int st10TimesGetEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = st10TimesGetEquipSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* st10TimesGetEquipSkillResult_ProtoFunID_descriptor();
inline const ::std::string& st10TimesGetEquipSkillResult_ProtoFunID_Name(st10TimesGetEquipSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    st10TimesGetEquipSkillResult_ProtoFunID_descriptor(), value);
}
inline bool st10TimesGetEquipSkillResult_ProtoFunID_Parse(
    const ::std::string& name, st10TimesGetEquipSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<st10TimesGetEquipSkillResult_ProtoFunID>(
    st10TimesGetEquipSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stReqFirstRechargeReward_ProtoModID {
  stReqFirstRechargeReward_ProtoModID_ModID = 2
};
bool stReqFirstRechargeReward_ProtoModID_IsValid(int value);
const stReqFirstRechargeReward_ProtoModID stReqFirstRechargeReward_ProtoModID_ProtoModID_MIN = stReqFirstRechargeReward_ProtoModID_ModID;
const stReqFirstRechargeReward_ProtoModID stReqFirstRechargeReward_ProtoModID_ProtoModID_MAX = stReqFirstRechargeReward_ProtoModID_ModID;
const int stReqFirstRechargeReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqFirstRechargeReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFirstRechargeReward_ProtoModID_descriptor();
inline const ::std::string& stReqFirstRechargeReward_ProtoModID_Name(stReqFirstRechargeReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFirstRechargeReward_ProtoModID_descriptor(), value);
}
inline bool stReqFirstRechargeReward_ProtoModID_Parse(
    const ::std::string& name, stReqFirstRechargeReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFirstRechargeReward_ProtoModID>(
    stReqFirstRechargeReward_ProtoModID_descriptor(), name, value);
}
enum stReqFirstRechargeReward_ProtoFunID {
  stReqFirstRechargeReward_ProtoFunID_FunID = 118
};
bool stReqFirstRechargeReward_ProtoFunID_IsValid(int value);
const stReqFirstRechargeReward_ProtoFunID stReqFirstRechargeReward_ProtoFunID_ProtoFunID_MIN = stReqFirstRechargeReward_ProtoFunID_FunID;
const stReqFirstRechargeReward_ProtoFunID stReqFirstRechargeReward_ProtoFunID_ProtoFunID_MAX = stReqFirstRechargeReward_ProtoFunID_FunID;
const int stReqFirstRechargeReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqFirstRechargeReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFirstRechargeReward_ProtoFunID_descriptor();
inline const ::std::string& stReqFirstRechargeReward_ProtoFunID_Name(stReqFirstRechargeReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFirstRechargeReward_ProtoFunID_descriptor(), value);
}
inline bool stReqFirstRechargeReward_ProtoFunID_Parse(
    const ::std::string& name, stReqFirstRechargeReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFirstRechargeReward_ProtoFunID>(
    stReqFirstRechargeReward_ProtoFunID_descriptor(), name, value);
}
enum stRetFirstRechargeReward_eResult {
  stRetFirstRechargeReward_eResult_eSuccess = 1,
  stRetFirstRechargeReward_eResult_eHas_Not_Recharge = 2,
  stRetFirstRechargeReward_eResult_eHas_Got_Reward = 3,
  stRetFirstRechargeReward_eResult_eBag_Full = 4
};
bool stRetFirstRechargeReward_eResult_IsValid(int value);
const stRetFirstRechargeReward_eResult stRetFirstRechargeReward_eResult_eResult_MIN = stRetFirstRechargeReward_eResult_eSuccess;
const stRetFirstRechargeReward_eResult stRetFirstRechargeReward_eResult_eResult_MAX = stRetFirstRechargeReward_eResult_eBag_Full;
const int stRetFirstRechargeReward_eResult_eResult_ARRAYSIZE = stRetFirstRechargeReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFirstRechargeReward_eResult_descriptor();
inline const ::std::string& stRetFirstRechargeReward_eResult_Name(stRetFirstRechargeReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFirstRechargeReward_eResult_descriptor(), value);
}
inline bool stRetFirstRechargeReward_eResult_Parse(
    const ::std::string& name, stRetFirstRechargeReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFirstRechargeReward_eResult>(
    stRetFirstRechargeReward_eResult_descriptor(), name, value);
}
enum stRetFirstRechargeReward_ProtoModID {
  stRetFirstRechargeReward_ProtoModID_ModID = 2
};
bool stRetFirstRechargeReward_ProtoModID_IsValid(int value);
const stRetFirstRechargeReward_ProtoModID stRetFirstRechargeReward_ProtoModID_ProtoModID_MIN = stRetFirstRechargeReward_ProtoModID_ModID;
const stRetFirstRechargeReward_ProtoModID stRetFirstRechargeReward_ProtoModID_ProtoModID_MAX = stRetFirstRechargeReward_ProtoModID_ModID;
const int stRetFirstRechargeReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetFirstRechargeReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFirstRechargeReward_ProtoModID_descriptor();
inline const ::std::string& stRetFirstRechargeReward_ProtoModID_Name(stRetFirstRechargeReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFirstRechargeReward_ProtoModID_descriptor(), value);
}
inline bool stRetFirstRechargeReward_ProtoModID_Parse(
    const ::std::string& name, stRetFirstRechargeReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFirstRechargeReward_ProtoModID>(
    stRetFirstRechargeReward_ProtoModID_descriptor(), name, value);
}
enum stRetFirstRechargeReward_ProtoFunID {
  stRetFirstRechargeReward_ProtoFunID_FunID = 119
};
bool stRetFirstRechargeReward_ProtoFunID_IsValid(int value);
const stRetFirstRechargeReward_ProtoFunID stRetFirstRechargeReward_ProtoFunID_ProtoFunID_MIN = stRetFirstRechargeReward_ProtoFunID_FunID;
const stRetFirstRechargeReward_ProtoFunID stRetFirstRechargeReward_ProtoFunID_ProtoFunID_MAX = stRetFirstRechargeReward_ProtoFunID_FunID;
const int stRetFirstRechargeReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetFirstRechargeReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFirstRechargeReward_ProtoFunID_descriptor();
inline const ::std::string& stRetFirstRechargeReward_ProtoFunID_Name(stRetFirstRechargeReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFirstRechargeReward_ProtoFunID_descriptor(), value);
}
inline bool stRetFirstRechargeReward_ProtoFunID_Parse(
    const ::std::string& name, stRetFirstRechargeReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFirstRechargeReward_ProtoFunID>(
    stRetFirstRechargeReward_ProtoFunID_descriptor(), name, value);
}
enum stMobaPKResult_ProtoModID {
  stMobaPKResult_ProtoModID_ModID = 2
};
bool stMobaPKResult_ProtoModID_IsValid(int value);
const stMobaPKResult_ProtoModID stMobaPKResult_ProtoModID_ProtoModID_MIN = stMobaPKResult_ProtoModID_ModID;
const stMobaPKResult_ProtoModID stMobaPKResult_ProtoModID_ProtoModID_MAX = stMobaPKResult_ProtoModID_ModID;
const int stMobaPKResult_ProtoModID_ProtoModID_ARRAYSIZE = stMobaPKResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMobaPKResult_ProtoModID_descriptor();
inline const ::std::string& stMobaPKResult_ProtoModID_Name(stMobaPKResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMobaPKResult_ProtoModID_descriptor(), value);
}
inline bool stMobaPKResult_ProtoModID_Parse(
    const ::std::string& name, stMobaPKResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMobaPKResult_ProtoModID>(
    stMobaPKResult_ProtoModID_descriptor(), name, value);
}
enum stMobaPKResult_ProtoFunID {
  stMobaPKResult_ProtoFunID_FunID = 120
};
bool stMobaPKResult_ProtoFunID_IsValid(int value);
const stMobaPKResult_ProtoFunID stMobaPKResult_ProtoFunID_ProtoFunID_MIN = stMobaPKResult_ProtoFunID_FunID;
const stMobaPKResult_ProtoFunID stMobaPKResult_ProtoFunID_ProtoFunID_MAX = stMobaPKResult_ProtoFunID_FunID;
const int stMobaPKResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stMobaPKResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMobaPKResult_ProtoFunID_descriptor();
inline const ::std::string& stMobaPKResult_ProtoFunID_Name(stMobaPKResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMobaPKResult_ProtoFunID_descriptor(), value);
}
inline bool stMobaPKResult_ProtoFunID_Parse(
    const ::std::string& name, stMobaPKResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMobaPKResult_ProtoFunID>(
    stMobaPKResult_ProtoFunID_descriptor(), name, value);
}
enum stSubNewBieGuideID_ProtoModID {
  stSubNewBieGuideID_ProtoModID_ModID = 2
};
bool stSubNewBieGuideID_ProtoModID_IsValid(int value);
const stSubNewBieGuideID_ProtoModID stSubNewBieGuideID_ProtoModID_ProtoModID_MIN = stSubNewBieGuideID_ProtoModID_ModID;
const stSubNewBieGuideID_ProtoModID stSubNewBieGuideID_ProtoModID_ProtoModID_MAX = stSubNewBieGuideID_ProtoModID_ModID;
const int stSubNewBieGuideID_ProtoModID_ProtoModID_ARRAYSIZE = stSubNewBieGuideID_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSubNewBieGuideID_ProtoModID_descriptor();
inline const ::std::string& stSubNewBieGuideID_ProtoModID_Name(stSubNewBieGuideID_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSubNewBieGuideID_ProtoModID_descriptor(), value);
}
inline bool stSubNewBieGuideID_ProtoModID_Parse(
    const ::std::string& name, stSubNewBieGuideID_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSubNewBieGuideID_ProtoModID>(
    stSubNewBieGuideID_ProtoModID_descriptor(), name, value);
}
enum stSubNewBieGuideID_ProtoFunID {
  stSubNewBieGuideID_ProtoFunID_FunID = 121
};
bool stSubNewBieGuideID_ProtoFunID_IsValid(int value);
const stSubNewBieGuideID_ProtoFunID stSubNewBieGuideID_ProtoFunID_ProtoFunID_MIN = stSubNewBieGuideID_ProtoFunID_FunID;
const stSubNewBieGuideID_ProtoFunID stSubNewBieGuideID_ProtoFunID_ProtoFunID_MAX = stSubNewBieGuideID_ProtoFunID_FunID;
const int stSubNewBieGuideID_ProtoFunID_ProtoFunID_ARRAYSIZE = stSubNewBieGuideID_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSubNewBieGuideID_ProtoFunID_descriptor();
inline const ::std::string& stSubNewBieGuideID_ProtoFunID_Name(stSubNewBieGuideID_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSubNewBieGuideID_ProtoFunID_descriptor(), value);
}
inline bool stSubNewBieGuideID_ProtoFunID_Parse(
    const ::std::string& name, stSubNewBieGuideID_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSubNewBieGuideID_ProtoFunID>(
    stSubNewBieGuideID_ProtoFunID_descriptor(), name, value);
}
enum stResetTeamCopyMapNum_ProtoModID {
  stResetTeamCopyMapNum_ProtoModID_ModID = 2
};
bool stResetTeamCopyMapNum_ProtoModID_IsValid(int value);
const stResetTeamCopyMapNum_ProtoModID stResetTeamCopyMapNum_ProtoModID_ProtoModID_MIN = stResetTeamCopyMapNum_ProtoModID_ModID;
const stResetTeamCopyMapNum_ProtoModID stResetTeamCopyMapNum_ProtoModID_ProtoModID_MAX = stResetTeamCopyMapNum_ProtoModID_ModID;
const int stResetTeamCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE = stResetTeamCopyMapNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetTeamCopyMapNum_ProtoModID_descriptor();
inline const ::std::string& stResetTeamCopyMapNum_ProtoModID_Name(stResetTeamCopyMapNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetTeamCopyMapNum_ProtoModID_descriptor(), value);
}
inline bool stResetTeamCopyMapNum_ProtoModID_Parse(
    const ::std::string& name, stResetTeamCopyMapNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetTeamCopyMapNum_ProtoModID>(
    stResetTeamCopyMapNum_ProtoModID_descriptor(), name, value);
}
enum stResetTeamCopyMapNum_ProtoFunID {
  stResetTeamCopyMapNum_ProtoFunID_FunID = 122
};
bool stResetTeamCopyMapNum_ProtoFunID_IsValid(int value);
const stResetTeamCopyMapNum_ProtoFunID stResetTeamCopyMapNum_ProtoFunID_ProtoFunID_MIN = stResetTeamCopyMapNum_ProtoFunID_FunID;
const stResetTeamCopyMapNum_ProtoFunID stResetTeamCopyMapNum_ProtoFunID_ProtoFunID_MAX = stResetTeamCopyMapNum_ProtoFunID_FunID;
const int stResetTeamCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetTeamCopyMapNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetTeamCopyMapNum_ProtoFunID_descriptor();
inline const ::std::string& stResetTeamCopyMapNum_ProtoFunID_Name(stResetTeamCopyMapNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetTeamCopyMapNum_ProtoFunID_descriptor(), value);
}
inline bool stResetTeamCopyMapNum_ProtoFunID_Parse(
    const ::std::string& name, stResetTeamCopyMapNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetTeamCopyMapNum_ProtoFunID>(
    stResetTeamCopyMapNum_ProtoFunID_descriptor(), name, value);
}
enum stResetTeampCopyMapNumResult_eResult {
  stResetTeampCopyMapNumResult_eResult_eReset_Time_Use_Out = 1,
  stResetTeampCopyMapNumResult_eResult_eDiamond_Not_Enough = 2,
  stResetTeampCopyMapNumResult_eResult_eSuccess = 3
};
bool stResetTeampCopyMapNumResult_eResult_IsValid(int value);
const stResetTeampCopyMapNumResult_eResult stResetTeampCopyMapNumResult_eResult_eResult_MIN = stResetTeampCopyMapNumResult_eResult_eReset_Time_Use_Out;
const stResetTeampCopyMapNumResult_eResult stResetTeampCopyMapNumResult_eResult_eResult_MAX = stResetTeampCopyMapNumResult_eResult_eSuccess;
const int stResetTeampCopyMapNumResult_eResult_eResult_ARRAYSIZE = stResetTeampCopyMapNumResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetTeampCopyMapNumResult_eResult_descriptor();
inline const ::std::string& stResetTeampCopyMapNumResult_eResult_Name(stResetTeampCopyMapNumResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetTeampCopyMapNumResult_eResult_descriptor(), value);
}
inline bool stResetTeampCopyMapNumResult_eResult_Parse(
    const ::std::string& name, stResetTeampCopyMapNumResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetTeampCopyMapNumResult_eResult>(
    stResetTeampCopyMapNumResult_eResult_descriptor(), name, value);
}
enum stResetTeampCopyMapNumResult_ProtoModID {
  stResetTeampCopyMapNumResult_ProtoModID_ModID = 2
};
bool stResetTeampCopyMapNumResult_ProtoModID_IsValid(int value);
const stResetTeampCopyMapNumResult_ProtoModID stResetTeampCopyMapNumResult_ProtoModID_ProtoModID_MIN = stResetTeampCopyMapNumResult_ProtoModID_ModID;
const stResetTeampCopyMapNumResult_ProtoModID stResetTeampCopyMapNumResult_ProtoModID_ProtoModID_MAX = stResetTeampCopyMapNumResult_ProtoModID_ModID;
const int stResetTeampCopyMapNumResult_ProtoModID_ProtoModID_ARRAYSIZE = stResetTeampCopyMapNumResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetTeampCopyMapNumResult_ProtoModID_descriptor();
inline const ::std::string& stResetTeampCopyMapNumResult_ProtoModID_Name(stResetTeampCopyMapNumResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetTeampCopyMapNumResult_ProtoModID_descriptor(), value);
}
inline bool stResetTeampCopyMapNumResult_ProtoModID_Parse(
    const ::std::string& name, stResetTeampCopyMapNumResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetTeampCopyMapNumResult_ProtoModID>(
    stResetTeampCopyMapNumResult_ProtoModID_descriptor(), name, value);
}
enum stResetTeampCopyMapNumResult_ProtoFunID {
  stResetTeampCopyMapNumResult_ProtoFunID_FunID = 123
};
bool stResetTeampCopyMapNumResult_ProtoFunID_IsValid(int value);
const stResetTeampCopyMapNumResult_ProtoFunID stResetTeampCopyMapNumResult_ProtoFunID_ProtoFunID_MIN = stResetTeampCopyMapNumResult_ProtoFunID_FunID;
const stResetTeampCopyMapNumResult_ProtoFunID stResetTeampCopyMapNumResult_ProtoFunID_ProtoFunID_MAX = stResetTeampCopyMapNumResult_ProtoFunID_FunID;
const int stResetTeampCopyMapNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetTeampCopyMapNumResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetTeampCopyMapNumResult_ProtoFunID_descriptor();
inline const ::std::string& stResetTeampCopyMapNumResult_ProtoFunID_Name(stResetTeampCopyMapNumResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetTeampCopyMapNumResult_ProtoFunID_descriptor(), value);
}
inline bool stResetTeampCopyMapNumResult_ProtoFunID_Parse(
    const ::std::string& name, stResetTeampCopyMapNumResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetTeampCopyMapNumResult_ProtoFunID>(
    stResetTeampCopyMapNumResult_ProtoFunID_descriptor(), name, value);
}
enum stResetRealTimeCopyMapNum_ProtoModID {
  stResetRealTimeCopyMapNum_ProtoModID_ModID = 2
};
bool stResetRealTimeCopyMapNum_ProtoModID_IsValid(int value);
const stResetRealTimeCopyMapNum_ProtoModID stResetRealTimeCopyMapNum_ProtoModID_ProtoModID_MIN = stResetRealTimeCopyMapNum_ProtoModID_ModID;
const stResetRealTimeCopyMapNum_ProtoModID stResetRealTimeCopyMapNum_ProtoModID_ProtoModID_MAX = stResetRealTimeCopyMapNum_ProtoModID_ModID;
const int stResetRealTimeCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE = stResetRealTimeCopyMapNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetRealTimeCopyMapNum_ProtoModID_descriptor();
inline const ::std::string& stResetRealTimeCopyMapNum_ProtoModID_Name(stResetRealTimeCopyMapNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetRealTimeCopyMapNum_ProtoModID_descriptor(), value);
}
inline bool stResetRealTimeCopyMapNum_ProtoModID_Parse(
    const ::std::string& name, stResetRealTimeCopyMapNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetRealTimeCopyMapNum_ProtoModID>(
    stResetRealTimeCopyMapNum_ProtoModID_descriptor(), name, value);
}
enum stResetRealTimeCopyMapNum_ProtoFunID {
  stResetRealTimeCopyMapNum_ProtoFunID_FunID = 124
};
bool stResetRealTimeCopyMapNum_ProtoFunID_IsValid(int value);
const stResetRealTimeCopyMapNum_ProtoFunID stResetRealTimeCopyMapNum_ProtoFunID_ProtoFunID_MIN = stResetRealTimeCopyMapNum_ProtoFunID_FunID;
const stResetRealTimeCopyMapNum_ProtoFunID stResetRealTimeCopyMapNum_ProtoFunID_ProtoFunID_MAX = stResetRealTimeCopyMapNum_ProtoFunID_FunID;
const int stResetRealTimeCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetRealTimeCopyMapNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetRealTimeCopyMapNum_ProtoFunID_descriptor();
inline const ::std::string& stResetRealTimeCopyMapNum_ProtoFunID_Name(stResetRealTimeCopyMapNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetRealTimeCopyMapNum_ProtoFunID_descriptor(), value);
}
inline bool stResetRealTimeCopyMapNum_ProtoFunID_Parse(
    const ::std::string& name, stResetRealTimeCopyMapNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetRealTimeCopyMapNum_ProtoFunID>(
    stResetRealTimeCopyMapNum_ProtoFunID_descriptor(), name, value);
}
enum stResetRealTimeCopymapNumResult_eResult {
  stResetRealTimeCopymapNumResult_eResult_eReset_Time_Use_Out = 1,
  stResetRealTimeCopymapNumResult_eResult_eDiamond_Not_Enough = 2,
  stResetRealTimeCopymapNumResult_eResult_eSuccess = 3
};
bool stResetRealTimeCopymapNumResult_eResult_IsValid(int value);
const stResetRealTimeCopymapNumResult_eResult stResetRealTimeCopymapNumResult_eResult_eResult_MIN = stResetRealTimeCopymapNumResult_eResult_eReset_Time_Use_Out;
const stResetRealTimeCopymapNumResult_eResult stResetRealTimeCopymapNumResult_eResult_eResult_MAX = stResetRealTimeCopymapNumResult_eResult_eSuccess;
const int stResetRealTimeCopymapNumResult_eResult_eResult_ARRAYSIZE = stResetRealTimeCopymapNumResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetRealTimeCopymapNumResult_eResult_descriptor();
inline const ::std::string& stResetRealTimeCopymapNumResult_eResult_Name(stResetRealTimeCopymapNumResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetRealTimeCopymapNumResult_eResult_descriptor(), value);
}
inline bool stResetRealTimeCopymapNumResult_eResult_Parse(
    const ::std::string& name, stResetRealTimeCopymapNumResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetRealTimeCopymapNumResult_eResult>(
    stResetRealTimeCopymapNumResult_eResult_descriptor(), name, value);
}
enum stResetRealTimeCopymapNumResult_ProtoModID {
  stResetRealTimeCopymapNumResult_ProtoModID_ModID = 2
};
bool stResetRealTimeCopymapNumResult_ProtoModID_IsValid(int value);
const stResetRealTimeCopymapNumResult_ProtoModID stResetRealTimeCopymapNumResult_ProtoModID_ProtoModID_MIN = stResetRealTimeCopymapNumResult_ProtoModID_ModID;
const stResetRealTimeCopymapNumResult_ProtoModID stResetRealTimeCopymapNumResult_ProtoModID_ProtoModID_MAX = stResetRealTimeCopymapNumResult_ProtoModID_ModID;
const int stResetRealTimeCopymapNumResult_ProtoModID_ProtoModID_ARRAYSIZE = stResetRealTimeCopymapNumResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetRealTimeCopymapNumResult_ProtoModID_descriptor();
inline const ::std::string& stResetRealTimeCopymapNumResult_ProtoModID_Name(stResetRealTimeCopymapNumResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetRealTimeCopymapNumResult_ProtoModID_descriptor(), value);
}
inline bool stResetRealTimeCopymapNumResult_ProtoModID_Parse(
    const ::std::string& name, stResetRealTimeCopymapNumResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetRealTimeCopymapNumResult_ProtoModID>(
    stResetRealTimeCopymapNumResult_ProtoModID_descriptor(), name, value);
}
enum stResetRealTimeCopymapNumResult_ProtoFunID {
  stResetRealTimeCopymapNumResult_ProtoFunID_FunID = 125
};
bool stResetRealTimeCopymapNumResult_ProtoFunID_IsValid(int value);
const stResetRealTimeCopymapNumResult_ProtoFunID stResetRealTimeCopymapNumResult_ProtoFunID_ProtoFunID_MIN = stResetRealTimeCopymapNumResult_ProtoFunID_FunID;
const stResetRealTimeCopymapNumResult_ProtoFunID stResetRealTimeCopymapNumResult_ProtoFunID_ProtoFunID_MAX = stResetRealTimeCopymapNumResult_ProtoFunID_FunID;
const int stResetRealTimeCopymapNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stResetRealTimeCopymapNumResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stResetRealTimeCopymapNumResult_ProtoFunID_descriptor();
inline const ::std::string& stResetRealTimeCopymapNumResult_ProtoFunID_Name(stResetRealTimeCopymapNumResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stResetRealTimeCopymapNumResult_ProtoFunID_descriptor(), value);
}
inline bool stResetRealTimeCopymapNumResult_ProtoFunID_Parse(
    const ::std::string& name, stResetRealTimeCopymapNumResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stResetRealTimeCopymapNumResult_ProtoFunID>(
    stResetRealTimeCopymapNumResult_ProtoFunID_descriptor(), name, value);
}
enum stBuyRMBItemSuccess_ProtoModID {
  stBuyRMBItemSuccess_ProtoModID_ModID = 2
};
bool stBuyRMBItemSuccess_ProtoModID_IsValid(int value);
const stBuyRMBItemSuccess_ProtoModID stBuyRMBItemSuccess_ProtoModID_ProtoModID_MIN = stBuyRMBItemSuccess_ProtoModID_ModID;
const stBuyRMBItemSuccess_ProtoModID stBuyRMBItemSuccess_ProtoModID_ProtoModID_MAX = stBuyRMBItemSuccess_ProtoModID_ModID;
const int stBuyRMBItemSuccess_ProtoModID_ProtoModID_ARRAYSIZE = stBuyRMBItemSuccess_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyRMBItemSuccess_ProtoModID_descriptor();
inline const ::std::string& stBuyRMBItemSuccess_ProtoModID_Name(stBuyRMBItemSuccess_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyRMBItemSuccess_ProtoModID_descriptor(), value);
}
inline bool stBuyRMBItemSuccess_ProtoModID_Parse(
    const ::std::string& name, stBuyRMBItemSuccess_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyRMBItemSuccess_ProtoModID>(
    stBuyRMBItemSuccess_ProtoModID_descriptor(), name, value);
}
enum stBuyRMBItemSuccess_ProtoFunID {
  stBuyRMBItemSuccess_ProtoFunID_FunID = 126
};
bool stBuyRMBItemSuccess_ProtoFunID_IsValid(int value);
const stBuyRMBItemSuccess_ProtoFunID stBuyRMBItemSuccess_ProtoFunID_ProtoFunID_MIN = stBuyRMBItemSuccess_ProtoFunID_FunID;
const stBuyRMBItemSuccess_ProtoFunID stBuyRMBItemSuccess_ProtoFunID_ProtoFunID_MAX = stBuyRMBItemSuccess_ProtoFunID_FunID;
const int stBuyRMBItemSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyRMBItemSuccess_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyRMBItemSuccess_ProtoFunID_descriptor();
inline const ::std::string& stBuyRMBItemSuccess_ProtoFunID_Name(stBuyRMBItemSuccess_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyRMBItemSuccess_ProtoFunID_descriptor(), value);
}
inline bool stBuyRMBItemSuccess_ProtoFunID_Parse(
    const ::std::string& name, stBuyRMBItemSuccess_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyRMBItemSuccess_ProtoFunID>(
    stBuyRMBItemSuccess_ProtoFunID_descriptor(), name, value);
}
enum stOne2OnePVPFail_ProtoModID {
  stOne2OnePVPFail_ProtoModID_ModID = 2
};
bool stOne2OnePVPFail_ProtoModID_IsValid(int value);
const stOne2OnePVPFail_ProtoModID stOne2OnePVPFail_ProtoModID_ProtoModID_MIN = stOne2OnePVPFail_ProtoModID_ModID;
const stOne2OnePVPFail_ProtoModID stOne2OnePVPFail_ProtoModID_ProtoModID_MAX = stOne2OnePVPFail_ProtoModID_ModID;
const int stOne2OnePVPFail_ProtoModID_ProtoModID_ARRAYSIZE = stOne2OnePVPFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPFail_ProtoModID_descriptor();
inline const ::std::string& stOne2OnePVPFail_ProtoModID_Name(stOne2OnePVPFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPFail_ProtoModID_descriptor(), value);
}
inline bool stOne2OnePVPFail_ProtoModID_Parse(
    const ::std::string& name, stOne2OnePVPFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPFail_ProtoModID>(
    stOne2OnePVPFail_ProtoModID_descriptor(), name, value);
}
enum stOne2OnePVPFail_ProtoFunID {
  stOne2OnePVPFail_ProtoFunID_FunID = 127
};
bool stOne2OnePVPFail_ProtoFunID_IsValid(int value);
const stOne2OnePVPFail_ProtoFunID stOne2OnePVPFail_ProtoFunID_ProtoFunID_MIN = stOne2OnePVPFail_ProtoFunID_FunID;
const stOne2OnePVPFail_ProtoFunID stOne2OnePVPFail_ProtoFunID_ProtoFunID_MAX = stOne2OnePVPFail_ProtoFunID_FunID;
const int stOne2OnePVPFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stOne2OnePVPFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOne2OnePVPFail_ProtoFunID_descriptor();
inline const ::std::string& stOne2OnePVPFail_ProtoFunID_Name(stOne2OnePVPFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOne2OnePVPFail_ProtoFunID_descriptor(), value);
}
inline bool stOne2OnePVPFail_ProtoFunID_Parse(
    const ::std::string& name, stOne2OnePVPFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOne2OnePVPFail_ProtoFunID>(
    stOne2OnePVPFail_ProtoFunID_descriptor(), name, value);
}
enum stRealTimeFail_ProtoModID {
  stRealTimeFail_ProtoModID_ModID = 2
};
bool stRealTimeFail_ProtoModID_IsValid(int value);
const stRealTimeFail_ProtoModID stRealTimeFail_ProtoModID_ProtoModID_MIN = stRealTimeFail_ProtoModID_ModID;
const stRealTimeFail_ProtoModID stRealTimeFail_ProtoModID_ProtoModID_MAX = stRealTimeFail_ProtoModID_ModID;
const int stRealTimeFail_ProtoModID_ProtoModID_ARRAYSIZE = stRealTimeFail_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeFail_ProtoModID_descriptor();
inline const ::std::string& stRealTimeFail_ProtoModID_Name(stRealTimeFail_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeFail_ProtoModID_descriptor(), value);
}
inline bool stRealTimeFail_ProtoModID_Parse(
    const ::std::string& name, stRealTimeFail_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeFail_ProtoModID>(
    stRealTimeFail_ProtoModID_descriptor(), name, value);
}
enum stRealTimeFail_ProtoFunID {
  stRealTimeFail_ProtoFunID_FunID = 128
};
bool stRealTimeFail_ProtoFunID_IsValid(int value);
const stRealTimeFail_ProtoFunID stRealTimeFail_ProtoFunID_ProtoFunID_MIN = stRealTimeFail_ProtoFunID_FunID;
const stRealTimeFail_ProtoFunID stRealTimeFail_ProtoFunID_ProtoFunID_MAX = stRealTimeFail_ProtoFunID_FunID;
const int stRealTimeFail_ProtoFunID_ProtoFunID_ARRAYSIZE = stRealTimeFail_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRealTimeFail_ProtoFunID_descriptor();
inline const ::std::string& stRealTimeFail_ProtoFunID_Name(stRealTimeFail_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRealTimeFail_ProtoFunID_descriptor(), value);
}
inline bool stRealTimeFail_ProtoFunID_Parse(
    const ::std::string& name, stRealTimeFail_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRealTimeFail_ProtoFunID>(
    stRealTimeFail_ProtoFunID_descriptor(), name, value);
}
enum stDataInitFinish_ProtoModID {
  stDataInitFinish_ProtoModID_ModID = 2
};
bool stDataInitFinish_ProtoModID_IsValid(int value);
const stDataInitFinish_ProtoModID stDataInitFinish_ProtoModID_ProtoModID_MIN = stDataInitFinish_ProtoModID_ModID;
const stDataInitFinish_ProtoModID stDataInitFinish_ProtoModID_ProtoModID_MAX = stDataInitFinish_ProtoModID_ModID;
const int stDataInitFinish_ProtoModID_ProtoModID_ARRAYSIZE = stDataInitFinish_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDataInitFinish_ProtoModID_descriptor();
inline const ::std::string& stDataInitFinish_ProtoModID_Name(stDataInitFinish_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDataInitFinish_ProtoModID_descriptor(), value);
}
inline bool stDataInitFinish_ProtoModID_Parse(
    const ::std::string& name, stDataInitFinish_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDataInitFinish_ProtoModID>(
    stDataInitFinish_ProtoModID_descriptor(), name, value);
}
enum stDataInitFinish_ProtoFunID {
  stDataInitFinish_ProtoFunID_FunID = 129
};
bool stDataInitFinish_ProtoFunID_IsValid(int value);
const stDataInitFinish_ProtoFunID stDataInitFinish_ProtoFunID_ProtoFunID_MIN = stDataInitFinish_ProtoFunID_FunID;
const stDataInitFinish_ProtoFunID stDataInitFinish_ProtoFunID_ProtoFunID_MAX = stDataInitFinish_ProtoFunID_FunID;
const int stDataInitFinish_ProtoFunID_ProtoFunID_ARRAYSIZE = stDataInitFinish_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stDataInitFinish_ProtoFunID_descriptor();
inline const ::std::string& stDataInitFinish_ProtoFunID_Name(stDataInitFinish_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stDataInitFinish_ProtoFunID_descriptor(), value);
}
inline bool stDataInitFinish_ProtoFunID_Parse(
    const ::std::string& name, stDataInitFinish_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stDataInitFinish_ProtoFunID>(
    stDataInitFinish_ProtoFunID_descriptor(), name, value);
}
enum stReqFirst10RechargeReward_ProtoModID {
  stReqFirst10RechargeReward_ProtoModID_ModID = 2
};
bool stReqFirst10RechargeReward_ProtoModID_IsValid(int value);
const stReqFirst10RechargeReward_ProtoModID stReqFirst10RechargeReward_ProtoModID_ProtoModID_MIN = stReqFirst10RechargeReward_ProtoModID_ModID;
const stReqFirst10RechargeReward_ProtoModID stReqFirst10RechargeReward_ProtoModID_ProtoModID_MAX = stReqFirst10RechargeReward_ProtoModID_ModID;
const int stReqFirst10RechargeReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqFirst10RechargeReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFirst10RechargeReward_ProtoModID_descriptor();
inline const ::std::string& stReqFirst10RechargeReward_ProtoModID_Name(stReqFirst10RechargeReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFirst10RechargeReward_ProtoModID_descriptor(), value);
}
inline bool stReqFirst10RechargeReward_ProtoModID_Parse(
    const ::std::string& name, stReqFirst10RechargeReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFirst10RechargeReward_ProtoModID>(
    stReqFirst10RechargeReward_ProtoModID_descriptor(), name, value);
}
enum stReqFirst10RechargeReward_ProtoFunID {
  stReqFirst10RechargeReward_ProtoFunID_FunID = 130
};
bool stReqFirst10RechargeReward_ProtoFunID_IsValid(int value);
const stReqFirst10RechargeReward_ProtoFunID stReqFirst10RechargeReward_ProtoFunID_ProtoFunID_MIN = stReqFirst10RechargeReward_ProtoFunID_FunID;
const stReqFirst10RechargeReward_ProtoFunID stReqFirst10RechargeReward_ProtoFunID_ProtoFunID_MAX = stReqFirst10RechargeReward_ProtoFunID_FunID;
const int stReqFirst10RechargeReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqFirst10RechargeReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqFirst10RechargeReward_ProtoFunID_descriptor();
inline const ::std::string& stReqFirst10RechargeReward_ProtoFunID_Name(stReqFirst10RechargeReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqFirst10RechargeReward_ProtoFunID_descriptor(), value);
}
inline bool stReqFirst10RechargeReward_ProtoFunID_Parse(
    const ::std::string& name, stReqFirst10RechargeReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqFirst10RechargeReward_ProtoFunID>(
    stReqFirst10RechargeReward_ProtoFunID_descriptor(), name, value);
}
enum stRetFirst10RechargeReward_eResult {
  stRetFirst10RechargeReward_eResult_eSuccess = 1,
  stRetFirst10RechargeReward_eResult_eHas_Not_Enough_Recharge = 2,
  stRetFirst10RechargeReward_eResult_eHas_Got_Reward = 3,
  stRetFirst10RechargeReward_eResult_eBag_Full = 4
};
bool stRetFirst10RechargeReward_eResult_IsValid(int value);
const stRetFirst10RechargeReward_eResult stRetFirst10RechargeReward_eResult_eResult_MIN = stRetFirst10RechargeReward_eResult_eSuccess;
const stRetFirst10RechargeReward_eResult stRetFirst10RechargeReward_eResult_eResult_MAX = stRetFirst10RechargeReward_eResult_eBag_Full;
const int stRetFirst10RechargeReward_eResult_eResult_ARRAYSIZE = stRetFirst10RechargeReward_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFirst10RechargeReward_eResult_descriptor();
inline const ::std::string& stRetFirst10RechargeReward_eResult_Name(stRetFirst10RechargeReward_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFirst10RechargeReward_eResult_descriptor(), value);
}
inline bool stRetFirst10RechargeReward_eResult_Parse(
    const ::std::string& name, stRetFirst10RechargeReward_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFirst10RechargeReward_eResult>(
    stRetFirst10RechargeReward_eResult_descriptor(), name, value);
}
enum stRetFirst10RechargeReward_ProtoModID {
  stRetFirst10RechargeReward_ProtoModID_ModID = 2
};
bool stRetFirst10RechargeReward_ProtoModID_IsValid(int value);
const stRetFirst10RechargeReward_ProtoModID stRetFirst10RechargeReward_ProtoModID_ProtoModID_MIN = stRetFirst10RechargeReward_ProtoModID_ModID;
const stRetFirst10RechargeReward_ProtoModID stRetFirst10RechargeReward_ProtoModID_ProtoModID_MAX = stRetFirst10RechargeReward_ProtoModID_ModID;
const int stRetFirst10RechargeReward_ProtoModID_ProtoModID_ARRAYSIZE = stRetFirst10RechargeReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFirst10RechargeReward_ProtoModID_descriptor();
inline const ::std::string& stRetFirst10RechargeReward_ProtoModID_Name(stRetFirst10RechargeReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFirst10RechargeReward_ProtoModID_descriptor(), value);
}
inline bool stRetFirst10RechargeReward_ProtoModID_Parse(
    const ::std::string& name, stRetFirst10RechargeReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFirst10RechargeReward_ProtoModID>(
    stRetFirst10RechargeReward_ProtoModID_descriptor(), name, value);
}
enum stRetFirst10RechargeReward_ProtoFunID {
  stRetFirst10RechargeReward_ProtoFunID_FunID = 131
};
bool stRetFirst10RechargeReward_ProtoFunID_IsValid(int value);
const stRetFirst10RechargeReward_ProtoFunID stRetFirst10RechargeReward_ProtoFunID_ProtoFunID_MIN = stRetFirst10RechargeReward_ProtoFunID_FunID;
const stRetFirst10RechargeReward_ProtoFunID stRetFirst10RechargeReward_ProtoFunID_ProtoFunID_MAX = stRetFirst10RechargeReward_ProtoFunID_FunID;
const int stRetFirst10RechargeReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetFirst10RechargeReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetFirst10RechargeReward_ProtoFunID_descriptor();
inline const ::std::string& stRetFirst10RechargeReward_ProtoFunID_Name(stRetFirst10RechargeReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetFirst10RechargeReward_ProtoFunID_descriptor(), value);
}
inline bool stRetFirst10RechargeReward_ProtoFunID_Parse(
    const ::std::string& name, stRetFirst10RechargeReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetFirst10RechargeReward_ProtoFunID>(
    stRetFirst10RechargeReward_ProtoFunID_descriptor(), name, value);
}
enum stChatInWorldCoolDown_ProtoModID {
  stChatInWorldCoolDown_ProtoModID_ModID = 2
};
bool stChatInWorldCoolDown_ProtoModID_IsValid(int value);
const stChatInWorldCoolDown_ProtoModID stChatInWorldCoolDown_ProtoModID_ProtoModID_MIN = stChatInWorldCoolDown_ProtoModID_ModID;
const stChatInWorldCoolDown_ProtoModID stChatInWorldCoolDown_ProtoModID_ProtoModID_MAX = stChatInWorldCoolDown_ProtoModID_ModID;
const int stChatInWorldCoolDown_ProtoModID_ProtoModID_ARRAYSIZE = stChatInWorldCoolDown_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChatInWorldCoolDown_ProtoModID_descriptor();
inline const ::std::string& stChatInWorldCoolDown_ProtoModID_Name(stChatInWorldCoolDown_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChatInWorldCoolDown_ProtoModID_descriptor(), value);
}
inline bool stChatInWorldCoolDown_ProtoModID_Parse(
    const ::std::string& name, stChatInWorldCoolDown_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChatInWorldCoolDown_ProtoModID>(
    stChatInWorldCoolDown_ProtoModID_descriptor(), name, value);
}
enum stChatInWorldCoolDown_ProtoFunID {
  stChatInWorldCoolDown_ProtoFunID_FunID = 132
};
bool stChatInWorldCoolDown_ProtoFunID_IsValid(int value);
const stChatInWorldCoolDown_ProtoFunID stChatInWorldCoolDown_ProtoFunID_ProtoFunID_MIN = stChatInWorldCoolDown_ProtoFunID_FunID;
const stChatInWorldCoolDown_ProtoFunID stChatInWorldCoolDown_ProtoFunID_ProtoFunID_MAX = stChatInWorldCoolDown_ProtoFunID_FunID;
const int stChatInWorldCoolDown_ProtoFunID_ProtoFunID_ARRAYSIZE = stChatInWorldCoolDown_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChatInWorldCoolDown_ProtoFunID_descriptor();
inline const ::std::string& stChatInWorldCoolDown_ProtoFunID_Name(stChatInWorldCoolDown_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChatInWorldCoolDown_ProtoFunID_descriptor(), value);
}
inline bool stChatInWorldCoolDown_ProtoFunID_Parse(
    const ::std::string& name, stChatInWorldCoolDown_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChatInWorldCoolDown_ProtoFunID>(
    stChatInWorldCoolDown_ProtoFunID_descriptor(), name, value);
}
enum stSynRoleCreateTime_ProtoModID {
  stSynRoleCreateTime_ProtoModID_ModID = 2
};
bool stSynRoleCreateTime_ProtoModID_IsValid(int value);
const stSynRoleCreateTime_ProtoModID stSynRoleCreateTime_ProtoModID_ProtoModID_MIN = stSynRoleCreateTime_ProtoModID_ModID;
const stSynRoleCreateTime_ProtoModID stSynRoleCreateTime_ProtoModID_ProtoModID_MAX = stSynRoleCreateTime_ProtoModID_ModID;
const int stSynRoleCreateTime_ProtoModID_ProtoModID_ARRAYSIZE = stSynRoleCreateTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRoleCreateTime_ProtoModID_descriptor();
inline const ::std::string& stSynRoleCreateTime_ProtoModID_Name(stSynRoleCreateTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRoleCreateTime_ProtoModID_descriptor(), value);
}
inline bool stSynRoleCreateTime_ProtoModID_Parse(
    const ::std::string& name, stSynRoleCreateTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRoleCreateTime_ProtoModID>(
    stSynRoleCreateTime_ProtoModID_descriptor(), name, value);
}
enum stSynRoleCreateTime_ProtoFunID {
  stSynRoleCreateTime_ProtoFunID_FunID = 133
};
bool stSynRoleCreateTime_ProtoFunID_IsValid(int value);
const stSynRoleCreateTime_ProtoFunID stSynRoleCreateTime_ProtoFunID_ProtoFunID_MIN = stSynRoleCreateTime_ProtoFunID_FunID;
const stSynRoleCreateTime_ProtoFunID stSynRoleCreateTime_ProtoFunID_ProtoFunID_MAX = stSynRoleCreateTime_ProtoFunID_FunID;
const int stSynRoleCreateTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynRoleCreateTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRoleCreateTime_ProtoFunID_descriptor();
inline const ::std::string& stSynRoleCreateTime_ProtoFunID_Name(stSynRoleCreateTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRoleCreateTime_ProtoFunID_descriptor(), value);
}
inline bool stSynRoleCreateTime_ProtoFunID_Parse(
    const ::std::string& name, stSynRoleCreateTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRoleCreateTime_ProtoFunID>(
    stSynRoleCreateTime_ProtoFunID_descriptor(), name, value);
}
enum stReqChgEquipSkill_ProtoModID {
  stReqChgEquipSkill_ProtoModID_ModID = 2
};
bool stReqChgEquipSkill_ProtoModID_IsValid(int value);
const stReqChgEquipSkill_ProtoModID stReqChgEquipSkill_ProtoModID_ProtoModID_MIN = stReqChgEquipSkill_ProtoModID_ModID;
const stReqChgEquipSkill_ProtoModID stReqChgEquipSkill_ProtoModID_ProtoModID_MAX = stReqChgEquipSkill_ProtoModID_ModID;
const int stReqChgEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE = stReqChgEquipSkill_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChgEquipSkill_ProtoModID_descriptor();
inline const ::std::string& stReqChgEquipSkill_ProtoModID_Name(stReqChgEquipSkill_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChgEquipSkill_ProtoModID_descriptor(), value);
}
inline bool stReqChgEquipSkill_ProtoModID_Parse(
    const ::std::string& name, stReqChgEquipSkill_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChgEquipSkill_ProtoModID>(
    stReqChgEquipSkill_ProtoModID_descriptor(), name, value);
}
enum stReqChgEquipSkill_ProtoFunID {
  stReqChgEquipSkill_ProtoFunID_FunID = 134
};
bool stReqChgEquipSkill_ProtoFunID_IsValid(int value);
const stReqChgEquipSkill_ProtoFunID stReqChgEquipSkill_ProtoFunID_ProtoFunID_MIN = stReqChgEquipSkill_ProtoFunID_FunID;
const stReqChgEquipSkill_ProtoFunID stReqChgEquipSkill_ProtoFunID_ProtoFunID_MAX = stReqChgEquipSkill_ProtoFunID_FunID;
const int stReqChgEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChgEquipSkill_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChgEquipSkill_ProtoFunID_descriptor();
inline const ::std::string& stReqChgEquipSkill_ProtoFunID_Name(stReqChgEquipSkill_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChgEquipSkill_ProtoFunID_descriptor(), value);
}
inline bool stReqChgEquipSkill_ProtoFunID_Parse(
    const ::std::string& name, stReqChgEquipSkill_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChgEquipSkill_ProtoFunID>(
    stReqChgEquipSkill_ProtoFunID_descriptor(), name, value);
}
enum stRetChgEquipSkillResult_eResult {
  stRetChgEquipSkillResult_eResult_eSuccess = 1,
  stRetChgEquipSkillResult_eResult_eSrc_Item_Not_Exist = 2,
  stRetChgEquipSkillResult_eResult_eDst_Item_Not_Exist = 3,
  stRetChgEquipSkillResult_eResult_eHas_Not_Chg_Soul_Item = 4,
  stRetChgEquipSkillResult_eResult_eCond_Not_Meet = 5,
  stRetChgEquipSkillResult_eResult_eDec_Chg_Soul_Item_Fail = 6
};
bool stRetChgEquipSkillResult_eResult_IsValid(int value);
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult_eResult_eResult_MIN = stRetChgEquipSkillResult_eResult_eSuccess;
const stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult_eResult_eResult_MAX = stRetChgEquipSkillResult_eResult_eDec_Chg_Soul_Item_Fail;
const int stRetChgEquipSkillResult_eResult_eResult_ARRAYSIZE = stRetChgEquipSkillResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChgEquipSkillResult_eResult_descriptor();
inline const ::std::string& stRetChgEquipSkillResult_eResult_Name(stRetChgEquipSkillResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChgEquipSkillResult_eResult_descriptor(), value);
}
inline bool stRetChgEquipSkillResult_eResult_Parse(
    const ::std::string& name, stRetChgEquipSkillResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChgEquipSkillResult_eResult>(
    stRetChgEquipSkillResult_eResult_descriptor(), name, value);
}
enum stRetChgEquipSkillResult_ProtoModID {
  stRetChgEquipSkillResult_ProtoModID_ModID = 2
};
bool stRetChgEquipSkillResult_ProtoModID_IsValid(int value);
const stRetChgEquipSkillResult_ProtoModID stRetChgEquipSkillResult_ProtoModID_ProtoModID_MIN = stRetChgEquipSkillResult_ProtoModID_ModID;
const stRetChgEquipSkillResult_ProtoModID stRetChgEquipSkillResult_ProtoModID_ProtoModID_MAX = stRetChgEquipSkillResult_ProtoModID_ModID;
const int stRetChgEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE = stRetChgEquipSkillResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChgEquipSkillResult_ProtoModID_descriptor();
inline const ::std::string& stRetChgEquipSkillResult_ProtoModID_Name(stRetChgEquipSkillResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChgEquipSkillResult_ProtoModID_descriptor(), value);
}
inline bool stRetChgEquipSkillResult_ProtoModID_Parse(
    const ::std::string& name, stRetChgEquipSkillResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChgEquipSkillResult_ProtoModID>(
    stRetChgEquipSkillResult_ProtoModID_descriptor(), name, value);
}
enum stRetChgEquipSkillResult_ProtoFunID {
  stRetChgEquipSkillResult_ProtoFunID_FunID = 135
};
bool stRetChgEquipSkillResult_ProtoFunID_IsValid(int value);
const stRetChgEquipSkillResult_ProtoFunID stRetChgEquipSkillResult_ProtoFunID_ProtoFunID_MIN = stRetChgEquipSkillResult_ProtoFunID_FunID;
const stRetChgEquipSkillResult_ProtoFunID stRetChgEquipSkillResult_ProtoFunID_ProtoFunID_MAX = stRetChgEquipSkillResult_ProtoFunID_FunID;
const int stRetChgEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetChgEquipSkillResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetChgEquipSkillResult_ProtoFunID_descriptor();
inline const ::std::string& stRetChgEquipSkillResult_ProtoFunID_Name(stRetChgEquipSkillResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetChgEquipSkillResult_ProtoFunID_descriptor(), value);
}
inline bool stRetChgEquipSkillResult_ProtoFunID_Parse(
    const ::std::string& name, stRetChgEquipSkillResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetChgEquipSkillResult_ProtoFunID>(
    stRetChgEquipSkillResult_ProtoFunID_descriptor(), name, value);
}
enum stHasCloseBetaReward_ProtoModID {
  stHasCloseBetaReward_ProtoModID_ModID = 2
};
bool stHasCloseBetaReward_ProtoModID_IsValid(int value);
const stHasCloseBetaReward_ProtoModID stHasCloseBetaReward_ProtoModID_ProtoModID_MIN = stHasCloseBetaReward_ProtoModID_ModID;
const stHasCloseBetaReward_ProtoModID stHasCloseBetaReward_ProtoModID_ProtoModID_MAX = stHasCloseBetaReward_ProtoModID_ModID;
const int stHasCloseBetaReward_ProtoModID_ProtoModID_ARRAYSIZE = stHasCloseBetaReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHasCloseBetaReward_ProtoModID_descriptor();
inline const ::std::string& stHasCloseBetaReward_ProtoModID_Name(stHasCloseBetaReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHasCloseBetaReward_ProtoModID_descriptor(), value);
}
inline bool stHasCloseBetaReward_ProtoModID_Parse(
    const ::std::string& name, stHasCloseBetaReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHasCloseBetaReward_ProtoModID>(
    stHasCloseBetaReward_ProtoModID_descriptor(), name, value);
}
enum stHasCloseBetaReward_ProtoFunID {
  stHasCloseBetaReward_ProtoFunID_FunID = 136
};
bool stHasCloseBetaReward_ProtoFunID_IsValid(int value);
const stHasCloseBetaReward_ProtoFunID stHasCloseBetaReward_ProtoFunID_ProtoFunID_MIN = stHasCloseBetaReward_ProtoFunID_FunID;
const stHasCloseBetaReward_ProtoFunID stHasCloseBetaReward_ProtoFunID_ProtoFunID_MAX = stHasCloseBetaReward_ProtoFunID_FunID;
const int stHasCloseBetaReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stHasCloseBetaReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHasCloseBetaReward_ProtoFunID_descriptor();
inline const ::std::string& stHasCloseBetaReward_ProtoFunID_Name(stHasCloseBetaReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHasCloseBetaReward_ProtoFunID_descriptor(), value);
}
inline bool stHasCloseBetaReward_ProtoFunID_Parse(
    const ::std::string& name, stHasCloseBetaReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHasCloseBetaReward_ProtoFunID>(
    stHasCloseBetaReward_ProtoFunID_descriptor(), name, value);
}
enum stReqGotCloseBetaReward_ProtoModID {
  stReqGotCloseBetaReward_ProtoModID_ModID = 2
};
bool stReqGotCloseBetaReward_ProtoModID_IsValid(int value);
const stReqGotCloseBetaReward_ProtoModID stReqGotCloseBetaReward_ProtoModID_ProtoModID_MIN = stReqGotCloseBetaReward_ProtoModID_ModID;
const stReqGotCloseBetaReward_ProtoModID stReqGotCloseBetaReward_ProtoModID_ProtoModID_MAX = stReqGotCloseBetaReward_ProtoModID_ModID;
const int stReqGotCloseBetaReward_ProtoModID_ProtoModID_ARRAYSIZE = stReqGotCloseBetaReward_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGotCloseBetaReward_ProtoModID_descriptor();
inline const ::std::string& stReqGotCloseBetaReward_ProtoModID_Name(stReqGotCloseBetaReward_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGotCloseBetaReward_ProtoModID_descriptor(), value);
}
inline bool stReqGotCloseBetaReward_ProtoModID_Parse(
    const ::std::string& name, stReqGotCloseBetaReward_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGotCloseBetaReward_ProtoModID>(
    stReqGotCloseBetaReward_ProtoModID_descriptor(), name, value);
}
enum stReqGotCloseBetaReward_ProtoFunID {
  stReqGotCloseBetaReward_ProtoFunID_FunID = 137
};
bool stReqGotCloseBetaReward_ProtoFunID_IsValid(int value);
const stReqGotCloseBetaReward_ProtoFunID stReqGotCloseBetaReward_ProtoFunID_ProtoFunID_MIN = stReqGotCloseBetaReward_ProtoFunID_FunID;
const stReqGotCloseBetaReward_ProtoFunID stReqGotCloseBetaReward_ProtoFunID_ProtoFunID_MAX = stReqGotCloseBetaReward_ProtoFunID_FunID;
const int stReqGotCloseBetaReward_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqGotCloseBetaReward_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqGotCloseBetaReward_ProtoFunID_descriptor();
inline const ::std::string& stReqGotCloseBetaReward_ProtoFunID_Name(stReqGotCloseBetaReward_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqGotCloseBetaReward_ProtoFunID_descriptor(), value);
}
inline bool stReqGotCloseBetaReward_ProtoFunID_Parse(
    const ::std::string& name, stReqGotCloseBetaReward_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqGotCloseBetaReward_ProtoFunID>(
    stReqGotCloseBetaReward_ProtoFunID_descriptor(), name, value);
}
enum stGotCloseBetaRewardResult_eResult {
  stGotCloseBetaRewardResult_eResult_eSuccess = 1,
  stGotCloseBetaRewardResult_eResult_eBagFull = 2,
  stGotCloseBetaRewardResult_eResult_eHas_Got_Reward = 3,
  stGotCloseBetaRewardResult_eResult_eHas_Not_Reward = 4
};
bool stGotCloseBetaRewardResult_eResult_IsValid(int value);
const stGotCloseBetaRewardResult_eResult stGotCloseBetaRewardResult_eResult_eResult_MIN = stGotCloseBetaRewardResult_eResult_eSuccess;
const stGotCloseBetaRewardResult_eResult stGotCloseBetaRewardResult_eResult_eResult_MAX = stGotCloseBetaRewardResult_eResult_eHas_Not_Reward;
const int stGotCloseBetaRewardResult_eResult_eResult_ARRAYSIZE = stGotCloseBetaRewardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotCloseBetaRewardResult_eResult_descriptor();
inline const ::std::string& stGotCloseBetaRewardResult_eResult_Name(stGotCloseBetaRewardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotCloseBetaRewardResult_eResult_descriptor(), value);
}
inline bool stGotCloseBetaRewardResult_eResult_Parse(
    const ::std::string& name, stGotCloseBetaRewardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotCloseBetaRewardResult_eResult>(
    stGotCloseBetaRewardResult_eResult_descriptor(), name, value);
}
enum stGotCloseBetaRewardResult_ProtoModID {
  stGotCloseBetaRewardResult_ProtoModID_ModID = 2
};
bool stGotCloseBetaRewardResult_ProtoModID_IsValid(int value);
const stGotCloseBetaRewardResult_ProtoModID stGotCloseBetaRewardResult_ProtoModID_ProtoModID_MIN = stGotCloseBetaRewardResult_ProtoModID_ModID;
const stGotCloseBetaRewardResult_ProtoModID stGotCloseBetaRewardResult_ProtoModID_ProtoModID_MAX = stGotCloseBetaRewardResult_ProtoModID_ModID;
const int stGotCloseBetaRewardResult_ProtoModID_ProtoModID_ARRAYSIZE = stGotCloseBetaRewardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotCloseBetaRewardResult_ProtoModID_descriptor();
inline const ::std::string& stGotCloseBetaRewardResult_ProtoModID_Name(stGotCloseBetaRewardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotCloseBetaRewardResult_ProtoModID_descriptor(), value);
}
inline bool stGotCloseBetaRewardResult_ProtoModID_Parse(
    const ::std::string& name, stGotCloseBetaRewardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotCloseBetaRewardResult_ProtoModID>(
    stGotCloseBetaRewardResult_ProtoModID_descriptor(), name, value);
}
enum stGotCloseBetaRewardResult_ProtoFunID {
  stGotCloseBetaRewardResult_ProtoFunID_FunID = 138
};
bool stGotCloseBetaRewardResult_ProtoFunID_IsValid(int value);
const stGotCloseBetaRewardResult_ProtoFunID stGotCloseBetaRewardResult_ProtoFunID_ProtoFunID_MIN = stGotCloseBetaRewardResult_ProtoFunID_FunID;
const stGotCloseBetaRewardResult_ProtoFunID stGotCloseBetaRewardResult_ProtoFunID_ProtoFunID_MAX = stGotCloseBetaRewardResult_ProtoFunID_FunID;
const int stGotCloseBetaRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGotCloseBetaRewardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGotCloseBetaRewardResult_ProtoFunID_descriptor();
inline const ::std::string& stGotCloseBetaRewardResult_ProtoFunID_Name(stGotCloseBetaRewardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGotCloseBetaRewardResult_ProtoFunID_descriptor(), value);
}
inline bool stGotCloseBetaRewardResult_ProtoFunID_Parse(
    const ::std::string& name, stGotCloseBetaRewardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGotCloseBetaRewardResult_ProtoFunID>(
    stGotCloseBetaRewardResult_ProtoFunID_descriptor(), name, value);
}
enum stReqUseMonthCardItem_ProtoModID {
  stReqUseMonthCardItem_ProtoModID_ModID = 2
};
bool stReqUseMonthCardItem_ProtoModID_IsValid(int value);
const stReqUseMonthCardItem_ProtoModID stReqUseMonthCardItem_ProtoModID_ProtoModID_MIN = stReqUseMonthCardItem_ProtoModID_ModID;
const stReqUseMonthCardItem_ProtoModID stReqUseMonthCardItem_ProtoModID_ProtoModID_MAX = stReqUseMonthCardItem_ProtoModID_ModID;
const int stReqUseMonthCardItem_ProtoModID_ProtoModID_ARRAYSIZE = stReqUseMonthCardItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseMonthCardItem_ProtoModID_descriptor();
inline const ::std::string& stReqUseMonthCardItem_ProtoModID_Name(stReqUseMonthCardItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseMonthCardItem_ProtoModID_descriptor(), value);
}
inline bool stReqUseMonthCardItem_ProtoModID_Parse(
    const ::std::string& name, stReqUseMonthCardItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseMonthCardItem_ProtoModID>(
    stReqUseMonthCardItem_ProtoModID_descriptor(), name, value);
}
enum stReqUseMonthCardItem_ProtoFunID {
  stReqUseMonthCardItem_ProtoFunID_FunID = 139
};
bool stReqUseMonthCardItem_ProtoFunID_IsValid(int value);
const stReqUseMonthCardItem_ProtoFunID stReqUseMonthCardItem_ProtoFunID_ProtoFunID_MIN = stReqUseMonthCardItem_ProtoFunID_FunID;
const stReqUseMonthCardItem_ProtoFunID stReqUseMonthCardItem_ProtoFunID_ProtoFunID_MAX = stReqUseMonthCardItem_ProtoFunID_FunID;
const int stReqUseMonthCardItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUseMonthCardItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseMonthCardItem_ProtoFunID_descriptor();
inline const ::std::string& stReqUseMonthCardItem_ProtoFunID_Name(stReqUseMonthCardItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseMonthCardItem_ProtoFunID_descriptor(), value);
}
inline bool stReqUseMonthCardItem_ProtoFunID_Parse(
    const ::std::string& name, stReqUseMonthCardItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseMonthCardItem_ProtoFunID>(
    stReqUseMonthCardItem_ProtoFunID_descriptor(), name, value);
}
enum stRetUseMonthCardItem_eResult {
  stRetUseMonthCardItem_eResult_eSuccess = 1,
  stRetUseMonthCardItem_eResult_eExpire = 2,
  stRetUseMonthCardItem_eResult_eToday_Has_Use = 3,
  stRetUseMonthCardItem_eResult_eItem_Not_Exist = 4
};
bool stRetUseMonthCardItem_eResult_IsValid(int value);
const stRetUseMonthCardItem_eResult stRetUseMonthCardItem_eResult_eResult_MIN = stRetUseMonthCardItem_eResult_eSuccess;
const stRetUseMonthCardItem_eResult stRetUseMonthCardItem_eResult_eResult_MAX = stRetUseMonthCardItem_eResult_eItem_Not_Exist;
const int stRetUseMonthCardItem_eResult_eResult_ARRAYSIZE = stRetUseMonthCardItem_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseMonthCardItem_eResult_descriptor();
inline const ::std::string& stRetUseMonthCardItem_eResult_Name(stRetUseMonthCardItem_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseMonthCardItem_eResult_descriptor(), value);
}
inline bool stRetUseMonthCardItem_eResult_Parse(
    const ::std::string& name, stRetUseMonthCardItem_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseMonthCardItem_eResult>(
    stRetUseMonthCardItem_eResult_descriptor(), name, value);
}
enum stRetUseMonthCardItem_ProtoModID {
  stRetUseMonthCardItem_ProtoModID_ModID = 2
};
bool stRetUseMonthCardItem_ProtoModID_IsValid(int value);
const stRetUseMonthCardItem_ProtoModID stRetUseMonthCardItem_ProtoModID_ProtoModID_MIN = stRetUseMonthCardItem_ProtoModID_ModID;
const stRetUseMonthCardItem_ProtoModID stRetUseMonthCardItem_ProtoModID_ProtoModID_MAX = stRetUseMonthCardItem_ProtoModID_ModID;
const int stRetUseMonthCardItem_ProtoModID_ProtoModID_ARRAYSIZE = stRetUseMonthCardItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseMonthCardItem_ProtoModID_descriptor();
inline const ::std::string& stRetUseMonthCardItem_ProtoModID_Name(stRetUseMonthCardItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseMonthCardItem_ProtoModID_descriptor(), value);
}
inline bool stRetUseMonthCardItem_ProtoModID_Parse(
    const ::std::string& name, stRetUseMonthCardItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseMonthCardItem_ProtoModID>(
    stRetUseMonthCardItem_ProtoModID_descriptor(), name, value);
}
enum stRetUseMonthCardItem_ProtoFunID {
  stRetUseMonthCardItem_ProtoFunID_FunID = 140
};
bool stRetUseMonthCardItem_ProtoFunID_IsValid(int value);
const stRetUseMonthCardItem_ProtoFunID stRetUseMonthCardItem_ProtoFunID_ProtoFunID_MIN = stRetUseMonthCardItem_ProtoFunID_FunID;
const stRetUseMonthCardItem_ProtoFunID stRetUseMonthCardItem_ProtoFunID_ProtoFunID_MAX = stRetUseMonthCardItem_ProtoFunID_FunID;
const int stRetUseMonthCardItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetUseMonthCardItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseMonthCardItem_ProtoFunID_descriptor();
inline const ::std::string& stRetUseMonthCardItem_ProtoFunID_Name(stRetUseMonthCardItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseMonthCardItem_ProtoFunID_descriptor(), value);
}
inline bool stRetUseMonthCardItem_ProtoFunID_Parse(
    const ::std::string& name, stRetUseMonthCardItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseMonthCardItem_ProtoFunID>(
    stRetUseMonthCardItem_ProtoFunID_descriptor(), name, value);
}
enum stReqUseSelectItemBox_ProtoModID {
  stReqUseSelectItemBox_ProtoModID_ModID = 2
};
bool stReqUseSelectItemBox_ProtoModID_IsValid(int value);
const stReqUseSelectItemBox_ProtoModID stReqUseSelectItemBox_ProtoModID_ProtoModID_MIN = stReqUseSelectItemBox_ProtoModID_ModID;
const stReqUseSelectItemBox_ProtoModID stReqUseSelectItemBox_ProtoModID_ProtoModID_MAX = stReqUseSelectItemBox_ProtoModID_ModID;
const int stReqUseSelectItemBox_ProtoModID_ProtoModID_ARRAYSIZE = stReqUseSelectItemBox_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseSelectItemBox_ProtoModID_descriptor();
inline const ::std::string& stReqUseSelectItemBox_ProtoModID_Name(stReqUseSelectItemBox_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseSelectItemBox_ProtoModID_descriptor(), value);
}
inline bool stReqUseSelectItemBox_ProtoModID_Parse(
    const ::std::string& name, stReqUseSelectItemBox_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseSelectItemBox_ProtoModID>(
    stReqUseSelectItemBox_ProtoModID_descriptor(), name, value);
}
enum stReqUseSelectItemBox_ProtoFunID {
  stReqUseSelectItemBox_ProtoFunID_FunID = 141
};
bool stReqUseSelectItemBox_ProtoFunID_IsValid(int value);
const stReqUseSelectItemBox_ProtoFunID stReqUseSelectItemBox_ProtoFunID_ProtoFunID_MIN = stReqUseSelectItemBox_ProtoFunID_FunID;
const stReqUseSelectItemBox_ProtoFunID stReqUseSelectItemBox_ProtoFunID_ProtoFunID_MAX = stReqUseSelectItemBox_ProtoFunID_FunID;
const int stReqUseSelectItemBox_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUseSelectItemBox_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseSelectItemBox_ProtoFunID_descriptor();
inline const ::std::string& stReqUseSelectItemBox_ProtoFunID_Name(stReqUseSelectItemBox_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseSelectItemBox_ProtoFunID_descriptor(), value);
}
inline bool stReqUseSelectItemBox_ProtoFunID_Parse(
    const ::std::string& name, stReqUseSelectItemBox_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseSelectItemBox_ProtoFunID>(
    stReqUseSelectItemBox_ProtoFunID_descriptor(), name, value);
}
enum stRetUseSelectItemBox_eResult {
  stRetUseSelectItemBox_eResult_eSuccess = 1,
  stRetUseSelectItemBox_eResult_eItem_Not_Exist = 2,
  stRetUseSelectItemBox_eResult_eDec_Item_Fail = 3
};
bool stRetUseSelectItemBox_eResult_IsValid(int value);
const stRetUseSelectItemBox_eResult stRetUseSelectItemBox_eResult_eResult_MIN = stRetUseSelectItemBox_eResult_eSuccess;
const stRetUseSelectItemBox_eResult stRetUseSelectItemBox_eResult_eResult_MAX = stRetUseSelectItemBox_eResult_eDec_Item_Fail;
const int stRetUseSelectItemBox_eResult_eResult_ARRAYSIZE = stRetUseSelectItemBox_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseSelectItemBox_eResult_descriptor();
inline const ::std::string& stRetUseSelectItemBox_eResult_Name(stRetUseSelectItemBox_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseSelectItemBox_eResult_descriptor(), value);
}
inline bool stRetUseSelectItemBox_eResult_Parse(
    const ::std::string& name, stRetUseSelectItemBox_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseSelectItemBox_eResult>(
    stRetUseSelectItemBox_eResult_descriptor(), name, value);
}
enum stRetUseSelectItemBox_ProtoModID {
  stRetUseSelectItemBox_ProtoModID_ModID = 2
};
bool stRetUseSelectItemBox_ProtoModID_IsValid(int value);
const stRetUseSelectItemBox_ProtoModID stRetUseSelectItemBox_ProtoModID_ProtoModID_MIN = stRetUseSelectItemBox_ProtoModID_ModID;
const stRetUseSelectItemBox_ProtoModID stRetUseSelectItemBox_ProtoModID_ProtoModID_MAX = stRetUseSelectItemBox_ProtoModID_ModID;
const int stRetUseSelectItemBox_ProtoModID_ProtoModID_ARRAYSIZE = stRetUseSelectItemBox_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseSelectItemBox_ProtoModID_descriptor();
inline const ::std::string& stRetUseSelectItemBox_ProtoModID_Name(stRetUseSelectItemBox_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseSelectItemBox_ProtoModID_descriptor(), value);
}
inline bool stRetUseSelectItemBox_ProtoModID_Parse(
    const ::std::string& name, stRetUseSelectItemBox_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseSelectItemBox_ProtoModID>(
    stRetUseSelectItemBox_ProtoModID_descriptor(), name, value);
}
enum stRetUseSelectItemBox_ProtoFunID {
  stRetUseSelectItemBox_ProtoFunID_FunID = 142
};
bool stRetUseSelectItemBox_ProtoFunID_IsValid(int value);
const stRetUseSelectItemBox_ProtoFunID stRetUseSelectItemBox_ProtoFunID_ProtoFunID_MIN = stRetUseSelectItemBox_ProtoFunID_FunID;
const stRetUseSelectItemBox_ProtoFunID stRetUseSelectItemBox_ProtoFunID_ProtoFunID_MAX = stRetUseSelectItemBox_ProtoFunID_FunID;
const int stRetUseSelectItemBox_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetUseSelectItemBox_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseSelectItemBox_ProtoFunID_descriptor();
inline const ::std::string& stRetUseSelectItemBox_ProtoFunID_Name(stRetUseSelectItemBox_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseSelectItemBox_ProtoFunID_descriptor(), value);
}
inline bool stRetUseSelectItemBox_ProtoFunID_Parse(
    const ::std::string& name, stRetUseSelectItemBox_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseSelectItemBox_ProtoFunID>(
    stRetUseSelectItemBox_ProtoFunID_descriptor(), name, value);
}
enum stReqUseHeroSkillBook_ProtoModID {
  stReqUseHeroSkillBook_ProtoModID_ModID = 2
};
bool stReqUseHeroSkillBook_ProtoModID_IsValid(int value);
const stReqUseHeroSkillBook_ProtoModID stReqUseHeroSkillBook_ProtoModID_ProtoModID_MIN = stReqUseHeroSkillBook_ProtoModID_ModID;
const stReqUseHeroSkillBook_ProtoModID stReqUseHeroSkillBook_ProtoModID_ProtoModID_MAX = stReqUseHeroSkillBook_ProtoModID_ModID;
const int stReqUseHeroSkillBook_ProtoModID_ProtoModID_ARRAYSIZE = stReqUseHeroSkillBook_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseHeroSkillBook_ProtoModID_descriptor();
inline const ::std::string& stReqUseHeroSkillBook_ProtoModID_Name(stReqUseHeroSkillBook_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseHeroSkillBook_ProtoModID_descriptor(), value);
}
inline bool stReqUseHeroSkillBook_ProtoModID_Parse(
    const ::std::string& name, stReqUseHeroSkillBook_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseHeroSkillBook_ProtoModID>(
    stReqUseHeroSkillBook_ProtoModID_descriptor(), name, value);
}
enum stReqUseHeroSkillBook_ProtoFunID {
  stReqUseHeroSkillBook_ProtoFunID_FunID = 143
};
bool stReqUseHeroSkillBook_ProtoFunID_IsValid(int value);
const stReqUseHeroSkillBook_ProtoFunID stReqUseHeroSkillBook_ProtoFunID_ProtoFunID_MIN = stReqUseHeroSkillBook_ProtoFunID_FunID;
const stReqUseHeroSkillBook_ProtoFunID stReqUseHeroSkillBook_ProtoFunID_ProtoFunID_MAX = stReqUseHeroSkillBook_ProtoFunID_FunID;
const int stReqUseHeroSkillBook_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUseHeroSkillBook_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseHeroSkillBook_ProtoFunID_descriptor();
inline const ::std::string& stReqUseHeroSkillBook_ProtoFunID_Name(stReqUseHeroSkillBook_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseHeroSkillBook_ProtoFunID_descriptor(), value);
}
inline bool stReqUseHeroSkillBook_ProtoFunID_Parse(
    const ::std::string& name, stReqUseHeroSkillBook_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseHeroSkillBook_ProtoFunID>(
    stReqUseHeroSkillBook_ProtoFunID_descriptor(), name, value);
}
enum stRetUseHeroSkillBook_eResult {
  stRetUseHeroSkillBook_eResult_eSuccess = 1,
  stRetUseHeroSkillBook_eResult_eItem_Not_Exist = 2,
  stRetUseHeroSkillBook_eResult_eDec_Item_Fail = 3,
  stRetUseHeroSkillBook_eResult_eSkill_Has_Exist = 4,
  stRetUseHeroSkillBook_eResult_eHero_Not_Exist = 5
};
bool stRetUseHeroSkillBook_eResult_IsValid(int value);
const stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook_eResult_eResult_MIN = stRetUseHeroSkillBook_eResult_eSuccess;
const stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook_eResult_eResult_MAX = stRetUseHeroSkillBook_eResult_eHero_Not_Exist;
const int stRetUseHeroSkillBook_eResult_eResult_ARRAYSIZE = stRetUseHeroSkillBook_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseHeroSkillBook_eResult_descriptor();
inline const ::std::string& stRetUseHeroSkillBook_eResult_Name(stRetUseHeroSkillBook_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseHeroSkillBook_eResult_descriptor(), value);
}
inline bool stRetUseHeroSkillBook_eResult_Parse(
    const ::std::string& name, stRetUseHeroSkillBook_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseHeroSkillBook_eResult>(
    stRetUseHeroSkillBook_eResult_descriptor(), name, value);
}
enum stRetUseHeroSkillBook_ProtoModID {
  stRetUseHeroSkillBook_ProtoModID_ModID = 2
};
bool stRetUseHeroSkillBook_ProtoModID_IsValid(int value);
const stRetUseHeroSkillBook_ProtoModID stRetUseHeroSkillBook_ProtoModID_ProtoModID_MIN = stRetUseHeroSkillBook_ProtoModID_ModID;
const stRetUseHeroSkillBook_ProtoModID stRetUseHeroSkillBook_ProtoModID_ProtoModID_MAX = stRetUseHeroSkillBook_ProtoModID_ModID;
const int stRetUseHeroSkillBook_ProtoModID_ProtoModID_ARRAYSIZE = stRetUseHeroSkillBook_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseHeroSkillBook_ProtoModID_descriptor();
inline const ::std::string& stRetUseHeroSkillBook_ProtoModID_Name(stRetUseHeroSkillBook_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseHeroSkillBook_ProtoModID_descriptor(), value);
}
inline bool stRetUseHeroSkillBook_ProtoModID_Parse(
    const ::std::string& name, stRetUseHeroSkillBook_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseHeroSkillBook_ProtoModID>(
    stRetUseHeroSkillBook_ProtoModID_descriptor(), name, value);
}
enum stRetUseHeroSkillBook_ProtoFunID {
  stRetUseHeroSkillBook_ProtoFunID_FunID = 144
};
bool stRetUseHeroSkillBook_ProtoFunID_IsValid(int value);
const stRetUseHeroSkillBook_ProtoFunID stRetUseHeroSkillBook_ProtoFunID_ProtoFunID_MIN = stRetUseHeroSkillBook_ProtoFunID_FunID;
const stRetUseHeroSkillBook_ProtoFunID stRetUseHeroSkillBook_ProtoFunID_ProtoFunID_MAX = stRetUseHeroSkillBook_ProtoFunID_FunID;
const int stRetUseHeroSkillBook_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetUseHeroSkillBook_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseHeroSkillBook_ProtoFunID_descriptor();
inline const ::std::string& stRetUseHeroSkillBook_ProtoFunID_Name(stRetUseHeroSkillBook_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseHeroSkillBook_ProtoFunID_descriptor(), value);
}
inline bool stRetUseHeroSkillBook_ProtoFunID_Parse(
    const ::std::string& name, stRetUseHeroSkillBook_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseHeroSkillBook_ProtoFunID>(
    stRetUseHeroSkillBook_ProtoFunID_descriptor(), name, value);
}
enum stReqUseEquipSkillBook_ProtoModID {
  stReqUseEquipSkillBook_ProtoModID_ModID = 2
};
bool stReqUseEquipSkillBook_ProtoModID_IsValid(int value);
const stReqUseEquipSkillBook_ProtoModID stReqUseEquipSkillBook_ProtoModID_ProtoModID_MIN = stReqUseEquipSkillBook_ProtoModID_ModID;
const stReqUseEquipSkillBook_ProtoModID stReqUseEquipSkillBook_ProtoModID_ProtoModID_MAX = stReqUseEquipSkillBook_ProtoModID_ModID;
const int stReqUseEquipSkillBook_ProtoModID_ProtoModID_ARRAYSIZE = stReqUseEquipSkillBook_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseEquipSkillBook_ProtoModID_descriptor();
inline const ::std::string& stReqUseEquipSkillBook_ProtoModID_Name(stReqUseEquipSkillBook_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseEquipSkillBook_ProtoModID_descriptor(), value);
}
inline bool stReqUseEquipSkillBook_ProtoModID_Parse(
    const ::std::string& name, stReqUseEquipSkillBook_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseEquipSkillBook_ProtoModID>(
    stReqUseEquipSkillBook_ProtoModID_descriptor(), name, value);
}
enum stReqUseEquipSkillBook_ProtoFunID {
  stReqUseEquipSkillBook_ProtoFunID_FunID = 145
};
bool stReqUseEquipSkillBook_ProtoFunID_IsValid(int value);
const stReqUseEquipSkillBook_ProtoFunID stReqUseEquipSkillBook_ProtoFunID_ProtoFunID_MIN = stReqUseEquipSkillBook_ProtoFunID_FunID;
const stReqUseEquipSkillBook_ProtoFunID stReqUseEquipSkillBook_ProtoFunID_ProtoFunID_MAX = stReqUseEquipSkillBook_ProtoFunID_FunID;
const int stReqUseEquipSkillBook_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUseEquipSkillBook_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseEquipSkillBook_ProtoFunID_descriptor();
inline const ::std::string& stReqUseEquipSkillBook_ProtoFunID_Name(stReqUseEquipSkillBook_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseEquipSkillBook_ProtoFunID_descriptor(), value);
}
inline bool stReqUseEquipSkillBook_ProtoFunID_Parse(
    const ::std::string& name, stReqUseEquipSkillBook_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseEquipSkillBook_ProtoFunID>(
    stReqUseEquipSkillBook_ProtoFunID_descriptor(), name, value);
}
enum stRetUseEquipSkillBook_eResult {
  stRetUseEquipSkillBook_eResult_eSuccess = 1,
  stRetUseEquipSkillBook_eResult_eItem_Not_Exist = 2,
  stRetUseEquipSkillBook_eResult_eEquip_Cond_Not_Meet = 3,
  stRetUseEquipSkillBook_eResult_eDec_Item_Fail = 4,
  stRetUseEquipSkillBook_eResult_eSkill_Exist = 5
};
bool stRetUseEquipSkillBook_eResult_IsValid(int value);
const stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook_eResult_eResult_MIN = stRetUseEquipSkillBook_eResult_eSuccess;
const stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook_eResult_eResult_MAX = stRetUseEquipSkillBook_eResult_eSkill_Exist;
const int stRetUseEquipSkillBook_eResult_eResult_ARRAYSIZE = stRetUseEquipSkillBook_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseEquipSkillBook_eResult_descriptor();
inline const ::std::string& stRetUseEquipSkillBook_eResult_Name(stRetUseEquipSkillBook_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseEquipSkillBook_eResult_descriptor(), value);
}
inline bool stRetUseEquipSkillBook_eResult_Parse(
    const ::std::string& name, stRetUseEquipSkillBook_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseEquipSkillBook_eResult>(
    stRetUseEquipSkillBook_eResult_descriptor(), name, value);
}
enum stRetUseEquipSkillBook_ProtoModID {
  stRetUseEquipSkillBook_ProtoModID_ModID = 2
};
bool stRetUseEquipSkillBook_ProtoModID_IsValid(int value);
const stRetUseEquipSkillBook_ProtoModID stRetUseEquipSkillBook_ProtoModID_ProtoModID_MIN = stRetUseEquipSkillBook_ProtoModID_ModID;
const stRetUseEquipSkillBook_ProtoModID stRetUseEquipSkillBook_ProtoModID_ProtoModID_MAX = stRetUseEquipSkillBook_ProtoModID_ModID;
const int stRetUseEquipSkillBook_ProtoModID_ProtoModID_ARRAYSIZE = stRetUseEquipSkillBook_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseEquipSkillBook_ProtoModID_descriptor();
inline const ::std::string& stRetUseEquipSkillBook_ProtoModID_Name(stRetUseEquipSkillBook_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseEquipSkillBook_ProtoModID_descriptor(), value);
}
inline bool stRetUseEquipSkillBook_ProtoModID_Parse(
    const ::std::string& name, stRetUseEquipSkillBook_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseEquipSkillBook_ProtoModID>(
    stRetUseEquipSkillBook_ProtoModID_descriptor(), name, value);
}
enum stRetUseEquipSkillBook_ProtoFunID {
  stRetUseEquipSkillBook_ProtoFunID_FunID = 146
};
bool stRetUseEquipSkillBook_ProtoFunID_IsValid(int value);
const stRetUseEquipSkillBook_ProtoFunID stRetUseEquipSkillBook_ProtoFunID_ProtoFunID_MIN = stRetUseEquipSkillBook_ProtoFunID_FunID;
const stRetUseEquipSkillBook_ProtoFunID stRetUseEquipSkillBook_ProtoFunID_ProtoFunID_MAX = stRetUseEquipSkillBook_ProtoFunID_FunID;
const int stRetUseEquipSkillBook_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetUseEquipSkillBook_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetUseEquipSkillBook_ProtoFunID_descriptor();
inline const ::std::string& stRetUseEquipSkillBook_ProtoFunID_Name(stRetUseEquipSkillBook_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetUseEquipSkillBook_ProtoFunID_descriptor(), value);
}
inline bool stRetUseEquipSkillBook_ProtoFunID_Parse(
    const ::std::string& name, stRetUseEquipSkillBook_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetUseEquipSkillBook_ProtoFunID>(
    stRetUseEquipSkillBook_ProtoFunID_descriptor(), name, value);
}
enum stReqBreakEquip_ProtoModID {
  stReqBreakEquip_ProtoModID_ModID = 2
};
bool stReqBreakEquip_ProtoModID_IsValid(int value);
const stReqBreakEquip_ProtoModID stReqBreakEquip_ProtoModID_ProtoModID_MIN = stReqBreakEquip_ProtoModID_ModID;
const stReqBreakEquip_ProtoModID stReqBreakEquip_ProtoModID_ProtoModID_MAX = stReqBreakEquip_ProtoModID_ModID;
const int stReqBreakEquip_ProtoModID_ProtoModID_ARRAYSIZE = stReqBreakEquip_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBreakEquip_ProtoModID_descriptor();
inline const ::std::string& stReqBreakEquip_ProtoModID_Name(stReqBreakEquip_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBreakEquip_ProtoModID_descriptor(), value);
}
inline bool stReqBreakEquip_ProtoModID_Parse(
    const ::std::string& name, stReqBreakEquip_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBreakEquip_ProtoModID>(
    stReqBreakEquip_ProtoModID_descriptor(), name, value);
}
enum stReqBreakEquip_ProtoFunID {
  stReqBreakEquip_ProtoFunID_FunID = 147
};
bool stReqBreakEquip_ProtoFunID_IsValid(int value);
const stReqBreakEquip_ProtoFunID stReqBreakEquip_ProtoFunID_ProtoFunID_MIN = stReqBreakEquip_ProtoFunID_FunID;
const stReqBreakEquip_ProtoFunID stReqBreakEquip_ProtoFunID_ProtoFunID_MAX = stReqBreakEquip_ProtoFunID_FunID;
const int stReqBreakEquip_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBreakEquip_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBreakEquip_ProtoFunID_descriptor();
inline const ::std::string& stReqBreakEquip_ProtoFunID_Name(stReqBreakEquip_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBreakEquip_ProtoFunID_descriptor(), value);
}
inline bool stReqBreakEquip_ProtoFunID_Parse(
    const ::std::string& name, stReqBreakEquip_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBreakEquip_ProtoFunID>(
    stReqBreakEquip_ProtoFunID_descriptor(), name, value);
}
enum stBreakEquipResult_eResult {
  stBreakEquipResult_eResult_eSUCCESS = 1,
  stBreakEquipResult_eResult_eEQUIP_NOT_EXIST = 2,
  stBreakEquipResult_eResult_eINNER_ERROR = 3,
  stBreakEquipResult_eResult_eGOLDCOIN_NOT_ENOUGH = 4,
  stBreakEquipResult_eResult_eITEM_NOT_ENOUGH = 5,
  stBreakEquipResult_eResult_eRAISE_LV_LIMIT = 6,
  stBreakEquipResult_eResult_eFULL_LV = 7,
  stBreakEquipResult_eResult_eITEM_NOT_ORANGE = 8
};
bool stBreakEquipResult_eResult_IsValid(int value);
const stBreakEquipResult_eResult stBreakEquipResult_eResult_eResult_MIN = stBreakEquipResult_eResult_eSUCCESS;
const stBreakEquipResult_eResult stBreakEquipResult_eResult_eResult_MAX = stBreakEquipResult_eResult_eITEM_NOT_ORANGE;
const int stBreakEquipResult_eResult_eResult_ARRAYSIZE = stBreakEquipResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBreakEquipResult_eResult_descriptor();
inline const ::std::string& stBreakEquipResult_eResult_Name(stBreakEquipResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBreakEquipResult_eResult_descriptor(), value);
}
inline bool stBreakEquipResult_eResult_Parse(
    const ::std::string& name, stBreakEquipResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBreakEquipResult_eResult>(
    stBreakEquipResult_eResult_descriptor(), name, value);
}
enum stBreakEquipResult_ProtoModID {
  stBreakEquipResult_ProtoModID_ModID = 2
};
bool stBreakEquipResult_ProtoModID_IsValid(int value);
const stBreakEquipResult_ProtoModID stBreakEquipResult_ProtoModID_ProtoModID_MIN = stBreakEquipResult_ProtoModID_ModID;
const stBreakEquipResult_ProtoModID stBreakEquipResult_ProtoModID_ProtoModID_MAX = stBreakEquipResult_ProtoModID_ModID;
const int stBreakEquipResult_ProtoModID_ProtoModID_ARRAYSIZE = stBreakEquipResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBreakEquipResult_ProtoModID_descriptor();
inline const ::std::string& stBreakEquipResult_ProtoModID_Name(stBreakEquipResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBreakEquipResult_ProtoModID_descriptor(), value);
}
inline bool stBreakEquipResult_ProtoModID_Parse(
    const ::std::string& name, stBreakEquipResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBreakEquipResult_ProtoModID>(
    stBreakEquipResult_ProtoModID_descriptor(), name, value);
}
enum stBreakEquipResult_ProtoFunID {
  stBreakEquipResult_ProtoFunID_FunID = 148
};
bool stBreakEquipResult_ProtoFunID_IsValid(int value);
const stBreakEquipResult_ProtoFunID stBreakEquipResult_ProtoFunID_ProtoFunID_MIN = stBreakEquipResult_ProtoFunID_FunID;
const stBreakEquipResult_ProtoFunID stBreakEquipResult_ProtoFunID_ProtoFunID_MAX = stBreakEquipResult_ProtoFunID_FunID;
const int stBreakEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBreakEquipResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBreakEquipResult_ProtoFunID_descriptor();
inline const ::std::string& stBreakEquipResult_ProtoFunID_Name(stBreakEquipResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBreakEquipResult_ProtoFunID_descriptor(), value);
}
inline bool stBreakEquipResult_ProtoFunID_Parse(
    const ::std::string& name, stBreakEquipResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBreakEquipResult_ProtoFunID>(
    stBreakEquipResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRecastHero_ProtoModID {
  stReqRecastHero_ProtoModID_ModID = 2
};
bool stReqRecastHero_ProtoModID_IsValid(int value);
const stReqRecastHero_ProtoModID stReqRecastHero_ProtoModID_ProtoModID_MIN = stReqRecastHero_ProtoModID_ModID;
const stReqRecastHero_ProtoModID stReqRecastHero_ProtoModID_ProtoModID_MAX = stReqRecastHero_ProtoModID_ModID;
const int stReqRecastHero_ProtoModID_ProtoModID_ARRAYSIZE = stReqRecastHero_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecastHero_ProtoModID_descriptor();
inline const ::std::string& stReqRecastHero_ProtoModID_Name(stReqRecastHero_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecastHero_ProtoModID_descriptor(), value);
}
inline bool stReqRecastHero_ProtoModID_Parse(
    const ::std::string& name, stReqRecastHero_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecastHero_ProtoModID>(
    stReqRecastHero_ProtoModID_descriptor(), name, value);
}
enum stReqRecastHero_ProtoFunID {
  stReqRecastHero_ProtoFunID_FunID = 149
};
bool stReqRecastHero_ProtoFunID_IsValid(int value);
const stReqRecastHero_ProtoFunID stReqRecastHero_ProtoFunID_ProtoFunID_MIN = stReqRecastHero_ProtoFunID_FunID;
const stReqRecastHero_ProtoFunID stReqRecastHero_ProtoFunID_ProtoFunID_MAX = stReqRecastHero_ProtoFunID_FunID;
const int stReqRecastHero_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRecastHero_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecastHero_ProtoFunID_descriptor();
inline const ::std::string& stReqRecastHero_ProtoFunID_Name(stReqRecastHero_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecastHero_ProtoFunID_descriptor(), value);
}
inline bool stReqRecastHero_ProtoFunID_Parse(
    const ::std::string& name, stReqRecastHero_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecastHero_ProtoFunID>(
    stReqRecastHero_ProtoFunID_descriptor(), name, value);
}
enum stRecastHeroResult_Result {
  stRecastHeroResult_Result_SUCCESS = 1,
  stRecastHeroResult_Result_DIAMOND_NOT_ENOUGH = 2,
  stRecastHeroResult_Result_BAG_FULL = 3,
  stRecastHeroResult_Result_CANNT_SMELT = 4,
  stRecastHeroResult_Result_HERO_NOT_EXIST = 5,
  stRecastHeroResult_Result_INNER_ERROR = 6
};
bool stRecastHeroResult_Result_IsValid(int value);
const stRecastHeroResult_Result stRecastHeroResult_Result_Result_MIN = stRecastHeroResult_Result_SUCCESS;
const stRecastHeroResult_Result stRecastHeroResult_Result_Result_MAX = stRecastHeroResult_Result_INNER_ERROR;
const int stRecastHeroResult_Result_Result_ARRAYSIZE = stRecastHeroResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRecastHeroResult_Result_descriptor();
inline const ::std::string& stRecastHeroResult_Result_Name(stRecastHeroResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRecastHeroResult_Result_descriptor(), value);
}
inline bool stRecastHeroResult_Result_Parse(
    const ::std::string& name, stRecastHeroResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRecastHeroResult_Result>(
    stRecastHeroResult_Result_descriptor(), name, value);
}
enum stRecastHeroResult_ProtoModID {
  stRecastHeroResult_ProtoModID_ModID = 2
};
bool stRecastHeroResult_ProtoModID_IsValid(int value);
const stRecastHeroResult_ProtoModID stRecastHeroResult_ProtoModID_ProtoModID_MIN = stRecastHeroResult_ProtoModID_ModID;
const stRecastHeroResult_ProtoModID stRecastHeroResult_ProtoModID_ProtoModID_MAX = stRecastHeroResult_ProtoModID_ModID;
const int stRecastHeroResult_ProtoModID_ProtoModID_ARRAYSIZE = stRecastHeroResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRecastHeroResult_ProtoModID_descriptor();
inline const ::std::string& stRecastHeroResult_ProtoModID_Name(stRecastHeroResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRecastHeroResult_ProtoModID_descriptor(), value);
}
inline bool stRecastHeroResult_ProtoModID_Parse(
    const ::std::string& name, stRecastHeroResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRecastHeroResult_ProtoModID>(
    stRecastHeroResult_ProtoModID_descriptor(), name, value);
}
enum stRecastHeroResult_ProtoFunID {
  stRecastHeroResult_ProtoFunID_FunID = 150
};
bool stRecastHeroResult_ProtoFunID_IsValid(int value);
const stRecastHeroResult_ProtoFunID stRecastHeroResult_ProtoFunID_ProtoFunID_MIN = stRecastHeroResult_ProtoFunID_FunID;
const stRecastHeroResult_ProtoFunID stRecastHeroResult_ProtoFunID_ProtoFunID_MAX = stRecastHeroResult_ProtoFunID_FunID;
const int stRecastHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRecastHeroResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRecastHeroResult_ProtoFunID_descriptor();
inline const ::std::string& stRecastHeroResult_ProtoFunID_Name(stRecastHeroResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRecastHeroResult_ProtoFunID_descriptor(), value);
}
inline bool stRecastHeroResult_ProtoFunID_Parse(
    const ::std::string& name, stRecastHeroResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRecastHeroResult_ProtoFunID>(
    stRecastHeroResult_ProtoFunID_descriptor(), name, value);
}
enum stReqChangeName_ProtoModID {
  stReqChangeName_ProtoModID_ModID = 2
};
bool stReqChangeName_ProtoModID_IsValid(int value);
const stReqChangeName_ProtoModID stReqChangeName_ProtoModID_ProtoModID_MIN = stReqChangeName_ProtoModID_ModID;
const stReqChangeName_ProtoModID stReqChangeName_ProtoModID_ProtoModID_MAX = stReqChangeName_ProtoModID_ModID;
const int stReqChangeName_ProtoModID_ProtoModID_ARRAYSIZE = stReqChangeName_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangeName_ProtoModID_descriptor();
inline const ::std::string& stReqChangeName_ProtoModID_Name(stReqChangeName_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangeName_ProtoModID_descriptor(), value);
}
inline bool stReqChangeName_ProtoModID_Parse(
    const ::std::string& name, stReqChangeName_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangeName_ProtoModID>(
    stReqChangeName_ProtoModID_descriptor(), name, value);
}
enum stReqChangeName_ProtoFunID {
  stReqChangeName_ProtoFunID_FunID = 151
};
bool stReqChangeName_ProtoFunID_IsValid(int value);
const stReqChangeName_ProtoFunID stReqChangeName_ProtoFunID_ProtoFunID_MIN = stReqChangeName_ProtoFunID_FunID;
const stReqChangeName_ProtoFunID stReqChangeName_ProtoFunID_ProtoFunID_MAX = stReqChangeName_ProtoFunID_FunID;
const int stReqChangeName_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChangeName_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangeName_ProtoFunID_descriptor();
inline const ::std::string& stReqChangeName_ProtoFunID_Name(stReqChangeName_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangeName_ProtoFunID_descriptor(), value);
}
inline bool stReqChangeName_ProtoFunID_Parse(
    const ::std::string& name, stReqChangeName_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangeName_ProtoFunID>(
    stReqChangeName_ProtoFunID_descriptor(), name, value);
}
enum stChangeNameResult_eResult {
  stChangeNameResult_eResult_eSuccess = 1,
  stChangeNameResult_eResult_eNot_Enough_Diamond = 2,
  stChangeNameResult_eResult_eName_Occupied = 3
};
bool stChangeNameResult_eResult_IsValid(int value);
const stChangeNameResult_eResult stChangeNameResult_eResult_eResult_MIN = stChangeNameResult_eResult_eSuccess;
const stChangeNameResult_eResult stChangeNameResult_eResult_eResult_MAX = stChangeNameResult_eResult_eName_Occupied;
const int stChangeNameResult_eResult_eResult_ARRAYSIZE = stChangeNameResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeNameResult_eResult_descriptor();
inline const ::std::string& stChangeNameResult_eResult_Name(stChangeNameResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeNameResult_eResult_descriptor(), value);
}
inline bool stChangeNameResult_eResult_Parse(
    const ::std::string& name, stChangeNameResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeNameResult_eResult>(
    stChangeNameResult_eResult_descriptor(), name, value);
}
enum stChangeNameResult_ProtoModID {
  stChangeNameResult_ProtoModID_ModID = 2
};
bool stChangeNameResult_ProtoModID_IsValid(int value);
const stChangeNameResult_ProtoModID stChangeNameResult_ProtoModID_ProtoModID_MIN = stChangeNameResult_ProtoModID_ModID;
const stChangeNameResult_ProtoModID stChangeNameResult_ProtoModID_ProtoModID_MAX = stChangeNameResult_ProtoModID_ModID;
const int stChangeNameResult_ProtoModID_ProtoModID_ARRAYSIZE = stChangeNameResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeNameResult_ProtoModID_descriptor();
inline const ::std::string& stChangeNameResult_ProtoModID_Name(stChangeNameResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeNameResult_ProtoModID_descriptor(), value);
}
inline bool stChangeNameResult_ProtoModID_Parse(
    const ::std::string& name, stChangeNameResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeNameResult_ProtoModID>(
    stChangeNameResult_ProtoModID_descriptor(), name, value);
}
enum stChangeNameResult_ProtoFunID {
  stChangeNameResult_ProtoFunID_FunID = 152
};
bool stChangeNameResult_ProtoFunID_IsValid(int value);
const stChangeNameResult_ProtoFunID stChangeNameResult_ProtoFunID_ProtoFunID_MIN = stChangeNameResult_ProtoFunID_FunID;
const stChangeNameResult_ProtoFunID stChangeNameResult_ProtoFunID_ProtoFunID_MAX = stChangeNameResult_ProtoFunID_FunID;
const int stChangeNameResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stChangeNameResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangeNameResult_ProtoFunID_descriptor();
inline const ::std::string& stChangeNameResult_ProtoFunID_Name(stChangeNameResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangeNameResult_ProtoFunID_descriptor(), value);
}
inline bool stChangeNameResult_ProtoFunID_Parse(
    const ::std::string& name, stChangeNameResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangeNameResult_ProtoFunID>(
    stChangeNameResult_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenBuyGoldWindow_ProtoModID {
  stReqOpenBuyGoldWindow_ProtoModID_ModID = 2
};
bool stReqOpenBuyGoldWindow_ProtoModID_IsValid(int value);
const stReqOpenBuyGoldWindow_ProtoModID stReqOpenBuyGoldWindow_ProtoModID_ProtoModID_MIN = stReqOpenBuyGoldWindow_ProtoModID_ModID;
const stReqOpenBuyGoldWindow_ProtoModID stReqOpenBuyGoldWindow_ProtoModID_ProtoModID_MAX = stReqOpenBuyGoldWindow_ProtoModID_ModID;
const int stReqOpenBuyGoldWindow_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenBuyGoldWindow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenBuyGoldWindow_ProtoModID_descriptor();
inline const ::std::string& stReqOpenBuyGoldWindow_ProtoModID_Name(stReqOpenBuyGoldWindow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenBuyGoldWindow_ProtoModID_descriptor(), value);
}
inline bool stReqOpenBuyGoldWindow_ProtoModID_Parse(
    const ::std::string& name, stReqOpenBuyGoldWindow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenBuyGoldWindow_ProtoModID>(
    stReqOpenBuyGoldWindow_ProtoModID_descriptor(), name, value);
}
enum stReqOpenBuyGoldWindow_ProtoFunID {
  stReqOpenBuyGoldWindow_ProtoFunID_FunID = 153
};
bool stReqOpenBuyGoldWindow_ProtoFunID_IsValid(int value);
const stReqOpenBuyGoldWindow_ProtoFunID stReqOpenBuyGoldWindow_ProtoFunID_ProtoFunID_MIN = stReqOpenBuyGoldWindow_ProtoFunID_FunID;
const stReqOpenBuyGoldWindow_ProtoFunID stReqOpenBuyGoldWindow_ProtoFunID_ProtoFunID_MAX = stReqOpenBuyGoldWindow_ProtoFunID_FunID;
const int stReqOpenBuyGoldWindow_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenBuyGoldWindow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenBuyGoldWindow_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenBuyGoldWindow_ProtoFunID_Name(stReqOpenBuyGoldWindow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenBuyGoldWindow_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenBuyGoldWindow_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenBuyGoldWindow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenBuyGoldWindow_ProtoFunID>(
    stReqOpenBuyGoldWindow_ProtoFunID_descriptor(), name, value);
}
enum stOpenBuyGoldWindowResult_ProtoModID {
  stOpenBuyGoldWindowResult_ProtoModID_ModID = 2
};
bool stOpenBuyGoldWindowResult_ProtoModID_IsValid(int value);
const stOpenBuyGoldWindowResult_ProtoModID stOpenBuyGoldWindowResult_ProtoModID_ProtoModID_MIN = stOpenBuyGoldWindowResult_ProtoModID_ModID;
const stOpenBuyGoldWindowResult_ProtoModID stOpenBuyGoldWindowResult_ProtoModID_ProtoModID_MAX = stOpenBuyGoldWindowResult_ProtoModID_ModID;
const int stOpenBuyGoldWindowResult_ProtoModID_ProtoModID_ARRAYSIZE = stOpenBuyGoldWindowResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenBuyGoldWindowResult_ProtoModID_descriptor();
inline const ::std::string& stOpenBuyGoldWindowResult_ProtoModID_Name(stOpenBuyGoldWindowResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenBuyGoldWindowResult_ProtoModID_descriptor(), value);
}
inline bool stOpenBuyGoldWindowResult_ProtoModID_Parse(
    const ::std::string& name, stOpenBuyGoldWindowResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenBuyGoldWindowResult_ProtoModID>(
    stOpenBuyGoldWindowResult_ProtoModID_descriptor(), name, value);
}
enum stOpenBuyGoldWindowResult_ProtoFunID {
  stOpenBuyGoldWindowResult_ProtoFunID_FunID = 154
};
bool stOpenBuyGoldWindowResult_ProtoFunID_IsValid(int value);
const stOpenBuyGoldWindowResult_ProtoFunID stOpenBuyGoldWindowResult_ProtoFunID_ProtoFunID_MIN = stOpenBuyGoldWindowResult_ProtoFunID_FunID;
const stOpenBuyGoldWindowResult_ProtoFunID stOpenBuyGoldWindowResult_ProtoFunID_ProtoFunID_MAX = stOpenBuyGoldWindowResult_ProtoFunID_FunID;
const int stOpenBuyGoldWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpenBuyGoldWindowResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenBuyGoldWindowResult_ProtoFunID_descriptor();
inline const ::std::string& stOpenBuyGoldWindowResult_ProtoFunID_Name(stOpenBuyGoldWindowResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenBuyGoldWindowResult_ProtoFunID_descriptor(), value);
}
inline bool stOpenBuyGoldWindowResult_ProtoFunID_Parse(
    const ::std::string& name, stOpenBuyGoldWindowResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenBuyGoldWindowResult_ProtoFunID>(
    stOpenBuyGoldWindowResult_ProtoFunID_descriptor(), name, value);
}
enum stReqBuyGold_ProtoModID {
  stReqBuyGold_ProtoModID_ModID = 2
};
bool stReqBuyGold_ProtoModID_IsValid(int value);
const stReqBuyGold_ProtoModID stReqBuyGold_ProtoModID_ProtoModID_MIN = stReqBuyGold_ProtoModID_ModID;
const stReqBuyGold_ProtoModID stReqBuyGold_ProtoModID_ProtoModID_MAX = stReqBuyGold_ProtoModID_ModID;
const int stReqBuyGold_ProtoModID_ProtoModID_ARRAYSIZE = stReqBuyGold_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyGold_ProtoModID_descriptor();
inline const ::std::string& stReqBuyGold_ProtoModID_Name(stReqBuyGold_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyGold_ProtoModID_descriptor(), value);
}
inline bool stReqBuyGold_ProtoModID_Parse(
    const ::std::string& name, stReqBuyGold_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyGold_ProtoModID>(
    stReqBuyGold_ProtoModID_descriptor(), name, value);
}
enum stReqBuyGold_ProtoFunID {
  stReqBuyGold_ProtoFunID_FunID = 155
};
bool stReqBuyGold_ProtoFunID_IsValid(int value);
const stReqBuyGold_ProtoFunID stReqBuyGold_ProtoFunID_ProtoFunID_MIN = stReqBuyGold_ProtoFunID_FunID;
const stReqBuyGold_ProtoFunID stReqBuyGold_ProtoFunID_ProtoFunID_MAX = stReqBuyGold_ProtoFunID_FunID;
const int stReqBuyGold_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBuyGold_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyGold_ProtoFunID_descriptor();
inline const ::std::string& stReqBuyGold_ProtoFunID_Name(stReqBuyGold_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyGold_ProtoFunID_descriptor(), value);
}
inline bool stReqBuyGold_ProtoFunID_Parse(
    const ::std::string& name, stReqBuyGold_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyGold_ProtoFunID>(
    stReqBuyGold_ProtoFunID_descriptor(), name, value);
}
enum stBuyGoldResult_eResult {
  stBuyGoldResult_eResult_eSuccess = 1,
  stBuyGoldResult_eResult_eInner_Cfg_Error = 3,
  stBuyGoldResult_eResult_eGoldCoin_Not_Enough = 4,
  stBuyGoldResult_eResult_eRole_Vip_Limit = 5
};
bool stBuyGoldResult_eResult_IsValid(int value);
const stBuyGoldResult_eResult stBuyGoldResult_eResult_eResult_MIN = stBuyGoldResult_eResult_eSuccess;
const stBuyGoldResult_eResult stBuyGoldResult_eResult_eResult_MAX = stBuyGoldResult_eResult_eRole_Vip_Limit;
const int stBuyGoldResult_eResult_eResult_ARRAYSIZE = stBuyGoldResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyGoldResult_eResult_descriptor();
inline const ::std::string& stBuyGoldResult_eResult_Name(stBuyGoldResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyGoldResult_eResult_descriptor(), value);
}
inline bool stBuyGoldResult_eResult_Parse(
    const ::std::string& name, stBuyGoldResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyGoldResult_eResult>(
    stBuyGoldResult_eResult_descriptor(), name, value);
}
enum stBuyGoldResult_ProtoModID {
  stBuyGoldResult_ProtoModID_ModID = 2
};
bool stBuyGoldResult_ProtoModID_IsValid(int value);
const stBuyGoldResult_ProtoModID stBuyGoldResult_ProtoModID_ProtoModID_MIN = stBuyGoldResult_ProtoModID_ModID;
const stBuyGoldResult_ProtoModID stBuyGoldResult_ProtoModID_ProtoModID_MAX = stBuyGoldResult_ProtoModID_ModID;
const int stBuyGoldResult_ProtoModID_ProtoModID_ARRAYSIZE = stBuyGoldResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyGoldResult_ProtoModID_descriptor();
inline const ::std::string& stBuyGoldResult_ProtoModID_Name(stBuyGoldResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyGoldResult_ProtoModID_descriptor(), value);
}
inline bool stBuyGoldResult_ProtoModID_Parse(
    const ::std::string& name, stBuyGoldResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyGoldResult_ProtoModID>(
    stBuyGoldResult_ProtoModID_descriptor(), name, value);
}
enum stBuyGoldResult_ProtoFunID {
  stBuyGoldResult_ProtoFunID_FunID = 156
};
bool stBuyGoldResult_ProtoFunID_IsValid(int value);
const stBuyGoldResult_ProtoFunID stBuyGoldResult_ProtoFunID_ProtoFunID_MIN = stBuyGoldResult_ProtoFunID_FunID;
const stBuyGoldResult_ProtoFunID stBuyGoldResult_ProtoFunID_ProtoFunID_MAX = stBuyGoldResult_ProtoFunID_FunID;
const int stBuyGoldResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyGoldResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyGoldResult_ProtoFunID_descriptor();
inline const ::std::string& stBuyGoldResult_ProtoFunID_Name(stBuyGoldResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyGoldResult_ProtoFunID_descriptor(), value);
}
inline bool stBuyGoldResult_ProtoFunID_Parse(
    const ::std::string& name, stBuyGoldResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyGoldResult_ProtoFunID>(
    stBuyGoldResult_ProtoFunID_descriptor(), name, value);
}
enum stSendImpactHeroInfo_ProtoModID {
  stSendImpactHeroInfo_ProtoModID_ModID = 2
};
bool stSendImpactHeroInfo_ProtoModID_IsValid(int value);
const stSendImpactHeroInfo_ProtoModID stSendImpactHeroInfo_ProtoModID_ProtoModID_MIN = stSendImpactHeroInfo_ProtoModID_ModID;
const stSendImpactHeroInfo_ProtoModID stSendImpactHeroInfo_ProtoModID_ProtoModID_MAX = stSendImpactHeroInfo_ProtoModID_ModID;
const int stSendImpactHeroInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSendImpactHeroInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendImpactHeroInfo_ProtoModID_descriptor();
inline const ::std::string& stSendImpactHeroInfo_ProtoModID_Name(stSendImpactHeroInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendImpactHeroInfo_ProtoModID_descriptor(), value);
}
inline bool stSendImpactHeroInfo_ProtoModID_Parse(
    const ::std::string& name, stSendImpactHeroInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendImpactHeroInfo_ProtoModID>(
    stSendImpactHeroInfo_ProtoModID_descriptor(), name, value);
}
enum stSendImpactHeroInfo_ProtoFunID {
  stSendImpactHeroInfo_ProtoFunID_FunID = 157
};
bool stSendImpactHeroInfo_ProtoFunID_IsValid(int value);
const stSendImpactHeroInfo_ProtoFunID stSendImpactHeroInfo_ProtoFunID_ProtoFunID_MIN = stSendImpactHeroInfo_ProtoFunID_FunID;
const stSendImpactHeroInfo_ProtoFunID stSendImpactHeroInfo_ProtoFunID_ProtoFunID_MAX = stSendImpactHeroInfo_ProtoFunID_FunID;
const int stSendImpactHeroInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendImpactHeroInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendImpactHeroInfo_ProtoFunID_descriptor();
inline const ::std::string& stSendImpactHeroInfo_ProtoFunID_Name(stSendImpactHeroInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendImpactHeroInfo_ProtoFunID_descriptor(), value);
}
inline bool stSendImpactHeroInfo_ProtoFunID_Parse(
    const ::std::string& name, stSendImpactHeroInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendImpactHeroInfo_ProtoFunID>(
    stSendImpactHeroInfo_ProtoFunID_descriptor(), name, value);
}
enum stExpBookLevelLimit_eResult {
  stExpBookLevelLimit_eResult_LV_TOO_LOW = 1,
  stExpBookLevelLimit_eResult_LV_TOO_HIGH = 2
};
bool stExpBookLevelLimit_eResult_IsValid(int value);
const stExpBookLevelLimit_eResult stExpBookLevelLimit_eResult_eResult_MIN = stExpBookLevelLimit_eResult_LV_TOO_LOW;
const stExpBookLevelLimit_eResult stExpBookLevelLimit_eResult_eResult_MAX = stExpBookLevelLimit_eResult_LV_TOO_HIGH;
const int stExpBookLevelLimit_eResult_eResult_ARRAYSIZE = stExpBookLevelLimit_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpBookLevelLimit_eResult_descriptor();
inline const ::std::string& stExpBookLevelLimit_eResult_Name(stExpBookLevelLimit_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpBookLevelLimit_eResult_descriptor(), value);
}
inline bool stExpBookLevelLimit_eResult_Parse(
    const ::std::string& name, stExpBookLevelLimit_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpBookLevelLimit_eResult>(
    stExpBookLevelLimit_eResult_descriptor(), name, value);
}
enum stExpBookLevelLimit_ProtoModID {
  stExpBookLevelLimit_ProtoModID_ModID = 2
};
bool stExpBookLevelLimit_ProtoModID_IsValid(int value);
const stExpBookLevelLimit_ProtoModID stExpBookLevelLimit_ProtoModID_ProtoModID_MIN = stExpBookLevelLimit_ProtoModID_ModID;
const stExpBookLevelLimit_ProtoModID stExpBookLevelLimit_ProtoModID_ProtoModID_MAX = stExpBookLevelLimit_ProtoModID_ModID;
const int stExpBookLevelLimit_ProtoModID_ProtoModID_ARRAYSIZE = stExpBookLevelLimit_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpBookLevelLimit_ProtoModID_descriptor();
inline const ::std::string& stExpBookLevelLimit_ProtoModID_Name(stExpBookLevelLimit_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpBookLevelLimit_ProtoModID_descriptor(), value);
}
inline bool stExpBookLevelLimit_ProtoModID_Parse(
    const ::std::string& name, stExpBookLevelLimit_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpBookLevelLimit_ProtoModID>(
    stExpBookLevelLimit_ProtoModID_descriptor(), name, value);
}
enum stExpBookLevelLimit_ProtoFunID {
  stExpBookLevelLimit_ProtoFunID_FunID = 158
};
bool stExpBookLevelLimit_ProtoFunID_IsValid(int value);
const stExpBookLevelLimit_ProtoFunID stExpBookLevelLimit_ProtoFunID_ProtoFunID_MIN = stExpBookLevelLimit_ProtoFunID_FunID;
const stExpBookLevelLimit_ProtoFunID stExpBookLevelLimit_ProtoFunID_ProtoFunID_MAX = stExpBookLevelLimit_ProtoFunID_FunID;
const int stExpBookLevelLimit_ProtoFunID_ProtoFunID_ARRAYSIZE = stExpBookLevelLimit_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stExpBookLevelLimit_ProtoFunID_descriptor();
inline const ::std::string& stExpBookLevelLimit_ProtoFunID_Name(stExpBookLevelLimit_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stExpBookLevelLimit_ProtoFunID_descriptor(), value);
}
inline bool stExpBookLevelLimit_ProtoFunID_Parse(
    const ::std::string& name, stExpBookLevelLimit_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stExpBookLevelLimit_ProtoFunID>(
    stExpBookLevelLimit_ProtoFunID_descriptor(), name, value);
}
enum stNotifyPubUniqueID_ProtoModID {
  stNotifyPubUniqueID_ProtoModID_ModID = 2
};
bool stNotifyPubUniqueID_ProtoModID_IsValid(int value);
const stNotifyPubUniqueID_ProtoModID stNotifyPubUniqueID_ProtoModID_ProtoModID_MIN = stNotifyPubUniqueID_ProtoModID_ModID;
const stNotifyPubUniqueID_ProtoModID stNotifyPubUniqueID_ProtoModID_ProtoModID_MAX = stNotifyPubUniqueID_ProtoModID_ModID;
const int stNotifyPubUniqueID_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyPubUniqueID_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyPubUniqueID_ProtoModID_descriptor();
inline const ::std::string& stNotifyPubUniqueID_ProtoModID_Name(stNotifyPubUniqueID_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyPubUniqueID_ProtoModID_descriptor(), value);
}
inline bool stNotifyPubUniqueID_ProtoModID_Parse(
    const ::std::string& name, stNotifyPubUniqueID_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyPubUniqueID_ProtoModID>(
    stNotifyPubUniqueID_ProtoModID_descriptor(), name, value);
}
enum stNotifyPubUniqueID_ProtoFunID {
  stNotifyPubUniqueID_ProtoFunID_FunID = 159
};
bool stNotifyPubUniqueID_ProtoFunID_IsValid(int value);
const stNotifyPubUniqueID_ProtoFunID stNotifyPubUniqueID_ProtoFunID_ProtoFunID_MIN = stNotifyPubUniqueID_ProtoFunID_FunID;
const stNotifyPubUniqueID_ProtoFunID stNotifyPubUniqueID_ProtoFunID_ProtoFunID_MAX = stNotifyPubUniqueID_ProtoFunID_FunID;
const int stNotifyPubUniqueID_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyPubUniqueID_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyPubUniqueID_ProtoFunID_descriptor();
inline const ::std::string& stNotifyPubUniqueID_ProtoFunID_Name(stNotifyPubUniqueID_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyPubUniqueID_ProtoFunID_descriptor(), value);
}
inline bool stNotifyPubUniqueID_ProtoFunID_Parse(
    const ::std::string& name, stNotifyPubUniqueID_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyPubUniqueID_ProtoFunID>(
    stNotifyPubUniqueID_ProtoFunID_descriptor(), name, value);
}
enum stReqEnchant_ProtoModID {
  stReqEnchant_ProtoModID_ModID = 2
};
bool stReqEnchant_ProtoModID_IsValid(int value);
const stReqEnchant_ProtoModID stReqEnchant_ProtoModID_ProtoModID_MIN = stReqEnchant_ProtoModID_ModID;
const stReqEnchant_ProtoModID stReqEnchant_ProtoModID_ProtoModID_MAX = stReqEnchant_ProtoModID_ModID;
const int stReqEnchant_ProtoModID_ProtoModID_ARRAYSIZE = stReqEnchant_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnchant_ProtoModID_descriptor();
inline const ::std::string& stReqEnchant_ProtoModID_Name(stReqEnchant_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnchant_ProtoModID_descriptor(), value);
}
inline bool stReqEnchant_ProtoModID_Parse(
    const ::std::string& name, stReqEnchant_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnchant_ProtoModID>(
    stReqEnchant_ProtoModID_descriptor(), name, value);
}
enum stReqEnchant_ProtoFunID {
  stReqEnchant_ProtoFunID_FunID = 160
};
bool stReqEnchant_ProtoFunID_IsValid(int value);
const stReqEnchant_ProtoFunID stReqEnchant_ProtoFunID_ProtoFunID_MIN = stReqEnchant_ProtoFunID_FunID;
const stReqEnchant_ProtoFunID stReqEnchant_ProtoFunID_ProtoFunID_MAX = stReqEnchant_ProtoFunID_FunID;
const int stReqEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEnchant_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnchant_ProtoFunID_descriptor();
inline const ::std::string& stReqEnchant_ProtoFunID_Name(stReqEnchant_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnchant_ProtoFunID_descriptor(), value);
}
inline bool stReqEnchant_ProtoFunID_Parse(
    const ::std::string& name, stReqEnchant_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnchant_ProtoFunID>(
    stReqEnchant_ProtoFunID_descriptor(), name, value);
}
enum stRetEnchant_eResult {
  stRetEnchant_eResult_eSuccess = 1,
  stRetEnchant_eResult_eGold_Less = 2,
  stRetEnchant_eResult_ePiece_Less = 3,
  stRetEnchant_eResult_eEnchant_Less = 4,
  stRetEnchant_eResult_eNo_Such_Fashion = 5,
  stRetEnchant_eResult_eEnchant_Locked = 6,
  stRetEnchant_eResult_ePiece_Wrong_Num = 7,
  stRetEnchant_eResult_eNo_Such_Config = 8,
  stRetEnchant_eResult_eMax_Prop_Num = 9,
  stRetEnchant_eResult_eMax_Enchant_Num = 10
};
bool stRetEnchant_eResult_IsValid(int value);
const stRetEnchant_eResult stRetEnchant_eResult_eResult_MIN = stRetEnchant_eResult_eSuccess;
const stRetEnchant_eResult stRetEnchant_eResult_eResult_MAX = stRetEnchant_eResult_eMax_Enchant_Num;
const int stRetEnchant_eResult_eResult_ARRAYSIZE = stRetEnchant_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetEnchant_eResult_descriptor();
inline const ::std::string& stRetEnchant_eResult_Name(stRetEnchant_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetEnchant_eResult_descriptor(), value);
}
inline bool stRetEnchant_eResult_Parse(
    const ::std::string& name, stRetEnchant_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetEnchant_eResult>(
    stRetEnchant_eResult_descriptor(), name, value);
}
enum stRetEnchant_ProtoModID {
  stRetEnchant_ProtoModID_ModID = 2
};
bool stRetEnchant_ProtoModID_IsValid(int value);
const stRetEnchant_ProtoModID stRetEnchant_ProtoModID_ProtoModID_MIN = stRetEnchant_ProtoModID_ModID;
const stRetEnchant_ProtoModID stRetEnchant_ProtoModID_ProtoModID_MAX = stRetEnchant_ProtoModID_ModID;
const int stRetEnchant_ProtoModID_ProtoModID_ARRAYSIZE = stRetEnchant_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetEnchant_ProtoModID_descriptor();
inline const ::std::string& stRetEnchant_ProtoModID_Name(stRetEnchant_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetEnchant_ProtoModID_descriptor(), value);
}
inline bool stRetEnchant_ProtoModID_Parse(
    const ::std::string& name, stRetEnchant_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetEnchant_ProtoModID>(
    stRetEnchant_ProtoModID_descriptor(), name, value);
}
enum stRetEnchant_ProtoFunID {
  stRetEnchant_ProtoFunID_FunID = 161
};
bool stRetEnchant_ProtoFunID_IsValid(int value);
const stRetEnchant_ProtoFunID stRetEnchant_ProtoFunID_ProtoFunID_MIN = stRetEnchant_ProtoFunID_FunID;
const stRetEnchant_ProtoFunID stRetEnchant_ProtoFunID_ProtoFunID_MAX = stRetEnchant_ProtoFunID_FunID;
const int stRetEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetEnchant_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetEnchant_ProtoFunID_descriptor();
inline const ::std::string& stRetEnchant_ProtoFunID_Name(stRetEnchant_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetEnchant_ProtoFunID_descriptor(), value);
}
inline bool stRetEnchant_ProtoFunID_Parse(
    const ::std::string& name, stRetEnchant_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetEnchant_ProtoFunID>(
    stRetEnchant_ProtoFunID_descriptor(), name, value);
}
enum stReqRecastEnchant_ProtoModID {
  stReqRecastEnchant_ProtoModID_ModID = 2
};
bool stReqRecastEnchant_ProtoModID_IsValid(int value);
const stReqRecastEnchant_ProtoModID stReqRecastEnchant_ProtoModID_ProtoModID_MIN = stReqRecastEnchant_ProtoModID_ModID;
const stReqRecastEnchant_ProtoModID stReqRecastEnchant_ProtoModID_ProtoModID_MAX = stReqRecastEnchant_ProtoModID_ModID;
const int stReqRecastEnchant_ProtoModID_ProtoModID_ARRAYSIZE = stReqRecastEnchant_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecastEnchant_ProtoModID_descriptor();
inline const ::std::string& stReqRecastEnchant_ProtoModID_Name(stReqRecastEnchant_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecastEnchant_ProtoModID_descriptor(), value);
}
inline bool stReqRecastEnchant_ProtoModID_Parse(
    const ::std::string& name, stReqRecastEnchant_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecastEnchant_ProtoModID>(
    stReqRecastEnchant_ProtoModID_descriptor(), name, value);
}
enum stReqRecastEnchant_ProtoFunID {
  stReqRecastEnchant_ProtoFunID_FunID = 162
};
bool stReqRecastEnchant_ProtoFunID_IsValid(int value);
const stReqRecastEnchant_ProtoFunID stReqRecastEnchant_ProtoFunID_ProtoFunID_MIN = stReqRecastEnchant_ProtoFunID_FunID;
const stReqRecastEnchant_ProtoFunID stReqRecastEnchant_ProtoFunID_ProtoFunID_MAX = stReqRecastEnchant_ProtoFunID_FunID;
const int stReqRecastEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRecastEnchant_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRecastEnchant_ProtoFunID_descriptor();
inline const ::std::string& stReqRecastEnchant_ProtoFunID_Name(stReqRecastEnchant_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRecastEnchant_ProtoFunID_descriptor(), value);
}
inline bool stReqRecastEnchant_ProtoFunID_Parse(
    const ::std::string& name, stReqRecastEnchant_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRecastEnchant_ProtoFunID>(
    stReqRecastEnchant_ProtoFunID_descriptor(), name, value);
}
enum stRetRecastEnchant_eResult {
  stRetRecastEnchant_eResult_eSuccess = 1,
  stRetRecastEnchant_eResult_eNo_Such_Fashion = 2,
  stRetRecastEnchant_eResult_eBag_Full = 3,
  stRetRecastEnchant_eResult_eLimited_Fashion = 4,
  stRetRecastEnchant_eResult_eDiamond_Less = 5
};
bool stRetRecastEnchant_eResult_IsValid(int value);
const stRetRecastEnchant_eResult stRetRecastEnchant_eResult_eResult_MIN = stRetRecastEnchant_eResult_eSuccess;
const stRetRecastEnchant_eResult stRetRecastEnchant_eResult_eResult_MAX = stRetRecastEnchant_eResult_eDiamond_Less;
const int stRetRecastEnchant_eResult_eResult_ARRAYSIZE = stRetRecastEnchant_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRecastEnchant_eResult_descriptor();
inline const ::std::string& stRetRecastEnchant_eResult_Name(stRetRecastEnchant_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRecastEnchant_eResult_descriptor(), value);
}
inline bool stRetRecastEnchant_eResult_Parse(
    const ::std::string& name, stRetRecastEnchant_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRecastEnchant_eResult>(
    stRetRecastEnchant_eResult_descriptor(), name, value);
}
enum stRetRecastEnchant_ProtoModID {
  stRetRecastEnchant_ProtoModID_ModID = 2
};
bool stRetRecastEnchant_ProtoModID_IsValid(int value);
const stRetRecastEnchant_ProtoModID stRetRecastEnchant_ProtoModID_ProtoModID_MIN = stRetRecastEnchant_ProtoModID_ModID;
const stRetRecastEnchant_ProtoModID stRetRecastEnchant_ProtoModID_ProtoModID_MAX = stRetRecastEnchant_ProtoModID_ModID;
const int stRetRecastEnchant_ProtoModID_ProtoModID_ARRAYSIZE = stRetRecastEnchant_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRecastEnchant_ProtoModID_descriptor();
inline const ::std::string& stRetRecastEnchant_ProtoModID_Name(stRetRecastEnchant_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRecastEnchant_ProtoModID_descriptor(), value);
}
inline bool stRetRecastEnchant_ProtoModID_Parse(
    const ::std::string& name, stRetRecastEnchant_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRecastEnchant_ProtoModID>(
    stRetRecastEnchant_ProtoModID_descriptor(), name, value);
}
enum stRetRecastEnchant_ProtoFunID {
  stRetRecastEnchant_ProtoFunID_FunID = 163
};
bool stRetRecastEnchant_ProtoFunID_IsValid(int value);
const stRetRecastEnchant_ProtoFunID stRetRecastEnchant_ProtoFunID_ProtoFunID_MIN = stRetRecastEnchant_ProtoFunID_FunID;
const stRetRecastEnchant_ProtoFunID stRetRecastEnchant_ProtoFunID_ProtoFunID_MAX = stRetRecastEnchant_ProtoFunID_FunID;
const int stRetRecastEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRecastEnchant_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRecastEnchant_ProtoFunID_descriptor();
inline const ::std::string& stRetRecastEnchant_ProtoFunID_Name(stRetRecastEnchant_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRecastEnchant_ProtoFunID_descriptor(), value);
}
inline bool stRetRecastEnchant_ProtoFunID_Parse(
    const ::std::string& name, stRetRecastEnchant_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRecastEnchant_ProtoFunID>(
    stRetRecastEnchant_ProtoFunID_descriptor(), name, value);
}
enum stReqLockEnchant_ProtoModID {
  stReqLockEnchant_ProtoModID_ModID = 2
};
bool stReqLockEnchant_ProtoModID_IsValid(int value);
const stReqLockEnchant_ProtoModID stReqLockEnchant_ProtoModID_ProtoModID_MIN = stReqLockEnchant_ProtoModID_ModID;
const stReqLockEnchant_ProtoModID stReqLockEnchant_ProtoModID_ProtoModID_MAX = stReqLockEnchant_ProtoModID_ModID;
const int stReqLockEnchant_ProtoModID_ProtoModID_ARRAYSIZE = stReqLockEnchant_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLockEnchant_ProtoModID_descriptor();
inline const ::std::string& stReqLockEnchant_ProtoModID_Name(stReqLockEnchant_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLockEnchant_ProtoModID_descriptor(), value);
}
inline bool stReqLockEnchant_ProtoModID_Parse(
    const ::std::string& name, stReqLockEnchant_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLockEnchant_ProtoModID>(
    stReqLockEnchant_ProtoModID_descriptor(), name, value);
}
enum stReqLockEnchant_ProtoFunID {
  stReqLockEnchant_ProtoFunID_FunID = 164
};
bool stReqLockEnchant_ProtoFunID_IsValid(int value);
const stReqLockEnchant_ProtoFunID stReqLockEnchant_ProtoFunID_ProtoFunID_MIN = stReqLockEnchant_ProtoFunID_FunID;
const stReqLockEnchant_ProtoFunID stReqLockEnchant_ProtoFunID_ProtoFunID_MAX = stReqLockEnchant_ProtoFunID_FunID;
const int stReqLockEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqLockEnchant_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqLockEnchant_ProtoFunID_descriptor();
inline const ::std::string& stReqLockEnchant_ProtoFunID_Name(stReqLockEnchant_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqLockEnchant_ProtoFunID_descriptor(), value);
}
inline bool stReqLockEnchant_ProtoFunID_Parse(
    const ::std::string& name, stReqLockEnchant_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqLockEnchant_ProtoFunID>(
    stReqLockEnchant_ProtoFunID_descriptor(), name, value);
}
enum stRetLockEnchant_eResult {
  stRetLockEnchant_eResult_eSuccess = 1,
  stRetLockEnchant_eResult_eNo_Such_Fashion = 2,
  stRetLockEnchant_eResult_eNo_Such_Index = 3
};
bool stRetLockEnchant_eResult_IsValid(int value);
const stRetLockEnchant_eResult stRetLockEnchant_eResult_eResult_MIN = stRetLockEnchant_eResult_eSuccess;
const stRetLockEnchant_eResult stRetLockEnchant_eResult_eResult_MAX = stRetLockEnchant_eResult_eNo_Such_Index;
const int stRetLockEnchant_eResult_eResult_ARRAYSIZE = stRetLockEnchant_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLockEnchant_eResult_descriptor();
inline const ::std::string& stRetLockEnchant_eResult_Name(stRetLockEnchant_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLockEnchant_eResult_descriptor(), value);
}
inline bool stRetLockEnchant_eResult_Parse(
    const ::std::string& name, stRetLockEnchant_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLockEnchant_eResult>(
    stRetLockEnchant_eResult_descriptor(), name, value);
}
enum stRetLockEnchant_ProtoModID {
  stRetLockEnchant_ProtoModID_ModID = 2
};
bool stRetLockEnchant_ProtoModID_IsValid(int value);
const stRetLockEnchant_ProtoModID stRetLockEnchant_ProtoModID_ProtoModID_MIN = stRetLockEnchant_ProtoModID_ModID;
const stRetLockEnchant_ProtoModID stRetLockEnchant_ProtoModID_ProtoModID_MAX = stRetLockEnchant_ProtoModID_ModID;
const int stRetLockEnchant_ProtoModID_ProtoModID_ARRAYSIZE = stRetLockEnchant_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLockEnchant_ProtoModID_descriptor();
inline const ::std::string& stRetLockEnchant_ProtoModID_Name(stRetLockEnchant_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLockEnchant_ProtoModID_descriptor(), value);
}
inline bool stRetLockEnchant_ProtoModID_Parse(
    const ::std::string& name, stRetLockEnchant_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLockEnchant_ProtoModID>(
    stRetLockEnchant_ProtoModID_descriptor(), name, value);
}
enum stRetLockEnchant_ProtoFunID {
  stRetLockEnchant_ProtoFunID_FunID = 165
};
bool stRetLockEnchant_ProtoFunID_IsValid(int value);
const stRetLockEnchant_ProtoFunID stRetLockEnchant_ProtoFunID_ProtoFunID_MIN = stRetLockEnchant_ProtoFunID_FunID;
const stRetLockEnchant_ProtoFunID stRetLockEnchant_ProtoFunID_ProtoFunID_MAX = stRetLockEnchant_ProtoFunID_FunID;
const int stRetLockEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetLockEnchant_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetLockEnchant_ProtoFunID_descriptor();
inline const ::std::string& stRetLockEnchant_ProtoFunID_Name(stRetLockEnchant_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetLockEnchant_ProtoFunID_descriptor(), value);
}
inline bool stRetLockEnchant_ProtoFunID_Parse(
    const ::std::string& name, stRetLockEnchant_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetLockEnchant_ProtoFunID>(
    stRetLockEnchant_ProtoFunID_descriptor(), name, value);
}
enum stHerLeagueResult_ProtoModID {
  stHerLeagueResult_ProtoModID_ModID = 2
};
bool stHerLeagueResult_ProtoModID_IsValid(int value);
const stHerLeagueResult_ProtoModID stHerLeagueResult_ProtoModID_ProtoModID_MIN = stHerLeagueResult_ProtoModID_ModID;
const stHerLeagueResult_ProtoModID stHerLeagueResult_ProtoModID_ProtoModID_MAX = stHerLeagueResult_ProtoModID_ModID;
const int stHerLeagueResult_ProtoModID_ProtoModID_ARRAYSIZE = stHerLeagueResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHerLeagueResult_ProtoModID_descriptor();
inline const ::std::string& stHerLeagueResult_ProtoModID_Name(stHerLeagueResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHerLeagueResult_ProtoModID_descriptor(), value);
}
inline bool stHerLeagueResult_ProtoModID_Parse(
    const ::std::string& name, stHerLeagueResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHerLeagueResult_ProtoModID>(
    stHerLeagueResult_ProtoModID_descriptor(), name, value);
}
enum stHerLeagueResult_ProtoFunID {
  stHerLeagueResult_ProtoFunID_FunID = 166
};
bool stHerLeagueResult_ProtoFunID_IsValid(int value);
const stHerLeagueResult_ProtoFunID stHerLeagueResult_ProtoFunID_ProtoFunID_MIN = stHerLeagueResult_ProtoFunID_FunID;
const stHerLeagueResult_ProtoFunID stHerLeagueResult_ProtoFunID_ProtoFunID_MAX = stHerLeagueResult_ProtoFunID_FunID;
const int stHerLeagueResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stHerLeagueResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHerLeagueResult_ProtoFunID_descriptor();
inline const ::std::string& stHerLeagueResult_ProtoFunID_Name(stHerLeagueResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHerLeagueResult_ProtoFunID_descriptor(), value);
}
inline bool stHerLeagueResult_ProtoFunID_Parse(
    const ::std::string& name, stHerLeagueResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHerLeagueResult_ProtoFunID>(
    stHerLeagueResult_ProtoFunID_descriptor(), name, value);
}
enum stReqHeroRune_ProtoModID {
  stReqHeroRune_ProtoModID_ModID = 2
};
bool stReqHeroRune_ProtoModID_IsValid(int value);
const stReqHeroRune_ProtoModID stReqHeroRune_ProtoModID_ProtoModID_MIN = stReqHeroRune_ProtoModID_ModID;
const stReqHeroRune_ProtoModID stReqHeroRune_ProtoModID_ProtoModID_MAX = stReqHeroRune_ProtoModID_ModID;
const int stReqHeroRune_ProtoModID_ProtoModID_ARRAYSIZE = stReqHeroRune_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroRune_ProtoModID_descriptor();
inline const ::std::string& stReqHeroRune_ProtoModID_Name(stReqHeroRune_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroRune_ProtoModID_descriptor(), value);
}
inline bool stReqHeroRune_ProtoModID_Parse(
    const ::std::string& name, stReqHeroRune_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroRune_ProtoModID>(
    stReqHeroRune_ProtoModID_descriptor(), name, value);
}
enum stReqHeroRune_ProtoFunID {
  stReqHeroRune_ProtoFunID_FunID = 167
};
bool stReqHeroRune_ProtoFunID_IsValid(int value);
const stReqHeroRune_ProtoFunID stReqHeroRune_ProtoFunID_ProtoFunID_MIN = stReqHeroRune_ProtoFunID_FunID;
const stReqHeroRune_ProtoFunID stReqHeroRune_ProtoFunID_ProtoFunID_MAX = stReqHeroRune_ProtoFunID_FunID;
const int stReqHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqHeroRune_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHeroRune_ProtoFunID_descriptor();
inline const ::std::string& stReqHeroRune_ProtoFunID_Name(stReqHeroRune_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHeroRune_ProtoFunID_descriptor(), value);
}
inline bool stReqHeroRune_ProtoFunID_Parse(
    const ::std::string& name, stReqHeroRune_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHeroRune_ProtoFunID>(
    stReqHeroRune_ProtoFunID_descriptor(), name, value);
}
enum stRetHeroRune_ProtoModID {
  stRetHeroRune_ProtoModID_ModID = 2
};
bool stRetHeroRune_ProtoModID_IsValid(int value);
const stRetHeroRune_ProtoModID stRetHeroRune_ProtoModID_ProtoModID_MIN = stRetHeroRune_ProtoModID_ModID;
const stRetHeroRune_ProtoModID stRetHeroRune_ProtoModID_ProtoModID_MAX = stRetHeroRune_ProtoModID_ModID;
const int stRetHeroRune_ProtoModID_ProtoModID_ARRAYSIZE = stRetHeroRune_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetHeroRune_ProtoModID_descriptor();
inline const ::std::string& stRetHeroRune_ProtoModID_Name(stRetHeroRune_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetHeroRune_ProtoModID_descriptor(), value);
}
inline bool stRetHeroRune_ProtoModID_Parse(
    const ::std::string& name, stRetHeroRune_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetHeroRune_ProtoModID>(
    stRetHeroRune_ProtoModID_descriptor(), name, value);
}
enum stRetHeroRune_ProtoFunID {
  stRetHeroRune_ProtoFunID_FunID = 168
};
bool stRetHeroRune_ProtoFunID_IsValid(int value);
const stRetHeroRune_ProtoFunID stRetHeroRune_ProtoFunID_ProtoFunID_MIN = stRetHeroRune_ProtoFunID_FunID;
const stRetHeroRune_ProtoFunID stRetHeroRune_ProtoFunID_ProtoFunID_MAX = stRetHeroRune_ProtoFunID_FunID;
const int stRetHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetHeroRune_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetHeroRune_ProtoFunID_descriptor();
inline const ::std::string& stRetHeroRune_ProtoFunID_Name(stRetHeroRune_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetHeroRune_ProtoFunID_descriptor(), value);
}
inline bool stRetHeroRune_ProtoFunID_Parse(
    const ::std::string& name, stRetHeroRune_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetHeroRune_ProtoFunID>(
    stRetHeroRune_ProtoFunID_descriptor(), name, value);
}
enum stReqAddHeroRune_ProtoModID {
  stReqAddHeroRune_ProtoModID_ModID = 2
};
bool stReqAddHeroRune_ProtoModID_IsValid(int value);
const stReqAddHeroRune_ProtoModID stReqAddHeroRune_ProtoModID_ProtoModID_MIN = stReqAddHeroRune_ProtoModID_ModID;
const stReqAddHeroRune_ProtoModID stReqAddHeroRune_ProtoModID_ProtoModID_MAX = stReqAddHeroRune_ProtoModID_ModID;
const int stReqAddHeroRune_ProtoModID_ProtoModID_ARRAYSIZE = stReqAddHeroRune_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAddHeroRune_ProtoModID_descriptor();
inline const ::std::string& stReqAddHeroRune_ProtoModID_Name(stReqAddHeroRune_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAddHeroRune_ProtoModID_descriptor(), value);
}
inline bool stReqAddHeroRune_ProtoModID_Parse(
    const ::std::string& name, stReqAddHeroRune_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAddHeroRune_ProtoModID>(
    stReqAddHeroRune_ProtoModID_descriptor(), name, value);
}
enum stReqAddHeroRune_ProtoFunID {
  stReqAddHeroRune_ProtoFunID_FunID = 169
};
bool stReqAddHeroRune_ProtoFunID_IsValid(int value);
const stReqAddHeroRune_ProtoFunID stReqAddHeroRune_ProtoFunID_ProtoFunID_MIN = stReqAddHeroRune_ProtoFunID_FunID;
const stReqAddHeroRune_ProtoFunID stReqAddHeroRune_ProtoFunID_ProtoFunID_MAX = stReqAddHeroRune_ProtoFunID_FunID;
const int stReqAddHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAddHeroRune_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAddHeroRune_ProtoFunID_descriptor();
inline const ::std::string& stReqAddHeroRune_ProtoFunID_Name(stReqAddHeroRune_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAddHeroRune_ProtoFunID_descriptor(), value);
}
inline bool stReqAddHeroRune_ProtoFunID_Parse(
    const ::std::string& name, stReqAddHeroRune_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAddHeroRune_ProtoFunID>(
    stReqAddHeroRune_ProtoFunID_descriptor(), name, value);
}
enum stRetAddHeroRune_eResult {
  stRetAddHeroRune_eResult_eSuccess = 1,
  stRetAddHeroRune_eResult_eNo_Such_Hero = 2,
  stRetAddHeroRune_eResult_eNo_Such_Rune = 3,
  stRetAddHeroRune_eResult_eRune_Same_Attr = 4,
  stRetAddHeroRune_eResult_eNo_Such_Pos = 5,
  stRetAddHeroRune_eResult_eInner_Error = 6
};
bool stRetAddHeroRune_eResult_IsValid(int value);
const stRetAddHeroRune_eResult stRetAddHeroRune_eResult_eResult_MIN = stRetAddHeroRune_eResult_eSuccess;
const stRetAddHeroRune_eResult stRetAddHeroRune_eResult_eResult_MAX = stRetAddHeroRune_eResult_eInner_Error;
const int stRetAddHeroRune_eResult_eResult_ARRAYSIZE = stRetAddHeroRune_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAddHeroRune_eResult_descriptor();
inline const ::std::string& stRetAddHeroRune_eResult_Name(stRetAddHeroRune_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAddHeroRune_eResult_descriptor(), value);
}
inline bool stRetAddHeroRune_eResult_Parse(
    const ::std::string& name, stRetAddHeroRune_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAddHeroRune_eResult>(
    stRetAddHeroRune_eResult_descriptor(), name, value);
}
enum stRetAddHeroRune_ProtoModID {
  stRetAddHeroRune_ProtoModID_ModID = 2
};
bool stRetAddHeroRune_ProtoModID_IsValid(int value);
const stRetAddHeroRune_ProtoModID stRetAddHeroRune_ProtoModID_ProtoModID_MIN = stRetAddHeroRune_ProtoModID_ModID;
const stRetAddHeroRune_ProtoModID stRetAddHeroRune_ProtoModID_ProtoModID_MAX = stRetAddHeroRune_ProtoModID_ModID;
const int stRetAddHeroRune_ProtoModID_ProtoModID_ARRAYSIZE = stRetAddHeroRune_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAddHeroRune_ProtoModID_descriptor();
inline const ::std::string& stRetAddHeroRune_ProtoModID_Name(stRetAddHeroRune_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAddHeroRune_ProtoModID_descriptor(), value);
}
inline bool stRetAddHeroRune_ProtoModID_Parse(
    const ::std::string& name, stRetAddHeroRune_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAddHeroRune_ProtoModID>(
    stRetAddHeroRune_ProtoModID_descriptor(), name, value);
}
enum stRetAddHeroRune_ProtoFunID {
  stRetAddHeroRune_ProtoFunID_FunID = 170
};
bool stRetAddHeroRune_ProtoFunID_IsValid(int value);
const stRetAddHeroRune_ProtoFunID stRetAddHeroRune_ProtoFunID_ProtoFunID_MIN = stRetAddHeroRune_ProtoFunID_FunID;
const stRetAddHeroRune_ProtoFunID stRetAddHeroRune_ProtoFunID_ProtoFunID_MAX = stRetAddHeroRune_ProtoFunID_FunID;
const int stRetAddHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetAddHeroRune_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetAddHeroRune_ProtoFunID_descriptor();
inline const ::std::string& stRetAddHeroRune_ProtoFunID_Name(stRetAddHeroRune_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetAddHeroRune_ProtoFunID_descriptor(), value);
}
inline bool stRetAddHeroRune_ProtoFunID_Parse(
    const ::std::string& name, stRetAddHeroRune_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetAddHeroRune_ProtoFunID>(
    stRetAddHeroRune_ProtoFunID_descriptor(), name, value);
}
enum stReqDelHeroRune_ProtoModID {
  stReqDelHeroRune_ProtoModID_ModID = 2
};
bool stReqDelHeroRune_ProtoModID_IsValid(int value);
const stReqDelHeroRune_ProtoModID stReqDelHeroRune_ProtoModID_ProtoModID_MIN = stReqDelHeroRune_ProtoModID_ModID;
const stReqDelHeroRune_ProtoModID stReqDelHeroRune_ProtoModID_ProtoModID_MAX = stReqDelHeroRune_ProtoModID_ModID;
const int stReqDelHeroRune_ProtoModID_ProtoModID_ARRAYSIZE = stReqDelHeroRune_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDelHeroRune_ProtoModID_descriptor();
inline const ::std::string& stReqDelHeroRune_ProtoModID_Name(stReqDelHeroRune_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDelHeroRune_ProtoModID_descriptor(), value);
}
inline bool stReqDelHeroRune_ProtoModID_Parse(
    const ::std::string& name, stReqDelHeroRune_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDelHeroRune_ProtoModID>(
    stReqDelHeroRune_ProtoModID_descriptor(), name, value);
}
enum stReqDelHeroRune_ProtoFunID {
  stReqDelHeroRune_ProtoFunID_FunID = 171
};
bool stReqDelHeroRune_ProtoFunID_IsValid(int value);
const stReqDelHeroRune_ProtoFunID stReqDelHeroRune_ProtoFunID_ProtoFunID_MIN = stReqDelHeroRune_ProtoFunID_FunID;
const stReqDelHeroRune_ProtoFunID stReqDelHeroRune_ProtoFunID_ProtoFunID_MAX = stReqDelHeroRune_ProtoFunID_FunID;
const int stReqDelHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDelHeroRune_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDelHeroRune_ProtoFunID_descriptor();
inline const ::std::string& stReqDelHeroRune_ProtoFunID_Name(stReqDelHeroRune_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDelHeroRune_ProtoFunID_descriptor(), value);
}
inline bool stReqDelHeroRune_ProtoFunID_Parse(
    const ::std::string& name, stReqDelHeroRune_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDelHeroRune_ProtoFunID>(
    stReqDelHeroRune_ProtoFunID_descriptor(), name, value);
}
enum stRetDelHeroRune_eResult {
  stRetDelHeroRune_eResult_eSuccess = 1,
  stRetDelHeroRune_eResult_eNo_Such_Hero = 2,
  stRetDelHeroRune_eResult_eNo_Such_Rune = 3,
  stRetDelHeroRune_eResult_eNo_Such_Pos = 4,
  stRetDelHeroRune_eResult_eRun_Bag_Full = 5,
  stRetDelHeroRune_eResult_eInner_Error = 6
};
bool stRetDelHeroRune_eResult_IsValid(int value);
const stRetDelHeroRune_eResult stRetDelHeroRune_eResult_eResult_MIN = stRetDelHeroRune_eResult_eSuccess;
const stRetDelHeroRune_eResult stRetDelHeroRune_eResult_eResult_MAX = stRetDelHeroRune_eResult_eInner_Error;
const int stRetDelHeroRune_eResult_eResult_ARRAYSIZE = stRetDelHeroRune_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDelHeroRune_eResult_descriptor();
inline const ::std::string& stRetDelHeroRune_eResult_Name(stRetDelHeroRune_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDelHeroRune_eResult_descriptor(), value);
}
inline bool stRetDelHeroRune_eResult_Parse(
    const ::std::string& name, stRetDelHeroRune_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDelHeroRune_eResult>(
    stRetDelHeroRune_eResult_descriptor(), name, value);
}
enum stRetDelHeroRune_ProtoModID {
  stRetDelHeroRune_ProtoModID_ModID = 2
};
bool stRetDelHeroRune_ProtoModID_IsValid(int value);
const stRetDelHeroRune_ProtoModID stRetDelHeroRune_ProtoModID_ProtoModID_MIN = stRetDelHeroRune_ProtoModID_ModID;
const stRetDelHeroRune_ProtoModID stRetDelHeroRune_ProtoModID_ProtoModID_MAX = stRetDelHeroRune_ProtoModID_ModID;
const int stRetDelHeroRune_ProtoModID_ProtoModID_ARRAYSIZE = stRetDelHeroRune_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDelHeroRune_ProtoModID_descriptor();
inline const ::std::string& stRetDelHeroRune_ProtoModID_Name(stRetDelHeroRune_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDelHeroRune_ProtoModID_descriptor(), value);
}
inline bool stRetDelHeroRune_ProtoModID_Parse(
    const ::std::string& name, stRetDelHeroRune_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDelHeroRune_ProtoModID>(
    stRetDelHeroRune_ProtoModID_descriptor(), name, value);
}
enum stRetDelHeroRune_ProtoFunID {
  stRetDelHeroRune_ProtoFunID_FunID = 172
};
bool stRetDelHeroRune_ProtoFunID_IsValid(int value);
const stRetDelHeroRune_ProtoFunID stRetDelHeroRune_ProtoFunID_ProtoFunID_MIN = stRetDelHeroRune_ProtoFunID_FunID;
const stRetDelHeroRune_ProtoFunID stRetDelHeroRune_ProtoFunID_ProtoFunID_MAX = stRetDelHeroRune_ProtoFunID_FunID;
const int stRetDelHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDelHeroRune_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDelHeroRune_ProtoFunID_descriptor();
inline const ::std::string& stRetDelHeroRune_ProtoFunID_Name(stRetDelHeroRune_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDelHeroRune_ProtoFunID_descriptor(), value);
}
inline bool stRetDelHeroRune_ProtoFunID_Parse(
    const ::std::string& name, stRetDelHeroRune_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDelHeroRune_ProtoFunID>(
    stRetDelHeroRune_ProtoFunID_descriptor(), name, value);
}
enum stReqRunePieceCombine_ProtoModID {
  stReqRunePieceCombine_ProtoModID_ModID = 2
};
bool stReqRunePieceCombine_ProtoModID_IsValid(int value);
const stReqRunePieceCombine_ProtoModID stReqRunePieceCombine_ProtoModID_ProtoModID_MIN = stReqRunePieceCombine_ProtoModID_ModID;
const stReqRunePieceCombine_ProtoModID stReqRunePieceCombine_ProtoModID_ProtoModID_MAX = stReqRunePieceCombine_ProtoModID_ModID;
const int stReqRunePieceCombine_ProtoModID_ProtoModID_ARRAYSIZE = stReqRunePieceCombine_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRunePieceCombine_ProtoModID_descriptor();
inline const ::std::string& stReqRunePieceCombine_ProtoModID_Name(stReqRunePieceCombine_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRunePieceCombine_ProtoModID_descriptor(), value);
}
inline bool stReqRunePieceCombine_ProtoModID_Parse(
    const ::std::string& name, stReqRunePieceCombine_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRunePieceCombine_ProtoModID>(
    stReqRunePieceCombine_ProtoModID_descriptor(), name, value);
}
enum stReqRunePieceCombine_ProtoFunID {
  stReqRunePieceCombine_ProtoFunID_FunID = 173
};
bool stReqRunePieceCombine_ProtoFunID_IsValid(int value);
const stReqRunePieceCombine_ProtoFunID stReqRunePieceCombine_ProtoFunID_ProtoFunID_MIN = stReqRunePieceCombine_ProtoFunID_FunID;
const stReqRunePieceCombine_ProtoFunID stReqRunePieceCombine_ProtoFunID_ProtoFunID_MAX = stReqRunePieceCombine_ProtoFunID_FunID;
const int stReqRunePieceCombine_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRunePieceCombine_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRunePieceCombine_ProtoFunID_descriptor();
inline const ::std::string& stReqRunePieceCombine_ProtoFunID_Name(stReqRunePieceCombine_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRunePieceCombine_ProtoFunID_descriptor(), value);
}
inline bool stReqRunePieceCombine_ProtoFunID_Parse(
    const ::std::string& name, stReqRunePieceCombine_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRunePieceCombine_ProtoFunID>(
    stReqRunePieceCombine_ProtoFunID_descriptor(), name, value);
}
enum stRetRunePieceCombine_eResult {
  stRetRunePieceCombine_eResult_eSuccess = 1,
  stRetRunePieceCombine_eResult_eLess_Of_Rune_Piece = 2,
  stRetRunePieceCombine_eResult_eNo_Such_Rune_Piece = 3,
  stRetRunePieceCombine_eResult_eRune_Bag_Full = 4,
  stRetRunePieceCombine_eResult_eLess_Of_Soul_Fire = 5,
  stRetRunePieceCombine_eResult_eInner_Error = 6
};
bool stRetRunePieceCombine_eResult_IsValid(int value);
const stRetRunePieceCombine_eResult stRetRunePieceCombine_eResult_eResult_MIN = stRetRunePieceCombine_eResult_eSuccess;
const stRetRunePieceCombine_eResult stRetRunePieceCombine_eResult_eResult_MAX = stRetRunePieceCombine_eResult_eInner_Error;
const int stRetRunePieceCombine_eResult_eResult_ARRAYSIZE = stRetRunePieceCombine_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRunePieceCombine_eResult_descriptor();
inline const ::std::string& stRetRunePieceCombine_eResult_Name(stRetRunePieceCombine_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRunePieceCombine_eResult_descriptor(), value);
}
inline bool stRetRunePieceCombine_eResult_Parse(
    const ::std::string& name, stRetRunePieceCombine_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRunePieceCombine_eResult>(
    stRetRunePieceCombine_eResult_descriptor(), name, value);
}
enum stRetRunePieceCombine_ProtoModID {
  stRetRunePieceCombine_ProtoModID_ModID = 2
};
bool stRetRunePieceCombine_ProtoModID_IsValid(int value);
const stRetRunePieceCombine_ProtoModID stRetRunePieceCombine_ProtoModID_ProtoModID_MIN = stRetRunePieceCombine_ProtoModID_ModID;
const stRetRunePieceCombine_ProtoModID stRetRunePieceCombine_ProtoModID_ProtoModID_MAX = stRetRunePieceCombine_ProtoModID_ModID;
const int stRetRunePieceCombine_ProtoModID_ProtoModID_ARRAYSIZE = stRetRunePieceCombine_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRunePieceCombine_ProtoModID_descriptor();
inline const ::std::string& stRetRunePieceCombine_ProtoModID_Name(stRetRunePieceCombine_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRunePieceCombine_ProtoModID_descriptor(), value);
}
inline bool stRetRunePieceCombine_ProtoModID_Parse(
    const ::std::string& name, stRetRunePieceCombine_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRunePieceCombine_ProtoModID>(
    stRetRunePieceCombine_ProtoModID_descriptor(), name, value);
}
enum stRetRunePieceCombine_ProtoFunID {
  stRetRunePieceCombine_ProtoFunID_FunID = 174
};
bool stRetRunePieceCombine_ProtoFunID_IsValid(int value);
const stRetRunePieceCombine_ProtoFunID stRetRunePieceCombine_ProtoFunID_ProtoFunID_MIN = stRetRunePieceCombine_ProtoFunID_FunID;
const stRetRunePieceCombine_ProtoFunID stRetRunePieceCombine_ProtoFunID_ProtoFunID_MAX = stRetRunePieceCombine_ProtoFunID_FunID;
const int stRetRunePieceCombine_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRunePieceCombine_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRunePieceCombine_ProtoFunID_descriptor();
inline const ::std::string& stRetRunePieceCombine_ProtoFunID_Name(stRetRunePieceCombine_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRunePieceCombine_ProtoFunID_descriptor(), value);
}
inline bool stRetRunePieceCombine_ProtoFunID_Parse(
    const ::std::string& name, stRetRunePieceCombine_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRunePieceCombine_ProtoFunID>(
    stRetRunePieceCombine_ProtoFunID_descriptor(), name, value);
}
enum stReqRuneIntensify_ProtoModID {
  stReqRuneIntensify_ProtoModID_ModID = 2
};
bool stReqRuneIntensify_ProtoModID_IsValid(int value);
const stReqRuneIntensify_ProtoModID stReqRuneIntensify_ProtoModID_ProtoModID_MIN = stReqRuneIntensify_ProtoModID_ModID;
const stReqRuneIntensify_ProtoModID stReqRuneIntensify_ProtoModID_ProtoModID_MAX = stReqRuneIntensify_ProtoModID_ModID;
const int stReqRuneIntensify_ProtoModID_ProtoModID_ARRAYSIZE = stReqRuneIntensify_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRuneIntensify_ProtoModID_descriptor();
inline const ::std::string& stReqRuneIntensify_ProtoModID_Name(stReqRuneIntensify_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRuneIntensify_ProtoModID_descriptor(), value);
}
inline bool stReqRuneIntensify_ProtoModID_Parse(
    const ::std::string& name, stReqRuneIntensify_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRuneIntensify_ProtoModID>(
    stReqRuneIntensify_ProtoModID_descriptor(), name, value);
}
enum stReqRuneIntensify_ProtoFunID {
  stReqRuneIntensify_ProtoFunID_FunID = 175
};
bool stReqRuneIntensify_ProtoFunID_IsValid(int value);
const stReqRuneIntensify_ProtoFunID stReqRuneIntensify_ProtoFunID_ProtoFunID_MIN = stReqRuneIntensify_ProtoFunID_FunID;
const stReqRuneIntensify_ProtoFunID stReqRuneIntensify_ProtoFunID_ProtoFunID_MAX = stReqRuneIntensify_ProtoFunID_FunID;
const int stReqRuneIntensify_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRuneIntensify_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRuneIntensify_ProtoFunID_descriptor();
inline const ::std::string& stReqRuneIntensify_ProtoFunID_Name(stReqRuneIntensify_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRuneIntensify_ProtoFunID_descriptor(), value);
}
inline bool stReqRuneIntensify_ProtoFunID_Parse(
    const ::std::string& name, stReqRuneIntensify_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRuneIntensify_ProtoFunID>(
    stReqRuneIntensify_ProtoFunID_descriptor(), name, value);
}
enum stRetRuneIntensify_eResult {
  stRetRuneIntensify_eResult_eSuccess = 1,
  stRetRuneIntensify_eResult_eNo_Such_Rune = 2,
  stRetRuneIntensify_eResult_eLess_Of_Gold = 3,
  stRetRuneIntensify_eResult_eMax_Run_Lvl = 4,
  stRetRuneIntensify_eResult_eLess_Of_Soul_Fire = 5,
  stRetRuneIntensify_eResult_eMax_Eat_Num = 6,
  stRetRuneIntensify_eResult_eEat_Self = 7,
  stRetRuneIntensify_eResult_eNot_Exist_Eat_Rune = 9,
  stRetRuneIntensify_eResult_eInner_Error = 10
};
bool stRetRuneIntensify_eResult_IsValid(int value);
const stRetRuneIntensify_eResult stRetRuneIntensify_eResult_eResult_MIN = stRetRuneIntensify_eResult_eSuccess;
const stRetRuneIntensify_eResult stRetRuneIntensify_eResult_eResult_MAX = stRetRuneIntensify_eResult_eInner_Error;
const int stRetRuneIntensify_eResult_eResult_ARRAYSIZE = stRetRuneIntensify_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRuneIntensify_eResult_descriptor();
inline const ::std::string& stRetRuneIntensify_eResult_Name(stRetRuneIntensify_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRuneIntensify_eResult_descriptor(), value);
}
inline bool stRetRuneIntensify_eResult_Parse(
    const ::std::string& name, stRetRuneIntensify_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRuneIntensify_eResult>(
    stRetRuneIntensify_eResult_descriptor(), name, value);
}
enum stRetRuneIntensify_ProtoModID {
  stRetRuneIntensify_ProtoModID_ModID = 2
};
bool stRetRuneIntensify_ProtoModID_IsValid(int value);
const stRetRuneIntensify_ProtoModID stRetRuneIntensify_ProtoModID_ProtoModID_MIN = stRetRuneIntensify_ProtoModID_ModID;
const stRetRuneIntensify_ProtoModID stRetRuneIntensify_ProtoModID_ProtoModID_MAX = stRetRuneIntensify_ProtoModID_ModID;
const int stRetRuneIntensify_ProtoModID_ProtoModID_ARRAYSIZE = stRetRuneIntensify_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRuneIntensify_ProtoModID_descriptor();
inline const ::std::string& stRetRuneIntensify_ProtoModID_Name(stRetRuneIntensify_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRuneIntensify_ProtoModID_descriptor(), value);
}
inline bool stRetRuneIntensify_ProtoModID_Parse(
    const ::std::string& name, stRetRuneIntensify_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRuneIntensify_ProtoModID>(
    stRetRuneIntensify_ProtoModID_descriptor(), name, value);
}
enum stRetRuneIntensify_ProtoFunID {
  stRetRuneIntensify_ProtoFunID_FunID = 176
};
bool stRetRuneIntensify_ProtoFunID_IsValid(int value);
const stRetRuneIntensify_ProtoFunID stRetRuneIntensify_ProtoFunID_ProtoFunID_MIN = stRetRuneIntensify_ProtoFunID_FunID;
const stRetRuneIntensify_ProtoFunID stRetRuneIntensify_ProtoFunID_ProtoFunID_MAX = stRetRuneIntensify_ProtoFunID_FunID;
const int stRetRuneIntensify_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRuneIntensify_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRuneIntensify_ProtoFunID_descriptor();
inline const ::std::string& stRetRuneIntensify_ProtoFunID_Name(stRetRuneIntensify_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRuneIntensify_ProtoFunID_descriptor(), value);
}
inline bool stRetRuneIntensify_ProtoFunID_Parse(
    const ::std::string& name, stRetRuneIntensify_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRuneIntensify_ProtoFunID>(
    stRetRuneIntensify_ProtoFunID_descriptor(), name, value);
}
enum stReqRuneEvolve_ProtoModID {
  stReqRuneEvolve_ProtoModID_ModID = 2
};
bool stReqRuneEvolve_ProtoModID_IsValid(int value);
const stReqRuneEvolve_ProtoModID stReqRuneEvolve_ProtoModID_ProtoModID_MIN = stReqRuneEvolve_ProtoModID_ModID;
const stReqRuneEvolve_ProtoModID stReqRuneEvolve_ProtoModID_ProtoModID_MAX = stReqRuneEvolve_ProtoModID_ModID;
const int stReqRuneEvolve_ProtoModID_ProtoModID_ARRAYSIZE = stReqRuneEvolve_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRuneEvolve_ProtoModID_descriptor();
inline const ::std::string& stReqRuneEvolve_ProtoModID_Name(stReqRuneEvolve_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRuneEvolve_ProtoModID_descriptor(), value);
}
inline bool stReqRuneEvolve_ProtoModID_Parse(
    const ::std::string& name, stReqRuneEvolve_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRuneEvolve_ProtoModID>(
    stReqRuneEvolve_ProtoModID_descriptor(), name, value);
}
enum stReqRuneEvolve_ProtoFunID {
  stReqRuneEvolve_ProtoFunID_FunID = 177
};
bool stReqRuneEvolve_ProtoFunID_IsValid(int value);
const stReqRuneEvolve_ProtoFunID stReqRuneEvolve_ProtoFunID_ProtoFunID_MIN = stReqRuneEvolve_ProtoFunID_FunID;
const stReqRuneEvolve_ProtoFunID stReqRuneEvolve_ProtoFunID_ProtoFunID_MAX = stReqRuneEvolve_ProtoFunID_FunID;
const int stReqRuneEvolve_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRuneEvolve_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRuneEvolve_ProtoFunID_descriptor();
inline const ::std::string& stReqRuneEvolve_ProtoFunID_Name(stReqRuneEvolve_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRuneEvolve_ProtoFunID_descriptor(), value);
}
inline bool stReqRuneEvolve_ProtoFunID_Parse(
    const ::std::string& name, stReqRuneEvolve_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRuneEvolve_ProtoFunID>(
    stReqRuneEvolve_ProtoFunID_descriptor(), name, value);
}
enum stRetRuneEvolve_eResult {
  stRetRuneEvolve_eResult_eSuccess = 1,
  stRetRuneEvolve_eResult_eNo_Such_Rune = 2,
  stRetRuneEvolve_eResult_eLess_Of_Gold = 3,
  stRetRuneEvolve_eResult_eRune_Max_Lvl = 4,
  stRetRuneEvolve_eResult_eLess_Of_Rune = 5,
  stRetRuneEvolve_eResult_eRole_Lvl_Limit = 6,
  stRetRuneEvolve_eResult_eInner_Error = 7
};
bool stRetRuneEvolve_eResult_IsValid(int value);
const stRetRuneEvolve_eResult stRetRuneEvolve_eResult_eResult_MIN = stRetRuneEvolve_eResult_eSuccess;
const stRetRuneEvolve_eResult stRetRuneEvolve_eResult_eResult_MAX = stRetRuneEvolve_eResult_eInner_Error;
const int stRetRuneEvolve_eResult_eResult_ARRAYSIZE = stRetRuneEvolve_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRuneEvolve_eResult_descriptor();
inline const ::std::string& stRetRuneEvolve_eResult_Name(stRetRuneEvolve_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRuneEvolve_eResult_descriptor(), value);
}
inline bool stRetRuneEvolve_eResult_Parse(
    const ::std::string& name, stRetRuneEvolve_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRuneEvolve_eResult>(
    stRetRuneEvolve_eResult_descriptor(), name, value);
}
enum stRetRuneEvolve_ProtoModID {
  stRetRuneEvolve_ProtoModID_ModID = 2
};
bool stRetRuneEvolve_ProtoModID_IsValid(int value);
const stRetRuneEvolve_ProtoModID stRetRuneEvolve_ProtoModID_ProtoModID_MIN = stRetRuneEvolve_ProtoModID_ModID;
const stRetRuneEvolve_ProtoModID stRetRuneEvolve_ProtoModID_ProtoModID_MAX = stRetRuneEvolve_ProtoModID_ModID;
const int stRetRuneEvolve_ProtoModID_ProtoModID_ARRAYSIZE = stRetRuneEvolve_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRuneEvolve_ProtoModID_descriptor();
inline const ::std::string& stRetRuneEvolve_ProtoModID_Name(stRetRuneEvolve_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRuneEvolve_ProtoModID_descriptor(), value);
}
inline bool stRetRuneEvolve_ProtoModID_Parse(
    const ::std::string& name, stRetRuneEvolve_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRuneEvolve_ProtoModID>(
    stRetRuneEvolve_ProtoModID_descriptor(), name, value);
}
enum stRetRuneEvolve_ProtoFunID {
  stRetRuneEvolve_ProtoFunID_FunID = 178
};
bool stRetRuneEvolve_ProtoFunID_IsValid(int value);
const stRetRuneEvolve_ProtoFunID stRetRuneEvolve_ProtoFunID_ProtoFunID_MIN = stRetRuneEvolve_ProtoFunID_FunID;
const stRetRuneEvolve_ProtoFunID stRetRuneEvolve_ProtoFunID_ProtoFunID_MAX = stRetRuneEvolve_ProtoFunID_FunID;
const int stRetRuneEvolve_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRuneEvolve_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRuneEvolve_ProtoFunID_descriptor();
inline const ::std::string& stRetRuneEvolve_ProtoFunID_Name(stRetRuneEvolve_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRuneEvolve_ProtoFunID_descriptor(), value);
}
inline bool stRetRuneEvolve_ProtoFunID_Parse(
    const ::std::string& name, stRetRuneEvolve_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRuneEvolve_ProtoFunID>(
    stRetRuneEvolve_ProtoFunID_descriptor(), name, value);
}
enum stReqExtractGem_ProtoModID {
  stReqExtractGem_ProtoModID_ModID = 2
};
bool stReqExtractGem_ProtoModID_IsValid(int value);
const stReqExtractGem_ProtoModID stReqExtractGem_ProtoModID_ProtoModID_MIN = stReqExtractGem_ProtoModID_ModID;
const stReqExtractGem_ProtoModID stReqExtractGem_ProtoModID_ProtoModID_MAX = stReqExtractGem_ProtoModID_ModID;
const int stReqExtractGem_ProtoModID_ProtoModID_ARRAYSIZE = stReqExtractGem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExtractGem_ProtoModID_descriptor();
inline const ::std::string& stReqExtractGem_ProtoModID_Name(stReqExtractGem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExtractGem_ProtoModID_descriptor(), value);
}
inline bool stReqExtractGem_ProtoModID_Parse(
    const ::std::string& name, stReqExtractGem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExtractGem_ProtoModID>(
    stReqExtractGem_ProtoModID_descriptor(), name, value);
}
enum stReqExtractGem_ProtoFunID {
  stReqExtractGem_ProtoFunID_FunID = 179
};
bool stReqExtractGem_ProtoFunID_IsValid(int value);
const stReqExtractGem_ProtoFunID stReqExtractGem_ProtoFunID_ProtoFunID_MIN = stReqExtractGem_ProtoFunID_FunID;
const stReqExtractGem_ProtoFunID stReqExtractGem_ProtoFunID_ProtoFunID_MAX = stReqExtractGem_ProtoFunID_FunID;
const int stReqExtractGem_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqExtractGem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqExtractGem_ProtoFunID_descriptor();
inline const ::std::string& stReqExtractGem_ProtoFunID_Name(stReqExtractGem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqExtractGem_ProtoFunID_descriptor(), value);
}
inline bool stReqExtractGem_ProtoFunID_Parse(
    const ::std::string& name, stReqExtractGem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqExtractGem_ProtoFunID>(
    stReqExtractGem_ProtoFunID_descriptor(), name, value);
}
enum ExtractGemResult_Result {
  ExtractGemResult_Result_RESULT_SUCCESS = 1,
  ExtractGemResult_Result_RESULT_ERROR_LEVEL = 2,
  ExtractGemResult_Result_RESULT_ERROR_GOLD = 3,
  ExtractGemResult_Result_RESULT_ERROR_ID = 4,
  ExtractGemResult_Result_RESULT_ERROR_LIST = 5,
  ExtractGemResult_Result_RESULT_ERROR_SUCCESSLIST = 6,
  ExtractGemResult_Result_RESULT_ERROR_MISS = 7,
  ExtractGemResult_Result_RESULT_ERROR_SUCCESSMISS = 8,
  ExtractGemResult_Result_RESULT_ERROR_UNKNOWN = 9
};
bool ExtractGemResult_Result_IsValid(int value);
const ExtractGemResult_Result ExtractGemResult_Result_Result_MIN = ExtractGemResult_Result_RESULT_SUCCESS;
const ExtractGemResult_Result ExtractGemResult_Result_Result_MAX = ExtractGemResult_Result_RESULT_ERROR_UNKNOWN;
const int ExtractGemResult_Result_Result_ARRAYSIZE = ExtractGemResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExtractGemResult_Result_descriptor();
inline const ::std::string& ExtractGemResult_Result_Name(ExtractGemResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExtractGemResult_Result_descriptor(), value);
}
inline bool ExtractGemResult_Result_Parse(
    const ::std::string& name, ExtractGemResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExtractGemResult_Result>(
    ExtractGemResult_Result_descriptor(), name, value);
}
enum ExtractGemResult_ProtoModID {
  ExtractGemResult_ProtoModID_ModID = 2
};
bool ExtractGemResult_ProtoModID_IsValid(int value);
const ExtractGemResult_ProtoModID ExtractGemResult_ProtoModID_ProtoModID_MIN = ExtractGemResult_ProtoModID_ModID;
const ExtractGemResult_ProtoModID ExtractGemResult_ProtoModID_ProtoModID_MAX = ExtractGemResult_ProtoModID_ModID;
const int ExtractGemResult_ProtoModID_ProtoModID_ARRAYSIZE = ExtractGemResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExtractGemResult_ProtoModID_descriptor();
inline const ::std::string& ExtractGemResult_ProtoModID_Name(ExtractGemResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExtractGemResult_ProtoModID_descriptor(), value);
}
inline bool ExtractGemResult_ProtoModID_Parse(
    const ::std::string& name, ExtractGemResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExtractGemResult_ProtoModID>(
    ExtractGemResult_ProtoModID_descriptor(), name, value);
}
enum ExtractGemResult_ProtoFunID {
  ExtractGemResult_ProtoFunID_FunID = 180
};
bool ExtractGemResult_ProtoFunID_IsValid(int value);
const ExtractGemResult_ProtoFunID ExtractGemResult_ProtoFunID_ProtoFunID_MIN = ExtractGemResult_ProtoFunID_FunID;
const ExtractGemResult_ProtoFunID ExtractGemResult_ProtoFunID_ProtoFunID_MAX = ExtractGemResult_ProtoFunID_FunID;
const int ExtractGemResult_ProtoFunID_ProtoFunID_ARRAYSIZE = ExtractGemResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ExtractGemResult_ProtoFunID_descriptor();
inline const ::std::string& ExtractGemResult_ProtoFunID_Name(ExtractGemResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ExtractGemResult_ProtoFunID_descriptor(), value);
}
inline bool ExtractGemResult_ProtoFunID_Parse(
    const ::std::string& name, ExtractGemResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ExtractGemResult_ProtoFunID>(
    ExtractGemResult_ProtoFunID_descriptor(), name, value);
}
enum stReqWedding_ProtoModID {
  stReqWedding_ProtoModID_ModID = 2
};
bool stReqWedding_ProtoModID_IsValid(int value);
const stReqWedding_ProtoModID stReqWedding_ProtoModID_ProtoModID_MIN = stReqWedding_ProtoModID_ModID;
const stReqWedding_ProtoModID stReqWedding_ProtoModID_ProtoModID_MAX = stReqWedding_ProtoModID_ModID;
const int stReqWedding_ProtoModID_ProtoModID_ARRAYSIZE = stReqWedding_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqWedding_ProtoModID_descriptor();
inline const ::std::string& stReqWedding_ProtoModID_Name(stReqWedding_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqWedding_ProtoModID_descriptor(), value);
}
inline bool stReqWedding_ProtoModID_Parse(
    const ::std::string& name, stReqWedding_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqWedding_ProtoModID>(
    stReqWedding_ProtoModID_descriptor(), name, value);
}
enum stReqWedding_ProtoFunID {
  stReqWedding_ProtoFunID_FunID = 182
};
bool stReqWedding_ProtoFunID_IsValid(int value);
const stReqWedding_ProtoFunID stReqWedding_ProtoFunID_ProtoFunID_MIN = stReqWedding_ProtoFunID_FunID;
const stReqWedding_ProtoFunID stReqWedding_ProtoFunID_ProtoFunID_MAX = stReqWedding_ProtoFunID_FunID;
const int stReqWedding_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqWedding_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqWedding_ProtoFunID_descriptor();
inline const ::std::string& stReqWedding_ProtoFunID_Name(stReqWedding_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqWedding_ProtoFunID_descriptor(), value);
}
inline bool stReqWedding_ProtoFunID_Parse(
    const ::std::string& name, stReqWedding_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqWedding_ProtoFunID>(
    stReqWedding_ProtoFunID_descriptor(), name, value);
}
enum stReqAgreeWedding_ProtoModID {
  stReqAgreeWedding_ProtoModID_ModID = 2
};
bool stReqAgreeWedding_ProtoModID_IsValid(int value);
const stReqAgreeWedding_ProtoModID stReqAgreeWedding_ProtoModID_ProtoModID_MIN = stReqAgreeWedding_ProtoModID_ModID;
const stReqAgreeWedding_ProtoModID stReqAgreeWedding_ProtoModID_ProtoModID_MAX = stReqAgreeWedding_ProtoModID_ModID;
const int stReqAgreeWedding_ProtoModID_ProtoModID_ARRAYSIZE = stReqAgreeWedding_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeWedding_ProtoModID_descriptor();
inline const ::std::string& stReqAgreeWedding_ProtoModID_Name(stReqAgreeWedding_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeWedding_ProtoModID_descriptor(), value);
}
inline bool stReqAgreeWedding_ProtoModID_Parse(
    const ::std::string& name, stReqAgreeWedding_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeWedding_ProtoModID>(
    stReqAgreeWedding_ProtoModID_descriptor(), name, value);
}
enum stReqAgreeWedding_ProtoFunID {
  stReqAgreeWedding_ProtoFunID_FunID = 183
};
bool stReqAgreeWedding_ProtoFunID_IsValid(int value);
const stReqAgreeWedding_ProtoFunID stReqAgreeWedding_ProtoFunID_ProtoFunID_MIN = stReqAgreeWedding_ProtoFunID_FunID;
const stReqAgreeWedding_ProtoFunID stReqAgreeWedding_ProtoFunID_ProtoFunID_MAX = stReqAgreeWedding_ProtoFunID_FunID;
const int stReqAgreeWedding_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAgreeWedding_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeWedding_ProtoFunID_descriptor();
inline const ::std::string& stReqAgreeWedding_ProtoFunID_Name(stReqAgreeWedding_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeWedding_ProtoFunID_descriptor(), value);
}
inline bool stReqAgreeWedding_ProtoFunID_Parse(
    const ::std::string& name, stReqAgreeWedding_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeWedding_ProtoFunID>(
    stReqAgreeWedding_ProtoFunID_descriptor(), name, value);
}
enum ResultWedding_Result {
  ResultWedding_Result_RESULT_SUCCESS = 1,
  ResultWedding_Result_RESULT_ERROR_ONLINE = 2,
  ResultWedding_Result_RESULT_ERROR_MONEY = 3,
  ResultWedding_Result_RESULT_ERROR_BAG = 4,
  ResultWedding_Result_RESULT_ERROR_UNKNOWN = 5,
  ResultWedding_Result_RESULT_SUCCESS_SEND = 6
};
bool ResultWedding_Result_IsValid(int value);
const ResultWedding_Result ResultWedding_Result_Result_MIN = ResultWedding_Result_RESULT_SUCCESS;
const ResultWedding_Result ResultWedding_Result_Result_MAX = ResultWedding_Result_RESULT_SUCCESS_SEND;
const int ResultWedding_Result_Result_ARRAYSIZE = ResultWedding_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultWedding_Result_descriptor();
inline const ::std::string& ResultWedding_Result_Name(ResultWedding_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultWedding_Result_descriptor(), value);
}
inline bool ResultWedding_Result_Parse(
    const ::std::string& name, ResultWedding_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultWedding_Result>(
    ResultWedding_Result_descriptor(), name, value);
}
enum ResultWedding_ProtoModID {
  ResultWedding_ProtoModID_ModID = 2
};
bool ResultWedding_ProtoModID_IsValid(int value);
const ResultWedding_ProtoModID ResultWedding_ProtoModID_ProtoModID_MIN = ResultWedding_ProtoModID_ModID;
const ResultWedding_ProtoModID ResultWedding_ProtoModID_ProtoModID_MAX = ResultWedding_ProtoModID_ModID;
const int ResultWedding_ProtoModID_ProtoModID_ARRAYSIZE = ResultWedding_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultWedding_ProtoModID_descriptor();
inline const ::std::string& ResultWedding_ProtoModID_Name(ResultWedding_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultWedding_ProtoModID_descriptor(), value);
}
inline bool ResultWedding_ProtoModID_Parse(
    const ::std::string& name, ResultWedding_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultWedding_ProtoModID>(
    ResultWedding_ProtoModID_descriptor(), name, value);
}
enum ResultWedding_ProtoFunID {
  ResultWedding_ProtoFunID_FunID = 184
};
bool ResultWedding_ProtoFunID_IsValid(int value);
const ResultWedding_ProtoFunID ResultWedding_ProtoFunID_ProtoFunID_MIN = ResultWedding_ProtoFunID_FunID;
const ResultWedding_ProtoFunID ResultWedding_ProtoFunID_ProtoFunID_MAX = ResultWedding_ProtoFunID_FunID;
const int ResultWedding_ProtoFunID_ProtoFunID_ARRAYSIZE = ResultWedding_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultWedding_ProtoFunID_descriptor();
inline const ::std::string& ResultWedding_ProtoFunID_Name(ResultWedding_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultWedding_ProtoFunID_descriptor(), value);
}
inline bool ResultWedding_ProtoFunID_Parse(
    const ::std::string& name, ResultWedding_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultWedding_ProtoFunID>(
    ResultWedding_ProtoFunID_descriptor(), name, value);
}
enum stReqInviteToRoom_ProtoModID {
  stReqInviteToRoom_ProtoModID_ModID = 2
};
bool stReqInviteToRoom_ProtoModID_IsValid(int value);
const stReqInviteToRoom_ProtoModID stReqInviteToRoom_ProtoModID_ProtoModID_MIN = stReqInviteToRoom_ProtoModID_ModID;
const stReqInviteToRoom_ProtoModID stReqInviteToRoom_ProtoModID_ProtoModID_MAX = stReqInviteToRoom_ProtoModID_ModID;
const int stReqInviteToRoom_ProtoModID_ProtoModID_ARRAYSIZE = stReqInviteToRoom_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInviteToRoom_ProtoModID_descriptor();
inline const ::std::string& stReqInviteToRoom_ProtoModID_Name(stReqInviteToRoom_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInviteToRoom_ProtoModID_descriptor(), value);
}
inline bool stReqInviteToRoom_ProtoModID_Parse(
    const ::std::string& name, stReqInviteToRoom_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInviteToRoom_ProtoModID>(
    stReqInviteToRoom_ProtoModID_descriptor(), name, value);
}
enum stReqInviteToRoom_ProtoFunID {
  stReqInviteToRoom_ProtoFunID_FunID = 185
};
bool stReqInviteToRoom_ProtoFunID_IsValid(int value);
const stReqInviteToRoom_ProtoFunID stReqInviteToRoom_ProtoFunID_ProtoFunID_MIN = stReqInviteToRoom_ProtoFunID_FunID;
const stReqInviteToRoom_ProtoFunID stReqInviteToRoom_ProtoFunID_ProtoFunID_MAX = stReqInviteToRoom_ProtoFunID_FunID;
const int stReqInviteToRoom_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqInviteToRoom_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqInviteToRoom_ProtoFunID_descriptor();
inline const ::std::string& stReqInviteToRoom_ProtoFunID_Name(stReqInviteToRoom_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqInviteToRoom_ProtoFunID_descriptor(), value);
}
inline bool stReqInviteToRoom_ProtoFunID_Parse(
    const ::std::string& name, stReqInviteToRoom_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqInviteToRoom_ProtoFunID>(
    stReqInviteToRoom_ProtoFunID_descriptor(), name, value);
}
enum NotifyEnterWedding_ProtoModID {
  NotifyEnterWedding_ProtoModID_ModID = 2
};
bool NotifyEnterWedding_ProtoModID_IsValid(int value);
const NotifyEnterWedding_ProtoModID NotifyEnterWedding_ProtoModID_ProtoModID_MIN = NotifyEnterWedding_ProtoModID_ModID;
const NotifyEnterWedding_ProtoModID NotifyEnterWedding_ProtoModID_ProtoModID_MAX = NotifyEnterWedding_ProtoModID_ModID;
const int NotifyEnterWedding_ProtoModID_ProtoModID_ARRAYSIZE = NotifyEnterWedding_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyEnterWedding_ProtoModID_descriptor();
inline const ::std::string& NotifyEnterWedding_ProtoModID_Name(NotifyEnterWedding_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyEnterWedding_ProtoModID_descriptor(), value);
}
inline bool NotifyEnterWedding_ProtoModID_Parse(
    const ::std::string& name, NotifyEnterWedding_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyEnterWedding_ProtoModID>(
    NotifyEnterWedding_ProtoModID_descriptor(), name, value);
}
enum NotifyEnterWedding_ProtoFunID {
  NotifyEnterWedding_ProtoFunID_FunID = 186
};
bool NotifyEnterWedding_ProtoFunID_IsValid(int value);
const NotifyEnterWedding_ProtoFunID NotifyEnterWedding_ProtoFunID_ProtoFunID_MIN = NotifyEnterWedding_ProtoFunID_FunID;
const NotifyEnterWedding_ProtoFunID NotifyEnterWedding_ProtoFunID_ProtoFunID_MAX = NotifyEnterWedding_ProtoFunID_FunID;
const int NotifyEnterWedding_ProtoFunID_ProtoFunID_ARRAYSIZE = NotifyEnterWedding_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyEnterWedding_ProtoFunID_descriptor();
inline const ::std::string& NotifyEnterWedding_ProtoFunID_Name(NotifyEnterWedding_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyEnterWedding_ProtoFunID_descriptor(), value);
}
inline bool NotifyEnterWedding_ProtoFunID_Parse(
    const ::std::string& name, NotifyEnterWedding_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyEnterWedding_ProtoFunID>(
    NotifyEnterWedding_ProtoFunID_descriptor(), name, value);
}
enum stReqAgreeEnterWedding_Result {
  stReqAgreeEnterWedding_Result_RESULT_AGREE = 1,
  stReqAgreeEnterWedding_Result_RESULT_REFUSE = 2
};
bool stReqAgreeEnterWedding_Result_IsValid(int value);
const stReqAgreeEnterWedding_Result stReqAgreeEnterWedding_Result_Result_MIN = stReqAgreeEnterWedding_Result_RESULT_AGREE;
const stReqAgreeEnterWedding_Result stReqAgreeEnterWedding_Result_Result_MAX = stReqAgreeEnterWedding_Result_RESULT_REFUSE;
const int stReqAgreeEnterWedding_Result_Result_ARRAYSIZE = stReqAgreeEnterWedding_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeEnterWedding_Result_descriptor();
inline const ::std::string& stReqAgreeEnterWedding_Result_Name(stReqAgreeEnterWedding_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeEnterWedding_Result_descriptor(), value);
}
inline bool stReqAgreeEnterWedding_Result_Parse(
    const ::std::string& name, stReqAgreeEnterWedding_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeEnterWedding_Result>(
    stReqAgreeEnterWedding_Result_descriptor(), name, value);
}
enum stReqAgreeEnterWedding_ProtoModID {
  stReqAgreeEnterWedding_ProtoModID_ModID = 2
};
bool stReqAgreeEnterWedding_ProtoModID_IsValid(int value);
const stReqAgreeEnterWedding_ProtoModID stReqAgreeEnterWedding_ProtoModID_ProtoModID_MIN = stReqAgreeEnterWedding_ProtoModID_ModID;
const stReqAgreeEnterWedding_ProtoModID stReqAgreeEnterWedding_ProtoModID_ProtoModID_MAX = stReqAgreeEnterWedding_ProtoModID_ModID;
const int stReqAgreeEnterWedding_ProtoModID_ProtoModID_ARRAYSIZE = stReqAgreeEnterWedding_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeEnterWedding_ProtoModID_descriptor();
inline const ::std::string& stReqAgreeEnterWedding_ProtoModID_Name(stReqAgreeEnterWedding_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeEnterWedding_ProtoModID_descriptor(), value);
}
inline bool stReqAgreeEnterWedding_ProtoModID_Parse(
    const ::std::string& name, stReqAgreeEnterWedding_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeEnterWedding_ProtoModID>(
    stReqAgreeEnterWedding_ProtoModID_descriptor(), name, value);
}
enum stReqAgreeEnterWedding_ProtoFunID {
  stReqAgreeEnterWedding_ProtoFunID_FunID = 187
};
bool stReqAgreeEnterWedding_ProtoFunID_IsValid(int value);
const stReqAgreeEnterWedding_ProtoFunID stReqAgreeEnterWedding_ProtoFunID_ProtoFunID_MIN = stReqAgreeEnterWedding_ProtoFunID_FunID;
const stReqAgreeEnterWedding_ProtoFunID stReqAgreeEnterWedding_ProtoFunID_ProtoFunID_MAX = stReqAgreeEnterWedding_ProtoFunID_FunID;
const int stReqAgreeEnterWedding_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAgreeEnterWedding_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAgreeEnterWedding_ProtoFunID_descriptor();
inline const ::std::string& stReqAgreeEnterWedding_ProtoFunID_Name(stReqAgreeEnterWedding_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAgreeEnterWedding_ProtoFunID_descriptor(), value);
}
inline bool stReqAgreeEnterWedding_ProtoFunID_Parse(
    const ::std::string& name, stReqAgreeEnterWedding_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAgreeEnterWedding_ProtoFunID>(
    stReqAgreeEnterWedding_ProtoFunID_descriptor(), name, value);
}
enum ResultEnterWedding_Result {
  ResultEnterWedding_Result_RESULT_SUCCESS = 1,
  ResultEnterWedding_Result_RESULT_FAILURE = 2
};
bool ResultEnterWedding_Result_IsValid(int value);
const ResultEnterWedding_Result ResultEnterWedding_Result_Result_MIN = ResultEnterWedding_Result_RESULT_SUCCESS;
const ResultEnterWedding_Result ResultEnterWedding_Result_Result_MAX = ResultEnterWedding_Result_RESULT_FAILURE;
const int ResultEnterWedding_Result_Result_ARRAYSIZE = ResultEnterWedding_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultEnterWedding_Result_descriptor();
inline const ::std::string& ResultEnterWedding_Result_Name(ResultEnterWedding_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultEnterWedding_Result_descriptor(), value);
}
inline bool ResultEnterWedding_Result_Parse(
    const ::std::string& name, ResultEnterWedding_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultEnterWedding_Result>(
    ResultEnterWedding_Result_descriptor(), name, value);
}
enum ResultEnterWedding_ProtoModID {
  ResultEnterWedding_ProtoModID_ModID = 2
};
bool ResultEnterWedding_ProtoModID_IsValid(int value);
const ResultEnterWedding_ProtoModID ResultEnterWedding_ProtoModID_ProtoModID_MIN = ResultEnterWedding_ProtoModID_ModID;
const ResultEnterWedding_ProtoModID ResultEnterWedding_ProtoModID_ProtoModID_MAX = ResultEnterWedding_ProtoModID_ModID;
const int ResultEnterWedding_ProtoModID_ProtoModID_ARRAYSIZE = ResultEnterWedding_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultEnterWedding_ProtoModID_descriptor();
inline const ::std::string& ResultEnterWedding_ProtoModID_Name(ResultEnterWedding_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultEnterWedding_ProtoModID_descriptor(), value);
}
inline bool ResultEnterWedding_ProtoModID_Parse(
    const ::std::string& name, ResultEnterWedding_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultEnterWedding_ProtoModID>(
    ResultEnterWedding_ProtoModID_descriptor(), name, value);
}
enum ResultEnterWedding_ProtoFunID {
  ResultEnterWedding_ProtoFunID_FunID = 188
};
bool ResultEnterWedding_ProtoFunID_IsValid(int value);
const ResultEnterWedding_ProtoFunID ResultEnterWedding_ProtoFunID_ProtoFunID_MIN = ResultEnterWedding_ProtoFunID_FunID;
const ResultEnterWedding_ProtoFunID ResultEnterWedding_ProtoFunID_ProtoFunID_MAX = ResultEnterWedding_ProtoFunID_FunID;
const int ResultEnterWedding_ProtoFunID_ProtoFunID_ARRAYSIZE = ResultEnterWedding_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultEnterWedding_ProtoFunID_descriptor();
inline const ::std::string& ResultEnterWedding_ProtoFunID_Name(ResultEnterWedding_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultEnterWedding_ProtoFunID_descriptor(), value);
}
inline bool ResultEnterWedding_ProtoFunID_Parse(
    const ::std::string& name, ResultEnterWedding_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultEnterWedding_ProtoFunID>(
    ResultEnterWedding_ProtoFunID_descriptor(), name, value);
}
enum MarryInviterPlace_State {
  MarryInviterPlace_State_STATE_INVITER = 1,
  MarryInviterPlace_State_STATE_INVITEE = 2
};
bool MarryInviterPlace_State_IsValid(int value);
const MarryInviterPlace_State MarryInviterPlace_State_State_MIN = MarryInviterPlace_State_STATE_INVITER;
const MarryInviterPlace_State MarryInviterPlace_State_State_MAX = MarryInviterPlace_State_STATE_INVITEE;
const int MarryInviterPlace_State_State_ARRAYSIZE = MarryInviterPlace_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarryInviterPlace_State_descriptor();
inline const ::std::string& MarryInviterPlace_State_Name(MarryInviterPlace_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarryInviterPlace_State_descriptor(), value);
}
inline bool MarryInviterPlace_State_Parse(
    const ::std::string& name, MarryInviterPlace_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarryInviterPlace_State>(
    MarryInviterPlace_State_descriptor(), name, value);
}
enum MarryInviterPlace_ProtoModID {
  MarryInviterPlace_ProtoModID_ModID = 2
};
bool MarryInviterPlace_ProtoModID_IsValid(int value);
const MarryInviterPlace_ProtoModID MarryInviterPlace_ProtoModID_ProtoModID_MIN = MarryInviterPlace_ProtoModID_ModID;
const MarryInviterPlace_ProtoModID MarryInviterPlace_ProtoModID_ProtoModID_MAX = MarryInviterPlace_ProtoModID_ModID;
const int MarryInviterPlace_ProtoModID_ProtoModID_ARRAYSIZE = MarryInviterPlace_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarryInviterPlace_ProtoModID_descriptor();
inline const ::std::string& MarryInviterPlace_ProtoModID_Name(MarryInviterPlace_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarryInviterPlace_ProtoModID_descriptor(), value);
}
inline bool MarryInviterPlace_ProtoModID_Parse(
    const ::std::string& name, MarryInviterPlace_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarryInviterPlace_ProtoModID>(
    MarryInviterPlace_ProtoModID_descriptor(), name, value);
}
enum MarryInviterPlace_ProtoFunID {
  MarryInviterPlace_ProtoFunID_FunID = 189
};
bool MarryInviterPlace_ProtoFunID_IsValid(int value);
const MarryInviterPlace_ProtoFunID MarryInviterPlace_ProtoFunID_ProtoFunID_MIN = MarryInviterPlace_ProtoFunID_FunID;
const MarryInviterPlace_ProtoFunID MarryInviterPlace_ProtoFunID_ProtoFunID_MAX = MarryInviterPlace_ProtoFunID_FunID;
const int MarryInviterPlace_ProtoFunID_ProtoFunID_ARRAYSIZE = MarryInviterPlace_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* MarryInviterPlace_ProtoFunID_descriptor();
inline const ::std::string& MarryInviterPlace_ProtoFunID_Name(MarryInviterPlace_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    MarryInviterPlace_ProtoFunID_descriptor(), value);
}
inline bool MarryInviterPlace_ProtoFunID_Parse(
    const ::std::string& name, MarryInviterPlace_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MarryInviterPlace_ProtoFunID>(
    MarryInviterPlace_ProtoFunID_descriptor(), name, value);
}
enum stReqDivorce_ProtoModID {
  stReqDivorce_ProtoModID_ModID = 2
};
bool stReqDivorce_ProtoModID_IsValid(int value);
const stReqDivorce_ProtoModID stReqDivorce_ProtoModID_ProtoModID_MIN = stReqDivorce_ProtoModID_ModID;
const stReqDivorce_ProtoModID stReqDivorce_ProtoModID_ProtoModID_MAX = stReqDivorce_ProtoModID_ModID;
const int stReqDivorce_ProtoModID_ProtoModID_ARRAYSIZE = stReqDivorce_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDivorce_ProtoModID_descriptor();
inline const ::std::string& stReqDivorce_ProtoModID_Name(stReqDivorce_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDivorce_ProtoModID_descriptor(), value);
}
inline bool stReqDivorce_ProtoModID_Parse(
    const ::std::string& name, stReqDivorce_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDivorce_ProtoModID>(
    stReqDivorce_ProtoModID_descriptor(), name, value);
}
enum stReqDivorce_ProtoFunID {
  stReqDivorce_ProtoFunID_FunID = 190
};
bool stReqDivorce_ProtoFunID_IsValid(int value);
const stReqDivorce_ProtoFunID stReqDivorce_ProtoFunID_ProtoFunID_MIN = stReqDivorce_ProtoFunID_FunID;
const stReqDivorce_ProtoFunID stReqDivorce_ProtoFunID_ProtoFunID_MAX = stReqDivorce_ProtoFunID_FunID;
const int stReqDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDivorce_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDivorce_ProtoFunID_descriptor();
inline const ::std::string& stReqDivorce_ProtoFunID_Name(stReqDivorce_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDivorce_ProtoFunID_descriptor(), value);
}
inline bool stReqDivorce_ProtoFunID_Parse(
    const ::std::string& name, stReqDivorce_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDivorce_ProtoFunID>(
    stReqDivorce_ProtoFunID_descriptor(), name, value);
}
enum RejectDivorce_Result {
  RejectDivorce_Result_eSuccess = 1,
  RejectDivorce_Result_eCouple_Not_Onlie = 2,
  RejectDivorce_Result_eLess_Of_Diamond = 3,
  RejectDivorce_Result_eNo_Couple = 4
};
bool RejectDivorce_Result_IsValid(int value);
const RejectDivorce_Result RejectDivorce_Result_Result_MIN = RejectDivorce_Result_eSuccess;
const RejectDivorce_Result RejectDivorce_Result_Result_MAX = RejectDivorce_Result_eNo_Couple;
const int RejectDivorce_Result_Result_ARRAYSIZE = RejectDivorce_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* RejectDivorce_Result_descriptor();
inline const ::std::string& RejectDivorce_Result_Name(RejectDivorce_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    RejectDivorce_Result_descriptor(), value);
}
inline bool RejectDivorce_Result_Parse(
    const ::std::string& name, RejectDivorce_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RejectDivorce_Result>(
    RejectDivorce_Result_descriptor(), name, value);
}
enum RejectDivorce_ProtoModID {
  RejectDivorce_ProtoModID_ModID = 2
};
bool RejectDivorce_ProtoModID_IsValid(int value);
const RejectDivorce_ProtoModID RejectDivorce_ProtoModID_ProtoModID_MIN = RejectDivorce_ProtoModID_ModID;
const RejectDivorce_ProtoModID RejectDivorce_ProtoModID_ProtoModID_MAX = RejectDivorce_ProtoModID_ModID;
const int RejectDivorce_ProtoModID_ProtoModID_ARRAYSIZE = RejectDivorce_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RejectDivorce_ProtoModID_descriptor();
inline const ::std::string& RejectDivorce_ProtoModID_Name(RejectDivorce_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RejectDivorce_ProtoModID_descriptor(), value);
}
inline bool RejectDivorce_ProtoModID_Parse(
    const ::std::string& name, RejectDivorce_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RejectDivorce_ProtoModID>(
    RejectDivorce_ProtoModID_descriptor(), name, value);
}
enum RejectDivorce_ProtoFunID {
  RejectDivorce_ProtoFunID_FunID = 191
};
bool RejectDivorce_ProtoFunID_IsValid(int value);
const RejectDivorce_ProtoFunID RejectDivorce_ProtoFunID_ProtoFunID_MIN = RejectDivorce_ProtoFunID_FunID;
const RejectDivorce_ProtoFunID RejectDivorce_ProtoFunID_ProtoFunID_MAX = RejectDivorce_ProtoFunID_FunID;
const int RejectDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE = RejectDivorce_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* RejectDivorce_ProtoFunID_descriptor();
inline const ::std::string& RejectDivorce_ProtoFunID_Name(RejectDivorce_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    RejectDivorce_ProtoFunID_descriptor(), value);
}
inline bool RejectDivorce_ProtoFunID_Parse(
    const ::std::string& name, RejectDivorce_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RejectDivorce_ProtoFunID>(
    RejectDivorce_ProtoFunID_descriptor(), name, value);
}
enum stReqRejectDivorce_ProtoModID {
  stReqRejectDivorce_ProtoModID_ModID = 2
};
bool stReqRejectDivorce_ProtoModID_IsValid(int value);
const stReqRejectDivorce_ProtoModID stReqRejectDivorce_ProtoModID_ProtoModID_MIN = stReqRejectDivorce_ProtoModID_ModID;
const stReqRejectDivorce_ProtoModID stReqRejectDivorce_ProtoModID_ProtoModID_MAX = stReqRejectDivorce_ProtoModID_ModID;
const int stReqRejectDivorce_ProtoModID_ProtoModID_ARRAYSIZE = stReqRejectDivorce_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRejectDivorce_ProtoModID_descriptor();
inline const ::std::string& stReqRejectDivorce_ProtoModID_Name(stReqRejectDivorce_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRejectDivorce_ProtoModID_descriptor(), value);
}
inline bool stReqRejectDivorce_ProtoModID_Parse(
    const ::std::string& name, stReqRejectDivorce_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRejectDivorce_ProtoModID>(
    stReqRejectDivorce_ProtoModID_descriptor(), name, value);
}
enum stReqRejectDivorce_ProtoFunID {
  stReqRejectDivorce_ProtoFunID_FunID = 192
};
bool stReqRejectDivorce_ProtoFunID_IsValid(int value);
const stReqRejectDivorce_ProtoFunID stReqRejectDivorce_ProtoFunID_ProtoFunID_MIN = stReqRejectDivorce_ProtoFunID_FunID;
const stReqRejectDivorce_ProtoFunID stReqRejectDivorce_ProtoFunID_ProtoFunID_MAX = stReqRejectDivorce_ProtoFunID_FunID;
const int stReqRejectDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRejectDivorce_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRejectDivorce_ProtoFunID_descriptor();
inline const ::std::string& stReqRejectDivorce_ProtoFunID_Name(stReqRejectDivorce_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRejectDivorce_ProtoFunID_descriptor(), value);
}
inline bool stReqRejectDivorce_ProtoFunID_Parse(
    const ::std::string& name, stReqRejectDivorce_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRejectDivorce_ProtoFunID>(
    stReqRejectDivorce_ProtoFunID_descriptor(), name, value);
}
enum stRetRejectDivorce_Result {
  stRetRejectDivorce_Result_eSuccess = 1,
  stRetRejectDivorce_Result_eReject = 2,
  stRetRejectDivorce_Result_eNot_Marry = 3
};
bool stRetRejectDivorce_Result_IsValid(int value);
const stRetRejectDivorce_Result stRetRejectDivorce_Result_Result_MIN = stRetRejectDivorce_Result_eSuccess;
const stRetRejectDivorce_Result stRetRejectDivorce_Result_Result_MAX = stRetRejectDivorce_Result_eNot_Marry;
const int stRetRejectDivorce_Result_Result_ARRAYSIZE = stRetRejectDivorce_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_Result_descriptor();
inline const ::std::string& stRetRejectDivorce_Result_Name(stRetRejectDivorce_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRejectDivorce_Result_descriptor(), value);
}
inline bool stRetRejectDivorce_Result_Parse(
    const ::std::string& name, stRetRejectDivorce_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRejectDivorce_Result>(
    stRetRejectDivorce_Result_descriptor(), name, value);
}
enum stRetRejectDivorce_ProtoModID {
  stRetRejectDivorce_ProtoModID_ModID = 2
};
bool stRetRejectDivorce_ProtoModID_IsValid(int value);
const stRetRejectDivorce_ProtoModID stRetRejectDivorce_ProtoModID_ProtoModID_MIN = stRetRejectDivorce_ProtoModID_ModID;
const stRetRejectDivorce_ProtoModID stRetRejectDivorce_ProtoModID_ProtoModID_MAX = stRetRejectDivorce_ProtoModID_ModID;
const int stRetRejectDivorce_ProtoModID_ProtoModID_ARRAYSIZE = stRetRejectDivorce_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoModID_descriptor();
inline const ::std::string& stRetRejectDivorce_ProtoModID_Name(stRetRejectDivorce_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRejectDivorce_ProtoModID_descriptor(), value);
}
inline bool stRetRejectDivorce_ProtoModID_Parse(
    const ::std::string& name, stRetRejectDivorce_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRejectDivorce_ProtoModID>(
    stRetRejectDivorce_ProtoModID_descriptor(), name, value);
}
enum stRetRejectDivorce_ProtoFunID {
  stRetRejectDivorce_ProtoFunID_FunID = 193
};
bool stRetRejectDivorce_ProtoFunID_IsValid(int value);
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce_ProtoFunID_ProtoFunID_MIN = stRetRejectDivorce_ProtoFunID_FunID;
const stRetRejectDivorce_ProtoFunID stRetRejectDivorce_ProtoFunID_ProtoFunID_MAX = stRetRejectDivorce_ProtoFunID_FunID;
const int stRetRejectDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetRejectDivorce_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetRejectDivorce_ProtoFunID_descriptor();
inline const ::std::string& stRetRejectDivorce_ProtoFunID_Name(stRetRejectDivorce_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetRejectDivorce_ProtoFunID_descriptor(), value);
}
inline bool stRetRejectDivorce_ProtoFunID_Parse(
    const ::std::string& name, stRetRejectDivorce_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetRejectDivorce_ProtoFunID>(
    stRetRejectDivorce_ProtoFunID_descriptor(), name, value);
}
enum BoardcastMarryInfo_ProtoModID {
  BoardcastMarryInfo_ProtoModID_ModID = 2
};
bool BoardcastMarryInfo_ProtoModID_IsValid(int value);
const BoardcastMarryInfo_ProtoModID BoardcastMarryInfo_ProtoModID_ProtoModID_MIN = BoardcastMarryInfo_ProtoModID_ModID;
const BoardcastMarryInfo_ProtoModID BoardcastMarryInfo_ProtoModID_ProtoModID_MAX = BoardcastMarryInfo_ProtoModID_ModID;
const int BoardcastMarryInfo_ProtoModID_ProtoModID_ARRAYSIZE = BoardcastMarryInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* BoardcastMarryInfo_ProtoModID_descriptor();
inline const ::std::string& BoardcastMarryInfo_ProtoModID_Name(BoardcastMarryInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    BoardcastMarryInfo_ProtoModID_descriptor(), value);
}
inline bool BoardcastMarryInfo_ProtoModID_Parse(
    const ::std::string& name, BoardcastMarryInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BoardcastMarryInfo_ProtoModID>(
    BoardcastMarryInfo_ProtoModID_descriptor(), name, value);
}
enum BoardcastMarryInfo_ProtoFunID {
  BoardcastMarryInfo_ProtoFunID_FunID = 194
};
bool BoardcastMarryInfo_ProtoFunID_IsValid(int value);
const BoardcastMarryInfo_ProtoFunID BoardcastMarryInfo_ProtoFunID_ProtoFunID_MIN = BoardcastMarryInfo_ProtoFunID_FunID;
const BoardcastMarryInfo_ProtoFunID BoardcastMarryInfo_ProtoFunID_ProtoFunID_MAX = BoardcastMarryInfo_ProtoFunID_FunID;
const int BoardcastMarryInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = BoardcastMarryInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* BoardcastMarryInfo_ProtoFunID_descriptor();
inline const ::std::string& BoardcastMarryInfo_ProtoFunID_Name(BoardcastMarryInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    BoardcastMarryInfo_ProtoFunID_descriptor(), value);
}
inline bool BoardcastMarryInfo_ProtoFunID_Parse(
    const ::std::string& name, BoardcastMarryInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<BoardcastMarryInfo_ProtoFunID>(
    BoardcastMarryInfo_ProtoFunID_descriptor(), name, value);
}
enum stReqUseFirework_ProtoModID {
  stReqUseFirework_ProtoModID_ModID = 2
};
bool stReqUseFirework_ProtoModID_IsValid(int value);
const stReqUseFirework_ProtoModID stReqUseFirework_ProtoModID_ProtoModID_MIN = stReqUseFirework_ProtoModID_ModID;
const stReqUseFirework_ProtoModID stReqUseFirework_ProtoModID_ProtoModID_MAX = stReqUseFirework_ProtoModID_ModID;
const int stReqUseFirework_ProtoModID_ProtoModID_ARRAYSIZE = stReqUseFirework_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseFirework_ProtoModID_descriptor();
inline const ::std::string& stReqUseFirework_ProtoModID_Name(stReqUseFirework_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseFirework_ProtoModID_descriptor(), value);
}
inline bool stReqUseFirework_ProtoModID_Parse(
    const ::std::string& name, stReqUseFirework_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseFirework_ProtoModID>(
    stReqUseFirework_ProtoModID_descriptor(), name, value);
}
enum stReqUseFirework_ProtoFunID {
  stReqUseFirework_ProtoFunID_FunID = 195
};
bool stReqUseFirework_ProtoFunID_IsValid(int value);
const stReqUseFirework_ProtoFunID stReqUseFirework_ProtoFunID_ProtoFunID_MIN = stReqUseFirework_ProtoFunID_FunID;
const stReqUseFirework_ProtoFunID stReqUseFirework_ProtoFunID_ProtoFunID_MAX = stReqUseFirework_ProtoFunID_FunID;
const int stReqUseFirework_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUseFirework_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUseFirework_ProtoFunID_descriptor();
inline const ::std::string& stReqUseFirework_ProtoFunID_Name(stReqUseFirework_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUseFirework_ProtoFunID_descriptor(), value);
}
inline bool stReqUseFirework_ProtoFunID_Parse(
    const ::std::string& name, stReqUseFirework_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUseFirework_ProtoFunID>(
    stReqUseFirework_ProtoFunID_descriptor(), name, value);
}
enum ResultUseFirework_Result {
  ResultUseFirework_Result_RESULT_SUCCESS = 1,
  ResultUseFirework_Result_RESULT_FAILURE = 2
};
bool ResultUseFirework_Result_IsValid(int value);
const ResultUseFirework_Result ResultUseFirework_Result_Result_MIN = ResultUseFirework_Result_RESULT_SUCCESS;
const ResultUseFirework_Result ResultUseFirework_Result_Result_MAX = ResultUseFirework_Result_RESULT_FAILURE;
const int ResultUseFirework_Result_Result_ARRAYSIZE = ResultUseFirework_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultUseFirework_Result_descriptor();
inline const ::std::string& ResultUseFirework_Result_Name(ResultUseFirework_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultUseFirework_Result_descriptor(), value);
}
inline bool ResultUseFirework_Result_Parse(
    const ::std::string& name, ResultUseFirework_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultUseFirework_Result>(
    ResultUseFirework_Result_descriptor(), name, value);
}
enum ResultUseFirework_ProtoModID {
  ResultUseFirework_ProtoModID_ModID = 2
};
bool ResultUseFirework_ProtoModID_IsValid(int value);
const ResultUseFirework_ProtoModID ResultUseFirework_ProtoModID_ProtoModID_MIN = ResultUseFirework_ProtoModID_ModID;
const ResultUseFirework_ProtoModID ResultUseFirework_ProtoModID_ProtoModID_MAX = ResultUseFirework_ProtoModID_ModID;
const int ResultUseFirework_ProtoModID_ProtoModID_ARRAYSIZE = ResultUseFirework_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultUseFirework_ProtoModID_descriptor();
inline const ::std::string& ResultUseFirework_ProtoModID_Name(ResultUseFirework_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultUseFirework_ProtoModID_descriptor(), value);
}
inline bool ResultUseFirework_ProtoModID_Parse(
    const ::std::string& name, ResultUseFirework_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultUseFirework_ProtoModID>(
    ResultUseFirework_ProtoModID_descriptor(), name, value);
}
enum ResultUseFirework_ProtoFunID {
  ResultUseFirework_ProtoFunID_FunID = 196
};
bool ResultUseFirework_ProtoFunID_IsValid(int value);
const ResultUseFirework_ProtoFunID ResultUseFirework_ProtoFunID_ProtoFunID_MIN = ResultUseFirework_ProtoFunID_FunID;
const ResultUseFirework_ProtoFunID ResultUseFirework_ProtoFunID_ProtoFunID_MAX = ResultUseFirework_ProtoFunID_FunID;
const int ResultUseFirework_ProtoFunID_ProtoFunID_ARRAYSIZE = ResultUseFirework_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultUseFirework_ProtoFunID_descriptor();
inline const ::std::string& ResultUseFirework_ProtoFunID_Name(ResultUseFirework_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultUseFirework_ProtoFunID_descriptor(), value);
}
inline bool ResultUseFirework_ProtoFunID_Parse(
    const ::std::string& name, ResultUseFirework_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultUseFirework_ProtoFunID>(
    ResultUseFirework_ProtoFunID_descriptor(), name, value);
}
enum NotifyFirework_ProtoModID {
  NotifyFirework_ProtoModID_ModID = 2
};
bool NotifyFirework_ProtoModID_IsValid(int value);
const NotifyFirework_ProtoModID NotifyFirework_ProtoModID_ProtoModID_MIN = NotifyFirework_ProtoModID_ModID;
const NotifyFirework_ProtoModID NotifyFirework_ProtoModID_ProtoModID_MAX = NotifyFirework_ProtoModID_ModID;
const int NotifyFirework_ProtoModID_ProtoModID_ARRAYSIZE = NotifyFirework_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyFirework_ProtoModID_descriptor();
inline const ::std::string& NotifyFirework_ProtoModID_Name(NotifyFirework_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyFirework_ProtoModID_descriptor(), value);
}
inline bool NotifyFirework_ProtoModID_Parse(
    const ::std::string& name, NotifyFirework_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyFirework_ProtoModID>(
    NotifyFirework_ProtoModID_descriptor(), name, value);
}
enum NotifyFirework_ProtoFunID {
  NotifyFirework_ProtoFunID_FunID = 197
};
bool NotifyFirework_ProtoFunID_IsValid(int value);
const NotifyFirework_ProtoFunID NotifyFirework_ProtoFunID_ProtoFunID_MIN = NotifyFirework_ProtoFunID_FunID;
const NotifyFirework_ProtoFunID NotifyFirework_ProtoFunID_ProtoFunID_MAX = NotifyFirework_ProtoFunID_FunID;
const int NotifyFirework_ProtoFunID_ProtoFunID_ARRAYSIZE = NotifyFirework_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyFirework_ProtoFunID_descriptor();
inline const ::std::string& NotifyFirework_ProtoFunID_Name(NotifyFirework_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyFirework_ProtoFunID_descriptor(), value);
}
inline bool NotifyFirework_ProtoFunID_Parse(
    const ::std::string& name, NotifyFirework_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyFirework_ProtoFunID>(
    NotifyFirework_ProtoFunID_descriptor(), name, value);
}
enum stReqTakeCandy_ProtoModID {
  stReqTakeCandy_ProtoModID_ModID = 2
};
bool stReqTakeCandy_ProtoModID_IsValid(int value);
const stReqTakeCandy_ProtoModID stReqTakeCandy_ProtoModID_ProtoModID_MIN = stReqTakeCandy_ProtoModID_ModID;
const stReqTakeCandy_ProtoModID stReqTakeCandy_ProtoModID_ProtoModID_MAX = stReqTakeCandy_ProtoModID_ModID;
const int stReqTakeCandy_ProtoModID_ProtoModID_ARRAYSIZE = stReqTakeCandy_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoModID_descriptor();
inline const ::std::string& stReqTakeCandy_ProtoModID_Name(stReqTakeCandy_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqTakeCandy_ProtoModID_descriptor(), value);
}
inline bool stReqTakeCandy_ProtoModID_Parse(
    const ::std::string& name, stReqTakeCandy_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqTakeCandy_ProtoModID>(
    stReqTakeCandy_ProtoModID_descriptor(), name, value);
}
enum stReqTakeCandy_ProtoFunID {
  stReqTakeCandy_ProtoFunID_FunID = 198
};
bool stReqTakeCandy_ProtoFunID_IsValid(int value);
const stReqTakeCandy_ProtoFunID stReqTakeCandy_ProtoFunID_ProtoFunID_MIN = stReqTakeCandy_ProtoFunID_FunID;
const stReqTakeCandy_ProtoFunID stReqTakeCandy_ProtoFunID_ProtoFunID_MAX = stReqTakeCandy_ProtoFunID_FunID;
const int stReqTakeCandy_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqTakeCandy_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqTakeCandy_ProtoFunID_descriptor();
inline const ::std::string& stReqTakeCandy_ProtoFunID_Name(stReqTakeCandy_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqTakeCandy_ProtoFunID_descriptor(), value);
}
inline bool stReqTakeCandy_ProtoFunID_Parse(
    const ::std::string& name, stReqTakeCandy_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqTakeCandy_ProtoFunID>(
    stReqTakeCandy_ProtoFunID_descriptor(), name, value);
}
enum ResultTakeCandy_Result {
  ResultTakeCandy_Result_RESULT_SUCCESS = 1,
  ResultTakeCandy_Result_RESULT_FAILURE = 2
};
bool ResultTakeCandy_Result_IsValid(int value);
const ResultTakeCandy_Result ResultTakeCandy_Result_Result_MIN = ResultTakeCandy_Result_RESULT_SUCCESS;
const ResultTakeCandy_Result ResultTakeCandy_Result_Result_MAX = ResultTakeCandy_Result_RESULT_FAILURE;
const int ResultTakeCandy_Result_Result_ARRAYSIZE = ResultTakeCandy_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultTakeCandy_Result_descriptor();
inline const ::std::string& ResultTakeCandy_Result_Name(ResultTakeCandy_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultTakeCandy_Result_descriptor(), value);
}
inline bool ResultTakeCandy_Result_Parse(
    const ::std::string& name, ResultTakeCandy_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultTakeCandy_Result>(
    ResultTakeCandy_Result_descriptor(), name, value);
}
enum ResultTakeCandy_ProtoModID {
  ResultTakeCandy_ProtoModID_ModID = 2
};
bool ResultTakeCandy_ProtoModID_IsValid(int value);
const ResultTakeCandy_ProtoModID ResultTakeCandy_ProtoModID_ProtoModID_MIN = ResultTakeCandy_ProtoModID_ModID;
const ResultTakeCandy_ProtoModID ResultTakeCandy_ProtoModID_ProtoModID_MAX = ResultTakeCandy_ProtoModID_ModID;
const int ResultTakeCandy_ProtoModID_ProtoModID_ARRAYSIZE = ResultTakeCandy_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultTakeCandy_ProtoModID_descriptor();
inline const ::std::string& ResultTakeCandy_ProtoModID_Name(ResultTakeCandy_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultTakeCandy_ProtoModID_descriptor(), value);
}
inline bool ResultTakeCandy_ProtoModID_Parse(
    const ::std::string& name, ResultTakeCandy_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultTakeCandy_ProtoModID>(
    ResultTakeCandy_ProtoModID_descriptor(), name, value);
}
enum ResultTakeCandy_ProtoFunID {
  ResultTakeCandy_ProtoFunID_FunID = 199
};
bool ResultTakeCandy_ProtoFunID_IsValid(int value);
const ResultTakeCandy_ProtoFunID ResultTakeCandy_ProtoFunID_ProtoFunID_MIN = ResultTakeCandy_ProtoFunID_FunID;
const ResultTakeCandy_ProtoFunID ResultTakeCandy_ProtoFunID_ProtoFunID_MAX = ResultTakeCandy_ProtoFunID_FunID;
const int ResultTakeCandy_ProtoFunID_ProtoFunID_ARRAYSIZE = ResultTakeCandy_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultTakeCandy_ProtoFunID_descriptor();
inline const ::std::string& ResultTakeCandy_ProtoFunID_Name(ResultTakeCandy_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultTakeCandy_ProtoFunID_descriptor(), value);
}
inline bool ResultTakeCandy_ProtoFunID_Parse(
    const ::std::string& name, ResultTakeCandy_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultTakeCandy_ProtoFunID>(
    ResultTakeCandy_ProtoFunID_descriptor(), name, value);
}
enum stReqBuyFirework_ProtoModID {
  stReqBuyFirework_ProtoModID_ModID = 2
};
bool stReqBuyFirework_ProtoModID_IsValid(int value);
const stReqBuyFirework_ProtoModID stReqBuyFirework_ProtoModID_ProtoModID_MIN = stReqBuyFirework_ProtoModID_ModID;
const stReqBuyFirework_ProtoModID stReqBuyFirework_ProtoModID_ProtoModID_MAX = stReqBuyFirework_ProtoModID_ModID;
const int stReqBuyFirework_ProtoModID_ProtoModID_ARRAYSIZE = stReqBuyFirework_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyFirework_ProtoModID_descriptor();
inline const ::std::string& stReqBuyFirework_ProtoModID_Name(stReqBuyFirework_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyFirework_ProtoModID_descriptor(), value);
}
inline bool stReqBuyFirework_ProtoModID_Parse(
    const ::std::string& name, stReqBuyFirework_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyFirework_ProtoModID>(
    stReqBuyFirework_ProtoModID_descriptor(), name, value);
}
enum stReqBuyFirework_ProtoFunID {
  stReqBuyFirework_ProtoFunID_FunID = 200
};
bool stReqBuyFirework_ProtoFunID_IsValid(int value);
const stReqBuyFirework_ProtoFunID stReqBuyFirework_ProtoFunID_ProtoFunID_MIN = stReqBuyFirework_ProtoFunID_FunID;
const stReqBuyFirework_ProtoFunID stReqBuyFirework_ProtoFunID_ProtoFunID_MAX = stReqBuyFirework_ProtoFunID_FunID;
const int stReqBuyFirework_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBuyFirework_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyFirework_ProtoFunID_descriptor();
inline const ::std::string& stReqBuyFirework_ProtoFunID_Name(stReqBuyFirework_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyFirework_ProtoFunID_descriptor(), value);
}
inline bool stReqBuyFirework_ProtoFunID_Parse(
    const ::std::string& name, stReqBuyFirework_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyFirework_ProtoFunID>(
    stReqBuyFirework_ProtoFunID_descriptor(), name, value);
}
enum ResultBuyFirework_Result {
  ResultBuyFirework_Result_RESULT_SUCCESS = 1,
  ResultBuyFirework_Result_RESULT_FAILURE = 2
};
bool ResultBuyFirework_Result_IsValid(int value);
const ResultBuyFirework_Result ResultBuyFirework_Result_Result_MIN = ResultBuyFirework_Result_RESULT_SUCCESS;
const ResultBuyFirework_Result ResultBuyFirework_Result_Result_MAX = ResultBuyFirework_Result_RESULT_FAILURE;
const int ResultBuyFirework_Result_Result_ARRAYSIZE = ResultBuyFirework_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultBuyFirework_Result_descriptor();
inline const ::std::string& ResultBuyFirework_Result_Name(ResultBuyFirework_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultBuyFirework_Result_descriptor(), value);
}
inline bool ResultBuyFirework_Result_Parse(
    const ::std::string& name, ResultBuyFirework_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultBuyFirework_Result>(
    ResultBuyFirework_Result_descriptor(), name, value);
}
enum ResultBuyFirework_ProtoModID {
  ResultBuyFirework_ProtoModID_ModID = 2
};
bool ResultBuyFirework_ProtoModID_IsValid(int value);
const ResultBuyFirework_ProtoModID ResultBuyFirework_ProtoModID_ProtoModID_MIN = ResultBuyFirework_ProtoModID_ModID;
const ResultBuyFirework_ProtoModID ResultBuyFirework_ProtoModID_ProtoModID_MAX = ResultBuyFirework_ProtoModID_ModID;
const int ResultBuyFirework_ProtoModID_ProtoModID_ARRAYSIZE = ResultBuyFirework_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultBuyFirework_ProtoModID_descriptor();
inline const ::std::string& ResultBuyFirework_ProtoModID_Name(ResultBuyFirework_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultBuyFirework_ProtoModID_descriptor(), value);
}
inline bool ResultBuyFirework_ProtoModID_Parse(
    const ::std::string& name, ResultBuyFirework_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultBuyFirework_ProtoModID>(
    ResultBuyFirework_ProtoModID_descriptor(), name, value);
}
enum ResultBuyFirework_ProtoFunID {
  ResultBuyFirework_ProtoFunID_FunID = 201
};
bool ResultBuyFirework_ProtoFunID_IsValid(int value);
const ResultBuyFirework_ProtoFunID ResultBuyFirework_ProtoFunID_ProtoFunID_MIN = ResultBuyFirework_ProtoFunID_FunID;
const ResultBuyFirework_ProtoFunID ResultBuyFirework_ProtoFunID_ProtoFunID_MAX = ResultBuyFirework_ProtoFunID_FunID;
const int ResultBuyFirework_ProtoFunID_ProtoFunID_ARRAYSIZE = ResultBuyFirework_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultBuyFirework_ProtoFunID_descriptor();
inline const ::std::string& ResultBuyFirework_ProtoFunID_Name(ResultBuyFirework_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultBuyFirework_ProtoFunID_descriptor(), value);
}
inline bool ResultBuyFirework_ProtoFunID_Parse(
    const ::std::string& name, ResultBuyFirework_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultBuyFirework_ProtoFunID>(
    ResultBuyFirework_ProtoFunID_descriptor(), name, value);
}
enum stReqEnterWeddingAlone_ProtoModID {
  stReqEnterWeddingAlone_ProtoModID_ModID = 2
};
bool stReqEnterWeddingAlone_ProtoModID_IsValid(int value);
const stReqEnterWeddingAlone_ProtoModID stReqEnterWeddingAlone_ProtoModID_ProtoModID_MIN = stReqEnterWeddingAlone_ProtoModID_ModID;
const stReqEnterWeddingAlone_ProtoModID stReqEnterWeddingAlone_ProtoModID_ProtoModID_MAX = stReqEnterWeddingAlone_ProtoModID_ModID;
const int stReqEnterWeddingAlone_ProtoModID_ProtoModID_ARRAYSIZE = stReqEnterWeddingAlone_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterWeddingAlone_ProtoModID_descriptor();
inline const ::std::string& stReqEnterWeddingAlone_ProtoModID_Name(stReqEnterWeddingAlone_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterWeddingAlone_ProtoModID_descriptor(), value);
}
inline bool stReqEnterWeddingAlone_ProtoModID_Parse(
    const ::std::string& name, stReqEnterWeddingAlone_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterWeddingAlone_ProtoModID>(
    stReqEnterWeddingAlone_ProtoModID_descriptor(), name, value);
}
enum stReqEnterWeddingAlone_ProtoFunID {
  stReqEnterWeddingAlone_ProtoFunID_FunID = 202
};
bool stReqEnterWeddingAlone_ProtoFunID_IsValid(int value);
const stReqEnterWeddingAlone_ProtoFunID stReqEnterWeddingAlone_ProtoFunID_ProtoFunID_MIN = stReqEnterWeddingAlone_ProtoFunID_FunID;
const stReqEnterWeddingAlone_ProtoFunID stReqEnterWeddingAlone_ProtoFunID_ProtoFunID_MAX = stReqEnterWeddingAlone_ProtoFunID_FunID;
const int stReqEnterWeddingAlone_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqEnterWeddingAlone_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqEnterWeddingAlone_ProtoFunID_descriptor();
inline const ::std::string& stReqEnterWeddingAlone_ProtoFunID_Name(stReqEnterWeddingAlone_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqEnterWeddingAlone_ProtoFunID_descriptor(), value);
}
inline bool stReqEnterWeddingAlone_ProtoFunID_Parse(
    const ::std::string& name, stReqEnterWeddingAlone_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqEnterWeddingAlone_ProtoFunID>(
    stReqEnterWeddingAlone_ProtoFunID_descriptor(), name, value);
}
enum ResultEnterWeddingAlone_Result {
  ResultEnterWeddingAlone_Result_RESULT_SUCCESS = 1,
  ResultEnterWeddingAlone_Result_RESULT_FAILURE = 2
};
bool ResultEnterWeddingAlone_Result_IsValid(int value);
const ResultEnterWeddingAlone_Result ResultEnterWeddingAlone_Result_Result_MIN = ResultEnterWeddingAlone_Result_RESULT_SUCCESS;
const ResultEnterWeddingAlone_Result ResultEnterWeddingAlone_Result_Result_MAX = ResultEnterWeddingAlone_Result_RESULT_FAILURE;
const int ResultEnterWeddingAlone_Result_Result_ARRAYSIZE = ResultEnterWeddingAlone_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultEnterWeddingAlone_Result_descriptor();
inline const ::std::string& ResultEnterWeddingAlone_Result_Name(ResultEnterWeddingAlone_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultEnterWeddingAlone_Result_descriptor(), value);
}
inline bool ResultEnterWeddingAlone_Result_Parse(
    const ::std::string& name, ResultEnterWeddingAlone_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultEnterWeddingAlone_Result>(
    ResultEnterWeddingAlone_Result_descriptor(), name, value);
}
enum ResultEnterWeddingAlone_ProtoModID {
  ResultEnterWeddingAlone_ProtoModID_ModID = 2
};
bool ResultEnterWeddingAlone_ProtoModID_IsValid(int value);
const ResultEnterWeddingAlone_ProtoModID ResultEnterWeddingAlone_ProtoModID_ProtoModID_MIN = ResultEnterWeddingAlone_ProtoModID_ModID;
const ResultEnterWeddingAlone_ProtoModID ResultEnterWeddingAlone_ProtoModID_ProtoModID_MAX = ResultEnterWeddingAlone_ProtoModID_ModID;
const int ResultEnterWeddingAlone_ProtoModID_ProtoModID_ARRAYSIZE = ResultEnterWeddingAlone_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultEnterWeddingAlone_ProtoModID_descriptor();
inline const ::std::string& ResultEnterWeddingAlone_ProtoModID_Name(ResultEnterWeddingAlone_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultEnterWeddingAlone_ProtoModID_descriptor(), value);
}
inline bool ResultEnterWeddingAlone_ProtoModID_Parse(
    const ::std::string& name, ResultEnterWeddingAlone_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultEnterWeddingAlone_ProtoModID>(
    ResultEnterWeddingAlone_ProtoModID_descriptor(), name, value);
}
enum ResultEnterWeddingAlone_ProtoFunID {
  ResultEnterWeddingAlone_ProtoFunID_FunID = 203
};
bool ResultEnterWeddingAlone_ProtoFunID_IsValid(int value);
const ResultEnterWeddingAlone_ProtoFunID ResultEnterWeddingAlone_ProtoFunID_ProtoFunID_MIN = ResultEnterWeddingAlone_ProtoFunID_FunID;
const ResultEnterWeddingAlone_ProtoFunID ResultEnterWeddingAlone_ProtoFunID_ProtoFunID_MAX = ResultEnterWeddingAlone_ProtoFunID_FunID;
const int ResultEnterWeddingAlone_ProtoFunID_ProtoFunID_ARRAYSIZE = ResultEnterWeddingAlone_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* ResultEnterWeddingAlone_ProtoFunID_descriptor();
inline const ::std::string& ResultEnterWeddingAlone_ProtoFunID_Name(ResultEnterWeddingAlone_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    ResultEnterWeddingAlone_ProtoFunID_descriptor(), value);
}
inline bool ResultEnterWeddingAlone_ProtoFunID_Parse(
    const ::std::string& name, ResultEnterWeddingAlone_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ResultEnterWeddingAlone_ProtoFunID>(
    ResultEnterWeddingAlone_ProtoFunID_descriptor(), name, value);
}
enum stReqQuitWeddingScene_ProtoModID {
  stReqQuitWeddingScene_ProtoModID_ModID = 2
};
bool stReqQuitWeddingScene_ProtoModID_IsValid(int value);
const stReqQuitWeddingScene_ProtoModID stReqQuitWeddingScene_ProtoModID_ProtoModID_MIN = stReqQuitWeddingScene_ProtoModID_ModID;
const stReqQuitWeddingScene_ProtoModID stReqQuitWeddingScene_ProtoModID_ProtoModID_MAX = stReqQuitWeddingScene_ProtoModID_ModID;
const int stReqQuitWeddingScene_ProtoModID_ProtoModID_ARRAYSIZE = stReqQuitWeddingScene_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqQuitWeddingScene_ProtoModID_descriptor();
inline const ::std::string& stReqQuitWeddingScene_ProtoModID_Name(stReqQuitWeddingScene_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqQuitWeddingScene_ProtoModID_descriptor(), value);
}
inline bool stReqQuitWeddingScene_ProtoModID_Parse(
    const ::std::string& name, stReqQuitWeddingScene_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqQuitWeddingScene_ProtoModID>(
    stReqQuitWeddingScene_ProtoModID_descriptor(), name, value);
}
enum stReqQuitWeddingScene_ProtoFunID {
  stReqQuitWeddingScene_ProtoFunID_FunID = 204
};
bool stReqQuitWeddingScene_ProtoFunID_IsValid(int value);
const stReqQuitWeddingScene_ProtoFunID stReqQuitWeddingScene_ProtoFunID_ProtoFunID_MIN = stReqQuitWeddingScene_ProtoFunID_FunID;
const stReqQuitWeddingScene_ProtoFunID stReqQuitWeddingScene_ProtoFunID_ProtoFunID_MAX = stReqQuitWeddingScene_ProtoFunID_FunID;
const int stReqQuitWeddingScene_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqQuitWeddingScene_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqQuitWeddingScene_ProtoFunID_descriptor();
inline const ::std::string& stReqQuitWeddingScene_ProtoFunID_Name(stReqQuitWeddingScene_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqQuitWeddingScene_ProtoFunID_descriptor(), value);
}
inline bool stReqQuitWeddingScene_ProtoFunID_Parse(
    const ::std::string& name, stReqQuitWeddingScene_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqQuitWeddingScene_ProtoFunID>(
    stReqQuitWeddingScene_ProtoFunID_descriptor(), name, value);
}
enum stRetQuitWeddingScene_Result {
  stRetQuitWeddingScene_Result_eSuccess = 1,
  stRetQuitWeddingScene_Result_eNot_In_Scene = 2
};
bool stRetQuitWeddingScene_Result_IsValid(int value);
const stRetQuitWeddingScene_Result stRetQuitWeddingScene_Result_Result_MIN = stRetQuitWeddingScene_Result_eSuccess;
const stRetQuitWeddingScene_Result stRetQuitWeddingScene_Result_Result_MAX = stRetQuitWeddingScene_Result_eNot_In_Scene;
const int stRetQuitWeddingScene_Result_Result_ARRAYSIZE = stRetQuitWeddingScene_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetQuitWeddingScene_Result_descriptor();
inline const ::std::string& stRetQuitWeddingScene_Result_Name(stRetQuitWeddingScene_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetQuitWeddingScene_Result_descriptor(), value);
}
inline bool stRetQuitWeddingScene_Result_Parse(
    const ::std::string& name, stRetQuitWeddingScene_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetQuitWeddingScene_Result>(
    stRetQuitWeddingScene_Result_descriptor(), name, value);
}
enum stRetQuitWeddingScene_ProtoModID {
  stRetQuitWeddingScene_ProtoModID_ModID = 2
};
bool stRetQuitWeddingScene_ProtoModID_IsValid(int value);
const stRetQuitWeddingScene_ProtoModID stRetQuitWeddingScene_ProtoModID_ProtoModID_MIN = stRetQuitWeddingScene_ProtoModID_ModID;
const stRetQuitWeddingScene_ProtoModID stRetQuitWeddingScene_ProtoModID_ProtoModID_MAX = stRetQuitWeddingScene_ProtoModID_ModID;
const int stRetQuitWeddingScene_ProtoModID_ProtoModID_ARRAYSIZE = stRetQuitWeddingScene_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetQuitWeddingScene_ProtoModID_descriptor();
inline const ::std::string& stRetQuitWeddingScene_ProtoModID_Name(stRetQuitWeddingScene_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetQuitWeddingScene_ProtoModID_descriptor(), value);
}
inline bool stRetQuitWeddingScene_ProtoModID_Parse(
    const ::std::string& name, stRetQuitWeddingScene_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetQuitWeddingScene_ProtoModID>(
    stRetQuitWeddingScene_ProtoModID_descriptor(), name, value);
}
enum stRetQuitWeddingScene_ProtoFunID {
  stRetQuitWeddingScene_ProtoFunID_FunID = 205
};
bool stRetQuitWeddingScene_ProtoFunID_IsValid(int value);
const stRetQuitWeddingScene_ProtoFunID stRetQuitWeddingScene_ProtoFunID_ProtoFunID_MIN = stRetQuitWeddingScene_ProtoFunID_FunID;
const stRetQuitWeddingScene_ProtoFunID stRetQuitWeddingScene_ProtoFunID_ProtoFunID_MAX = stRetQuitWeddingScene_ProtoFunID_FunID;
const int stRetQuitWeddingScene_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetQuitWeddingScene_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetQuitWeddingScene_ProtoFunID_descriptor();
inline const ::std::string& stRetQuitWeddingScene_ProtoFunID_Name(stRetQuitWeddingScene_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetQuitWeddingScene_ProtoFunID_descriptor(), value);
}
inline bool stRetQuitWeddingScene_ProtoFunID_Parse(
    const ::std::string& name, stRetQuitWeddingScene_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetQuitWeddingScene_ProtoFunID>(
    stRetQuitWeddingScene_ProtoFunID_descriptor(), name, value);
}
enum stNotifyFriendAction_ProtoModID {
  stNotifyFriendAction_ProtoModID_ModID = 2
};
bool stNotifyFriendAction_ProtoModID_IsValid(int value);
const stNotifyFriendAction_ProtoModID stNotifyFriendAction_ProtoModID_ProtoModID_MIN = stNotifyFriendAction_ProtoModID_ModID;
const stNotifyFriendAction_ProtoModID stNotifyFriendAction_ProtoModID_ProtoModID_MAX = stNotifyFriendAction_ProtoModID_ModID;
const int stNotifyFriendAction_ProtoModID_ProtoModID_ARRAYSIZE = stNotifyFriendAction_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFriendAction_ProtoModID_descriptor();
inline const ::std::string& stNotifyFriendAction_ProtoModID_Name(stNotifyFriendAction_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFriendAction_ProtoModID_descriptor(), value);
}
inline bool stNotifyFriendAction_ProtoModID_Parse(
    const ::std::string& name, stNotifyFriendAction_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFriendAction_ProtoModID>(
    stNotifyFriendAction_ProtoModID_descriptor(), name, value);
}
enum stNotifyFriendAction_ProtoFunID {
  stNotifyFriendAction_ProtoFunID_FunID = 206
};
bool stNotifyFriendAction_ProtoFunID_IsValid(int value);
const stNotifyFriendAction_ProtoFunID stNotifyFriendAction_ProtoFunID_ProtoFunID_MIN = stNotifyFriendAction_ProtoFunID_FunID;
const stNotifyFriendAction_ProtoFunID stNotifyFriendAction_ProtoFunID_ProtoFunID_MAX = stNotifyFriendAction_ProtoFunID_FunID;
const int stNotifyFriendAction_ProtoFunID_ProtoFunID_ARRAYSIZE = stNotifyFriendAction_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNotifyFriendAction_ProtoFunID_descriptor();
inline const ::std::string& stNotifyFriendAction_ProtoFunID_Name(stNotifyFriendAction_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNotifyFriendAction_ProtoFunID_descriptor(), value);
}
inline bool stNotifyFriendAction_ProtoFunID_Parse(
    const ::std::string& name, stNotifyFriendAction_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNotifyFriendAction_ProtoFunID>(
    stNotifyFriendAction_ProtoFunID_descriptor(), name, value);
}
enum stSendCharCreateTime_ProtoModID {
  stSendCharCreateTime_ProtoModID_ModID = 2
};
bool stSendCharCreateTime_ProtoModID_IsValid(int value);
const stSendCharCreateTime_ProtoModID stSendCharCreateTime_ProtoModID_ProtoModID_MIN = stSendCharCreateTime_ProtoModID_ModID;
const stSendCharCreateTime_ProtoModID stSendCharCreateTime_ProtoModID_ProtoModID_MAX = stSendCharCreateTime_ProtoModID_ModID;
const int stSendCharCreateTime_ProtoModID_ProtoModID_ARRAYSIZE = stSendCharCreateTime_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendCharCreateTime_ProtoModID_descriptor();
inline const ::std::string& stSendCharCreateTime_ProtoModID_Name(stSendCharCreateTime_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendCharCreateTime_ProtoModID_descriptor(), value);
}
inline bool stSendCharCreateTime_ProtoModID_Parse(
    const ::std::string& name, stSendCharCreateTime_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendCharCreateTime_ProtoModID>(
    stSendCharCreateTime_ProtoModID_descriptor(), name, value);
}
enum stSendCharCreateTime_ProtoFunID {
  stSendCharCreateTime_ProtoFunID_FunID = 207
};
bool stSendCharCreateTime_ProtoFunID_IsValid(int value);
const stSendCharCreateTime_ProtoFunID stSendCharCreateTime_ProtoFunID_ProtoFunID_MIN = stSendCharCreateTime_ProtoFunID_FunID;
const stSendCharCreateTime_ProtoFunID stSendCharCreateTime_ProtoFunID_ProtoFunID_MAX = stSendCharCreateTime_ProtoFunID_FunID;
const int stSendCharCreateTime_ProtoFunID_ProtoFunID_ARRAYSIZE = stSendCharCreateTime_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSendCharCreateTime_ProtoFunID_descriptor();
inline const ::std::string& stSendCharCreateTime_ProtoFunID_Name(stSendCharCreateTime_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSendCharCreateTime_ProtoFunID_descriptor(), value);
}
inline bool stSendCharCreateTime_ProtoFunID_Parse(
    const ::std::string& name, stSendCharCreateTime_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSendCharCreateTime_ProtoFunID>(
    stSendCharCreateTime_ProtoFunID_descriptor(), name, value);
}
enum stReqDrawWeddingRing_ProtoModID {
  stReqDrawWeddingRing_ProtoModID_ModID = 2
};
bool stReqDrawWeddingRing_ProtoModID_IsValid(int value);
const stReqDrawWeddingRing_ProtoModID stReqDrawWeddingRing_ProtoModID_ProtoModID_MIN = stReqDrawWeddingRing_ProtoModID_ModID;
const stReqDrawWeddingRing_ProtoModID stReqDrawWeddingRing_ProtoModID_ProtoModID_MAX = stReqDrawWeddingRing_ProtoModID_ModID;
const int stReqDrawWeddingRing_ProtoModID_ProtoModID_ARRAYSIZE = stReqDrawWeddingRing_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawWeddingRing_ProtoModID_descriptor();
inline const ::std::string& stReqDrawWeddingRing_ProtoModID_Name(stReqDrawWeddingRing_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawWeddingRing_ProtoModID_descriptor(), value);
}
inline bool stReqDrawWeddingRing_ProtoModID_Parse(
    const ::std::string& name, stReqDrawWeddingRing_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawWeddingRing_ProtoModID>(
    stReqDrawWeddingRing_ProtoModID_descriptor(), name, value);
}
enum stReqDrawWeddingRing_ProtoFunID {
  stReqDrawWeddingRing_ProtoFunID_FunID = 208
};
bool stReqDrawWeddingRing_ProtoFunID_IsValid(int value);
const stReqDrawWeddingRing_ProtoFunID stReqDrawWeddingRing_ProtoFunID_ProtoFunID_MIN = stReqDrawWeddingRing_ProtoFunID_FunID;
const stReqDrawWeddingRing_ProtoFunID stReqDrawWeddingRing_ProtoFunID_ProtoFunID_MAX = stReqDrawWeddingRing_ProtoFunID_FunID;
const int stReqDrawWeddingRing_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqDrawWeddingRing_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqDrawWeddingRing_ProtoFunID_descriptor();
inline const ::std::string& stReqDrawWeddingRing_ProtoFunID_Name(stReqDrawWeddingRing_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqDrawWeddingRing_ProtoFunID_descriptor(), value);
}
inline bool stReqDrawWeddingRing_ProtoFunID_Parse(
    const ::std::string& name, stReqDrawWeddingRing_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqDrawWeddingRing_ProtoFunID>(
    stReqDrawWeddingRing_ProtoFunID_descriptor(), name, value);
}
enum stRetDrawWeddingRing_Result {
  stRetDrawWeddingRing_Result_eSuccess = 1,
  stRetDrawWeddingRing_Result_eNot_In_Scene = 2,
  stRetDrawWeddingRing_Result_eAready_Draw = 3,
  stRetDrawWeddingRing_Result_eNot_Marry = 4,
  stRetDrawWeddingRing_Result_eInner_Error = 5
};
bool stRetDrawWeddingRing_Result_IsValid(int value);
const stRetDrawWeddingRing_Result stRetDrawWeddingRing_Result_Result_MIN = stRetDrawWeddingRing_Result_eSuccess;
const stRetDrawWeddingRing_Result stRetDrawWeddingRing_Result_Result_MAX = stRetDrawWeddingRing_Result_eInner_Error;
const int stRetDrawWeddingRing_Result_Result_ARRAYSIZE = stRetDrawWeddingRing_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawWeddingRing_Result_descriptor();
inline const ::std::string& stRetDrawWeddingRing_Result_Name(stRetDrawWeddingRing_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawWeddingRing_Result_descriptor(), value);
}
inline bool stRetDrawWeddingRing_Result_Parse(
    const ::std::string& name, stRetDrawWeddingRing_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawWeddingRing_Result>(
    stRetDrawWeddingRing_Result_descriptor(), name, value);
}
enum stRetDrawWeddingRing_ProtoModID {
  stRetDrawWeddingRing_ProtoModID_ModID = 2
};
bool stRetDrawWeddingRing_ProtoModID_IsValid(int value);
const stRetDrawWeddingRing_ProtoModID stRetDrawWeddingRing_ProtoModID_ProtoModID_MIN = stRetDrawWeddingRing_ProtoModID_ModID;
const stRetDrawWeddingRing_ProtoModID stRetDrawWeddingRing_ProtoModID_ProtoModID_MAX = stRetDrawWeddingRing_ProtoModID_ModID;
const int stRetDrawWeddingRing_ProtoModID_ProtoModID_ARRAYSIZE = stRetDrawWeddingRing_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawWeddingRing_ProtoModID_descriptor();
inline const ::std::string& stRetDrawWeddingRing_ProtoModID_Name(stRetDrawWeddingRing_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawWeddingRing_ProtoModID_descriptor(), value);
}
inline bool stRetDrawWeddingRing_ProtoModID_Parse(
    const ::std::string& name, stRetDrawWeddingRing_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawWeddingRing_ProtoModID>(
    stRetDrawWeddingRing_ProtoModID_descriptor(), name, value);
}
enum stRetDrawWeddingRing_ProtoFunID {
  stRetDrawWeddingRing_ProtoFunID_FunID = 209
};
bool stRetDrawWeddingRing_ProtoFunID_IsValid(int value);
const stRetDrawWeddingRing_ProtoFunID stRetDrawWeddingRing_ProtoFunID_ProtoFunID_MIN = stRetDrawWeddingRing_ProtoFunID_FunID;
const stRetDrawWeddingRing_ProtoFunID stRetDrawWeddingRing_ProtoFunID_ProtoFunID_MAX = stRetDrawWeddingRing_ProtoFunID_FunID;
const int stRetDrawWeddingRing_ProtoFunID_ProtoFunID_ARRAYSIZE = stRetDrawWeddingRing_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRetDrawWeddingRing_ProtoFunID_descriptor();
inline const ::std::string& stRetDrawWeddingRing_ProtoFunID_Name(stRetDrawWeddingRing_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRetDrawWeddingRing_ProtoFunID_descriptor(), value);
}
inline bool stRetDrawWeddingRing_ProtoFunID_Parse(
    const ::std::string& name, stRetDrawWeddingRing_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRetDrawWeddingRing_ProtoFunID>(
    stRetDrawWeddingRing_ProtoFunID_descriptor(), name, value);
}
enum stReqBuyNum_ProtoModID {
  stReqBuyNum_ProtoModID_ModID = 2
};
bool stReqBuyNum_ProtoModID_IsValid(int value);
const stReqBuyNum_ProtoModID stReqBuyNum_ProtoModID_ProtoModID_MIN = stReqBuyNum_ProtoModID_ModID;
const stReqBuyNum_ProtoModID stReqBuyNum_ProtoModID_ProtoModID_MAX = stReqBuyNum_ProtoModID_ModID;
const int stReqBuyNum_ProtoModID_ProtoModID_ARRAYSIZE = stReqBuyNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyNum_ProtoModID_descriptor();
inline const ::std::string& stReqBuyNum_ProtoModID_Name(stReqBuyNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyNum_ProtoModID_descriptor(), value);
}
inline bool stReqBuyNum_ProtoModID_Parse(
    const ::std::string& name, stReqBuyNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyNum_ProtoModID>(
    stReqBuyNum_ProtoModID_descriptor(), name, value);
}
enum stReqBuyNum_ProtoFunID {
  stReqBuyNum_ProtoFunID_FunID = 210
};
bool stReqBuyNum_ProtoFunID_IsValid(int value);
const stReqBuyNum_ProtoFunID stReqBuyNum_ProtoFunID_ProtoFunID_MIN = stReqBuyNum_ProtoFunID_FunID;
const stReqBuyNum_ProtoFunID stReqBuyNum_ProtoFunID_ProtoFunID_MAX = stReqBuyNum_ProtoFunID_FunID;
const int stReqBuyNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqBuyNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqBuyNum_ProtoFunID_descriptor();
inline const ::std::string& stReqBuyNum_ProtoFunID_Name(stReqBuyNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqBuyNum_ProtoFunID_descriptor(), value);
}
inline bool stReqBuyNum_ProtoFunID_Parse(
    const ::std::string& name, stReqBuyNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqBuyNum_ProtoFunID>(
    stReqBuyNum_ProtoFunID_descriptor(), name, value);
}
enum stBuyNumResult_ProtoModID {
  stBuyNumResult_ProtoModID_ModID = 2
};
bool stBuyNumResult_ProtoModID_IsValid(int value);
const stBuyNumResult_ProtoModID stBuyNumResult_ProtoModID_ProtoModID_MIN = stBuyNumResult_ProtoModID_ModID;
const stBuyNumResult_ProtoModID stBuyNumResult_ProtoModID_ProtoModID_MAX = stBuyNumResult_ProtoModID_ModID;
const int stBuyNumResult_ProtoModID_ProtoModID_ARRAYSIZE = stBuyNumResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyNumResult_ProtoModID_descriptor();
inline const ::std::string& stBuyNumResult_ProtoModID_Name(stBuyNumResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyNumResult_ProtoModID_descriptor(), value);
}
inline bool stBuyNumResult_ProtoModID_Parse(
    const ::std::string& name, stBuyNumResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyNumResult_ProtoModID>(
    stBuyNumResult_ProtoModID_descriptor(), name, value);
}
enum stBuyNumResult_ProtoFunID {
  stBuyNumResult_ProtoFunID_FunID = 211
};
bool stBuyNumResult_ProtoFunID_IsValid(int value);
const stBuyNumResult_ProtoFunID stBuyNumResult_ProtoFunID_ProtoFunID_MIN = stBuyNumResult_ProtoFunID_FunID;
const stBuyNumResult_ProtoFunID stBuyNumResult_ProtoFunID_ProtoFunID_MAX = stBuyNumResult_ProtoFunID_FunID;
const int stBuyNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stBuyNumResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stBuyNumResult_ProtoFunID_descriptor();
inline const ::std::string& stBuyNumResult_ProtoFunID_Name(stBuyNumResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stBuyNumResult_ProtoFunID_descriptor(), value);
}
inline bool stBuyNumResult_ProtoFunID_Parse(
    const ::std::string& name, stBuyNumResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stBuyNumResult_ProtoFunID>(
    stBuyNumResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRefreshNum_ProtoModID {
  stReqRefreshNum_ProtoModID_ModID = 2
};
bool stReqRefreshNum_ProtoModID_IsValid(int value);
const stReqRefreshNum_ProtoModID stReqRefreshNum_ProtoModID_ProtoModID_MIN = stReqRefreshNum_ProtoModID_ModID;
const stReqRefreshNum_ProtoModID stReqRefreshNum_ProtoModID_ProtoModID_MAX = stReqRefreshNum_ProtoModID_ModID;
const int stReqRefreshNum_ProtoModID_ProtoModID_ARRAYSIZE = stReqRefreshNum_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoModID_descriptor();
inline const ::std::string& stReqRefreshNum_ProtoModID_Name(stReqRefreshNum_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshNum_ProtoModID_descriptor(), value);
}
inline bool stReqRefreshNum_ProtoModID_Parse(
    const ::std::string& name, stReqRefreshNum_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshNum_ProtoModID>(
    stReqRefreshNum_ProtoModID_descriptor(), name, value);
}
enum stReqRefreshNum_ProtoFunID {
  stReqRefreshNum_ProtoFunID_FunID = 212
};
bool stReqRefreshNum_ProtoFunID_IsValid(int value);
const stReqRefreshNum_ProtoFunID stReqRefreshNum_ProtoFunID_ProtoFunID_MIN = stReqRefreshNum_ProtoFunID_FunID;
const stReqRefreshNum_ProtoFunID stReqRefreshNum_ProtoFunID_ProtoFunID_MAX = stReqRefreshNum_ProtoFunID_FunID;
const int stReqRefreshNum_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRefreshNum_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshNum_ProtoFunID_descriptor();
inline const ::std::string& stReqRefreshNum_ProtoFunID_Name(stReqRefreshNum_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshNum_ProtoFunID_descriptor(), value);
}
inline bool stReqRefreshNum_ProtoFunID_Parse(
    const ::std::string& name, stReqRefreshNum_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshNum_ProtoFunID>(
    stReqRefreshNum_ProtoFunID_descriptor(), name, value);
}
enum stRefreshNumResult_ProtoModID {
  stRefreshNumResult_ProtoModID_ModID = 2
};
bool stRefreshNumResult_ProtoModID_IsValid(int value);
const stRefreshNumResult_ProtoModID stRefreshNumResult_ProtoModID_ProtoModID_MIN = stRefreshNumResult_ProtoModID_ModID;
const stRefreshNumResult_ProtoModID stRefreshNumResult_ProtoModID_ProtoModID_MAX = stRefreshNumResult_ProtoModID_ModID;
const int stRefreshNumResult_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshNumResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoModID_descriptor();
inline const ::std::string& stRefreshNumResult_ProtoModID_Name(stRefreshNumResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshNumResult_ProtoModID_descriptor(), value);
}
inline bool stRefreshNumResult_ProtoModID_Parse(
    const ::std::string& name, stRefreshNumResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshNumResult_ProtoModID>(
    stRefreshNumResult_ProtoModID_descriptor(), name, value);
}
enum stRefreshNumResult_ProtoFunID {
  stRefreshNumResult_ProtoFunID_FunID = 213
};
bool stRefreshNumResult_ProtoFunID_IsValid(int value);
const stRefreshNumResult_ProtoFunID stRefreshNumResult_ProtoFunID_ProtoFunID_MIN = stRefreshNumResult_ProtoFunID_FunID;
const stRefreshNumResult_ProtoFunID stRefreshNumResult_ProtoFunID_ProtoFunID_MAX = stRefreshNumResult_ProtoFunID_FunID;
const int stRefreshNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshNumResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshNumResult_ProtoFunID_descriptor();
inline const ::std::string& stRefreshNumResult_ProtoFunID_Name(stRefreshNumResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshNumResult_ProtoFunID_descriptor(), value);
}
inline bool stRefreshNumResult_ProtoFunID_Parse(
    const ::std::string& name, stRefreshNumResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshNumResult_ProtoFunID>(
    stRefreshNumResult_ProtoFunID_descriptor(), name, value);
}
enum stReqColumnList_ProtoModID {
  stReqColumnList_ProtoModID_ModID = 2
};
bool stReqColumnList_ProtoModID_IsValid(int value);
const stReqColumnList_ProtoModID stReqColumnList_ProtoModID_ProtoModID_MIN = stReqColumnList_ProtoModID_ModID;
const stReqColumnList_ProtoModID stReqColumnList_ProtoModID_ProtoModID_MAX = stReqColumnList_ProtoModID_ModID;
const int stReqColumnList_ProtoModID_ProtoModID_ARRAYSIZE = stReqColumnList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqColumnList_ProtoModID_descriptor();
inline const ::std::string& stReqColumnList_ProtoModID_Name(stReqColumnList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqColumnList_ProtoModID_descriptor(), value);
}
inline bool stReqColumnList_ProtoModID_Parse(
    const ::std::string& name, stReqColumnList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqColumnList_ProtoModID>(
    stReqColumnList_ProtoModID_descriptor(), name, value);
}
enum stReqColumnList_ProtoFunID {
  stReqColumnList_ProtoFunID_FunID = 214
};
bool stReqColumnList_ProtoFunID_IsValid(int value);
const stReqColumnList_ProtoFunID stReqColumnList_ProtoFunID_ProtoFunID_MIN = stReqColumnList_ProtoFunID_FunID;
const stReqColumnList_ProtoFunID stReqColumnList_ProtoFunID_ProtoFunID_MAX = stReqColumnList_ProtoFunID_FunID;
const int stReqColumnList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqColumnList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqColumnList_ProtoFunID_descriptor();
inline const ::std::string& stReqColumnList_ProtoFunID_Name(stReqColumnList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqColumnList_ProtoFunID_descriptor(), value);
}
inline bool stReqColumnList_ProtoFunID_Parse(
    const ::std::string& name, stReqColumnList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqColumnList_ProtoFunID>(
    stReqColumnList_ProtoFunID_descriptor(), name, value);
}
enum stColumnListResult_eResult {
  stColumnListResult_eResult_SUCCESS = 1,
  stColumnListResult_eResult_INNER_ERROR = 2,
  stColumnListResult_eResult_FAILURE = 3
};
bool stColumnListResult_eResult_IsValid(int value);
const stColumnListResult_eResult stColumnListResult_eResult_eResult_MIN = stColumnListResult_eResult_SUCCESS;
const stColumnListResult_eResult stColumnListResult_eResult_eResult_MAX = stColumnListResult_eResult_FAILURE;
const int stColumnListResult_eResult_eResult_ARRAYSIZE = stColumnListResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stColumnListResult_eResult_descriptor();
inline const ::std::string& stColumnListResult_eResult_Name(stColumnListResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stColumnListResult_eResult_descriptor(), value);
}
inline bool stColumnListResult_eResult_Parse(
    const ::std::string& name, stColumnListResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stColumnListResult_eResult>(
    stColumnListResult_eResult_descriptor(), name, value);
}
enum stColumnListResult_ProtoModID {
  stColumnListResult_ProtoModID_ModID = 2
};
bool stColumnListResult_ProtoModID_IsValid(int value);
const stColumnListResult_ProtoModID stColumnListResult_ProtoModID_ProtoModID_MIN = stColumnListResult_ProtoModID_ModID;
const stColumnListResult_ProtoModID stColumnListResult_ProtoModID_ProtoModID_MAX = stColumnListResult_ProtoModID_ModID;
const int stColumnListResult_ProtoModID_ProtoModID_ARRAYSIZE = stColumnListResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stColumnListResult_ProtoModID_descriptor();
inline const ::std::string& stColumnListResult_ProtoModID_Name(stColumnListResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stColumnListResult_ProtoModID_descriptor(), value);
}
inline bool stColumnListResult_ProtoModID_Parse(
    const ::std::string& name, stColumnListResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stColumnListResult_ProtoModID>(
    stColumnListResult_ProtoModID_descriptor(), name, value);
}
enum stColumnListResult_ProtoFunID {
  stColumnListResult_ProtoFunID_FunID = 215
};
bool stColumnListResult_ProtoFunID_IsValid(int value);
const stColumnListResult_ProtoFunID stColumnListResult_ProtoFunID_ProtoFunID_MIN = stColumnListResult_ProtoFunID_FunID;
const stColumnListResult_ProtoFunID stColumnListResult_ProtoFunID_ProtoFunID_MAX = stColumnListResult_ProtoFunID_FunID;
const int stColumnListResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stColumnListResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stColumnListResult_ProtoFunID_descriptor();
inline const ::std::string& stColumnListResult_ProtoFunID_Name(stColumnListResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stColumnListResult_ProtoFunID_descriptor(), value);
}
inline bool stColumnListResult_ProtoFunID_Parse(
    const ::std::string& name, stColumnListResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stColumnListResult_ProtoFunID>(
    stColumnListResult_ProtoFunID_descriptor(), name, value);
}
enum stReqMarketBuyItem_ProtoModID {
  stReqMarketBuyItem_ProtoModID_ModID = 2
};
bool stReqMarketBuyItem_ProtoModID_IsValid(int value);
const stReqMarketBuyItem_ProtoModID stReqMarketBuyItem_ProtoModID_ProtoModID_MIN = stReqMarketBuyItem_ProtoModID_ModID;
const stReqMarketBuyItem_ProtoModID stReqMarketBuyItem_ProtoModID_ProtoModID_MAX = stReqMarketBuyItem_ProtoModID_ModID;
const int stReqMarketBuyItem_ProtoModID_ProtoModID_ARRAYSIZE = stReqMarketBuyItem_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMarketBuyItem_ProtoModID_descriptor();
inline const ::std::string& stReqMarketBuyItem_ProtoModID_Name(stReqMarketBuyItem_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMarketBuyItem_ProtoModID_descriptor(), value);
}
inline bool stReqMarketBuyItem_ProtoModID_Parse(
    const ::std::string& name, stReqMarketBuyItem_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMarketBuyItem_ProtoModID>(
    stReqMarketBuyItem_ProtoModID_descriptor(), name, value);
}
enum stReqMarketBuyItem_ProtoFunID {
  stReqMarketBuyItem_ProtoFunID_FunID = 216
};
bool stReqMarketBuyItem_ProtoFunID_IsValid(int value);
const stReqMarketBuyItem_ProtoFunID stReqMarketBuyItem_ProtoFunID_ProtoFunID_MIN = stReqMarketBuyItem_ProtoFunID_FunID;
const stReqMarketBuyItem_ProtoFunID stReqMarketBuyItem_ProtoFunID_ProtoFunID_MAX = stReqMarketBuyItem_ProtoFunID_FunID;
const int stReqMarketBuyItem_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqMarketBuyItem_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqMarketBuyItem_ProtoFunID_descriptor();
inline const ::std::string& stReqMarketBuyItem_ProtoFunID_Name(stReqMarketBuyItem_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqMarketBuyItem_ProtoFunID_descriptor(), value);
}
inline bool stReqMarketBuyItem_ProtoFunID_Parse(
    const ::std::string& name, stReqMarketBuyItem_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqMarketBuyItem_ProtoFunID>(
    stReqMarketBuyItem_ProtoFunID_descriptor(), name, value);
}
enum stMarketBuyItemResult_BUYRESULT {
  stMarketBuyItemResult_BUYRESULT_BUY_SUCCESS = 1,
  stMarketBuyItemResult_BUYRESULT_RESOURCE_NOT_ENOUGH = 2,
  stMarketBuyItemResult_BUYRESULT_BUY_FULL = 3,
  stMarketBuyItemResult_BUYRESULT_ITEM_NOT_EXIST = 4,
  stMarketBuyItemResult_BUYRESULT_BUY_OUT = 5,
  stMarketBuyItemResult_BUYRESULT_INNER_ERROR = 6,
  stMarketBuyItemResult_BUYRESULT_TIME_USE_OUT = 7
};
bool stMarketBuyItemResult_BUYRESULT_IsValid(int value);
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult_BUYRESULT_BUYRESULT_MIN = stMarketBuyItemResult_BUYRESULT_BUY_SUCCESS;
const stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult_BUYRESULT_BUYRESULT_MAX = stMarketBuyItemResult_BUYRESULT_TIME_USE_OUT;
const int stMarketBuyItemResult_BUYRESULT_BUYRESULT_ARRAYSIZE = stMarketBuyItemResult_BUYRESULT_BUYRESULT_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMarketBuyItemResult_BUYRESULT_descriptor();
inline const ::std::string& stMarketBuyItemResult_BUYRESULT_Name(stMarketBuyItemResult_BUYRESULT value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMarketBuyItemResult_BUYRESULT_descriptor(), value);
}
inline bool stMarketBuyItemResult_BUYRESULT_Parse(
    const ::std::string& name, stMarketBuyItemResult_BUYRESULT* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMarketBuyItemResult_BUYRESULT>(
    stMarketBuyItemResult_BUYRESULT_descriptor(), name, value);
}
enum stMarketBuyItemResult_ProtoModID {
  stMarketBuyItemResult_ProtoModID_ModID = 2
};
bool stMarketBuyItemResult_ProtoModID_IsValid(int value);
const stMarketBuyItemResult_ProtoModID stMarketBuyItemResult_ProtoModID_ProtoModID_MIN = stMarketBuyItemResult_ProtoModID_ModID;
const stMarketBuyItemResult_ProtoModID stMarketBuyItemResult_ProtoModID_ProtoModID_MAX = stMarketBuyItemResult_ProtoModID_ModID;
const int stMarketBuyItemResult_ProtoModID_ProtoModID_ARRAYSIZE = stMarketBuyItemResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMarketBuyItemResult_ProtoModID_descriptor();
inline const ::std::string& stMarketBuyItemResult_ProtoModID_Name(stMarketBuyItemResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMarketBuyItemResult_ProtoModID_descriptor(), value);
}
inline bool stMarketBuyItemResult_ProtoModID_Parse(
    const ::std::string& name, stMarketBuyItemResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMarketBuyItemResult_ProtoModID>(
    stMarketBuyItemResult_ProtoModID_descriptor(), name, value);
}
enum stMarketBuyItemResult_ProtoFunID {
  stMarketBuyItemResult_ProtoFunID_FunID = 217
};
bool stMarketBuyItemResult_ProtoFunID_IsValid(int value);
const stMarketBuyItemResult_ProtoFunID stMarketBuyItemResult_ProtoFunID_ProtoFunID_MIN = stMarketBuyItemResult_ProtoFunID_FunID;
const stMarketBuyItemResult_ProtoFunID stMarketBuyItemResult_ProtoFunID_ProtoFunID_MAX = stMarketBuyItemResult_ProtoFunID_FunID;
const int stMarketBuyItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stMarketBuyItemResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stMarketBuyItemResult_ProtoFunID_descriptor();
inline const ::std::string& stMarketBuyItemResult_ProtoFunID_Name(stMarketBuyItemResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stMarketBuyItemResult_ProtoFunID_descriptor(), value);
}
inline bool stMarketBuyItemResult_ProtoFunID_Parse(
    const ::std::string& name, stMarketBuyItemResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stMarketBuyItemResult_ProtoFunID>(
    stMarketBuyItemResult_ProtoFunID_descriptor(), name, value);
}
enum stReqOpenWindow_ProtoModID {
  stReqOpenWindow_ProtoModID_ModID = 2
};
bool stReqOpenWindow_ProtoModID_IsValid(int value);
const stReqOpenWindow_ProtoModID stReqOpenWindow_ProtoModID_ProtoModID_MIN = stReqOpenWindow_ProtoModID_ModID;
const stReqOpenWindow_ProtoModID stReqOpenWindow_ProtoModID_ProtoModID_MAX = stReqOpenWindow_ProtoModID_ModID;
const int stReqOpenWindow_ProtoModID_ProtoModID_ARRAYSIZE = stReqOpenWindow_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenWindow_ProtoModID_descriptor();
inline const ::std::string& stReqOpenWindow_ProtoModID_Name(stReqOpenWindow_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenWindow_ProtoModID_descriptor(), value);
}
inline bool stReqOpenWindow_ProtoModID_Parse(
    const ::std::string& name, stReqOpenWindow_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenWindow_ProtoModID>(
    stReqOpenWindow_ProtoModID_descriptor(), name, value);
}
enum stReqOpenWindow_ProtoFunID {
  stReqOpenWindow_ProtoFunID_FunID = 218
};
bool stReqOpenWindow_ProtoFunID_IsValid(int value);
const stReqOpenWindow_ProtoFunID stReqOpenWindow_ProtoFunID_ProtoFunID_MIN = stReqOpenWindow_ProtoFunID_FunID;
const stReqOpenWindow_ProtoFunID stReqOpenWindow_ProtoFunID_ProtoFunID_MAX = stReqOpenWindow_ProtoFunID_FunID;
const int stReqOpenWindow_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqOpenWindow_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqOpenWindow_ProtoFunID_descriptor();
inline const ::std::string& stReqOpenWindow_ProtoFunID_Name(stReqOpenWindow_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqOpenWindow_ProtoFunID_descriptor(), value);
}
inline bool stReqOpenWindow_ProtoFunID_Parse(
    const ::std::string& name, stReqOpenWindow_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqOpenWindow_ProtoFunID>(
    stReqOpenWindow_ProtoFunID_descriptor(), name, value);
}
enum stOpenWindowResult_eResult {
  stOpenWindowResult_eResult_OPEN_SUCCESS = 1,
  stOpenWindowResult_eResult_TIME_LIMIT = 2
};
bool stOpenWindowResult_eResult_IsValid(int value);
const stOpenWindowResult_eResult stOpenWindowResult_eResult_eResult_MIN = stOpenWindowResult_eResult_OPEN_SUCCESS;
const stOpenWindowResult_eResult stOpenWindowResult_eResult_eResult_MAX = stOpenWindowResult_eResult_TIME_LIMIT;
const int stOpenWindowResult_eResult_eResult_ARRAYSIZE = stOpenWindowResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenWindowResult_eResult_descriptor();
inline const ::std::string& stOpenWindowResult_eResult_Name(stOpenWindowResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenWindowResult_eResult_descriptor(), value);
}
inline bool stOpenWindowResult_eResult_Parse(
    const ::std::string& name, stOpenWindowResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenWindowResult_eResult>(
    stOpenWindowResult_eResult_descriptor(), name, value);
}
enum stOpenWindowResult_ProtoModID {
  stOpenWindowResult_ProtoModID_ModID = 2
};
bool stOpenWindowResult_ProtoModID_IsValid(int value);
const stOpenWindowResult_ProtoModID stOpenWindowResult_ProtoModID_ProtoModID_MIN = stOpenWindowResult_ProtoModID_ModID;
const stOpenWindowResult_ProtoModID stOpenWindowResult_ProtoModID_ProtoModID_MAX = stOpenWindowResult_ProtoModID_ModID;
const int stOpenWindowResult_ProtoModID_ProtoModID_ARRAYSIZE = stOpenWindowResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenWindowResult_ProtoModID_descriptor();
inline const ::std::string& stOpenWindowResult_ProtoModID_Name(stOpenWindowResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenWindowResult_ProtoModID_descriptor(), value);
}
inline bool stOpenWindowResult_ProtoModID_Parse(
    const ::std::string& name, stOpenWindowResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenWindowResult_ProtoModID>(
    stOpenWindowResult_ProtoModID_descriptor(), name, value);
}
enum stOpenWindowResult_ProtoFunID {
  stOpenWindowResult_ProtoFunID_FunID = 219
};
bool stOpenWindowResult_ProtoFunID_IsValid(int value);
const stOpenWindowResult_ProtoFunID stOpenWindowResult_ProtoFunID_ProtoFunID_MIN = stOpenWindowResult_ProtoFunID_FunID;
const stOpenWindowResult_ProtoFunID stOpenWindowResult_ProtoFunID_ProtoFunID_MAX = stOpenWindowResult_ProtoFunID_FunID;
const int stOpenWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stOpenWindowResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stOpenWindowResult_ProtoFunID_descriptor();
inline const ::std::string& stOpenWindowResult_ProtoFunID_Name(stOpenWindowResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stOpenWindowResult_ProtoFunID_descriptor(), value);
}
inline bool stOpenWindowResult_ProtoFunID_Parse(
    const ::std::string& name, stOpenWindowResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stOpenWindowResult_ProtoFunID>(
    stOpenWindowResult_ProtoFunID_descriptor(), name, value);
}
enum stReqRefreshList_ProtoModID {
  stReqRefreshList_ProtoModID_ModID = 2
};
bool stReqRefreshList_ProtoModID_IsValid(int value);
const stReqRefreshList_ProtoModID stReqRefreshList_ProtoModID_ProtoModID_MIN = stReqRefreshList_ProtoModID_ModID;
const stReqRefreshList_ProtoModID stReqRefreshList_ProtoModID_ProtoModID_MAX = stReqRefreshList_ProtoModID_ModID;
const int stReqRefreshList_ProtoModID_ProtoModID_ARRAYSIZE = stReqRefreshList_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshList_ProtoModID_descriptor();
inline const ::std::string& stReqRefreshList_ProtoModID_Name(stReqRefreshList_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshList_ProtoModID_descriptor(), value);
}
inline bool stReqRefreshList_ProtoModID_Parse(
    const ::std::string& name, stReqRefreshList_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshList_ProtoModID>(
    stReqRefreshList_ProtoModID_descriptor(), name, value);
}
enum stReqRefreshList_ProtoFunID {
  stReqRefreshList_ProtoFunID_FunID = 220
};
bool stReqRefreshList_ProtoFunID_IsValid(int value);
const stReqRefreshList_ProtoFunID stReqRefreshList_ProtoFunID_ProtoFunID_MIN = stReqRefreshList_ProtoFunID_FunID;
const stReqRefreshList_ProtoFunID stReqRefreshList_ProtoFunID_ProtoFunID_MAX = stReqRefreshList_ProtoFunID_FunID;
const int stReqRefreshList_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqRefreshList_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqRefreshList_ProtoFunID_descriptor();
inline const ::std::string& stReqRefreshList_ProtoFunID_Name(stReqRefreshList_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqRefreshList_ProtoFunID_descriptor(), value);
}
inline bool stReqRefreshList_ProtoFunID_Parse(
    const ::std::string& name, stReqRefreshList_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqRefreshList_ProtoFunID>(
    stReqRefreshList_ProtoFunID_descriptor(), name, value);
}
enum stRefreshListResult_eResult {
  stRefreshListResult_eResult_SUCCESS = 1,
  stRefreshListResult_eResult_INNER_ERROR = 2,
  stRefreshListResult_eResult_RESOURCE_NOT_ENOUGH = 3,
  stRefreshListResult_eResult_SHOP_NOT_EXIST = 4,
  stRefreshListResult_eResult_REFRESH_LIMIT = 5
};
bool stRefreshListResult_eResult_IsValid(int value);
const stRefreshListResult_eResult stRefreshListResult_eResult_eResult_MIN = stRefreshListResult_eResult_SUCCESS;
const stRefreshListResult_eResult stRefreshListResult_eResult_eResult_MAX = stRefreshListResult_eResult_REFRESH_LIMIT;
const int stRefreshListResult_eResult_eResult_ARRAYSIZE = stRefreshListResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshListResult_eResult_descriptor();
inline const ::std::string& stRefreshListResult_eResult_Name(stRefreshListResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshListResult_eResult_descriptor(), value);
}
inline bool stRefreshListResult_eResult_Parse(
    const ::std::string& name, stRefreshListResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshListResult_eResult>(
    stRefreshListResult_eResult_descriptor(), name, value);
}
enum stRefreshListResult_ProtoModID {
  stRefreshListResult_ProtoModID_ModID = 2
};
bool stRefreshListResult_ProtoModID_IsValid(int value);
const stRefreshListResult_ProtoModID stRefreshListResult_ProtoModID_ProtoModID_MIN = stRefreshListResult_ProtoModID_ModID;
const stRefreshListResult_ProtoModID stRefreshListResult_ProtoModID_ProtoModID_MAX = stRefreshListResult_ProtoModID_ModID;
const int stRefreshListResult_ProtoModID_ProtoModID_ARRAYSIZE = stRefreshListResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshListResult_ProtoModID_descriptor();
inline const ::std::string& stRefreshListResult_ProtoModID_Name(stRefreshListResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshListResult_ProtoModID_descriptor(), value);
}
inline bool stRefreshListResult_ProtoModID_Parse(
    const ::std::string& name, stRefreshListResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshListResult_ProtoModID>(
    stRefreshListResult_ProtoModID_descriptor(), name, value);
}
enum stRefreshListResult_ProtoFunID {
  stRefreshListResult_ProtoFunID_FunID = 221
};
bool stRefreshListResult_ProtoFunID_IsValid(int value);
const stRefreshListResult_ProtoFunID stRefreshListResult_ProtoFunID_ProtoFunID_MIN = stRefreshListResult_ProtoFunID_FunID;
const stRefreshListResult_ProtoFunID stRefreshListResult_ProtoFunID_ProtoFunID_MAX = stRefreshListResult_ProtoFunID_FunID;
const int stRefreshListResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stRefreshListResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stRefreshListResult_ProtoFunID_descriptor();
inline const ::std::string& stRefreshListResult_ProtoFunID_Name(stRefreshListResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stRefreshListResult_ProtoFunID_descriptor(), value);
}
inline bool stRefreshListResult_ProtoFunID_Parse(
    const ::std::string& name, stRefreshListResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stRefreshListResult_ProtoFunID>(
    stRefreshListResult_ProtoFunID_descriptor(), name, value);
}
enum stReqAKeyRaiseUserSkillLv_ProtoModID {
  stReqAKeyRaiseUserSkillLv_ProtoModID_ModID = 2
};
bool stReqAKeyRaiseUserSkillLv_ProtoModID_IsValid(int value);
const stReqAKeyRaiseUserSkillLv_ProtoModID stReqAKeyRaiseUserSkillLv_ProtoModID_ProtoModID_MIN = stReqAKeyRaiseUserSkillLv_ProtoModID_ModID;
const stReqAKeyRaiseUserSkillLv_ProtoModID stReqAKeyRaiseUserSkillLv_ProtoModID_ProtoModID_MAX = stReqAKeyRaiseUserSkillLv_ProtoModID_ModID;
const int stReqAKeyRaiseUserSkillLv_ProtoModID_ProtoModID_ARRAYSIZE = stReqAKeyRaiseUserSkillLv_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAKeyRaiseUserSkillLv_ProtoModID_descriptor();
inline const ::std::string& stReqAKeyRaiseUserSkillLv_ProtoModID_Name(stReqAKeyRaiseUserSkillLv_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAKeyRaiseUserSkillLv_ProtoModID_descriptor(), value);
}
inline bool stReqAKeyRaiseUserSkillLv_ProtoModID_Parse(
    const ::std::string& name, stReqAKeyRaiseUserSkillLv_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAKeyRaiseUserSkillLv_ProtoModID>(
    stReqAKeyRaiseUserSkillLv_ProtoModID_descriptor(), name, value);
}
enum stReqAKeyRaiseUserSkillLv_ProtoFunID {
  stReqAKeyRaiseUserSkillLv_ProtoFunID_FunID = 222
};
bool stReqAKeyRaiseUserSkillLv_ProtoFunID_IsValid(int value);
const stReqAKeyRaiseUserSkillLv_ProtoFunID stReqAKeyRaiseUserSkillLv_ProtoFunID_ProtoFunID_MIN = stReqAKeyRaiseUserSkillLv_ProtoFunID_FunID;
const stReqAKeyRaiseUserSkillLv_ProtoFunID stReqAKeyRaiseUserSkillLv_ProtoFunID_ProtoFunID_MAX = stReqAKeyRaiseUserSkillLv_ProtoFunID_FunID;
const int stReqAKeyRaiseUserSkillLv_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqAKeyRaiseUserSkillLv_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqAKeyRaiseUserSkillLv_ProtoFunID_descriptor();
inline const ::std::string& stReqAKeyRaiseUserSkillLv_ProtoFunID_Name(stReqAKeyRaiseUserSkillLv_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqAKeyRaiseUserSkillLv_ProtoFunID_descriptor(), value);
}
inline bool stReqAKeyRaiseUserSkillLv_ProtoFunID_Parse(
    const ::std::string& name, stReqAKeyRaiseUserSkillLv_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqAKeyRaiseUserSkillLv_ProtoFunID>(
    stReqAKeyRaiseUserSkillLv_ProtoFunID_descriptor(), name, value);
}
enum stAKeyRaiseUserSkillLvResult_eResult {
  stAKeyRaiseUserSkillLvResult_eResult_eSuccess = 1,
  stAKeyRaiseUserSkillLvResult_eResult_eSkill_Not_Exist = 2,
  stAKeyRaiseUserSkillLvResult_eResult_eInner_Cfg_Error = 3,
  stAKeyRaiseUserSkillLvResult_eResult_eGoldCoin_Not_Enough = 4,
  stAKeyRaiseUserSkillLvResult_eResult_eRole_Lv_Limit = 5
};
bool stAKeyRaiseUserSkillLvResult_eResult_IsValid(int value);
const stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult_eResult_eResult_MIN = stAKeyRaiseUserSkillLvResult_eResult_eSuccess;
const stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult_eResult_eResult_MAX = stAKeyRaiseUserSkillLvResult_eResult_eRole_Lv_Limit;
const int stAKeyRaiseUserSkillLvResult_eResult_eResult_ARRAYSIZE = stAKeyRaiseUserSkillLvResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAKeyRaiseUserSkillLvResult_eResult_descriptor();
inline const ::std::string& stAKeyRaiseUserSkillLvResult_eResult_Name(stAKeyRaiseUserSkillLvResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAKeyRaiseUserSkillLvResult_eResult_descriptor(), value);
}
inline bool stAKeyRaiseUserSkillLvResult_eResult_Parse(
    const ::std::string& name, stAKeyRaiseUserSkillLvResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAKeyRaiseUserSkillLvResult_eResult>(
    stAKeyRaiseUserSkillLvResult_eResult_descriptor(), name, value);
}
enum stAKeyRaiseUserSkillLvResult_ProtoModID {
  stAKeyRaiseUserSkillLvResult_ProtoModID_ModID = 2
};
bool stAKeyRaiseUserSkillLvResult_ProtoModID_IsValid(int value);
const stAKeyRaiseUserSkillLvResult_ProtoModID stAKeyRaiseUserSkillLvResult_ProtoModID_ProtoModID_MIN = stAKeyRaiseUserSkillLvResult_ProtoModID_ModID;
const stAKeyRaiseUserSkillLvResult_ProtoModID stAKeyRaiseUserSkillLvResult_ProtoModID_ProtoModID_MAX = stAKeyRaiseUserSkillLvResult_ProtoModID_ModID;
const int stAKeyRaiseUserSkillLvResult_ProtoModID_ProtoModID_ARRAYSIZE = stAKeyRaiseUserSkillLvResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAKeyRaiseUserSkillLvResult_ProtoModID_descriptor();
inline const ::std::string& stAKeyRaiseUserSkillLvResult_ProtoModID_Name(stAKeyRaiseUserSkillLvResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAKeyRaiseUserSkillLvResult_ProtoModID_descriptor(), value);
}
inline bool stAKeyRaiseUserSkillLvResult_ProtoModID_Parse(
    const ::std::string& name, stAKeyRaiseUserSkillLvResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAKeyRaiseUserSkillLvResult_ProtoModID>(
    stAKeyRaiseUserSkillLvResult_ProtoModID_descriptor(), name, value);
}
enum stAKeyRaiseUserSkillLvResult_ProtoFunID {
  stAKeyRaiseUserSkillLvResult_ProtoFunID_FunID = 223
};
bool stAKeyRaiseUserSkillLvResult_ProtoFunID_IsValid(int value);
const stAKeyRaiseUserSkillLvResult_ProtoFunID stAKeyRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MIN = stAKeyRaiseUserSkillLvResult_ProtoFunID_FunID;
const stAKeyRaiseUserSkillLvResult_ProtoFunID stAKeyRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MAX = stAKeyRaiseUserSkillLvResult_ProtoFunID_FunID;
const int stAKeyRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stAKeyRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stAKeyRaiseUserSkillLvResult_ProtoFunID_descriptor();
inline const ::std::string& stAKeyRaiseUserSkillLvResult_ProtoFunID_Name(stAKeyRaiseUserSkillLvResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stAKeyRaiseUserSkillLvResult_ProtoFunID_descriptor(), value);
}
inline bool stAKeyRaiseUserSkillLvResult_ProtoFunID_Parse(
    const ::std::string& name, stAKeyRaiseUserSkillLvResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stAKeyRaiseUserSkillLvResult_ProtoFunID>(
    stAKeyRaiseUserSkillLvResult_ProtoFunID_descriptor(), name, value);
}
enum stReqStoneSynthesis_ProtoModID {
  stReqStoneSynthesis_ProtoModID_ModID = 2
};
bool stReqStoneSynthesis_ProtoModID_IsValid(int value);
const stReqStoneSynthesis_ProtoModID stReqStoneSynthesis_ProtoModID_ProtoModID_MIN = stReqStoneSynthesis_ProtoModID_ModID;
const stReqStoneSynthesis_ProtoModID stReqStoneSynthesis_ProtoModID_ProtoModID_MAX = stReqStoneSynthesis_ProtoModID_ModID;
const int stReqStoneSynthesis_ProtoModID_ProtoModID_ARRAYSIZE = stReqStoneSynthesis_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqStoneSynthesis_ProtoModID_descriptor();
inline const ::std::string& stReqStoneSynthesis_ProtoModID_Name(stReqStoneSynthesis_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqStoneSynthesis_ProtoModID_descriptor(), value);
}
inline bool stReqStoneSynthesis_ProtoModID_Parse(
    const ::std::string& name, stReqStoneSynthesis_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqStoneSynthesis_ProtoModID>(
    stReqStoneSynthesis_ProtoModID_descriptor(), name, value);
}
enum stReqStoneSynthesis_ProtoFunID {
  stReqStoneSynthesis_ProtoFunID_FunID = 224
};
bool stReqStoneSynthesis_ProtoFunID_IsValid(int value);
const stReqStoneSynthesis_ProtoFunID stReqStoneSynthesis_ProtoFunID_ProtoFunID_MIN = stReqStoneSynthesis_ProtoFunID_FunID;
const stReqStoneSynthesis_ProtoFunID stReqStoneSynthesis_ProtoFunID_ProtoFunID_MAX = stReqStoneSynthesis_ProtoFunID_FunID;
const int stReqStoneSynthesis_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqStoneSynthesis_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqStoneSynthesis_ProtoFunID_descriptor();
inline const ::std::string& stReqStoneSynthesis_ProtoFunID_Name(stReqStoneSynthesis_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqStoneSynthesis_ProtoFunID_descriptor(), value);
}
inline bool stReqStoneSynthesis_ProtoFunID_Parse(
    const ::std::string& name, stReqStoneSynthesis_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqStoneSynthesis_ProtoFunID>(
    stReqStoneSynthesis_ProtoFunID_descriptor(), name, value);
}
enum stStoneSynthesisResult_Result {
  stStoneSynthesisResult_Result_eSUCCESS = 1,
  stStoneSynthesisResult_Result_eFAILURE = 2,
  stStoneSynthesisResult_Result_eBAG_FULL = 3,
  stStoneSynthesisResult_Result_eRESOURCE_NOT_ENOUGH = 4
};
bool stStoneSynthesisResult_Result_IsValid(int value);
const stStoneSynthesisResult_Result stStoneSynthesisResult_Result_Result_MIN = stStoneSynthesisResult_Result_eSUCCESS;
const stStoneSynthesisResult_Result stStoneSynthesisResult_Result_Result_MAX = stStoneSynthesisResult_Result_eRESOURCE_NOT_ENOUGH;
const int stStoneSynthesisResult_Result_Result_ARRAYSIZE = stStoneSynthesisResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStoneSynthesisResult_Result_descriptor();
inline const ::std::string& stStoneSynthesisResult_Result_Name(stStoneSynthesisResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStoneSynthesisResult_Result_descriptor(), value);
}
inline bool stStoneSynthesisResult_Result_Parse(
    const ::std::string& name, stStoneSynthesisResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStoneSynthesisResult_Result>(
    stStoneSynthesisResult_Result_descriptor(), name, value);
}
enum stStoneSynthesisResult_ProtoModID {
  stStoneSynthesisResult_ProtoModID_ModID = 2
};
bool stStoneSynthesisResult_ProtoModID_IsValid(int value);
const stStoneSynthesisResult_ProtoModID stStoneSynthesisResult_ProtoModID_ProtoModID_MIN = stStoneSynthesisResult_ProtoModID_ModID;
const stStoneSynthesisResult_ProtoModID stStoneSynthesisResult_ProtoModID_ProtoModID_MAX = stStoneSynthesisResult_ProtoModID_ModID;
const int stStoneSynthesisResult_ProtoModID_ProtoModID_ARRAYSIZE = stStoneSynthesisResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStoneSynthesisResult_ProtoModID_descriptor();
inline const ::std::string& stStoneSynthesisResult_ProtoModID_Name(stStoneSynthesisResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStoneSynthesisResult_ProtoModID_descriptor(), value);
}
inline bool stStoneSynthesisResult_ProtoModID_Parse(
    const ::std::string& name, stStoneSynthesisResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStoneSynthesisResult_ProtoModID>(
    stStoneSynthesisResult_ProtoModID_descriptor(), name, value);
}
enum stStoneSynthesisResult_ProtoFunID {
  stStoneSynthesisResult_ProtoFunID_FunID = 225
};
bool stStoneSynthesisResult_ProtoFunID_IsValid(int value);
const stStoneSynthesisResult_ProtoFunID stStoneSynthesisResult_ProtoFunID_ProtoFunID_MIN = stStoneSynthesisResult_ProtoFunID_FunID;
const stStoneSynthesisResult_ProtoFunID stStoneSynthesisResult_ProtoFunID_ProtoFunID_MAX = stStoneSynthesisResult_ProtoFunID_FunID;
const int stStoneSynthesisResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stStoneSynthesisResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStoneSynthesisResult_ProtoFunID_descriptor();
inline const ::std::string& stStoneSynthesisResult_ProtoFunID_Name(stStoneSynthesisResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStoneSynthesisResult_ProtoFunID_descriptor(), value);
}
inline bool stStoneSynthesisResult_ProtoFunID_Parse(
    const ::std::string& name, stStoneSynthesisResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStoneSynthesisResult_ProtoFunID>(
    stStoneSynthesisResult_ProtoFunID_descriptor(), name, value);
}
enum stReqStoneEvolvement_ProtoModID {
  stReqStoneEvolvement_ProtoModID_ModID = 2
};
bool stReqStoneEvolvement_ProtoModID_IsValid(int value);
const stReqStoneEvolvement_ProtoModID stReqStoneEvolvement_ProtoModID_ProtoModID_MIN = stReqStoneEvolvement_ProtoModID_ModID;
const stReqStoneEvolvement_ProtoModID stReqStoneEvolvement_ProtoModID_ProtoModID_MAX = stReqStoneEvolvement_ProtoModID_ModID;
const int stReqStoneEvolvement_ProtoModID_ProtoModID_ARRAYSIZE = stReqStoneEvolvement_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqStoneEvolvement_ProtoModID_descriptor();
inline const ::std::string& stReqStoneEvolvement_ProtoModID_Name(stReqStoneEvolvement_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqStoneEvolvement_ProtoModID_descriptor(), value);
}
inline bool stReqStoneEvolvement_ProtoModID_Parse(
    const ::std::string& name, stReqStoneEvolvement_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqStoneEvolvement_ProtoModID>(
    stReqStoneEvolvement_ProtoModID_descriptor(), name, value);
}
enum stReqStoneEvolvement_ProtoFunID {
  stReqStoneEvolvement_ProtoFunID_FunID = 226
};
bool stReqStoneEvolvement_ProtoFunID_IsValid(int value);
const stReqStoneEvolvement_ProtoFunID stReqStoneEvolvement_ProtoFunID_ProtoFunID_MIN = stReqStoneEvolvement_ProtoFunID_FunID;
const stReqStoneEvolvement_ProtoFunID stReqStoneEvolvement_ProtoFunID_ProtoFunID_MAX = stReqStoneEvolvement_ProtoFunID_FunID;
const int stReqStoneEvolvement_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqStoneEvolvement_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqStoneEvolvement_ProtoFunID_descriptor();
inline const ::std::string& stReqStoneEvolvement_ProtoFunID_Name(stReqStoneEvolvement_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqStoneEvolvement_ProtoFunID_descriptor(), value);
}
inline bool stReqStoneEvolvement_ProtoFunID_Parse(
    const ::std::string& name, stReqStoneEvolvement_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqStoneEvolvement_ProtoFunID>(
    stReqStoneEvolvement_ProtoFunID_descriptor(), name, value);
}
enum stStoneEvolvementResult_Result {
  stStoneEvolvementResult_Result_eSUCCESS = 1,
  stStoneEvolvementResult_Result_eFAILURE = 2,
  stStoneEvolvementResult_Result_eBAG_FULL = 3,
  stStoneEvolvementResult_Result_eRESOURCE_NOT_ENOUGH = 4
};
bool stStoneEvolvementResult_Result_IsValid(int value);
const stStoneEvolvementResult_Result stStoneEvolvementResult_Result_Result_MIN = stStoneEvolvementResult_Result_eSUCCESS;
const stStoneEvolvementResult_Result stStoneEvolvementResult_Result_Result_MAX = stStoneEvolvementResult_Result_eRESOURCE_NOT_ENOUGH;
const int stStoneEvolvementResult_Result_Result_ARRAYSIZE = stStoneEvolvementResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStoneEvolvementResult_Result_descriptor();
inline const ::std::string& stStoneEvolvementResult_Result_Name(stStoneEvolvementResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStoneEvolvementResult_Result_descriptor(), value);
}
inline bool stStoneEvolvementResult_Result_Parse(
    const ::std::string& name, stStoneEvolvementResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStoneEvolvementResult_Result>(
    stStoneEvolvementResult_Result_descriptor(), name, value);
}
enum stStoneEvolvementResult_ProtoModID {
  stStoneEvolvementResult_ProtoModID_ModID = 2
};
bool stStoneEvolvementResult_ProtoModID_IsValid(int value);
const stStoneEvolvementResult_ProtoModID stStoneEvolvementResult_ProtoModID_ProtoModID_MIN = stStoneEvolvementResult_ProtoModID_ModID;
const stStoneEvolvementResult_ProtoModID stStoneEvolvementResult_ProtoModID_ProtoModID_MAX = stStoneEvolvementResult_ProtoModID_ModID;
const int stStoneEvolvementResult_ProtoModID_ProtoModID_ARRAYSIZE = stStoneEvolvementResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStoneEvolvementResult_ProtoModID_descriptor();
inline const ::std::string& stStoneEvolvementResult_ProtoModID_Name(stStoneEvolvementResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStoneEvolvementResult_ProtoModID_descriptor(), value);
}
inline bool stStoneEvolvementResult_ProtoModID_Parse(
    const ::std::string& name, stStoneEvolvementResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStoneEvolvementResult_ProtoModID>(
    stStoneEvolvementResult_ProtoModID_descriptor(), name, value);
}
enum stStoneEvolvementResult_ProtoFunID {
  stStoneEvolvementResult_ProtoFunID_FunID = 227
};
bool stStoneEvolvementResult_ProtoFunID_IsValid(int value);
const stStoneEvolvementResult_ProtoFunID stStoneEvolvementResult_ProtoFunID_ProtoFunID_MIN = stStoneEvolvementResult_ProtoFunID_FunID;
const stStoneEvolvementResult_ProtoFunID stStoneEvolvementResult_ProtoFunID_ProtoFunID_MAX = stStoneEvolvementResult_ProtoFunID_FunID;
const int stStoneEvolvementResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stStoneEvolvementResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStoneEvolvementResult_ProtoFunID_descriptor();
inline const ::std::string& stStoneEvolvementResult_ProtoFunID_Name(stStoneEvolvementResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStoneEvolvementResult_ProtoFunID_descriptor(), value);
}
inline bool stStoneEvolvementResult_ProtoFunID_Parse(
    const ::std::string& name, stStoneEvolvementResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStoneEvolvementResult_ProtoFunID>(
    stStoneEvolvementResult_ProtoFunID_descriptor(), name, value);
}
enum stReqStoneProp_ProtoModID {
  stReqStoneProp_ProtoModID_ModID = 2
};
bool stReqStoneProp_ProtoModID_IsValid(int value);
const stReqStoneProp_ProtoModID stReqStoneProp_ProtoModID_ProtoModID_MIN = stReqStoneProp_ProtoModID_ModID;
const stReqStoneProp_ProtoModID stReqStoneProp_ProtoModID_ProtoModID_MAX = stReqStoneProp_ProtoModID_ModID;
const int stReqStoneProp_ProtoModID_ProtoModID_ARRAYSIZE = stReqStoneProp_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqStoneProp_ProtoModID_descriptor();
inline const ::std::string& stReqStoneProp_ProtoModID_Name(stReqStoneProp_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqStoneProp_ProtoModID_descriptor(), value);
}
inline bool stReqStoneProp_ProtoModID_Parse(
    const ::std::string& name, stReqStoneProp_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqStoneProp_ProtoModID>(
    stReqStoneProp_ProtoModID_descriptor(), name, value);
}
enum stReqStoneProp_ProtoFunID {
  stReqStoneProp_ProtoFunID_FunID = 228
};
bool stReqStoneProp_ProtoFunID_IsValid(int value);
const stReqStoneProp_ProtoFunID stReqStoneProp_ProtoFunID_ProtoFunID_MIN = stReqStoneProp_ProtoFunID_FunID;
const stReqStoneProp_ProtoFunID stReqStoneProp_ProtoFunID_ProtoFunID_MAX = stReqStoneProp_ProtoFunID_FunID;
const int stReqStoneProp_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqStoneProp_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqStoneProp_ProtoFunID_descriptor();
inline const ::std::string& stReqStoneProp_ProtoFunID_Name(stReqStoneProp_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqStoneProp_ProtoFunID_descriptor(), value);
}
inline bool stReqStoneProp_ProtoFunID_Parse(
    const ::std::string& name, stReqStoneProp_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqStoneProp_ProtoFunID>(
    stReqStoneProp_ProtoFunID_descriptor(), name, value);
}
enum stStonePropResult_ProtoModID {
  stStonePropResult_ProtoModID_ModID = 2
};
bool stStonePropResult_ProtoModID_IsValid(int value);
const stStonePropResult_ProtoModID stStonePropResult_ProtoModID_ProtoModID_MIN = stStonePropResult_ProtoModID_ModID;
const stStonePropResult_ProtoModID stStonePropResult_ProtoModID_ProtoModID_MAX = stStonePropResult_ProtoModID_ModID;
const int stStonePropResult_ProtoModID_ProtoModID_ARRAYSIZE = stStonePropResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStonePropResult_ProtoModID_descriptor();
inline const ::std::string& stStonePropResult_ProtoModID_Name(stStonePropResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStonePropResult_ProtoModID_descriptor(), value);
}
inline bool stStonePropResult_ProtoModID_Parse(
    const ::std::string& name, stStonePropResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStonePropResult_ProtoModID>(
    stStonePropResult_ProtoModID_descriptor(), name, value);
}
enum stStonePropResult_ProtoFunID {
  stStonePropResult_ProtoFunID_FunID = 229
};
bool stStonePropResult_ProtoFunID_IsValid(int value);
const stStonePropResult_ProtoFunID stStonePropResult_ProtoFunID_ProtoFunID_MIN = stStonePropResult_ProtoFunID_FunID;
const stStonePropResult_ProtoFunID stStonePropResult_ProtoFunID_ProtoFunID_MAX = stStonePropResult_ProtoFunID_FunID;
const int stStonePropResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stStonePropResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stStonePropResult_ProtoFunID_descriptor();
inline const ::std::string& stStonePropResult_ProtoFunID_Name(stStonePropResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stStonePropResult_ProtoFunID_descriptor(), value);
}
inline bool stStonePropResult_ProtoFunID_Parse(
    const ::std::string& name, stStonePropResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stStonePropResult_ProtoFunID>(
    stStonePropResult_ProtoFunID_descriptor(), name, value);
}
enum stReqChangePhoto_ProtoModID {
  stReqChangePhoto_ProtoModID_ModID = 2
};
bool stReqChangePhoto_ProtoModID_IsValid(int value);
const stReqChangePhoto_ProtoModID stReqChangePhoto_ProtoModID_ProtoModID_MIN = stReqChangePhoto_ProtoModID_ModID;
const stReqChangePhoto_ProtoModID stReqChangePhoto_ProtoModID_ProtoModID_MAX = stReqChangePhoto_ProtoModID_ModID;
const int stReqChangePhoto_ProtoModID_ProtoModID_ARRAYSIZE = stReqChangePhoto_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangePhoto_ProtoModID_descriptor();
inline const ::std::string& stReqChangePhoto_ProtoModID_Name(stReqChangePhoto_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangePhoto_ProtoModID_descriptor(), value);
}
inline bool stReqChangePhoto_ProtoModID_Parse(
    const ::std::string& name, stReqChangePhoto_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangePhoto_ProtoModID>(
    stReqChangePhoto_ProtoModID_descriptor(), name, value);
}
enum stReqChangePhoto_ProtoFunID {
  stReqChangePhoto_ProtoFunID_FunID = 230
};
bool stReqChangePhoto_ProtoFunID_IsValid(int value);
const stReqChangePhoto_ProtoFunID stReqChangePhoto_ProtoFunID_ProtoFunID_MIN = stReqChangePhoto_ProtoFunID_FunID;
const stReqChangePhoto_ProtoFunID stReqChangePhoto_ProtoFunID_ProtoFunID_MAX = stReqChangePhoto_ProtoFunID_FunID;
const int stReqChangePhoto_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqChangePhoto_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqChangePhoto_ProtoFunID_descriptor();
inline const ::std::string& stReqChangePhoto_ProtoFunID_Name(stReqChangePhoto_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqChangePhoto_ProtoFunID_descriptor(), value);
}
inline bool stReqChangePhoto_ProtoFunID_Parse(
    const ::std::string& name, stReqChangePhoto_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqChangePhoto_ProtoFunID>(
    stReqChangePhoto_ProtoFunID_descriptor(), name, value);
}
enum stChangePhotoResult_Result {
  stChangePhotoResult_Result_eSUCCESS = 1,
  stChangePhotoResult_Result_eFAILURE = 2
};
bool stChangePhotoResult_Result_IsValid(int value);
const stChangePhotoResult_Result stChangePhotoResult_Result_Result_MIN = stChangePhotoResult_Result_eSUCCESS;
const stChangePhotoResult_Result stChangePhotoResult_Result_Result_MAX = stChangePhotoResult_Result_eFAILURE;
const int stChangePhotoResult_Result_Result_ARRAYSIZE = stChangePhotoResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangePhotoResult_Result_descriptor();
inline const ::std::string& stChangePhotoResult_Result_Name(stChangePhotoResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangePhotoResult_Result_descriptor(), value);
}
inline bool stChangePhotoResult_Result_Parse(
    const ::std::string& name, stChangePhotoResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangePhotoResult_Result>(
    stChangePhotoResult_Result_descriptor(), name, value);
}
enum stChangePhotoResult_ProtoModID {
  stChangePhotoResult_ProtoModID_ModID = 2
};
bool stChangePhotoResult_ProtoModID_IsValid(int value);
const stChangePhotoResult_ProtoModID stChangePhotoResult_ProtoModID_ProtoModID_MIN = stChangePhotoResult_ProtoModID_ModID;
const stChangePhotoResult_ProtoModID stChangePhotoResult_ProtoModID_ProtoModID_MAX = stChangePhotoResult_ProtoModID_ModID;
const int stChangePhotoResult_ProtoModID_ProtoModID_ARRAYSIZE = stChangePhotoResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangePhotoResult_ProtoModID_descriptor();
inline const ::std::string& stChangePhotoResult_ProtoModID_Name(stChangePhotoResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangePhotoResult_ProtoModID_descriptor(), value);
}
inline bool stChangePhotoResult_ProtoModID_Parse(
    const ::std::string& name, stChangePhotoResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangePhotoResult_ProtoModID>(
    stChangePhotoResult_ProtoModID_descriptor(), name, value);
}
enum stChangePhotoResult_ProtoFunID {
  stChangePhotoResult_ProtoFunID_FunID = 231
};
bool stChangePhotoResult_ProtoFunID_IsValid(int value);
const stChangePhotoResult_ProtoFunID stChangePhotoResult_ProtoFunID_ProtoFunID_MIN = stChangePhotoResult_ProtoFunID_FunID;
const stChangePhotoResult_ProtoFunID stChangePhotoResult_ProtoFunID_ProtoFunID_MAX = stChangePhotoResult_ProtoFunID_FunID;
const int stChangePhotoResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stChangePhotoResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stChangePhotoResult_ProtoFunID_descriptor();
inline const ::std::string& stChangePhotoResult_ProtoFunID_Name(stChangePhotoResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stChangePhotoResult_ProtoFunID_descriptor(), value);
}
inline bool stChangePhotoResult_ProtoFunID_Parse(
    const ::std::string& name, stChangePhotoResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stChangePhotoResult_ProtoFunID>(
    stChangePhotoResult_ProtoFunID_descriptor(), name, value);
}
enum stReqHasPhotoID_ProtoModID {
  stReqHasPhotoID_ProtoModID_ModID = 2
};
bool stReqHasPhotoID_ProtoModID_IsValid(int value);
const stReqHasPhotoID_ProtoModID stReqHasPhotoID_ProtoModID_ProtoModID_MIN = stReqHasPhotoID_ProtoModID_ModID;
const stReqHasPhotoID_ProtoModID stReqHasPhotoID_ProtoModID_ProtoModID_MAX = stReqHasPhotoID_ProtoModID_ModID;
const int stReqHasPhotoID_ProtoModID_ProtoModID_ARRAYSIZE = stReqHasPhotoID_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHasPhotoID_ProtoModID_descriptor();
inline const ::std::string& stReqHasPhotoID_ProtoModID_Name(stReqHasPhotoID_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHasPhotoID_ProtoModID_descriptor(), value);
}
inline bool stReqHasPhotoID_ProtoModID_Parse(
    const ::std::string& name, stReqHasPhotoID_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHasPhotoID_ProtoModID>(
    stReqHasPhotoID_ProtoModID_descriptor(), name, value);
}
enum stReqHasPhotoID_ProtoFunID {
  stReqHasPhotoID_ProtoFunID_FunID = 232
};
bool stReqHasPhotoID_ProtoFunID_IsValid(int value);
const stReqHasPhotoID_ProtoFunID stReqHasPhotoID_ProtoFunID_ProtoFunID_MIN = stReqHasPhotoID_ProtoFunID_FunID;
const stReqHasPhotoID_ProtoFunID stReqHasPhotoID_ProtoFunID_ProtoFunID_MAX = stReqHasPhotoID_ProtoFunID_FunID;
const int stReqHasPhotoID_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqHasPhotoID_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqHasPhotoID_ProtoFunID_descriptor();
inline const ::std::string& stReqHasPhotoID_ProtoFunID_Name(stReqHasPhotoID_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqHasPhotoID_ProtoFunID_descriptor(), value);
}
inline bool stReqHasPhotoID_ProtoFunID_Parse(
    const ::std::string& name, stReqHasPhotoID_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqHasPhotoID_ProtoFunID>(
    stReqHasPhotoID_ProtoFunID_descriptor(), name, value);
}
enum stHasPhotoIDResult_ProtoModID {
  stHasPhotoIDResult_ProtoModID_ModID = 2
};
bool stHasPhotoIDResult_ProtoModID_IsValid(int value);
const stHasPhotoIDResult_ProtoModID stHasPhotoIDResult_ProtoModID_ProtoModID_MIN = stHasPhotoIDResult_ProtoModID_ModID;
const stHasPhotoIDResult_ProtoModID stHasPhotoIDResult_ProtoModID_ProtoModID_MAX = stHasPhotoIDResult_ProtoModID_ModID;
const int stHasPhotoIDResult_ProtoModID_ProtoModID_ARRAYSIZE = stHasPhotoIDResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHasPhotoIDResult_ProtoModID_descriptor();
inline const ::std::string& stHasPhotoIDResult_ProtoModID_Name(stHasPhotoIDResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHasPhotoIDResult_ProtoModID_descriptor(), value);
}
inline bool stHasPhotoIDResult_ProtoModID_Parse(
    const ::std::string& name, stHasPhotoIDResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHasPhotoIDResult_ProtoModID>(
    stHasPhotoIDResult_ProtoModID_descriptor(), name, value);
}
enum stHasPhotoIDResult_ProtoFunID {
  stHasPhotoIDResult_ProtoFunID_FunID = 233
};
bool stHasPhotoIDResult_ProtoFunID_IsValid(int value);
const stHasPhotoIDResult_ProtoFunID stHasPhotoIDResult_ProtoFunID_ProtoFunID_MIN = stHasPhotoIDResult_ProtoFunID_FunID;
const stHasPhotoIDResult_ProtoFunID stHasPhotoIDResult_ProtoFunID_ProtoFunID_MAX = stHasPhotoIDResult_ProtoFunID_FunID;
const int stHasPhotoIDResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stHasPhotoIDResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stHasPhotoIDResult_ProtoFunID_descriptor();
inline const ::std::string& stHasPhotoIDResult_ProtoFunID_Name(stHasPhotoIDResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stHasPhotoIDResult_ProtoFunID_descriptor(), value);
}
inline bool stHasPhotoIDResult_ProtoFunID_Parse(
    const ::std::string& name, stHasPhotoIDResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stHasPhotoIDResult_ProtoFunID>(
    stHasPhotoIDResult_ProtoFunID_descriptor(), name, value);
}
enum stReqUnlockPhoto_ProtoModID {
  stReqUnlockPhoto_ProtoModID_ModID = 2
};
bool stReqUnlockPhoto_ProtoModID_IsValid(int value);
const stReqUnlockPhoto_ProtoModID stReqUnlockPhoto_ProtoModID_ProtoModID_MIN = stReqUnlockPhoto_ProtoModID_ModID;
const stReqUnlockPhoto_ProtoModID stReqUnlockPhoto_ProtoModID_ProtoModID_MAX = stReqUnlockPhoto_ProtoModID_ModID;
const int stReqUnlockPhoto_ProtoModID_ProtoModID_ARRAYSIZE = stReqUnlockPhoto_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUnlockPhoto_ProtoModID_descriptor();
inline const ::std::string& stReqUnlockPhoto_ProtoModID_Name(stReqUnlockPhoto_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUnlockPhoto_ProtoModID_descriptor(), value);
}
inline bool stReqUnlockPhoto_ProtoModID_Parse(
    const ::std::string& name, stReqUnlockPhoto_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUnlockPhoto_ProtoModID>(
    stReqUnlockPhoto_ProtoModID_descriptor(), name, value);
}
enum stReqUnlockPhoto_ProtoFunID {
  stReqUnlockPhoto_ProtoFunID_FunID = 234
};
bool stReqUnlockPhoto_ProtoFunID_IsValid(int value);
const stReqUnlockPhoto_ProtoFunID stReqUnlockPhoto_ProtoFunID_ProtoFunID_MIN = stReqUnlockPhoto_ProtoFunID_FunID;
const stReqUnlockPhoto_ProtoFunID stReqUnlockPhoto_ProtoFunID_ProtoFunID_MAX = stReqUnlockPhoto_ProtoFunID_FunID;
const int stReqUnlockPhoto_ProtoFunID_ProtoFunID_ARRAYSIZE = stReqUnlockPhoto_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stReqUnlockPhoto_ProtoFunID_descriptor();
inline const ::std::string& stReqUnlockPhoto_ProtoFunID_Name(stReqUnlockPhoto_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stReqUnlockPhoto_ProtoFunID_descriptor(), value);
}
inline bool stReqUnlockPhoto_ProtoFunID_Parse(
    const ::std::string& name, stReqUnlockPhoto_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stReqUnlockPhoto_ProtoFunID>(
    stReqUnlockPhoto_ProtoFunID_descriptor(), name, value);
}
enum stUnlockPhotoResult_Result {
  stUnlockPhotoResult_Result_eSUCCESS = 1,
  stUnlockPhotoResult_Result_eFAILURE = 2,
  stUnlockPhotoResult_Result_eCOND_NOT_ENOUGH = 3
};
bool stUnlockPhotoResult_Result_IsValid(int value);
const stUnlockPhotoResult_Result stUnlockPhotoResult_Result_Result_MIN = stUnlockPhotoResult_Result_eSUCCESS;
const stUnlockPhotoResult_Result stUnlockPhotoResult_Result_Result_MAX = stUnlockPhotoResult_Result_eCOND_NOT_ENOUGH;
const int stUnlockPhotoResult_Result_Result_ARRAYSIZE = stUnlockPhotoResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockPhotoResult_Result_descriptor();
inline const ::std::string& stUnlockPhotoResult_Result_Name(stUnlockPhotoResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockPhotoResult_Result_descriptor(), value);
}
inline bool stUnlockPhotoResult_Result_Parse(
    const ::std::string& name, stUnlockPhotoResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockPhotoResult_Result>(
    stUnlockPhotoResult_Result_descriptor(), name, value);
}
enum stUnlockPhotoResult_ProtoModID {
  stUnlockPhotoResult_ProtoModID_ModID = 2
};
bool stUnlockPhotoResult_ProtoModID_IsValid(int value);
const stUnlockPhotoResult_ProtoModID stUnlockPhotoResult_ProtoModID_ProtoModID_MIN = stUnlockPhotoResult_ProtoModID_ModID;
const stUnlockPhotoResult_ProtoModID stUnlockPhotoResult_ProtoModID_ProtoModID_MAX = stUnlockPhotoResult_ProtoModID_ModID;
const int stUnlockPhotoResult_ProtoModID_ProtoModID_ARRAYSIZE = stUnlockPhotoResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockPhotoResult_ProtoModID_descriptor();
inline const ::std::string& stUnlockPhotoResult_ProtoModID_Name(stUnlockPhotoResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockPhotoResult_ProtoModID_descriptor(), value);
}
inline bool stUnlockPhotoResult_ProtoModID_Parse(
    const ::std::string& name, stUnlockPhotoResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockPhotoResult_ProtoModID>(
    stUnlockPhotoResult_ProtoModID_descriptor(), name, value);
}
enum stUnlockPhotoResult_ProtoFunID {
  stUnlockPhotoResult_ProtoFunID_FunID = 235
};
bool stUnlockPhotoResult_ProtoFunID_IsValid(int value);
const stUnlockPhotoResult_ProtoFunID stUnlockPhotoResult_ProtoFunID_ProtoFunID_MIN = stUnlockPhotoResult_ProtoFunID_FunID;
const stUnlockPhotoResult_ProtoFunID stUnlockPhotoResult_ProtoFunID_ProtoFunID_MAX = stUnlockPhotoResult_ProtoFunID_FunID;
const int stUnlockPhotoResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stUnlockPhotoResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stUnlockPhotoResult_ProtoFunID_descriptor();
inline const ::std::string& stUnlockPhotoResult_ProtoFunID_Name(stUnlockPhotoResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stUnlockPhotoResult_ProtoFunID_descriptor(), value);
}
inline bool stUnlockPhotoResult_ProtoFunID_Parse(
    const ::std::string& name, stUnlockPhotoResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stUnlockPhotoResult_ProtoFunID>(
    stUnlockPhotoResult_ProtoFunID_descriptor(), name, value);
}
enum stSpriteInfo_ProtoModID {
  stSpriteInfo_ProtoModID_ModID = 2
};
bool stSpriteInfo_ProtoModID_IsValid(int value);
const stSpriteInfo_ProtoModID stSpriteInfo_ProtoModID_ProtoModID_MIN = stSpriteInfo_ProtoModID_ModID;
const stSpriteInfo_ProtoModID stSpriteInfo_ProtoModID_ProtoModID_MAX = stSpriteInfo_ProtoModID_ModID;
const int stSpriteInfo_ProtoModID_ProtoModID_ARRAYSIZE = stSpriteInfo_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteInfo_ProtoModID_descriptor();
inline const ::std::string& stSpriteInfo_ProtoModID_Name(stSpriteInfo_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteInfo_ProtoModID_descriptor(), value);
}
inline bool stSpriteInfo_ProtoModID_Parse(
    const ::std::string& name, stSpriteInfo_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteInfo_ProtoModID>(
    stSpriteInfo_ProtoModID_descriptor(), name, value);
}
enum stSpriteInfo_ProtoFunID {
  stSpriteInfo_ProtoFunID_FunID = 236
};
bool stSpriteInfo_ProtoFunID_IsValid(int value);
const stSpriteInfo_ProtoFunID stSpriteInfo_ProtoFunID_ProtoFunID_MIN = stSpriteInfo_ProtoFunID_FunID;
const stSpriteInfo_ProtoFunID stSpriteInfo_ProtoFunID_ProtoFunID_MAX = stSpriteInfo_ProtoFunID_FunID;
const int stSpriteInfo_ProtoFunID_ProtoFunID_ARRAYSIZE = stSpriteInfo_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteInfo_ProtoFunID_descriptor();
inline const ::std::string& stSpriteInfo_ProtoFunID_Name(stSpriteInfo_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteInfo_ProtoFunID_descriptor(), value);
}
inline bool stSpriteInfo_ProtoFunID_Parse(
    const ::std::string& name, stSpriteInfo_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteInfo_ProtoFunID>(
    stSpriteInfo_ProtoFunID_descriptor(), name, value);
}
enum stSpriteInfoResult_Result {
  stSpriteInfoResult_Result_eSUCCESS = 1,
  stSpriteInfoResult_Result_eFAILURE = 2
};
bool stSpriteInfoResult_Result_IsValid(int value);
const stSpriteInfoResult_Result stSpriteInfoResult_Result_Result_MIN = stSpriteInfoResult_Result_eSUCCESS;
const stSpriteInfoResult_Result stSpriteInfoResult_Result_Result_MAX = stSpriteInfoResult_Result_eFAILURE;
const int stSpriteInfoResult_Result_Result_ARRAYSIZE = stSpriteInfoResult_Result_Result_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteInfoResult_Result_descriptor();
inline const ::std::string& stSpriteInfoResult_Result_Name(stSpriteInfoResult_Result value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteInfoResult_Result_descriptor(), value);
}
inline bool stSpriteInfoResult_Result_Parse(
    const ::std::string& name, stSpriteInfoResult_Result* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteInfoResult_Result>(
    stSpriteInfoResult_Result_descriptor(), name, value);
}
enum stSpriteInfoResult_ProtoModID {
  stSpriteInfoResult_ProtoModID_ModID = 2
};
bool stSpriteInfoResult_ProtoModID_IsValid(int value);
const stSpriteInfoResult_ProtoModID stSpriteInfoResult_ProtoModID_ProtoModID_MIN = stSpriteInfoResult_ProtoModID_ModID;
const stSpriteInfoResult_ProtoModID stSpriteInfoResult_ProtoModID_ProtoModID_MAX = stSpriteInfoResult_ProtoModID_ModID;
const int stSpriteInfoResult_ProtoModID_ProtoModID_ARRAYSIZE = stSpriteInfoResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteInfoResult_ProtoModID_descriptor();
inline const ::std::string& stSpriteInfoResult_ProtoModID_Name(stSpriteInfoResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteInfoResult_ProtoModID_descriptor(), value);
}
inline bool stSpriteInfoResult_ProtoModID_Parse(
    const ::std::string& name, stSpriteInfoResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteInfoResult_ProtoModID>(
    stSpriteInfoResult_ProtoModID_descriptor(), name, value);
}
enum stSpriteInfoResult_ProtoFunID {
  stSpriteInfoResult_ProtoFunID_FunID = 237
};
bool stSpriteInfoResult_ProtoFunID_IsValid(int value);
const stSpriteInfoResult_ProtoFunID stSpriteInfoResult_ProtoFunID_ProtoFunID_MIN = stSpriteInfoResult_ProtoFunID_FunID;
const stSpriteInfoResult_ProtoFunID stSpriteInfoResult_ProtoFunID_ProtoFunID_MAX = stSpriteInfoResult_ProtoFunID_FunID;
const int stSpriteInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stSpriteInfoResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSpriteInfoResult_ProtoFunID_descriptor();
inline const ::std::string& stSpriteInfoResult_ProtoFunID_Name(stSpriteInfoResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSpriteInfoResult_ProtoFunID_descriptor(), value);
}
inline bool stSpriteInfoResult_ProtoFunID_Parse(
    const ::std::string& name, stSpriteInfoResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSpriteInfoResult_ProtoFunID>(
    stSpriteInfoResult_ProtoFunID_descriptor(), name, value);
}
enum stTrainHeroReq_ProtoModID {
  stTrainHeroReq_ProtoModID_ModID = 2
};
bool stTrainHeroReq_ProtoModID_IsValid(int value);
const stTrainHeroReq_ProtoModID stTrainHeroReq_ProtoModID_ProtoModID_MIN = stTrainHeroReq_ProtoModID_ModID;
const stTrainHeroReq_ProtoModID stTrainHeroReq_ProtoModID_ProtoModID_MAX = stTrainHeroReq_ProtoModID_ModID;
const int stTrainHeroReq_ProtoModID_ProtoModID_ARRAYSIZE = stTrainHeroReq_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTrainHeroReq_ProtoModID_descriptor();
inline const ::std::string& stTrainHeroReq_ProtoModID_Name(stTrainHeroReq_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTrainHeroReq_ProtoModID_descriptor(), value);
}
inline bool stTrainHeroReq_ProtoModID_Parse(
    const ::std::string& name, stTrainHeroReq_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTrainHeroReq_ProtoModID>(
    stTrainHeroReq_ProtoModID_descriptor(), name, value);
}
enum stTrainHeroReq_ProtoFunID {
  stTrainHeroReq_ProtoFunID_FunID = 238
};
bool stTrainHeroReq_ProtoFunID_IsValid(int value);
const stTrainHeroReq_ProtoFunID stTrainHeroReq_ProtoFunID_ProtoFunID_MIN = stTrainHeroReq_ProtoFunID_FunID;
const stTrainHeroReq_ProtoFunID stTrainHeroReq_ProtoFunID_ProtoFunID_MAX = stTrainHeroReq_ProtoFunID_FunID;
const int stTrainHeroReq_ProtoFunID_ProtoFunID_ARRAYSIZE = stTrainHeroReq_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTrainHeroReq_ProtoFunID_descriptor();
inline const ::std::string& stTrainHeroReq_ProtoFunID_Name(stTrainHeroReq_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTrainHeroReq_ProtoFunID_descriptor(), value);
}
inline bool stTrainHeroReq_ProtoFunID_Parse(
    const ::std::string& name, stTrainHeroReq_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTrainHeroReq_ProtoFunID>(
    stTrainHeroReq_ProtoFunID_descriptor(), name, value);
}
enum stTrainHeroResult_eResult {
  stTrainHeroResult_eResult_eSuccess = 1,
  stTrainHeroResult_eResult_eHero_Not_Exist = 2,
  stTrainHeroResult_eResult_eItem_Not_Exist = 3,
  stTrainHeroResult_eResult_eHero_Max_Train_Level = 4,
  stTrainHeroResult_eResult_eInner_Error = 5,
  stTrainHeroResult_eResult_eTrainSP = 6
};
bool stTrainHeroResult_eResult_IsValid(int value);
const stTrainHeroResult_eResult stTrainHeroResult_eResult_eResult_MIN = stTrainHeroResult_eResult_eSuccess;
const stTrainHeroResult_eResult stTrainHeroResult_eResult_eResult_MAX = stTrainHeroResult_eResult_eTrainSP;
const int stTrainHeroResult_eResult_eResult_ARRAYSIZE = stTrainHeroResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTrainHeroResult_eResult_descriptor();
inline const ::std::string& stTrainHeroResult_eResult_Name(stTrainHeroResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTrainHeroResult_eResult_descriptor(), value);
}
inline bool stTrainHeroResult_eResult_Parse(
    const ::std::string& name, stTrainHeroResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTrainHeroResult_eResult>(
    stTrainHeroResult_eResult_descriptor(), name, value);
}
enum stTrainHeroResult_ProtoModID {
  stTrainHeroResult_ProtoModID_ModID = 2
};
bool stTrainHeroResult_ProtoModID_IsValid(int value);
const stTrainHeroResult_ProtoModID stTrainHeroResult_ProtoModID_ProtoModID_MIN = stTrainHeroResult_ProtoModID_ModID;
const stTrainHeroResult_ProtoModID stTrainHeroResult_ProtoModID_ProtoModID_MAX = stTrainHeroResult_ProtoModID_ModID;
const int stTrainHeroResult_ProtoModID_ProtoModID_ARRAYSIZE = stTrainHeroResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTrainHeroResult_ProtoModID_descriptor();
inline const ::std::string& stTrainHeroResult_ProtoModID_Name(stTrainHeroResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTrainHeroResult_ProtoModID_descriptor(), value);
}
inline bool stTrainHeroResult_ProtoModID_Parse(
    const ::std::string& name, stTrainHeroResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTrainHeroResult_ProtoModID>(
    stTrainHeroResult_ProtoModID_descriptor(), name, value);
}
enum stTrainHeroResult_ProtoFunID {
  stTrainHeroResult_ProtoFunID_FunID = 239
};
bool stTrainHeroResult_ProtoFunID_IsValid(int value);
const stTrainHeroResult_ProtoFunID stTrainHeroResult_ProtoFunID_ProtoFunID_MIN = stTrainHeroResult_ProtoFunID_FunID;
const stTrainHeroResult_ProtoFunID stTrainHeroResult_ProtoFunID_ProtoFunID_MAX = stTrainHeroResult_ProtoFunID_FunID;
const int stTrainHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stTrainHeroResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stTrainHeroResult_ProtoFunID_descriptor();
inline const ::std::string& stTrainHeroResult_ProtoFunID_Name(stTrainHeroResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stTrainHeroResult_ProtoFunID_descriptor(), value);
}
inline bool stTrainHeroResult_ProtoFunID_Parse(
    const ::std::string& name, stTrainHeroResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stTrainHeroResult_ProtoFunID>(
    stTrainHeroResult_ProtoFunID_descriptor(), name, value);
}
enum stGuaJiTimeNtf_ProtoModID {
  stGuaJiTimeNtf_ProtoModID_ModID = 2
};
bool stGuaJiTimeNtf_ProtoModID_IsValid(int value);
const stGuaJiTimeNtf_ProtoModID stGuaJiTimeNtf_ProtoModID_ProtoModID_MIN = stGuaJiTimeNtf_ProtoModID_ModID;
const stGuaJiTimeNtf_ProtoModID stGuaJiTimeNtf_ProtoModID_ProtoModID_MAX = stGuaJiTimeNtf_ProtoModID_ModID;
const int stGuaJiTimeNtf_ProtoModID_ProtoModID_ARRAYSIZE = stGuaJiTimeNtf_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiTimeNtf_ProtoModID_descriptor();
inline const ::std::string& stGuaJiTimeNtf_ProtoModID_Name(stGuaJiTimeNtf_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiTimeNtf_ProtoModID_descriptor(), value);
}
inline bool stGuaJiTimeNtf_ProtoModID_Parse(
    const ::std::string& name, stGuaJiTimeNtf_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiTimeNtf_ProtoModID>(
    stGuaJiTimeNtf_ProtoModID_descriptor(), name, value);
}
enum stGuaJiTimeNtf_ProtoFunID {
  stGuaJiTimeNtf_ProtoFunID_FunID = 240
};
bool stGuaJiTimeNtf_ProtoFunID_IsValid(int value);
const stGuaJiTimeNtf_ProtoFunID stGuaJiTimeNtf_ProtoFunID_ProtoFunID_MIN = stGuaJiTimeNtf_ProtoFunID_FunID;
const stGuaJiTimeNtf_ProtoFunID stGuaJiTimeNtf_ProtoFunID_ProtoFunID_MAX = stGuaJiTimeNtf_ProtoFunID_FunID;
const int stGuaJiTimeNtf_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuaJiTimeNtf_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiTimeNtf_ProtoFunID_descriptor();
inline const ::std::string& stGuaJiTimeNtf_ProtoFunID_Name(stGuaJiTimeNtf_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiTimeNtf_ProtoFunID_descriptor(), value);
}
inline bool stGuaJiTimeNtf_ProtoFunID_Parse(
    const ::std::string& name, stGuaJiTimeNtf_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiTimeNtf_ProtoFunID>(
    stGuaJiTimeNtf_ProtoFunID_descriptor(), name, value);
}
enum stGuaJiAwardReq_ProtoModID {
  stGuaJiAwardReq_ProtoModID_ModID = 2
};
bool stGuaJiAwardReq_ProtoModID_IsValid(int value);
const stGuaJiAwardReq_ProtoModID stGuaJiAwardReq_ProtoModID_ProtoModID_MIN = stGuaJiAwardReq_ProtoModID_ModID;
const stGuaJiAwardReq_ProtoModID stGuaJiAwardReq_ProtoModID_ProtoModID_MAX = stGuaJiAwardReq_ProtoModID_ModID;
const int stGuaJiAwardReq_ProtoModID_ProtoModID_ARRAYSIZE = stGuaJiAwardReq_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiAwardReq_ProtoModID_descriptor();
inline const ::std::string& stGuaJiAwardReq_ProtoModID_Name(stGuaJiAwardReq_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiAwardReq_ProtoModID_descriptor(), value);
}
inline bool stGuaJiAwardReq_ProtoModID_Parse(
    const ::std::string& name, stGuaJiAwardReq_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiAwardReq_ProtoModID>(
    stGuaJiAwardReq_ProtoModID_descriptor(), name, value);
}
enum stGuaJiAwardReq_ProtoFunID {
  stGuaJiAwardReq_ProtoFunID_FunID = 241
};
bool stGuaJiAwardReq_ProtoFunID_IsValid(int value);
const stGuaJiAwardReq_ProtoFunID stGuaJiAwardReq_ProtoFunID_ProtoFunID_MIN = stGuaJiAwardReq_ProtoFunID_FunID;
const stGuaJiAwardReq_ProtoFunID stGuaJiAwardReq_ProtoFunID_ProtoFunID_MAX = stGuaJiAwardReq_ProtoFunID_FunID;
const int stGuaJiAwardReq_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuaJiAwardReq_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiAwardReq_ProtoFunID_descriptor();
inline const ::std::string& stGuaJiAwardReq_ProtoFunID_Name(stGuaJiAwardReq_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiAwardReq_ProtoFunID_descriptor(), value);
}
inline bool stGuaJiAwardReq_ProtoFunID_Parse(
    const ::std::string& name, stGuaJiAwardReq_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiAwardReq_ProtoFunID>(
    stGuaJiAwardReq_ProtoFunID_descriptor(), name, value);
}
enum stGuaJiAwardResult_eResult {
  stGuaJiAwardResult_eResult_eSuccess = 1,
  stGuaJiAwardResult_eResult_eTime = 2,
  stGuaJiAwardResult_eResult_eInner_Error = 3
};
bool stGuaJiAwardResult_eResult_IsValid(int value);
const stGuaJiAwardResult_eResult stGuaJiAwardResult_eResult_eResult_MIN = stGuaJiAwardResult_eResult_eSuccess;
const stGuaJiAwardResult_eResult stGuaJiAwardResult_eResult_eResult_MAX = stGuaJiAwardResult_eResult_eInner_Error;
const int stGuaJiAwardResult_eResult_eResult_ARRAYSIZE = stGuaJiAwardResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiAwardResult_eResult_descriptor();
inline const ::std::string& stGuaJiAwardResult_eResult_Name(stGuaJiAwardResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiAwardResult_eResult_descriptor(), value);
}
inline bool stGuaJiAwardResult_eResult_Parse(
    const ::std::string& name, stGuaJiAwardResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiAwardResult_eResult>(
    stGuaJiAwardResult_eResult_descriptor(), name, value);
}
enum stGuaJiAwardResult_ProtoModID {
  stGuaJiAwardResult_ProtoModID_ModID = 2
};
bool stGuaJiAwardResult_ProtoModID_IsValid(int value);
const stGuaJiAwardResult_ProtoModID stGuaJiAwardResult_ProtoModID_ProtoModID_MIN = stGuaJiAwardResult_ProtoModID_ModID;
const stGuaJiAwardResult_ProtoModID stGuaJiAwardResult_ProtoModID_ProtoModID_MAX = stGuaJiAwardResult_ProtoModID_ModID;
const int stGuaJiAwardResult_ProtoModID_ProtoModID_ARRAYSIZE = stGuaJiAwardResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiAwardResult_ProtoModID_descriptor();
inline const ::std::string& stGuaJiAwardResult_ProtoModID_Name(stGuaJiAwardResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiAwardResult_ProtoModID_descriptor(), value);
}
inline bool stGuaJiAwardResult_ProtoModID_Parse(
    const ::std::string& name, stGuaJiAwardResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiAwardResult_ProtoModID>(
    stGuaJiAwardResult_ProtoModID_descriptor(), name, value);
}
enum stGuaJiAwardResult_ProtoFunID {
  stGuaJiAwardResult_ProtoFunID_FunID = 242
};
bool stGuaJiAwardResult_ProtoFunID_IsValid(int value);
const stGuaJiAwardResult_ProtoFunID stGuaJiAwardResult_ProtoFunID_ProtoFunID_MIN = stGuaJiAwardResult_ProtoFunID_FunID;
const stGuaJiAwardResult_ProtoFunID stGuaJiAwardResult_ProtoFunID_ProtoFunID_MAX = stGuaJiAwardResult_ProtoFunID_FunID;
const int stGuaJiAwardResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuaJiAwardResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiAwardResult_ProtoFunID_descriptor();
inline const ::std::string& stGuaJiAwardResult_ProtoFunID_Name(stGuaJiAwardResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiAwardResult_ProtoFunID_descriptor(), value);
}
inline bool stGuaJiAwardResult_ProtoFunID_Parse(
    const ::std::string& name, stGuaJiAwardResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiAwardResult_ProtoFunID>(
    stGuaJiAwardResult_ProtoFunID_descriptor(), name, value);
}
enum stNftVipNtf_ProtoModID {
  stNftVipNtf_ProtoModID_ModID = 2
};
bool stNftVipNtf_ProtoModID_IsValid(int value);
const stNftVipNtf_ProtoModID stNftVipNtf_ProtoModID_ProtoModID_MIN = stNftVipNtf_ProtoModID_ModID;
const stNftVipNtf_ProtoModID stNftVipNtf_ProtoModID_ProtoModID_MAX = stNftVipNtf_ProtoModID_ModID;
const int stNftVipNtf_ProtoModID_ProtoModID_ARRAYSIZE = stNftVipNtf_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNftVipNtf_ProtoModID_descriptor();
inline const ::std::string& stNftVipNtf_ProtoModID_Name(stNftVipNtf_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNftVipNtf_ProtoModID_descriptor(), value);
}
inline bool stNftVipNtf_ProtoModID_Parse(
    const ::std::string& name, stNftVipNtf_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNftVipNtf_ProtoModID>(
    stNftVipNtf_ProtoModID_descriptor(), name, value);
}
enum stNftVipNtf_ProtoFunID {
  stNftVipNtf_ProtoFunID_FunID = 243
};
bool stNftVipNtf_ProtoFunID_IsValid(int value);
const stNftVipNtf_ProtoFunID stNftVipNtf_ProtoFunID_ProtoFunID_MIN = stNftVipNtf_ProtoFunID_FunID;
const stNftVipNtf_ProtoFunID stNftVipNtf_ProtoFunID_ProtoFunID_MAX = stNftVipNtf_ProtoFunID_FunID;
const int stNftVipNtf_ProtoFunID_ProtoFunID_ARRAYSIZE = stNftVipNtf_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stNftVipNtf_ProtoFunID_descriptor();
inline const ::std::string& stNftVipNtf_ProtoFunID_Name(stNftVipNtf_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stNftVipNtf_ProtoFunID_descriptor(), value);
}
inline bool stNftVipNtf_ProtoFunID_Parse(
    const ::std::string& name, stNftVipNtf_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stNftVipNtf_ProtoFunID>(
    stNftVipNtf_ProtoFunID_descriptor(), name, value);
}
enum stGuaJiStartReq_ProtoModID {
  stGuaJiStartReq_ProtoModID_ModID = 2
};
bool stGuaJiStartReq_ProtoModID_IsValid(int value);
const stGuaJiStartReq_ProtoModID stGuaJiStartReq_ProtoModID_ProtoModID_MIN = stGuaJiStartReq_ProtoModID_ModID;
const stGuaJiStartReq_ProtoModID stGuaJiStartReq_ProtoModID_ProtoModID_MAX = stGuaJiStartReq_ProtoModID_ModID;
const int stGuaJiStartReq_ProtoModID_ProtoModID_ARRAYSIZE = stGuaJiStartReq_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiStartReq_ProtoModID_descriptor();
inline const ::std::string& stGuaJiStartReq_ProtoModID_Name(stGuaJiStartReq_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiStartReq_ProtoModID_descriptor(), value);
}
inline bool stGuaJiStartReq_ProtoModID_Parse(
    const ::std::string& name, stGuaJiStartReq_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiStartReq_ProtoModID>(
    stGuaJiStartReq_ProtoModID_descriptor(), name, value);
}
enum stGuaJiStartReq_ProtoFunID {
  stGuaJiStartReq_ProtoFunID_FunID = 244
};
bool stGuaJiStartReq_ProtoFunID_IsValid(int value);
const stGuaJiStartReq_ProtoFunID stGuaJiStartReq_ProtoFunID_ProtoFunID_MIN = stGuaJiStartReq_ProtoFunID_FunID;
const stGuaJiStartReq_ProtoFunID stGuaJiStartReq_ProtoFunID_ProtoFunID_MAX = stGuaJiStartReq_ProtoFunID_FunID;
const int stGuaJiStartReq_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuaJiStartReq_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiStartReq_ProtoFunID_descriptor();
inline const ::std::string& stGuaJiStartReq_ProtoFunID_Name(stGuaJiStartReq_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiStartReq_ProtoFunID_descriptor(), value);
}
inline bool stGuaJiStartReq_ProtoFunID_Parse(
    const ::std::string& name, stGuaJiStartReq_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiStartReq_ProtoFunID>(
    stGuaJiStartReq_ProtoFunID_descriptor(), name, value);
}
enum stGuaJiStartResult_eResult {
  stGuaJiStartResult_eResult_eSuccess = 1,
  stGuaJiStartResult_eResult_eTodaylimit = 2,
  stGuaJiStartResult_eResult_eInner_Error = 3,
  stGuaJiStartResult_eResult_eCoin = 4,
  stGuaJiStartResult_eResult_eInGuaji = 5
};
bool stGuaJiStartResult_eResult_IsValid(int value);
const stGuaJiStartResult_eResult stGuaJiStartResult_eResult_eResult_MIN = stGuaJiStartResult_eResult_eSuccess;
const stGuaJiStartResult_eResult stGuaJiStartResult_eResult_eResult_MAX = stGuaJiStartResult_eResult_eInGuaji;
const int stGuaJiStartResult_eResult_eResult_ARRAYSIZE = stGuaJiStartResult_eResult_eResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiStartResult_eResult_descriptor();
inline const ::std::string& stGuaJiStartResult_eResult_Name(stGuaJiStartResult_eResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiStartResult_eResult_descriptor(), value);
}
inline bool stGuaJiStartResult_eResult_Parse(
    const ::std::string& name, stGuaJiStartResult_eResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiStartResult_eResult>(
    stGuaJiStartResult_eResult_descriptor(), name, value);
}
enum stGuaJiStartResult_ProtoModID {
  stGuaJiStartResult_ProtoModID_ModID = 2
};
bool stGuaJiStartResult_ProtoModID_IsValid(int value);
const stGuaJiStartResult_ProtoModID stGuaJiStartResult_ProtoModID_ProtoModID_MIN = stGuaJiStartResult_ProtoModID_ModID;
const stGuaJiStartResult_ProtoModID stGuaJiStartResult_ProtoModID_ProtoModID_MAX = stGuaJiStartResult_ProtoModID_ModID;
const int stGuaJiStartResult_ProtoModID_ProtoModID_ARRAYSIZE = stGuaJiStartResult_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiStartResult_ProtoModID_descriptor();
inline const ::std::string& stGuaJiStartResult_ProtoModID_Name(stGuaJiStartResult_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiStartResult_ProtoModID_descriptor(), value);
}
inline bool stGuaJiStartResult_ProtoModID_Parse(
    const ::std::string& name, stGuaJiStartResult_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiStartResult_ProtoModID>(
    stGuaJiStartResult_ProtoModID_descriptor(), name, value);
}
enum stGuaJiStartResult_ProtoFunID {
  stGuaJiStartResult_ProtoFunID_FunID = 245
};
bool stGuaJiStartResult_ProtoFunID_IsValid(int value);
const stGuaJiStartResult_ProtoFunID stGuaJiStartResult_ProtoFunID_ProtoFunID_MIN = stGuaJiStartResult_ProtoFunID_FunID;
const stGuaJiStartResult_ProtoFunID stGuaJiStartResult_ProtoFunID_ProtoFunID_MAX = stGuaJiStartResult_ProtoFunID_FunID;
const int stGuaJiStartResult_ProtoFunID_ProtoFunID_ARRAYSIZE = stGuaJiStartResult_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stGuaJiStartResult_ProtoFunID_descriptor();
inline const ::std::string& stGuaJiStartResult_ProtoFunID_Name(stGuaJiStartResult_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stGuaJiStartResult_ProtoFunID_descriptor(), value);
}
inline bool stGuaJiStartResult_ProtoFunID_Parse(
    const ::std::string& name, stGuaJiStartResult_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stGuaJiStartResult_ProtoFunID>(
    stGuaJiStartResult_ProtoFunID_descriptor(), name, value);
}
enum stSynRMBShopInfo2_ProtoModID {
  stSynRMBShopInfo2_ProtoModID_ModID = 2
};
bool stSynRMBShopInfo2_ProtoModID_IsValid(int value);
const stSynRMBShopInfo2_ProtoModID stSynRMBShopInfo2_ProtoModID_ProtoModID_MIN = stSynRMBShopInfo2_ProtoModID_ModID;
const stSynRMBShopInfo2_ProtoModID stSynRMBShopInfo2_ProtoModID_ProtoModID_MAX = stSynRMBShopInfo2_ProtoModID_ModID;
const int stSynRMBShopInfo2_ProtoModID_ProtoModID_ARRAYSIZE = stSynRMBShopInfo2_ProtoModID_ProtoModID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo2_ProtoModID_descriptor();
inline const ::std::string& stSynRMBShopInfo2_ProtoModID_Name(stSynRMBShopInfo2_ProtoModID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRMBShopInfo2_ProtoModID_descriptor(), value);
}
inline bool stSynRMBShopInfo2_ProtoModID_Parse(
    const ::std::string& name, stSynRMBShopInfo2_ProtoModID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRMBShopInfo2_ProtoModID>(
    stSynRMBShopInfo2_ProtoModID_descriptor(), name, value);
}
enum stSynRMBShopInfo2_ProtoFunID {
  stSynRMBShopInfo2_ProtoFunID_FunID = 246
};
bool stSynRMBShopInfo2_ProtoFunID_IsValid(int value);
const stSynRMBShopInfo2_ProtoFunID stSynRMBShopInfo2_ProtoFunID_ProtoFunID_MIN = stSynRMBShopInfo2_ProtoFunID_FunID;
const stSynRMBShopInfo2_ProtoFunID stSynRMBShopInfo2_ProtoFunID_ProtoFunID_MAX = stSynRMBShopInfo2_ProtoFunID_FunID;
const int stSynRMBShopInfo2_ProtoFunID_ProtoFunID_ARRAYSIZE = stSynRMBShopInfo2_ProtoFunID_ProtoFunID_MAX + 1;

const ::google::protobuf::EnumDescriptor* stSynRMBShopInfo2_ProtoFunID_descriptor();
inline const ::std::string& stSynRMBShopInfo2_ProtoFunID_Name(stSynRMBShopInfo2_ProtoFunID value) {
  return ::google::protobuf::internal::NameOfEnum(
    stSynRMBShopInfo2_ProtoFunID_descriptor(), value);
}
inline bool stSynRMBShopInfo2_ProtoFunID_Parse(
    const ::std::string& name, stSynRMBShopInfo2_ProtoFunID* value) {
  return ::google::protobuf::internal::ParseNamedEnum<stSynRMBShopInfo2_ProtoFunID>(
    stSynRMBShopInfo2_ProtoFunID_descriptor(), name, value);
}
enum eRoleJob {
  eJOB_WARRIOR = 1,
  eJOB_BOWMAN = 2,
  eJOB_MASTER = 3
};
bool eRoleJob_IsValid(int value);
const eRoleJob eRoleJob_MIN = eJOB_WARRIOR;
const eRoleJob eRoleJob_MAX = eJOB_MASTER;
const int eRoleJob_ARRAYSIZE = eRoleJob_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRoleJob_descriptor();
inline const ::std::string& eRoleJob_Name(eRoleJob value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRoleJob_descriptor(), value);
}
inline bool eRoleJob_Parse(
    const ::std::string& name, eRoleJob* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRoleJob>(
    eRoleJob_descriptor(), name, value);
}
enum eRoleSex {
  eSEX_MAN = 1,
  eSEX_FEMALE = 2
};
bool eRoleSex_IsValid(int value);
const eRoleSex eRoleSex_MIN = eSEX_MAN;
const eRoleSex eRoleSex_MAX = eSEX_FEMALE;
const int eRoleSex_ARRAYSIZE = eRoleSex_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRoleSex_descriptor();
inline const ::std::string& eRoleSex_Name(eRoleSex value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRoleSex_descriptor(), value);
}
inline bool eRoleSex_Parse(
    const ::std::string& name, eRoleSex* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRoleSex>(
    eRoleSex_descriptor(), name, value);
}
enum CreateRoleResultCode {
  CREATE_ROLE_SUCCESS = 0,
  CREATE_ROLE_NAME_REPEAT = 1,
  CREATE_ACCOUNT_HAS_ROLE = 2
};
bool CreateRoleResultCode_IsValid(int value);
const CreateRoleResultCode CreateRoleResultCode_MIN = CREATE_ROLE_SUCCESS;
const CreateRoleResultCode CreateRoleResultCode_MAX = CREATE_ACCOUNT_HAS_ROLE;
const int CreateRoleResultCode_ARRAYSIZE = CreateRoleResultCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* CreateRoleResultCode_descriptor();
inline const ::std::string& CreateRoleResultCode_Name(CreateRoleResultCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    CreateRoleResultCode_descriptor(), value);
}
inline bool CreateRoleResultCode_Parse(
    const ::std::string& name, CreateRoleResultCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CreateRoleResultCode>(
    CreateRoleResultCode_descriptor(), name, value);
}
enum eBagType {
  BAG_TYPE_MAIN1 = 1,
  BAG_TYPE_PIECE = 2,
  BAG_TYPE_EQUIP = 3,
  BAG_TYPE_HERO_PIECE = 4,
  BAG_TYPE_FASHION = 5,
  BAG_TYPE_RUNE_PIECE = 6,
  BAG_TYPE_RUNE = 7,
  BAG_TYPE_HERO_RUNE = 8,
  BAG_TYPE_MOUNT = 9
};
bool eBagType_IsValid(int value);
const eBagType eBagType_MIN = BAG_TYPE_MAIN1;
const eBagType eBagType_MAX = BAG_TYPE_MOUNT;
const int eBagType_ARRAYSIZE = eBagType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eBagType_descriptor();
inline const ::std::string& eBagType_Name(eBagType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eBagType_descriptor(), value);
}
inline bool eBagType_Parse(
    const ::std::string& name, eBagType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eBagType>(
    eBagType_descriptor(), name, value);
}
enum E_HERO_STATE {
  HERO_STATE_NONE = 1,
  HERO_STATE_SUMMONED = 2,
  HERO_STATE_BATTLE = 3
};
bool E_HERO_STATE_IsValid(int value);
const E_HERO_STATE E_HERO_STATE_MIN = HERO_STATE_NONE;
const E_HERO_STATE E_HERO_STATE_MAX = HERO_STATE_BATTLE;
const int E_HERO_STATE_ARRAYSIZE = E_HERO_STATE_MAX + 1;

const ::google::protobuf::EnumDescriptor* E_HERO_STATE_descriptor();
inline const ::std::string& E_HERO_STATE_Name(E_HERO_STATE value) {
  return ::google::protobuf::internal::NameOfEnum(
    E_HERO_STATE_descriptor(), value);
}
inline bool E_HERO_STATE_Parse(
    const ::std::string& name, E_HERO_STATE* value) {
  return ::google::protobuf::internal::ParseNamedEnum<E_HERO_STATE>(
    E_HERO_STATE_descriptor(), name, value);
}
enum ArrageMainBagError {
  ARRANGE_MAINBAG_ERROR_COOLDOWN = 1
};
bool ArrageMainBagError_IsValid(int value);
const ArrageMainBagError ArrageMainBagError_MIN = ARRANGE_MAINBAG_ERROR_COOLDOWN;
const ArrageMainBagError ArrageMainBagError_MAX = ARRANGE_MAINBAG_ERROR_COOLDOWN;
const int ArrageMainBagError_ARRAYSIZE = ArrageMainBagError_MAX + 1;

const ::google::protobuf::EnumDescriptor* ArrageMainBagError_descriptor();
inline const ::std::string& ArrageMainBagError_Name(ArrageMainBagError value) {
  return ::google::protobuf::internal::NameOfEnum(
    ArrageMainBagError_descriptor(), value);
}
inline bool ArrageMainBagError_Parse(
    const ::std::string& name, ArrageMainBagError* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ArrageMainBagError>(
    ArrageMainBagError_descriptor(), name, value);
}
enum eChatType {
  CHAT_TYPE_WORLD = 1,
  CHAT_TYPE_PRIVATE = 2,
  CHAT_TYPE_GUILD = 3,
  CHAT_TYPE_TEAM = 4,
  CHAT_TYPE_TEAMINFO = 5,
  CHAT_TYPE_NOTICE = 6
};
bool eChatType_IsValid(int value);
const eChatType eChatType_MIN = CHAT_TYPE_WORLD;
const eChatType eChatType_MAX = CHAT_TYPE_NOTICE;
const int eChatType_ARRAYSIZE = eChatType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eChatType_descriptor();
inline const ::std::string& eChatType_Name(eChatType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eChatType_descriptor(), value);
}
inline bool eChatType_Parse(
    const ::std::string& name, eChatType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eChatType>(
    eChatType_descriptor(), name, value);
}
enum eLevelStar {
  eLEVEL_STAR_0 = 0,
  eLEVEL_STAR_1 = 1,
  eLEVEL_STAR_2 = 2,
  eLEVEL_STAR_3 = 3
};
bool eLevelStar_IsValid(int value);
const eLevelStar eLevelStar_MIN = eLEVEL_STAR_0;
const eLevelStar eLevelStar_MAX = eLEVEL_STAR_3;
const int eLevelStar_ARRAYSIZE = eLevelStar_MAX + 1;

const ::google::protobuf::EnumDescriptor* eLevelStar_descriptor();
inline const ::std::string& eLevelStar_Name(eLevelStar value) {
  return ::google::protobuf::internal::NameOfEnum(
    eLevelStar_descriptor(), value);
}
inline bool eLevelStar_Parse(
    const ::std::string& name, eLevelStar* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eLevelStar>(
    eLevelStar_descriptor(), name, value);
}
enum eCharpterRewardStep {
  eCharpterReward_Step_0 = 0,
  eCharpterReward_Step_1 = 1,
  eCharpterReward_Step_2 = 2,
  eCharpterReward_Step_3 = 4
};
bool eCharpterRewardStep_IsValid(int value);
const eCharpterRewardStep eCharpterRewardStep_MIN = eCharpterReward_Step_0;
const eCharpterRewardStep eCharpterRewardStep_MAX = eCharpterReward_Step_3;
const int eCharpterRewardStep_ARRAYSIZE = eCharpterRewardStep_MAX + 1;

const ::google::protobuf::EnumDescriptor* eCharpterRewardStep_descriptor();
inline const ::std::string& eCharpterRewardStep_Name(eCharpterRewardStep value) {
  return ::google::protobuf::internal::NameOfEnum(
    eCharpterRewardStep_descriptor(), value);
}
inline bool eCharpterRewardStep_Parse(
    const ::std::string& name, eCharpterRewardStep* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eCharpterRewardStep>(
    eCharpterRewardStep_descriptor(), name, value);
}
enum eRushType {
  eRush_Type_1 = 1,
  eRush_Type_2 = 2
};
bool eRushType_IsValid(int value);
const eRushType eRushType_MIN = eRush_Type_1;
const eRushType eRushType_MAX = eRush_Type_2;
const int eRushType_ARRAYSIZE = eRushType_MAX + 1;

const ::google::protobuf::EnumDescriptor* eRushType_descriptor();
inline const ::std::string& eRushType_Name(eRushType value) {
  return ::google::protobuf::internal::NameOfEnum(
    eRushType_descriptor(), value);
}
inline bool eRushType_Parse(
    const ::std::string& name, eRushType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eRushType>(
    eRushType_descriptor(), name, value);
}
enum eSystemSetting {
  eSysSetting_ShowFashion = 1,
  eSysSetting_First_Enter_GoldCoin_LV1 = 2,
  eSysSetting_First_Enter_GoldCoin_LV2 = 3,
  eSysSetting_First_Enter_GoldCoin_LV3 = 4,
  eSysSetting_First_Enter_Survival_LV1 = 5,
  eSysSetting_First_Enter_Survival_LV2 = 6,
  eSysSetting_First_Enter_Survival_LV3 = 8,
  eSysSetting_First_Defeated = 9,
  eSysSettion_First_GoldLevel_Introducee = 10,
  eSysSettion_First_EliteLevel_Introducee = 11,
  eSysSettion_First_SurvialLevel_Introducee = 12,
  eSysSettion_First_OpenMap = 13,
  eSysSettion_First_Task_Interrupt = 14,
  eSysSettion_First_Goto_Guild = 15,
  eSysSettion_First_SuperBar_End = 16,
  eSysSettion_First_Got_Title = 17,
  eSysSettion_First_RUSH_LIMIT_LV = 18,
  eSysSettion_First_First_Enter_MainCity3 = 19,
  eSysSettion_First_Branch_TaskGuide = 20,
  eSysSettion_First_Get_Email = 21,
  eSysSettion_First_Open_Break = 22,
  eSysSettion_First_Guide = 23,
  eSysSettion_First_ScoreBatlleGuide = 24,
  eSysSettion_First_RealBattleFieldGuide = 25,
  eSysSettion_First_EscortedGuide = 26,
  eSysSettion_First_ExpeditionGuide = 27,
  eSysSettion_First_EmeralddreamGuide = 28,
  eSysSettion_First_Illusion_Sprite = 29,
  eSysSettion_First_OpenSecretTreture = 30,
  eSysSettion_First_In_Fashion_Enchant = 31,
  eSysSettion_First_PetRune = 32,
  eSysSettion_First_LeagueHero = 33,
  eSysSettion_First_RuneComp = 34,
  eSysSettion_First_GuideSemlt = 35,
  eSysSettion_First_Fight_Monkey = 36,
  eSysSettion_First_FriendGuide = 37,
  eSysSettion_Second_FriendGuide = 38,
  eSysSettion_First_Mount = 39,
  eSysSettion_First_ForthSkill = 40,
  eSysSettion_First_PetReplace = 41,
  eSysSettion_First_Rune = 42,
  eSysSettion_First_Smelt = 43,
  eSysSettion_First_Elfin = 44,
  eSysSettion_First_Union = 45,
  eSysSettion_ShowHelmet = 46,
  eSysSettion_Max = 47
};
bool eSystemSetting_IsValid(int value);
const eSystemSetting eSystemSetting_MIN = eSysSetting_ShowFashion;
const eSystemSetting eSystemSetting_MAX = eSysSettion_Max;
const int eSystemSetting_ARRAYSIZE = eSystemSetting_MAX + 1;

const ::google::protobuf::EnumDescriptor* eSystemSetting_descriptor();
inline const ::std::string& eSystemSetting_Name(eSystemSetting value) {
  return ::google::protobuf::internal::NameOfEnum(
    eSystemSetting_descriptor(), value);
}
inline bool eSystemSetting_Parse(
    const ::std::string& name, eSystemSetting* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eSystemSetting>(
    eSystemSetting_descriptor(), name, value);
}
enum eColumn {
  ePersonalList = 1,
  eGuildList = 2
};
bool eColumn_IsValid(int value);
const eColumn eColumn_MIN = ePersonalList;
const eColumn eColumn_MAX = eGuildList;
const int eColumn_ARRAYSIZE = eColumn_MAX + 1;

const ::google::protobuf::EnumDescriptor* eColumn_descriptor();
inline const ::std::string& eColumn_Name(eColumn value) {
  return ::google::protobuf::internal::NameOfEnum(
    eColumn_descriptor(), value);
}
inline bool eColumn_Parse(
    const ::std::string& name, eColumn* value) {
  return ::google::protobuf::internal::ParseNamedEnum<eColumn>(
    eColumn_descriptor(), name, value);
}
// ===================================================================

class stBattleProp : public ::google::protobuf::Message {
 public:
  stBattleProp();
  virtual ~stBattleProp();

  stBattleProp(const stBattleProp& from);

  inline stBattleProp& operator=(const stBattleProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBattleProp& default_instance();

  void Swap(stBattleProp* other);

  // implements Message ----------------------------------------------

  stBattleProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBattleProp& from);
  void MergeFrom(const stBattleProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 propID = 1;
  inline bool has_propid() const;
  inline void clear_propid();
  static const int kPropIDFieldNumber = 1;
  inline ::google::protobuf::uint32 propid() const;
  inline void set_propid(::google::protobuf::uint32 value);

  // optional uint32 propVal = 2;
  inline bool has_propval() const;
  inline void clear_propval();
  static const int kPropValFieldNumber = 2;
  inline ::google::protobuf::uint32 propval() const;
  inline void set_propval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stBattleProp)
 private:
  inline void set_has_propid();
  inline void clear_has_propid();
  inline void set_has_propval();
  inline void clear_has_propval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 propid_;
  ::google::protobuf::uint32 propval_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stBattleProp* default_instance_;
};
// -------------------------------------------------------------------

class stRoleMainData : public ::google::protobuf::Message {
 public:
  stRoleMainData();
  virtual ~stRoleMainData();

  stRoleMainData(const stRoleMainData& from);

  inline stRoleMainData& operator=(const stRoleMainData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRoleMainData& default_instance();

  void Swap(stRoleMainData* other);

  // implements Message ----------------------------------------------

  stRoleMainData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRoleMainData& from);
  void MergeFrom(const stRoleMainData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 goldCoin = 5;
  inline bool has_goldcoin() const;
  inline void clear_goldcoin();
  static const int kGoldCoinFieldNumber = 5;
  inline ::google::protobuf::uint32 goldcoin() const;
  inline void set_goldcoin(::google::protobuf::uint32 value);

  // optional uint32 pointCard = 6;
  inline bool has_pointcard() const;
  inline void clear_pointcard();
  static const int kPointCardFieldNumber = 6;
  inline ::google::protobuf::uint32 pointcard() const;
  inline void set_pointcard(::google::protobuf::uint32 value);

  // optional uint32 curHP = 7;
  inline bool has_curhp() const;
  inline void clear_curhp();
  static const int kCurHPFieldNumber = 7;
  inline ::google::protobuf::uint32 curhp() const;
  inline void set_curhp(::google::protobuf::uint32 value);

  // optional uint32 curMP = 8;
  inline bool has_curmp() const;
  inline void clear_curmp();
  static const int kCurMPFieldNumber = 8;
  inline ::google::protobuf::uint32 curmp() const;
  inline void set_curmp(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 9;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 9;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 heishijiejing = 10;
  inline bool has_heishijiejing() const;
  inline void clear_heishijiejing();
  static const int kHeishijiejingFieldNumber = 10;
  inline ::google::protobuf::uint32 heishijiejing() const;
  inline void set_heishijiejing(::google::protobuf::uint32 value);

  // optional uint32 reputaion = 11;
  inline bool has_reputaion() const;
  inline void clear_reputaion();
  static const int kReputaionFieldNumber = 11;
  inline ::google::protobuf::uint32 reputaion() const;
  inline void set_reputaion(::google::protobuf::uint32 value);

  // optional uint32 honour = 12;
  inline bool has_honour() const;
  inline void clear_honour();
  static const int kHonourFieldNumber = 12;
  inline ::google::protobuf::uint32 honour() const;
  inline void set_honour(::google::protobuf::uint32 value);

  // optional uint32 braveVal = 13;
  inline bool has_braveval() const;
  inline void clear_braveval();
  static const int kBraveValFieldNumber = 13;
  inline ::google::protobuf::uint32 braveval() const;
  inline void set_braveval(::google::protobuf::uint32 value);

  // optional uint32 peakCertificate = 14;
  inline bool has_peakcertificate() const;
  inline void clear_peakcertificate();
  static const int kPeakCertificateFieldNumber = 14;
  inline ::google::protobuf::uint32 peakcertificate() const;
  inline void set_peakcertificate(::google::protobuf::uint32 value);

  // optional uint32 hufu = 15;
  inline bool has_hufu() const;
  inline void clear_hufu();
  static const int kHufuFieldNumber = 15;
  inline ::google::protobuf::uint32 hufu() const;
  inline void set_hufu(::google::protobuf::uint32 value);

  // optional uint32 yuntie = 16;
  inline bool has_yuntie() const;
  inline void clear_yuntie();
  static const int kYuntieFieldNumber = 16;
  inline ::google::protobuf::uint32 yuntie() const;
  inline void set_yuntie(::google::protobuf::uint32 value);

  // optional uint32 totalRecharge = 17;
  inline bool has_totalrecharge() const;
  inline void clear_totalrecharge();
  static const int kTotalRechargeFieldNumber = 17;
  inline ::google::protobuf::uint32 totalrecharge() const;
  inline void set_totalrecharge(::google::protobuf::uint32 value);

  // optional uint32 todayRecharge = 18;
  inline bool has_todayrecharge() const;
  inline void clear_todayrecharge();
  static const int kTodayRechargeFieldNumber = 18;
  inline ::google::protobuf::uint32 todayrecharge() const;
  inline void set_todayrecharge(::google::protobuf::uint32 value);

  // optional uint32 job = 19;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 19;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 20;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 20;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 sp = 21;
  inline bool has_sp() const;
  inline void clear_sp();
  static const int kSpFieldNumber = 21;
  inline ::google::protobuf::uint32 sp() const;
  inline void set_sp(::google::protobuf::uint32 value);

  // optional uint32 lilian = 22;
  inline bool has_lilian() const;
  inline void clear_lilian();
  static const int kLilianFieldNumber = 22;
  inline ::google::protobuf::uint32 lilian() const;
  inline void set_lilian(::google::protobuf::uint32 value);

  // optional uint32 totalConsume = 24;
  inline bool has_totalconsume() const;
  inline void clear_totalconsume();
  static const int kTotalConsumeFieldNumber = 24;
  inline ::google::protobuf::uint32 totalconsume() const;
  inline void set_totalconsume(::google::protobuf::uint32 value);

  // optional uint32 juexingNum = 25;
  inline bool has_juexingnum() const;
  inline void clear_juexingnum();
  static const int kJuexingNumFieldNumber = 25;
  inline ::google::protobuf::uint32 juexingnum() const;
  inline void set_juexingnum(::google::protobuf::uint32 value);

  // optional uint32 juexingExp = 26;
  inline bool has_juexingexp() const;
  inline void clear_juexingexp();
  static const int kJuexingExpFieldNumber = 26;
  inline ::google::protobuf::uint32 juexingexp() const;
  inline void set_juexingexp(::google::protobuf::uint32 value);

  // optional uint32 joinGuildRemainTime = 27;
  inline bool has_joinguildremaintime() const;
  inline void clear_joinguildremaintime();
  static const int kJoinGuildRemainTimeFieldNumber = 27;
  inline ::google::protobuf::uint32 joinguildremaintime() const;
  inline void set_joinguildremaintime(::google::protobuf::uint32 value);

  // optional uint32 headID = 28;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 28;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 faceID = 29;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceIDFieldNumber = 29;
  inline ::google::protobuf::uint32 faceid() const;
  inline void set_faceid(::google::protobuf::uint32 value);

  // optional uint32 studyHeroSkillNum = 30;
  inline bool has_studyheroskillnum() const;
  inline void clear_studyheroskillnum();
  static const int kStudyHeroSkillNumFieldNumber = 30;
  inline ::google::protobuf::uint32 studyheroskillnum() const;
  inline void set_studyheroskillnum(::google::protobuf::uint32 value);

  // optional uint32 teamCopyMapNum = 31;
  inline bool has_teamcopymapnum() const;
  inline void clear_teamcopymapnum();
  static const int kTeamCopyMapNumFieldNumber = 31;
  inline ::google::protobuf::uint32 teamcopymapnum() const;
  inline void set_teamcopymapnum(::google::protobuf::uint32 value);

  // optional uint32 realTimePKNum = 32;
  inline bool has_realtimepknum() const;
  inline void clear_realtimepknum();
  static const int kRealTimePKNumFieldNumber = 32;
  inline ::google::protobuf::uint32 realtimepknum() const;
  inline void set_realtimepknum(::google::protobuf::uint32 value);

  // repeated .Role.stBattleProp battleProp = 33;
  inline int battleprop_size() const;
  inline void clear_battleprop();
  static const int kBattlePropFieldNumber = 33;
  inline const ::Role::stBattleProp& battleprop(int index) const;
  inline ::Role::stBattleProp* mutable_battleprop(int index);
  inline ::Role::stBattleProp* add_battleprop();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
      battleprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
      mutable_battleprop();

  // optional bool gotFstRechargeReward = 34;
  inline bool has_gotfstrechargereward() const;
  inline void clear_gotfstrechargereward();
  static const int kGotFstRechargeRewardFieldNumber = 34;
  inline bool gotfstrechargereward() const;
  inline void set_gotfstrechargereward(bool value);

  // optional uint32 teamCopymapResetNum = 35;
  inline bool has_teamcopymapresetnum() const;
  inline void clear_teamcopymapresetnum();
  static const int kTeamCopymapResetNumFieldNumber = 35;
  inline ::google::protobuf::uint32 teamcopymapresetnum() const;
  inline void set_teamcopymapresetnum(::google::protobuf::uint32 value);

  // optional uint32 realTimeResetNum = 36;
  inline bool has_realtimeresetnum() const;
  inline void clear_realtimeresetnum();
  static const int kRealTimeResetNumFieldNumber = 36;
  inline ::google::protobuf::uint32 realtimeresetnum() const;
  inline void set_realtimeresetnum(::google::protobuf::uint32 value);

  // optional bool gotFst10RechargeReward = 37;
  inline bool has_gotfst10rechargereward() const;
  inline void clear_gotfst10rechargereward();
  static const int kGotFst10RechargeRewardFieldNumber = 37;
  inline bool gotfst10rechargereward() const;
  inline void set_gotfst10rechargereward(bool value);

  // optional uint32 changeNameNum = 38;
  inline bool has_changenamenum() const;
  inline void clear_changenamenum();
  static const int kChangeNameNumFieldNumber = 38;
  inline ::google::protobuf::uint32 changenamenum() const;
  inline void set_changenamenum(::google::protobuf::uint32 value);

  // optional uint32 integral = 39;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 39;
  inline ::google::protobuf::uint32 integral() const;
  inline void set_integral(::google::protobuf::uint32 value);

  // optional uint32 soulFire = 40;
  inline bool has_soulfire() const;
  inline void clear_soulfire();
  static const int kSoulFireFieldNumber = 40;
  inline ::google::protobuf::uint32 soulfire() const;
  inline void set_soulfire(::google::protobuf::uint32 value);

  // optional uint32 glory = 41;
  inline bool has_glory() const;
  inline void clear_glory();
  static const int kGloryFieldNumber = 41;
  inline ::google::protobuf::uint32 glory() const;
  inline void set_glory(::google::protobuf::uint32 value);

  // optional uint32 coupleId = 42;
  inline bool has_coupleid() const;
  inline void clear_coupleid();
  static const int kCoupleIdFieldNumber = 42;
  inline ::google::protobuf::uint32 coupleid() const;
  inline void set_coupleid(::google::protobuf::uint32 value);

  // optional uint32 lifeEssence = 43;
  inline bool has_lifeessence() const;
  inline void clear_lifeessence();
  static const int kLifeEssenceFieldNumber = 43;
  inline ::google::protobuf::uint32 lifeessence() const;
  inline void set_lifeessence(::google::protobuf::uint32 value);

  // optional uint32 guidCrystal = 44;
  inline bool has_guidcrystal() const;
  inline void clear_guidcrystal();
  static const int kGuidCrystalFieldNumber = 44;
  inline ::google::protobuf::uint32 guidcrystal() const;
  inline void set_guidcrystal(::google::protobuf::uint32 value);

  // optional bool isReceive = 45;
  inline bool has_isreceive() const;
  inline void clear_isreceive();
  static const int kIsReceiveFieldNumber = 45;
  inline bool isreceive() const;
  inline void set_isreceive(bool value);

  // optional uint32 photoID = 46;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 46;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // optional uint32 trainSp = 47;
  inline bool has_trainsp() const;
  inline void clear_trainsp();
  static const int kTrainSpFieldNumber = 47;
  inline ::google::protobuf::uint32 trainsp() const;
  inline void set_trainsp(::google::protobuf::uint32 value);

  // optional uint32 guajiStart = 48;
  inline bool has_guajistart() const;
  inline void clear_guajistart();
  static const int kGuajiStartFieldNumber = 48;
  inline ::google::protobuf::uint32 guajistart() const;
  inline void set_guajistart(::google::protobuf::uint32 value);

  // optional uint32 guajiEnd = 49;
  inline bool has_guajiend() const;
  inline void clear_guajiend();
  static const int kGuajiEndFieldNumber = 49;
  inline ::google::protobuf::uint32 guajiend() const;
  inline void set_guajiend(::google::protobuf::uint32 value);

  // optional bool isRobot = 50;
  inline bool has_isrobot() const;
  inline void clear_isrobot();
  static const int kIsRobotFieldNumber = 50;
  inline bool isrobot() const;
  inline void set_isrobot(bool value);

  // optional uint32 guajiTodayCount = 51;
  inline bool has_guajitodaycount() const;
  inline void clear_guajitodaycount();
  static const int kGuajiTodayCountFieldNumber = 51;
  inline ::google::protobuf::uint32 guajitodaycount() const;
  inline void set_guajitodaycount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stRoleMainData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_goldcoin();
  inline void clear_has_goldcoin();
  inline void set_has_pointcard();
  inline void clear_has_pointcard();
  inline void set_has_curhp();
  inline void clear_has_curhp();
  inline void set_has_curmp();
  inline void clear_has_curmp();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_heishijiejing();
  inline void clear_has_heishijiejing();
  inline void set_has_reputaion();
  inline void clear_has_reputaion();
  inline void set_has_honour();
  inline void clear_has_honour();
  inline void set_has_braveval();
  inline void clear_has_braveval();
  inline void set_has_peakcertificate();
  inline void clear_has_peakcertificate();
  inline void set_has_hufu();
  inline void clear_has_hufu();
  inline void set_has_yuntie();
  inline void clear_has_yuntie();
  inline void set_has_totalrecharge();
  inline void clear_has_totalrecharge();
  inline void set_has_todayrecharge();
  inline void clear_has_todayrecharge();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_sp();
  inline void clear_has_sp();
  inline void set_has_lilian();
  inline void clear_has_lilian();
  inline void set_has_totalconsume();
  inline void clear_has_totalconsume();
  inline void set_has_juexingnum();
  inline void clear_has_juexingnum();
  inline void set_has_juexingexp();
  inline void clear_has_juexingexp();
  inline void set_has_joinguildremaintime();
  inline void clear_has_joinguildremaintime();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_studyheroskillnum();
  inline void clear_has_studyheroskillnum();
  inline void set_has_teamcopymapnum();
  inline void clear_has_teamcopymapnum();
  inline void set_has_realtimepknum();
  inline void clear_has_realtimepknum();
  inline void set_has_gotfstrechargereward();
  inline void clear_has_gotfstrechargereward();
  inline void set_has_teamcopymapresetnum();
  inline void clear_has_teamcopymapresetnum();
  inline void set_has_realtimeresetnum();
  inline void clear_has_realtimeresetnum();
  inline void set_has_gotfst10rechargereward();
  inline void clear_has_gotfst10rechargereward();
  inline void set_has_changenamenum();
  inline void clear_has_changenamenum();
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_soulfire();
  inline void clear_has_soulfire();
  inline void set_has_glory();
  inline void clear_has_glory();
  inline void set_has_coupleid();
  inline void clear_has_coupleid();
  inline void set_has_lifeessence();
  inline void clear_has_lifeessence();
  inline void set_has_guidcrystal();
  inline void clear_has_guidcrystal();
  inline void set_has_isreceive();
  inline void clear_has_isreceive();
  inline void set_has_photoid();
  inline void clear_has_photoid();
  inline void set_has_trainsp();
  inline void clear_has_trainsp();
  inline void set_has_guajistart();
  inline void clear_has_guajistart();
  inline void set_has_guajiend();
  inline void clear_has_guajiend();
  inline void set_has_isrobot();
  inline void clear_has_isrobot();
  inline void set_has_guajitodaycount();
  inline void clear_has_guajitodaycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 goldcoin_;
  ::google::protobuf::uint32 pointcard_;
  ::google::protobuf::uint32 curhp_;
  ::google::protobuf::uint32 curmp_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 heishijiejing_;
  ::google::protobuf::uint32 reputaion_;
  ::google::protobuf::uint32 honour_;
  ::google::protobuf::uint32 braveval_;
  ::google::protobuf::uint32 peakcertificate_;
  ::google::protobuf::uint32 hufu_;
  ::google::protobuf::uint32 yuntie_;
  ::google::protobuf::uint32 totalrecharge_;
  ::google::protobuf::uint32 todayrecharge_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 sp_;
  ::google::protobuf::uint32 lilian_;
  ::google::protobuf::uint32 totalconsume_;
  ::google::protobuf::uint32 juexingnum_;
  ::google::protobuf::uint32 juexingexp_;
  ::google::protobuf::uint32 joinguildremaintime_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 faceid_;
  ::google::protobuf::uint32 studyheroskillnum_;
  ::google::protobuf::uint32 teamcopymapnum_;
  ::google::protobuf::uint32 realtimepknum_;
  ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp > battleprop_;
  ::google::protobuf::uint32 teamcopymapresetnum_;
  ::google::protobuf::uint32 realtimeresetnum_;
  ::google::protobuf::uint32 changenamenum_;
  ::google::protobuf::uint32 integral_;
  ::google::protobuf::uint32 soulfire_;
  ::google::protobuf::uint32 glory_;
  bool gotfstrechargereward_;
  bool gotfst10rechargereward_;
  bool isreceive_;
  bool isrobot_;
  ::google::protobuf::uint32 coupleid_;
  ::google::protobuf::uint32 lifeessence_;
  ::google::protobuf::uint32 guidcrystal_;
  ::google::protobuf::uint32 photoid_;
  ::google::protobuf::uint32 trainsp_;
  ::google::protobuf::uint32 guajistart_;
  ::google::protobuf::uint32 guajiend_;
  ::google::protobuf::uint32 guajitodaycount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(50 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRoleMainData* default_instance_;
};
// -------------------------------------------------------------------

class stInitMainData : public ::google::protobuf::Message {
 public:
  stInitMainData();
  virtual ~stInitMainData();

  stInitMainData(const stInitMainData& from);

  inline stInitMainData& operator=(const stInitMainData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInitMainData& default_instance();

  void Swap(stInitMainData* other);

  // implements Message ----------------------------------------------

  stInitMainData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInitMainData& from);
  void MergeFrom(const stInitMainData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInitMainData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInitMainData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInitMainData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInitMainData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInitMainData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInitMainData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInitMainData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInitMainData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInitMainData_ProtoModID_Parse(name, value);
  }

  typedef stInitMainData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInitMainData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInitMainData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInitMainData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInitMainData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInitMainData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInitMainData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInitMainData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInitMainData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRoleMainData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Role::stRoleMainData& data() const;
  inline ::Role::stRoleMainData* mutable_data();
  inline ::Role::stRoleMainData* release_data();
  inline void set_allocated_data(::Role::stRoleMainData* data);

  // @@protoc_insertion_point(class_scope:Role.stInitMainData)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stRoleMainData* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stInitMainData* default_instance_;
};
// -------------------------------------------------------------------

class ReqCreateRole : public ::google::protobuf::Message {
 public:
  ReqCreateRole();
  virtual ~ReqCreateRole();

  ReqCreateRole(const ReqCreateRole& from);

  inline ReqCreateRole& operator=(const ReqCreateRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqCreateRole& default_instance();

  void Swap(ReqCreateRole* other);

  // implements Message ----------------------------------------------

  ReqCreateRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqCreateRole& from);
  void MergeFrom(const ReqCreateRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqCreateRole_ProtoModID ProtoModID;
  static const ProtoModID ModID = ReqCreateRole_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ReqCreateRole_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ReqCreateRole_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ReqCreateRole_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ReqCreateRole_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ReqCreateRole_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ReqCreateRole_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ReqCreateRole_ProtoModID_Parse(name, value);
  }

  typedef ReqCreateRole_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ReqCreateRole_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ReqCreateRole_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ReqCreateRole_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ReqCreateRole_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ReqCreateRole_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ReqCreateRole_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ReqCreateRole_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ReqCreateRole_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 job = 2;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 2;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 3;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 3;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 headID = 4;
  inline bool has_headid() const;
  inline void clear_headid();
  static const int kHeadIDFieldNumber = 4;
  inline ::google::protobuf::uint32 headid() const;
  inline void set_headid(::google::protobuf::uint32 value);

  // optional uint32 faceID = 5;
  inline bool has_faceid() const;
  inline void clear_faceid();
  static const int kFaceIDFieldNumber = 5;
  inline ::google::protobuf::uint32 faceid() const;
  inline void set_faceid(::google::protobuf::uint32 value);

  // optional uint32 opID = 6;
  inline bool has_opid() const;
  inline void clear_opid();
  static const int kOpIDFieldNumber = 6;
  inline ::google::protobuf::uint32 opid() const;
  inline void set_opid(::google::protobuf::uint32 value);

  // optional uint32 serverID = 7;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServerIDFieldNumber = 7;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.ReqCreateRole)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_headid();
  inline void clear_has_headid();
  inline void set_has_faceid();
  inline void clear_has_faceid();
  inline void set_has_opid();
  inline void clear_has_opid();
  inline void set_has_serverid();
  inline void clear_has_serverid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 headid_;
  ::google::protobuf::uint32 faceid_;
  ::google::protobuf::uint32 opid_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ReqCreateRole* default_instance_;
};
// -------------------------------------------------------------------

class CreateRoleResult : public ::google::protobuf::Message {
 public:
  CreateRoleResult();
  virtual ~CreateRoleResult();

  CreateRoleResult(const CreateRoleResult& from);

  inline CreateRoleResult& operator=(const CreateRoleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateRoleResult& default_instance();

  void Swap(CreateRoleResult* other);

  // implements Message ----------------------------------------------

  CreateRoleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateRoleResult& from);
  void MergeFrom(const CreateRoleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef CreateRoleResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = CreateRoleResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return CreateRoleResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    CreateRoleResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    CreateRoleResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    CreateRoleResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return CreateRoleResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return CreateRoleResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return CreateRoleResult_ProtoModID_Parse(name, value);
  }

  typedef CreateRoleResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = CreateRoleResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return CreateRoleResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    CreateRoleResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    CreateRoleResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    CreateRoleResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return CreateRoleResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return CreateRoleResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return CreateRoleResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 retCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 retcode() const;
  inline void set_retcode(::google::protobuf::uint32 value);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 5;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 5;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 6;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 6;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 createTime = 7;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 7;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.CreateRoleResult)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 retcode_;
  ::google::protobuf::uint32 charid_;
  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static CreateRoleResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynSnapData : public ::google::protobuf::Message {
 public:
  stSynSnapData();
  virtual ~stSynSnapData();

  stSynSnapData(const stSynSnapData& from);

  inline stSynSnapData& operator=(const stSynSnapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynSnapData& default_instance();

  void Swap(stSynSnapData* other);

  // implements Message ----------------------------------------------

  stSynSnapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynSnapData& from);
  void MergeFrom(const stSynSnapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 job = 4;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 4;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynSnapData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 job_;
  ::google::protobuf::uint32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynSnapData* default_instance_;
};
// -------------------------------------------------------------------

class RefreshSnapData : public ::google::protobuf::Message {
 public:
  RefreshSnapData();
  virtual ~RefreshSnapData();

  RefreshSnapData(const RefreshSnapData& from);

  inline RefreshSnapData& operator=(const RefreshSnapData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RefreshSnapData& default_instance();

  void Swap(RefreshSnapData* other);

  // implements Message ----------------------------------------------

  RefreshSnapData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RefreshSnapData& from);
  void MergeFrom(const RefreshSnapData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RefreshSnapData_ProtoModID ProtoModID;
  static const ProtoModID ModID = RefreshSnapData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return RefreshSnapData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    RefreshSnapData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    RefreshSnapData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    RefreshSnapData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return RefreshSnapData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return RefreshSnapData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return RefreshSnapData_ProtoModID_Parse(name, value);
  }

  typedef RefreshSnapData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = RefreshSnapData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return RefreshSnapData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    RefreshSnapData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    RefreshSnapData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    RefreshSnapData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return RefreshSnapData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return RefreshSnapData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return RefreshSnapData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynSnapData data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Role::stSynSnapData& data(int index) const;
  inline ::Role::stSynSnapData* mutable_data(int index);
  inline ::Role::stSynSnapData* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynSnapData >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynSnapData >*
      mutable_data();

  // optional uint32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.RefreshSnapData)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynSnapData > data_;
  ::google::protobuf::uint32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static RefreshSnapData* default_instance_;
};
// -------------------------------------------------------------------

class ReqEnterGame : public ::google::protobuf::Message {
 public:
  ReqEnterGame();
  virtual ~ReqEnterGame();

  ReqEnterGame(const ReqEnterGame& from);

  inline ReqEnterGame& operator=(const ReqEnterGame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqEnterGame& default_instance();

  void Swap(ReqEnterGame* other);

  // implements Message ----------------------------------------------

  ReqEnterGame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqEnterGame& from);
  void MergeFrom(const ReqEnterGame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqEnterGame_ProtoModID ProtoModID;
  static const ProtoModID ModID = ReqEnterGame_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ReqEnterGame_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ReqEnterGame_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ReqEnterGame_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ReqEnterGame_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ReqEnterGame_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ReqEnterGame_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ReqEnterGame_ProtoModID_Parse(name, value);
  }

  typedef ReqEnterGame_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ReqEnterGame_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ReqEnterGame_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ReqEnterGame_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ReqEnterGame_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ReqEnterGame_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ReqEnterGame_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ReqEnterGame_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ReqEnterGame_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.ReqEnterGame)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ReqEnterGame* default_instance_;
};
// -------------------------------------------------------------------

class stSynGoldCoin : public ::google::protobuf::Message {
 public:
  stSynGoldCoin();
  virtual ~stSynGoldCoin();

  stSynGoldCoin(const stSynGoldCoin& from);

  inline stSynGoldCoin& operator=(const stSynGoldCoin& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynGoldCoin& default_instance();

  void Swap(stSynGoldCoin* other);

  // implements Message ----------------------------------------------

  stSynGoldCoin* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynGoldCoin& from);
  void MergeFrom(const stSynGoldCoin& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynGoldCoin_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynGoldCoin_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynGoldCoin_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynGoldCoin_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynGoldCoin_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynGoldCoin_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynGoldCoin_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynGoldCoin_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynGoldCoin_ProtoModID_Parse(name, value);
  }

  typedef stSynGoldCoin_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynGoldCoin_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynGoldCoin_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynGoldCoin_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynGoldCoin_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynGoldCoin_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynGoldCoin_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynGoldCoin_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynGoldCoin_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynGoldCoin)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynGoldCoin* default_instance_;
};
// -------------------------------------------------------------------

class stSynPointCard : public ::google::protobuf::Message {
 public:
  stSynPointCard();
  virtual ~stSynPointCard();

  stSynPointCard(const stSynPointCard& from);

  inline stSynPointCard& operator=(const stSynPointCard& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynPointCard& default_instance();

  void Swap(stSynPointCard* other);

  // implements Message ----------------------------------------------

  stSynPointCard* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynPointCard& from);
  void MergeFrom(const stSynPointCard& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynPointCard_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynPointCard_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynPointCard_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynPointCard_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynPointCard_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynPointCard_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynPointCard_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynPointCard_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynPointCard_ProtoModID_Parse(name, value);
  }

  typedef stSynPointCard_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynPointCard_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynPointCard_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynPointCard_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynPointCard_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynPointCard_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynPointCard_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynPointCard_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynPointCard_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynPointCard)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynPointCard* default_instance_;
};
// -------------------------------------------------------------------

class stBagPos : public ::google::protobuf::Message {
 public:
  stBagPos();
  virtual ~stBagPos();

  stBagPos(const stBagPos& from);

  inline stBagPos& operator=(const stBagPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBagPos& default_instance();

  void Swap(stBagPos* other);

  // implements Message ----------------------------------------------

  stBagPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBagPos& from);
  void MergeFrom(const stBagPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stBagPos)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stBagPos* default_instance_;
};
// -------------------------------------------------------------------

class stItemSkillInfo : public ::google::protobuf::Message {
 public:
  stItemSkillInfo();
  virtual ~stItemSkillInfo();

  stItemSkillInfo(const stItemSkillInfo& from);

  inline stItemSkillInfo& operator=(const stItemSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stItemSkillInfo& default_instance();

  void Swap(stItemSkillInfo* other);

  // implements Message ----------------------------------------------

  stItemSkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stItemSkillInfo& from);
  void MergeFrom(const stItemSkillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillLv = 2;
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 2;
  inline ::google::protobuf::uint32 skilllv() const;
  inline void set_skilllv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stItemSkillInfo)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stItemSkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRaiseSkillProp : public ::google::protobuf::Message {
 public:
  stRaiseSkillProp();
  virtual ~stRaiseSkillProp();

  stRaiseSkillProp(const stRaiseSkillProp& from);

  inline stRaiseSkillProp& operator=(const stRaiseSkillProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRaiseSkillProp& default_instance();

  void Swap(stRaiseSkillProp* other);

  // implements Message ----------------------------------------------

  stRaiseSkillProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRaiseSkillProp& from);
  void MergeFrom(const stRaiseSkillProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 raiseType = 2;
  inline bool has_raisetype() const;
  inline void clear_raisetype();
  static const int kRaiseTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 raisetype() const;
  inline void set_raisetype(::google::protobuf::uint32 value);

  // optional uint32 raiseValue = 3;
  inline bool has_raisevalue() const;
  inline void clear_raisevalue();
  static const int kRaiseValueFieldNumber = 3;
  inline ::google::protobuf::uint32 raisevalue() const;
  inline void set_raisevalue(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stRaiseSkillProp)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_raisetype();
  inline void clear_has_raisetype();
  inline void set_has_raisevalue();
  inline void clear_has_raisevalue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 raisetype_;
  ::google::protobuf::uint32 raisevalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRaiseSkillProp* default_instance_;
};
// -------------------------------------------------------------------

class stEnchantInfo : public ::google::protobuf::Message {
 public:
  stEnchantInfo();
  virtual ~stEnchantInfo();

  stEnchantInfo(const stEnchantInfo& from);

  inline stEnchantInfo& operator=(const stEnchantInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEnchantInfo& default_instance();

  void Swap(stEnchantInfo* other);

  // implements Message ----------------------------------------------

  stEnchantInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEnchantInfo& from);
  void MergeFrom(const stEnchantInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 color = 1;
  inline bool has_color() const;
  inline void clear_color();
  static const int kColorFieldNumber = 1;
  inline ::google::protobuf::uint32 color() const;
  inline void set_color(::google::protobuf::uint32 value);

  // optional uint32 locked = 2;
  inline bool has_locked() const;
  inline void clear_locked();
  static const int kLockedFieldNumber = 2;
  inline ::google::protobuf::uint32 locked() const;
  inline void set_locked(::google::protobuf::uint32 value);

  // optional uint32 propType = 3;
  inline bool has_proptype() const;
  inline void clear_proptype();
  static const int kPropTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 proptype() const;
  inline void set_proptype(::google::protobuf::uint32 value);

  // optional uint32 propVal = 4;
  inline bool has_propval() const;
  inline void clear_propval();
  static const int kPropValFieldNumber = 4;
  inline ::google::protobuf::uint32 propval() const;
  inline void set_propval(::google::protobuf::uint32 value);

  // optional uint32 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stEnchantInfo)
 private:
  inline void set_has_color();
  inline void clear_has_color();
  inline void set_has_locked();
  inline void clear_has_locked();
  inline void set_has_proptype();
  inline void clear_has_proptype();
  inline void set_has_propval();
  inline void clear_has_propval();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 color_;
  ::google::protobuf::uint32 locked_;
  ::google::protobuf::uint32 proptype_;
  ::google::protobuf::uint32 propval_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stEnchantInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynItemInfo : public ::google::protobuf::Message {
 public:
  stSynItemInfo();
  virtual ~stSynItemInfo();

  stSynItemInfo(const stSynItemInfo& from);

  inline stSynItemInfo& operator=(const stSynItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynItemInfo& default_instance();

  void Swap(stSynItemInfo* other);

  // implements Message ----------------------------------------------

  stSynItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynItemInfo& from);
  void MergeFrom(const stSynItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional uint32 raiseLv = 4;
  inline bool has_raiselv() const;
  inline void clear_raiselv();
  static const int kRaiseLvFieldNumber = 4;
  inline ::google::protobuf::uint32 raiselv() const;
  inline void set_raiselv(::google::protobuf::uint32 value);

  // optional uint32 maxHP = 5;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 5;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // optional uint32 damage = 7;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 7;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 exp = 8;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 8;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional .Role.stBagPos bagPos = 9;
  inline bool has_bagpos() const;
  inline void clear_bagpos();
  static const int kBagPosFieldNumber = 9;
  inline const ::Role::stBagPos& bagpos() const;
  inline ::Role::stBagPos* mutable_bagpos();
  inline ::Role::stBagPos* release_bagpos();
  inline void set_allocated_bagpos(::Role::stBagPos* bagpos);

  // optional uint32 battlePower = 10;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 10;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 refineLv = 11;
  inline bool has_refinelv() const;
  inline void clear_refinelv();
  static const int kRefineLvFieldNumber = 11;
  inline ::google::protobuf::uint32 refinelv() const;
  inline void set_refinelv(::google::protobuf::uint32 value);

  // optional uint32 obtainSkill = 12;
  inline bool has_obtainskill() const;
  inline void clear_obtainskill();
  static const int kObtainSkillFieldNumber = 12;
  inline ::google::protobuf::uint32 obtainskill() const;
  inline void set_obtainskill(::google::protobuf::uint32 value);

  // repeated .Role.stItemSkillInfo skillInfo = 13;
  inline int skillinfo_size() const;
  inline void clear_skillinfo();
  static const int kSkillInfoFieldNumber = 13;
  inline const ::Role::stItemSkillInfo& skillinfo(int index) const;
  inline ::Role::stItemSkillInfo* mutable_skillinfo(int index);
  inline ::Role::stItemSkillInfo* add_skillinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stItemSkillInfo >&
      skillinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stItemSkillInfo >*
      mutable_skillinfo();

  // repeated .Role.stRaiseSkillProp raiseSkillProp = 14;
  inline int raiseskillprop_size() const;
  inline void clear_raiseskillprop();
  static const int kRaiseSkillPropFieldNumber = 14;
  inline const ::Role::stRaiseSkillProp& raiseskillprop(int index) const;
  inline ::Role::stRaiseSkillProp* mutable_raiseskillprop(int index);
  inline ::Role::stRaiseSkillProp* add_raiseskillprop();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stRaiseSkillProp >&
      raiseskillprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stRaiseSkillProp >*
      mutable_raiseskillprop();

  // optional uint32 remainTime = 15;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 15;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // optional uint32 breakLv = 16;
  inline bool has_breaklv() const;
  inline void clear_breaklv();
  static const int kBreakLvFieldNumber = 16;
  inline ::google::protobuf::uint32 breaklv() const;
  inline void set_breaklv(::google::protobuf::uint32 value);

  // repeated .Role.stEnchantInfo enchant = 17;
  inline int enchant_size() const;
  inline void clear_enchant();
  static const int kEnchantFieldNumber = 17;
  inline const ::Role::stEnchantInfo& enchant(int index) const;
  inline ::Role::stEnchantInfo* mutable_enchant(int index);
  inline ::Role::stEnchantInfo* add_enchant();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stEnchantInfo >&
      enchant() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stEnchantInfo >*
      mutable_enchant();

  // @@protoc_insertion_point(class_scope:Role.stSynItemInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_raiselv();
  inline void clear_has_raiselv();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_bagpos();
  inline void clear_has_bagpos();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_refinelv();
  inline void clear_has_refinelv();
  inline void set_has_obtainskill();
  inline void clear_has_obtainskill();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_breaklv();
  inline void clear_has_breaklv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::uint32 raiselv_;
  ::google::protobuf::uint32 maxhp_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 exp_;
  ::Role::stBagPos* bagpos_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 refinelv_;
  ::google::protobuf::RepeatedPtrField< ::Role::stItemSkillInfo > skillinfo_;
  ::google::protobuf::uint32 obtainskill_;
  ::google::protobuf::uint32 remaintime_;
  ::google::protobuf::RepeatedPtrField< ::Role::stRaiseSkillProp > raiseskillprop_;
  ::google::protobuf::RepeatedPtrField< ::Role::stEnchantInfo > enchant_;
  ::google::protobuf::uint32 breaklv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(16 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyAddItem : public ::google::protobuf::Message {
 public:
  stNotifyAddItem();
  virtual ~stNotifyAddItem();

  stNotifyAddItem(const stNotifyAddItem& from);

  inline stNotifyAddItem& operator=(const stNotifyAddItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyAddItem& default_instance();

  void Swap(stNotifyAddItem* other);

  // implements Message ----------------------------------------------

  stNotifyAddItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyAddItem& from);
  void MergeFrom(const stNotifyAddItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyAddItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyAddItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyAddItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyAddItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyAddItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyAddItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyAddItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyAddItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyAddItem_ProtoModID_Parse(name, value);
  }

  typedef stNotifyAddItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyAddItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyAddItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyAddItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyAddItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyAddItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyAddItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyAddItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyAddItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSynItemInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Role::stSynItemInfo& data() const;
  inline ::Role::stSynItemInfo* mutable_data();
  inline ::Role::stSynItemInfo* release_data();
  inline void set_allocated_data(::Role::stSynItemInfo* data);

  // @@protoc_insertion_point(class_scope:Role.stNotifyAddItem)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stSynItemInfo* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stNotifyAddItem* default_instance_;
};
// -------------------------------------------------------------------

class stDeleteItem : public ::google::protobuf::Message {
 public:
  stDeleteItem();
  virtual ~stDeleteItem();

  stDeleteItem(const stDeleteItem& from);

  inline stDeleteItem& operator=(const stDeleteItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDeleteItem& default_instance();

  void Swap(stDeleteItem* other);

  // implements Message ----------------------------------------------

  stDeleteItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDeleteItem& from);
  void MergeFrom(const stDeleteItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDeleteItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDeleteItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDeleteItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDeleteItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDeleteItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDeleteItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDeleteItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDeleteItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDeleteItem_ProtoModID_Parse(name, value);
  }

  typedef stDeleteItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDeleteItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDeleteItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDeleteItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDeleteItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDeleteItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDeleteItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDeleteItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDeleteItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 instanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stBagPos bagPos = 2;
  inline bool has_bagpos() const;
  inline void clear_bagpos();
  static const int kBagPosFieldNumber = 2;
  inline const ::Role::stBagPos& bagpos() const;
  inline ::Role::stBagPos* mutable_bagpos();
  inline ::Role::stBagPos* release_bagpos();
  inline void set_allocated_bagpos(::Role::stBagPos* bagpos);

  // @@protoc_insertion_point(class_scope:Role.stDeleteItem)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_bagpos();
  inline void clear_has_bagpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::Role::stBagPos* bagpos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stDeleteItem* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshItem : public ::google::protobuf::Message {
 public:
  stRefreshItem();
  virtual ~stRefreshItem();

  stRefreshItem(const stRefreshItem& from);

  inline stRefreshItem& operator=(const stRefreshItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshItem& default_instance();

  void Swap(stRefreshItem* other);

  // implements Message ----------------------------------------------

  stRefreshItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshItem& from);
  void MergeFrom(const stRefreshItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshItem_ProtoModID_Parse(name, value);
  }

  typedef stRefreshItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSynItemInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Role::stSynItemInfo& data() const;
  inline ::Role::stSynItemInfo* mutable_data();
  inline ::Role::stSynItemInfo* release_data();
  inline void set_allocated_data(::Role::stSynItemInfo* data);

  // @@protoc_insertion_point(class_scope:Role.stRefreshItem)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stSynItemInfo* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRefreshItem* default_instance_;
};
// -------------------------------------------------------------------

class stInitAllItem : public ::google::protobuf::Message {
 public:
  stInitAllItem();
  virtual ~stInitAllItem();

  stInitAllItem(const stInitAllItem& from);

  inline stInitAllItem& operator=(const stInitAllItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInitAllItem& default_instance();

  void Swap(stInitAllItem* other);

  // implements Message ----------------------------------------------

  stInitAllItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInitAllItem& from);
  void MergeFrom(const stInitAllItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInitAllItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInitAllItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInitAllItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInitAllItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInitAllItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInitAllItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInitAllItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInitAllItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInitAllItem_ProtoModID_Parse(name, value);
  }

  typedef stInitAllItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInitAllItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInitAllItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInitAllItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInitAllItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInitAllItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInitAllItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInitAllItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInitAllItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynItemInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Role::stSynItemInfo& data(int index) const;
  inline ::Role::stSynItemInfo* mutable_data(int index);
  inline ::Role::stSynItemInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Role.stInitAllItem)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stInitAllItem* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenShop : public ::google::protobuf::Message {
 public:
  stReqOpenShop();
  virtual ~stReqOpenShop();

  stReqOpenShop(const stReqOpenShop& from);

  inline stReqOpenShop& operator=(const stReqOpenShop& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenShop& default_instance();

  void Swap(stReqOpenShop* other);

  // implements Message ----------------------------------------------

  stReqOpenShop* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenShop& from);
  void MergeFrom(const stReqOpenShop& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenShop_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenShop_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenShop_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenShop_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenShop_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenShop_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenShop_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenShop_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenShop_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenShop_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenShop_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenShop_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenShop_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenShop_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenShop_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenShop_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenShop_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenShop_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 shopID = 1;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 1;
  inline ::google::protobuf::uint32 shopid() const;
  inline void set_shopid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqOpenShop)
 private:
  inline void set_has_shopid();
  inline void clear_has_shopid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 shopid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenShop* default_instance_;
};
// -------------------------------------------------------------------

class stShopItem : public ::google::protobuf::Message {
 public:
  stShopItem();
  virtual ~stShopItem();

  stShopItem(const stShopItem& from);

  inline stShopItem& operator=(const stShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stShopItem& default_instance();

  void Swap(stShopItem* other);

  // implements Message ----------------------------------------------

  stShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stShopItem& from);
  void MergeFrom(const stShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 uniqueID = 2;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIDFieldNumber = 2;
  inline ::google::protobuf::uint32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint32 value);

  // optional uint32 itemID = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 3;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 buyNum = 4;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 4;
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // optional uint32 buyNumPerTime = 5;
  inline bool has_buynumpertime() const;
  inline void clear_buynumpertime();
  static const int kBuyNumPerTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 buynumpertime() const;
  inline void set_buynumpertime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stShopItem)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_buynum();
  inline void clear_has_buynum();
  inline void set_has_buynumpertime();
  inline void clear_has_buynumpertime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 uniqueid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 buynum_;
  ::google::protobuf::uint32 buynumpertime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stShopItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetShopItemList : public ::google::protobuf::Message {
 public:
  stRetShopItemList();
  virtual ~stRetShopItemList();

  stRetShopItemList(const stRetShopItemList& from);

  inline stRetShopItemList& operator=(const stRetShopItemList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetShopItemList& default_instance();

  void Swap(stRetShopItemList* other);

  // implements Message ----------------------------------------------

  stRetShopItemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetShopItemList& from);
  void MergeFrom(const stRetShopItemList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetShopItemList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetShopItemList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetShopItemList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetShopItemList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetShopItemList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetShopItemList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetShopItemList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetShopItemList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetShopItemList_ProtoModID_Parse(name, value);
  }

  typedef stRetShopItemList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetShopItemList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetShopItemList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetShopItemList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetShopItemList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetShopItemList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetShopItemList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetShopItemList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetShopItemList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 shopID = 1;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 1;
  inline ::google::protobuf::uint32 shopid() const;
  inline void set_shopid(::google::protobuf::uint32 value);

  // repeated .Role.stShopItem shopList = 2;
  inline int shoplist_size() const;
  inline void clear_shoplist();
  static const int kShopListFieldNumber = 2;
  inline const ::Role::stShopItem& shoplist(int index) const;
  inline ::Role::stShopItem* mutable_shoplist(int index);
  inline ::Role::stShopItem* add_shoplist();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >&
      shoplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >*
      mutable_shoplist();

  // optional uint32 refreshRemainTime = 3;
  inline bool has_refreshremaintime() const;
  inline void clear_refreshremaintime();
  static const int kRefreshRemainTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 refreshremaintime() const;
  inline void set_refreshremaintime(::google::protobuf::uint32 value);

  // optional uint32 refreshNum = 4;
  inline bool has_refreshnum() const;
  inline void clear_refreshnum();
  static const int kRefreshNumFieldNumber = 4;
  inline ::google::protobuf::uint32 refreshnum() const;
  inline void set_refreshnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stRetShopItemList)
 private:
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_refreshremaintime();
  inline void clear_has_refreshremaintime();
  inline void set_has_refreshnum();
  inline void clear_has_refreshnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stShopItem > shoplist_;
  ::google::protobuf::uint32 shopid_;
  ::google::protobuf::uint32 refreshremaintime_;
  ::google::protobuf::uint32 refreshnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetShopItemList* default_instance_;
};
// -------------------------------------------------------------------

class stReqBuyItem : public ::google::protobuf::Message {
 public:
  stReqBuyItem();
  virtual ~stReqBuyItem();

  stReqBuyItem(const stReqBuyItem& from);

  inline stReqBuyItem& operator=(const stReqBuyItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBuyItem& default_instance();

  void Swap(stReqBuyItem* other);

  // implements Message ----------------------------------------------

  stReqBuyItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBuyItem& from);
  void MergeFrom(const stReqBuyItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBuyItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBuyItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBuyItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBuyItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBuyItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBuyItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBuyItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBuyItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBuyItem_ProtoModID_Parse(name, value);
  }

  typedef stReqBuyItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBuyItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBuyItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBuyItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBuyItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBuyItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBuyItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBuyItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBuyItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 shopID = 1;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 1;
  inline ::google::protobuf::uint32 shopid() const;
  inline void set_shopid(::google::protobuf::uint32 value);

  // optional uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // optional bool isFashion = 4;
  inline bool has_isfashion() const;
  inline void clear_isfashion();
  static const int kIsFashionFieldNumber = 4;
  inline bool isfashion() const;
  inline void set_isfashion(bool value);

  // @@protoc_insertion_point(class_scope:Role.stReqBuyItem)
 private:
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_isfashion();
  inline void clear_has_isfashion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 shopid_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 num_;
  bool isfashion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqBuyItem* default_instance_;
};
// -------------------------------------------------------------------

class stBuyItemResult : public ::google::protobuf::Message {
 public:
  stBuyItemResult();
  virtual ~stBuyItemResult();

  stBuyItemResult(const stBuyItemResult& from);

  inline stBuyItemResult& operator=(const stBuyItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyItemResult& default_instance();

  void Swap(stBuyItemResult* other);

  // implements Message ----------------------------------------------

  stBuyItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyItemResult& from);
  void MergeFrom(const stBuyItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyItemResult_BUYRESULT BUYRESULT;
  static const BUYRESULT BUY_SUCCESS = stBuyItemResult_BUYRESULT_BUY_SUCCESS;
  static const BUYRESULT RESOURCE_NOT_ENOUGH = stBuyItemResult_BUYRESULT_RESOURCE_NOT_ENOUGH;
  static const BUYRESULT BUY_FULL = stBuyItemResult_BUYRESULT_BUY_FULL;
  static const BUYRESULT ITEM_NOT_EXIST = stBuyItemResult_BUYRESULT_ITEM_NOT_EXIST;
  static const BUYRESULT BUY_OUT = stBuyItemResult_BUYRESULT_BUY_OUT;
  static const BUYRESULT LV_LIMIT = stBuyItemResult_BUYRESULT_LV_LIMIT;
  static const BUYRESULT GUILD_LV_LIMIT = stBuyItemResult_BUYRESULT_GUILD_LV_LIMIT;
  static const BUYRESULT ARENA_RANK_LIMIT = stBuyItemResult_BUYRESULT_ARENA_RANK_LIMIT;
  static const BUYRESULT NOT_OPEN_TIME = stBuyItemResult_BUYRESULT_NOT_OPEN_TIME;
  static inline bool BUYRESULT_IsValid(int value) {
    return stBuyItemResult_BUYRESULT_IsValid(value);
  }
  static const BUYRESULT BUYRESULT_MIN =
    stBuyItemResult_BUYRESULT_BUYRESULT_MIN;
  static const BUYRESULT BUYRESULT_MAX =
    stBuyItemResult_BUYRESULT_BUYRESULT_MAX;
  static const int BUYRESULT_ARRAYSIZE =
    stBuyItemResult_BUYRESULT_BUYRESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BUYRESULT_descriptor() {
    return stBuyItemResult_BUYRESULT_descriptor();
  }
  static inline const ::std::string& BUYRESULT_Name(BUYRESULT value) {
    return stBuyItemResult_BUYRESULT_Name(value);
  }
  static inline bool BUYRESULT_Parse(const ::std::string& name,
      BUYRESULT* value) {
    return stBuyItemResult_BUYRESULT_Parse(name, value);
  }

  typedef stBuyItemResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyItemResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyItemResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyItemResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyItemResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyItemResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyItemResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyItemResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyItemResult_ProtoModID_Parse(name, value);
  }

  typedef stBuyItemResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyItemResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyItemResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyItemResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyItemResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyItemResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyItemResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyItemResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stBuyItemResult.BUYRESULT retCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  inline ::Role::stBuyItemResult_BUYRESULT retcode() const;
  inline void set_retcode(::Role::stBuyItemResult_BUYRESULT value);

  // optional .Role.stShopItem shopItem = 2;
  inline bool has_shopitem() const;
  inline void clear_shopitem();
  static const int kShopItemFieldNumber = 2;
  inline const ::Role::stShopItem& shopitem() const;
  inline ::Role::stShopItem* mutable_shopitem();
  inline ::Role::stShopItem* release_shopitem();
  inline void set_allocated_shopitem(::Role::stShopItem* shopitem);

  // optional uint32 shopID = 3;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 3;
  inline ::google::protobuf::uint32 shopid() const;
  inline void set_shopid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stBuyItemResult)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_shopitem();
  inline void clear_has_shopitem();
  inline void set_has_shopid();
  inline void clear_has_shopid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stShopItem* shopitem_;
  int retcode_;
  ::google::protobuf::uint32 shopid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stBuyItemResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynHeroSkill : public ::google::protobuf::Message {
 public:
  stSynHeroSkill();
  virtual ~stSynHeroSkill();

  stSynHeroSkill(const stSynHeroSkill& from);

  inline stSynHeroSkill& operator=(const stSynHeroSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynHeroSkill& default_instance();

  void Swap(stSynHeroSkill* other);

  // implements Message ----------------------------------------------

  stSynHeroSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynHeroSkill& from);
  void MergeFrom(const stSynHeroSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillLv = 2;
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 2;
  inline ::google::protobuf::uint32 skilllv() const;
  inline void set_skilllv(::google::protobuf::uint32 value);

  // optional uint32 skillPos = 3;
  inline bool has_skillpos() const;
  inline void clear_skillpos();
  static const int kSkillPosFieldNumber = 3;
  inline ::google::protobuf::uint32 skillpos() const;
  inline void set_skillpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynHeroSkill)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();
  inline void set_has_skillpos();
  inline void clear_has_skillpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllv_;
  ::google::protobuf::uint32 skillpos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynHeroSkill* default_instance_;
};
// -------------------------------------------------------------------

class stImpactHeroInfo : public ::google::protobuf::Message {
 public:
  stImpactHeroInfo();
  virtual ~stImpactHeroInfo();

  stImpactHeroInfo(const stImpactHeroInfo& from);

  inline stImpactHeroInfo& operator=(const stImpactHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stImpactHeroInfo& default_instance();

  void Swap(stImpactHeroInfo* other);

  // implements Message ----------------------------------------------

  stImpactHeroInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stImpactHeroInfo& from);
  void MergeFrom(const stImpactHeroInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // repeated .Role.stBattleProp battleProp = 2;
  inline int battleprop_size() const;
  inline void clear_battleprop();
  static const int kBattlePropFieldNumber = 2;
  inline const ::Role::stBattleProp& battleprop(int index) const;
  inline ::Role::stBattleProp* mutable_battleprop(int index);
  inline ::Role::stBattleProp* add_battleprop();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
      battleprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
      mutable_battleprop();

  // @@protoc_insertion_point(class_scope:Role.stImpactHeroInfo)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp > battleprop_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stImpactHeroInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynHeroInfo : public ::google::protobuf::Message {
 public:
  stSynHeroInfo();
  virtual ~stSynHeroInfo();

  stSynHeroInfo(const stSynHeroInfo& from);

  inline stSynHeroInfo& operator=(const stSynHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynHeroInfo& default_instance();

  void Swap(stSynHeroInfo* other);

  // implements Message ----------------------------------------------

  stSynHeroInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynHeroInfo& from);
  void MergeFrom(const stSynHeroInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional .Role.E_HERO_STATE state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::Role::E_HERO_STATE state() const;
  inline void set_state(::Role::E_HERO_STATE value);

  // optional uint32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // repeated .Role.stSynHeroSkill skillVec = 5;
  inline int skillvec_size() const;
  inline void clear_skillvec();
  static const int kSkillVecFieldNumber = 5;
  inline const ::Role::stSynHeroSkill& skillvec(int index) const;
  inline ::Role::stSynHeroSkill* mutable_skillvec(int index);
  inline ::Role::stSynHeroSkill* add_skillvec();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroSkill >&
      skillvec() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroSkill >*
      mutable_skillvec();

  // optional uint32 maxHP = 6;
  inline bool has_maxhp() const;
  inline void clear_maxhp();
  static const int kMaxHPFieldNumber = 6;
  inline ::google::protobuf::uint32 maxhp() const;
  inline void set_maxhp(::google::protobuf::uint32 value);

  // optional uint32 damage = 7;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 7;
  inline ::google::protobuf::uint32 damage() const;
  inline void set_damage(::google::protobuf::uint32 value);

  // optional uint32 evolutionLv = 8;
  inline bool has_evolutionlv() const;
  inline void clear_evolutionlv();
  static const int kEvolutionLvFieldNumber = 8;
  inline ::google::protobuf::uint32 evolutionlv() const;
  inline void set_evolutionlv(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 9;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 9;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 studySkillID = 10;
  inline bool has_studyskillid() const;
  inline void clear_studyskillid();
  static const int kStudySkillIDFieldNumber = 10;
  inline ::google::protobuf::uint32 studyskillid() const;
  inline void set_studyskillid(::google::protobuf::uint32 value);

  // repeated .Role.stBattleProp battleProp = 11;
  inline int battleprop_size() const;
  inline void clear_battleprop();
  static const int kBattlePropFieldNumber = 11;
  inline const ::Role::stBattleProp& battleprop(int index) const;
  inline ::Role::stBattleProp* mutable_battleprop(int index);
  inline ::Role::stBattleProp* add_battleprop();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
      battleprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
      mutable_battleprop();

  // optional uint32 trainLv = 12;
  inline bool has_trainlv() const;
  inline void clear_trainlv();
  static const int kTrainLvFieldNumber = 12;
  inline ::google::protobuf::uint32 trainlv() const;
  inline void set_trainlv(::google::protobuf::uint32 value);

  // optional uint32 trainExp = 13;
  inline bool has_trainexp() const;
  inline void clear_trainexp();
  static const int kTrainExpFieldNumber = 13;
  inline ::google::protobuf::uint32 trainexp() const;
  inline void set_trainexp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynHeroInfo)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_maxhp();
  inline void clear_has_maxhp();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_evolutionlv();
  inline void clear_has_evolutionlv();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_studyskillid();
  inline void clear_has_studyskillid();
  inline void set_has_trainlv();
  inline void clear_has_trainlv();
  inline void set_has_trainexp();
  inline void clear_has_trainexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 level_;
  int state_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroSkill > skillvec_;
  ::google::protobuf::uint32 maxhp_;
  ::google::protobuf::uint32 damage_;
  ::google::protobuf::uint32 evolutionlv_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp > battleprop_;
  ::google::protobuf::uint32 studyskillid_;
  ::google::protobuf::uint32 trainlv_;
  ::google::protobuf::uint32 trainexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynHeroInfo* default_instance_;
};
// -------------------------------------------------------------------

class stInitAllHero : public ::google::protobuf::Message {
 public:
  stInitAllHero();
  virtual ~stInitAllHero();

  stInitAllHero(const stInitAllHero& from);

  inline stInitAllHero& operator=(const stInitAllHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stInitAllHero& default_instance();

  void Swap(stInitAllHero* other);

  // implements Message ----------------------------------------------

  stInitAllHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stInitAllHero& from);
  void MergeFrom(const stInitAllHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stInitAllHero_ProtoModID ProtoModID;
  static const ProtoModID ModID = stInitAllHero_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stInitAllHero_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stInitAllHero_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stInitAllHero_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stInitAllHero_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stInitAllHero_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stInitAllHero_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stInitAllHero_ProtoModID_Parse(name, value);
  }

  typedef stInitAllHero_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stInitAllHero_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stInitAllHero_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stInitAllHero_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stInitAllHero_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stInitAllHero_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stInitAllHero_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stInitAllHero_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stInitAllHero_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 skillExp = 1;
  inline bool has_skillexp() const;
  inline void clear_skillexp();
  static const int kSkillExpFieldNumber = 1;
  inline ::google::protobuf::uint32 skillexp() const;
  inline void set_skillexp(::google::protobuf::uint32 value);

  // optional uint32 useDiamondNum = 2;
  inline bool has_usediamondnum() const;
  inline void clear_usediamondnum();
  static const int kUseDiamondNumFieldNumber = 2;
  inline ::google::protobuf::uint32 usediamondnum() const;
  inline void set_usediamondnum(::google::protobuf::uint32 value);

  // repeated .Role.stSynHeroInfo data = 3;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 3;
  inline const ::Role::stSynHeroInfo& data(int index) const;
  inline ::Role::stSynHeroInfo* mutable_data(int index);
  inline ::Role::stSynHeroInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Role.stInitAllHero)
 private:
  inline void set_has_skillexp();
  inline void clear_has_skillexp();
  inline void set_has_usediamondnum();
  inline void clear_has_usediamondnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillexp_;
  ::google::protobuf::uint32 usediamondnum_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stInitAllHero* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyAddHero : public ::google::protobuf::Message {
 public:
  stNotifyAddHero();
  virtual ~stNotifyAddHero();

  stNotifyAddHero(const stNotifyAddHero& from);

  inline stNotifyAddHero& operator=(const stNotifyAddHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyAddHero& default_instance();

  void Swap(stNotifyAddHero* other);

  // implements Message ----------------------------------------------

  stNotifyAddHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyAddHero& from);
  void MergeFrom(const stNotifyAddHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyAddHero_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyAddHero_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyAddHero_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyAddHero_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyAddHero_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyAddHero_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyAddHero_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyAddHero_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyAddHero_ProtoModID_Parse(name, value);
  }

  typedef stNotifyAddHero_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyAddHero_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyAddHero_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyAddHero_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyAddHero_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyAddHero_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyAddHero_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyAddHero_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyAddHero_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSynHeroInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Role::stSynHeroInfo& data() const;
  inline ::Role::stSynHeroInfo* mutable_data();
  inline ::Role::stSynHeroInfo* release_data();
  inline void set_allocated_data(::Role::stSynHeroInfo* data);

  // @@protoc_insertion_point(class_scope:Role.stNotifyAddHero)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stSynHeroInfo* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stNotifyAddHero* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshHero : public ::google::protobuf::Message {
 public:
  stRefreshHero();
  virtual ~stRefreshHero();

  stRefreshHero(const stRefreshHero& from);

  inline stRefreshHero& operator=(const stRefreshHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshHero& default_instance();

  void Swap(stRefreshHero* other);

  // implements Message ----------------------------------------------

  stRefreshHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshHero& from);
  void MergeFrom(const stRefreshHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshHero_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshHero_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshHero_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshHero_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshHero_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshHero_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshHero_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshHero_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshHero_ProtoModID_Parse(name, value);
  }

  typedef stRefreshHero_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshHero_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshHero_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshHero_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshHero_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshHero_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshHero_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshHero_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshHero_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSynHeroInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Role::stSynHeroInfo& data() const;
  inline ::Role::stSynHeroInfo* mutable_data();
  inline ::Role::stSynHeroInfo* release_data();
  inline void set_allocated_data(::Role::stSynHeroInfo* data);

  // @@protoc_insertion_point(class_scope:Role.stRefreshHero)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stSynHeroInfo* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRefreshHero* default_instance_;
};
// -------------------------------------------------------------------

class stReqHeroGoOutForBattle : public ::google::protobuf::Message {
 public:
  stReqHeroGoOutForBattle();
  virtual ~stReqHeroGoOutForBattle();

  stReqHeroGoOutForBattle(const stReqHeroGoOutForBattle& from);

  inline stReqHeroGoOutForBattle& operator=(const stReqHeroGoOutForBattle& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqHeroGoOutForBattle& default_instance();

  void Swap(stReqHeroGoOutForBattle* other);

  // implements Message ----------------------------------------------

  stReqHeroGoOutForBattle* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqHeroGoOutForBattle& from);
  void MergeFrom(const stReqHeroGoOutForBattle& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqHeroGoOutForBattle_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqHeroGoOutForBattle_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqHeroGoOutForBattle_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqHeroGoOutForBattle_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqHeroGoOutForBattle_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqHeroGoOutForBattle_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqHeroGoOutForBattle_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqHeroGoOutForBattle_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqHeroGoOutForBattle_ProtoModID_Parse(name, value);
  }

  typedef stReqHeroGoOutForBattle_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqHeroGoOutForBattle_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqHeroGoOutForBattle_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqHeroGoOutForBattle_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqHeroGoOutForBattle_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqHeroGoOutForBattle_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqHeroGoOutForBattle_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqHeroGoOutForBattle_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqHeroGoOutForBattle_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqHeroGoOutForBattle)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqHeroGoOutForBattle* default_instance_;
};
// -------------------------------------------------------------------

class HeroGoOutForBattleResult : public ::google::protobuf::Message {
 public:
  HeroGoOutForBattleResult();
  virtual ~HeroGoOutForBattleResult();

  HeroGoOutForBattleResult(const HeroGoOutForBattleResult& from);

  inline HeroGoOutForBattleResult& operator=(const HeroGoOutForBattleResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroGoOutForBattleResult& default_instance();

  void Swap(HeroGoOutForBattleResult* other);

  // implements Message ----------------------------------------------

  HeroGoOutForBattleResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroGoOutForBattleResult& from);
  void MergeFrom(const HeroGoOutForBattleResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HeroGoOutForBattleResult_ERESULT ERESULT;
  static const ERESULT SUCCESS = HeroGoOutForBattleResult_ERESULT_SUCCESS;
  static const ERESULT HAS_GOOUT = HeroGoOutForBattleResult_ERESULT_HAS_GOOUT;
  static const ERESULT GO_OUT_TOO_MANY = HeroGoOutForBattleResult_ERESULT_GO_OUT_TOO_MANY;
  static const ERESULT INNER_ERROR = HeroGoOutForBattleResult_ERESULT_INNER_ERROR;
  static const ERESULT POS_WAS_LOCKED = HeroGoOutForBattleResult_ERESULT_POS_WAS_LOCKED;
  static inline bool ERESULT_IsValid(int value) {
    return HeroGoOutForBattleResult_ERESULT_IsValid(value);
  }
  static const ERESULT ERESULT_MIN =
    HeroGoOutForBattleResult_ERESULT_ERESULT_MIN;
  static const ERESULT ERESULT_MAX =
    HeroGoOutForBattleResult_ERESULT_ERESULT_MAX;
  static const int ERESULT_ARRAYSIZE =
    HeroGoOutForBattleResult_ERESULT_ERESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ERESULT_descriptor() {
    return HeroGoOutForBattleResult_ERESULT_descriptor();
  }
  static inline const ::std::string& ERESULT_Name(ERESULT value) {
    return HeroGoOutForBattleResult_ERESULT_Name(value);
  }
  static inline bool ERESULT_Parse(const ::std::string& name,
      ERESULT* value) {
    return HeroGoOutForBattleResult_ERESULT_Parse(name, value);
  }

  typedef HeroGoOutForBattleResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = HeroGoOutForBattleResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return HeroGoOutForBattleResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    HeroGoOutForBattleResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    HeroGoOutForBattleResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    HeroGoOutForBattleResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return HeroGoOutForBattleResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return HeroGoOutForBattleResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return HeroGoOutForBattleResult_ProtoModID_Parse(name, value);
  }

  typedef HeroGoOutForBattleResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = HeroGoOutForBattleResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return HeroGoOutForBattleResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    HeroGoOutForBattleResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    HeroGoOutForBattleResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    HeroGoOutForBattleResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return HeroGoOutForBattleResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return HeroGoOutForBattleResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return HeroGoOutForBattleResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional .Role.HeroGoOutForBattleResult.ERESULT retCode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 2;
  inline ::Role::HeroGoOutForBattleResult_ERESULT retcode() const;
  inline void set_retcode(::Role::HeroGoOutForBattleResult_ERESULT value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.HeroGoOutForBattleResult)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  int retcode_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static HeroGoOutForBattleResult* default_instance_;
};
// -------------------------------------------------------------------

class ReqHeroChange2WaitState : public ::google::protobuf::Message {
 public:
  ReqHeroChange2WaitState();
  virtual ~ReqHeroChange2WaitState();

  ReqHeroChange2WaitState(const ReqHeroChange2WaitState& from);

  inline ReqHeroChange2WaitState& operator=(const ReqHeroChange2WaitState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqHeroChange2WaitState& default_instance();

  void Swap(ReqHeroChange2WaitState* other);

  // implements Message ----------------------------------------------

  ReqHeroChange2WaitState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqHeroChange2WaitState& from);
  void MergeFrom(const ReqHeroChange2WaitState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ReqHeroChange2WaitState_ProtoModID ProtoModID;
  static const ProtoModID ModID = ReqHeroChange2WaitState_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ReqHeroChange2WaitState_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ReqHeroChange2WaitState_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ReqHeroChange2WaitState_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ReqHeroChange2WaitState_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ReqHeroChange2WaitState_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ReqHeroChange2WaitState_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ReqHeroChange2WaitState_ProtoModID_Parse(name, value);
  }

  typedef ReqHeroChange2WaitState_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ReqHeroChange2WaitState_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ReqHeroChange2WaitState_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ReqHeroChange2WaitState_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ReqHeroChange2WaitState_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ReqHeroChange2WaitState_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ReqHeroChange2WaitState_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ReqHeroChange2WaitState_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ReqHeroChange2WaitState_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.ReqHeroChange2WaitState)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ReqHeroChange2WaitState* default_instance_;
};
// -------------------------------------------------------------------

class HeroChange2WaitStateResult : public ::google::protobuf::Message {
 public:
  HeroChange2WaitStateResult();
  virtual ~HeroChange2WaitStateResult();

  HeroChange2WaitStateResult(const HeroChange2WaitStateResult& from);

  inline HeroChange2WaitStateResult& operator=(const HeroChange2WaitStateResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HeroChange2WaitStateResult& default_instance();

  void Swap(HeroChange2WaitStateResult* other);

  // implements Message ----------------------------------------------

  HeroChange2WaitStateResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HeroChange2WaitStateResult& from);
  void MergeFrom(const HeroChange2WaitStateResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef HeroChange2WaitStateResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = HeroChange2WaitStateResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return HeroChange2WaitStateResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    HeroChange2WaitStateResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    HeroChange2WaitStateResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    HeroChange2WaitStateResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return HeroChange2WaitStateResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return HeroChange2WaitStateResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return HeroChange2WaitStateResult_ProtoModID_Parse(name, value);
  }

  typedef HeroChange2WaitStateResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = HeroChange2WaitStateResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return HeroChange2WaitStateResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    HeroChange2WaitStateResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    HeroChange2WaitStateResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    HeroChange2WaitStateResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return HeroChange2WaitStateResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return HeroChange2WaitStateResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return HeroChange2WaitStateResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional bool success = 2;
  inline bool has_success() const;
  inline void clear_success();
  static const int kSuccessFieldNumber = 2;
  inline bool success() const;
  inline void set_success(bool value);

  // @@protoc_insertion_point(class_scope:Role.HeroChange2WaitStateResult)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_success();
  inline void clear_has_success();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  bool success_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static HeroChange2WaitStateResult* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyRoleAddExp : public ::google::protobuf::Message {
 public:
  stNotifyRoleAddExp();
  virtual ~stNotifyRoleAddExp();

  stNotifyRoleAddExp(const stNotifyRoleAddExp& from);

  inline stNotifyRoleAddExp& operator=(const stNotifyRoleAddExp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyRoleAddExp& default_instance();

  void Swap(stNotifyRoleAddExp* other);

  // implements Message ----------------------------------------------

  stNotifyRoleAddExp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyRoleAddExp& from);
  void MergeFrom(const stNotifyRoleAddExp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyRoleAddExp_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyRoleAddExp_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyRoleAddExp_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyRoleAddExp_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyRoleAddExp_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyRoleAddExp_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyRoleAddExp_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyRoleAddExp_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyRoleAddExp_ProtoModID_Parse(name, value);
  }

  typedef stNotifyRoleAddExp_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyRoleAddExp_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyRoleAddExp_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyRoleAddExp_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyRoleAddExp_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyRoleAddExp_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyRoleAddExp_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyRoleAddExp_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyRoleAddExp_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 addExp = 1;
  inline bool has_addexp() const;
  inline void clear_addexp();
  static const int kAddExpFieldNumber = 1;
  inline ::google::protobuf::uint32 addexp() const;
  inline void set_addexp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stNotifyRoleAddExp)
 private:
  inline void set_has_addexp();
  inline void clear_has_addexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 addexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stNotifyRoleAddExp* default_instance_;
};
// -------------------------------------------------------------------

class stSynRoleLevel : public ::google::protobuf::Message {
 public:
  stSynRoleLevel();
  virtual ~stSynRoleLevel();

  stSynRoleLevel(const stSynRoleLevel& from);

  inline stSynRoleLevel& operator=(const stSynRoleLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRoleLevel& default_instance();

  void Swap(stSynRoleLevel* other);

  // implements Message ----------------------------------------------

  stSynRoleLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRoleLevel& from);
  void MergeFrom(const stSynRoleLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynRoleLevel_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynRoleLevel_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynRoleLevel_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynRoleLevel_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynRoleLevel_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynRoleLevel_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynRoleLevel_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynRoleLevel_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynRoleLevel_ProtoModID_Parse(name, value);
  }

  typedef stSynRoleLevel_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynRoleLevel_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynRoleLevel_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynRoleLevel_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynRoleLevel_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynRoleLevel_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynRoleLevel_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynRoleLevel_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynRoleLevel_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 curLevel = 1;
  inline bool has_curlevel() const;
  inline void clear_curlevel();
  static const int kCurLevelFieldNumber = 1;
  inline ::google::protobuf::uint32 curlevel() const;
  inline void set_curlevel(::google::protobuf::uint32 value);

  // optional uint32 curExp = 2;
  inline bool has_curexp() const;
  inline void clear_curexp();
  static const int kCurExpFieldNumber = 2;
  inline ::google::protobuf::uint32 curexp() const;
  inline void set_curexp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynRoleLevel)
 private:
  inline void set_has_curlevel();
  inline void clear_has_curlevel();
  inline void set_has_curexp();
  inline void clear_has_curexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 curlevel_;
  ::google::protobuf::uint32 curexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynRoleLevel* default_instance_;
};
// -------------------------------------------------------------------

class stSynHeroLv : public ::google::protobuf::Message {
 public:
  stSynHeroLv();
  virtual ~stSynHeroLv();

  stSynHeroLv(const stSynHeroLv& from);

  inline stSynHeroLv& operator=(const stSynHeroLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynHeroLv& default_instance();

  void Swap(stSynHeroLv* other);

  // implements Message ----------------------------------------------

  stSynHeroLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynHeroLv& from);
  void MergeFrom(const stSynHeroLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynHeroLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynHeroLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynHeroLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynHeroLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynHeroLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynHeroLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynHeroLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynHeroLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynHeroLv_ProtoModID_Parse(name, value);
  }

  typedef stSynHeroLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynHeroLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynHeroLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynHeroLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynHeroLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynHeroLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynHeroLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynHeroLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynHeroLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 curExp = 2;
  inline bool has_curexp() const;
  inline void clear_curexp();
  static const int kCurExpFieldNumber = 2;
  inline ::google::protobuf::uint32 curexp() const;
  inline void set_curexp(::google::protobuf::uint32 value);

  // optional uint32 curLv = 3;
  inline bool has_curlv() const;
  inline void clear_curlv();
  static const int kCurLvFieldNumber = 3;
  inline ::google::protobuf::uint32 curlv() const;
  inline void set_curlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynHeroLv)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_curexp();
  inline void clear_has_curexp();
  inline void set_has_curlv();
  inline void clear_has_curlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 curexp_;
  ::google::protobuf::uint32 curlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynHeroLv* default_instance_;
};
// -------------------------------------------------------------------

class stSynBagPos : public ::google::protobuf::Message {
 public:
  stSynBagPos();
  virtual ~stSynBagPos();

  stSynBagPos(const stSynBagPos& from);

  inline stSynBagPos& operator=(const stSynBagPos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynBagPos& default_instance();

  void Swap(stSynBagPos* other);

  // implements Message ----------------------------------------------

  stSynBagPos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynBagPos& from);
  void MergeFrom(const stSynBagPos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynBagPos)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynBagPos* default_instance_;
};
// -------------------------------------------------------------------

class stMoveItem : public ::google::protobuf::Message {
 public:
  stMoveItem();
  virtual ~stMoveItem();

  stMoveItem(const stMoveItem& from);

  inline stMoveItem& operator=(const stMoveItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMoveItem& default_instance();

  void Swap(stMoveItem* other);

  // implements Message ----------------------------------------------

  stMoveItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMoveItem& from);
  void MergeFrom(const stMoveItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMoveItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMoveItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMoveItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMoveItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMoveItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMoveItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMoveItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMoveItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMoveItem_ProtoModID_Parse(name, value);
  }

  typedef stMoveItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMoveItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMoveItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMoveItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMoveItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMoveItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMoveItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMoveItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMoveItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stSynBagPos bagPos = 3;
  inline bool has_bagpos() const;
  inline void clear_bagpos();
  static const int kBagPosFieldNumber = 3;
  inline const ::Role::stSynBagPos& bagpos() const;
  inline ::Role::stSynBagPos* mutable_bagpos();
  inline ::Role::stSynBagPos* release_bagpos();
  inline void set_allocated_bagpos(::Role::stSynBagPos* bagpos);

  // @@protoc_insertion_point(class_scope:Role.stMoveItem)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_bagpos();
  inline void clear_has_bagpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::Role::stSynBagPos* bagpos_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stMoveItem* default_instance_;
};
// -------------------------------------------------------------------

class stReqArrangeMainBag : public ::google::protobuf::Message {
 public:
  stReqArrangeMainBag();
  virtual ~stReqArrangeMainBag();

  stReqArrangeMainBag(const stReqArrangeMainBag& from);

  inline stReqArrangeMainBag& operator=(const stReqArrangeMainBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqArrangeMainBag& default_instance();

  void Swap(stReqArrangeMainBag* other);

  // implements Message ----------------------------------------------

  stReqArrangeMainBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqArrangeMainBag& from);
  void MergeFrom(const stReqArrangeMainBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqArrangeMainBag_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqArrangeMainBag_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqArrangeMainBag_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqArrangeMainBag_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqArrangeMainBag_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqArrangeMainBag_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqArrangeMainBag_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqArrangeMainBag_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqArrangeMainBag_ProtoModID_Parse(name, value);
  }

  typedef stReqArrangeMainBag_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqArrangeMainBag_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqArrangeMainBag_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqArrangeMainBag_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqArrangeMainBag_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqArrangeMainBag_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqArrangeMainBag_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqArrangeMainBag_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqArrangeMainBag_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqArrangeMainBag)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqArrangeMainBag* default_instance_;
};
// -------------------------------------------------------------------

class stReArrangeMainBagError : public ::google::protobuf::Message {
 public:
  stReArrangeMainBagError();
  virtual ~stReArrangeMainBagError();

  stReArrangeMainBagError(const stReArrangeMainBagError& from);

  inline stReArrangeMainBagError& operator=(const stReArrangeMainBagError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReArrangeMainBagError& default_instance();

  void Swap(stReArrangeMainBagError* other);

  // implements Message ----------------------------------------------

  stReArrangeMainBagError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReArrangeMainBagError& from);
  void MergeFrom(const stReArrangeMainBagError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReArrangeMainBagError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReArrangeMainBagError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReArrangeMainBagError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReArrangeMainBagError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReArrangeMainBagError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReArrangeMainBagError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReArrangeMainBagError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReArrangeMainBagError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReArrangeMainBagError_ProtoModID_Parse(name, value);
  }

  typedef stReArrangeMainBagError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReArrangeMainBagError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReArrangeMainBagError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReArrangeMainBagError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReArrangeMainBagError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReArrangeMainBagError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReArrangeMainBagError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReArrangeMainBagError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReArrangeMainBagError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 errorCode = 1;
  inline bool has_errorcode() const;
  inline void clear_errorcode();
  static const int kErrorCodeFieldNumber = 1;
  inline ::google::protobuf::uint32 errorcode() const;
  inline void set_errorcode(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReArrangeMainBagError)
 private:
  inline void set_has_errorcode();
  inline void clear_has_errorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 errorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReArrangeMainBagError* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshMainBag : public ::google::protobuf::Message {
 public:
  stRefreshMainBag();
  virtual ~stRefreshMainBag();

  stRefreshMainBag(const stRefreshMainBag& from);

  inline stRefreshMainBag& operator=(const stRefreshMainBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshMainBag& default_instance();

  void Swap(stRefreshMainBag* other);

  // implements Message ----------------------------------------------

  stRefreshMainBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshMainBag& from);
  void MergeFrom(const stRefreshMainBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshMainBag_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshMainBag_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshMainBag_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshMainBag_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshMainBag_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshMainBag_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshMainBag_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshMainBag_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshMainBag_ProtoModID_Parse(name, value);
  }

  typedef stRefreshMainBag_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshMainBag_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshMainBag_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshMainBag_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshMainBag_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshMainBag_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshMainBag_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshMainBag_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshMainBag_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 cdTime = 1;
  inline bool has_cdtime() const;
  inline void clear_cdtime();
  static const int kCdTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 cdtime() const;
  inline void set_cdtime(::google::protobuf::uint32 value);

  // repeated .Role.stSynItemInfo data = 2;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 2;
  inline const ::Role::stSynItemInfo& data(int index) const;
  inline ::Role::stSynItemInfo* mutable_data(int index);
  inline ::Role::stSynItemInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Role.stRefreshMainBag)
 private:
  inline void set_has_cdtime();
  inline void clear_has_cdtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo > data_;
  ::google::protobuf::uint32 cdtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRefreshMainBag* default_instance_;
};
// -------------------------------------------------------------------

class stReqCombineHero : public ::google::protobuf::Message {
 public:
  stReqCombineHero();
  virtual ~stReqCombineHero();

  stReqCombineHero(const stReqCombineHero& from);

  inline stReqCombineHero& operator=(const stReqCombineHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCombineHero& default_instance();

  void Swap(stReqCombineHero* other);

  // implements Message ----------------------------------------------

  stReqCombineHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCombineHero& from);
  void MergeFrom(const stReqCombineHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCombineHero_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCombineHero_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCombineHero_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCombineHero_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCombineHero_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCombineHero_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCombineHero_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCombineHero_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCombineHero_ProtoModID_Parse(name, value);
  }

  typedef stReqCombineHero_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCombineHero_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCombineHero_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCombineHero_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCombineHero_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCombineHero_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCombineHero_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCombineHero_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCombineHero_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqCombineHero)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqCombineHero* default_instance_;
};
// -------------------------------------------------------------------

class stCombineHeroResult : public ::google::protobuf::Message {
 public:
  stCombineHeroResult();
  virtual ~stCombineHeroResult();

  stCombineHeroResult(const stCombineHeroResult& from);

  inline stCombineHeroResult& operator=(const stCombineHeroResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCombineHeroResult& default_instance();

  void Swap(stCombineHeroResult* other);

  // implements Message ----------------------------------------------

  stCombineHeroResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCombineHeroResult& from);
  void MergeFrom(const stCombineHeroResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCombineHeroResult_Result Result;
  static const Result SUCCESS = stCombineHeroResult_Result_SUCCESS;
  static const Result NOT_ENOUGH_STONE = stCombineHeroResult_Result_NOT_ENOUGH_STONE;
  static const Result HAS_EXIST = stCombineHeroResult_Result_HAS_EXIST;
  static const Result INNER_ERROR = stCombineHeroResult_Result_INNER_ERROR;
  static inline bool Result_IsValid(int value) {
    return stCombineHeroResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stCombineHeroResult_Result_Result_MIN;
  static const Result Result_MAX =
    stCombineHeroResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stCombineHeroResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stCombineHeroResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stCombineHeroResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stCombineHeroResult_Result_Parse(name, value);
  }

  typedef stCombineHeroResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCombineHeroResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCombineHeroResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCombineHeroResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCombineHeroResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCombineHeroResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCombineHeroResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCombineHeroResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCombineHeroResult_ProtoModID_Parse(name, value);
  }

  typedef stCombineHeroResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCombineHeroResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCombineHeroResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCombineHeroResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCombineHeroResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCombineHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCombineHeroResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCombineHeroResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCombineHeroResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stCombineHeroResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stCombineHeroResult_Result result() const;
  inline void set_result(::Role::stCombineHeroResult_Result value);

  // optional uint32 heroID = 2;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 2;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stCombineHeroResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stCombineHeroResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqLevelupHero : public ::google::protobuf::Message {
 public:
  stReqLevelupHero();
  virtual ~stReqLevelupHero();

  stReqLevelupHero(const stReqLevelupHero& from);

  inline stReqLevelupHero& operator=(const stReqLevelupHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLevelupHero& default_instance();

  void Swap(stReqLevelupHero* other);

  // implements Message ----------------------------------------------

  stReqLevelupHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLevelupHero& from);
  void MergeFrom(const stReqLevelupHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLevelupHero_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLevelupHero_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLevelupHero_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLevelupHero_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLevelupHero_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLevelupHero_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLevelupHero_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLevelupHero_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLevelupHero_ProtoModID_Parse(name, value);
  }

  typedef stReqLevelupHero_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLevelupHero_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLevelupHero_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLevelupHero_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLevelupHero_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLevelupHero_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLevelupHero_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLevelupHero_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLevelupHero_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqLevelupHero)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqLevelupHero* default_instance_;
};
// -------------------------------------------------------------------

class stLevelupHeroResult : public ::google::protobuf::Message {
 public:
  stLevelupHeroResult();
  virtual ~stLevelupHeroResult();

  stLevelupHeroResult(const stLevelupHeroResult& from);

  inline stLevelupHeroResult& operator=(const stLevelupHeroResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLevelupHeroResult& default_instance();

  void Swap(stLevelupHeroResult* other);

  // implements Message ----------------------------------------------

  stLevelupHeroResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLevelupHeroResult& from);
  void MergeFrom(const stLevelupHeroResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLevelupHeroResult_Result Result;
  static const Result SUCCESS = stLevelupHeroResult_Result_SUCCESS;
  static const Result NOT_ENOUGH_STONE = stLevelupHeroResult_Result_NOT_ENOUGH_STONE;
  static const Result NOT_ENOUGH_MONEY = stLevelupHeroResult_Result_NOT_ENOUGH_MONEY;
  static const Result HERO_NOT_EXIST = stLevelupHeroResult_Result_HERO_NOT_EXIST;
  static const Result INNER_ERROR = stLevelupHeroResult_Result_INNER_ERROR;
  static const Result ROLE_LV_LIMIT = stLevelupHeroResult_Result_ROLE_LV_LIMIT;
  static inline bool Result_IsValid(int value) {
    return stLevelupHeroResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stLevelupHeroResult_Result_Result_MIN;
  static const Result Result_MAX =
    stLevelupHeroResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stLevelupHeroResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stLevelupHeroResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stLevelupHeroResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stLevelupHeroResult_Result_Parse(name, value);
  }

  typedef stLevelupHeroResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLevelupHeroResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLevelupHeroResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLevelupHeroResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLevelupHeroResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLevelupHeroResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLevelupHeroResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLevelupHeroResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLevelupHeroResult_ProtoModID_Parse(name, value);
  }

  typedef stLevelupHeroResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLevelupHeroResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLevelupHeroResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLevelupHeroResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLevelupHeroResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLevelupHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLevelupHeroResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLevelupHeroResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLevelupHeroResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stLevelupHeroResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stLevelupHeroResult_Result result() const;
  inline void set_result(::Role::stLevelupHeroResult_Result value);

  // optional uint32 heroID = 2;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 2;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 curLv = 3;
  inline bool has_curlv() const;
  inline void clear_curlv();
  static const int kCurLvFieldNumber = 3;
  inline ::google::protobuf::uint32 curlv() const;
  inline void set_curlv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stLevelupHeroResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_curlv();
  inline void clear_has_curlv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 curlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stLevelupHeroResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqHeroEvolution : public ::google::protobuf::Message {
 public:
  stReqHeroEvolution();
  virtual ~stReqHeroEvolution();

  stReqHeroEvolution(const stReqHeroEvolution& from);

  inline stReqHeroEvolution& operator=(const stReqHeroEvolution& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqHeroEvolution& default_instance();

  void Swap(stReqHeroEvolution* other);

  // implements Message ----------------------------------------------

  stReqHeroEvolution* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqHeroEvolution& from);
  void MergeFrom(const stReqHeroEvolution& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqHeroEvolution_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqHeroEvolution_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqHeroEvolution_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqHeroEvolution_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqHeroEvolution_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqHeroEvolution_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqHeroEvolution_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqHeroEvolution_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqHeroEvolution_ProtoModID_Parse(name, value);
  }

  typedef stReqHeroEvolution_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqHeroEvolution_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqHeroEvolution_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqHeroEvolution_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqHeroEvolution_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqHeroEvolution_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqHeroEvolution_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqHeroEvolution_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqHeroEvolution_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqHeroEvolution)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqHeroEvolution* default_instance_;
};
// -------------------------------------------------------------------

class stEvolutionHeroResult : public ::google::protobuf::Message {
 public:
  stEvolutionHeroResult();
  virtual ~stEvolutionHeroResult();

  stEvolutionHeroResult(const stEvolutionHeroResult& from);

  inline stEvolutionHeroResult& operator=(const stEvolutionHeroResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stEvolutionHeroResult& default_instance();

  void Swap(stEvolutionHeroResult* other);

  // implements Message ----------------------------------------------

  stEvolutionHeroResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stEvolutionHeroResult& from);
  void MergeFrom(const stEvolutionHeroResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stEvolutionHeroResult_Result Result;
  static const Result SUCCESS = stEvolutionHeroResult_Result_SUCCESS;
  static const Result NOT_ENOUGH_STONE = stEvolutionHeroResult_Result_NOT_ENOUGH_STONE;
  static const Result FULL_LEVEL = stEvolutionHeroResult_Result_FULL_LEVEL;
  static const Result HERO_NOT_EXIST = stEvolutionHeroResult_Result_HERO_NOT_EXIST;
  static const Result INNER_ERROR = stEvolutionHeroResult_Result_INNER_ERROR;
  static inline bool Result_IsValid(int value) {
    return stEvolutionHeroResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stEvolutionHeroResult_Result_Result_MIN;
  static const Result Result_MAX =
    stEvolutionHeroResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stEvolutionHeroResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stEvolutionHeroResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stEvolutionHeroResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stEvolutionHeroResult_Result_Parse(name, value);
  }

  typedef stEvolutionHeroResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stEvolutionHeroResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stEvolutionHeroResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stEvolutionHeroResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stEvolutionHeroResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stEvolutionHeroResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stEvolutionHeroResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stEvolutionHeroResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stEvolutionHeroResult_ProtoModID_Parse(name, value);
  }

  typedef stEvolutionHeroResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stEvolutionHeroResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stEvolutionHeroResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stEvolutionHeroResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stEvolutionHeroResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stEvolutionHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stEvolutionHeroResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stEvolutionHeroResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stEvolutionHeroResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stEvolutionHeroResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stEvolutionHeroResult_Result result() const;
  inline void set_result(::Role::stEvolutionHeroResult_Result value);

  // optional uint32 heroID = 2;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 2;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stEvolutionHeroResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stEvolutionHeroResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqHeroStudySkill : public ::google::protobuf::Message {
 public:
  stReqHeroStudySkill();
  virtual ~stReqHeroStudySkill();

  stReqHeroStudySkill(const stReqHeroStudySkill& from);

  inline stReqHeroStudySkill& operator=(const stReqHeroStudySkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqHeroStudySkill& default_instance();

  void Swap(stReqHeroStudySkill* other);

  // implements Message ----------------------------------------------

  stReqHeroStudySkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqHeroStudySkill& from);
  void MergeFrom(const stReqHeroStudySkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqHeroStudySkill_Type Type;
  static const Type USE_ITEM = stReqHeroStudySkill_Type_USE_ITEM;
  static const Type USE_DIAMOND = stReqHeroStudySkill_Type_USE_DIAMOND;
  static inline bool Type_IsValid(int value) {
    return stReqHeroStudySkill_Type_IsValid(value);
  }
  static const Type Type_MIN =
    stReqHeroStudySkill_Type_Type_MIN;
  static const Type Type_MAX =
    stReqHeroStudySkill_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    stReqHeroStudySkill_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return stReqHeroStudySkill_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return stReqHeroStudySkill_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return stReqHeroStudySkill_Type_Parse(name, value);
  }

  typedef stReqHeroStudySkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqHeroStudySkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqHeroStudySkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqHeroStudySkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqHeroStudySkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqHeroStudySkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqHeroStudySkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqHeroStudySkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqHeroStudySkill_ProtoModID_Parse(name, value);
  }

  typedef stReqHeroStudySkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqHeroStudySkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqHeroStudySkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqHeroStudySkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqHeroStudySkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqHeroStudySkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqHeroStudySkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqHeroStudySkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqHeroStudySkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional .Role.stReqHeroStudySkill.Type type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Role::stReqHeroStudySkill_Type type() const;
  inline void set_type(::Role::stReqHeroStudySkill_Type value);

  // @@protoc_insertion_point(class_scope:Role.stReqHeroStudySkill)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqHeroStudySkill* default_instance_;
};
// -------------------------------------------------------------------

class stHeroStudySkillResult : public ::google::protobuf::Message {
 public:
  stHeroStudySkillResult();
  virtual ~stHeroStudySkillResult();

  stHeroStudySkillResult(const stHeroStudySkillResult& from);

  inline stHeroStudySkillResult& operator=(const stHeroStudySkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroStudySkillResult& default_instance();

  void Swap(stHeroStudySkillResult* other);

  // implements Message ----------------------------------------------

  stHeroStudySkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroStudySkillResult& from);
  void MergeFrom(const stHeroStudySkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHeroStudySkillResult_Result Result;
  static const Result SUCCESS = stHeroStudySkillResult_Result_SUCCESS;
  static const Result NOT_ENOUGH_ITEM = stHeroStudySkillResult_Result_NOT_ENOUGH_ITEM;
  static const Result NOT_ENOUGH_DIAMOND = stHeroStudySkillResult_Result_NOT_ENOUGH_DIAMOND;
  static const Result USE_DIAMOND_NUM_NOT_ENOUGH = stHeroStudySkillResult_Result_USE_DIAMOND_NUM_NOT_ENOUGH;
  static const Result HERO_NOT_EXIST = stHeroStudySkillResult_Result_HERO_NOT_EXIST;
  static const Result INNER_ERROR = stHeroStudySkillResult_Result_INNER_ERROR;
  static inline bool Result_IsValid(int value) {
    return stHeroStudySkillResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stHeroStudySkillResult_Result_Result_MIN;
  static const Result Result_MAX =
    stHeroStudySkillResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stHeroStudySkillResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stHeroStudySkillResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stHeroStudySkillResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stHeroStudySkillResult_Result_Parse(name, value);
  }

  typedef stHeroStudySkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHeroStudySkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHeroStudySkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHeroStudySkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHeroStudySkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHeroStudySkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHeroStudySkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHeroStudySkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHeroStudySkillResult_ProtoModID_Parse(name, value);
  }

  typedef stHeroStudySkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHeroStudySkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHeroStudySkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHeroStudySkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHeroStudySkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHeroStudySkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHeroStudySkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHeroStudySkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHeroStudySkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional .Role.stHeroStudySkillResult.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::Role::stHeroStudySkillResult_Result result() const;
  inline void set_result(::Role::stHeroStudySkillResult_Result value);

  // optional uint32 skillID = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 3;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillLv = 4;
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 4;
  inline ::google::protobuf::uint32 skilllv() const;
  inline void set_skilllv(::google::protobuf::uint32 value);

  // optional uint32 useDiamondNum = 5;
  inline bool has_usediamondnum() const;
  inline void clear_usediamondnum();
  static const int kUseDiamondNumFieldNumber = 5;
  inline ::google::protobuf::uint32 usediamondnum() const;
  inline void set_usediamondnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stHeroStudySkillResult)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();
  inline void set_has_usediamondnum();
  inline void clear_has_usediamondnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  int result_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllv_;
  ::google::protobuf::uint32 usediamondnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stHeroStudySkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRefineHeroSkill : public ::google::protobuf::Message {
 public:
  stReqRefineHeroSkill();
  virtual ~stReqRefineHeroSkill();

  stReqRefineHeroSkill(const stReqRefineHeroSkill& from);

  inline stReqRefineHeroSkill& operator=(const stReqRefineHeroSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRefineHeroSkill& default_instance();

  void Swap(stReqRefineHeroSkill* other);

  // implements Message ----------------------------------------------

  stReqRefineHeroSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRefineHeroSkill& from);
  void MergeFrom(const stReqRefineHeroSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRefineHeroSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRefineHeroSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRefineHeroSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRefineHeroSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRefineHeroSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRefineHeroSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRefineHeroSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRefineHeroSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRefineHeroSkill_ProtoModID_Parse(name, value);
  }

  typedef stReqRefineHeroSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRefineHeroSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRefineHeroSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRefineHeroSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRefineHeroSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRefineHeroSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRefineHeroSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRefineHeroSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRefineHeroSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRefineHeroSkill)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRefineHeroSkill* default_instance_;
};
// -------------------------------------------------------------------

class stRefineHeroSkillResult : public ::google::protobuf::Message {
 public:
  stRefineHeroSkillResult();
  virtual ~stRefineHeroSkillResult();

  stRefineHeroSkillResult(const stRefineHeroSkillResult& from);

  inline stRefineHeroSkillResult& operator=(const stRefineHeroSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefineHeroSkillResult& default_instance();

  void Swap(stRefineHeroSkillResult* other);

  // implements Message ----------------------------------------------

  stRefineHeroSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefineHeroSkillResult& from);
  void MergeFrom(const stRefineHeroSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefineHeroSkillResult_Result Result;
  static const Result SUCCESS = stRefineHeroSkillResult_Result_SUCCESS;
  static const Result HAS_NO_STUDY_SKILL = stRefineHeroSkillResult_Result_HAS_NO_STUDY_SKILL;
  static const Result HERO_NOT_EXIST = stRefineHeroSkillResult_Result_HERO_NOT_EXIST;
  static const Result INNER_ERROR = stRefineHeroSkillResult_Result_INNER_ERROR;
  static inline bool Result_IsValid(int value) {
    return stRefineHeroSkillResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stRefineHeroSkillResult_Result_Result_MIN;
  static const Result Result_MAX =
    stRefineHeroSkillResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stRefineHeroSkillResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stRefineHeroSkillResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stRefineHeroSkillResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stRefineHeroSkillResult_Result_Parse(name, value);
  }

  typedef stRefineHeroSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefineHeroSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefineHeroSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefineHeroSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefineHeroSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefineHeroSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefineHeroSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefineHeroSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefineHeroSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stRefineHeroSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefineHeroSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefineHeroSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefineHeroSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefineHeroSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefineHeroSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefineHeroSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefineHeroSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefineHeroSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional .Role.stRefineHeroSkillResult.Result result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::Role::stRefineHeroSkillResult_Result result() const;
  inline void set_result(::Role::stRefineHeroSkillResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stRefineHeroSkillResult)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRefineHeroSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynSkillExp : public ::google::protobuf::Message {
 public:
  stSynSkillExp();
  virtual ~stSynSkillExp();

  stSynSkillExp(const stSynSkillExp& from);

  inline stSynSkillExp& operator=(const stSynSkillExp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynSkillExp& default_instance();

  void Swap(stSynSkillExp* other);

  // implements Message ----------------------------------------------

  stSynSkillExp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynSkillExp& from);
  void MergeFrom(const stSynSkillExp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynSkillExp_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynSkillExp_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynSkillExp_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynSkillExp_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynSkillExp_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynSkillExp_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynSkillExp_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynSkillExp_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynSkillExp_ProtoModID_Parse(name, value);
  }

  typedef stSynSkillExp_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynSkillExp_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynSkillExp_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynSkillExp_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynSkillExp_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynSkillExp_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynSkillExp_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynSkillExp_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynSkillExp_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 curExp = 1;
  inline bool has_curexp() const;
  inline void clear_curexp();
  static const int kCurExpFieldNumber = 1;
  inline ::google::protobuf::uint32 curexp() const;
  inline void set_curexp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynSkillExp)
 private:
  inline void set_has_curexp();
  inline void clear_has_curexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 curexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynSkillExp* default_instance_;
};
// -------------------------------------------------------------------

class stReqReplaceHeroSkill : public ::google::protobuf::Message {
 public:
  stReqReplaceHeroSkill();
  virtual ~stReqReplaceHeroSkill();

  stReqReplaceHeroSkill(const stReqReplaceHeroSkill& from);

  inline stReqReplaceHeroSkill& operator=(const stReqReplaceHeroSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqReplaceHeroSkill& default_instance();

  void Swap(stReqReplaceHeroSkill* other);

  // implements Message ----------------------------------------------

  stReqReplaceHeroSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqReplaceHeroSkill& from);
  void MergeFrom(const stReqReplaceHeroSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqReplaceHeroSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqReplaceHeroSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqReplaceHeroSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqReplaceHeroSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqReplaceHeroSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqReplaceHeroSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqReplaceHeroSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqReplaceHeroSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqReplaceHeroSkill_ProtoModID_Parse(name, value);
  }

  typedef stReqReplaceHeroSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqReplaceHeroSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqReplaceHeroSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqReplaceHeroSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqReplaceHeroSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqReplaceHeroSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqReplaceHeroSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqReplaceHeroSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqReplaceHeroSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqReplaceHeroSkill)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqReplaceHeroSkill* default_instance_;
};
// -------------------------------------------------------------------

class stReplaceHeroSkillResult : public ::google::protobuf::Message {
 public:
  stReplaceHeroSkillResult();
  virtual ~stReplaceHeroSkillResult();

  stReplaceHeroSkillResult(const stReplaceHeroSkillResult& from);

  inline stReplaceHeroSkillResult& operator=(const stReplaceHeroSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReplaceHeroSkillResult& default_instance();

  void Swap(stReplaceHeroSkillResult* other);

  // implements Message ----------------------------------------------

  stReplaceHeroSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReplaceHeroSkillResult& from);
  void MergeFrom(const stReplaceHeroSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReplaceHeroSkillResult_Result Result;
  static const Result SUCCESS = stReplaceHeroSkillResult_Result_SUCCESS;
  static const Result HERO_NOT_EXIST = stReplaceHeroSkillResult_Result_HERO_NOT_EXIST;
  static const Result STUDY_SKILL_NOT_EXIST = stReplaceHeroSkillResult_Result_STUDY_SKILL_NOT_EXIST;
  static const Result SKILL_HAS_EQUIP = stReplaceHeroSkillResult_Result_SKILL_HAS_EQUIP;
  static const Result INNER_ERRRO = stReplaceHeroSkillResult_Result_INNER_ERRRO;
  static inline bool Result_IsValid(int value) {
    return stReplaceHeroSkillResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stReplaceHeroSkillResult_Result_Result_MIN;
  static const Result Result_MAX =
    stReplaceHeroSkillResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stReplaceHeroSkillResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stReplaceHeroSkillResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stReplaceHeroSkillResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stReplaceHeroSkillResult_Result_Parse(name, value);
  }

  typedef stReplaceHeroSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReplaceHeroSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReplaceHeroSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReplaceHeroSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReplaceHeroSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReplaceHeroSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReplaceHeroSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReplaceHeroSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReplaceHeroSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stReplaceHeroSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReplaceHeroSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReplaceHeroSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReplaceHeroSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReplaceHeroSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReplaceHeroSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReplaceHeroSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReplaceHeroSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReplaceHeroSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint32 skillID = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 3;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional .Role.stReplaceHeroSkillResult.Result result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::Role::stReplaceHeroSkillResult_Result result() const;
  inline void set_result(::Role::stReplaceHeroSkillResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stReplaceHeroSkillResult)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint32 skillid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReplaceHeroSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqUpgradeHeroSkill : public ::google::protobuf::Message {
 public:
  stReqUpgradeHeroSkill();
  virtual ~stReqUpgradeHeroSkill();

  stReqUpgradeHeroSkill(const stReqUpgradeHeroSkill& from);

  inline stReqUpgradeHeroSkill& operator=(const stReqUpgradeHeroSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUpgradeHeroSkill& default_instance();

  void Swap(stReqUpgradeHeroSkill* other);

  // implements Message ----------------------------------------------

  stReqUpgradeHeroSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUpgradeHeroSkill& from);
  void MergeFrom(const stReqUpgradeHeroSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUpgradeHeroSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUpgradeHeroSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUpgradeHeroSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUpgradeHeroSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUpgradeHeroSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUpgradeHeroSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUpgradeHeroSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUpgradeHeroSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUpgradeHeroSkill_ProtoModID_Parse(name, value);
  }

  typedef stReqUpgradeHeroSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUpgradeHeroSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUpgradeHeroSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUpgradeHeroSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUpgradeHeroSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUpgradeHeroSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUpgradeHeroSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUpgradeHeroSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUpgradeHeroSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqUpgradeHeroSkill)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqUpgradeHeroSkill* default_instance_;
};
// -------------------------------------------------------------------

class stUpgradeHeroSkillResult : public ::google::protobuf::Message {
 public:
  stUpgradeHeroSkillResult();
  virtual ~stUpgradeHeroSkillResult();

  stUpgradeHeroSkillResult(const stUpgradeHeroSkillResult& from);

  inline stUpgradeHeroSkillResult& operator=(const stUpgradeHeroSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUpgradeHeroSkillResult& default_instance();

  void Swap(stUpgradeHeroSkillResult* other);

  // implements Message ----------------------------------------------

  stUpgradeHeroSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUpgradeHeroSkillResult& from);
  void MergeFrom(const stUpgradeHeroSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUpgradeHeroSkillResult_Result Result;
  static const Result SUCCESS = stUpgradeHeroSkillResult_Result_SUCCESS;
  static const Result NOT_ENOUGH_EXP = stUpgradeHeroSkillResult_Result_NOT_ENOUGH_EXP;
  static const Result HERO_NOT_EXIST = stUpgradeHeroSkillResult_Result_HERO_NOT_EXIST;
  static const Result SKILL_NOT_EXIST = stUpgradeHeroSkillResult_Result_SKILL_NOT_EXIST;
  static const Result INNER_ERROR = stUpgradeHeroSkillResult_Result_INNER_ERROR;
  static inline bool Result_IsValid(int value) {
    return stUpgradeHeroSkillResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stUpgradeHeroSkillResult_Result_Result_MIN;
  static const Result Result_MAX =
    stUpgradeHeroSkillResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stUpgradeHeroSkillResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stUpgradeHeroSkillResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stUpgradeHeroSkillResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stUpgradeHeroSkillResult_Result_Parse(name, value);
  }

  typedef stUpgradeHeroSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUpgradeHeroSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUpgradeHeroSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUpgradeHeroSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUpgradeHeroSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUpgradeHeroSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUpgradeHeroSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUpgradeHeroSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUpgradeHeroSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stUpgradeHeroSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUpgradeHeroSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUpgradeHeroSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUpgradeHeroSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUpgradeHeroSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUpgradeHeroSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUpgradeHeroSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUpgradeHeroSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUpgradeHeroSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 skillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillLv = 3;
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 3;
  inline ::google::protobuf::uint32 skilllv() const;
  inline void set_skilllv(::google::protobuf::uint32 value);

  // optional .Role.stUpgradeHeroSkillResult.Result result = 4;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 4;
  inline ::Role::stUpgradeHeroSkillResult_Result result() const;
  inline void set_result(::Role::stUpgradeHeroSkillResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stUpgradeHeroSkillResult)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllv_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUpgradeHeroSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqSellItem : public ::google::protobuf::Message {
 public:
  stReqSellItem();
  virtual ~stReqSellItem();

  stReqSellItem(const stReqSellItem& from);

  inline stReqSellItem& operator=(const stReqSellItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSellItem& default_instance();

  void Swap(stReqSellItem* other);

  // implements Message ----------------------------------------------

  stReqSellItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSellItem& from);
  void MergeFrom(const stReqSellItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSellItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSellItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSellItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSellItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSellItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSellItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSellItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSellItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSellItem_ProtoModID_Parse(name, value);
  }

  typedef stReqSellItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSellItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSellItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSellItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSellItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSellItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSellItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSellItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSellItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqSellItem)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqSellItem* default_instance_;
};
// -------------------------------------------------------------------

class stSellItemResult : public ::google::protobuf::Message {
 public:
  stSellItemResult();
  virtual ~stSellItemResult();

  stSellItemResult(const stSellItemResult& from);

  inline stSellItemResult& operator=(const stSellItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSellItemResult& default_instance();

  void Swap(stSellItemResult* other);

  // implements Message ----------------------------------------------

  stSellItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSellItemResult& from);
  void MergeFrom(const stSellItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSellItemResult_Result Result;
  static const Result SUCCESS = stSellItemResult_Result_SUCCESS;
  static const Result NOT_EXIST = stSellItemResult_Result_NOT_EXIST;
  static const Result CAN_NOT_SELL = stSellItemResult_Result_CAN_NOT_SELL;
  static inline bool Result_IsValid(int value) {
    return stSellItemResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stSellItemResult_Result_Result_MIN;
  static const Result Result_MAX =
    stSellItemResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stSellItemResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stSellItemResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stSellItemResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stSellItemResult_Result_Parse(name, value);
  }

  typedef stSellItemResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSellItemResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSellItemResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSellItemResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSellItemResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSellItemResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSellItemResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSellItemResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSellItemResult_ProtoModID_Parse(name, value);
  }

  typedef stSellItemResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSellItemResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSellItemResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSellItemResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSellItemResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSellItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSellItemResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSellItemResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSellItemResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSellItemResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stSellItemResult_Result result() const;
  inline void set_result(::Role::stSellItemResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stSellItemResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSellItemResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRaiseItem : public ::google::protobuf::Message {
 public:
  stReqRaiseItem();
  virtual ~stReqRaiseItem();

  stReqRaiseItem(const stReqRaiseItem& from);

  inline stReqRaiseItem& operator=(const stReqRaiseItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRaiseItem& default_instance();

  void Swap(stReqRaiseItem* other);

  // implements Message ----------------------------------------------

  stReqRaiseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRaiseItem& from);
  void MergeFrom(const stReqRaiseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRaiseItem_eRaiseType eRaiseType;
  static const eRaiseType USE_STONE = stReqRaiseItem_eRaiseType_USE_STONE;
  static const eRaiseType USE_EQUIP = stReqRaiseItem_eRaiseType_USE_EQUIP;
  static inline bool eRaiseType_IsValid(int value) {
    return stReqRaiseItem_eRaiseType_IsValid(value);
  }
  static const eRaiseType eRaiseType_MIN =
    stReqRaiseItem_eRaiseType_eRaiseType_MIN;
  static const eRaiseType eRaiseType_MAX =
    stReqRaiseItem_eRaiseType_eRaiseType_MAX;
  static const int eRaiseType_ARRAYSIZE =
    stReqRaiseItem_eRaiseType_eRaiseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eRaiseType_descriptor() {
    return stReqRaiseItem_eRaiseType_descriptor();
  }
  static inline const ::std::string& eRaiseType_Name(eRaiseType value) {
    return stReqRaiseItem_eRaiseType_Name(value);
  }
  static inline bool eRaiseType_Parse(const ::std::string& name,
      eRaiseType* value) {
    return stReqRaiseItem_eRaiseType_Parse(name, value);
  }

  typedef stReqRaiseItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRaiseItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRaiseItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRaiseItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRaiseItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRaiseItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRaiseItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRaiseItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRaiseItem_ProtoModID_Parse(name, value);
  }

  typedef stReqRaiseItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRaiseItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRaiseItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRaiseItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRaiseItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRaiseItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRaiseItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRaiseItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRaiseItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 raiseType = 3;
  inline bool has_raisetype() const;
  inline void clear_raisetype();
  static const int kRaiseTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 raisetype() const;
  inline void set_raisetype(::google::protobuf::uint32 value);

  // repeated uint64 eatInstanceID = 4;
  inline int eatinstanceid_size() const;
  inline void clear_eatinstanceid();
  static const int kEatInstanceIDFieldNumber = 4;
  inline ::google::protobuf::uint64 eatinstanceid(int index) const;
  inline void set_eatinstanceid(int index, ::google::protobuf::uint64 value);
  inline void add_eatinstanceid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      eatinstanceid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_eatinstanceid();

  // optional uint32 yunTieNum = 5;
  inline bool has_yuntienum() const;
  inline void clear_yuntienum();
  static const int kYunTieNumFieldNumber = 5;
  inline ::google::protobuf::uint32 yuntienum() const;
  inline void set_yuntienum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRaiseItem)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_raisetype();
  inline void clear_has_raisetype();
  inline void set_has_yuntienum();
  inline void clear_has_yuntienum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 raisetype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > eatinstanceid_;
  ::google::protobuf::uint32 yuntienum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRaiseItem* default_instance_;
};
// -------------------------------------------------------------------

class stRaiseItemResult : public ::google::protobuf::Message {
 public:
  stRaiseItemResult();
  virtual ~stRaiseItemResult();

  stRaiseItemResult(const stRaiseItemResult& from);

  inline stRaiseItemResult& operator=(const stRaiseItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRaiseItemResult& default_instance();

  void Swap(stRaiseItemResult* other);

  // implements Message ----------------------------------------------

  stRaiseItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRaiseItemResult& from);
  void MergeFrom(const stRaiseItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRaiseItemResult_Result Result;
  static const Result SUCCESS = stRaiseItemResult_Result_SUCCESS;
  static const Result EQUIP_NOT_EXIST = stRaiseItemResult_Result_EQUIP_NOT_EXIST;
  static const Result STONE_NOT_EXIST = stRaiseItemResult_Result_STONE_NOT_EXIST;
  static const Result MONEY_NOT_ENOUGH = stRaiseItemResult_Result_MONEY_NOT_ENOUGH;
  static const Result INNER_ERROR = stRaiseItemResult_Result_INNER_ERROR;
  static const Result ROLE_LV_LIMIT = stRaiseItemResult_Result_ROLE_LV_LIMIT;
  static inline bool Result_IsValid(int value) {
    return stRaiseItemResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stRaiseItemResult_Result_Result_MIN;
  static const Result Result_MAX =
    stRaiseItemResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stRaiseItemResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stRaiseItemResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stRaiseItemResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stRaiseItemResult_Result_Parse(name, value);
  }

  typedef stRaiseItemResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRaiseItemResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRaiseItemResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRaiseItemResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRaiseItemResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRaiseItemResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRaiseItemResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRaiseItemResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRaiseItemResult_ProtoModID_Parse(name, value);
  }

  typedef stRaiseItemResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRaiseItemResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRaiseItemResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRaiseItemResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRaiseItemResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRaiseItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRaiseItemResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRaiseItemResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRaiseItemResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stRaiseItemResult.Result result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRaiseItemResult_Result result() const;
  inline void set_result(::Role::stRaiseItemResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stRaiseItemResult)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRaiseItemResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqSmeltEquip : public ::google::protobuf::Message {
 public:
  stReqSmeltEquip();
  virtual ~stReqSmeltEquip();

  stReqSmeltEquip(const stReqSmeltEquip& from);

  inline stReqSmeltEquip& operator=(const stReqSmeltEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSmeltEquip& default_instance();

  void Swap(stReqSmeltEquip* other);

  // implements Message ----------------------------------------------

  stReqSmeltEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSmeltEquip& from);
  void MergeFrom(const stReqSmeltEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSmeltEquip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSmeltEquip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSmeltEquip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSmeltEquip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSmeltEquip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSmeltEquip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSmeltEquip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSmeltEquip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSmeltEquip_ProtoModID_Parse(name, value);
  }

  typedef stReqSmeltEquip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSmeltEquip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSmeltEquip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSmeltEquip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSmeltEquip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSmeltEquip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSmeltEquip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSmeltEquip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSmeltEquip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // repeated uint64 instanceID = 2;
  inline int instanceid_size() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid(int index) const;
  inline void set_instanceid(int index, ::google::protobuf::uint64 value);
  inline void add_instanceid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      instanceid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_instanceid();

  // @@protoc_insertion_point(class_scope:Role.stReqSmeltEquip)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > instanceid_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqSmeltEquip* default_instance_;
};
// -------------------------------------------------------------------

class stSmeltEquipResult : public ::google::protobuf::Message {
 public:
  stSmeltEquipResult();
  virtual ~stSmeltEquipResult();

  stSmeltEquipResult(const stSmeltEquipResult& from);

  inline stSmeltEquipResult& operator=(const stSmeltEquipResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSmeltEquipResult& default_instance();

  void Swap(stSmeltEquipResult* other);

  // implements Message ----------------------------------------------

  stSmeltEquipResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSmeltEquipResult& from);
  void MergeFrom(const stSmeltEquipResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSmeltEquipResult_Result Result;
  static const Result SUCCESS = stSmeltEquipResult_Result_SUCCESS;
  static const Result BAG_FULL = stSmeltEquipResult_Result_BAG_FULL;
  static const Result CANNT_SMELT = stSmeltEquipResult_Result_CANNT_SMELT;
  static const Result EQUIP_NOT_EXIST = stSmeltEquipResult_Result_EQUIP_NOT_EXIST;
  static const Result INNER_ERROR = stSmeltEquipResult_Result_INNER_ERROR;
  static inline bool Result_IsValid(int value) {
    return stSmeltEquipResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stSmeltEquipResult_Result_Result_MIN;
  static const Result Result_MAX =
    stSmeltEquipResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stSmeltEquipResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stSmeltEquipResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stSmeltEquipResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stSmeltEquipResult_Result_Parse(name, value);
  }

  typedef stSmeltEquipResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSmeltEquipResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSmeltEquipResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSmeltEquipResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSmeltEquipResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSmeltEquipResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSmeltEquipResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSmeltEquipResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSmeltEquipResult_ProtoModID_Parse(name, value);
  }

  typedef stSmeltEquipResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSmeltEquipResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSmeltEquipResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSmeltEquipResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSmeltEquipResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSmeltEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSmeltEquipResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSmeltEquipResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSmeltEquipResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSmeltEquipResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stSmeltEquipResult_Result result() const;
  inline void set_result(::Role::stSmeltEquipResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stSmeltEquipResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSmeltEquipResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRecastEquip : public ::google::protobuf::Message {
 public:
  stReqRecastEquip();
  virtual ~stReqRecastEquip();

  stReqRecastEquip(const stReqRecastEquip& from);

  inline stReqRecastEquip& operator=(const stReqRecastEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRecastEquip& default_instance();

  void Swap(stReqRecastEquip* other);

  // implements Message ----------------------------------------------

  stReqRecastEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRecastEquip& from);
  void MergeFrom(const stReqRecastEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRecastEquip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRecastEquip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRecastEquip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRecastEquip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRecastEquip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRecastEquip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRecastEquip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRecastEquip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRecastEquip_ProtoModID_Parse(name, value);
  }

  typedef stReqRecastEquip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRecastEquip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRecastEquip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRecastEquip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRecastEquip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRecastEquip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRecastEquip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRecastEquip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRecastEquip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // repeated uint64 instanceID = 2;
  inline int instanceid_size() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid(int index) const;
  inline void set_instanceid(int index, ::google::protobuf::uint64 value);
  inline void add_instanceid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      instanceid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_instanceid();

  // @@protoc_insertion_point(class_scope:Role.stReqRecastEquip)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > instanceid_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRecastEquip* default_instance_;
};
// -------------------------------------------------------------------

class RecastEquipResult : public ::google::protobuf::Message {
 public:
  RecastEquipResult();
  virtual ~RecastEquipResult();

  RecastEquipResult(const RecastEquipResult& from);

  inline RecastEquipResult& operator=(const RecastEquipResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecastEquipResult& default_instance();

  void Swap(RecastEquipResult* other);

  // implements Message ----------------------------------------------

  RecastEquipResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RecastEquipResult& from);
  void MergeFrom(const RecastEquipResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RecastEquipResult_Result Result;
  static const Result SUCCESS = RecastEquipResult_Result_SUCCESS;
  static const Result DIAMOND_NOT_ENOUGH = RecastEquipResult_Result_DIAMOND_NOT_ENOUGH;
  static const Result BAG_FULL = RecastEquipResult_Result_BAG_FULL;
  static const Result CANNT_SMELT = RecastEquipResult_Result_CANNT_SMELT;
  static const Result EQUIP_NOT_EXIST = RecastEquipResult_Result_EQUIP_NOT_EXIST;
  static const Result INNER_ERROR = RecastEquipResult_Result_INNER_ERROR;
  static inline bool Result_IsValid(int value) {
    return RecastEquipResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    RecastEquipResult_Result_Result_MIN;
  static const Result Result_MAX =
    RecastEquipResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    RecastEquipResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return RecastEquipResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return RecastEquipResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return RecastEquipResult_Result_Parse(name, value);
  }

  typedef RecastEquipResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = RecastEquipResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return RecastEquipResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    RecastEquipResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    RecastEquipResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    RecastEquipResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return RecastEquipResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return RecastEquipResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return RecastEquipResult_ProtoModID_Parse(name, value);
  }

  typedef RecastEquipResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = RecastEquipResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return RecastEquipResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    RecastEquipResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    RecastEquipResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    RecastEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return RecastEquipResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return RecastEquipResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return RecastEquipResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.RecastEquipResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::RecastEquipResult_Result result() const;
  inline void set_result(::Role::RecastEquipResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.RecastEquipResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static RecastEquipResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqCombineItem : public ::google::protobuf::Message {
 public:
  stReqCombineItem();
  virtual ~stReqCombineItem();

  stReqCombineItem(const stReqCombineItem& from);

  inline stReqCombineItem& operator=(const stReqCombineItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCombineItem& default_instance();

  void Swap(stReqCombineItem* other);

  // implements Message ----------------------------------------------

  stReqCombineItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCombineItem& from);
  void MergeFrom(const stReqCombineItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCombineItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCombineItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCombineItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCombineItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCombineItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCombineItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCombineItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCombineItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCombineItem_ProtoModID_Parse(name, value);
  }

  typedef stReqCombineItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCombineItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCombineItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCombineItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCombineItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCombineItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCombineItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCombineItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCombineItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 pieceID = 1;
  inline bool has_pieceid() const;
  inline void clear_pieceid();
  static const int kPieceIDFieldNumber = 1;
  inline ::google::protobuf::uint32 pieceid() const;
  inline void set_pieceid(::google::protobuf::uint32 value);

  // optional uint32 combineNum = 2;
  inline bool has_combinenum() const;
  inline void clear_combinenum();
  static const int kCombineNumFieldNumber = 2;
  inline ::google::protobuf::uint32 combinenum() const;
  inline void set_combinenum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqCombineItem)
 private:
  inline void set_has_pieceid();
  inline void clear_has_pieceid();
  inline void set_has_combinenum();
  inline void clear_has_combinenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 pieceid_;
  ::google::protobuf::uint32 combinenum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqCombineItem* default_instance_;
};
// -------------------------------------------------------------------

class stCombineItemResult : public ::google::protobuf::Message {
 public:
  stCombineItemResult();
  virtual ~stCombineItemResult();

  stCombineItemResult(const stCombineItemResult& from);

  inline stCombineItemResult& operator=(const stCombineItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCombineItemResult& default_instance();

  void Swap(stCombineItemResult* other);

  // implements Message ----------------------------------------------

  stCombineItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCombineItemResult& from);
  void MergeFrom(const stCombineItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCombineItemResult_Result Result;
  static const Result SUCCESS = stCombineItemResult_Result_SUCCESS;
  static const Result FAILURE = stCombineItemResult_Result_FAILURE;
  static const Result BAG_FULL = stCombineItemResult_Result_BAG_FULL;
  static const Result NOT_ENOUGH_PIECE = stCombineItemResult_Result_NOT_ENOUGH_PIECE;
  static inline bool Result_IsValid(int value) {
    return stCombineItemResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stCombineItemResult_Result_Result_MIN;
  static const Result Result_MAX =
    stCombineItemResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stCombineItemResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stCombineItemResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stCombineItemResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stCombineItemResult_Result_Parse(name, value);
  }

  typedef stCombineItemResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCombineItemResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCombineItemResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCombineItemResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCombineItemResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCombineItemResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCombineItemResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCombineItemResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCombineItemResult_ProtoModID_Parse(name, value);
  }

  typedef stCombineItemResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCombineItemResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCombineItemResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCombineItemResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCombineItemResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCombineItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCombineItemResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCombineItemResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCombineItemResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stCombineItemResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stCombineItemResult_Result result() const;
  inline void set_result(::Role::stCombineItemResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stCombineItemResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stCombineItemResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRefreshShoplist : public ::google::protobuf::Message {
 public:
  stReqRefreshShoplist();
  virtual ~stReqRefreshShoplist();

  stReqRefreshShoplist(const stReqRefreshShoplist& from);

  inline stReqRefreshShoplist& operator=(const stReqRefreshShoplist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRefreshShoplist& default_instance();

  void Swap(stReqRefreshShoplist* other);

  // implements Message ----------------------------------------------

  stReqRefreshShoplist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRefreshShoplist& from);
  void MergeFrom(const stReqRefreshShoplist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRefreshShoplist_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRefreshShoplist_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRefreshShoplist_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRefreshShoplist_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRefreshShoplist_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRefreshShoplist_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRefreshShoplist_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRefreshShoplist_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRefreshShoplist_ProtoModID_Parse(name, value);
  }

  typedef stReqRefreshShoplist_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRefreshShoplist_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRefreshShoplist_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRefreshShoplist_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRefreshShoplist_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRefreshShoplist_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRefreshShoplist_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRefreshShoplist_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRefreshShoplist_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 shopID = 1;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 1;
  inline ::google::protobuf::uint32 shopid() const;
  inline void set_shopid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRefreshShoplist)
 private:
  inline void set_has_shopid();
  inline void clear_has_shopid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 shopid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRefreshShoplist* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshShoplistResult : public ::google::protobuf::Message {
 public:
  stRefreshShoplistResult();
  virtual ~stRefreshShoplistResult();

  stRefreshShoplistResult(const stRefreshShoplistResult& from);

  inline stRefreshShoplistResult& operator=(const stRefreshShoplistResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshShoplistResult& default_instance();

  void Swap(stRefreshShoplistResult* other);

  // implements Message ----------------------------------------------

  stRefreshShoplistResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshShoplistResult& from);
  void MergeFrom(const stRefreshShoplistResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshShoplistResult_Result Result;
  static const Result SUCCESS = stRefreshShoplistResult_Result_SUCCESS;
  static const Result RESOURCE_NOT_ENOUGH = stRefreshShoplistResult_Result_RESOURCE_NOT_ENOUGH;
  static const Result SHOP_NOT_EXIST = stRefreshShoplistResult_Result_SHOP_NOT_EXIST;
  static const Result REFRESH_NUM_USE_OUT = stRefreshShoplistResult_Result_REFRESH_NUM_USE_OUT;
  static inline bool Result_IsValid(int value) {
    return stRefreshShoplistResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stRefreshShoplistResult_Result_Result_MIN;
  static const Result Result_MAX =
    stRefreshShoplistResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stRefreshShoplistResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stRefreshShoplistResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stRefreshShoplistResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stRefreshShoplistResult_Result_Parse(name, value);
  }

  typedef stRefreshShoplistResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshShoplistResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshShoplistResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshShoplistResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshShoplistResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshShoplistResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshShoplistResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshShoplistResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshShoplistResult_ProtoModID_Parse(name, value);
  }

  typedef stRefreshShoplistResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshShoplistResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshShoplistResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshShoplistResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshShoplistResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshShoplistResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshShoplistResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshShoplistResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshShoplistResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 shopID = 1;
  inline bool has_shopid() const;
  inline void clear_shopid();
  static const int kShopIDFieldNumber = 1;
  inline ::google::protobuf::uint32 shopid() const;
  inline void set_shopid(::google::protobuf::uint32 value);

  // repeated .Role.stShopItem shoplist = 2;
  inline int shoplist_size() const;
  inline void clear_shoplist();
  static const int kShoplistFieldNumber = 2;
  inline const ::Role::stShopItem& shoplist(int index) const;
  inline ::Role::stShopItem* mutable_shoplist(int index);
  inline ::Role::stShopItem* add_shoplist();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >&
      shoplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >*
      mutable_shoplist();

  // optional .Role.stRefreshShoplistResult.Result result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRefreshShoplistResult_Result result() const;
  inline void set_result(::Role::stRefreshShoplistResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stRefreshShoplistResult)
 private:
  inline void set_has_shopid();
  inline void clear_has_shopid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stShopItem > shoplist_;
  ::google::protobuf::uint32 shopid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRefreshShoplistResult* default_instance_;
};
// -------------------------------------------------------------------

class stChatCmd : public ::google::protobuf::Message {
 public:
  stChatCmd();
  virtual ~stChatCmd();

  stChatCmd(const stChatCmd& from);

  inline stChatCmd& operator=(const stChatCmd& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChatCmd& default_instance();

  void Swap(stChatCmd* other);

  // implements Message ----------------------------------------------

  stChatCmd* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChatCmd& from);
  void MergeFrom(const stChatCmd& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChatCmd_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChatCmd_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChatCmd_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChatCmd_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChatCmd_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChatCmd_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChatCmd_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChatCmd_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChatCmd_ProtoModID_Parse(name, value);
  }

  typedef stChatCmd_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChatCmd_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChatCmd_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChatCmd_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChatCmd_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChatCmd_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChatCmd_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChatCmd_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChatCmd_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.eChatType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Role::eChatType type() const;
  inline void set_type(::Role::eChatType value);

  // optional uint32 destCharID = 2;
  inline bool has_destcharid() const;
  inline void clear_destcharid();
  static const int kDestCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 destcharid() const;
  inline void set_destcharid(::google::protobuf::uint32 value);

  // optional string destCharName = 3;
  inline bool has_destcharname() const;
  inline void clear_destcharname();
  static const int kDestCharNameFieldNumber = 3;
  inline const ::std::string& destcharname() const;
  inline void set_destcharname(const ::std::string& value);
  inline void set_destcharname(const char* value);
  inline void set_destcharname(const char* value, size_t size);
  inline ::std::string* mutable_destcharname();
  inline ::std::string* release_destcharname();
  inline void set_allocated_destcharname(::std::string* destcharname);

  // optional uint32 srcCharID = 4;
  inline bool has_srccharid() const;
  inline void clear_srccharid();
  static const int kSrcCharIDFieldNumber = 4;
  inline ::google::protobuf::uint32 srccharid() const;
  inline void set_srccharid(::google::protobuf::uint32 value);

  // optional string srcCharName = 5;
  inline bool has_srccharname() const;
  inline void clear_srccharname();
  static const int kSrcCharNameFieldNumber = 5;
  inline const ::std::string& srccharname() const;
  inline void set_srccharname(const ::std::string& value);
  inline void set_srccharname(const char* value);
  inline void set_srccharname(const char* value, size_t size);
  inline ::std::string* mutable_srccharname();
  inline ::std::string* release_srccharname();
  inline void set_allocated_srccharname(::std::string* srccharname);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional uint32 job = 7;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 7;
  inline ::google::protobuf::uint32 job() const;
  inline void set_job(::google::protobuf::uint32 value);

  // optional uint32 sex = 8;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 8;
  inline ::google::protobuf::uint32 sex() const;
  inline void set_sex(::google::protobuf::uint32 value);

  // optional uint32 vipLv = 9;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kVipLvFieldNumber = 9;
  inline ::google::protobuf::uint32 viplv() const;
  inline void set_viplv(::google::protobuf::uint32 value);

  // optional bool isVoice = 10;
  inline bool has_isvoice() const;
  inline void clear_isvoice();
  static const int kIsVoiceFieldNumber = 10;
  inline bool isvoice() const;
  inline void set_isvoice(bool value);

  // optional string voiceUrl = 11;
  inline bool has_voiceurl() const;
  inline void clear_voiceurl();
  static const int kVoiceUrlFieldNumber = 11;
  inline const ::std::string& voiceurl() const;
  inline void set_voiceurl(const ::std::string& value);
  inline void set_voiceurl(const char* value);
  inline void set_voiceurl(const char* value, size_t size);
  inline ::std::string* mutable_voiceurl();
  inline ::std::string* release_voiceurl();
  inline void set_allocated_voiceurl(::std::string* voiceurl);

  // optional uint32 voiceLenght = 12;
  inline bool has_voicelenght() const;
  inline void clear_voicelenght();
  static const int kVoiceLenghtFieldNumber = 12;
  inline ::google::protobuf::uint32 voicelenght() const;
  inline void set_voicelenght(::google::protobuf::uint32 value);

  // optional uint32 photoID = 13;
  inline bool has_photoid() const;
  inline void clear_photoid();
  static const int kPhotoIDFieldNumber = 13;
  inline ::google::protobuf::uint32 photoid() const;
  inline void set_photoid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stChatCmd)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_destcharid();
  inline void clear_has_destcharid();
  inline void set_has_destcharname();
  inline void clear_has_destcharname();
  inline void set_has_srccharid();
  inline void clear_has_srccharid();
  inline void set_has_srccharname();
  inline void clear_has_srccharname();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_isvoice();
  inline void clear_has_isvoice();
  inline void set_has_voiceurl();
  inline void clear_has_voiceurl();
  inline void set_has_voicelenght();
  inline void clear_has_voicelenght();
  inline void set_has_photoid();
  inline void clear_has_photoid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 destcharid_;
  ::std::string* destcharname_;
  ::std::string* srccharname_;
  ::google::protobuf::uint32 srccharid_;
  ::google::protobuf::uint32 job_;
  ::std::string* content_;
  ::google::protobuf::uint32 sex_;
  ::google::protobuf::uint32 viplv_;
  ::std::string* voiceurl_;
  bool isvoice_;
  ::google::protobuf::uint32 voicelenght_;
  ::google::protobuf::uint32 photoid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(13 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stChatCmd* default_instance_;
};
// -------------------------------------------------------------------

class stSynResource : public ::google::protobuf::Message {
 public:
  stSynResource();
  virtual ~stSynResource();

  stSynResource(const stSynResource& from);

  inline stSynResource& operator=(const stSynResource& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynResource& default_instance();

  void Swap(stSynResource* other);

  // implements Message ----------------------------------------------

  stSynResource* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynResource& from);
  void MergeFrom(const stSynResource& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynResource_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynResource_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynResource_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynResource_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynResource_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynResource_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynResource_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynResource_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynResource_ProtoModID_Parse(name, value);
  }

  typedef stSynResource_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynResource_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynResource_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynResource_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynResource_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynResource_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynResource_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynResource_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynResource_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 resType = 1;
  inline bool has_restype() const;
  inline void clear_restype();
  static const int kResTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 restype() const;
  inline void set_restype(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynResource)
 private:
  inline void set_has_restype();
  inline void clear_has_restype();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 restype_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynResource* default_instance_;
};
// -------------------------------------------------------------------

class stSynLevelInfo : public ::google::protobuf::Message {
 public:
  stSynLevelInfo();
  virtual ~stSynLevelInfo();

  stSynLevelInfo(const stSynLevelInfo& from);

  inline stSynLevelInfo& operator=(const stSynLevelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynLevelInfo& default_instance();

  void Swap(stSynLevelInfo* other);

  // implements Message ----------------------------------------------

  stSynLevelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynLevelInfo& from);
  void MergeFrom(const stSynLevelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional .Role.eLevelStar star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::Role::eLevelStar star() const;
  inline void set_star(::Role::eLevelStar value);

  // optional uint32 rushNum = 3;
  inline bool has_rushnum() const;
  inline void clear_rushnum();
  static const int kRushNumFieldNumber = 3;
  inline ::google::protobuf::uint32 rushnum() const;
  inline void set_rushnum(::google::protobuf::uint32 value);

  // optional uint32 resetNum = 4;
  inline bool has_resetnum() const;
  inline void clear_resetnum();
  static const int kResetNumFieldNumber = 4;
  inline ::google::protobuf::uint32 resetnum() const;
  inline void set_resetnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynLevelInfo)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_rushnum();
  inline void clear_has_rushnum();
  inline void set_has_resetnum();
  inline void clear_has_resetnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;
  int star_;
  ::google::protobuf::uint32 rushnum_;
  ::google::protobuf::uint32 resetnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynLevelInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynCharpterInfo : public ::google::protobuf::Message {
 public:
  stSynCharpterInfo();
  virtual ~stSynCharpterInfo();

  stSynCharpterInfo(const stSynCharpterInfo& from);

  inline stSynCharpterInfo& operator=(const stSynCharpterInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynCharpterInfo& default_instance();

  void Swap(stSynCharpterInfo* other);

  // implements Message ----------------------------------------------

  stSynCharpterInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynCharpterInfo& from);
  void MergeFrom(const stSynCharpterInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 charpterID = 1;
  inline bool has_charpterid() const;
  inline void clear_charpterid();
  static const int kCharpterIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charpterid() const;
  inline void set_charpterid(::google::protobuf::uint32 value);

  // optional uint32 rewardStep = 2;
  inline bool has_rewardstep() const;
  inline void clear_rewardstep();
  static const int kRewardStepFieldNumber = 2;
  inline ::google::protobuf::uint32 rewardstep() const;
  inline void set_rewardstep(::google::protobuf::uint32 value);

  // repeated .Role.stSynLevelInfo levelInfo = 3;
  inline int levelinfo_size() const;
  inline void clear_levelinfo();
  static const int kLevelInfoFieldNumber = 3;
  inline const ::Role::stSynLevelInfo& levelinfo(int index) const;
  inline ::Role::stSynLevelInfo* mutable_levelinfo(int index);
  inline ::Role::stSynLevelInfo* add_levelinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynLevelInfo >&
      levelinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynLevelInfo >*
      mutable_levelinfo();

  // @@protoc_insertion_point(class_scope:Role.stSynCharpterInfo)
 private:
  inline void set_has_charpterid();
  inline void clear_has_charpterid();
  inline void set_has_rewardstep();
  inline void clear_has_rewardstep();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charpterid_;
  ::google::protobuf::uint32 rewardstep_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynLevelInfo > levelinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynCharpterInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynAllLevelInfo : public ::google::protobuf::Message {
 public:
  stSynAllLevelInfo();
  virtual ~stSynAllLevelInfo();

  stSynAllLevelInfo(const stSynAllLevelInfo& from);

  inline stSynAllLevelInfo& operator=(const stSynAllLevelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynAllLevelInfo& default_instance();

  void Swap(stSynAllLevelInfo* other);

  // implements Message ----------------------------------------------

  stSynAllLevelInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynAllLevelInfo& from);
  void MergeFrom(const stSynAllLevelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynAllLevelInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynAllLevelInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynAllLevelInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynAllLevelInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynAllLevelInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynAllLevelInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynAllLevelInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynAllLevelInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynAllLevelInfo_ProtoModID_Parse(name, value);
  }

  typedef stSynAllLevelInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynAllLevelInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynAllLevelInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynAllLevelInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynAllLevelInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynAllLevelInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynAllLevelInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynAllLevelInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynAllLevelInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynCharpterInfo charpterInfo = 1;
  inline int charpterinfo_size() const;
  inline void clear_charpterinfo();
  static const int kCharpterInfoFieldNumber = 1;
  inline const ::Role::stSynCharpterInfo& charpterinfo(int index) const;
  inline ::Role::stSynCharpterInfo* mutable_charpterinfo(int index);
  inline ::Role::stSynCharpterInfo* add_charpterinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynCharpterInfo >&
      charpterinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynCharpterInfo >*
      mutable_charpterinfo();

  // @@protoc_insertion_point(class_scope:Role.stSynAllLevelInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynCharpterInfo > charpterinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynAllLevelInfo* default_instance_;
};
// -------------------------------------------------------------------

class stObtainItem : public ::google::protobuf::Message {
 public:
  stObtainItem();
  virtual ~stObtainItem();

  stObtainItem(const stObtainItem& from);

  inline stObtainItem& operator=(const stObtainItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stObtainItem& default_instance();

  void Swap(stObtainItem* other);

  // implements Message ----------------------------------------------

  stObtainItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stObtainItem& from);
  void MergeFrom(const stObtainItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stObtainItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stObtainItem* default_instance_;
};
// -------------------------------------------------------------------

class stReqFinishLv : public ::google::protobuf::Message {
 public:
  stReqFinishLv();
  virtual ~stReqFinishLv();

  stReqFinishLv(const stReqFinishLv& from);

  inline stReqFinishLv& operator=(const stReqFinishLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqFinishLv& default_instance();

  void Swap(stReqFinishLv* other);

  // implements Message ----------------------------------------------

  stReqFinishLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqFinishLv& from);
  void MergeFrom(const stReqFinishLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqFinishLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqFinishLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqFinishLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqFinishLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqFinishLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqFinishLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqFinishLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqFinishLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqFinishLv_ProtoModID_Parse(name, value);
  }

  typedef stReqFinishLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqFinishLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqFinishLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqFinishLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqFinishLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqFinishLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqFinishLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqFinishLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqFinishLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional .Role.eLevelStar star = 2;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 2;
  inline ::Role::eLevelStar star() const;
  inline void set_star(::Role::eLevelStar value);

  // optional uint32 goldCoin = 3;
  inline bool has_goldcoin() const;
  inline void clear_goldcoin();
  static const int kGoldCoinFieldNumber = 3;
  inline ::google::protobuf::uint32 goldcoin() const;
  inline void set_goldcoin(::google::protobuf::uint32 value);

  // repeated .Role.stObtainItem getItem = 4;
  inline int getitem_size() const;
  inline void clear_getitem();
  static const int kGetItemFieldNumber = 4;
  inline const ::Role::stObtainItem& getitem(int index) const;
  inline ::Role::stObtainItem* mutable_getitem(int index);
  inline ::Role::stObtainItem* add_getitem();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stObtainItem >&
      getitem() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stObtainItem >*
      mutable_getitem();

  // @@protoc_insertion_point(class_scope:Role.stReqFinishLv)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_goldcoin();
  inline void clear_has_goldcoin();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;
  int star_;
  ::google::protobuf::RepeatedPtrField< ::Role::stObtainItem > getitem_;
  ::google::protobuf::uint32 goldcoin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqFinishLv* default_instance_;
};
// -------------------------------------------------------------------

class stFinishLvResult : public ::google::protobuf::Message {
 public:
  stFinishLvResult();
  virtual ~stFinishLvResult();

  stFinishLvResult(const stFinishLvResult& from);

  inline stFinishLvResult& operator=(const stFinishLvResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFinishLvResult& default_instance();

  void Swap(stFinishLvResult* other);

  // implements Message ----------------------------------------------

  stFinishLvResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFinishLvResult& from);
  void MergeFrom(const stFinishLvResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFinishLvResult_eResult eResult;
  static const eResult SUCCESS = stFinishLvResult_eResult_SUCCESS;
  static const eResult COND_NOT_MEET = stFinishLvResult_eResult_COND_NOT_MEET;
  static const eResult INNER_ERROR = stFinishLvResult_eResult_INNER_ERROR;
  static const eResult SP_NOT_ENOUGH = stFinishLvResult_eResult_SP_NOT_ENOUGH;
  static const eResult LILIAN_NOT_ENOUGH = stFinishLvResult_eResult_LILIAN_NOT_ENOUGH;
  static const eResult ROLE_LV_TOO_LOW = stFinishLvResult_eResult_ROLE_LV_TOO_LOW;
  static const eResult PRE_LEVEL_NOT_FINISH = stFinishLvResult_eResult_PRE_LEVEL_NOT_FINISH;
  static const eResult TIME_USE_OUT = stFinishLvResult_eResult_TIME_USE_OUT;
  static inline bool eResult_IsValid(int value) {
    return stFinishLvResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stFinishLvResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stFinishLvResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stFinishLvResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stFinishLvResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stFinishLvResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stFinishLvResult_eResult_Parse(name, value);
  }

  typedef stFinishLvResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFinishLvResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFinishLvResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFinishLvResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFinishLvResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFinishLvResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFinishLvResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFinishLvResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFinishLvResult_ProtoModID_Parse(name, value);
  }

  typedef stFinishLvResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFinishLvResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFinishLvResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFinishLvResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFinishLvResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFinishLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFinishLvResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFinishLvResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFinishLvResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stFinishLvResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stFinishLvResult_eResult result() const;
  inline void set_result(::Role::stFinishLvResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stFinishLvResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stFinishLvResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqCharpterReward : public ::google::protobuf::Message {
 public:
  stReqCharpterReward();
  virtual ~stReqCharpterReward();

  stReqCharpterReward(const stReqCharpterReward& from);

  inline stReqCharpterReward& operator=(const stReqCharpterReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqCharpterReward& default_instance();

  void Swap(stReqCharpterReward* other);

  // implements Message ----------------------------------------------

  stReqCharpterReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqCharpterReward& from);
  void MergeFrom(const stReqCharpterReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqCharpterReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqCharpterReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqCharpterReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqCharpterReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqCharpterReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqCharpterReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqCharpterReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqCharpterReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqCharpterReward_ProtoModID_Parse(name, value);
  }

  typedef stReqCharpterReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqCharpterReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqCharpterReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqCharpterReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqCharpterReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqCharpterReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqCharpterReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqCharpterReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqCharpterReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charpterID = 1;
  inline bool has_charpterid() const;
  inline void clear_charpterid();
  static const int kCharpterIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charpterid() const;
  inline void set_charpterid(::google::protobuf::uint32 value);

  // optional uint32 step = 2;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 2;
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqCharpterReward)
 private:
  inline void set_has_charpterid();
  inline void clear_has_charpterid();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charpterid_;
  ::google::protobuf::uint32 step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqCharpterReward* default_instance_;
};
// -------------------------------------------------------------------

class stCharpterRewardResult : public ::google::protobuf::Message {
 public:
  stCharpterRewardResult();
  virtual ~stCharpterRewardResult();

  stCharpterRewardResult(const stCharpterRewardResult& from);

  inline stCharpterRewardResult& operator=(const stCharpterRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCharpterRewardResult& default_instance();

  void Swap(stCharpterRewardResult* other);

  // implements Message ----------------------------------------------

  stCharpterRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCharpterRewardResult& from);
  void MergeFrom(const stCharpterRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCharpterRewardResult_eResult eResult;
  static const eResult SUCCESS = stCharpterRewardResult_eResult_SUCCESS;
  static const eResult INNER_ERROR = stCharpterRewardResult_eResult_INNER_ERROR;
  static const eResult CHARPTER_NOT_EXSIT = stCharpterRewardResult_eResult_CHARPTER_NOT_EXSIT;
  static const eResult STARNUM_NOT_ENOUGH = stCharpterRewardResult_eResult_STARNUM_NOT_ENOUGH;
  static const eResult HAS_GET_REWARD = stCharpterRewardResult_eResult_HAS_GET_REWARD;
  static const eResult BAG_FULL = stCharpterRewardResult_eResult_BAG_FULL;
  static inline bool eResult_IsValid(int value) {
    return stCharpterRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stCharpterRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stCharpterRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stCharpterRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stCharpterRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stCharpterRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stCharpterRewardResult_eResult_Parse(name, value);
  }

  typedef stCharpterRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCharpterRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCharpterRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCharpterRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCharpterRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCharpterRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCharpterRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCharpterRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCharpterRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stCharpterRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCharpterRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCharpterRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCharpterRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCharpterRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCharpterRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCharpterRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCharpterRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCharpterRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stCharpterRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stCharpterRewardResult_eResult result() const;
  inline void set_result(::Role::stCharpterRewardResult_eResult value);

  // optional uint32 step = 2;
  inline bool has_step() const;
  inline void clear_step();
  static const int kStepFieldNumber = 2;
  inline ::google::protobuf::uint32 step() const;
  inline void set_step(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stCharpterRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_step();
  inline void clear_has_step();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 step_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stCharpterRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRushLevel : public ::google::protobuf::Message {
 public:
  stReqRushLevel();
  virtual ~stReqRushLevel();

  stReqRushLevel(const stReqRushLevel& from);

  inline stReqRushLevel& operator=(const stReqRushLevel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRushLevel& default_instance();

  void Swap(stReqRushLevel* other);

  // implements Message ----------------------------------------------

  stReqRushLevel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRushLevel& from);
  void MergeFrom(const stReqRushLevel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRushLevel_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRushLevel_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRushLevel_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRushLevel_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRushLevel_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRushLevel_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRushLevel_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRushLevel_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRushLevel_ProtoModID_Parse(name, value);
  }

  typedef stReqRushLevel_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRushLevel_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRushLevel_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRushLevel_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRushLevel_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRushLevel_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRushLevel_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRushLevel_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRushLevel_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional .Role.eRushType type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::Role::eRushType type() const;
  inline void set_type(::Role::eRushType value);

  // optional uint32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRushLevel)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;
  int type_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRushLevel* default_instance_;
};
// -------------------------------------------------------------------

class stSynRushReward : public ::google::protobuf::Message {
 public:
  stSynRushReward();
  virtual ~stSynRushReward();

  stSynRushReward(const stSynRushReward& from);

  inline stSynRushReward& operator=(const stSynRushReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRushReward& default_instance();

  void Swap(stSynRushReward* other);

  // implements Message ----------------------------------------------

  stSynRushReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRushReward& from);
  void MergeFrom(const stSynRushReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynRushReward)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynRushReward* default_instance_;
};
// -------------------------------------------------------------------

class stLevelRushResult : public ::google::protobuf::Message {
 public:
  stLevelRushResult();
  virtual ~stLevelRushResult();

  stLevelRushResult(const stLevelRushResult& from);

  inline stLevelRushResult& operator=(const stLevelRushResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stLevelRushResult& default_instance();

  void Swap(stLevelRushResult* other);

  // implements Message ----------------------------------------------

  stLevelRushResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stLevelRushResult& from);
  void MergeFrom(const stLevelRushResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stLevelRushResult_eResult eResult;
  static const eResult SUCCESS = stLevelRushResult_eResult_SUCCESS;
  static const eResult INNER_ERROR = stLevelRushResult_eResult_INNER_ERROR;
  static const eResult NOT_3_STAR = stLevelRushResult_eResult_NOT_3_STAR;
  static const eResult SP_NOT_ENOUGH = stLevelRushResult_eResult_SP_NOT_ENOUGH;
  static const eResult LILIAN_NOT_ENOUGH = stLevelRushResult_eResult_LILIAN_NOT_ENOUGH;
  static const eResult RUSH_NUM_OUT = stLevelRushResult_eResult_RUSH_NUM_OUT;
  static const eResult LV_CANNT_RUSH = stLevelRushResult_eResult_LV_CANNT_RUSH;
  static const eResult BAG_FULL = stLevelRushResult_eResult_BAG_FULL;
  static const eResult VIP_LV_TOO_LOW = stLevelRushResult_eResult_VIP_LV_TOO_LOW;
  static const eResult RUSH_TICKET_NOT_ENOUGH = stLevelRushResult_eResult_RUSH_TICKET_NOT_ENOUGH;
  static const eResult BATTLEPOWER = stLevelRushResult_eResult_BATTLEPOWER;
  static inline bool eResult_IsValid(int value) {
    return stLevelRushResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stLevelRushResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stLevelRushResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stLevelRushResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stLevelRushResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stLevelRushResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stLevelRushResult_eResult_Parse(name, value);
  }

  typedef stLevelRushResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stLevelRushResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stLevelRushResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stLevelRushResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stLevelRushResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stLevelRushResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stLevelRushResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stLevelRushResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stLevelRushResult_ProtoModID_Parse(name, value);
  }

  typedef stLevelRushResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stLevelRushResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stLevelRushResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stLevelRushResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stLevelRushResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stLevelRushResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stLevelRushResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stLevelRushResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stLevelRushResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stLevelRushResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stLevelRushResult_eResult result() const;
  inline void set_result(::Role::stLevelRushResult_eResult value);

  // optional uint32 levelID = 2;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 2;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // repeated .Role.stSynRushReward items = 3;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 3;
  inline const ::Role::stSynRushReward& items(int index) const;
  inline ::Role::stSynRushReward* mutable_items(int index);
  inline ::Role::stSynRushReward* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRushReward >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRushReward >*
      mutable_items();

  // optional uint32 exp = 4;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 4;
  inline ::google::protobuf::uint32 exp() const;
  inline void set_exp(::google::protobuf::uint32 value);

  // optional uint32 goldCoin = 5;
  inline bool has_goldcoin() const;
  inline void clear_goldcoin();
  static const int kGoldCoinFieldNumber = 5;
  inline ::google::protobuf::uint32 goldcoin() const;
  inline void set_goldcoin(::google::protobuf::uint32 value);

  // optional .Role.eRushType type = 6;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 6;
  inline ::Role::eRushType type() const;
  inline void set_type(::Role::eRushType value);

  // @@protoc_insertion_point(class_scope:Role.stLevelRushResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_goldcoin();
  inline void clear_has_goldcoin();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 levelid_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynRushReward > items_;
  ::google::protobuf::uint32 exp_;
  ::google::protobuf::uint32 goldcoin_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stLevelRushResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqResetRushNum : public ::google::protobuf::Message {
 public:
  stReqResetRushNum();
  virtual ~stReqResetRushNum();

  stReqResetRushNum(const stReqResetRushNum& from);

  inline stReqResetRushNum& operator=(const stReqResetRushNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqResetRushNum& default_instance();

  void Swap(stReqResetRushNum* other);

  // implements Message ----------------------------------------------

  stReqResetRushNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqResetRushNum& from);
  void MergeFrom(const stReqResetRushNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqResetRushNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqResetRushNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqResetRushNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqResetRushNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqResetRushNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqResetRushNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqResetRushNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqResetRushNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqResetRushNum_ProtoModID_Parse(name, value);
  }

  typedef stReqResetRushNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqResetRushNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqResetRushNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqResetRushNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqResetRushNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqResetRushNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqResetRushNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqResetRushNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqResetRushNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqResetRushNum)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqResetRushNum* default_instance_;
};
// -------------------------------------------------------------------

class stResetRushNumResult : public ::google::protobuf::Message {
 public:
  stResetRushNumResult();
  virtual ~stResetRushNumResult();

  stResetRushNumResult(const stResetRushNumResult& from);

  inline stResetRushNumResult& operator=(const stResetRushNumResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetRushNumResult& default_instance();

  void Swap(stResetRushNumResult* other);

  // implements Message ----------------------------------------------

  stResetRushNumResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetRushNumResult& from);
  void MergeFrom(const stResetRushNumResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetRushNumResult_eResult eResult;
  static const eResult SUCCESS = stResetRushNumResult_eResult_SUCCESS;
  static const eResult INNER_ERROR = stResetRushNumResult_eResult_INNER_ERROR;
  static const eResult CHARPTER_NOT_FINISH = stResetRushNumResult_eResult_CHARPTER_NOT_FINISH;
  static const eResult LEVEL_NOT_FINISH = stResetRushNumResult_eResult_LEVEL_NOT_FINISH;
  static const eResult DIAMOND_NOT_ENOUGH = stResetRushNumResult_eResult_DIAMOND_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stResetRushNumResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetRushNumResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetRushNumResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetRushNumResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetRushNumResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetRushNumResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetRushNumResult_eResult_Parse(name, value);
  }

  typedef stResetRushNumResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetRushNumResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetRushNumResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetRushNumResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetRushNumResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetRushNumResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetRushNumResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetRushNumResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetRushNumResult_ProtoModID_Parse(name, value);
  }

  typedef stResetRushNumResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetRushNumResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetRushNumResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetRushNumResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetRushNumResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetRushNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetRushNumResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetRushNumResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetRushNumResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelID = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIDFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // optional .Role.stResetRushNumResult.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::Role::stResetRushNumResult_eResult result() const;
  inline void set_result(::Role::stResetRushNumResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stResetRushNumResult)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stResetRushNumResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRefineEquip : public ::google::protobuf::Message {
 public:
  stReqRefineEquip();
  virtual ~stReqRefineEquip();

  stReqRefineEquip(const stReqRefineEquip& from);

  inline stReqRefineEquip& operator=(const stReqRefineEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRefineEquip& default_instance();

  void Swap(stReqRefineEquip* other);

  // implements Message ----------------------------------------------

  stReqRefineEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRefineEquip& from);
  void MergeFrom(const stReqRefineEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRefineEquip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRefineEquip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRefineEquip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRefineEquip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRefineEquip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRefineEquip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRefineEquip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRefineEquip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRefineEquip_ProtoModID_Parse(name, value);
  }

  typedef stReqRefineEquip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRefineEquip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRefineEquip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRefineEquip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRefineEquip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRefineEquip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRefineEquip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRefineEquip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRefineEquip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRefineEquip)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRefineEquip* default_instance_;
};
// -------------------------------------------------------------------

class stRefineEquipResult : public ::google::protobuf::Message {
 public:
  stRefineEquipResult();
  virtual ~stRefineEquipResult();

  stRefineEquipResult(const stRefineEquipResult& from);

  inline stRefineEquipResult& operator=(const stRefineEquipResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefineEquipResult& default_instance();

  void Swap(stRefineEquipResult* other);

  // implements Message ----------------------------------------------

  stRefineEquipResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefineEquipResult& from);
  void MergeFrom(const stRefineEquipResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefineEquipResult_eResult eResult;
  static const eResult eSUCCESS = stRefineEquipResult_eResult_eSUCCESS;
  static const eResult eEQUIP_NOT_EXIST = stRefineEquipResult_eResult_eEQUIP_NOT_EXIST;
  static const eResult eINNER_ERROR = stRefineEquipResult_eResult_eINNER_ERROR;
  static const eResult eGOLDCOIN_NOT_ENOUGH = stRefineEquipResult_eResult_eGOLDCOIN_NOT_ENOUGH;
  static const eResult eITEM_NOT_ENOUGH = stRefineEquipResult_eResult_eITEM_NOT_ENOUGH;
  static const eResult eFULL_LV = stRefineEquipResult_eResult_eFULL_LV;
  static inline bool eResult_IsValid(int value) {
    return stRefineEquipResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRefineEquipResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRefineEquipResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRefineEquipResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRefineEquipResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRefineEquipResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRefineEquipResult_eResult_Parse(name, value);
  }

  typedef stRefineEquipResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefineEquipResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefineEquipResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefineEquipResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefineEquipResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefineEquipResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefineEquipResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefineEquipResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefineEquipResult_ProtoModID_Parse(name, value);
  }

  typedef stRefineEquipResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefineEquipResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefineEquipResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefineEquipResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefineEquipResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefineEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefineEquipResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefineEquipResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefineEquipResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stRefineEquipResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRefineEquipResult_eResult result() const;
  inline void set_result(::Role::stRefineEquipResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRefineEquipResult)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRefineEquipResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynTotoalRecharge : public ::google::protobuf::Message {
 public:
  stSynTotoalRecharge();
  virtual ~stSynTotoalRecharge();

  stSynTotoalRecharge(const stSynTotoalRecharge& from);

  inline stSynTotoalRecharge& operator=(const stSynTotoalRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynTotoalRecharge& default_instance();

  void Swap(stSynTotoalRecharge* other);

  // implements Message ----------------------------------------------

  stSynTotoalRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynTotoalRecharge& from);
  void MergeFrom(const stSynTotoalRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynTotoalRecharge_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynTotoalRecharge_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynTotoalRecharge_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynTotoalRecharge_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynTotoalRecharge_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynTotoalRecharge_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynTotoalRecharge_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynTotoalRecharge_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynTotoalRecharge_ProtoModID_Parse(name, value);
  }

  typedef stSynTotoalRecharge_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynTotoalRecharge_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynTotoalRecharge_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynTotoalRecharge_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynTotoalRecharge_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynTotoalRecharge_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynTotoalRecharge_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynTotoalRecharge_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynTotoalRecharge_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 totalRecharge = 1;
  inline bool has_totalrecharge() const;
  inline void clear_totalrecharge();
  static const int kTotalRechargeFieldNumber = 1;
  inline ::google::protobuf::uint32 totalrecharge() const;
  inline void set_totalrecharge(::google::protobuf::uint32 value);

  // optional uint32 todayRecharge = 2;
  inline bool has_todayrecharge() const;
  inline void clear_todayrecharge();
  static const int kTodayRechargeFieldNumber = 2;
  inline ::google::protobuf::uint32 todayrecharge() const;
  inline void set_todayrecharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynTotoalRecharge)
 private:
  inline void set_has_totalrecharge();
  inline void clear_has_totalrecharge();
  inline void set_has_todayrecharge();
  inline void clear_has_todayrecharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 totalrecharge_;
  ::google::protobuf::uint32 todayrecharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynTotoalRecharge* default_instance_;
};
// -------------------------------------------------------------------

class stSynSkillInfo : public ::google::protobuf::Message {
 public:
  stSynSkillInfo();
  virtual ~stSynSkillInfo();

  stSynSkillInfo(const stSynSkillInfo& from);

  inline stSynSkillInfo& operator=(const stSynSkillInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynSkillInfo& default_instance();

  void Swap(stSynSkillInfo* other);

  // implements Message ----------------------------------------------

  stSynSkillInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynSkillInfo& from);
  void MergeFrom(const stSynSkillInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillLv = 2;
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 2;
  inline ::google::protobuf::uint32 skilllv() const;
  inline void set_skilllv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynSkillInfo)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynSkillInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynUserAllSkill : public ::google::protobuf::Message {
 public:
  stSynUserAllSkill();
  virtual ~stSynUserAllSkill();

  stSynUserAllSkill(const stSynUserAllSkill& from);

  inline stSynUserAllSkill& operator=(const stSynUserAllSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynUserAllSkill& default_instance();

  void Swap(stSynUserAllSkill* other);

  // implements Message ----------------------------------------------

  stSynUserAllSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynUserAllSkill& from);
  void MergeFrom(const stSynUserAllSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynUserAllSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynUserAllSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynUserAllSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynUserAllSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynUserAllSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynUserAllSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynUserAllSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynUserAllSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynUserAllSkill_ProtoModID_Parse(name, value);
  }

  typedef stSynUserAllSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynUserAllSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynUserAllSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynUserAllSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynUserAllSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynUserAllSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynUserAllSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynUserAllSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynUserAllSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynSkillInfo skillInfo = 1;
  inline int skillinfo_size() const;
  inline void clear_skillinfo();
  static const int kSkillInfoFieldNumber = 1;
  inline const ::Role::stSynSkillInfo& skillinfo(int index) const;
  inline ::Role::stSynSkillInfo* mutable_skillinfo(int index);
  inline ::Role::stSynSkillInfo* add_skillinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynSkillInfo >&
      skillinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynSkillInfo >*
      mutable_skillinfo();

  // @@protoc_insertion_point(class_scope:Role.stSynUserAllSkill)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynSkillInfo > skillinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynUserAllSkill* default_instance_;
};
// -------------------------------------------------------------------

class stAddUserSkill : public ::google::protobuf::Message {
 public:
  stAddUserSkill();
  virtual ~stAddUserSkill();

  stAddUserSkill(const stAddUserSkill& from);

  inline stAddUserSkill& operator=(const stAddUserSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAddUserSkill& default_instance();

  void Swap(stAddUserSkill* other);

  // implements Message ----------------------------------------------

  stAddUserSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAddUserSkill& from);
  void MergeFrom(const stAddUserSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAddUserSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAddUserSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAddUserSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAddUserSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAddUserSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAddUserSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAddUserSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAddUserSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAddUserSkill_ProtoModID_Parse(name, value);
  }

  typedef stAddUserSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAddUserSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAddUserSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAddUserSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAddUserSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAddUserSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAddUserSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAddUserSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAddUserSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSynSkillInfo data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Role::stSynSkillInfo& data() const;
  inline ::Role::stSynSkillInfo* mutable_data();
  inline ::Role::stSynSkillInfo* release_data();
  inline void set_allocated_data(::Role::stSynSkillInfo* data);

  // @@protoc_insertion_point(class_scope:Role.stAddUserSkill)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stSynSkillInfo* data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stAddUserSkill* default_instance_;
};
// -------------------------------------------------------------------

class stReqUserDetailInfo : public ::google::protobuf::Message {
 public:
  stReqUserDetailInfo();
  virtual ~stReqUserDetailInfo();

  stReqUserDetailInfo(const stReqUserDetailInfo& from);

  inline stReqUserDetailInfo& operator=(const stReqUserDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUserDetailInfo& default_instance();

  void Swap(stReqUserDetailInfo* other);

  // implements Message ----------------------------------------------

  stReqUserDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUserDetailInfo& from);
  void MergeFrom(const stReqUserDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUserDetailInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUserDetailInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUserDetailInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUserDetailInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUserDetailInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUserDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUserDetailInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUserDetailInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUserDetailInfo_ProtoModID_Parse(name, value);
  }

  typedef stReqUserDetailInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUserDetailInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUserDetailInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUserDetailInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUserDetailInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUserDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUserDetailInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUserDetailInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUserDetailInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqUserDetailInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqUserDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class stUserDetailInfo : public ::google::protobuf::Message {
 public:
  stUserDetailInfo();
  virtual ~stUserDetailInfo();

  stUserDetailInfo(const stUserDetailInfo& from);

  inline stUserDetailInfo& operator=(const stUserDetailInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUserDetailInfo& default_instance();

  void Swap(stUserDetailInfo* other);

  // implements Message ----------------------------------------------

  stUserDetailInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUserDetailInfo& from);
  void MergeFrom(const stUserDetailInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUserDetailInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUserDetailInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUserDetailInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUserDetailInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUserDetailInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUserDetailInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUserDetailInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUserDetailInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUserDetailInfo_ProtoModID_Parse(name, value);
  }

  typedef stUserDetailInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUserDetailInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUserDetailInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUserDetailInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUserDetailInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUserDetailInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUserDetailInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUserDetailInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUserDetailInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRoleMainData mainData = 1;
  inline bool has_maindata() const;
  inline void clear_maindata();
  static const int kMainDataFieldNumber = 1;
  inline const ::Role::stRoleMainData& maindata() const;
  inline ::Role::stRoleMainData* mutable_maindata();
  inline ::Role::stRoleMainData* release_maindata();
  inline void set_allocated_maindata(::Role::stRoleMainData* maindata);

  // repeated .Role.stSynItemInfo itemData = 2;
  inline int itemdata_size() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 2;
  inline const ::Role::stSynItemInfo& itemdata(int index) const;
  inline ::Role::stSynItemInfo* mutable_itemdata(int index);
  inline ::Role::stSynItemInfo* add_itemdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >&
      itemdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >*
      mutable_itemdata();

  // repeated .Role.stSynHeroInfo heroData = 3;
  inline int herodata_size() const;
  inline void clear_herodata();
  static const int kHeroDataFieldNumber = 3;
  inline const ::Role::stSynHeroInfo& herodata(int index) const;
  inline ::Role::stSynHeroInfo* mutable_herodata(int index);
  inline ::Role::stSynHeroInfo* add_herodata();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >&
      herodata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >*
      mutable_herodata();

  // optional string guildName = 4;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildNameFieldNumber = 4;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional string coupleName = 5;
  inline bool has_couplename() const;
  inline void clear_couplename();
  static const int kCoupleNameFieldNumber = 5;
  inline const ::std::string& couplename() const;
  inline void set_couplename(const ::std::string& value);
  inline void set_couplename(const char* value);
  inline void set_couplename(const char* value, size_t size);
  inline ::std::string* mutable_couplename();
  inline ::std::string* release_couplename();
  inline void set_allocated_couplename(::std::string* couplename);

  // optional uint32 mountID = 6;
  inline bool has_mountid() const;
  inline void clear_mountid();
  static const int kMountIDFieldNumber = 6;
  inline ::google::protobuf::uint32 mountid() const;
  inline void set_mountid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stUserDetailInfo)
 private:
  inline void set_has_maindata();
  inline void clear_has_maindata();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_couplename();
  inline void clear_has_couplename();
  inline void set_has_mountid();
  inline void clear_has_mountid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stRoleMainData* maindata_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo > itemdata_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo > herodata_;
  ::std::string* guildname_;
  ::std::string* couplename_;
  ::google::protobuf::uint32 mountid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUserDetailInfo* default_instance_;
};
// -------------------------------------------------------------------

class stUseItem : public ::google::protobuf::Message {
 public:
  stUseItem();
  virtual ~stUseItem();

  stUseItem(const stUseItem& from);

  inline stUseItem& operator=(const stUseItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUseItem& default_instance();

  void Swap(stUseItem* other);

  // implements Message ----------------------------------------------

  stUseItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUseItem& from);
  void MergeFrom(const stUseItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUseItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUseItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUseItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUseItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUseItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUseItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUseItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUseItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUseItem_ProtoModID_Parse(name, value);
  }

  typedef stUseItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUseItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUseItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUseItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUseItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUseItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUseItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUseItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUseItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional bool batchUse = 3;
  inline bool has_batchuse() const;
  inline void clear_batchuse();
  static const int kBatchUseFieldNumber = 3;
  inline bool batchuse() const;
  inline void set_batchuse(bool value);

  // @@protoc_insertion_point(class_scope:Role.stUseItem)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_batchuse();
  inline void clear_has_batchuse();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  bool batchuse_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUseItem* default_instance_;
};
// -------------------------------------------------------------------

class stUseItemError : public ::google::protobuf::Message {
 public:
  stUseItemError();
  virtual ~stUseItemError();

  stUseItemError(const stUseItemError& from);

  inline stUseItemError& operator=(const stUseItemError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUseItemError& default_instance();

  void Swap(stUseItemError* other);

  // implements Message ----------------------------------------------

  stUseItemError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUseItemError& from);
  void MergeFrom(const stUseItemError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUseItemError_eResult eResult;
  static const eResult eItem_Not_Exist = stUseItemError_eResult_eItem_Not_Exist;
  static const eResult eBag_Slot_Not_Enough = stUseItemError_eResult_eBag_Slot_Not_Enough;
  static const eResult eBag_Need_Media_Not_Exist = stUseItemError_eResult_eBag_Need_Media_Not_Exist;
  static const eResult eSuccess = stUseItemError_eResult_eSuccess;
  static const eResult eUse_Item_Invalid = stUseItemError_eResult_eUse_Item_Invalid;
  static inline bool eResult_IsValid(int value) {
    return stUseItemError_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stUseItemError_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stUseItemError_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stUseItemError_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stUseItemError_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stUseItemError_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stUseItemError_eResult_Parse(name, value);
  }

  typedef stUseItemError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUseItemError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUseItemError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUseItemError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUseItemError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUseItemError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUseItemError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUseItemError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUseItemError_ProtoModID_Parse(name, value);
  }

  typedef stUseItemError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUseItemError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUseItemError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUseItemError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUseItemError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUseItemError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUseItemError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUseItemError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUseItemError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stUseItemError.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stUseItemError_eResult result() const;
  inline void set_result(::Role::stUseItemError_eResult value);

  // optional uint32 itemID = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stUseItemError)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUseItemError* default_instance_;
};
// -------------------------------------------------------------------

class stSynTipItem : public ::google::protobuf::Message {
 public:
  stSynTipItem();
  virtual ~stSynTipItem();

  stSynTipItem(const stSynTipItem& from);

  inline stSynTipItem& operator=(const stSynTipItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynTipItem& default_instance();

  void Swap(stSynTipItem* other);

  // implements Message ----------------------------------------------

  stSynTipItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynTipItem& from);
  void MergeFrom(const stSynTipItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynTipItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynTipItem* default_instance_;
};
// -------------------------------------------------------------------

class stObtainItemTip : public ::google::protobuf::Message {
 public:
  stObtainItemTip();
  virtual ~stObtainItemTip();

  stObtainItemTip(const stObtainItemTip& from);

  inline stObtainItemTip& operator=(const stObtainItemTip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stObtainItemTip& default_instance();

  void Swap(stObtainItemTip* other);

  // implements Message ----------------------------------------------

  stObtainItemTip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stObtainItemTip& from);
  void MergeFrom(const stObtainItemTip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stObtainItemTip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stObtainItemTip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stObtainItemTip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stObtainItemTip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stObtainItemTip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stObtainItemTip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stObtainItemTip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stObtainItemTip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stObtainItemTip_ProtoModID_Parse(name, value);
  }

  typedef stObtainItemTip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stObtainItemTip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stObtainItemTip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stObtainItemTip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stObtainItemTip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stObtainItemTip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stObtainItemTip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stObtainItemTip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stObtainItemTip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynTipItem getItems = 1;
  inline int getitems_size() const;
  inline void clear_getitems();
  static const int kGetItemsFieldNumber = 1;
  inline const ::Role::stSynTipItem& getitems(int index) const;
  inline ::Role::stSynTipItem* mutable_getitems(int index);
  inline ::Role::stSynTipItem* add_getitems();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynTipItem >&
      getitems() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynTipItem >*
      mutable_getitems();

  // @@protoc_insertion_point(class_scope:Role.stObtainItemTip)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynTipItem > getitems_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stObtainItemTip* default_instance_;
};
// -------------------------------------------------------------------

class stReqGetEquipSkill : public ::google::protobuf::Message {
 public:
  stReqGetEquipSkill();
  virtual ~stReqGetEquipSkill();

  stReqGetEquipSkill(const stReqGetEquipSkill& from);

  inline stReqGetEquipSkill& operator=(const stReqGetEquipSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGetEquipSkill& default_instance();

  void Swap(stReqGetEquipSkill* other);

  // implements Message ----------------------------------------------

  stReqGetEquipSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGetEquipSkill& from);
  void MergeFrom(const stReqGetEquipSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGetEquipSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGetEquipSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGetEquipSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGetEquipSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGetEquipSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGetEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGetEquipSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGetEquipSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGetEquipSkill_ProtoModID_Parse(name, value);
  }

  typedef stReqGetEquipSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGetEquipSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGetEquipSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGetEquipSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGetEquipSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGetEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGetEquipSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGetEquipSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGetEquipSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqGetEquipSkill)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqGetEquipSkill* default_instance_;
};
// -------------------------------------------------------------------

class stGetEquipSkillResult : public ::google::protobuf::Message {
 public:
  stGetEquipSkillResult();
  virtual ~stGetEquipSkillResult();

  stGetEquipSkillResult(const stGetEquipSkillResult& from);

  inline stGetEquipSkillResult& operator=(const stGetEquipSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGetEquipSkillResult& default_instance();

  void Swap(stGetEquipSkillResult* other);

  // implements Message ----------------------------------------------

  stGetEquipSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGetEquipSkillResult& from);
  void MergeFrom(const stGetEquipSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGetEquipSkillResult_eResult eResult;
  static const eResult SUCCESS = stGetEquipSkillResult_eResult_SUCCESS;
  static const eResult NOT_ENOUGH_DIAMOND = stGetEquipSkillResult_eResult_NOT_ENOUGH_DIAMOND;
  static const eResult TIME_USE_OUT = stGetEquipSkillResult_eResult_TIME_USE_OUT;
  static const eResult HAS_GOT_SKILL = stGetEquipSkillResult_eResult_HAS_GOT_SKILL;
  static inline bool eResult_IsValid(int value) {
    return stGetEquipSkillResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGetEquipSkillResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGetEquipSkillResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGetEquipSkillResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGetEquipSkillResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGetEquipSkillResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGetEquipSkillResult_eResult_Parse(name, value);
  }

  typedef stGetEquipSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGetEquipSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGetEquipSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGetEquipSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGetEquipSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGetEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGetEquipSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGetEquipSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGetEquipSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stGetEquipSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGetEquipSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGetEquipSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGetEquipSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGetEquipSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGetEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGetEquipSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGetEquipSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGetEquipSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stGetEquipSkillResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stGetEquipSkillResult_eResult result() const;
  inline void set_result(::Role::stGetEquipSkillResult_eResult value);

  // optional uint32 skillID = 4;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 4;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stGetEquipSkillResult)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;
  ::google::protobuf::uint32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stGetEquipSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRefineEquipSkill : public ::google::protobuf::Message {
 public:
  stReqRefineEquipSkill();
  virtual ~stReqRefineEquipSkill();

  stReqRefineEquipSkill(const stReqRefineEquipSkill& from);

  inline stReqRefineEquipSkill& operator=(const stReqRefineEquipSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRefineEquipSkill& default_instance();

  void Swap(stReqRefineEquipSkill* other);

  // implements Message ----------------------------------------------

  stReqRefineEquipSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRefineEquipSkill& from);
  void MergeFrom(const stReqRefineEquipSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRefineEquipSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRefineEquipSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRefineEquipSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRefineEquipSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRefineEquipSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRefineEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRefineEquipSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRefineEquipSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRefineEquipSkill_ProtoModID_Parse(name, value);
  }

  typedef stReqRefineEquipSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRefineEquipSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRefineEquipSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRefineEquipSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRefineEquipSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRefineEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRefineEquipSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRefineEquipSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRefineEquipSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRefineEquipSkill)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRefineEquipSkill* default_instance_;
};
// -------------------------------------------------------------------

class stRefineEquipSkillResult : public ::google::protobuf::Message {
 public:
  stRefineEquipSkillResult();
  virtual ~stRefineEquipSkillResult();

  stRefineEquipSkillResult(const stRefineEquipSkillResult& from);

  inline stRefineEquipSkillResult& operator=(const stRefineEquipSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefineEquipSkillResult& default_instance();

  void Swap(stRefineEquipSkillResult* other);

  // implements Message ----------------------------------------------

  stRefineEquipSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefineEquipSkillResult& from);
  void MergeFrom(const stRefineEquipSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefineEquipSkillResult_eResult eResult;
  static const eResult eSuccess = stRefineEquipSkillResult_eResult_eSuccess;
  static const eResult eSkill_Not_Exist = stRefineEquipSkillResult_eResult_eSkill_Not_Exist;
  static const eResult eInner_Error = stRefineEquipSkillResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stRefineEquipSkillResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRefineEquipSkillResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRefineEquipSkillResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRefineEquipSkillResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRefineEquipSkillResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRefineEquipSkillResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRefineEquipSkillResult_eResult_Parse(name, value);
  }

  typedef stRefineEquipSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefineEquipSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefineEquipSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefineEquipSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefineEquipSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefineEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefineEquipSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefineEquipSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefineEquipSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stRefineEquipSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefineEquipSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefineEquipSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefineEquipSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefineEquipSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefineEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefineEquipSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefineEquipSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefineEquipSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stRefineEquipSkillResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRefineEquipSkillResult_eResult result() const;
  inline void set_result(::Role::stRefineEquipSkillResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRefineEquipSkillResult)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRefineEquipSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stMoveEquipSkill2Slot : public ::google::protobuf::Message {
 public:
  stMoveEquipSkill2Slot();
  virtual ~stMoveEquipSkill2Slot();

  stMoveEquipSkill2Slot(const stMoveEquipSkill2Slot& from);

  inline stMoveEquipSkill2Slot& operator=(const stMoveEquipSkill2Slot& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMoveEquipSkill2Slot& default_instance();

  void Swap(stMoveEquipSkill2Slot* other);

  // implements Message ----------------------------------------------

  stMoveEquipSkill2Slot* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMoveEquipSkill2Slot& from);
  void MergeFrom(const stMoveEquipSkill2Slot& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMoveEquipSkill2Slot_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMoveEquipSkill2Slot_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMoveEquipSkill2Slot_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMoveEquipSkill2Slot_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMoveEquipSkill2Slot_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMoveEquipSkill2Slot_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMoveEquipSkill2Slot_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMoveEquipSkill2Slot_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMoveEquipSkill2Slot_ProtoModID_Parse(name, value);
  }

  typedef stMoveEquipSkill2Slot_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMoveEquipSkill2Slot_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMoveEquipSkill2Slot_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMoveEquipSkill2Slot_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMoveEquipSkill2Slot_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMoveEquipSkill2Slot_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMoveEquipSkill2Slot_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMoveEquipSkill2Slot_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMoveEquipSkill2Slot_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stMoveEquipSkill2Slot)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stMoveEquipSkill2Slot* default_instance_;
};
// -------------------------------------------------------------------

class stMoveEquipSkillResult : public ::google::protobuf::Message {
 public:
  stMoveEquipSkillResult();
  virtual ~stMoveEquipSkillResult();

  stMoveEquipSkillResult(const stMoveEquipSkillResult& from);

  inline stMoveEquipSkillResult& operator=(const stMoveEquipSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMoveEquipSkillResult& default_instance();

  void Swap(stMoveEquipSkillResult* other);

  // implements Message ----------------------------------------------

  stMoveEquipSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMoveEquipSkillResult& from);
  void MergeFrom(const stMoveEquipSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMoveEquipSkillResult_eResult eResult;
  static const eResult eSuccess = stMoveEquipSkillResult_eResult_eSuccess;
  static const eResult eSlot_Was_Locked = stMoveEquipSkillResult_eResult_eSlot_Was_Locked;
  static inline bool eResult_IsValid(int value) {
    return stMoveEquipSkillResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stMoveEquipSkillResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stMoveEquipSkillResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stMoveEquipSkillResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stMoveEquipSkillResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stMoveEquipSkillResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stMoveEquipSkillResult_eResult_Parse(name, value);
  }

  typedef stMoveEquipSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMoveEquipSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMoveEquipSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMoveEquipSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMoveEquipSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMoveEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMoveEquipSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMoveEquipSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMoveEquipSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stMoveEquipSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMoveEquipSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMoveEquipSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMoveEquipSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMoveEquipSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMoveEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMoveEquipSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMoveEquipSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMoveEquipSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 skillID = 4;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 4;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional .Role.stMoveEquipSkillResult.eResult result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::Role::stMoveEquipSkillResult_eResult result() const;
  inline void set_result(::Role::stMoveEquipSkillResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stMoveEquipSkillResult)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 skillid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stMoveEquipSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqUpgradeEquipSkill : public ::google::protobuf::Message {
 public:
  stReqUpgradeEquipSkill();
  virtual ~stReqUpgradeEquipSkill();

  stReqUpgradeEquipSkill(const stReqUpgradeEquipSkill& from);

  inline stReqUpgradeEquipSkill& operator=(const stReqUpgradeEquipSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUpgradeEquipSkill& default_instance();

  void Swap(stReqUpgradeEquipSkill* other);

  // implements Message ----------------------------------------------

  stReqUpgradeEquipSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUpgradeEquipSkill& from);
  void MergeFrom(const stReqUpgradeEquipSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUpgradeEquipSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUpgradeEquipSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUpgradeEquipSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUpgradeEquipSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUpgradeEquipSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUpgradeEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUpgradeEquipSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUpgradeEquipSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUpgradeEquipSkill_ProtoModID_Parse(name, value);
  }

  typedef stReqUpgradeEquipSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUpgradeEquipSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUpgradeEquipSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUpgradeEquipSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUpgradeEquipSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUpgradeEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUpgradeEquipSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUpgradeEquipSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUpgradeEquipSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqUpgradeEquipSkill)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqUpgradeEquipSkill* default_instance_;
};
// -------------------------------------------------------------------

class stUpgradeEquipSkillResult : public ::google::protobuf::Message {
 public:
  stUpgradeEquipSkillResult();
  virtual ~stUpgradeEquipSkillResult();

  stUpgradeEquipSkillResult(const stUpgradeEquipSkillResult& from);

  inline stUpgradeEquipSkillResult& operator=(const stUpgradeEquipSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUpgradeEquipSkillResult& default_instance();

  void Swap(stUpgradeEquipSkillResult* other);

  // implements Message ----------------------------------------------

  stUpgradeEquipSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUpgradeEquipSkillResult& from);
  void MergeFrom(const stUpgradeEquipSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUpgradeEquipSkillResult_eResult eResult;
  static const eResult eSuccess = stUpgradeEquipSkillResult_eResult_eSuccess;
  static const eResult eMoney_Not_Enough = stUpgradeEquipSkillResult_eResult_eMoney_Not_Enough;
  static const eResult eFull_Lv = stUpgradeEquipSkillResult_eResult_eFull_Lv;
  static const eResult eInner_Error = stUpgradeEquipSkillResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stUpgradeEquipSkillResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stUpgradeEquipSkillResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stUpgradeEquipSkillResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stUpgradeEquipSkillResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stUpgradeEquipSkillResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stUpgradeEquipSkillResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stUpgradeEquipSkillResult_eResult_Parse(name, value);
  }

  typedef stUpgradeEquipSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUpgradeEquipSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUpgradeEquipSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUpgradeEquipSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUpgradeEquipSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUpgradeEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUpgradeEquipSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUpgradeEquipSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUpgradeEquipSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stUpgradeEquipSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUpgradeEquipSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUpgradeEquipSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUpgradeEquipSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUpgradeEquipSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUpgradeEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUpgradeEquipSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUpgradeEquipSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUpgradeEquipSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 lv = 4;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 4;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // optional .Role.stUpgradeEquipSkillResult.eResult result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::Role::stUpgradeEquipSkillResult_eResult result() const;
  inline void set_result(::Role::stUpgradeEquipSkillResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stUpgradeEquipSkillResult)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 lv_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUpgradeEquipSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stSendPKUserData : public ::google::protobuf::Message {
 public:
  stSendPKUserData();
  virtual ~stSendPKUserData();

  stSendPKUserData(const stSendPKUserData& from);

  inline stSendPKUserData& operator=(const stSendPKUserData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendPKUserData& default_instance();

  void Swap(stSendPKUserData* other);

  // implements Message ----------------------------------------------

  stSendPKUserData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendPKUserData& from);
  void MergeFrom(const stSendPKUserData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendPKUserData_ePKType ePKType;
  static const ePKType eArena_PK = stSendPKUserData_ePKType_eArena_PK;
  static const ePKType eLeitai_PK = stSendPKUserData_ePKType_eLeitai_PK;
  static const ePKType eIntercept_PK = stSendPKUserData_ePKType_eIntercept_PK;
  static inline bool ePKType_IsValid(int value) {
    return stSendPKUserData_ePKType_IsValid(value);
  }
  static const ePKType ePKType_MIN =
    stSendPKUserData_ePKType_ePKType_MIN;
  static const ePKType ePKType_MAX =
    stSendPKUserData_ePKType_ePKType_MAX;
  static const int ePKType_ARRAYSIZE =
    stSendPKUserData_ePKType_ePKType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ePKType_descriptor() {
    return stSendPKUserData_ePKType_descriptor();
  }
  static inline const ::std::string& ePKType_Name(ePKType value) {
    return stSendPKUserData_ePKType_Name(value);
  }
  static inline bool ePKType_Parse(const ::std::string& name,
      ePKType* value) {
    return stSendPKUserData_ePKType_Parse(name, value);
  }

  typedef stSendPKUserData_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendPKUserData_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendPKUserData_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendPKUserData_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendPKUserData_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendPKUserData_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendPKUserData_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendPKUserData_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendPKUserData_ProtoModID_Parse(name, value);
  }

  typedef stSendPKUserData_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendPKUserData_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendPKUserData_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendPKUserData_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendPKUserData_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendPKUserData_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendPKUserData_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendPKUserData_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendPKUserData_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRoleMainData mainData = 1;
  inline bool has_maindata() const;
  inline void clear_maindata();
  static const int kMainDataFieldNumber = 1;
  inline const ::Role::stRoleMainData& maindata() const;
  inline ::Role::stRoleMainData* mutable_maindata();
  inline ::Role::stRoleMainData* release_maindata();
  inline void set_allocated_maindata(::Role::stRoleMainData* maindata);

  // repeated .Role.stSynItemInfo itemData = 2;
  inline int itemdata_size() const;
  inline void clear_itemdata();
  static const int kItemDataFieldNumber = 2;
  inline const ::Role::stSynItemInfo& itemdata(int index) const;
  inline ::Role::stSynItemInfo* mutable_itemdata(int index);
  inline ::Role::stSynItemInfo* add_itemdata();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >&
      itemdata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >*
      mutable_itemdata();

  // repeated .Role.stSynHeroInfo heroData = 3;
  inline int herodata_size() const;
  inline void clear_herodata();
  static const int kHeroDataFieldNumber = 3;
  inline const ::Role::stSynHeroInfo& herodata(int index) const;
  inline ::Role::stSynHeroInfo* mutable_herodata(int index);
  inline ::Role::stSynHeroInfo* add_herodata();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >&
      herodata() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >*
      mutable_herodata();

  // optional .Role.stSendPKUserData.ePKType pkType = 4;
  inline bool has_pktype() const;
  inline void clear_pktype();
  static const int kPkTypeFieldNumber = 4;
  inline ::Role::stSendPKUserData_ePKType pktype() const;
  inline void set_pktype(::Role::stSendPKUserData_ePKType value);

  // optional uint32 challengeRank = 5;
  inline bool has_challengerank() const;
  inline void clear_challengerank();
  static const int kChallengeRankFieldNumber = 5;
  inline ::google::protobuf::uint32 challengerank() const;
  inline void set_challengerank(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSendPKUserData)
 private:
  inline void set_has_maindata();
  inline void clear_has_maindata();
  inline void set_has_pktype();
  inline void clear_has_pktype();
  inline void set_has_challengerank();
  inline void clear_has_challengerank();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stRoleMainData* maindata_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo > itemdata_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo > herodata_;
  int pktype_;
  ::google::protobuf::uint32 challengerank_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSendPKUserData* default_instance_;
};
// -------------------------------------------------------------------

class stReqRaiseUserSkillLv : public ::google::protobuf::Message {
 public:
  stReqRaiseUserSkillLv();
  virtual ~stReqRaiseUserSkillLv();

  stReqRaiseUserSkillLv(const stReqRaiseUserSkillLv& from);

  inline stReqRaiseUserSkillLv& operator=(const stReqRaiseUserSkillLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRaiseUserSkillLv& default_instance();

  void Swap(stReqRaiseUserSkillLv* other);

  // implements Message ----------------------------------------------

  stReqRaiseUserSkillLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRaiseUserSkillLv& from);
  void MergeFrom(const stReqRaiseUserSkillLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRaiseUserSkillLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRaiseUserSkillLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRaiseUserSkillLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRaiseUserSkillLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRaiseUserSkillLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRaiseUserSkillLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRaiseUserSkillLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRaiseUserSkillLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRaiseUserSkillLv_ProtoModID_Parse(name, value);
  }

  typedef stReqRaiseUserSkillLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRaiseUserSkillLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRaiseUserSkillLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRaiseUserSkillLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRaiseUserSkillLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRaiseUserSkillLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRaiseUserSkillLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRaiseUserSkillLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRaiseUserSkillLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRaiseUserSkillLv)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRaiseUserSkillLv* default_instance_;
};
// -------------------------------------------------------------------

class stRaiseUserSkillLvResult : public ::google::protobuf::Message {
 public:
  stRaiseUserSkillLvResult();
  virtual ~stRaiseUserSkillLvResult();

  stRaiseUserSkillLvResult(const stRaiseUserSkillLvResult& from);

  inline stRaiseUserSkillLvResult& operator=(const stRaiseUserSkillLvResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRaiseUserSkillLvResult& default_instance();

  void Swap(stRaiseUserSkillLvResult* other);

  // implements Message ----------------------------------------------

  stRaiseUserSkillLvResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRaiseUserSkillLvResult& from);
  void MergeFrom(const stRaiseUserSkillLvResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRaiseUserSkillLvResult_eResult eResult;
  static const eResult eSuccess = stRaiseUserSkillLvResult_eResult_eSuccess;
  static const eResult eSkill_Not_Exist = stRaiseUserSkillLvResult_eResult_eSkill_Not_Exist;
  static const eResult eInner_Cfg_Error = stRaiseUserSkillLvResult_eResult_eInner_Cfg_Error;
  static const eResult eGoldCoin_Not_Enough = stRaiseUserSkillLvResult_eResult_eGoldCoin_Not_Enough;
  static const eResult eRole_Lv_Limit = stRaiseUserSkillLvResult_eResult_eRole_Lv_Limit;
  static inline bool eResult_IsValid(int value) {
    return stRaiseUserSkillLvResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRaiseUserSkillLvResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRaiseUserSkillLvResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRaiseUserSkillLvResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRaiseUserSkillLvResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRaiseUserSkillLvResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRaiseUserSkillLvResult_eResult_Parse(name, value);
  }

  typedef stRaiseUserSkillLvResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRaiseUserSkillLvResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRaiseUserSkillLvResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRaiseUserSkillLvResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRaiseUserSkillLvResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRaiseUserSkillLvResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRaiseUserSkillLvResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRaiseUserSkillLvResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRaiseUserSkillLvResult_ProtoModID_Parse(name, value);
  }

  typedef stRaiseUserSkillLvResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRaiseUserSkillLvResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRaiseUserSkillLvResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRaiseUserSkillLvResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRaiseUserSkillLvResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRaiseUserSkillLvResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRaiseUserSkillLvResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRaiseUserSkillLvResult_eResult result() const;
  inline void set_result(::Role::stRaiseUserSkillLvResult_eResult value);

  // optional uint32 skillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillLv = 3;
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 3;
  inline ::google::protobuf::uint32 skilllv() const;
  inline void set_skilllv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stRaiseUserSkillLvResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRaiseUserSkillLvResult* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyNewBieGuideStep : public ::google::protobuf::Message {
 public:
  stNotifyNewBieGuideStep();
  virtual ~stNotifyNewBieGuideStep();

  stNotifyNewBieGuideStep(const stNotifyNewBieGuideStep& from);

  inline stNotifyNewBieGuideStep& operator=(const stNotifyNewBieGuideStep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyNewBieGuideStep& default_instance();

  void Swap(stNotifyNewBieGuideStep* other);

  // implements Message ----------------------------------------------

  stNotifyNewBieGuideStep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyNewBieGuideStep& from);
  void MergeFrom(const stNotifyNewBieGuideStep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyNewBieGuideStep_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyNewBieGuideStep_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyNewBieGuideStep_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyNewBieGuideStep_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyNewBieGuideStep_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyNewBieGuideStep_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyNewBieGuideStep_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyNewBieGuideStep_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyNewBieGuideStep_ProtoModID_Parse(name, value);
  }

  typedef stNotifyNewBieGuideStep_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyNewBieGuideStep_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyNewBieGuideStep_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyNewBieGuideStep_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyNewBieGuideStep_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyNewBieGuideStep_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyNewBieGuideStep_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyNewBieGuideStep_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyNewBieGuideStep_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 stepID = 1;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // optional uint32 subStepID = 2;
  inline bool has_substepid() const;
  inline void clear_substepid();
  static const int kSubStepIDFieldNumber = 2;
  inline ::google::protobuf::uint32 substepid() const;
  inline void set_substepid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stNotifyNewBieGuideStep)
 private:
  inline void set_has_stepid();
  inline void clear_has_stepid();
  inline void set_has_substepid();
  inline void clear_has_substepid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stepid_;
  ::google::protobuf::uint32 substepid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stNotifyNewBieGuideStep* default_instance_;
};
// -------------------------------------------------------------------

class stSaveNewBieGuideStep : public ::google::protobuf::Message {
 public:
  stSaveNewBieGuideStep();
  virtual ~stSaveNewBieGuideStep();

  stSaveNewBieGuideStep(const stSaveNewBieGuideStep& from);

  inline stSaveNewBieGuideStep& operator=(const stSaveNewBieGuideStep& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSaveNewBieGuideStep& default_instance();

  void Swap(stSaveNewBieGuideStep* other);

  // implements Message ----------------------------------------------

  stSaveNewBieGuideStep* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSaveNewBieGuideStep& from);
  void MergeFrom(const stSaveNewBieGuideStep& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSaveNewBieGuideStep_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSaveNewBieGuideStep_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSaveNewBieGuideStep_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSaveNewBieGuideStep_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSaveNewBieGuideStep_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSaveNewBieGuideStep_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSaveNewBieGuideStep_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSaveNewBieGuideStep_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSaveNewBieGuideStep_ProtoModID_Parse(name, value);
  }

  typedef stSaveNewBieGuideStep_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSaveNewBieGuideStep_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSaveNewBieGuideStep_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSaveNewBieGuideStep_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSaveNewBieGuideStep_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSaveNewBieGuideStep_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSaveNewBieGuideStep_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSaveNewBieGuideStep_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSaveNewBieGuideStep_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 stepID = 1;
  inline bool has_stepid() const;
  inline void clear_stepid();
  static const int kStepIDFieldNumber = 1;
  inline ::google::protobuf::uint32 stepid() const;
  inline void set_stepid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSaveNewBieGuideStep)
 private:
  inline void set_has_stepid();
  inline void clear_has_stepid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 stepid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSaveNewBieGuideStep* default_instance_;
};
// -------------------------------------------------------------------

class stOpenLevelBox : public ::google::protobuf::Message {
 public:
  stOpenLevelBox();
  virtual ~stOpenLevelBox();

  stOpenLevelBox(const stOpenLevelBox& from);

  inline stOpenLevelBox& operator=(const stOpenLevelBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpenLevelBox& default_instance();

  void Swap(stOpenLevelBox* other);

  // implements Message ----------------------------------------------

  stOpenLevelBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpenLevelBox& from);
  void MergeFrom(const stOpenLevelBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpenLevelBox_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpenLevelBox_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpenLevelBox_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpenLevelBox_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpenLevelBox_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpenLevelBox_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpenLevelBox_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpenLevelBox_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpenLevelBox_ProtoModID_Parse(name, value);
  }

  typedef stOpenLevelBox_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpenLevelBox_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpenLevelBox_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpenLevelBox_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpenLevelBox_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpenLevelBox_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpenLevelBox_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpenLevelBox_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpenLevelBox_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stOpenLevelBox)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stOpenLevelBox* default_instance_;
};
// -------------------------------------------------------------------

class stChangeRole : public ::google::protobuf::Message {
 public:
  stChangeRole();
  virtual ~stChangeRole();

  stChangeRole(const stChangeRole& from);

  inline stChangeRole& operator=(const stChangeRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChangeRole& default_instance();

  void Swap(stChangeRole* other);

  // implements Message ----------------------------------------------

  stChangeRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChangeRole& from);
  void MergeFrom(const stChangeRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChangeRole_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChangeRole_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChangeRole_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChangeRole_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChangeRole_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChangeRole_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChangeRole_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChangeRole_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChangeRole_ProtoModID_Parse(name, value);
  }

  typedef stChangeRole_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChangeRole_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChangeRole_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChangeRole_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChangeRole_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChangeRole_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChangeRole_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChangeRole_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChangeRole_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stChangeRole)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stChangeRole* default_instance_;
};
// -------------------------------------------------------------------

class stGotoSelectRole : public ::google::protobuf::Message {
 public:
  stGotoSelectRole();
  virtual ~stGotoSelectRole();

  stGotoSelectRole(const stGotoSelectRole& from);

  inline stGotoSelectRole& operator=(const stGotoSelectRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGotoSelectRole& default_instance();

  void Swap(stGotoSelectRole* other);

  // implements Message ----------------------------------------------

  stGotoSelectRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGotoSelectRole& from);
  void MergeFrom(const stGotoSelectRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGotoSelectRole_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGotoSelectRole_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGotoSelectRole_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGotoSelectRole_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGotoSelectRole_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGotoSelectRole_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGotoSelectRole_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGotoSelectRole_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGotoSelectRole_ProtoModID_Parse(name, value);
  }

  typedef stGotoSelectRole_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGotoSelectRole_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGotoSelectRole_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGotoSelectRole_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGotoSelectRole_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGotoSelectRole_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGotoSelectRole_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGotoSelectRole_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGotoSelectRole_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 curCharID = 1;
  inline bool has_curcharid() const;
  inline void clear_curcharid();
  static const int kCurCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 curcharid() const;
  inline void set_curcharid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stGotoSelectRole)
 private:
  inline void set_has_curcharid();
  inline void clear_has_curcharid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 curcharid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stGotoSelectRole* default_instance_;
};
// -------------------------------------------------------------------

class stSynRMPShopItem : public ::google::protobuf::Message {
 public:
  stSynRMPShopItem();
  virtual ~stSynRMPShopItem();

  stSynRMPShopItem(const stSynRMPShopItem& from);

  inline stSynRMPShopItem& operator=(const stSynRMPShopItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRMPShopItem& default_instance();

  void Swap(stSynRMPShopItem* other);

  // implements Message ----------------------------------------------

  stSynRMPShopItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRMPShopItem& from);
  void MergeFrom(const stSynRMPShopItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional bool hasBuy = 2;
  inline bool has_hasbuy() const;
  inline void clear_hasbuy();
  static const int kHasBuyFieldNumber = 2;
  inline bool hasbuy() const;
  inline void set_hasbuy(bool value);

  // optional uint32 remainTime = 3;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // optional uint32 buyCount = 4;
  inline bool has_buycount() const;
  inline void clear_buycount();
  static const int kBuyCountFieldNumber = 4;
  inline ::google::protobuf::uint32 buycount() const;
  inline void set_buycount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynRMPShopItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_hasbuy();
  inline void clear_has_hasbuy();
  inline void set_has_remaintime();
  inline void clear_has_remaintime();
  inline void set_has_buycount();
  inline void clear_has_buycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  bool hasbuy_;
  ::google::protobuf::uint32 remaintime_;
  ::google::protobuf::uint32 buycount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynRMPShopItem* default_instance_;
};
// -------------------------------------------------------------------

class stSynRMBShopInfo : public ::google::protobuf::Message {
 public:
  stSynRMBShopInfo();
  virtual ~stSynRMBShopInfo();

  stSynRMBShopInfo(const stSynRMBShopInfo& from);

  inline stSynRMBShopInfo& operator=(const stSynRMBShopInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRMBShopInfo& default_instance();

  void Swap(stSynRMBShopInfo* other);

  // implements Message ----------------------------------------------

  stSynRMBShopInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRMBShopInfo& from);
  void MergeFrom(const stSynRMBShopInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynRMBShopInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynRMBShopInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynRMBShopInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynRMBShopInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynRMBShopInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynRMBShopInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynRMBShopInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynRMBShopInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynRMBShopInfo_ProtoModID_Parse(name, value);
  }

  typedef stSynRMBShopInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynRMBShopInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynRMBShopInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynRMBShopInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynRMBShopInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynRMBShopInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynRMBShopInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynRMBShopInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynRMBShopInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynRMPShopItem items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Role::stSynRMPShopItem& items(int index) const;
  inline ::Role::stSynRMPShopItem* mutable_items(int index);
  inline ::Role::stSynRMPShopItem* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Role.stSynRMBShopInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynRMBShopInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSynOne2OnePVPItem : public ::google::protobuf::Message {
 public:
  stSynOne2OnePVPItem();
  virtual ~stSynOne2OnePVPItem();

  stSynOne2OnePVPItem(const stSynOne2OnePVPItem& from);

  inline stSynOne2OnePVPItem& operator=(const stSynOne2OnePVPItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynOne2OnePVPItem& default_instance();

  void Swap(stSynOne2OnePVPItem* other);

  // implements Message ----------------------------------------------

  stSynOne2OnePVPItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynOne2OnePVPItem& from);
  void MergeFrom(const stSynOne2OnePVPItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 3;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 3;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // optional uint32 charid = 5;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 5;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynOne2OnePVPItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 score_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynOne2OnePVPItem* default_instance_;
};
// -------------------------------------------------------------------

class stOne2OnePVPResult : public ::google::protobuf::Message {
 public:
  stOne2OnePVPResult();
  virtual ~stOne2OnePVPResult();

  stOne2OnePVPResult(const stOne2OnePVPResult& from);

  inline stOne2OnePVPResult& operator=(const stOne2OnePVPResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOne2OnePVPResult& default_instance();

  void Swap(stOne2OnePVPResult* other);

  // implements Message ----------------------------------------------

  stOne2OnePVPResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOne2OnePVPResult& from);
  void MergeFrom(const stOne2OnePVPResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOne2OnePVPResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOne2OnePVPResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOne2OnePVPResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOne2OnePVPResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOne2OnePVPResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOne2OnePVPResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOne2OnePVPResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOne2OnePVPResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOne2OnePVPResult_ProtoModID_Parse(name, value);
  }

  typedef stOne2OnePVPResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOne2OnePVPResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOne2OnePVPResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOne2OnePVPResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOne2OnePVPResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOne2OnePVPResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOne2OnePVPResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOne2OnePVPResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOne2OnePVPResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSynOne2OnePVPItem winer = 1;
  inline bool has_winer() const;
  inline void clear_winer();
  static const int kWinerFieldNumber = 1;
  inline const ::Role::stSynOne2OnePVPItem& winer() const;
  inline ::Role::stSynOne2OnePVPItem* mutable_winer();
  inline ::Role::stSynOne2OnePVPItem* release_winer();
  inline void set_allocated_winer(::Role::stSynOne2OnePVPItem* winer);

  // optional .Role.stSynOne2OnePVPItem loser = 2;
  inline bool has_loser() const;
  inline void clear_loser();
  static const int kLoserFieldNumber = 2;
  inline const ::Role::stSynOne2OnePVPItem& loser() const;
  inline ::Role::stSynOne2OnePVPItem* mutable_loser();
  inline ::Role::stSynOne2OnePVPItem* release_loser();
  inline void set_allocated_loser(::Role::stSynOne2OnePVPItem* loser);

  // optional uint32 addScore = 3;
  inline bool has_addscore() const;
  inline void clear_addscore();
  static const int kAddScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 addscore() const;
  inline void set_addscore(::google::protobuf::uint32 value);

  // optional uint32 delScore = 4;
  inline bool has_delscore() const;
  inline void clear_delscore();
  static const int kDelScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 delscore() const;
  inline void set_delscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stOne2OnePVPResult)
 private:
  inline void set_has_winer();
  inline void clear_has_winer();
  inline void set_has_loser();
  inline void clear_has_loser();
  inline void set_has_addscore();
  inline void clear_has_addscore();
  inline void set_has_delscore();
  inline void clear_has_delscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stSynOne2OnePVPItem* winer_;
  ::Role::stSynOne2OnePVPItem* loser_;
  ::google::protobuf::uint32 addscore_;
  ::google::protobuf::uint32 delscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stOne2OnePVPResult* default_instance_;
};
// -------------------------------------------------------------------

class stPrivateChatNotUser : public ::google::protobuf::Message {
 public:
  stPrivateChatNotUser();
  virtual ~stPrivateChatNotUser();

  stPrivateChatNotUser(const stPrivateChatNotUser& from);

  inline stPrivateChatNotUser& operator=(const stPrivateChatNotUser& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stPrivateChatNotUser& default_instance();

  void Swap(stPrivateChatNotUser* other);

  // implements Message ----------------------------------------------

  stPrivateChatNotUser* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stPrivateChatNotUser& from);
  void MergeFrom(const stPrivateChatNotUser& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stPrivateChatNotUser_ProtoModID ProtoModID;
  static const ProtoModID ModID = stPrivateChatNotUser_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stPrivateChatNotUser_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stPrivateChatNotUser_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stPrivateChatNotUser_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stPrivateChatNotUser_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stPrivateChatNotUser_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stPrivateChatNotUser_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stPrivateChatNotUser_ProtoModID_Parse(name, value);
  }

  typedef stPrivateChatNotUser_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stPrivateChatNotUser_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stPrivateChatNotUser_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stPrivateChatNotUser_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stPrivateChatNotUser_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stPrivateChatNotUser_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stPrivateChatNotUser_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stPrivateChatNotUser_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stPrivateChatNotUser_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string destName = 1;
  inline bool has_destname() const;
  inline void clear_destname();
  static const int kDestNameFieldNumber = 1;
  inline const ::std::string& destname() const;
  inline void set_destname(const ::std::string& value);
  inline void set_destname(const char* value);
  inline void set_destname(const char* value, size_t size);
  inline ::std::string* mutable_destname();
  inline ::std::string* release_destname();
  inline void set_allocated_destname(::std::string* destname);

  // @@protoc_insertion_point(class_scope:Role.stPrivateChatNotUser)
 private:
  inline void set_has_destname();
  inline void clear_has_destname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* destname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stPrivateChatNotUser* default_instance_;
};
// -------------------------------------------------------------------

class stReqRecoverRemainTime : public ::google::protobuf::Message {
 public:
  stReqRecoverRemainTime();
  virtual ~stReqRecoverRemainTime();

  stReqRecoverRemainTime(const stReqRecoverRemainTime& from);

  inline stReqRecoverRemainTime& operator=(const stReqRecoverRemainTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRecoverRemainTime& default_instance();

  void Swap(stReqRecoverRemainTime* other);

  // implements Message ----------------------------------------------

  stReqRecoverRemainTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRecoverRemainTime& from);
  void MergeFrom(const stReqRecoverRemainTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRecoverRemainTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRecoverRemainTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRecoverRemainTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRecoverRemainTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRecoverRemainTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRecoverRemainTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRecoverRemainTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRecoverRemainTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRecoverRemainTime_ProtoModID_Parse(name, value);
  }

  typedef stReqRecoverRemainTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRecoverRemainTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRecoverRemainTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRecoverRemainTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRecoverRemainTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRecoverRemainTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRecoverRemainTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRecoverRemainTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRecoverRemainTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRecoverRemainTime)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRecoverRemainTime* default_instance_;
};
// -------------------------------------------------------------------

class stSPAndLilianRecoverRemainTime : public ::google::protobuf::Message {
 public:
  stSPAndLilianRecoverRemainTime();
  virtual ~stSPAndLilianRecoverRemainTime();

  stSPAndLilianRecoverRemainTime(const stSPAndLilianRecoverRemainTime& from);

  inline stSPAndLilianRecoverRemainTime& operator=(const stSPAndLilianRecoverRemainTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSPAndLilianRecoverRemainTime& default_instance();

  void Swap(stSPAndLilianRecoverRemainTime* other);

  // implements Message ----------------------------------------------

  stSPAndLilianRecoverRemainTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSPAndLilianRecoverRemainTime& from);
  void MergeFrom(const stSPAndLilianRecoverRemainTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSPAndLilianRecoverRemainTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSPAndLilianRecoverRemainTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSPAndLilianRecoverRemainTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSPAndLilianRecoverRemainTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSPAndLilianRecoverRemainTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSPAndLilianRecoverRemainTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSPAndLilianRecoverRemainTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSPAndLilianRecoverRemainTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSPAndLilianRecoverRemainTime_ProtoModID_Parse(name, value);
  }

  typedef stSPAndLilianRecoverRemainTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSPAndLilianRecoverRemainTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSPAndLilianRecoverRemainTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSPAndLilianRecoverRemainTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSPAndLilianRecoverRemainTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSPAndLilianRecoverRemainTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSPAndLilianRecoverRemainTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSPAndLilianRecoverRemainTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSPAndLilianRecoverRemainTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 spRemainTime = 1;
  inline bool has_spremaintime() const;
  inline void clear_spremaintime();
  static const int kSpRemainTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 spremaintime() const;
  inline void set_spremaintime(::google::protobuf::uint32 value);

  // optional uint32 lilianRemainTime = 2;
  inline bool has_lilianremaintime() const;
  inline void clear_lilianremaintime();
  static const int kLilianRemainTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 lilianremaintime() const;
  inline void set_lilianremaintime(::google::protobuf::uint32 value);

  // optional uint32 trainSpRemainTime = 3;
  inline bool has_trainspremaintime() const;
  inline void clear_trainspremaintime();
  static const int kTrainSpRemainTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 trainspremaintime() const;
  inline void set_trainspremaintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSPAndLilianRecoverRemainTime)
 private:
  inline void set_has_spremaintime();
  inline void clear_has_spremaintime();
  inline void set_has_lilianremaintime();
  inline void clear_has_lilianremaintime();
  inline void set_has_trainspremaintime();
  inline void clear_has_trainspremaintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 spremaintime_;
  ::google::protobuf::uint32 lilianremaintime_;
  ::google::protobuf::uint32 trainspremaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSPAndLilianRecoverRemainTime* default_instance_;
};
// -------------------------------------------------------------------

class stSwapHeroBattlePos : public ::google::protobuf::Message {
 public:
  stSwapHeroBattlePos();
  virtual ~stSwapHeroBattlePos();

  stSwapHeroBattlePos(const stSwapHeroBattlePos& from);

  inline stSwapHeroBattlePos& operator=(const stSwapHeroBattlePos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSwapHeroBattlePos& default_instance();

  void Swap(stSwapHeroBattlePos* other);

  // implements Message ----------------------------------------------

  stSwapHeroBattlePos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSwapHeroBattlePos& from);
  void MergeFrom(const stSwapHeroBattlePos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSwapHeroBattlePos_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSwapHeroBattlePos_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSwapHeroBattlePos_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSwapHeroBattlePos_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSwapHeroBattlePos_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSwapHeroBattlePos_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSwapHeroBattlePos_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSwapHeroBattlePos_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSwapHeroBattlePos_ProtoModID_Parse(name, value);
  }

  typedef stSwapHeroBattlePos_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSwapHeroBattlePos_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSwapHeroBattlePos_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSwapHeroBattlePos_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSwapHeroBattlePos_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSwapHeroBattlePos_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSwapHeroBattlePos_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSwapHeroBattlePos_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSwapHeroBattlePos_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 srcHeroID = 1;
  inline bool has_srcheroid() const;
  inline void clear_srcheroid();
  static const int kSrcHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 srcheroid() const;
  inline void set_srcheroid(::google::protobuf::uint32 value);

  // optional uint32 srcPos = 2;
  inline bool has_srcpos() const;
  inline void clear_srcpos();
  static const int kSrcPosFieldNumber = 2;
  inline ::google::protobuf::uint32 srcpos() const;
  inline void set_srcpos(::google::protobuf::uint32 value);

  // optional uint32 destHeroID = 3;
  inline bool has_destheroid() const;
  inline void clear_destheroid();
  static const int kDestHeroIDFieldNumber = 3;
  inline ::google::protobuf::uint32 destheroid() const;
  inline void set_destheroid(::google::protobuf::uint32 value);

  // optional uint32 destPos = 4;
  inline bool has_destpos() const;
  inline void clear_destpos();
  static const int kDestPosFieldNumber = 4;
  inline ::google::protobuf::uint32 destpos() const;
  inline void set_destpos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSwapHeroBattlePos)
 private:
  inline void set_has_srcheroid();
  inline void clear_has_srcheroid();
  inline void set_has_srcpos();
  inline void clear_has_srcpos();
  inline void set_has_destheroid();
  inline void clear_has_destheroid();
  inline void set_has_destpos();
  inline void clear_has_destpos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 srcheroid_;
  ::google::protobuf::uint32 srcpos_;
  ::google::protobuf::uint32 destheroid_;
  ::google::protobuf::uint32 destpos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSwapHeroBattlePos* default_instance_;
};
// -------------------------------------------------------------------

class stSwapHeroBattlePosError : public ::google::protobuf::Message {
 public:
  stSwapHeroBattlePosError();
  virtual ~stSwapHeroBattlePosError();

  stSwapHeroBattlePosError(const stSwapHeroBattlePosError& from);

  inline stSwapHeroBattlePosError& operator=(const stSwapHeroBattlePosError& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSwapHeroBattlePosError& default_instance();

  void Swap(stSwapHeroBattlePosError* other);

  // implements Message ----------------------------------------------

  stSwapHeroBattlePosError* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSwapHeroBattlePosError& from);
  void MergeFrom(const stSwapHeroBattlePosError& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSwapHeroBattlePosError_eResult eResult;
  static const eResult eHERO_NOT_EXIST = stSwapHeroBattlePosError_eResult_eHERO_NOT_EXIST;
  static const eResult eHERO_NOT_GOOUT = stSwapHeroBattlePosError_eResult_eHERO_NOT_GOOUT;
  static inline bool eResult_IsValid(int value) {
    return stSwapHeroBattlePosError_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stSwapHeroBattlePosError_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stSwapHeroBattlePosError_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stSwapHeroBattlePosError_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stSwapHeroBattlePosError_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stSwapHeroBattlePosError_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stSwapHeroBattlePosError_eResult_Parse(name, value);
  }

  typedef stSwapHeroBattlePosError_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSwapHeroBattlePosError_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSwapHeroBattlePosError_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSwapHeroBattlePosError_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSwapHeroBattlePosError_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSwapHeroBattlePosError_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSwapHeroBattlePosError_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSwapHeroBattlePosError_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSwapHeroBattlePosError_ProtoModID_Parse(name, value);
  }

  typedef stSwapHeroBattlePosError_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSwapHeroBattlePosError_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSwapHeroBattlePosError_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSwapHeroBattlePosError_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSwapHeroBattlePosError_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSwapHeroBattlePosError_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSwapHeroBattlePosError_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSwapHeroBattlePosError_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSwapHeroBattlePosError_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSwapHeroBattlePosError.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stSwapHeroBattlePosError_eResult result() const;
  inline void set_result(::Role::stSwapHeroBattlePosError_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stSwapHeroBattlePosError)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSwapHeroBattlePosError* default_instance_;
};
// -------------------------------------------------------------------

class stSynSystemSetting : public ::google::protobuf::Message {
 public:
  stSynSystemSetting();
  virtual ~stSynSystemSetting();

  stSynSystemSetting(const stSynSystemSetting& from);

  inline stSynSystemSetting& operator=(const stSynSystemSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynSystemSetting& default_instance();

  void Swap(stSynSystemSetting* other);

  // implements Message ----------------------------------------------

  stSynSystemSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynSystemSetting& from);
  void MergeFrom(const stSynSystemSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynSystemSetting_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynSystemSetting_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynSystemSetting_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynSystemSetting_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynSystemSetting_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynSystemSetting_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynSystemSetting_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynSystemSetting_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynSystemSetting_ProtoModID_Parse(name, value);
  }

  typedef stSynSystemSetting_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynSystemSetting_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynSystemSetting_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynSystemSetting_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynSystemSetting_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynSystemSetting_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynSystemSetting_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynSystemSetting_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynSystemSetting_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 systemSetting = 1;
  inline bool has_systemsetting() const;
  inline void clear_systemsetting();
  static const int kSystemSettingFieldNumber = 1;
  inline ::google::protobuf::uint64 systemsetting() const;
  inline void set_systemsetting(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stSynSystemSetting)
 private:
  inline void set_has_systemsetting();
  inline void clear_has_systemsetting();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 systemsetting_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynSystemSetting* default_instance_;
};
// -------------------------------------------------------------------

class stReqSaveSystemSetting : public ::google::protobuf::Message {
 public:
  stReqSaveSystemSetting();
  virtual ~stReqSaveSystemSetting();

  stReqSaveSystemSetting(const stReqSaveSystemSetting& from);

  inline stReqSaveSystemSetting& operator=(const stReqSaveSystemSetting& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqSaveSystemSetting& default_instance();

  void Swap(stReqSaveSystemSetting* other);

  // implements Message ----------------------------------------------

  stReqSaveSystemSetting* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqSaveSystemSetting& from);
  void MergeFrom(const stReqSaveSystemSetting& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqSaveSystemSetting_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqSaveSystemSetting_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqSaveSystemSetting_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqSaveSystemSetting_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqSaveSystemSetting_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqSaveSystemSetting_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqSaveSystemSetting_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqSaveSystemSetting_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqSaveSystemSetting_ProtoModID_Parse(name, value);
  }

  typedef stReqSaveSystemSetting_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqSaveSystemSetting_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqSaveSystemSetting_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqSaveSystemSetting_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqSaveSystemSetting_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqSaveSystemSetting_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqSaveSystemSetting_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqSaveSystemSetting_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqSaveSystemSetting_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // optional uint64 systemSetting = 2;
  inline bool has_systemsetting() const;
  inline void clear_systemsetting();
  static const int kSystemSettingFieldNumber = 2;
  inline ::google::protobuf::uint64 systemsetting() const;
  inline void set_systemsetting(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqSaveSystemSetting)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_systemsetting();
  inline void clear_has_systemsetting();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 systemsetting_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqSaveSystemSetting* default_instance_;
};
// -------------------------------------------------------------------

class stUnlockRareSkill : public ::google::protobuf::Message {
 public:
  stUnlockRareSkill();
  virtual ~stUnlockRareSkill();

  stUnlockRareSkill(const stUnlockRareSkill& from);

  inline stUnlockRareSkill& operator=(const stUnlockRareSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUnlockRareSkill& default_instance();

  void Swap(stUnlockRareSkill* other);

  // implements Message ----------------------------------------------

  stUnlockRareSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUnlockRareSkill& from);
  void MergeFrom(const stUnlockRareSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUnlockRareSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUnlockRareSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUnlockRareSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUnlockRareSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUnlockRareSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUnlockRareSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUnlockRareSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUnlockRareSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUnlockRareSkill_ProtoModID_Parse(name, value);
  }

  typedef stUnlockRareSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUnlockRareSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUnlockRareSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUnlockRareSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUnlockRareSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUnlockRareSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUnlockRareSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUnlockRareSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUnlockRareSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stUnlockRareSkill)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUnlockRareSkill* default_instance_;
};
// -------------------------------------------------------------------

class stUnlockRareSkillResult : public ::google::protobuf::Message {
 public:
  stUnlockRareSkillResult();
  virtual ~stUnlockRareSkillResult();

  stUnlockRareSkillResult(const stUnlockRareSkillResult& from);

  inline stUnlockRareSkillResult& operator=(const stUnlockRareSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUnlockRareSkillResult& default_instance();

  void Swap(stUnlockRareSkillResult* other);

  // implements Message ----------------------------------------------

  stUnlockRareSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUnlockRareSkillResult& from);
  void MergeFrom(const stUnlockRareSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUnlockRareSkillResult_eResult eResult;
  static const eResult eSuccess = stUnlockRareSkillResult_eResult_eSuccess;
  static const eResult eHas_No_GoldCoin = stUnlockRareSkillResult_eResult_eHas_No_GoldCoin;
  static const eResult eLevel_Limit = stUnlockRareSkillResult_eResult_eLevel_Limit;
  static const eResult eHero_Not_Exist = stUnlockRareSkillResult_eResult_eHero_Not_Exist;
  static const eResult eInner_Error = stUnlockRareSkillResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stUnlockRareSkillResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stUnlockRareSkillResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stUnlockRareSkillResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stUnlockRareSkillResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stUnlockRareSkillResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stUnlockRareSkillResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stUnlockRareSkillResult_eResult_Parse(name, value);
  }

  typedef stUnlockRareSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUnlockRareSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUnlockRareSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUnlockRareSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUnlockRareSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUnlockRareSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUnlockRareSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUnlockRareSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUnlockRareSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stUnlockRareSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUnlockRareSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUnlockRareSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUnlockRareSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUnlockRareSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUnlockRareSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUnlockRareSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUnlockRareSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUnlockRareSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 skillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional .Role.stUnlockRareSkillResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stUnlockRareSkillResult_eResult result() const;
  inline void set_result(::Role::stUnlockRareSkillResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stUnlockRareSkillResult)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 skillid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUnlockRareSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stUpgradeRareSkill : public ::google::protobuf::Message {
 public:
  stUpgradeRareSkill();
  virtual ~stUpgradeRareSkill();

  stUpgradeRareSkill(const stUpgradeRareSkill& from);

  inline stUpgradeRareSkill& operator=(const stUpgradeRareSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUpgradeRareSkill& default_instance();

  void Swap(stUpgradeRareSkill* other);

  // implements Message ----------------------------------------------

  stUpgradeRareSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUpgradeRareSkill& from);
  void MergeFrom(const stUpgradeRareSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUpgradeRareSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUpgradeRareSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUpgradeRareSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUpgradeRareSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUpgradeRareSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUpgradeRareSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUpgradeRareSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUpgradeRareSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUpgradeRareSkill_ProtoModID_Parse(name, value);
  }

  typedef stUpgradeRareSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUpgradeRareSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUpgradeRareSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUpgradeRareSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUpgradeRareSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUpgradeRareSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUpgradeRareSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUpgradeRareSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUpgradeRareSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 skillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stUpgradeRareSkill)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUpgradeRareSkill* default_instance_;
};
// -------------------------------------------------------------------

class stUpgradeRareSkillResult : public ::google::protobuf::Message {
 public:
  stUpgradeRareSkillResult();
  virtual ~stUpgradeRareSkillResult();

  stUpgradeRareSkillResult(const stUpgradeRareSkillResult& from);

  inline stUpgradeRareSkillResult& operator=(const stUpgradeRareSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUpgradeRareSkillResult& default_instance();

  void Swap(stUpgradeRareSkillResult* other);

  // implements Message ----------------------------------------------

  stUpgradeRareSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUpgradeRareSkillResult& from);
  void MergeFrom(const stUpgradeRareSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUpgradeRareSkillResult_eResult eResult;
  static const eResult eSuccess = stUpgradeRareSkillResult_eResult_eSuccess;
  static const eResult eHas_No_GoldCoin = stUpgradeRareSkillResult_eResult_eHas_No_GoldCoin;
  static const eResult eLevel_Limit = stUpgradeRareSkillResult_eResult_eLevel_Limit;
  static const eResult eHero_Not_Exist = stUpgradeRareSkillResult_eResult_eHero_Not_Exist;
  static const eResult eInner_Error = stUpgradeRareSkillResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stUpgradeRareSkillResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stUpgradeRareSkillResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stUpgradeRareSkillResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stUpgradeRareSkillResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stUpgradeRareSkillResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stUpgradeRareSkillResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stUpgradeRareSkillResult_eResult_Parse(name, value);
  }

  typedef stUpgradeRareSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUpgradeRareSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUpgradeRareSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUpgradeRareSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUpgradeRareSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUpgradeRareSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUpgradeRareSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUpgradeRareSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUpgradeRareSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stUpgradeRareSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUpgradeRareSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUpgradeRareSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUpgradeRareSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUpgradeRareSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUpgradeRareSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUpgradeRareSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUpgradeRareSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUpgradeRareSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 skillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional .Role.stUpgradeRareSkillResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stUpgradeRareSkillResult_eResult result() const;
  inline void set_result(::Role::stUpgradeRareSkillResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stUpgradeRareSkillResult)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 skillid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUpgradeRareSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqGiftBag : public ::google::protobuf::Message {
 public:
  stReqGiftBag();
  virtual ~stReqGiftBag();

  stReqGiftBag(const stReqGiftBag& from);

  inline stReqGiftBag& operator=(const stReqGiftBag& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGiftBag& default_instance();

  void Swap(stReqGiftBag* other);

  // implements Message ----------------------------------------------

  stReqGiftBag* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGiftBag& from);
  void MergeFrom(const stReqGiftBag& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGiftBag_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGiftBag_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGiftBag_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGiftBag_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGiftBag_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGiftBag_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGiftBag_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGiftBag_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGiftBag_ProtoModID_Parse(name, value);
  }

  typedef stReqGiftBag_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGiftBag_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGiftBag_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGiftBag_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGiftBag_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGiftBag_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGiftBag_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGiftBag_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGiftBag_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline const ::std::string& code() const;
  inline void set_code(const ::std::string& value);
  inline void set_code(const char* value);
  inline void set_code(const char* value, size_t size);
  inline ::std::string* mutable_code();
  inline ::std::string* release_code();
  inline void set_allocated_code(::std::string* code);

  // @@protoc_insertion_point(class_scope:Role.stReqGiftBag)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqGiftBag* default_instance_;
};
// -------------------------------------------------------------------

class stGotGiftBagResult : public ::google::protobuf::Message {
 public:
  stGotGiftBagResult();
  virtual ~stGotGiftBagResult();

  stGotGiftBagResult(const stGotGiftBagResult& from);

  inline stGotGiftBagResult& operator=(const stGotGiftBagResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGotGiftBagResult& default_instance();

  void Swap(stGotGiftBagResult* other);

  // implements Message ----------------------------------------------

  stGotGiftBagResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGotGiftBagResult& from);
  void MergeFrom(const stGotGiftBagResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGotGiftBagResult_eResult eResult;
  static const eResult eSuccess = stGotGiftBagResult_eResult_eSuccess;
  static const eResult eInnerError = stGotGiftBagResult_eResult_eInnerError;
  static const eResult eTime_Expire = stGotGiftBagResult_eResult_eTime_Expire;
  static const eResult eCode_Invalid = stGotGiftBagResult_eResult_eCode_Invalid;
  static const eResult eCode_Not_Exist = stGotGiftBagResult_eResult_eCode_Not_Exist;
  static const eResult eCode_Error_Other = stGotGiftBagResult_eResult_eCode_Error_Other;
  static const eResult eCode_Used_Not_Other = stGotGiftBagResult_eResult_eCode_Used_Not_Other;
  static inline bool eResult_IsValid(int value) {
    return stGotGiftBagResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGotGiftBagResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGotGiftBagResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGotGiftBagResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGotGiftBagResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGotGiftBagResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGotGiftBagResult_eResult_Parse(name, value);
  }

  typedef stGotGiftBagResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGotGiftBagResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGotGiftBagResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGotGiftBagResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGotGiftBagResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGotGiftBagResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGotGiftBagResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGotGiftBagResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGotGiftBagResult_ProtoModID_Parse(name, value);
  }

  typedef stGotGiftBagResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGotGiftBagResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGotGiftBagResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGotGiftBagResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGotGiftBagResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGotGiftBagResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGotGiftBagResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGotGiftBagResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGotGiftBagResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stGotGiftBagResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stGotGiftBagResult_eResult result() const;
  inline void set_result(::Role::stGotGiftBagResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stGotGiftBagResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stGotGiftBagResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynRealTimeItem : public ::google::protobuf::Message {
 public:
  stSynRealTimeItem();
  virtual ~stSynRealTimeItem();

  stSynRealTimeItem(const stSynRealTimeItem& from);

  inline stSynRealTimeItem& operator=(const stSynRealTimeItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRealTimeItem& default_instance();

  void Swap(stSynRealTimeItem* other);

  // implements Message ----------------------------------------------

  stSynRealTimeItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRealTimeItem& from);
  void MergeFrom(const stSynRealTimeItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 3;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 3;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 addHonour = 4;
  inline bool has_addhonour() const;
  inline void clear_addhonour();
  static const int kAddHonourFieldNumber = 4;
  inline ::google::protobuf::uint32 addhonour() const;
  inline void set_addhonour(::google::protobuf::uint32 value);

  // optional uint32 killNum = 5;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 5;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional bool isDie = 6;
  inline bool has_isdie() const;
  inline void clear_isdie();
  static const int kIsDieFieldNumber = 6;
  inline bool isdie() const;
  inline void set_isdie(bool value);

  // optional uint32 charid = 7;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 7;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynRealTimeItem)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_addhonour();
  inline void clear_has_addhonour();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_isdie();
  inline void clear_has_isdie();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rolename_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 addhonour_;
  ::google::protobuf::uint32 killnum_;
  bool isdie_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynRealTimeItem* default_instance_;
};
// -------------------------------------------------------------------

class stRealTimePKResult : public ::google::protobuf::Message {
 public:
  stRealTimePKResult();
  virtual ~stRealTimePKResult();

  stRealTimePKResult(const stRealTimePKResult& from);

  inline stRealTimePKResult& operator=(const stRealTimePKResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRealTimePKResult& default_instance();

  void Swap(stRealTimePKResult* other);

  // implements Message ----------------------------------------------

  stRealTimePKResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRealTimePKResult& from);
  void MergeFrom(const stRealTimePKResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRealTimePKResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRealTimePKResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRealTimePKResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRealTimePKResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRealTimePKResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRealTimePKResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRealTimePKResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRealTimePKResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRealTimePKResult_ProtoModID_Parse(name, value);
  }

  typedef stRealTimePKResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRealTimePKResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRealTimePKResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRealTimePKResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRealTimePKResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRealTimePKResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRealTimePKResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRealTimePKResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRealTimePKResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynRealTimeItem sideA = 1;
  inline int sidea_size() const;
  inline void clear_sidea();
  static const int kSideAFieldNumber = 1;
  inline const ::Role::stSynRealTimeItem& sidea(int index) const;
  inline ::Role::stSynRealTimeItem* mutable_sidea(int index);
  inline ::Role::stSynRealTimeItem* add_sidea();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >&
      sidea() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >*
      mutable_sidea();

  // repeated .Role.stSynRealTimeItem sideB = 2;
  inline int sideb_size() const;
  inline void clear_sideb();
  static const int kSideBFieldNumber = 2;
  inline const ::Role::stSynRealTimeItem& sideb(int index) const;
  inline ::Role::stSynRealTimeItem* mutable_sideb(int index);
  inline ::Role::stSynRealTimeItem* add_sideb();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >&
      sideb() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >*
      mutable_sideb();

  // @@protoc_insertion_point(class_scope:Role.stRealTimePKResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem > sidea_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem > sideb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRealTimePKResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqFiveRaiseEquip : public ::google::protobuf::Message {
 public:
  stReqFiveRaiseEquip();
  virtual ~stReqFiveRaiseEquip();

  stReqFiveRaiseEquip(const stReqFiveRaiseEquip& from);

  inline stReqFiveRaiseEquip& operator=(const stReqFiveRaiseEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqFiveRaiseEquip& default_instance();

  void Swap(stReqFiveRaiseEquip* other);

  // implements Message ----------------------------------------------

  stReqFiveRaiseEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqFiveRaiseEquip& from);
  void MergeFrom(const stReqFiveRaiseEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqFiveRaiseEquip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqFiveRaiseEquip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqFiveRaiseEquip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqFiveRaiseEquip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqFiveRaiseEquip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqFiveRaiseEquip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqFiveRaiseEquip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqFiveRaiseEquip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqFiveRaiseEquip_ProtoModID_Parse(name, value);
  }

  typedef stReqFiveRaiseEquip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqFiveRaiseEquip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqFiveRaiseEquip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqFiveRaiseEquip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqFiveRaiseEquip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqFiveRaiseEquip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqFiveRaiseEquip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqFiveRaiseEquip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqFiveRaiseEquip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 toLv = 3;
  inline bool has_tolv() const;
  inline void clear_tolv();
  static const int kToLvFieldNumber = 3;
  inline ::google::protobuf::uint32 tolv() const;
  inline void set_tolv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqFiveRaiseEquip)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_tolv();
  inline void clear_has_tolv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 tolv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqFiveRaiseEquip* default_instance_;
};
// -------------------------------------------------------------------

class stFiveRaiseEquipResult : public ::google::protobuf::Message {
 public:
  stFiveRaiseEquipResult();
  virtual ~stFiveRaiseEquipResult();

  stFiveRaiseEquipResult(const stFiveRaiseEquipResult& from);

  inline stFiveRaiseEquipResult& operator=(const stFiveRaiseEquipResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stFiveRaiseEquipResult& default_instance();

  void Swap(stFiveRaiseEquipResult* other);

  // implements Message ----------------------------------------------

  stFiveRaiseEquipResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stFiveRaiseEquipResult& from);
  void MergeFrom(const stFiveRaiseEquipResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stFiveRaiseEquipResult_eResult eResult;
  static const eResult eSUCCESS = stFiveRaiseEquipResult_eResult_eSUCCESS;
  static const eResult eINNER_ERROR = stFiveRaiseEquipResult_eResult_eINNER_ERROR;
  static const eResult eROLE_LV_LIMIT = stFiveRaiseEquipResult_eResult_eROLE_LV_LIMIT;
  static const eResult eYUNTIE_NOT_ENOUGH = stFiveRaiseEquipResult_eResult_eYUNTIE_NOT_ENOUGH;
  static const eResult eMONEY_NOT_ENOUGH = stFiveRaiseEquipResult_eResult_eMONEY_NOT_ENOUGH;
  static inline bool eResult_IsValid(int value) {
    return stFiveRaiseEquipResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stFiveRaiseEquipResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stFiveRaiseEquipResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stFiveRaiseEquipResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stFiveRaiseEquipResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stFiveRaiseEquipResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stFiveRaiseEquipResult_eResult_Parse(name, value);
  }

  typedef stFiveRaiseEquipResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stFiveRaiseEquipResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stFiveRaiseEquipResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stFiveRaiseEquipResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stFiveRaiseEquipResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stFiveRaiseEquipResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stFiveRaiseEquipResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stFiveRaiseEquipResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stFiveRaiseEquipResult_ProtoModID_Parse(name, value);
  }

  typedef stFiveRaiseEquipResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stFiveRaiseEquipResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stFiveRaiseEquipResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stFiveRaiseEquipResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stFiveRaiseEquipResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stFiveRaiseEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stFiveRaiseEquipResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stFiveRaiseEquipResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stFiveRaiseEquipResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stFiveRaiseEquipResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stFiveRaiseEquipResult_eResult result() const;
  inline void set_result(::Role::stFiveRaiseEquipResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stFiveRaiseEquipResult)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stFiveRaiseEquipResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynBattleProp : public ::google::protobuf::Message {
 public:
  stSynBattleProp();
  virtual ~stSynBattleProp();

  stSynBattleProp(const stSynBattleProp& from);

  inline stSynBattleProp& operator=(const stSynBattleProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynBattleProp& default_instance();

  void Swap(stSynBattleProp* other);

  // implements Message ----------------------------------------------

  stSynBattleProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynBattleProp& from);
  void MergeFrom(const stSynBattleProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynBattleProp_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynBattleProp_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynBattleProp_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynBattleProp_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynBattleProp_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynBattleProp_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynBattleProp_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynBattleProp_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynBattleProp_ProtoModID_Parse(name, value);
  }

  typedef stSynBattleProp_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynBattleProp_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynBattleProp_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynBattleProp_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynBattleProp_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynBattleProp_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynBattleProp_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynBattleProp_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynBattleProp_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 battlePower = 1;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 1;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // repeated .Role.stBattleProp battleProp = 2;
  inline int battleprop_size() const;
  inline void clear_battleprop();
  static const int kBattlePropFieldNumber = 2;
  inline const ::Role::stBattleProp& battleprop(int index) const;
  inline ::Role::stBattleProp* mutable_battleprop(int index);
  inline ::Role::stBattleProp* add_battleprop();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
      battleprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
      mutable_battleprop();

  // @@protoc_insertion_point(class_scope:Role.stSynBattleProp)
 private:
  inline void set_has_battlepower();
  inline void clear_has_battlepower();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp > battleprop_;
  ::google::protobuf::uint32 battlepower_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynBattleProp* default_instance_;
};
// -------------------------------------------------------------------

class stSynTeamCopyMapNum : public ::google::protobuf::Message {
 public:
  stSynTeamCopyMapNum();
  virtual ~stSynTeamCopyMapNum();

  stSynTeamCopyMapNum(const stSynTeamCopyMapNum& from);

  inline stSynTeamCopyMapNum& operator=(const stSynTeamCopyMapNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynTeamCopyMapNum& default_instance();

  void Swap(stSynTeamCopyMapNum* other);

  // implements Message ----------------------------------------------

  stSynTeamCopyMapNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynTeamCopyMapNum& from);
  void MergeFrom(const stSynTeamCopyMapNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynTeamCopyMapNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynTeamCopyMapNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynTeamCopyMapNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynTeamCopyMapNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynTeamCopyMapNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynTeamCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynTeamCopyMapNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynTeamCopyMapNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynTeamCopyMapNum_ProtoModID_Parse(name, value);
  }

  typedef stSynTeamCopyMapNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynTeamCopyMapNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynTeamCopyMapNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynTeamCopyMapNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynTeamCopyMapNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynTeamCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynTeamCopyMapNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynTeamCopyMapNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynTeamCopyMapNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynTeamCopyMapNum)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynTeamCopyMapNum* default_instance_;
};
// -------------------------------------------------------------------

class stSynRealTimePKNum : public ::google::protobuf::Message {
 public:
  stSynRealTimePKNum();
  virtual ~stSynRealTimePKNum();

  stSynRealTimePKNum(const stSynRealTimePKNum& from);

  inline stSynRealTimePKNum& operator=(const stSynRealTimePKNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRealTimePKNum& default_instance();

  void Swap(stSynRealTimePKNum* other);

  // implements Message ----------------------------------------------

  stSynRealTimePKNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRealTimePKNum& from);
  void MergeFrom(const stSynRealTimePKNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynRealTimePKNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynRealTimePKNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynRealTimePKNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynRealTimePKNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynRealTimePKNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynRealTimePKNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynRealTimePKNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynRealTimePKNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynRealTimePKNum_ProtoModID_Parse(name, value);
  }

  typedef stSynRealTimePKNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynRealTimePKNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynRealTimePKNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynRealTimePKNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynRealTimePKNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynRealTimePKNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynRealTimePKNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynRealTimePKNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynRealTimePKNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynRealTimePKNum)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynRealTimePKNum* default_instance_;
};
// -------------------------------------------------------------------

class stCopymapFail : public ::google::protobuf::Message {
 public:
  stCopymapFail();
  virtual ~stCopymapFail();

  stCopymapFail(const stCopymapFail& from);

  inline stCopymapFail& operator=(const stCopymapFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stCopymapFail& default_instance();

  void Swap(stCopymapFail* other);

  // implements Message ----------------------------------------------

  stCopymapFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stCopymapFail& from);
  void MergeFrom(const stCopymapFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stCopymapFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stCopymapFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stCopymapFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stCopymapFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stCopymapFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stCopymapFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stCopymapFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stCopymapFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stCopymapFail_ProtoModID_Parse(name, value);
  }

  typedef stCopymapFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stCopymapFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stCopymapFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stCopymapFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stCopymapFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stCopymapFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stCopymapFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stCopymapFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stCopymapFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 copyMapID = 1;
  inline bool has_copymapid() const;
  inline void clear_copymapid();
  static const int kCopyMapIDFieldNumber = 1;
  inline ::google::protobuf::uint32 copymapid() const;
  inline void set_copymapid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stCopymapFail)
 private:
  inline void set_has_copymapid();
  inline void clear_has_copymapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 copymapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stCopymapFail* default_instance_;
};
// -------------------------------------------------------------------

class stReqHero10TimeStudySkill : public ::google::protobuf::Message {
 public:
  stReqHero10TimeStudySkill();
  virtual ~stReqHero10TimeStudySkill();

  stReqHero10TimeStudySkill(const stReqHero10TimeStudySkill& from);

  inline stReqHero10TimeStudySkill& operator=(const stReqHero10TimeStudySkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqHero10TimeStudySkill& default_instance();

  void Swap(stReqHero10TimeStudySkill* other);

  // implements Message ----------------------------------------------

  stReqHero10TimeStudySkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqHero10TimeStudySkill& from);
  void MergeFrom(const stReqHero10TimeStudySkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqHero10TimeStudySkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqHero10TimeStudySkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqHero10TimeStudySkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqHero10TimeStudySkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqHero10TimeStudySkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqHero10TimeStudySkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqHero10TimeStudySkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqHero10TimeStudySkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqHero10TimeStudySkill_ProtoModID_Parse(name, value);
  }

  typedef stReqHero10TimeStudySkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqHero10TimeStudySkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqHero10TimeStudySkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqHero10TimeStudySkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqHero10TimeStudySkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqHero10TimeStudySkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqHero10TimeStudySkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqHero10TimeStudySkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqHero10TimeStudySkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqHero10TimeStudySkill)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqHero10TimeStudySkill* default_instance_;
};
// -------------------------------------------------------------------

class stHero10TimesStudySkillResult : public ::google::protobuf::Message {
 public:
  stHero10TimesStudySkillResult();
  virtual ~stHero10TimesStudySkillResult();

  stHero10TimesStudySkillResult(const stHero10TimesStudySkillResult& from);

  inline stHero10TimesStudySkillResult& operator=(const stHero10TimesStudySkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHero10TimesStudySkillResult& default_instance();

  void Swap(stHero10TimesStudySkillResult* other);

  // implements Message ----------------------------------------------

  stHero10TimesStudySkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHero10TimesStudySkillResult& from);
  void MergeFrom(const stHero10TimesStudySkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHero10TimesStudySkillResult_eResult eResult;
  static const eResult eSuccess = stHero10TimesStudySkillResult_eResult_eSuccess;
  static const eResult eHero_Not_Exist = stHero10TimesStudySkillResult_eResult_eHero_Not_Exist;
  static const eResult eInner_Error = stHero10TimesStudySkillResult_eResult_eInner_Error;
  static const eResult eNot_Enough_Diamond = stHero10TimesStudySkillResult_eResult_eNot_Enough_Diamond;
  static const eResult eNot_Enough_Item = stHero10TimesStudySkillResult_eResult_eNot_Enough_Item;
  static const eResult eUse_Diamond_Num_Not_Enough = stHero10TimesStudySkillResult_eResult_eUse_Diamond_Num_Not_Enough;
  static const eResult eHas_VipRight = stHero10TimesStudySkillResult_eResult_eHas_VipRight;
  static inline bool eResult_IsValid(int value) {
    return stHero10TimesStudySkillResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stHero10TimesStudySkillResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stHero10TimesStudySkillResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stHero10TimesStudySkillResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stHero10TimesStudySkillResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stHero10TimesStudySkillResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stHero10TimesStudySkillResult_eResult_Parse(name, value);
  }

  typedef stHero10TimesStudySkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHero10TimesStudySkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHero10TimesStudySkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHero10TimesStudySkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHero10TimesStudySkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHero10TimesStudySkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHero10TimesStudySkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHero10TimesStudySkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHero10TimesStudySkillResult_ProtoModID_Parse(name, value);
  }

  typedef stHero10TimesStudySkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHero10TimesStudySkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHero10TimesStudySkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHero10TimesStudySkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHero10TimesStudySkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHero10TimesStudySkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHero10TimesStudySkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHero10TimesStudySkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHero10TimesStudySkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stHero10TimesStudySkillResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stHero10TimesStudySkillResult_eResult result() const;
  inline void set_result(::Role::stHero10TimesStudySkillResult_eResult value);

  // optional uint32 heroID = 2;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 2;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint32 skillID = 3;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 3;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 useDiamondNum = 4;
  inline bool has_usediamondnum() const;
  inline void clear_usediamondnum();
  static const int kUseDiamondNumFieldNumber = 4;
  inline ::google::protobuf::uint32 usediamondnum() const;
  inline void set_usediamondnum(::google::protobuf::uint32 value);

  // optional uint32 addSkillExp = 5;
  inline bool has_addskillexp() const;
  inline void clear_addskillexp();
  static const int kAddSkillExpFieldNumber = 5;
  inline ::google::protobuf::uint32 addskillexp() const;
  inline void set_addskillexp(::google::protobuf::uint32 value);

  // optional uint32 studySkillNum = 6;
  inline bool has_studyskillnum() const;
  inline void clear_studyskillnum();
  static const int kStudySkillNumFieldNumber = 6;
  inline ::google::protobuf::uint32 studyskillnum() const;
  inline void set_studyskillnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stHero10TimesStudySkillResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_usediamondnum();
  inline void clear_has_usediamondnum();
  inline void set_has_addskillexp();
  inline void clear_has_addskillexp();
  inline void set_has_studyskillnum();
  inline void clear_has_studyskillnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 usediamondnum_;
  ::google::protobuf::uint32 addskillexp_;
  ::google::protobuf::uint32 studyskillnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stHero10TimesStudySkillResult* default_instance_;
};
// -------------------------------------------------------------------

class st10TimesGetEquipSkill : public ::google::protobuf::Message {
 public:
  st10TimesGetEquipSkill();
  virtual ~st10TimesGetEquipSkill();

  st10TimesGetEquipSkill(const st10TimesGetEquipSkill& from);

  inline st10TimesGetEquipSkill& operator=(const st10TimesGetEquipSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const st10TimesGetEquipSkill& default_instance();

  void Swap(st10TimesGetEquipSkill* other);

  // implements Message ----------------------------------------------

  st10TimesGetEquipSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const st10TimesGetEquipSkill& from);
  void MergeFrom(const st10TimesGetEquipSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef st10TimesGetEquipSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = st10TimesGetEquipSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return st10TimesGetEquipSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    st10TimesGetEquipSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    st10TimesGetEquipSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    st10TimesGetEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return st10TimesGetEquipSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return st10TimesGetEquipSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return st10TimesGetEquipSkill_ProtoModID_Parse(name, value);
  }

  typedef st10TimesGetEquipSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = st10TimesGetEquipSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return st10TimesGetEquipSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    st10TimesGetEquipSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    st10TimesGetEquipSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    st10TimesGetEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return st10TimesGetEquipSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return st10TimesGetEquipSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return st10TimesGetEquipSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.st10TimesGetEquipSkill)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static st10TimesGetEquipSkill* default_instance_;
};
// -------------------------------------------------------------------

class st10TimesGetEquipSkillResult : public ::google::protobuf::Message {
 public:
  st10TimesGetEquipSkillResult();
  virtual ~st10TimesGetEquipSkillResult();

  st10TimesGetEquipSkillResult(const st10TimesGetEquipSkillResult& from);

  inline st10TimesGetEquipSkillResult& operator=(const st10TimesGetEquipSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const st10TimesGetEquipSkillResult& default_instance();

  void Swap(st10TimesGetEquipSkillResult* other);

  // implements Message ----------------------------------------------

  st10TimesGetEquipSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const st10TimesGetEquipSkillResult& from);
  void MergeFrom(const st10TimesGetEquipSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef st10TimesGetEquipSkillResult_eResult eResult;
  static const eResult eSuccess = st10TimesGetEquipSkillResult_eResult_eSuccess;
  static const eResult eEquip_Not_Exist = st10TimesGetEquipSkillResult_eResult_eEquip_Not_Exist;
  static const eResult eTime_Use_Out = st10TimesGetEquipSkillResult_eResult_eTime_Use_Out;
  static const eResult eItem_Not_Enough = st10TimesGetEquipSkillResult_eResult_eItem_Not_Enough;
  static const eResult eDiamond_Not_Enough = st10TimesGetEquipSkillResult_eResult_eDiamond_Not_Enough;
  static const eResult eHas_Exist_Skill = st10TimesGetEquipSkillResult_eResult_eHas_Exist_Skill;
  static const eResult eInner_Error = st10TimesGetEquipSkillResult_eResult_eInner_Error;
  static const eResult eHas_No_VipRight = st10TimesGetEquipSkillResult_eResult_eHas_No_VipRight;
  static inline bool eResult_IsValid(int value) {
    return st10TimesGetEquipSkillResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    st10TimesGetEquipSkillResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    st10TimesGetEquipSkillResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    st10TimesGetEquipSkillResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return st10TimesGetEquipSkillResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return st10TimesGetEquipSkillResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return st10TimesGetEquipSkillResult_eResult_Parse(name, value);
  }

  typedef st10TimesGetEquipSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = st10TimesGetEquipSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return st10TimesGetEquipSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    st10TimesGetEquipSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    st10TimesGetEquipSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    st10TimesGetEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return st10TimesGetEquipSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return st10TimesGetEquipSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return st10TimesGetEquipSkillResult_ProtoModID_Parse(name, value);
  }

  typedef st10TimesGetEquipSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = st10TimesGetEquipSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return st10TimesGetEquipSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    st10TimesGetEquipSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    st10TimesGetEquipSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    st10TimesGetEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return st10TimesGetEquipSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return st10TimesGetEquipSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return st10TimesGetEquipSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.st10TimesGetEquipSkillResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::st10TimesGetEquipSkillResult_eResult result() const;
  inline void set_result(::Role::st10TimesGetEquipSkillResult_eResult value);

  // optional uint32 skillID = 4;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 4;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 juexingNum = 5;
  inline bool has_juexingnum() const;
  inline void clear_juexingnum();
  static const int kJuexingNumFieldNumber = 5;
  inline ::google::protobuf::uint32 juexingnum() const;
  inline void set_juexingnum(::google::protobuf::uint32 value);

  // optional uint32 getJueXingExp = 6;
  inline bool has_getjuexingexp() const;
  inline void clear_getjuexingexp();
  static const int kGetJueXingExpFieldNumber = 6;
  inline ::google::protobuf::uint32 getjuexingexp() const;
  inline void set_getjuexingexp(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.st10TimesGetEquipSkillResult)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_juexingnum();
  inline void clear_has_juexingnum();
  inline void set_has_getjuexingexp();
  inline void clear_has_getjuexingexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 juexingnum_;
  ::google::protobuf::uint32 getjuexingexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static st10TimesGetEquipSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqFirstRechargeReward : public ::google::protobuf::Message {
 public:
  stReqFirstRechargeReward();
  virtual ~stReqFirstRechargeReward();

  stReqFirstRechargeReward(const stReqFirstRechargeReward& from);

  inline stReqFirstRechargeReward& operator=(const stReqFirstRechargeReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqFirstRechargeReward& default_instance();

  void Swap(stReqFirstRechargeReward* other);

  // implements Message ----------------------------------------------

  stReqFirstRechargeReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqFirstRechargeReward& from);
  void MergeFrom(const stReqFirstRechargeReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqFirstRechargeReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqFirstRechargeReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqFirstRechargeReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqFirstRechargeReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqFirstRechargeReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqFirstRechargeReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqFirstRechargeReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqFirstRechargeReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqFirstRechargeReward_ProtoModID_Parse(name, value);
  }

  typedef stReqFirstRechargeReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqFirstRechargeReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqFirstRechargeReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqFirstRechargeReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqFirstRechargeReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqFirstRechargeReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqFirstRechargeReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqFirstRechargeReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqFirstRechargeReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqFirstRechargeReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqFirstRechargeReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetFirstRechargeReward : public ::google::protobuf::Message {
 public:
  stRetFirstRechargeReward();
  virtual ~stRetFirstRechargeReward();

  stRetFirstRechargeReward(const stRetFirstRechargeReward& from);

  inline stRetFirstRechargeReward& operator=(const stRetFirstRechargeReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetFirstRechargeReward& default_instance();

  void Swap(stRetFirstRechargeReward* other);

  // implements Message ----------------------------------------------

  stRetFirstRechargeReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetFirstRechargeReward& from);
  void MergeFrom(const stRetFirstRechargeReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetFirstRechargeReward_eResult eResult;
  static const eResult eSuccess = stRetFirstRechargeReward_eResult_eSuccess;
  static const eResult eHas_Not_Recharge = stRetFirstRechargeReward_eResult_eHas_Not_Recharge;
  static const eResult eHas_Got_Reward = stRetFirstRechargeReward_eResult_eHas_Got_Reward;
  static const eResult eBag_Full = stRetFirstRechargeReward_eResult_eBag_Full;
  static inline bool eResult_IsValid(int value) {
    return stRetFirstRechargeReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetFirstRechargeReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetFirstRechargeReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetFirstRechargeReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetFirstRechargeReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetFirstRechargeReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetFirstRechargeReward_eResult_Parse(name, value);
  }

  typedef stRetFirstRechargeReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetFirstRechargeReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetFirstRechargeReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetFirstRechargeReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetFirstRechargeReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetFirstRechargeReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetFirstRechargeReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetFirstRechargeReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetFirstRechargeReward_ProtoModID_Parse(name, value);
  }

  typedef stRetFirstRechargeReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetFirstRechargeReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetFirstRechargeReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetFirstRechargeReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetFirstRechargeReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetFirstRechargeReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetFirstRechargeReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetFirstRechargeReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetFirstRechargeReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRetFirstRechargeReward.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRetFirstRechargeReward_eResult result() const;
  inline void set_result(::Role::stRetFirstRechargeReward_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetFirstRechargeReward)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetFirstRechargeReward* default_instance_;
};
// -------------------------------------------------------------------

class stSynMobaItem : public ::google::protobuf::Message {
 public:
  stSynMobaItem();
  virtual ~stSynMobaItem();

  stSynMobaItem(const stSynMobaItem& from);

  inline stSynMobaItem& operator=(const stSynMobaItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynMobaItem& default_instance();

  void Swap(stSynMobaItem* other);

  // implements Message ----------------------------------------------

  stSynMobaItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynMobaItem& from);
  void MergeFrom(const stSynMobaItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string roleName = 1;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRoleNameFieldNumber = 1;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 3;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 3;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 addHonour = 4;
  inline bool has_addhonour() const;
  inline void clear_addhonour();
  static const int kAddHonourFieldNumber = 4;
  inline ::google::protobuf::uint32 addhonour() const;
  inline void set_addhonour(::google::protobuf::uint32 value);

  // optional uint32 killNum = 5;
  inline bool has_killnum() const;
  inline void clear_killnum();
  static const int kKillNumFieldNumber = 5;
  inline ::google::protobuf::uint32 killnum() const;
  inline void set_killnum(::google::protobuf::uint32 value);

  // optional uint32 beKillNum = 6;
  inline bool has_bekillnum() const;
  inline void clear_bekillnum();
  static const int kBeKillNumFieldNumber = 6;
  inline ::google::protobuf::uint32 bekillnum() const;
  inline void set_bekillnum(::google::protobuf::uint32 value);

  // optional uint32 charid = 7;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 7;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynMobaItem)
 private:
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_addhonour();
  inline void clear_has_addhonour();
  inline void set_has_killnum();
  inline void clear_has_killnum();
  inline void set_has_bekillnum();
  inline void clear_has_bekillnum();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* rolename_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 addhonour_;
  ::google::protobuf::uint32 killnum_;
  ::google::protobuf::uint32 bekillnum_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynMobaItem* default_instance_;
};
// -------------------------------------------------------------------

class stMobaPKResult : public ::google::protobuf::Message {
 public:
  stMobaPKResult();
  virtual ~stMobaPKResult();

  stMobaPKResult(const stMobaPKResult& from);

  inline stMobaPKResult& operator=(const stMobaPKResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMobaPKResult& default_instance();

  void Swap(stMobaPKResult* other);

  // implements Message ----------------------------------------------

  stMobaPKResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMobaPKResult& from);
  void MergeFrom(const stMobaPKResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMobaPKResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMobaPKResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMobaPKResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMobaPKResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMobaPKResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMobaPKResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMobaPKResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMobaPKResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMobaPKResult_ProtoModID_Parse(name, value);
  }

  typedef stMobaPKResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMobaPKResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMobaPKResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMobaPKResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMobaPKResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMobaPKResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMobaPKResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMobaPKResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMobaPKResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynMobaItem sideA = 1;
  inline int sidea_size() const;
  inline void clear_sidea();
  static const int kSideAFieldNumber = 1;
  inline const ::Role::stSynMobaItem& sidea(int index) const;
  inline ::Role::stSynMobaItem* mutable_sidea(int index);
  inline ::Role::stSynMobaItem* add_sidea();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem >&
      sidea() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem >*
      mutable_sidea();

  // repeated .Role.stSynMobaItem sideB = 2;
  inline int sideb_size() const;
  inline void clear_sideb();
  static const int kSideBFieldNumber = 2;
  inline const ::Role::stSynMobaItem& sideb(int index) const;
  inline ::Role::stSynMobaItem* mutable_sideb(int index);
  inline ::Role::stSynMobaItem* add_sideb();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem >&
      sideb() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem >*
      mutable_sideb();

  // @@protoc_insertion_point(class_scope:Role.stMobaPKResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem > sidea_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem > sideb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stMobaPKResult* default_instance_;
};
// -------------------------------------------------------------------

class stSubNewBieGuideID : public ::google::protobuf::Message {
 public:
  stSubNewBieGuideID();
  virtual ~stSubNewBieGuideID();

  stSubNewBieGuideID(const stSubNewBieGuideID& from);

  inline stSubNewBieGuideID& operator=(const stSubNewBieGuideID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSubNewBieGuideID& default_instance();

  void Swap(stSubNewBieGuideID* other);

  // implements Message ----------------------------------------------

  stSubNewBieGuideID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSubNewBieGuideID& from);
  void MergeFrom(const stSubNewBieGuideID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSubNewBieGuideID_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSubNewBieGuideID_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSubNewBieGuideID_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSubNewBieGuideID_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSubNewBieGuideID_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSubNewBieGuideID_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSubNewBieGuideID_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSubNewBieGuideID_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSubNewBieGuideID_ProtoModID_Parse(name, value);
  }

  typedef stSubNewBieGuideID_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSubNewBieGuideID_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSubNewBieGuideID_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSubNewBieGuideID_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSubNewBieGuideID_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSubNewBieGuideID_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSubNewBieGuideID_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSubNewBieGuideID_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSubNewBieGuideID_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSubNewBieGuideID)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSubNewBieGuideID* default_instance_;
};
// -------------------------------------------------------------------

class stResetTeamCopyMapNum : public ::google::protobuf::Message {
 public:
  stResetTeamCopyMapNum();
  virtual ~stResetTeamCopyMapNum();

  stResetTeamCopyMapNum(const stResetTeamCopyMapNum& from);

  inline stResetTeamCopyMapNum& operator=(const stResetTeamCopyMapNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetTeamCopyMapNum& default_instance();

  void Swap(stResetTeamCopyMapNum* other);

  // implements Message ----------------------------------------------

  stResetTeamCopyMapNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetTeamCopyMapNum& from);
  void MergeFrom(const stResetTeamCopyMapNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetTeamCopyMapNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetTeamCopyMapNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetTeamCopyMapNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetTeamCopyMapNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetTeamCopyMapNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetTeamCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetTeamCopyMapNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetTeamCopyMapNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetTeamCopyMapNum_ProtoModID_Parse(name, value);
  }

  typedef stResetTeamCopyMapNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetTeamCopyMapNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetTeamCopyMapNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetTeamCopyMapNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetTeamCopyMapNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetTeamCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetTeamCopyMapNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetTeamCopyMapNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetTeamCopyMapNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stResetTeamCopyMapNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stResetTeamCopyMapNum* default_instance_;
};
// -------------------------------------------------------------------

class stResetTeampCopyMapNumResult : public ::google::protobuf::Message {
 public:
  stResetTeampCopyMapNumResult();
  virtual ~stResetTeampCopyMapNumResult();

  stResetTeampCopyMapNumResult(const stResetTeampCopyMapNumResult& from);

  inline stResetTeampCopyMapNumResult& operator=(const stResetTeampCopyMapNumResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetTeampCopyMapNumResult& default_instance();

  void Swap(stResetTeampCopyMapNumResult* other);

  // implements Message ----------------------------------------------

  stResetTeampCopyMapNumResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetTeampCopyMapNumResult& from);
  void MergeFrom(const stResetTeampCopyMapNumResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetTeampCopyMapNumResult_eResult eResult;
  static const eResult eReset_Time_Use_Out = stResetTeampCopyMapNumResult_eResult_eReset_Time_Use_Out;
  static const eResult eDiamond_Not_Enough = stResetTeampCopyMapNumResult_eResult_eDiamond_Not_Enough;
  static const eResult eSuccess = stResetTeampCopyMapNumResult_eResult_eSuccess;
  static inline bool eResult_IsValid(int value) {
    return stResetTeampCopyMapNumResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetTeampCopyMapNumResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetTeampCopyMapNumResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetTeampCopyMapNumResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetTeampCopyMapNumResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetTeampCopyMapNumResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetTeampCopyMapNumResult_eResult_Parse(name, value);
  }

  typedef stResetTeampCopyMapNumResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetTeampCopyMapNumResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetTeampCopyMapNumResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetTeampCopyMapNumResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetTeampCopyMapNumResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetTeampCopyMapNumResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetTeampCopyMapNumResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetTeampCopyMapNumResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetTeampCopyMapNumResult_ProtoModID_Parse(name, value);
  }

  typedef stResetTeampCopyMapNumResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetTeampCopyMapNumResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetTeampCopyMapNumResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetTeampCopyMapNumResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetTeampCopyMapNumResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetTeampCopyMapNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetTeampCopyMapNumResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetTeampCopyMapNumResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetTeampCopyMapNumResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stResetTeampCopyMapNumResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stResetTeampCopyMapNumResult_eResult result() const;
  inline void set_result(::Role::stResetTeampCopyMapNumResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stResetTeampCopyMapNumResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stResetTeampCopyMapNumResult* default_instance_;
};
// -------------------------------------------------------------------

class stResetRealTimeCopyMapNum : public ::google::protobuf::Message {
 public:
  stResetRealTimeCopyMapNum();
  virtual ~stResetRealTimeCopyMapNum();

  stResetRealTimeCopyMapNum(const stResetRealTimeCopyMapNum& from);

  inline stResetRealTimeCopyMapNum& operator=(const stResetRealTimeCopyMapNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetRealTimeCopyMapNum& default_instance();

  void Swap(stResetRealTimeCopyMapNum* other);

  // implements Message ----------------------------------------------

  stResetRealTimeCopyMapNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetRealTimeCopyMapNum& from);
  void MergeFrom(const stResetRealTimeCopyMapNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetRealTimeCopyMapNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetRealTimeCopyMapNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetRealTimeCopyMapNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetRealTimeCopyMapNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetRealTimeCopyMapNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetRealTimeCopyMapNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetRealTimeCopyMapNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetRealTimeCopyMapNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetRealTimeCopyMapNum_ProtoModID_Parse(name, value);
  }

  typedef stResetRealTimeCopyMapNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetRealTimeCopyMapNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetRealTimeCopyMapNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetRealTimeCopyMapNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetRealTimeCopyMapNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetRealTimeCopyMapNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetRealTimeCopyMapNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetRealTimeCopyMapNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetRealTimeCopyMapNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stResetRealTimeCopyMapNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stResetRealTimeCopyMapNum* default_instance_;
};
// -------------------------------------------------------------------

class stResetRealTimeCopymapNumResult : public ::google::protobuf::Message {
 public:
  stResetRealTimeCopymapNumResult();
  virtual ~stResetRealTimeCopymapNumResult();

  stResetRealTimeCopymapNumResult(const stResetRealTimeCopymapNumResult& from);

  inline stResetRealTimeCopymapNumResult& operator=(const stResetRealTimeCopymapNumResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stResetRealTimeCopymapNumResult& default_instance();

  void Swap(stResetRealTimeCopymapNumResult* other);

  // implements Message ----------------------------------------------

  stResetRealTimeCopymapNumResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stResetRealTimeCopymapNumResult& from);
  void MergeFrom(const stResetRealTimeCopymapNumResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stResetRealTimeCopymapNumResult_eResult eResult;
  static const eResult eReset_Time_Use_Out = stResetRealTimeCopymapNumResult_eResult_eReset_Time_Use_Out;
  static const eResult eDiamond_Not_Enough = stResetRealTimeCopymapNumResult_eResult_eDiamond_Not_Enough;
  static const eResult eSuccess = stResetRealTimeCopymapNumResult_eResult_eSuccess;
  static inline bool eResult_IsValid(int value) {
    return stResetRealTimeCopymapNumResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stResetRealTimeCopymapNumResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stResetRealTimeCopymapNumResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stResetRealTimeCopymapNumResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stResetRealTimeCopymapNumResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stResetRealTimeCopymapNumResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stResetRealTimeCopymapNumResult_eResult_Parse(name, value);
  }

  typedef stResetRealTimeCopymapNumResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stResetRealTimeCopymapNumResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stResetRealTimeCopymapNumResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stResetRealTimeCopymapNumResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stResetRealTimeCopymapNumResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stResetRealTimeCopymapNumResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stResetRealTimeCopymapNumResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stResetRealTimeCopymapNumResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stResetRealTimeCopymapNumResult_ProtoModID_Parse(name, value);
  }

  typedef stResetRealTimeCopymapNumResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stResetRealTimeCopymapNumResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stResetRealTimeCopymapNumResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stResetRealTimeCopymapNumResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stResetRealTimeCopymapNumResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stResetRealTimeCopymapNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stResetRealTimeCopymapNumResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stResetRealTimeCopymapNumResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stResetRealTimeCopymapNumResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stResetRealTimeCopymapNumResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stResetRealTimeCopymapNumResult_eResult result() const;
  inline void set_result(::Role::stResetRealTimeCopymapNumResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stResetRealTimeCopymapNumResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stResetRealTimeCopymapNumResult* default_instance_;
};
// -------------------------------------------------------------------

class stBuyRMBItemSuccess : public ::google::protobuf::Message {
 public:
  stBuyRMBItemSuccess();
  virtual ~stBuyRMBItemSuccess();

  stBuyRMBItemSuccess(const stBuyRMBItemSuccess& from);

  inline stBuyRMBItemSuccess& operator=(const stBuyRMBItemSuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyRMBItemSuccess& default_instance();

  void Swap(stBuyRMBItemSuccess* other);

  // implements Message ----------------------------------------------

  stBuyRMBItemSuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyRMBItemSuccess& from);
  void MergeFrom(const stBuyRMBItemSuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyRMBItemSuccess_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyRMBItemSuccess_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyRMBItemSuccess_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyRMBItemSuccess_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyRMBItemSuccess_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyRMBItemSuccess_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyRMBItemSuccess_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyRMBItemSuccess_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyRMBItemSuccess_ProtoModID_Parse(name, value);
  }

  typedef stBuyRMBItemSuccess_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyRMBItemSuccess_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyRMBItemSuccess_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyRMBItemSuccess_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyRMBItemSuccess_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyRMBItemSuccess_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyRMBItemSuccess_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyRMBItemSuccess_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyRMBItemSuccess_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSynRMPShopItem itemInfo = 1;
  inline bool has_iteminfo() const;
  inline void clear_iteminfo();
  static const int kItemInfoFieldNumber = 1;
  inline const ::Role::stSynRMPShopItem& iteminfo() const;
  inline ::Role::stSynRMPShopItem* mutable_iteminfo();
  inline ::Role::stSynRMPShopItem* release_iteminfo();
  inline void set_allocated_iteminfo(::Role::stSynRMPShopItem* iteminfo);

  // @@protoc_insertion_point(class_scope:Role.stBuyRMBItemSuccess)
 private:
  inline void set_has_iteminfo();
  inline void clear_has_iteminfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stSynRMPShopItem* iteminfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stBuyRMBItemSuccess* default_instance_;
};
// -------------------------------------------------------------------

class stOne2OnePVPFail : public ::google::protobuf::Message {
 public:
  stOne2OnePVPFail();
  virtual ~stOne2OnePVPFail();

  stOne2OnePVPFail(const stOne2OnePVPFail& from);

  inline stOne2OnePVPFail& operator=(const stOne2OnePVPFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOne2OnePVPFail& default_instance();

  void Swap(stOne2OnePVPFail* other);

  // implements Message ----------------------------------------------

  stOne2OnePVPFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOne2OnePVPFail& from);
  void MergeFrom(const stOne2OnePVPFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOne2OnePVPFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOne2OnePVPFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOne2OnePVPFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOne2OnePVPFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOne2OnePVPFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOne2OnePVPFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOne2OnePVPFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOne2OnePVPFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOne2OnePVPFail_ProtoModID_Parse(name, value);
  }

  typedef stOne2OnePVPFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOne2OnePVPFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOne2OnePVPFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOne2OnePVPFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOne2OnePVPFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOne2OnePVPFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOne2OnePVPFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOne2OnePVPFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOne2OnePVPFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynOne2OnePVPItem loser = 1;
  inline int loser_size() const;
  inline void clear_loser();
  static const int kLoserFieldNumber = 1;
  inline const ::Role::stSynOne2OnePVPItem& loser(int index) const;
  inline ::Role::stSynOne2OnePVPItem* mutable_loser(int index);
  inline ::Role::stSynOne2OnePVPItem* add_loser();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynOne2OnePVPItem >&
      loser() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynOne2OnePVPItem >*
      mutable_loser();

  // optional bool pkWithFriend = 2;
  inline bool has_pkwithfriend() const;
  inline void clear_pkwithfriend();
  static const int kPkWithFriendFieldNumber = 2;
  inline bool pkwithfriend() const;
  inline void set_pkwithfriend(bool value);

  // @@protoc_insertion_point(class_scope:Role.stOne2OnePVPFail)
 private:
  inline void set_has_pkwithfriend();
  inline void clear_has_pkwithfriend();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynOne2OnePVPItem > loser_;
  bool pkwithfriend_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stOne2OnePVPFail* default_instance_;
};
// -------------------------------------------------------------------

class stRealTimeFail : public ::google::protobuf::Message {
 public:
  stRealTimeFail();
  virtual ~stRealTimeFail();

  stRealTimeFail(const stRealTimeFail& from);

  inline stRealTimeFail& operator=(const stRealTimeFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRealTimeFail& default_instance();

  void Swap(stRealTimeFail* other);

  // implements Message ----------------------------------------------

  stRealTimeFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRealTimeFail& from);
  void MergeFrom(const stRealTimeFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRealTimeFail_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRealTimeFail_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRealTimeFail_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRealTimeFail_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRealTimeFail_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRealTimeFail_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRealTimeFail_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRealTimeFail_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRealTimeFail_ProtoModID_Parse(name, value);
  }

  typedef stRealTimeFail_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRealTimeFail_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRealTimeFail_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRealTimeFail_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRealTimeFail_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRealTimeFail_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRealTimeFail_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRealTimeFail_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRealTimeFail_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynRealTimeItem sideA = 1;
  inline int sidea_size() const;
  inline void clear_sidea();
  static const int kSideAFieldNumber = 1;
  inline const ::Role::stSynRealTimeItem& sidea(int index) const;
  inline ::Role::stSynRealTimeItem* mutable_sidea(int index);
  inline ::Role::stSynRealTimeItem* add_sidea();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >&
      sidea() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >*
      mutable_sidea();

  // repeated .Role.stSynRealTimeItem sideB = 2;
  inline int sideb_size() const;
  inline void clear_sideb();
  static const int kSideBFieldNumber = 2;
  inline const ::Role::stSynRealTimeItem& sideb(int index) const;
  inline ::Role::stSynRealTimeItem* mutable_sideb(int index);
  inline ::Role::stSynRealTimeItem* add_sideb();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >&
      sideb() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >*
      mutable_sideb();

  // @@protoc_insertion_point(class_scope:Role.stRealTimeFail)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem > sidea_;
  ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem > sideb_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRealTimeFail* default_instance_;
};
// -------------------------------------------------------------------

class stDataInitFinish : public ::google::protobuf::Message {
 public:
  stDataInitFinish();
  virtual ~stDataInitFinish();

  stDataInitFinish(const stDataInitFinish& from);

  inline stDataInitFinish& operator=(const stDataInitFinish& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stDataInitFinish& default_instance();

  void Swap(stDataInitFinish* other);

  // implements Message ----------------------------------------------

  stDataInitFinish* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stDataInitFinish& from);
  void MergeFrom(const stDataInitFinish& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stDataInitFinish_ProtoModID ProtoModID;
  static const ProtoModID ModID = stDataInitFinish_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stDataInitFinish_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stDataInitFinish_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stDataInitFinish_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stDataInitFinish_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stDataInitFinish_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stDataInitFinish_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stDataInitFinish_ProtoModID_Parse(name, value);
  }

  typedef stDataInitFinish_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stDataInitFinish_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stDataInitFinish_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stDataInitFinish_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stDataInitFinish_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stDataInitFinish_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stDataInitFinish_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stDataInitFinish_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stDataInitFinish_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline bool result() const;
  inline void set_result(bool value);

  // optional string IP = 2;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIPFieldNumber = 2;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // @@protoc_insertion_point(class_scope:Role.stDataInitFinish)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_ip();
  inline void clear_has_ip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  bool result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stDataInitFinish* default_instance_;
};
// -------------------------------------------------------------------

class stReqFirst10RechargeReward : public ::google::protobuf::Message {
 public:
  stReqFirst10RechargeReward();
  virtual ~stReqFirst10RechargeReward();

  stReqFirst10RechargeReward(const stReqFirst10RechargeReward& from);

  inline stReqFirst10RechargeReward& operator=(const stReqFirst10RechargeReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqFirst10RechargeReward& default_instance();

  void Swap(stReqFirst10RechargeReward* other);

  // implements Message ----------------------------------------------

  stReqFirst10RechargeReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqFirst10RechargeReward& from);
  void MergeFrom(const stReqFirst10RechargeReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqFirst10RechargeReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqFirst10RechargeReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqFirst10RechargeReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqFirst10RechargeReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqFirst10RechargeReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqFirst10RechargeReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqFirst10RechargeReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqFirst10RechargeReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqFirst10RechargeReward_ProtoModID_Parse(name, value);
  }

  typedef stReqFirst10RechargeReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqFirst10RechargeReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqFirst10RechargeReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqFirst10RechargeReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqFirst10RechargeReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqFirst10RechargeReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqFirst10RechargeReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqFirst10RechargeReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqFirst10RechargeReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqFirst10RechargeReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqFirst10RechargeReward* default_instance_;
};
// -------------------------------------------------------------------

class stRetFirst10RechargeReward : public ::google::protobuf::Message {
 public:
  stRetFirst10RechargeReward();
  virtual ~stRetFirst10RechargeReward();

  stRetFirst10RechargeReward(const stRetFirst10RechargeReward& from);

  inline stRetFirst10RechargeReward& operator=(const stRetFirst10RechargeReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetFirst10RechargeReward& default_instance();

  void Swap(stRetFirst10RechargeReward* other);

  // implements Message ----------------------------------------------

  stRetFirst10RechargeReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetFirst10RechargeReward& from);
  void MergeFrom(const stRetFirst10RechargeReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetFirst10RechargeReward_eResult eResult;
  static const eResult eSuccess = stRetFirst10RechargeReward_eResult_eSuccess;
  static const eResult eHas_Not_Enough_Recharge = stRetFirst10RechargeReward_eResult_eHas_Not_Enough_Recharge;
  static const eResult eHas_Got_Reward = stRetFirst10RechargeReward_eResult_eHas_Got_Reward;
  static const eResult eBag_Full = stRetFirst10RechargeReward_eResult_eBag_Full;
  static inline bool eResult_IsValid(int value) {
    return stRetFirst10RechargeReward_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetFirst10RechargeReward_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetFirst10RechargeReward_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetFirst10RechargeReward_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetFirst10RechargeReward_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetFirst10RechargeReward_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetFirst10RechargeReward_eResult_Parse(name, value);
  }

  typedef stRetFirst10RechargeReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetFirst10RechargeReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetFirst10RechargeReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetFirst10RechargeReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetFirst10RechargeReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetFirst10RechargeReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetFirst10RechargeReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetFirst10RechargeReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetFirst10RechargeReward_ProtoModID_Parse(name, value);
  }

  typedef stRetFirst10RechargeReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetFirst10RechargeReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetFirst10RechargeReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetFirst10RechargeReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetFirst10RechargeReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetFirst10RechargeReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetFirst10RechargeReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetFirst10RechargeReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetFirst10RechargeReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRetFirst10RechargeReward.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRetFirst10RechargeReward_eResult result() const;
  inline void set_result(::Role::stRetFirst10RechargeReward_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetFirst10RechargeReward)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetFirst10RechargeReward* default_instance_;
};
// -------------------------------------------------------------------

class stChatInWorldCoolDown : public ::google::protobuf::Message {
 public:
  stChatInWorldCoolDown();
  virtual ~stChatInWorldCoolDown();

  stChatInWorldCoolDown(const stChatInWorldCoolDown& from);

  inline stChatInWorldCoolDown& operator=(const stChatInWorldCoolDown& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChatInWorldCoolDown& default_instance();

  void Swap(stChatInWorldCoolDown* other);

  // implements Message ----------------------------------------------

  stChatInWorldCoolDown* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChatInWorldCoolDown& from);
  void MergeFrom(const stChatInWorldCoolDown& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChatInWorldCoolDown_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChatInWorldCoolDown_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChatInWorldCoolDown_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChatInWorldCoolDown_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChatInWorldCoolDown_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChatInWorldCoolDown_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChatInWorldCoolDown_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChatInWorldCoolDown_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChatInWorldCoolDown_ProtoModID_Parse(name, value);
  }

  typedef stChatInWorldCoolDown_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChatInWorldCoolDown_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChatInWorldCoolDown_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChatInWorldCoolDown_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChatInWorldCoolDown_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChatInWorldCoolDown_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChatInWorldCoolDown_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChatInWorldCoolDown_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChatInWorldCoolDown_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 remainTime = 1;
  inline bool has_remaintime() const;
  inline void clear_remaintime();
  static const int kRemainTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 remaintime() const;
  inline void set_remaintime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stChatInWorldCoolDown)
 private:
  inline void set_has_remaintime();
  inline void clear_has_remaintime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 remaintime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stChatInWorldCoolDown* default_instance_;
};
// -------------------------------------------------------------------

class stSynRoleCreateTime : public ::google::protobuf::Message {
 public:
  stSynRoleCreateTime();
  virtual ~stSynRoleCreateTime();

  stSynRoleCreateTime(const stSynRoleCreateTime& from);

  inline stSynRoleCreateTime& operator=(const stSynRoleCreateTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRoleCreateTime& default_instance();

  void Swap(stSynRoleCreateTime* other);

  // implements Message ----------------------------------------------

  stSynRoleCreateTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRoleCreateTime& from);
  void MergeFrom(const stSynRoleCreateTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynRoleCreateTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynRoleCreateTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynRoleCreateTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynRoleCreateTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynRoleCreateTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynRoleCreateTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynRoleCreateTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynRoleCreateTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynRoleCreateTime_ProtoModID_Parse(name, value);
  }

  typedef stSynRoleCreateTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynRoleCreateTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynRoleCreateTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynRoleCreateTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynRoleCreateTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynRoleCreateTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynRoleCreateTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynRoleCreateTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynRoleCreateTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 createTime = 1;
  inline bool has_createtime() const;
  inline void clear_createtime();
  static const int kCreateTimeFieldNumber = 1;
  inline ::google::protobuf::uint32 createtime() const;
  inline void set_createtime(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynRoleCreateTime)
 private:
  inline void set_has_createtime();
  inline void clear_has_createtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 createtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynRoleCreateTime* default_instance_;
};
// -------------------------------------------------------------------

class stReqChgEquipSkill : public ::google::protobuf::Message {
 public:
  stReqChgEquipSkill();
  virtual ~stReqChgEquipSkill();

  stReqChgEquipSkill(const stReqChgEquipSkill& from);

  inline stReqChgEquipSkill& operator=(const stReqChgEquipSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChgEquipSkill& default_instance();

  void Swap(stReqChgEquipSkill* other);

  // implements Message ----------------------------------------------

  stReqChgEquipSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChgEquipSkill& from);
  void MergeFrom(const stReqChgEquipSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChgEquipSkill_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChgEquipSkill_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChgEquipSkill_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChgEquipSkill_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChgEquipSkill_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChgEquipSkill_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChgEquipSkill_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChgEquipSkill_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChgEquipSkill_ProtoModID_Parse(name, value);
  }

  typedef stReqChgEquipSkill_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChgEquipSkill_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChgEquipSkill_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChgEquipSkill_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChgEquipSkill_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChgEquipSkill_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChgEquipSkill_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChgEquipSkill_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChgEquipSkill_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 srcInstanceID = 1;
  inline bool has_srcinstanceid() const;
  inline void clear_srcinstanceid();
  static const int kSrcInstanceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 srcinstanceid() const;
  inline void set_srcinstanceid(::google::protobuf::uint64 value);

  // optional uint64 dstInstanceID = 2;
  inline bool has_dstinstanceid() const;
  inline void clear_dstinstanceid();
  static const int kDstInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 dstinstanceid() const;
  inline void set_dstinstanceid(::google::protobuf::uint64 value);

  // optional uint64 chgSoulItemInstanceID = 3;
  inline bool has_chgsouliteminstanceid() const;
  inline void clear_chgsouliteminstanceid();
  static const int kChgSoulItemInstanceIDFieldNumber = 3;
  inline ::google::protobuf::uint64 chgsouliteminstanceid() const;
  inline void set_chgsouliteminstanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqChgEquipSkill)
 private:
  inline void set_has_srcinstanceid();
  inline void clear_has_srcinstanceid();
  inline void set_has_dstinstanceid();
  inline void clear_has_dstinstanceid();
  inline void set_has_chgsouliteminstanceid();
  inline void clear_has_chgsouliteminstanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 srcinstanceid_;
  ::google::protobuf::uint64 dstinstanceid_;
  ::google::protobuf::uint64 chgsouliteminstanceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqChgEquipSkill* default_instance_;
};
// -------------------------------------------------------------------

class stRetChgEquipSkillResult : public ::google::protobuf::Message {
 public:
  stRetChgEquipSkillResult();
  virtual ~stRetChgEquipSkillResult();

  stRetChgEquipSkillResult(const stRetChgEquipSkillResult& from);

  inline stRetChgEquipSkillResult& operator=(const stRetChgEquipSkillResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetChgEquipSkillResult& default_instance();

  void Swap(stRetChgEquipSkillResult* other);

  // implements Message ----------------------------------------------

  stRetChgEquipSkillResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetChgEquipSkillResult& from);
  void MergeFrom(const stRetChgEquipSkillResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetChgEquipSkillResult_eResult eResult;
  static const eResult eSuccess = stRetChgEquipSkillResult_eResult_eSuccess;
  static const eResult eSrc_Item_Not_Exist = stRetChgEquipSkillResult_eResult_eSrc_Item_Not_Exist;
  static const eResult eDst_Item_Not_Exist = stRetChgEquipSkillResult_eResult_eDst_Item_Not_Exist;
  static const eResult eHas_Not_Chg_Soul_Item = stRetChgEquipSkillResult_eResult_eHas_Not_Chg_Soul_Item;
  static const eResult eCond_Not_Meet = stRetChgEquipSkillResult_eResult_eCond_Not_Meet;
  static const eResult eDec_Chg_Soul_Item_Fail = stRetChgEquipSkillResult_eResult_eDec_Chg_Soul_Item_Fail;
  static inline bool eResult_IsValid(int value) {
    return stRetChgEquipSkillResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetChgEquipSkillResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetChgEquipSkillResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetChgEquipSkillResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetChgEquipSkillResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetChgEquipSkillResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetChgEquipSkillResult_eResult_Parse(name, value);
  }

  typedef stRetChgEquipSkillResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetChgEquipSkillResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetChgEquipSkillResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetChgEquipSkillResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetChgEquipSkillResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetChgEquipSkillResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetChgEquipSkillResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetChgEquipSkillResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetChgEquipSkillResult_ProtoModID_Parse(name, value);
  }

  typedef stRetChgEquipSkillResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetChgEquipSkillResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetChgEquipSkillResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetChgEquipSkillResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetChgEquipSkillResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetChgEquipSkillResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetChgEquipSkillResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetChgEquipSkillResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetChgEquipSkillResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 srcInstanceID = 1;
  inline bool has_srcinstanceid() const;
  inline void clear_srcinstanceid();
  static const int kSrcInstanceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 srcinstanceid() const;
  inline void set_srcinstanceid(::google::protobuf::uint64 value);

  // optional uint64 dstInstanceID = 2;
  inline bool has_dstinstanceid() const;
  inline void clear_dstinstanceid();
  static const int kDstInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 dstinstanceid() const;
  inline void set_dstinstanceid(::google::protobuf::uint64 value);

  // optional .Role.stRetChgEquipSkillResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRetChgEquipSkillResult_eResult result() const;
  inline void set_result(::Role::stRetChgEquipSkillResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetChgEquipSkillResult)
 private:
  inline void set_has_srcinstanceid();
  inline void clear_has_srcinstanceid();
  inline void set_has_dstinstanceid();
  inline void clear_has_dstinstanceid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 srcinstanceid_;
  ::google::protobuf::uint64 dstinstanceid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetChgEquipSkillResult* default_instance_;
};
// -------------------------------------------------------------------

class stHasCloseBetaReward : public ::google::protobuf::Message {
 public:
  stHasCloseBetaReward();
  virtual ~stHasCloseBetaReward();

  stHasCloseBetaReward(const stHasCloseBetaReward& from);

  inline stHasCloseBetaReward& operator=(const stHasCloseBetaReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHasCloseBetaReward& default_instance();

  void Swap(stHasCloseBetaReward* other);

  // implements Message ----------------------------------------------

  stHasCloseBetaReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHasCloseBetaReward& from);
  void MergeFrom(const stHasCloseBetaReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHasCloseBetaReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHasCloseBetaReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHasCloseBetaReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHasCloseBetaReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHasCloseBetaReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHasCloseBetaReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHasCloseBetaReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHasCloseBetaReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHasCloseBetaReward_ProtoModID_Parse(name, value);
  }

  typedef stHasCloseBetaReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHasCloseBetaReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHasCloseBetaReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHasCloseBetaReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHasCloseBetaReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHasCloseBetaReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHasCloseBetaReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHasCloseBetaReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHasCloseBetaReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 boxID = 1;
  inline bool has_boxid() const;
  inline void clear_boxid();
  static const int kBoxIDFieldNumber = 1;
  inline ::google::protobuf::uint32 boxid() const;
  inline void set_boxid(::google::protobuf::uint32 value);

  // optional uint32 giveDiamond = 2;
  inline bool has_givediamond() const;
  inline void clear_givediamond();
  static const int kGiveDiamondFieldNumber = 2;
  inline ::google::protobuf::uint32 givediamond() const;
  inline void set_givediamond(::google::protobuf::uint32 value);

  // optional uint32 giveRecharge = 3;
  inline bool has_giverecharge() const;
  inline void clear_giverecharge();
  static const int kGiveRechargeFieldNumber = 3;
  inline ::google::protobuf::uint32 giverecharge() const;
  inline void set_giverecharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stHasCloseBetaReward)
 private:
  inline void set_has_boxid();
  inline void clear_has_boxid();
  inline void set_has_givediamond();
  inline void clear_has_givediamond();
  inline void set_has_giverecharge();
  inline void clear_has_giverecharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 boxid_;
  ::google::protobuf::uint32 givediamond_;
  ::google::protobuf::uint32 giverecharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stHasCloseBetaReward* default_instance_;
};
// -------------------------------------------------------------------

class stReqGotCloseBetaReward : public ::google::protobuf::Message {
 public:
  stReqGotCloseBetaReward();
  virtual ~stReqGotCloseBetaReward();

  stReqGotCloseBetaReward(const stReqGotCloseBetaReward& from);

  inline stReqGotCloseBetaReward& operator=(const stReqGotCloseBetaReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqGotCloseBetaReward& default_instance();

  void Swap(stReqGotCloseBetaReward* other);

  // implements Message ----------------------------------------------

  stReqGotCloseBetaReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqGotCloseBetaReward& from);
  void MergeFrom(const stReqGotCloseBetaReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqGotCloseBetaReward_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqGotCloseBetaReward_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqGotCloseBetaReward_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqGotCloseBetaReward_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqGotCloseBetaReward_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqGotCloseBetaReward_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqGotCloseBetaReward_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqGotCloseBetaReward_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqGotCloseBetaReward_ProtoModID_Parse(name, value);
  }

  typedef stReqGotCloseBetaReward_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqGotCloseBetaReward_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqGotCloseBetaReward_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqGotCloseBetaReward_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqGotCloseBetaReward_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqGotCloseBetaReward_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqGotCloseBetaReward_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqGotCloseBetaReward_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqGotCloseBetaReward_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqGotCloseBetaReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqGotCloseBetaReward* default_instance_;
};
// -------------------------------------------------------------------

class stGotCloseBetaRewardResult : public ::google::protobuf::Message {
 public:
  stGotCloseBetaRewardResult();
  virtual ~stGotCloseBetaRewardResult();

  stGotCloseBetaRewardResult(const stGotCloseBetaRewardResult& from);

  inline stGotCloseBetaRewardResult& operator=(const stGotCloseBetaRewardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGotCloseBetaRewardResult& default_instance();

  void Swap(stGotCloseBetaRewardResult* other);

  // implements Message ----------------------------------------------

  stGotCloseBetaRewardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGotCloseBetaRewardResult& from);
  void MergeFrom(const stGotCloseBetaRewardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGotCloseBetaRewardResult_eResult eResult;
  static const eResult eSuccess = stGotCloseBetaRewardResult_eResult_eSuccess;
  static const eResult eBagFull = stGotCloseBetaRewardResult_eResult_eBagFull;
  static const eResult eHas_Got_Reward = stGotCloseBetaRewardResult_eResult_eHas_Got_Reward;
  static const eResult eHas_Not_Reward = stGotCloseBetaRewardResult_eResult_eHas_Not_Reward;
  static inline bool eResult_IsValid(int value) {
    return stGotCloseBetaRewardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGotCloseBetaRewardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGotCloseBetaRewardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGotCloseBetaRewardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGotCloseBetaRewardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGotCloseBetaRewardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGotCloseBetaRewardResult_eResult_Parse(name, value);
  }

  typedef stGotCloseBetaRewardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGotCloseBetaRewardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGotCloseBetaRewardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGotCloseBetaRewardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGotCloseBetaRewardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGotCloseBetaRewardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGotCloseBetaRewardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGotCloseBetaRewardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGotCloseBetaRewardResult_ProtoModID_Parse(name, value);
  }

  typedef stGotCloseBetaRewardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGotCloseBetaRewardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGotCloseBetaRewardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGotCloseBetaRewardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGotCloseBetaRewardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGotCloseBetaRewardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGotCloseBetaRewardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGotCloseBetaRewardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGotCloseBetaRewardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stGotCloseBetaRewardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stGotCloseBetaRewardResult_eResult result() const;
  inline void set_result(::Role::stGotCloseBetaRewardResult_eResult value);

  // optional uint32 giveDiamond = 2;
  inline bool has_givediamond() const;
  inline void clear_givediamond();
  static const int kGiveDiamondFieldNumber = 2;
  inline ::google::protobuf::uint32 givediamond() const;
  inline void set_givediamond(::google::protobuf::uint32 value);

  // optional uint32 giveRecharge = 3;
  inline bool has_giverecharge() const;
  inline void clear_giverecharge();
  static const int kGiveRechargeFieldNumber = 3;
  inline ::google::protobuf::uint32 giverecharge() const;
  inline void set_giverecharge(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stGotCloseBetaRewardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_givediamond();
  inline void clear_has_givediamond();
  inline void set_has_giverecharge();
  inline void clear_has_giverecharge();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 givediamond_;
  ::google::protobuf::uint32 giverecharge_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stGotCloseBetaRewardResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqUseMonthCardItem : public ::google::protobuf::Message {
 public:
  stReqUseMonthCardItem();
  virtual ~stReqUseMonthCardItem();

  stReqUseMonthCardItem(const stReqUseMonthCardItem& from);

  inline stReqUseMonthCardItem& operator=(const stReqUseMonthCardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUseMonthCardItem& default_instance();

  void Swap(stReqUseMonthCardItem* other);

  // implements Message ----------------------------------------------

  stReqUseMonthCardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUseMonthCardItem& from);
  void MergeFrom(const stReqUseMonthCardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUseMonthCardItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUseMonthCardItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUseMonthCardItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUseMonthCardItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUseMonthCardItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUseMonthCardItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUseMonthCardItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUseMonthCardItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUseMonthCardItem_ProtoModID_Parse(name, value);
  }

  typedef stReqUseMonthCardItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUseMonthCardItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUseMonthCardItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUseMonthCardItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUseMonthCardItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUseMonthCardItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUseMonthCardItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUseMonthCardItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUseMonthCardItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 instanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqUseMonthCardItem)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqUseMonthCardItem* default_instance_;
};
// -------------------------------------------------------------------

class stRetUseMonthCardItem : public ::google::protobuf::Message {
 public:
  stRetUseMonthCardItem();
  virtual ~stRetUseMonthCardItem();

  stRetUseMonthCardItem(const stRetUseMonthCardItem& from);

  inline stRetUseMonthCardItem& operator=(const stRetUseMonthCardItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetUseMonthCardItem& default_instance();

  void Swap(stRetUseMonthCardItem* other);

  // implements Message ----------------------------------------------

  stRetUseMonthCardItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetUseMonthCardItem& from);
  void MergeFrom(const stRetUseMonthCardItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetUseMonthCardItem_eResult eResult;
  static const eResult eSuccess = stRetUseMonthCardItem_eResult_eSuccess;
  static const eResult eExpire = stRetUseMonthCardItem_eResult_eExpire;
  static const eResult eToday_Has_Use = stRetUseMonthCardItem_eResult_eToday_Has_Use;
  static const eResult eItem_Not_Exist = stRetUseMonthCardItem_eResult_eItem_Not_Exist;
  static inline bool eResult_IsValid(int value) {
    return stRetUseMonthCardItem_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetUseMonthCardItem_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetUseMonthCardItem_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetUseMonthCardItem_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetUseMonthCardItem_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetUseMonthCardItem_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetUseMonthCardItem_eResult_Parse(name, value);
  }

  typedef stRetUseMonthCardItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetUseMonthCardItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetUseMonthCardItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetUseMonthCardItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetUseMonthCardItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetUseMonthCardItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetUseMonthCardItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetUseMonthCardItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetUseMonthCardItem_ProtoModID_Parse(name, value);
  }

  typedef stRetUseMonthCardItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetUseMonthCardItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetUseMonthCardItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetUseMonthCardItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetUseMonthCardItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetUseMonthCardItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetUseMonthCardItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetUseMonthCardItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetUseMonthCardItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRetUseMonthCardItem.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRetUseMonthCardItem_eResult result() const;
  inline void set_result(::Role::stRetUseMonthCardItem_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetUseMonthCardItem)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetUseMonthCardItem* default_instance_;
};
// -------------------------------------------------------------------

class stReqUseSelectItemBox : public ::google::protobuf::Message {
 public:
  stReqUseSelectItemBox();
  virtual ~stReqUseSelectItemBox();

  stReqUseSelectItemBox(const stReqUseSelectItemBox& from);

  inline stReqUseSelectItemBox& operator=(const stReqUseSelectItemBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUseSelectItemBox& default_instance();

  void Swap(stReqUseSelectItemBox* other);

  // implements Message ----------------------------------------------

  stReqUseSelectItemBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUseSelectItemBox& from);
  void MergeFrom(const stReqUseSelectItemBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUseSelectItemBox_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUseSelectItemBox_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUseSelectItemBox_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUseSelectItemBox_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUseSelectItemBox_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUseSelectItemBox_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUseSelectItemBox_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUseSelectItemBox_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUseSelectItemBox_ProtoModID_Parse(name, value);
  }

  typedef stReqUseSelectItemBox_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUseSelectItemBox_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUseSelectItemBox_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUseSelectItemBox_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUseSelectItemBox_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUseSelectItemBox_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUseSelectItemBox_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUseSelectItemBox_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUseSelectItemBox_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 instanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 selectIndex = 2;
  inline bool has_selectindex() const;
  inline void clear_selectindex();
  static const int kSelectIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 selectindex() const;
  inline void set_selectindex(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqUseSelectItemBox)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_selectindex();
  inline void clear_has_selectindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 selectindex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqUseSelectItemBox* default_instance_;
};
// -------------------------------------------------------------------

class stRetUseSelectItemBox : public ::google::protobuf::Message {
 public:
  stRetUseSelectItemBox();
  virtual ~stRetUseSelectItemBox();

  stRetUseSelectItemBox(const stRetUseSelectItemBox& from);

  inline stRetUseSelectItemBox& operator=(const stRetUseSelectItemBox& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetUseSelectItemBox& default_instance();

  void Swap(stRetUseSelectItemBox* other);

  // implements Message ----------------------------------------------

  stRetUseSelectItemBox* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetUseSelectItemBox& from);
  void MergeFrom(const stRetUseSelectItemBox& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetUseSelectItemBox_eResult eResult;
  static const eResult eSuccess = stRetUseSelectItemBox_eResult_eSuccess;
  static const eResult eItem_Not_Exist = stRetUseSelectItemBox_eResult_eItem_Not_Exist;
  static const eResult eDec_Item_Fail = stRetUseSelectItemBox_eResult_eDec_Item_Fail;
  static inline bool eResult_IsValid(int value) {
    return stRetUseSelectItemBox_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetUseSelectItemBox_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetUseSelectItemBox_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetUseSelectItemBox_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetUseSelectItemBox_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetUseSelectItemBox_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetUseSelectItemBox_eResult_Parse(name, value);
  }

  typedef stRetUseSelectItemBox_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetUseSelectItemBox_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetUseSelectItemBox_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetUseSelectItemBox_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetUseSelectItemBox_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetUseSelectItemBox_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetUseSelectItemBox_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetUseSelectItemBox_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetUseSelectItemBox_ProtoModID_Parse(name, value);
  }

  typedef stRetUseSelectItemBox_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetUseSelectItemBox_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetUseSelectItemBox_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetUseSelectItemBox_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetUseSelectItemBox_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetUseSelectItemBox_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetUseSelectItemBox_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetUseSelectItemBox_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetUseSelectItemBox_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRetUseSelectItemBox.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRetUseSelectItemBox_eResult result() const;
  inline void set_result(::Role::stRetUseSelectItemBox_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetUseSelectItemBox)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetUseSelectItemBox* default_instance_;
};
// -------------------------------------------------------------------

class stReqUseHeroSkillBook : public ::google::protobuf::Message {
 public:
  stReqUseHeroSkillBook();
  virtual ~stReqUseHeroSkillBook();

  stReqUseHeroSkillBook(const stReqUseHeroSkillBook& from);

  inline stReqUseHeroSkillBook& operator=(const stReqUseHeroSkillBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUseHeroSkillBook& default_instance();

  void Swap(stReqUseHeroSkillBook* other);

  // implements Message ----------------------------------------------

  stReqUseHeroSkillBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUseHeroSkillBook& from);
  void MergeFrom(const stReqUseHeroSkillBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUseHeroSkillBook_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUseHeroSkillBook_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUseHeroSkillBook_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUseHeroSkillBook_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUseHeroSkillBook_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUseHeroSkillBook_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUseHeroSkillBook_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUseHeroSkillBook_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUseHeroSkillBook_ProtoModID_Parse(name, value);
  }

  typedef stReqUseHeroSkillBook_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUseHeroSkillBook_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUseHeroSkillBook_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUseHeroSkillBook_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUseHeroSkillBook_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUseHeroSkillBook_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUseHeroSkillBook_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUseHeroSkillBook_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUseHeroSkillBook_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 instanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 heroID = 2;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 2;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqUseHeroSkillBook)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqUseHeroSkillBook* default_instance_;
};
// -------------------------------------------------------------------

class stRetUseHeroSkillBook : public ::google::protobuf::Message {
 public:
  stRetUseHeroSkillBook();
  virtual ~stRetUseHeroSkillBook();

  stRetUseHeroSkillBook(const stRetUseHeroSkillBook& from);

  inline stRetUseHeroSkillBook& operator=(const stRetUseHeroSkillBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetUseHeroSkillBook& default_instance();

  void Swap(stRetUseHeroSkillBook* other);

  // implements Message ----------------------------------------------

  stRetUseHeroSkillBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetUseHeroSkillBook& from);
  void MergeFrom(const stRetUseHeroSkillBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetUseHeroSkillBook_eResult eResult;
  static const eResult eSuccess = stRetUseHeroSkillBook_eResult_eSuccess;
  static const eResult eItem_Not_Exist = stRetUseHeroSkillBook_eResult_eItem_Not_Exist;
  static const eResult eDec_Item_Fail = stRetUseHeroSkillBook_eResult_eDec_Item_Fail;
  static const eResult eSkill_Has_Exist = stRetUseHeroSkillBook_eResult_eSkill_Has_Exist;
  static const eResult eHero_Not_Exist = stRetUseHeroSkillBook_eResult_eHero_Not_Exist;
  static inline bool eResult_IsValid(int value) {
    return stRetUseHeroSkillBook_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetUseHeroSkillBook_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetUseHeroSkillBook_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetUseHeroSkillBook_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetUseHeroSkillBook_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetUseHeroSkillBook_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetUseHeroSkillBook_eResult_Parse(name, value);
  }

  typedef stRetUseHeroSkillBook_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetUseHeroSkillBook_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetUseHeroSkillBook_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetUseHeroSkillBook_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetUseHeroSkillBook_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetUseHeroSkillBook_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetUseHeroSkillBook_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetUseHeroSkillBook_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetUseHeroSkillBook_ProtoModID_Parse(name, value);
  }

  typedef stRetUseHeroSkillBook_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetUseHeroSkillBook_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetUseHeroSkillBook_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetUseHeroSkillBook_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetUseHeroSkillBook_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetUseHeroSkillBook_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetUseHeroSkillBook_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetUseHeroSkillBook_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetUseHeroSkillBook_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRetUseHeroSkillBook.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRetUseHeroSkillBook_eResult result() const;
  inline void set_result(::Role::stRetUseHeroSkillBook_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetUseHeroSkillBook)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetUseHeroSkillBook* default_instance_;
};
// -------------------------------------------------------------------

class stReqUseEquipSkillBook : public ::google::protobuf::Message {
 public:
  stReqUseEquipSkillBook();
  virtual ~stReqUseEquipSkillBook();

  stReqUseEquipSkillBook(const stReqUseEquipSkillBook& from);

  inline stReqUseEquipSkillBook& operator=(const stReqUseEquipSkillBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUseEquipSkillBook& default_instance();

  void Swap(stReqUseEquipSkillBook* other);

  // implements Message ----------------------------------------------

  stReqUseEquipSkillBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUseEquipSkillBook& from);
  void MergeFrom(const stReqUseEquipSkillBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUseEquipSkillBook_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUseEquipSkillBook_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUseEquipSkillBook_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUseEquipSkillBook_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUseEquipSkillBook_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUseEquipSkillBook_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUseEquipSkillBook_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUseEquipSkillBook_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUseEquipSkillBook_ProtoModID_Parse(name, value);
  }

  typedef stReqUseEquipSkillBook_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUseEquipSkillBook_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUseEquipSkillBook_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUseEquipSkillBook_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUseEquipSkillBook_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUseEquipSkillBook_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUseEquipSkillBook_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUseEquipSkillBook_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUseEquipSkillBook_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 instanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 destBagType = 2;
  inline bool has_destbagtype() const;
  inline void clear_destbagtype();
  static const int kDestBagTypeFieldNumber = 2;
  inline ::google::protobuf::uint32 destbagtype() const;
  inline void set_destbagtype(::google::protobuf::uint32 value);

  // optional uint64 destInstanceID = 3;
  inline bool has_destinstanceid() const;
  inline void clear_destinstanceid();
  static const int kDestInstanceIDFieldNumber = 3;
  inline ::google::protobuf::uint64 destinstanceid() const;
  inline void set_destinstanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqUseEquipSkillBook)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_destbagtype();
  inline void clear_has_destbagtype();
  inline void set_has_destinstanceid();
  inline void clear_has_destinstanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint64 destinstanceid_;
  ::google::protobuf::uint32 destbagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqUseEquipSkillBook* default_instance_;
};
// -------------------------------------------------------------------

class stRetUseEquipSkillBook : public ::google::protobuf::Message {
 public:
  stRetUseEquipSkillBook();
  virtual ~stRetUseEquipSkillBook();

  stRetUseEquipSkillBook(const stRetUseEquipSkillBook& from);

  inline stRetUseEquipSkillBook& operator=(const stRetUseEquipSkillBook& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetUseEquipSkillBook& default_instance();

  void Swap(stRetUseEquipSkillBook* other);

  // implements Message ----------------------------------------------

  stRetUseEquipSkillBook* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetUseEquipSkillBook& from);
  void MergeFrom(const stRetUseEquipSkillBook& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetUseEquipSkillBook_eResult eResult;
  static const eResult eSuccess = stRetUseEquipSkillBook_eResult_eSuccess;
  static const eResult eItem_Not_Exist = stRetUseEquipSkillBook_eResult_eItem_Not_Exist;
  static const eResult eEquip_Cond_Not_Meet = stRetUseEquipSkillBook_eResult_eEquip_Cond_Not_Meet;
  static const eResult eDec_Item_Fail = stRetUseEquipSkillBook_eResult_eDec_Item_Fail;
  static const eResult eSkill_Exist = stRetUseEquipSkillBook_eResult_eSkill_Exist;
  static inline bool eResult_IsValid(int value) {
    return stRetUseEquipSkillBook_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetUseEquipSkillBook_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetUseEquipSkillBook_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetUseEquipSkillBook_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetUseEquipSkillBook_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetUseEquipSkillBook_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetUseEquipSkillBook_eResult_Parse(name, value);
  }

  typedef stRetUseEquipSkillBook_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetUseEquipSkillBook_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetUseEquipSkillBook_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetUseEquipSkillBook_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetUseEquipSkillBook_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetUseEquipSkillBook_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetUseEquipSkillBook_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetUseEquipSkillBook_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetUseEquipSkillBook_ProtoModID_Parse(name, value);
  }

  typedef stRetUseEquipSkillBook_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetUseEquipSkillBook_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetUseEquipSkillBook_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetUseEquipSkillBook_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetUseEquipSkillBook_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetUseEquipSkillBook_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetUseEquipSkillBook_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetUseEquipSkillBook_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetUseEquipSkillBook_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRetUseEquipSkillBook.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRetUseEquipSkillBook_eResult result() const;
  inline void set_result(::Role::stRetUseEquipSkillBook_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetUseEquipSkillBook)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetUseEquipSkillBook* default_instance_;
};
// -------------------------------------------------------------------

class stReqBreakEquip : public ::google::protobuf::Message {
 public:
  stReqBreakEquip();
  virtual ~stReqBreakEquip();

  stReqBreakEquip(const stReqBreakEquip& from);

  inline stReqBreakEquip& operator=(const stReqBreakEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBreakEquip& default_instance();

  void Swap(stReqBreakEquip* other);

  // implements Message ----------------------------------------------

  stReqBreakEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBreakEquip& from);
  void MergeFrom(const stReqBreakEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBreakEquip_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBreakEquip_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBreakEquip_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBreakEquip_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBreakEquip_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBreakEquip_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBreakEquip_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBreakEquip_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBreakEquip_ProtoModID_Parse(name, value);
  }

  typedef stReqBreakEquip_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBreakEquip_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBreakEquip_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBreakEquip_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBreakEquip_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBreakEquip_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBreakEquip_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBreakEquip_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBreakEquip_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqBreakEquip)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqBreakEquip* default_instance_;
};
// -------------------------------------------------------------------

class stBreakEquipResult : public ::google::protobuf::Message {
 public:
  stBreakEquipResult();
  virtual ~stBreakEquipResult();

  stBreakEquipResult(const stBreakEquipResult& from);

  inline stBreakEquipResult& operator=(const stBreakEquipResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBreakEquipResult& default_instance();

  void Swap(stBreakEquipResult* other);

  // implements Message ----------------------------------------------

  stBreakEquipResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBreakEquipResult& from);
  void MergeFrom(const stBreakEquipResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBreakEquipResult_eResult eResult;
  static const eResult eSUCCESS = stBreakEquipResult_eResult_eSUCCESS;
  static const eResult eEQUIP_NOT_EXIST = stBreakEquipResult_eResult_eEQUIP_NOT_EXIST;
  static const eResult eINNER_ERROR = stBreakEquipResult_eResult_eINNER_ERROR;
  static const eResult eGOLDCOIN_NOT_ENOUGH = stBreakEquipResult_eResult_eGOLDCOIN_NOT_ENOUGH;
  static const eResult eITEM_NOT_ENOUGH = stBreakEquipResult_eResult_eITEM_NOT_ENOUGH;
  static const eResult eRAISE_LV_LIMIT = stBreakEquipResult_eResult_eRAISE_LV_LIMIT;
  static const eResult eFULL_LV = stBreakEquipResult_eResult_eFULL_LV;
  static const eResult eITEM_NOT_ORANGE = stBreakEquipResult_eResult_eITEM_NOT_ORANGE;
  static inline bool eResult_IsValid(int value) {
    return stBreakEquipResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stBreakEquipResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stBreakEquipResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stBreakEquipResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stBreakEquipResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stBreakEquipResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stBreakEquipResult_eResult_Parse(name, value);
  }

  typedef stBreakEquipResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBreakEquipResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBreakEquipResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBreakEquipResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBreakEquipResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBreakEquipResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBreakEquipResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBreakEquipResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBreakEquipResult_ProtoModID_Parse(name, value);
  }

  typedef stBreakEquipResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBreakEquipResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBreakEquipResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBreakEquipResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBreakEquipResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBreakEquipResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBreakEquipResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBreakEquipResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBreakEquipResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stBreakEquipResult.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stBreakEquipResult_eResult result() const;
  inline void set_result(::Role::stBreakEquipResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stBreakEquipResult)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stBreakEquipResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRecastHero : public ::google::protobuf::Message {
 public:
  stReqRecastHero();
  virtual ~stReqRecastHero();

  stReqRecastHero(const stReqRecastHero& from);

  inline stReqRecastHero& operator=(const stReqRecastHero& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRecastHero& default_instance();

  void Swap(stReqRecastHero* other);

  // implements Message ----------------------------------------------

  stReqRecastHero* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRecastHero& from);
  void MergeFrom(const stReqRecastHero& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRecastHero_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRecastHero_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRecastHero_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRecastHero_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRecastHero_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRecastHero_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRecastHero_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRecastHero_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRecastHero_ProtoModID_Parse(name, value);
  }

  typedef stReqRecastHero_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRecastHero_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRecastHero_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRecastHero_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRecastHero_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRecastHero_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRecastHero_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRecastHero_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRecastHero_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 heroID = 2;
  inline int heroid_size() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 2;
  inline ::google::protobuf::uint32 heroid(int index) const;
  inline void set_heroid(int index, ::google::protobuf::uint32 value);
  inline void add_heroid(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      heroid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_heroid();

  // @@protoc_insertion_point(class_scope:Role.stReqRecastHero)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRecastHero* default_instance_;
};
// -------------------------------------------------------------------

class stRecastHeroResult : public ::google::protobuf::Message {
 public:
  stRecastHeroResult();
  virtual ~stRecastHeroResult();

  stRecastHeroResult(const stRecastHeroResult& from);

  inline stRecastHeroResult& operator=(const stRecastHeroResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRecastHeroResult& default_instance();

  void Swap(stRecastHeroResult* other);

  // implements Message ----------------------------------------------

  stRecastHeroResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRecastHeroResult& from);
  void MergeFrom(const stRecastHeroResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRecastHeroResult_Result Result;
  static const Result SUCCESS = stRecastHeroResult_Result_SUCCESS;
  static const Result DIAMOND_NOT_ENOUGH = stRecastHeroResult_Result_DIAMOND_NOT_ENOUGH;
  static const Result BAG_FULL = stRecastHeroResult_Result_BAG_FULL;
  static const Result CANNT_SMELT = stRecastHeroResult_Result_CANNT_SMELT;
  static const Result HERO_NOT_EXIST = stRecastHeroResult_Result_HERO_NOT_EXIST;
  static const Result INNER_ERROR = stRecastHeroResult_Result_INNER_ERROR;
  static inline bool Result_IsValid(int value) {
    return stRecastHeroResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stRecastHeroResult_Result_Result_MIN;
  static const Result Result_MAX =
    stRecastHeroResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stRecastHeroResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stRecastHeroResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stRecastHeroResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stRecastHeroResult_Result_Parse(name, value);
  }

  typedef stRecastHeroResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRecastHeroResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRecastHeroResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRecastHeroResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRecastHeroResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRecastHeroResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRecastHeroResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRecastHeroResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRecastHeroResult_ProtoModID_Parse(name, value);
  }

  typedef stRecastHeroResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRecastHeroResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRecastHeroResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRecastHeroResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRecastHeroResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRecastHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRecastHeroResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRecastHeroResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRecastHeroResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRecastHeroResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRecastHeroResult_Result result() const;
  inline void set_result(::Role::stRecastHeroResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stRecastHeroResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRecastHeroResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqChangeName : public ::google::protobuf::Message {
 public:
  stReqChangeName();
  virtual ~stReqChangeName();

  stReqChangeName(const stReqChangeName& from);

  inline stReqChangeName& operator=(const stReqChangeName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChangeName& default_instance();

  void Swap(stReqChangeName* other);

  // implements Message ----------------------------------------------

  stReqChangeName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChangeName& from);
  void MergeFrom(const stReqChangeName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChangeName_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChangeName_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChangeName_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChangeName_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChangeName_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChangeName_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChangeName_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChangeName_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChangeName_ProtoModID_Parse(name, value);
  }

  typedef stReqChangeName_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChangeName_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChangeName_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChangeName_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChangeName_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChangeName_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChangeName_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChangeName_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChangeName_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqChangeName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqChangeName* default_instance_;
};
// -------------------------------------------------------------------

class stChangeNameResult : public ::google::protobuf::Message {
 public:
  stChangeNameResult();
  virtual ~stChangeNameResult();

  stChangeNameResult(const stChangeNameResult& from);

  inline stChangeNameResult& operator=(const stChangeNameResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChangeNameResult& default_instance();

  void Swap(stChangeNameResult* other);

  // implements Message ----------------------------------------------

  stChangeNameResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChangeNameResult& from);
  void MergeFrom(const stChangeNameResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChangeNameResult_eResult eResult;
  static const eResult eSuccess = stChangeNameResult_eResult_eSuccess;
  static const eResult eNot_Enough_Diamond = stChangeNameResult_eResult_eNot_Enough_Diamond;
  static const eResult eName_Occupied = stChangeNameResult_eResult_eName_Occupied;
  static inline bool eResult_IsValid(int value) {
    return stChangeNameResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stChangeNameResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stChangeNameResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stChangeNameResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stChangeNameResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stChangeNameResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stChangeNameResult_eResult_Parse(name, value);
  }

  typedef stChangeNameResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChangeNameResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChangeNameResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChangeNameResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChangeNameResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChangeNameResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChangeNameResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChangeNameResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChangeNameResult_ProtoModID_Parse(name, value);
  }

  typedef stChangeNameResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChangeNameResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChangeNameResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChangeNameResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChangeNameResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChangeNameResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChangeNameResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChangeNameResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChangeNameResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stChangeNameResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stChangeNameResult_eResult result() const;
  inline void set_result(::Role::stChangeNameResult_eResult value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Role.stChangeNameResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stChangeNameResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenBuyGoldWindow : public ::google::protobuf::Message {
 public:
  stReqOpenBuyGoldWindow();
  virtual ~stReqOpenBuyGoldWindow();

  stReqOpenBuyGoldWindow(const stReqOpenBuyGoldWindow& from);

  inline stReqOpenBuyGoldWindow& operator=(const stReqOpenBuyGoldWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenBuyGoldWindow& default_instance();

  void Swap(stReqOpenBuyGoldWindow* other);

  // implements Message ----------------------------------------------

  stReqOpenBuyGoldWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenBuyGoldWindow& from);
  void MergeFrom(const stReqOpenBuyGoldWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenBuyGoldWindow_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenBuyGoldWindow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenBuyGoldWindow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenBuyGoldWindow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenBuyGoldWindow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenBuyGoldWindow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenBuyGoldWindow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenBuyGoldWindow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenBuyGoldWindow_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenBuyGoldWindow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenBuyGoldWindow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenBuyGoldWindow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenBuyGoldWindow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenBuyGoldWindow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenBuyGoldWindow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenBuyGoldWindow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenBuyGoldWindow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenBuyGoldWindow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqOpenBuyGoldWindow)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenBuyGoldWindow* default_instance_;
};
// -------------------------------------------------------------------

class stOpenBuyGoldWindowResult : public ::google::protobuf::Message {
 public:
  stOpenBuyGoldWindowResult();
  virtual ~stOpenBuyGoldWindowResult();

  stOpenBuyGoldWindowResult(const stOpenBuyGoldWindowResult& from);

  inline stOpenBuyGoldWindowResult& operator=(const stOpenBuyGoldWindowResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpenBuyGoldWindowResult& default_instance();

  void Swap(stOpenBuyGoldWindowResult* other);

  // implements Message ----------------------------------------------

  stOpenBuyGoldWindowResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpenBuyGoldWindowResult& from);
  void MergeFrom(const stOpenBuyGoldWindowResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpenBuyGoldWindowResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpenBuyGoldWindowResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpenBuyGoldWindowResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpenBuyGoldWindowResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpenBuyGoldWindowResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpenBuyGoldWindowResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpenBuyGoldWindowResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpenBuyGoldWindowResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpenBuyGoldWindowResult_ProtoModID_Parse(name, value);
  }

  typedef stOpenBuyGoldWindowResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpenBuyGoldWindowResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpenBuyGoldWindowResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpenBuyGoldWindowResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpenBuyGoldWindowResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpenBuyGoldWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpenBuyGoldWindowResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpenBuyGoldWindowResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpenBuyGoldWindowResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 buyCount = 1;
  inline bool has_buycount() const;
  inline void clear_buycount();
  static const int kBuyCountFieldNumber = 1;
  inline ::google::protobuf::uint32 buycount() const;
  inline void set_buycount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stOpenBuyGoldWindowResult)
 private:
  inline void set_has_buycount();
  inline void clear_has_buycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 buycount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stOpenBuyGoldWindowResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqBuyGold : public ::google::protobuf::Message {
 public:
  stReqBuyGold();
  virtual ~stReqBuyGold();

  stReqBuyGold(const stReqBuyGold& from);

  inline stReqBuyGold& operator=(const stReqBuyGold& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBuyGold& default_instance();

  void Swap(stReqBuyGold* other);

  // implements Message ----------------------------------------------

  stReqBuyGold* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBuyGold& from);
  void MergeFrom(const stReqBuyGold& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBuyGold_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBuyGold_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBuyGold_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBuyGold_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBuyGold_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBuyGold_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBuyGold_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBuyGold_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBuyGold_ProtoModID_Parse(name, value);
  }

  typedef stReqBuyGold_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBuyGold_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBuyGold_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBuyGold_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBuyGold_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBuyGold_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBuyGold_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBuyGold_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBuyGold_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqBuyGold)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqBuyGold* default_instance_;
};
// -------------------------------------------------------------------

class stBuyGoldResult : public ::google::protobuf::Message {
 public:
  stBuyGoldResult();
  virtual ~stBuyGoldResult();

  stBuyGoldResult(const stBuyGoldResult& from);

  inline stBuyGoldResult& operator=(const stBuyGoldResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyGoldResult& default_instance();

  void Swap(stBuyGoldResult* other);

  // implements Message ----------------------------------------------

  stBuyGoldResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyGoldResult& from);
  void MergeFrom(const stBuyGoldResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyGoldResult_eResult eResult;
  static const eResult eSuccess = stBuyGoldResult_eResult_eSuccess;
  static const eResult eInner_Cfg_Error = stBuyGoldResult_eResult_eInner_Cfg_Error;
  static const eResult eGoldCoin_Not_Enough = stBuyGoldResult_eResult_eGoldCoin_Not_Enough;
  static const eResult eRole_Vip_Limit = stBuyGoldResult_eResult_eRole_Vip_Limit;
  static inline bool eResult_IsValid(int value) {
    return stBuyGoldResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stBuyGoldResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stBuyGoldResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stBuyGoldResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stBuyGoldResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stBuyGoldResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stBuyGoldResult_eResult_Parse(name, value);
  }

  typedef stBuyGoldResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyGoldResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyGoldResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyGoldResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyGoldResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyGoldResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyGoldResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyGoldResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyGoldResult_ProtoModID_Parse(name, value);
  }

  typedef stBuyGoldResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyGoldResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyGoldResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyGoldResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyGoldResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyGoldResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyGoldResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyGoldResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyGoldResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stBuyGoldResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stBuyGoldResult_eResult result() const;
  inline void set_result(::Role::stBuyGoldResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stBuyGoldResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stBuyGoldResult* default_instance_;
};
// -------------------------------------------------------------------

class stSendImpactHeroInfo : public ::google::protobuf::Message {
 public:
  stSendImpactHeroInfo();
  virtual ~stSendImpactHeroInfo();

  stSendImpactHeroInfo(const stSendImpactHeroInfo& from);

  inline stSendImpactHeroInfo& operator=(const stSendImpactHeroInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendImpactHeroInfo& default_instance();

  void Swap(stSendImpactHeroInfo* other);

  // implements Message ----------------------------------------------

  stSendImpactHeroInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendImpactHeroInfo& from);
  void MergeFrom(const stSendImpactHeroInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendImpactHeroInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendImpactHeroInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendImpactHeroInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendImpactHeroInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendImpactHeroInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendImpactHeroInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendImpactHeroInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendImpactHeroInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendImpactHeroInfo_ProtoModID_Parse(name, value);
  }

  typedef stSendImpactHeroInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendImpactHeroInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendImpactHeroInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendImpactHeroInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendImpactHeroInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendImpactHeroInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendImpactHeroInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendImpactHeroInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendImpactHeroInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stImpactHeroInfo data = 1;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::Role::stImpactHeroInfo& data(int index) const;
  inline ::Role::stImpactHeroInfo* mutable_data(int index);
  inline ::Role::stImpactHeroInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stImpactHeroInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stImpactHeroInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:Role.stSendImpactHeroInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stImpactHeroInfo > data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSendImpactHeroInfo* default_instance_;
};
// -------------------------------------------------------------------

class stExpBookLevelLimit : public ::google::protobuf::Message {
 public:
  stExpBookLevelLimit();
  virtual ~stExpBookLevelLimit();

  stExpBookLevelLimit(const stExpBookLevelLimit& from);

  inline stExpBookLevelLimit& operator=(const stExpBookLevelLimit& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stExpBookLevelLimit& default_instance();

  void Swap(stExpBookLevelLimit* other);

  // implements Message ----------------------------------------------

  stExpBookLevelLimit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stExpBookLevelLimit& from);
  void MergeFrom(const stExpBookLevelLimit& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stExpBookLevelLimit_eResult eResult;
  static const eResult LV_TOO_LOW = stExpBookLevelLimit_eResult_LV_TOO_LOW;
  static const eResult LV_TOO_HIGH = stExpBookLevelLimit_eResult_LV_TOO_HIGH;
  static inline bool eResult_IsValid(int value) {
    return stExpBookLevelLimit_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stExpBookLevelLimit_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stExpBookLevelLimit_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stExpBookLevelLimit_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stExpBookLevelLimit_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stExpBookLevelLimit_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stExpBookLevelLimit_eResult_Parse(name, value);
  }

  typedef stExpBookLevelLimit_ProtoModID ProtoModID;
  static const ProtoModID ModID = stExpBookLevelLimit_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stExpBookLevelLimit_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stExpBookLevelLimit_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stExpBookLevelLimit_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stExpBookLevelLimit_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stExpBookLevelLimit_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stExpBookLevelLimit_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stExpBookLevelLimit_ProtoModID_Parse(name, value);
  }

  typedef stExpBookLevelLimit_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stExpBookLevelLimit_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stExpBookLevelLimit_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stExpBookLevelLimit_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stExpBookLevelLimit_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stExpBookLevelLimit_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stExpBookLevelLimit_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stExpBookLevelLimit_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stExpBookLevelLimit_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stExpBookLevelLimit.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stExpBookLevelLimit_eResult result() const;
  inline void set_result(::Role::stExpBookLevelLimit_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stExpBookLevelLimit)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stExpBookLevelLimit* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyPubUniqueID : public ::google::protobuf::Message {
 public:
  stNotifyPubUniqueID();
  virtual ~stNotifyPubUniqueID();

  stNotifyPubUniqueID(const stNotifyPubUniqueID& from);

  inline stNotifyPubUniqueID& operator=(const stNotifyPubUniqueID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyPubUniqueID& default_instance();

  void Swap(stNotifyPubUniqueID* other);

  // implements Message ----------------------------------------------

  stNotifyPubUniqueID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyPubUniqueID& from);
  void MergeFrom(const stNotifyPubUniqueID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyPubUniqueID_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyPubUniqueID_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyPubUniqueID_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyPubUniqueID_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyPubUniqueID_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyPubUniqueID_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyPubUniqueID_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyPubUniqueID_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyPubUniqueID_ProtoModID_Parse(name, value);
  }

  typedef stNotifyPubUniqueID_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyPubUniqueID_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyPubUniqueID_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyPubUniqueID_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyPubUniqueID_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyPubUniqueID_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyPubUniqueID_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyPubUniqueID_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyPubUniqueID_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 uniqueID = 1;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIDFieldNumber = 1;
  inline ::google::protobuf::uint32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stNotifyPubUniqueID)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uniqueid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stNotifyPubUniqueID* default_instance_;
};
// -------------------------------------------------------------------

class EnchantItem : public ::google::protobuf::Message {
 public:
  EnchantItem();
  virtual ~EnchantItem();

  EnchantItem(const EnchantItem& from);

  inline EnchantItem& operator=(const EnchantItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EnchantItem& default_instance();

  void Swap(EnchantItem* other);

  // implements Message ----------------------------------------------

  EnchantItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EnchantItem& from);
  void MergeFrom(const EnchantItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional uint32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.EnchantItem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static EnchantItem* default_instance_;
};
// -------------------------------------------------------------------

class stReqEnchant : public ::google::protobuf::Message {
 public:
  stReqEnchant();
  virtual ~stReqEnchant();

  stReqEnchant(const stReqEnchant& from);

  inline stReqEnchant& operator=(const stReqEnchant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEnchant& default_instance();

  void Swap(stReqEnchant* other);

  // implements Message ----------------------------------------------

  stReqEnchant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEnchant& from);
  void MergeFrom(const stReqEnchant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEnchant_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEnchant_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEnchant_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEnchant_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEnchant_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEnchant_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEnchant_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEnchant_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEnchant_ProtoModID_Parse(name, value);
  }

  typedef stReqEnchant_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEnchant_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEnchant_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEnchant_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEnchant_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEnchant_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEnchant_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEnchant_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // repeated .Role.EnchantItem item = 3;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 3;
  inline const ::Role::EnchantItem& item(int index) const;
  inline ::Role::EnchantItem* mutable_item(int index);
  inline ::Role::EnchantItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::EnchantItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::EnchantItem >*
      mutable_item();

  // optional uint64 enchantId = 4;
  inline bool has_enchantid() const;
  inline void clear_enchantid();
  static const int kEnchantIdFieldNumber = 4;
  inline ::google::protobuf::uint64 enchantid() const;
  inline void set_enchantid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqEnchant)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_enchantid();
  inline void clear_has_enchantid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::RepeatedPtrField< ::Role::EnchantItem > item_;
  ::google::protobuf::uint64 enchantid_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqEnchant* default_instance_;
};
// -------------------------------------------------------------------

class stRetEnchant : public ::google::protobuf::Message {
 public:
  stRetEnchant();
  virtual ~stRetEnchant();

  stRetEnchant(const stRetEnchant& from);

  inline stRetEnchant& operator=(const stRetEnchant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetEnchant& default_instance();

  void Swap(stRetEnchant* other);

  // implements Message ----------------------------------------------

  stRetEnchant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetEnchant& from);
  void MergeFrom(const stRetEnchant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetEnchant_eResult eResult;
  static const eResult eSuccess = stRetEnchant_eResult_eSuccess;
  static const eResult eGold_Less = stRetEnchant_eResult_eGold_Less;
  static const eResult ePiece_Less = stRetEnchant_eResult_ePiece_Less;
  static const eResult eEnchant_Less = stRetEnchant_eResult_eEnchant_Less;
  static const eResult eNo_Such_Fashion = stRetEnchant_eResult_eNo_Such_Fashion;
  static const eResult eEnchant_Locked = stRetEnchant_eResult_eEnchant_Locked;
  static const eResult ePiece_Wrong_Num = stRetEnchant_eResult_ePiece_Wrong_Num;
  static const eResult eNo_Such_Config = stRetEnchant_eResult_eNo_Such_Config;
  static const eResult eMax_Prop_Num = stRetEnchant_eResult_eMax_Prop_Num;
  static const eResult eMax_Enchant_Num = stRetEnchant_eResult_eMax_Enchant_Num;
  static inline bool eResult_IsValid(int value) {
    return stRetEnchant_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetEnchant_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetEnchant_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetEnchant_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetEnchant_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetEnchant_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetEnchant_eResult_Parse(name, value);
  }

  typedef stRetEnchant_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetEnchant_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetEnchant_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetEnchant_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetEnchant_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetEnchant_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetEnchant_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetEnchant_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetEnchant_ProtoModID_Parse(name, value);
  }

  typedef stRetEnchant_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetEnchant_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetEnchant_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetEnchant_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetEnchant_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetEnchant_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetEnchant_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetEnchant_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint64 id() const;
  inline void set_id(::google::protobuf::uint64 value);

  // optional .Role.stRetEnchant.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRetEnchant_eResult result() const;
  inline void set_result(::Role::stRetEnchant_eResult value);

  // optional .Role.stEnchantInfo enchant = 4;
  inline bool has_enchant() const;
  inline void clear_enchant();
  static const int kEnchantFieldNumber = 4;
  inline const ::Role::stEnchantInfo& enchant() const;
  inline ::Role::stEnchantInfo* mutable_enchant();
  inline ::Role::stEnchantInfo* release_enchant();
  inline void set_allocated_enchant(::Role::stEnchantInfo* enchant);

  // @@protoc_insertion_point(class_scope:Role.stRetEnchant)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_enchant();
  inline void clear_has_enchant();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 id_;
  ::google::protobuf::uint32 bagtype_;
  int result_;
  ::Role::stEnchantInfo* enchant_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetEnchant* default_instance_;
};
// -------------------------------------------------------------------

class stReqRecastEnchant : public ::google::protobuf::Message {
 public:
  stReqRecastEnchant();
  virtual ~stReqRecastEnchant();

  stReqRecastEnchant(const stReqRecastEnchant& from);

  inline stReqRecastEnchant& operator=(const stReqRecastEnchant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRecastEnchant& default_instance();

  void Swap(stReqRecastEnchant* other);

  // implements Message ----------------------------------------------

  stReqRecastEnchant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRecastEnchant& from);
  void MergeFrom(const stReqRecastEnchant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRecastEnchant_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRecastEnchant_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRecastEnchant_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRecastEnchant_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRecastEnchant_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRecastEnchant_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRecastEnchant_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRecastEnchant_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRecastEnchant_ProtoModID_Parse(name, value);
  }

  typedef stReqRecastEnchant_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRecastEnchant_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRecastEnchant_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRecastEnchant_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRecastEnchant_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRecastEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRecastEnchant_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRecastEnchant_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRecastEnchant_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRecastEnchant)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRecastEnchant* default_instance_;
};
// -------------------------------------------------------------------

class stRetRecastEnchant : public ::google::protobuf::Message {
 public:
  stRetRecastEnchant();
  virtual ~stRetRecastEnchant();

  stRetRecastEnchant(const stRetRecastEnchant& from);

  inline stRetRecastEnchant& operator=(const stRetRecastEnchant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRecastEnchant& default_instance();

  void Swap(stRetRecastEnchant* other);

  // implements Message ----------------------------------------------

  stRetRecastEnchant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRecastEnchant& from);
  void MergeFrom(const stRetRecastEnchant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRecastEnchant_eResult eResult;
  static const eResult eSuccess = stRetRecastEnchant_eResult_eSuccess;
  static const eResult eNo_Such_Fashion = stRetRecastEnchant_eResult_eNo_Such_Fashion;
  static const eResult eBag_Full = stRetRecastEnchant_eResult_eBag_Full;
  static const eResult eLimited_Fashion = stRetRecastEnchant_eResult_eLimited_Fashion;
  static const eResult eDiamond_Less = stRetRecastEnchant_eResult_eDiamond_Less;
  static inline bool eResult_IsValid(int value) {
    return stRetRecastEnchant_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetRecastEnchant_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetRecastEnchant_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetRecastEnchant_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetRecastEnchant_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetRecastEnchant_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetRecastEnchant_eResult_Parse(name, value);
  }

  typedef stRetRecastEnchant_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRecastEnchant_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRecastEnchant_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRecastEnchant_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRecastEnchant_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRecastEnchant_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRecastEnchant_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRecastEnchant_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRecastEnchant_ProtoModID_Parse(name, value);
  }

  typedef stRetRecastEnchant_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRecastEnchant_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRecastEnchant_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRecastEnchant_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRecastEnchant_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRecastEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRecastEnchant_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRecastEnchant_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRecastEnchant_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stRetRecastEnchant.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRetRecastEnchant_eResult result() const;
  inline void set_result(::Role::stRetRecastEnchant_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetRecastEnchant)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetRecastEnchant* default_instance_;
};
// -------------------------------------------------------------------

class stReqLockEnchant : public ::google::protobuf::Message {
 public:
  stReqLockEnchant();
  virtual ~stReqLockEnchant();

  stReqLockEnchant(const stReqLockEnchant& from);

  inline stReqLockEnchant& operator=(const stReqLockEnchant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqLockEnchant& default_instance();

  void Swap(stReqLockEnchant* other);

  // implements Message ----------------------------------------------

  stReqLockEnchant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqLockEnchant& from);
  void MergeFrom(const stReqLockEnchant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqLockEnchant_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqLockEnchant_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqLockEnchant_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqLockEnchant_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqLockEnchant_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqLockEnchant_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqLockEnchant_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqLockEnchant_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqLockEnchant_ProtoModID_Parse(name, value);
  }

  typedef stReqLockEnchant_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqLockEnchant_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqLockEnchant_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqLockEnchant_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqLockEnchant_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqLockEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqLockEnchant_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqLockEnchant_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqLockEnchant_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 isLock = 4;
  inline bool has_islock() const;
  inline void clear_islock();
  static const int kIsLockFieldNumber = 4;
  inline ::google::protobuf::uint32 islock() const;
  inline void set_islock(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqLockEnchant)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_islock();
  inline void clear_has_islock();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 islock_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqLockEnchant* default_instance_;
};
// -------------------------------------------------------------------

class stRetLockEnchant : public ::google::protobuf::Message {
 public:
  stRetLockEnchant();
  virtual ~stRetLockEnchant();

  stRetLockEnchant(const stRetLockEnchant& from);

  inline stRetLockEnchant& operator=(const stRetLockEnchant& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetLockEnchant& default_instance();

  void Swap(stRetLockEnchant* other);

  // implements Message ----------------------------------------------

  stRetLockEnchant* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetLockEnchant& from);
  void MergeFrom(const stRetLockEnchant& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetLockEnchant_eResult eResult;
  static const eResult eSuccess = stRetLockEnchant_eResult_eSuccess;
  static const eResult eNo_Such_Fashion = stRetLockEnchant_eResult_eNo_Such_Fashion;
  static const eResult eNo_Such_Index = stRetLockEnchant_eResult_eNo_Such_Index;
  static inline bool eResult_IsValid(int value) {
    return stRetLockEnchant_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetLockEnchant_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetLockEnchant_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetLockEnchant_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetLockEnchant_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetLockEnchant_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetLockEnchant_eResult_Parse(name, value);
  }

  typedef stRetLockEnchant_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetLockEnchant_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetLockEnchant_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetLockEnchant_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetLockEnchant_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetLockEnchant_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetLockEnchant_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetLockEnchant_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetLockEnchant_ProtoModID_Parse(name, value);
  }

  typedef stRetLockEnchant_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetLockEnchant_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetLockEnchant_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetLockEnchant_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetLockEnchant_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetLockEnchant_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetLockEnchant_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetLockEnchant_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetLockEnchant_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // optional uint32 isLock = 4;
  inline bool has_islock() const;
  inline void clear_islock();
  static const int kIsLockFieldNumber = 4;
  inline ::google::protobuf::uint32 islock() const;
  inline void set_islock(::google::protobuf::uint32 value);

  // optional .Role.stRetLockEnchant.eResult result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::Role::stRetLockEnchant_eResult result() const;
  inline void set_result(::Role::stRetLockEnchant_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetLockEnchant)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_islock();
  inline void clear_has_islock();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 index_;
  ::google::protobuf::uint32 islock_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetLockEnchant* default_instance_;
};
// -------------------------------------------------------------------

class stHeroLeagueItem : public ::google::protobuf::Message {
 public:
  stHeroLeagueItem();
  virtual ~stHeroLeagueItem();

  stHeroLeagueItem(const stHeroLeagueItem& from);

  inline stHeroLeagueItem& operator=(const stHeroLeagueItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroLeagueItem& default_instance();

  void Swap(stHeroLeagueItem* other);

  // implements Message ----------------------------------------------

  stHeroLeagueItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroLeagueItem& from);
  void MergeFrom(const stHeroLeagueItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional uint32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // optional uint32 battlePower = 3;
  inline bool has_battlepower() const;
  inline void clear_battlepower();
  static const int kBattlePowerFieldNumber = 3;
  inline ::google::protobuf::uint32 battlepower() const;
  inline void set_battlepower(::google::protobuf::uint32 value);

  // optional uint32 score = 4;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 score() const;
  inline void set_score(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stHeroLeagueItem)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_battlepower();
  inline void clear_has_battlepower();
  inline void set_has_score();
  inline void clear_has_score();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 level_;
  ::google::protobuf::uint32 battlepower_;
  ::google::protobuf::uint32 score_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stHeroLeagueItem* default_instance_;
};
// -------------------------------------------------------------------

class stHerLeagueResult : public ::google::protobuf::Message {
 public:
  stHerLeagueResult();
  virtual ~stHerLeagueResult();

  stHerLeagueResult(const stHerLeagueResult& from);

  inline stHerLeagueResult& operator=(const stHerLeagueResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHerLeagueResult& default_instance();

  void Swap(stHerLeagueResult* other);

  // implements Message ----------------------------------------------

  stHerLeagueResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHerLeagueResult& from);
  void MergeFrom(const stHerLeagueResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHerLeagueResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHerLeagueResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHerLeagueResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHerLeagueResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHerLeagueResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHerLeagueResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHerLeagueResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHerLeagueResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHerLeagueResult_ProtoModID_Parse(name, value);
  }

  typedef stHerLeagueResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHerLeagueResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHerLeagueResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHerLeagueResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHerLeagueResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHerLeagueResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHerLeagueResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHerLeagueResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHerLeagueResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stHeroLeagueItem winer = 1;
  inline bool has_winer() const;
  inline void clear_winer();
  static const int kWinerFieldNumber = 1;
  inline const ::Role::stHeroLeagueItem& winer() const;
  inline ::Role::stHeroLeagueItem* mutable_winer();
  inline ::Role::stHeroLeagueItem* release_winer();
  inline void set_allocated_winer(::Role::stHeroLeagueItem* winer);

  // optional .Role.stHeroLeagueItem loser = 2;
  inline bool has_loser() const;
  inline void clear_loser();
  static const int kLoserFieldNumber = 2;
  inline const ::Role::stHeroLeagueItem& loser() const;
  inline ::Role::stHeroLeagueItem* mutable_loser();
  inline ::Role::stHeroLeagueItem* release_loser();
  inline void set_allocated_loser(::Role::stHeroLeagueItem* loser);

  // optional uint32 winerScore = 3;
  inline bool has_winerscore() const;
  inline void clear_winerscore();
  static const int kWinerScoreFieldNumber = 3;
  inline ::google::protobuf::uint32 winerscore() const;
  inline void set_winerscore(::google::protobuf::uint32 value);

  // optional uint32 loserScore = 4;
  inline bool has_loserscore() const;
  inline void clear_loserscore();
  static const int kLoserScoreFieldNumber = 4;
  inline ::google::protobuf::uint32 loserscore() const;
  inline void set_loserscore(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stHerLeagueResult)
 private:
  inline void set_has_winer();
  inline void clear_has_winer();
  inline void set_has_loser();
  inline void clear_has_loser();
  inline void set_has_winerscore();
  inline void clear_has_winerscore();
  inline void set_has_loserscore();
  inline void clear_has_loserscore();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stHeroLeagueItem* winer_;
  ::Role::stHeroLeagueItem* loser_;
  ::google::protobuf::uint32 winerscore_;
  ::google::protobuf::uint32 loserscore_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stHerLeagueResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqHeroRune : public ::google::protobuf::Message {
 public:
  stReqHeroRune();
  virtual ~stReqHeroRune();

  stReqHeroRune(const stReqHeroRune& from);

  inline stReqHeroRune& operator=(const stReqHeroRune& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqHeroRune& default_instance();

  void Swap(stReqHeroRune* other);

  // implements Message ----------------------------------------------

  stReqHeroRune* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqHeroRune& from);
  void MergeFrom(const stReqHeroRune& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqHeroRune_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqHeroRune_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqHeroRune_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqHeroRune_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqHeroRune_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqHeroRune_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqHeroRune_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqHeroRune_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqHeroRune_ProtoModID_Parse(name, value);
  }

  typedef stReqHeroRune_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqHeroRune_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqHeroRune_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqHeroRune_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqHeroRune_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqHeroRune_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqHeroRune_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqHeroRune_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqHeroRune)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqHeroRune* default_instance_;
};
// -------------------------------------------------------------------

class stHeroRuneInfo : public ::google::protobuf::Message {
 public:
  stHeroRuneInfo();
  virtual ~stHeroRuneInfo();

  stHeroRuneInfo(const stHeroRuneInfo& from);

  inline stHeroRuneInfo& operator=(const stHeroRuneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHeroRuneInfo& default_instance();

  void Swap(stHeroRuneInfo* other);

  // implements Message ----------------------------------------------

  stHeroRuneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHeroRuneInfo& from);
  void MergeFrom(const stHeroRuneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 itemId = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 1;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 slot_index = 3;
  inline bool has_slot_index() const;
  inline void clear_slot_index();
  static const int kSlotIndexFieldNumber = 3;
  inline ::google::protobuf::uint32 slot_index() const;
  inline void set_slot_index(::google::protobuf::uint32 value);

  // optional uint32 pos = 4;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 4;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stHeroRuneInfo)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_slot_index();
  inline void clear_has_slot_index();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 itemid_;
  ::google::protobuf::uint32 slot_index_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stHeroRuneInfo* default_instance_;
};
// -------------------------------------------------------------------

class stRetHeroRune : public ::google::protobuf::Message {
 public:
  stRetHeroRune();
  virtual ~stRetHeroRune();

  stRetHeroRune(const stRetHeroRune& from);

  inline stRetHeroRune& operator=(const stRetHeroRune& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetHeroRune& default_instance();

  void Swap(stRetHeroRune* other);

  // implements Message ----------------------------------------------

  stRetHeroRune* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetHeroRune& from);
  void MergeFrom(const stRetHeroRune& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetHeroRune_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetHeroRune_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetHeroRune_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetHeroRune_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetHeroRune_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetHeroRune_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetHeroRune_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetHeroRune_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetHeroRune_ProtoModID_Parse(name, value);
  }

  typedef stRetHeroRune_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetHeroRune_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetHeroRune_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetHeroRune_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetHeroRune_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetHeroRune_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetHeroRune_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetHeroRune_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // repeated .Role.stHeroRuneInfo runes = 2;
  inline int runes_size() const;
  inline void clear_runes();
  static const int kRunesFieldNumber = 2;
  inline const ::Role::stHeroRuneInfo& runes(int index) const;
  inline ::Role::stHeroRuneInfo* mutable_runes(int index);
  inline ::Role::stHeroRuneInfo* add_runes();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >&
      runes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >*
      mutable_runes();

  // @@protoc_insertion_point(class_scope:Role.stRetHeroRune)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo > runes_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetHeroRune* default_instance_;
};
// -------------------------------------------------------------------

class stReqAddHeroRune : public ::google::protobuf::Message {
 public:
  stReqAddHeroRune();
  virtual ~stReqAddHeroRune();

  stReqAddHeroRune(const stReqAddHeroRune& from);

  inline stReqAddHeroRune& operator=(const stReqAddHeroRune& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAddHeroRune& default_instance();

  void Swap(stReqAddHeroRune* other);

  // implements Message ----------------------------------------------

  stReqAddHeroRune* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAddHeroRune& from);
  void MergeFrom(const stReqAddHeroRune& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAddHeroRune_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAddHeroRune_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAddHeroRune_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAddHeroRune_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAddHeroRune_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAddHeroRune_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAddHeroRune_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAddHeroRune_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAddHeroRune_ProtoModID_Parse(name, value);
  }

  typedef stReqAddHeroRune_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAddHeroRune_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAddHeroRune_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAddHeroRune_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAddHeroRune_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAddHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAddHeroRune_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAddHeroRune_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAddHeroRune_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqAddHeroRune)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqAddHeroRune* default_instance_;
};
// -------------------------------------------------------------------

class stRetAddHeroRune : public ::google::protobuf::Message {
 public:
  stRetAddHeroRune();
  virtual ~stRetAddHeroRune();

  stRetAddHeroRune(const stRetAddHeroRune& from);

  inline stRetAddHeroRune& operator=(const stRetAddHeroRune& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetAddHeroRune& default_instance();

  void Swap(stRetAddHeroRune* other);

  // implements Message ----------------------------------------------

  stRetAddHeroRune* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetAddHeroRune& from);
  void MergeFrom(const stRetAddHeroRune& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetAddHeroRune_eResult eResult;
  static const eResult eSuccess = stRetAddHeroRune_eResult_eSuccess;
  static const eResult eNo_Such_Hero = stRetAddHeroRune_eResult_eNo_Such_Hero;
  static const eResult eNo_Such_Rune = stRetAddHeroRune_eResult_eNo_Such_Rune;
  static const eResult eRune_Same_Attr = stRetAddHeroRune_eResult_eRune_Same_Attr;
  static const eResult eNo_Such_Pos = stRetAddHeroRune_eResult_eNo_Such_Pos;
  static const eResult eInner_Error = stRetAddHeroRune_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stRetAddHeroRune_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetAddHeroRune_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetAddHeroRune_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetAddHeroRune_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetAddHeroRune_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetAddHeroRune_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetAddHeroRune_eResult_Parse(name, value);
  }

  typedef stRetAddHeroRune_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetAddHeroRune_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetAddHeroRune_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetAddHeroRune_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetAddHeroRune_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetAddHeroRune_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetAddHeroRune_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetAddHeroRune_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetAddHeroRune_ProtoModID_Parse(name, value);
  }

  typedef stRetAddHeroRune_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetAddHeroRune_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetAddHeroRune_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetAddHeroRune_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetAddHeroRune_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetAddHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetAddHeroRune_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetAddHeroRune_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetAddHeroRune_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // repeated .Role.stHeroRuneInfo runes = 4;
  inline int runes_size() const;
  inline void clear_runes();
  static const int kRunesFieldNumber = 4;
  inline const ::Role::stHeroRuneInfo& runes(int index) const;
  inline ::Role::stHeroRuneInfo* mutable_runes(int index);
  inline ::Role::stHeroRuneInfo* add_runes();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >&
      runes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >*
      mutable_runes();

  // optional .Role.stRetAddHeroRune.eResult result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::Role::stRetAddHeroRune_eResult result() const;
  inline void set_result(::Role::stRetAddHeroRune_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetAddHeroRune)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo > runes_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetAddHeroRune* default_instance_;
};
// -------------------------------------------------------------------

class stReqDelHeroRune : public ::google::protobuf::Message {
 public:
  stReqDelHeroRune();
  virtual ~stReqDelHeroRune();

  stReqDelHeroRune(const stReqDelHeroRune& from);

  inline stReqDelHeroRune& operator=(const stReqDelHeroRune& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDelHeroRune& default_instance();

  void Swap(stReqDelHeroRune* other);

  // implements Message ----------------------------------------------

  stReqDelHeroRune* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDelHeroRune& from);
  void MergeFrom(const stReqDelHeroRune& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDelHeroRune_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDelHeroRune_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDelHeroRune_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDelHeroRune_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDelHeroRune_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDelHeroRune_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDelHeroRune_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDelHeroRune_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDelHeroRune_ProtoModID_Parse(name, value);
  }

  typedef stReqDelHeroRune_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDelHeroRune_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDelHeroRune_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDelHeroRune_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDelHeroRune_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDelHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDelHeroRune_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDelHeroRune_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDelHeroRune_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqDelHeroRune)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_pos();
  inline void clear_has_pos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 pos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqDelHeroRune* default_instance_;
};
// -------------------------------------------------------------------

class stRetDelHeroRune : public ::google::protobuf::Message {
 public:
  stRetDelHeroRune();
  virtual ~stRetDelHeroRune();

  stRetDelHeroRune(const stRetDelHeroRune& from);

  inline stRetDelHeroRune& operator=(const stRetDelHeroRune& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDelHeroRune& default_instance();

  void Swap(stRetDelHeroRune* other);

  // implements Message ----------------------------------------------

  stRetDelHeroRune* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDelHeroRune& from);
  void MergeFrom(const stRetDelHeroRune& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDelHeroRune_eResult eResult;
  static const eResult eSuccess = stRetDelHeroRune_eResult_eSuccess;
  static const eResult eNo_Such_Hero = stRetDelHeroRune_eResult_eNo_Such_Hero;
  static const eResult eNo_Such_Rune = stRetDelHeroRune_eResult_eNo_Such_Rune;
  static const eResult eNo_Such_Pos = stRetDelHeroRune_eResult_eNo_Such_Pos;
  static const eResult eRun_Bag_Full = stRetDelHeroRune_eResult_eRun_Bag_Full;
  static const eResult eInner_Error = stRetDelHeroRune_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stRetDelHeroRune_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetDelHeroRune_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetDelHeroRune_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetDelHeroRune_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetDelHeroRune_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetDelHeroRune_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetDelHeroRune_eResult_Parse(name, value);
  }

  typedef stRetDelHeroRune_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDelHeroRune_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDelHeroRune_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDelHeroRune_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDelHeroRune_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDelHeroRune_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDelHeroRune_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDelHeroRune_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDelHeroRune_ProtoModID_Parse(name, value);
  }

  typedef stRetDelHeroRune_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDelHeroRune_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDelHeroRune_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDelHeroRune_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDelHeroRune_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDelHeroRune_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDelHeroRune_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDelHeroRune_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDelHeroRune_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 pos = 3;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 3;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // repeated .Role.stHeroRuneInfo runes = 4;
  inline int runes_size() const;
  inline void clear_runes();
  static const int kRunesFieldNumber = 4;
  inline const ::Role::stHeroRuneInfo& runes(int index) const;
  inline ::Role::stHeroRuneInfo* mutable_runes(int index);
  inline ::Role::stHeroRuneInfo* add_runes();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >&
      runes() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >*
      mutable_runes();

  // optional .Role.stRetDelHeroRune.eResult result = 5;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 5;
  inline ::Role::stRetDelHeroRune_eResult result() const;
  inline void set_result(::Role::stRetDelHeroRune_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetDelHeroRune)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo > runes_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetDelHeroRune* default_instance_;
};
// -------------------------------------------------------------------

class stReqRunePieceCombine : public ::google::protobuf::Message {
 public:
  stReqRunePieceCombine();
  virtual ~stReqRunePieceCombine();

  stReqRunePieceCombine(const stReqRunePieceCombine& from);

  inline stReqRunePieceCombine& operator=(const stReqRunePieceCombine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRunePieceCombine& default_instance();

  void Swap(stReqRunePieceCombine* other);

  // implements Message ----------------------------------------------

  stReqRunePieceCombine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRunePieceCombine& from);
  void MergeFrom(const stReqRunePieceCombine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRunePieceCombine_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRunePieceCombine_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRunePieceCombine_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRunePieceCombine_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRunePieceCombine_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRunePieceCombine_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRunePieceCombine_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRunePieceCombine_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRunePieceCombine_ProtoModID_Parse(name, value);
  }

  typedef stReqRunePieceCombine_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRunePieceCombine_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRunePieceCombine_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRunePieceCombine_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRunePieceCombine_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRunePieceCombine_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRunePieceCombine_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRunePieceCombine_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRunePieceCombine_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 instanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRunePieceCombine)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRunePieceCombine* default_instance_;
};
// -------------------------------------------------------------------

class stRetRunePieceCombine : public ::google::protobuf::Message {
 public:
  stRetRunePieceCombine();
  virtual ~stRetRunePieceCombine();

  stRetRunePieceCombine(const stRetRunePieceCombine& from);

  inline stRetRunePieceCombine& operator=(const stRetRunePieceCombine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRunePieceCombine& default_instance();

  void Swap(stRetRunePieceCombine* other);

  // implements Message ----------------------------------------------

  stRetRunePieceCombine* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRunePieceCombine& from);
  void MergeFrom(const stRetRunePieceCombine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRunePieceCombine_eResult eResult;
  static const eResult eSuccess = stRetRunePieceCombine_eResult_eSuccess;
  static const eResult eLess_Of_Rune_Piece = stRetRunePieceCombine_eResult_eLess_Of_Rune_Piece;
  static const eResult eNo_Such_Rune_Piece = stRetRunePieceCombine_eResult_eNo_Such_Rune_Piece;
  static const eResult eRune_Bag_Full = stRetRunePieceCombine_eResult_eRune_Bag_Full;
  static const eResult eLess_Of_Soul_Fire = stRetRunePieceCombine_eResult_eLess_Of_Soul_Fire;
  static const eResult eInner_Error = stRetRunePieceCombine_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stRetRunePieceCombine_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetRunePieceCombine_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetRunePieceCombine_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetRunePieceCombine_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetRunePieceCombine_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetRunePieceCombine_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetRunePieceCombine_eResult_Parse(name, value);
  }

  typedef stRetRunePieceCombine_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRunePieceCombine_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRunePieceCombine_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRunePieceCombine_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRunePieceCombine_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRunePieceCombine_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRunePieceCombine_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRunePieceCombine_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRunePieceCombine_ProtoModID_Parse(name, value);
  }

  typedef stRetRunePieceCombine_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRunePieceCombine_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRunePieceCombine_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRunePieceCombine_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRunePieceCombine_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRunePieceCombine_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRunePieceCombine_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRunePieceCombine_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRunePieceCombine_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint64 instanceID = 1;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 1;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 itemId = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // optional .Role.stRetRunePieceCombine.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRetRunePieceCombine_eResult result() const;
  inline void set_result(::Role::stRetRunePieceCombine_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetRunePieceCombine)
 private:
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 itemid_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetRunePieceCombine* default_instance_;
};
// -------------------------------------------------------------------

class stReqRuneIntensify : public ::google::protobuf::Message {
 public:
  stReqRuneIntensify();
  virtual ~stReqRuneIntensify();

  stReqRuneIntensify(const stReqRuneIntensify& from);

  inline stReqRuneIntensify& operator=(const stReqRuneIntensify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRuneIntensify& default_instance();

  void Swap(stReqRuneIntensify* other);

  // implements Message ----------------------------------------------

  stReqRuneIntensify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRuneIntensify& from);
  void MergeFrom(const stReqRuneIntensify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRuneIntensify_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRuneIntensify_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRuneIntensify_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRuneIntensify_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRuneIntensify_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRuneIntensify_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRuneIntensify_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRuneIntensify_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRuneIntensify_ProtoModID_Parse(name, value);
  }

  typedef stReqRuneIntensify_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRuneIntensify_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRuneIntensify_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRuneIntensify_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRuneIntensify_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRuneIntensify_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRuneIntensify_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRuneIntensify_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRuneIntensify_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // repeated uint64 eatInstanceID = 3;
  inline int eatinstanceid_size() const;
  inline void clear_eatinstanceid();
  static const int kEatInstanceIDFieldNumber = 3;
  inline ::google::protobuf::uint64 eatinstanceid(int index) const;
  inline void set_eatinstanceid(int index, ::google::protobuf::uint64 value);
  inline void add_eatinstanceid(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      eatinstanceid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_eatinstanceid();

  // optional uint32 heroID = 4;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 4;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRuneIntensify)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 heroid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > eatinstanceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRuneIntensify* default_instance_;
};
// -------------------------------------------------------------------

class stRetRuneIntensify : public ::google::protobuf::Message {
 public:
  stRetRuneIntensify();
  virtual ~stRetRuneIntensify();

  stRetRuneIntensify(const stRetRuneIntensify& from);

  inline stRetRuneIntensify& operator=(const stRetRuneIntensify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRuneIntensify& default_instance();

  void Swap(stRetRuneIntensify* other);

  // implements Message ----------------------------------------------

  stRetRuneIntensify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRuneIntensify& from);
  void MergeFrom(const stRetRuneIntensify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRuneIntensify_eResult eResult;
  static const eResult eSuccess = stRetRuneIntensify_eResult_eSuccess;
  static const eResult eNo_Such_Rune = stRetRuneIntensify_eResult_eNo_Such_Rune;
  static const eResult eLess_Of_Gold = stRetRuneIntensify_eResult_eLess_Of_Gold;
  static const eResult eMax_Run_Lvl = stRetRuneIntensify_eResult_eMax_Run_Lvl;
  static const eResult eLess_Of_Soul_Fire = stRetRuneIntensify_eResult_eLess_Of_Soul_Fire;
  static const eResult eMax_Eat_Num = stRetRuneIntensify_eResult_eMax_Eat_Num;
  static const eResult eEat_Self = stRetRuneIntensify_eResult_eEat_Self;
  static const eResult eNot_Exist_Eat_Rune = stRetRuneIntensify_eResult_eNot_Exist_Eat_Rune;
  static const eResult eInner_Error = stRetRuneIntensify_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stRetRuneIntensify_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetRuneIntensify_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetRuneIntensify_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetRuneIntensify_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetRuneIntensify_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetRuneIntensify_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetRuneIntensify_eResult_Parse(name, value);
  }

  typedef stRetRuneIntensify_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRuneIntensify_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRuneIntensify_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRuneIntensify_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRuneIntensify_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRuneIntensify_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRuneIntensify_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRuneIntensify_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRuneIntensify_ProtoModID_Parse(name, value);
  }

  typedef stRetRuneIntensify_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRuneIntensify_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRuneIntensify_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRuneIntensify_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRuneIntensify_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRuneIntensify_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRuneIntensify_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRuneIntensify_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRuneIntensify_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stRetRuneIntensify.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRetRuneIntensify_eResult result() const;
  inline void set_result(::Role::stRetRuneIntensify_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetRuneIntensify)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetRuneIntensify* default_instance_;
};
// -------------------------------------------------------------------

class stReqRuneEvolve : public ::google::protobuf::Message {
 public:
  stReqRuneEvolve();
  virtual ~stReqRuneEvolve();

  stReqRuneEvolve(const stReqRuneEvolve& from);

  inline stReqRuneEvolve& operator=(const stReqRuneEvolve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRuneEvolve& default_instance();

  void Swap(stReqRuneEvolve* other);

  // implements Message ----------------------------------------------

  stReqRuneEvolve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRuneEvolve& from);
  void MergeFrom(const stReqRuneEvolve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRuneEvolve_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRuneEvolve_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRuneEvolve_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRuneEvolve_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRuneEvolve_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRuneEvolve_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRuneEvolve_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRuneEvolve_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRuneEvolve_ProtoModID_Parse(name, value);
  }

  typedef stReqRuneEvolve_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRuneEvolve_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRuneEvolve_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRuneEvolve_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRuneEvolve_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRuneEvolve_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRuneEvolve_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRuneEvolve_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRuneEvolve_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional uint32 heroID = 3;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 3;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRuneEvolve)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_heroid();
  inline void clear_has_heroid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRuneEvolve* default_instance_;
};
// -------------------------------------------------------------------

class stRetRuneEvolve : public ::google::protobuf::Message {
 public:
  stRetRuneEvolve();
  virtual ~stRetRuneEvolve();

  stRetRuneEvolve(const stRetRuneEvolve& from);

  inline stRetRuneEvolve& operator=(const stRetRuneEvolve& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRuneEvolve& default_instance();

  void Swap(stRetRuneEvolve* other);

  // implements Message ----------------------------------------------

  stRetRuneEvolve* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRuneEvolve& from);
  void MergeFrom(const stRetRuneEvolve& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRuneEvolve_eResult eResult;
  static const eResult eSuccess = stRetRuneEvolve_eResult_eSuccess;
  static const eResult eNo_Such_Rune = stRetRuneEvolve_eResult_eNo_Such_Rune;
  static const eResult eLess_Of_Gold = stRetRuneEvolve_eResult_eLess_Of_Gold;
  static const eResult eRune_Max_Lvl = stRetRuneEvolve_eResult_eRune_Max_Lvl;
  static const eResult eLess_Of_Rune = stRetRuneEvolve_eResult_eLess_Of_Rune;
  static const eResult eRole_Lvl_Limit = stRetRuneEvolve_eResult_eRole_Lvl_Limit;
  static const eResult eInner_Error = stRetRuneEvolve_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stRetRuneEvolve_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRetRuneEvolve_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRetRuneEvolve_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRetRuneEvolve_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRetRuneEvolve_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRetRuneEvolve_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRetRuneEvolve_eResult_Parse(name, value);
  }

  typedef stRetRuneEvolve_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRuneEvolve_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRuneEvolve_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRuneEvolve_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRuneEvolve_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRuneEvolve_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRuneEvolve_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRuneEvolve_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRuneEvolve_ProtoModID_Parse(name, value);
  }

  typedef stRetRuneEvolve_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRuneEvolve_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRuneEvolve_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRuneEvolve_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRuneEvolve_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRuneEvolve_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRuneEvolve_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRuneEvolve_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRuneEvolve_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // optional .Role.stRetRuneEvolve.eResult result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::Role::stRetRuneEvolve_eResult result() const;
  inline void set_result(::Role::stRetRuneEvolve_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRetRuneEvolve)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 bagtype_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetRuneEvolve* default_instance_;
};
// -------------------------------------------------------------------

class stReqExtractGem : public ::google::protobuf::Message {
 public:
  stReqExtractGem();
  virtual ~stReqExtractGem();

  stReqExtractGem(const stReqExtractGem& from);

  inline stReqExtractGem& operator=(const stReqExtractGem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqExtractGem& default_instance();

  void Swap(stReqExtractGem* other);

  // implements Message ----------------------------------------------

  stReqExtractGem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqExtractGem& from);
  void MergeFrom(const stReqExtractGem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqExtractGem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqExtractGem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqExtractGem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqExtractGem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqExtractGem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqExtractGem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqExtractGem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqExtractGem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqExtractGem_ProtoModID_Parse(name, value);
  }

  typedef stReqExtractGem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqExtractGem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqExtractGem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqExtractGem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqExtractGem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqExtractGem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqExtractGem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqExtractGem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqExtractGem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // repeated uint64 pay = 2;
  inline int pay_size() const;
  inline void clear_pay();
  static const int kPayFieldNumber = 2;
  inline ::google::protobuf::uint64 pay(int index) const;
  inline void set_pay(int index, ::google::protobuf::uint64 value);
  inline void add_pay(::google::protobuf::uint64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
      pay() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
      mutable_pay();

  // optional uint64 successpay = 3;
  inline bool has_successpay() const;
  inline void clear_successpay();
  static const int kSuccesspayFieldNumber = 3;
  inline ::google::protobuf::uint64 successpay() const;
  inline void set_successpay(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stReqExtractGem)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_successpay();
  inline void clear_has_successpay();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint64 > pay_;
  ::google::protobuf::uint64 successpay_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqExtractGem* default_instance_;
};
// -------------------------------------------------------------------

class ExtractGemResult : public ::google::protobuf::Message {
 public:
  ExtractGemResult();
  virtual ~ExtractGemResult();

  ExtractGemResult(const ExtractGemResult& from);

  inline ExtractGemResult& operator=(const ExtractGemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExtractGemResult& default_instance();

  void Swap(ExtractGemResult* other);

  // implements Message ----------------------------------------------

  ExtractGemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ExtractGemResult& from);
  void MergeFrom(const ExtractGemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ExtractGemResult_Result Result;
  static const Result RESULT_SUCCESS = ExtractGemResult_Result_RESULT_SUCCESS;
  static const Result RESULT_ERROR_LEVEL = ExtractGemResult_Result_RESULT_ERROR_LEVEL;
  static const Result RESULT_ERROR_GOLD = ExtractGemResult_Result_RESULT_ERROR_GOLD;
  static const Result RESULT_ERROR_ID = ExtractGemResult_Result_RESULT_ERROR_ID;
  static const Result RESULT_ERROR_LIST = ExtractGemResult_Result_RESULT_ERROR_LIST;
  static const Result RESULT_ERROR_SUCCESSLIST = ExtractGemResult_Result_RESULT_ERROR_SUCCESSLIST;
  static const Result RESULT_ERROR_MISS = ExtractGemResult_Result_RESULT_ERROR_MISS;
  static const Result RESULT_ERROR_SUCCESSMISS = ExtractGemResult_Result_RESULT_ERROR_SUCCESSMISS;
  static const Result RESULT_ERROR_UNKNOWN = ExtractGemResult_Result_RESULT_ERROR_UNKNOWN;
  static inline bool Result_IsValid(int value) {
    return ExtractGemResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    ExtractGemResult_Result_Result_MIN;
  static const Result Result_MAX =
    ExtractGemResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    ExtractGemResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return ExtractGemResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return ExtractGemResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return ExtractGemResult_Result_Parse(name, value);
  }

  typedef ExtractGemResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = ExtractGemResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ExtractGemResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ExtractGemResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ExtractGemResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ExtractGemResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ExtractGemResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ExtractGemResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ExtractGemResult_ProtoModID_Parse(name, value);
  }

  typedef ExtractGemResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ExtractGemResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ExtractGemResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ExtractGemResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ExtractGemResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ExtractGemResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ExtractGemResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ExtractGemResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ExtractGemResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.ExtractGemResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::ExtractGemResult_Result result() const;
  inline void set_result(::Role::ExtractGemResult_Result value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.ExtractGemResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ExtractGemResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqWedding : public ::google::protobuf::Message {
 public:
  stReqWedding();
  virtual ~stReqWedding();

  stReqWedding(const stReqWedding& from);

  inline stReqWedding& operator=(const stReqWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqWedding& default_instance();

  void Swap(stReqWedding* other);

  // implements Message ----------------------------------------------

  stReqWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqWedding& from);
  void MergeFrom(const stReqWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqWedding_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqWedding_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqWedding_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqWedding_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqWedding_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqWedding_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqWedding_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqWedding_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqWedding_ProtoModID_Parse(name, value);
  }

  typedef stReqWedding_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqWedding_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqWedding_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqWedding_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqWedding_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqWedding_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqWedding_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqWedding_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqWedding_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 cfg1 = 2;
  inline bool has_cfg1() const;
  inline void clear_cfg1();
  static const int kCfg1FieldNumber = 2;
  inline ::google::protobuf::uint32 cfg1() const;
  inline void set_cfg1(::google::protobuf::uint32 value);

  // optional uint32 cfg2 = 3;
  inline bool has_cfg2() const;
  inline void clear_cfg2();
  static const int kCfg2FieldNumber = 3;
  inline ::google::protobuf::uint32 cfg2() const;
  inline void set_cfg2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqWedding)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cfg1();
  inline void clear_has_cfg1();
  inline void set_has_cfg2();
  inline void clear_has_cfg2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 cfg1_;
  ::google::protobuf::uint32 cfg2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqWedding* default_instance_;
};
// -------------------------------------------------------------------

class stReqAgreeWedding : public ::google::protobuf::Message {
 public:
  stReqAgreeWedding();
  virtual ~stReqAgreeWedding();

  stReqAgreeWedding(const stReqAgreeWedding& from);

  inline stReqAgreeWedding& operator=(const stReqAgreeWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAgreeWedding& default_instance();

  void Swap(stReqAgreeWedding* other);

  // implements Message ----------------------------------------------

  stReqAgreeWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAgreeWedding& from);
  void MergeFrom(const stReqAgreeWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAgreeWedding_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAgreeWedding_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAgreeWedding_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAgreeWedding_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAgreeWedding_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAgreeWedding_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAgreeWedding_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAgreeWedding_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAgreeWedding_ProtoModID_Parse(name, value);
  }

  typedef stReqAgreeWedding_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAgreeWedding_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAgreeWedding_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAgreeWedding_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAgreeWedding_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAgreeWedding_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAgreeWedding_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAgreeWedding_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAgreeWedding_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 cfg1 = 2;
  inline bool has_cfg1() const;
  inline void clear_cfg1();
  static const int kCfg1FieldNumber = 2;
  inline ::google::protobuf::uint32 cfg1() const;
  inline void set_cfg1(::google::protobuf::uint32 value);

  // optional uint32 cfg2 = 3;
  inline bool has_cfg2() const;
  inline void clear_cfg2();
  static const int kCfg2FieldNumber = 3;
  inline ::google::protobuf::uint32 cfg2() const;
  inline void set_cfg2(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqAgreeWedding)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_cfg1();
  inline void clear_has_cfg1();
  inline void set_has_cfg2();
  inline void clear_has_cfg2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 cfg1_;
  ::google::protobuf::uint32 cfg2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqAgreeWedding* default_instance_;
};
// -------------------------------------------------------------------

class ResultWedding : public ::google::protobuf::Message {
 public:
  ResultWedding();
  virtual ~ResultWedding();

  ResultWedding(const ResultWedding& from);

  inline ResultWedding& operator=(const ResultWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultWedding& default_instance();

  void Swap(ResultWedding* other);

  // implements Message ----------------------------------------------

  ResultWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultWedding& from);
  void MergeFrom(const ResultWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResultWedding_Result Result;
  static const Result RESULT_SUCCESS = ResultWedding_Result_RESULT_SUCCESS;
  static const Result RESULT_ERROR_ONLINE = ResultWedding_Result_RESULT_ERROR_ONLINE;
  static const Result RESULT_ERROR_MONEY = ResultWedding_Result_RESULT_ERROR_MONEY;
  static const Result RESULT_ERROR_BAG = ResultWedding_Result_RESULT_ERROR_BAG;
  static const Result RESULT_ERROR_UNKNOWN = ResultWedding_Result_RESULT_ERROR_UNKNOWN;
  static const Result RESULT_SUCCESS_SEND = ResultWedding_Result_RESULT_SUCCESS_SEND;
  static inline bool Result_IsValid(int value) {
    return ResultWedding_Result_IsValid(value);
  }
  static const Result Result_MIN =
    ResultWedding_Result_Result_MIN;
  static const Result Result_MAX =
    ResultWedding_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    ResultWedding_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return ResultWedding_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return ResultWedding_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return ResultWedding_Result_Parse(name, value);
  }

  typedef ResultWedding_ProtoModID ProtoModID;
  static const ProtoModID ModID = ResultWedding_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ResultWedding_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ResultWedding_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ResultWedding_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ResultWedding_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ResultWedding_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ResultWedding_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ResultWedding_ProtoModID_Parse(name, value);
  }

  typedef ResultWedding_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ResultWedding_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ResultWedding_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ResultWedding_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ResultWedding_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ResultWedding_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ResultWedding_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ResultWedding_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ResultWedding_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.ResultWedding.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::ResultWedding_Result result() const;
  inline void set_result(::Role::ResultWedding_Result value);

  // @@protoc_insertion_point(class_scope:Role.ResultWedding)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ResultWedding* default_instance_;
};
// -------------------------------------------------------------------

class stReqInviteToRoom : public ::google::protobuf::Message {
 public:
  stReqInviteToRoom();
  virtual ~stReqInviteToRoom();

  stReqInviteToRoom(const stReqInviteToRoom& from);

  inline stReqInviteToRoom& operator=(const stReqInviteToRoom& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqInviteToRoom& default_instance();

  void Swap(stReqInviteToRoom* other);

  // implements Message ----------------------------------------------

  stReqInviteToRoom* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqInviteToRoom& from);
  void MergeFrom(const stReqInviteToRoom& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqInviteToRoom_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqInviteToRoom_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqInviteToRoom_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqInviteToRoom_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqInviteToRoom_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqInviteToRoom_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqInviteToRoom_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqInviteToRoom_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqInviteToRoom_ProtoModID_Parse(name, value);
  }

  typedef stReqInviteToRoom_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqInviteToRoom_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqInviteToRoom_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqInviteToRoom_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqInviteToRoom_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqInviteToRoom_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqInviteToRoom_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqInviteToRoom_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqInviteToRoom_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqInviteToRoom)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqInviteToRoom* default_instance_;
};
// -------------------------------------------------------------------

class NotifyEnterWedding : public ::google::protobuf::Message {
 public:
  NotifyEnterWedding();
  virtual ~NotifyEnterWedding();

  NotifyEnterWedding(const NotifyEnterWedding& from);

  inline NotifyEnterWedding& operator=(const NotifyEnterWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyEnterWedding& default_instance();

  void Swap(NotifyEnterWedding* other);

  // implements Message ----------------------------------------------

  NotifyEnterWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyEnterWedding& from);
  void MergeFrom(const NotifyEnterWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NotifyEnterWedding_ProtoModID ProtoModID;
  static const ProtoModID ModID = NotifyEnterWedding_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return NotifyEnterWedding_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    NotifyEnterWedding_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    NotifyEnterWedding_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    NotifyEnterWedding_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return NotifyEnterWedding_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return NotifyEnterWedding_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return NotifyEnterWedding_ProtoModID_Parse(name, value);
  }

  typedef NotifyEnterWedding_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = NotifyEnterWedding_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return NotifyEnterWedding_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    NotifyEnterWedding_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    NotifyEnterWedding_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    NotifyEnterWedding_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return NotifyEnterWedding_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return NotifyEnterWedding_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return NotifyEnterWedding_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.NotifyEnterWedding)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static NotifyEnterWedding* default_instance_;
};
// -------------------------------------------------------------------

class stReqAgreeEnterWedding : public ::google::protobuf::Message {
 public:
  stReqAgreeEnterWedding();
  virtual ~stReqAgreeEnterWedding();

  stReqAgreeEnterWedding(const stReqAgreeEnterWedding& from);

  inline stReqAgreeEnterWedding& operator=(const stReqAgreeEnterWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAgreeEnterWedding& default_instance();

  void Swap(stReqAgreeEnterWedding* other);

  // implements Message ----------------------------------------------

  stReqAgreeEnterWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAgreeEnterWedding& from);
  void MergeFrom(const stReqAgreeEnterWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAgreeEnterWedding_Result Result;
  static const Result RESULT_AGREE = stReqAgreeEnterWedding_Result_RESULT_AGREE;
  static const Result RESULT_REFUSE = stReqAgreeEnterWedding_Result_RESULT_REFUSE;
  static inline bool Result_IsValid(int value) {
    return stReqAgreeEnterWedding_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stReqAgreeEnterWedding_Result_Result_MIN;
  static const Result Result_MAX =
    stReqAgreeEnterWedding_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stReqAgreeEnterWedding_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stReqAgreeEnterWedding_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stReqAgreeEnterWedding_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stReqAgreeEnterWedding_Result_Parse(name, value);
  }

  typedef stReqAgreeEnterWedding_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAgreeEnterWedding_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAgreeEnterWedding_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAgreeEnterWedding_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAgreeEnterWedding_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAgreeEnterWedding_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAgreeEnterWedding_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAgreeEnterWedding_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAgreeEnterWedding_ProtoModID_Parse(name, value);
  }

  typedef stReqAgreeEnterWedding_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAgreeEnterWedding_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAgreeEnterWedding_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAgreeEnterWedding_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAgreeEnterWedding_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAgreeEnterWedding_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAgreeEnterWedding_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAgreeEnterWedding_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAgreeEnterWedding_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stReqAgreeEnterWedding.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stReqAgreeEnterWedding_Result result() const;
  inline void set_result(::Role::stReqAgreeEnterWedding_Result value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqAgreeEnterWedding)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqAgreeEnterWedding* default_instance_;
};
// -------------------------------------------------------------------

class ResultEnterWedding : public ::google::protobuf::Message {
 public:
  ResultEnterWedding();
  virtual ~ResultEnterWedding();

  ResultEnterWedding(const ResultEnterWedding& from);

  inline ResultEnterWedding& operator=(const ResultEnterWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultEnterWedding& default_instance();

  void Swap(ResultEnterWedding* other);

  // implements Message ----------------------------------------------

  ResultEnterWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultEnterWedding& from);
  void MergeFrom(const ResultEnterWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResultEnterWedding_Result Result;
  static const Result RESULT_SUCCESS = ResultEnterWedding_Result_RESULT_SUCCESS;
  static const Result RESULT_FAILURE = ResultEnterWedding_Result_RESULT_FAILURE;
  static inline bool Result_IsValid(int value) {
    return ResultEnterWedding_Result_IsValid(value);
  }
  static const Result Result_MIN =
    ResultEnterWedding_Result_Result_MIN;
  static const Result Result_MAX =
    ResultEnterWedding_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    ResultEnterWedding_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return ResultEnterWedding_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return ResultEnterWedding_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return ResultEnterWedding_Result_Parse(name, value);
  }

  typedef ResultEnterWedding_ProtoModID ProtoModID;
  static const ProtoModID ModID = ResultEnterWedding_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ResultEnterWedding_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ResultEnterWedding_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ResultEnterWedding_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ResultEnterWedding_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ResultEnterWedding_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ResultEnterWedding_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ResultEnterWedding_ProtoModID_Parse(name, value);
  }

  typedef ResultEnterWedding_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ResultEnterWedding_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ResultEnterWedding_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ResultEnterWedding_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ResultEnterWedding_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ResultEnterWedding_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ResultEnterWedding_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ResultEnterWedding_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ResultEnterWedding_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.ResultEnterWedding.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::ResultEnterWedding_Result result() const;
  inline void set_result(::Role::ResultEnterWedding_Result value);

  // @@protoc_insertion_point(class_scope:Role.ResultEnterWedding)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ResultEnterWedding* default_instance_;
};
// -------------------------------------------------------------------

class MarryInviterPlace : public ::google::protobuf::Message {
 public:
  MarryInviterPlace();
  virtual ~MarryInviterPlace();

  MarryInviterPlace(const MarryInviterPlace& from);

  inline MarryInviterPlace& operator=(const MarryInviterPlace& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryInviterPlace& default_instance();

  void Swap(MarryInviterPlace* other);

  // implements Message ----------------------------------------------

  MarryInviterPlace* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryInviterPlace& from);
  void MergeFrom(const MarryInviterPlace& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MarryInviterPlace_State State;
  static const State STATE_INVITER = MarryInviterPlace_State_STATE_INVITER;
  static const State STATE_INVITEE = MarryInviterPlace_State_STATE_INVITEE;
  static inline bool State_IsValid(int value) {
    return MarryInviterPlace_State_IsValid(value);
  }
  static const State State_MIN =
    MarryInviterPlace_State_State_MIN;
  static const State State_MAX =
    MarryInviterPlace_State_State_MAX;
  static const int State_ARRAYSIZE =
    MarryInviterPlace_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return MarryInviterPlace_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return MarryInviterPlace_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return MarryInviterPlace_State_Parse(name, value);
  }

  typedef MarryInviterPlace_ProtoModID ProtoModID;
  static const ProtoModID ModID = MarryInviterPlace_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return MarryInviterPlace_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    MarryInviterPlace_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    MarryInviterPlace_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    MarryInviterPlace_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return MarryInviterPlace_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return MarryInviterPlace_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return MarryInviterPlace_ProtoModID_Parse(name, value);
  }

  typedef MarryInviterPlace_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = MarryInviterPlace_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return MarryInviterPlace_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    MarryInviterPlace_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    MarryInviterPlace_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    MarryInviterPlace_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return MarryInviterPlace_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return MarryInviterPlace_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return MarryInviterPlace_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.MarryInviterPlace.State state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::Role::MarryInviterPlace_State state() const;
  inline void set_state(::Role::MarryInviterPlace_State value);

  // optional uint32 cfg1 = 2;
  inline bool has_cfg1() const;
  inline void clear_cfg1();
  static const int kCfg1FieldNumber = 2;
  inline ::google::protobuf::uint32 cfg1() const;
  inline void set_cfg1(::google::protobuf::uint32 value);

  // repeated uint32 id = 3;
  inline int id_size() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::uint32 id(int index) const;
  inline void set_id(int index, ::google::protobuf::uint32 value);
  inline void add_id(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_id();

  // optional string name1 = 4;
  inline bool has_name1() const;
  inline void clear_name1();
  static const int kName1FieldNumber = 4;
  inline const ::std::string& name1() const;
  inline void set_name1(const ::std::string& value);
  inline void set_name1(const char* value);
  inline void set_name1(const char* value, size_t size);
  inline ::std::string* mutable_name1();
  inline ::std::string* release_name1();
  inline void set_allocated_name1(::std::string* name1);

  // optional string name2 = 5;
  inline bool has_name2() const;
  inline void clear_name2();
  static const int kName2FieldNumber = 5;
  inline const ::std::string& name2() const;
  inline void set_name2(const ::std::string& value);
  inline void set_name2(const char* value);
  inline void set_name2(const char* value, size_t size);
  inline ::std::string* mutable_name2();
  inline ::std::string* release_name2();
  inline void set_allocated_name2(::std::string* name2);

  // optional uint32 time = 6;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 6;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.MarryInviterPlace)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_cfg1();
  inline void clear_has_cfg1();
  inline void set_has_name1();
  inline void clear_has_name1();
  inline void set_has_name2();
  inline void clear_has_name2();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int state_;
  ::google::protobuf::uint32 cfg1_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > id_;
  ::std::string* name1_;
  ::std::string* name2_;
  ::google::protobuf::uint32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static MarryInviterPlace* default_instance_;
};
// -------------------------------------------------------------------

class stReqDivorce : public ::google::protobuf::Message {
 public:
  stReqDivorce();
  virtual ~stReqDivorce();

  stReqDivorce(const stReqDivorce& from);

  inline stReqDivorce& operator=(const stReqDivorce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDivorce& default_instance();

  void Swap(stReqDivorce* other);

  // implements Message ----------------------------------------------

  stReqDivorce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDivorce& from);
  void MergeFrom(const stReqDivorce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDivorce_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDivorce_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDivorce_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDivorce_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDivorce_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDivorce_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDivorce_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDivorce_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDivorce_ProtoModID_Parse(name, value);
  }

  typedef stReqDivorce_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDivorce_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDivorce_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDivorce_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDivorce_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDivorce_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDivorce_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDivorce_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool isForce = 1;
  inline bool has_isforce() const;
  inline void clear_isforce();
  static const int kIsForceFieldNumber = 1;
  inline bool isforce() const;
  inline void set_isforce(bool value);

  // optional uint32 coupleId = 2;
  inline bool has_coupleid() const;
  inline void clear_coupleid();
  static const int kCoupleIdFieldNumber = 2;
  inline ::google::protobuf::uint32 coupleid() const;
  inline void set_coupleid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqDivorce)
 private:
  inline void set_has_isforce();
  inline void clear_has_isforce();
  inline void set_has_coupleid();
  inline void clear_has_coupleid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool isforce_;
  ::google::protobuf::uint32 coupleid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqDivorce* default_instance_;
};
// -------------------------------------------------------------------

class RejectDivorce : public ::google::protobuf::Message {
 public:
  RejectDivorce();
  virtual ~RejectDivorce();

  RejectDivorce(const RejectDivorce& from);

  inline RejectDivorce& operator=(const RejectDivorce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RejectDivorce& default_instance();

  void Swap(RejectDivorce* other);

  // implements Message ----------------------------------------------

  RejectDivorce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RejectDivorce& from);
  void MergeFrom(const RejectDivorce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef RejectDivorce_Result Result;
  static const Result eSuccess = RejectDivorce_Result_eSuccess;
  static const Result eCouple_Not_Onlie = RejectDivorce_Result_eCouple_Not_Onlie;
  static const Result eLess_Of_Diamond = RejectDivorce_Result_eLess_Of_Diamond;
  static const Result eNo_Couple = RejectDivorce_Result_eNo_Couple;
  static inline bool Result_IsValid(int value) {
    return RejectDivorce_Result_IsValid(value);
  }
  static const Result Result_MIN =
    RejectDivorce_Result_Result_MIN;
  static const Result Result_MAX =
    RejectDivorce_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    RejectDivorce_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return RejectDivorce_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return RejectDivorce_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return RejectDivorce_Result_Parse(name, value);
  }

  typedef RejectDivorce_ProtoModID ProtoModID;
  static const ProtoModID ModID = RejectDivorce_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return RejectDivorce_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    RejectDivorce_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    RejectDivorce_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    RejectDivorce_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return RejectDivorce_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return RejectDivorce_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return RejectDivorce_ProtoModID_Parse(name, value);
  }

  typedef RejectDivorce_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = RejectDivorce_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return RejectDivorce_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    RejectDivorce_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    RejectDivorce_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    RejectDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return RejectDivorce_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return RejectDivorce_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return RejectDivorce_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.RejectDivorce.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::RejectDivorce_Result result() const;
  inline void set_result(::Role::RejectDivorce_Result value);

  // @@protoc_insertion_point(class_scope:Role.RejectDivorce)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static RejectDivorce* default_instance_;
};
// -------------------------------------------------------------------

class stReqRejectDivorce : public ::google::protobuf::Message {
 public:
  stReqRejectDivorce();
  virtual ~stReqRejectDivorce();

  stReqRejectDivorce(const stReqRejectDivorce& from);

  inline stReqRejectDivorce& operator=(const stReqRejectDivorce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRejectDivorce& default_instance();

  void Swap(stReqRejectDivorce* other);

  // implements Message ----------------------------------------------

  stReqRejectDivorce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRejectDivorce& from);
  void MergeFrom(const stReqRejectDivorce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRejectDivorce_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRejectDivorce_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRejectDivorce_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRejectDivorce_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRejectDivorce_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRejectDivorce_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRejectDivorce_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRejectDivorce_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRejectDivorce_ProtoModID_Parse(name, value);
  }

  typedef stReqRejectDivorce_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRejectDivorce_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRejectDivorce_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRejectDivorce_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRejectDivorce_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRejectDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRejectDivorce_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRejectDivorce_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRejectDivorce_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool refused = 1;
  inline bool has_refused() const;
  inline void clear_refused();
  static const int kRefusedFieldNumber = 1;
  inline bool refused() const;
  inline void set_refused(bool value);

  // @@protoc_insertion_point(class_scope:Role.stReqRejectDivorce)
 private:
  inline void set_has_refused();
  inline void clear_has_refused();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool refused_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRejectDivorce* default_instance_;
};
// -------------------------------------------------------------------

class stRetRejectDivorce : public ::google::protobuf::Message {
 public:
  stRetRejectDivorce();
  virtual ~stRetRejectDivorce();

  stRetRejectDivorce(const stRetRejectDivorce& from);

  inline stRetRejectDivorce& operator=(const stRetRejectDivorce& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetRejectDivorce& default_instance();

  void Swap(stRetRejectDivorce* other);

  // implements Message ----------------------------------------------

  stRetRejectDivorce* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetRejectDivorce& from);
  void MergeFrom(const stRetRejectDivorce& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetRejectDivorce_Result Result;
  static const Result eSuccess = stRetRejectDivorce_Result_eSuccess;
  static const Result eReject = stRetRejectDivorce_Result_eReject;
  static const Result eNot_Marry = stRetRejectDivorce_Result_eNot_Marry;
  static inline bool Result_IsValid(int value) {
    return stRetRejectDivorce_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stRetRejectDivorce_Result_Result_MIN;
  static const Result Result_MAX =
    stRetRejectDivorce_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stRetRejectDivorce_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stRetRejectDivorce_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stRetRejectDivorce_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stRetRejectDivorce_Result_Parse(name, value);
  }

  typedef stRetRejectDivorce_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetRejectDivorce_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetRejectDivorce_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetRejectDivorce_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetRejectDivorce_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetRejectDivorce_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetRejectDivorce_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetRejectDivorce_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetRejectDivorce_ProtoModID_Parse(name, value);
  }

  typedef stRetRejectDivorce_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetRejectDivorce_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetRejectDivorce_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetRejectDivorce_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetRejectDivorce_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetRejectDivorce_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetRejectDivorce_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetRejectDivorce_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetRejectDivorce_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRetRejectDivorce.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRetRejectDivorce_Result result() const;
  inline void set_result(::Role::stRetRejectDivorce_Result value);

  // @@protoc_insertion_point(class_scope:Role.stRetRejectDivorce)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetRejectDivorce* default_instance_;
};
// -------------------------------------------------------------------

class BoardcastMarryInfo : public ::google::protobuf::Message {
 public:
  BoardcastMarryInfo();
  virtual ~BoardcastMarryInfo();

  BoardcastMarryInfo(const BoardcastMarryInfo& from);

  inline BoardcastMarryInfo& operator=(const BoardcastMarryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoardcastMarryInfo& default_instance();

  void Swap(BoardcastMarryInfo* other);

  // implements Message ----------------------------------------------

  BoardcastMarryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoardcastMarryInfo& from);
  void MergeFrom(const BoardcastMarryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef BoardcastMarryInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = BoardcastMarryInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return BoardcastMarryInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    BoardcastMarryInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    BoardcastMarryInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    BoardcastMarryInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return BoardcastMarryInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return BoardcastMarryInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return BoardcastMarryInfo_ProtoModID_Parse(name, value);
  }

  typedef BoardcastMarryInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = BoardcastMarryInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return BoardcastMarryInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    BoardcastMarryInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    BoardcastMarryInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    BoardcastMarryInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return BoardcastMarryInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return BoardcastMarryInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return BoardcastMarryInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string name1 = 1;
  inline bool has_name1() const;
  inline void clear_name1();
  static const int kName1FieldNumber = 1;
  inline const ::std::string& name1() const;
  inline void set_name1(const ::std::string& value);
  inline void set_name1(const char* value);
  inline void set_name1(const char* value, size_t size);
  inline ::std::string* mutable_name1();
  inline ::std::string* release_name1();
  inline void set_allocated_name1(::std::string* name1);

  // optional string name2 = 2;
  inline bool has_name2() const;
  inline void clear_name2();
  static const int kName2FieldNumber = 2;
  inline const ::std::string& name2() const;
  inline void set_name2(const ::std::string& value);
  inline void set_name2(const char* value);
  inline void set_name2(const char* value, size_t size);
  inline ::std::string* mutable_name2();
  inline ::std::string* release_name2();
  inline void set_allocated_name2(::std::string* name2);

  // @@protoc_insertion_point(class_scope:Role.BoardcastMarryInfo)
 private:
  inline void set_has_name1();
  inline void clear_has_name1();
  inline void set_has_name2();
  inline void clear_has_name2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name1_;
  ::std::string* name2_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static BoardcastMarryInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqUseFirework : public ::google::protobuf::Message {
 public:
  stReqUseFirework();
  virtual ~stReqUseFirework();

  stReqUseFirework(const stReqUseFirework& from);

  inline stReqUseFirework& operator=(const stReqUseFirework& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUseFirework& default_instance();

  void Swap(stReqUseFirework* other);

  // implements Message ----------------------------------------------

  stReqUseFirework* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUseFirework& from);
  void MergeFrom(const stReqUseFirework& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUseFirework_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUseFirework_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUseFirework_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUseFirework_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUseFirework_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUseFirework_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUseFirework_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUseFirework_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUseFirework_ProtoModID_Parse(name, value);
  }

  typedef stReqUseFirework_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUseFirework_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUseFirework_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUseFirework_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUseFirework_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUseFirework_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUseFirework_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUseFirework_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUseFirework_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 fire = 1;
  inline bool has_fire() const;
  inline void clear_fire();
  static const int kFireFieldNumber = 1;
  inline ::google::protobuf::uint32 fire() const;
  inline void set_fire(::google::protobuf::uint32 value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqUseFirework)
 private:
  inline void set_has_fire();
  inline void clear_has_fire();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 fire_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqUseFirework* default_instance_;
};
// -------------------------------------------------------------------

class ResultUseFirework : public ::google::protobuf::Message {
 public:
  ResultUseFirework();
  virtual ~ResultUseFirework();

  ResultUseFirework(const ResultUseFirework& from);

  inline ResultUseFirework& operator=(const ResultUseFirework& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultUseFirework& default_instance();

  void Swap(ResultUseFirework* other);

  // implements Message ----------------------------------------------

  ResultUseFirework* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultUseFirework& from);
  void MergeFrom(const ResultUseFirework& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResultUseFirework_Result Result;
  static const Result RESULT_SUCCESS = ResultUseFirework_Result_RESULT_SUCCESS;
  static const Result RESULT_FAILURE = ResultUseFirework_Result_RESULT_FAILURE;
  static inline bool Result_IsValid(int value) {
    return ResultUseFirework_Result_IsValid(value);
  }
  static const Result Result_MIN =
    ResultUseFirework_Result_Result_MIN;
  static const Result Result_MAX =
    ResultUseFirework_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    ResultUseFirework_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return ResultUseFirework_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return ResultUseFirework_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return ResultUseFirework_Result_Parse(name, value);
  }

  typedef ResultUseFirework_ProtoModID ProtoModID;
  static const ProtoModID ModID = ResultUseFirework_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ResultUseFirework_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ResultUseFirework_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ResultUseFirework_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ResultUseFirework_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ResultUseFirework_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ResultUseFirework_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ResultUseFirework_ProtoModID_Parse(name, value);
  }

  typedef ResultUseFirework_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ResultUseFirework_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ResultUseFirework_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ResultUseFirework_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ResultUseFirework_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ResultUseFirework_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ResultUseFirework_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ResultUseFirework_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ResultUseFirework_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.ResultUseFirework.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::ResultUseFirework_Result result() const;
  inline void set_result(::Role::ResultUseFirework_Result value);

  // @@protoc_insertion_point(class_scope:Role.ResultUseFirework)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ResultUseFirework* default_instance_;
};
// -------------------------------------------------------------------

class NotifyFirework : public ::google::protobuf::Message {
 public:
  NotifyFirework();
  virtual ~NotifyFirework();

  NotifyFirework(const NotifyFirework& from);

  inline NotifyFirework& operator=(const NotifyFirework& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NotifyFirework& default_instance();

  void Swap(NotifyFirework* other);

  // implements Message ----------------------------------------------

  NotifyFirework* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NotifyFirework& from);
  void MergeFrom(const NotifyFirework& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef NotifyFirework_ProtoModID ProtoModID;
  static const ProtoModID ModID = NotifyFirework_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return NotifyFirework_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    NotifyFirework_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    NotifyFirework_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    NotifyFirework_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return NotifyFirework_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return NotifyFirework_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return NotifyFirework_ProtoModID_Parse(name, value);
  }

  typedef NotifyFirework_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = NotifyFirework_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return NotifyFirework_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    NotifyFirework_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    NotifyFirework_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    NotifyFirework_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return NotifyFirework_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return NotifyFirework_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return NotifyFirework_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 fire = 1;
  inline bool has_fire() const;
  inline void clear_fire();
  static const int kFireFieldNumber = 1;
  inline ::google::protobuf::uint32 fire() const;
  inline void set_fire(::google::protobuf::uint32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:Role.NotifyFirework)
 private:
  inline void set_has_fire();
  inline void clear_has_fire();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::uint32 fire_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static NotifyFirework* default_instance_;
};
// -------------------------------------------------------------------

class stReqTakeCandy : public ::google::protobuf::Message {
 public:
  stReqTakeCandy();
  virtual ~stReqTakeCandy();

  stReqTakeCandy(const stReqTakeCandy& from);

  inline stReqTakeCandy& operator=(const stReqTakeCandy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqTakeCandy& default_instance();

  void Swap(stReqTakeCandy* other);

  // implements Message ----------------------------------------------

  stReqTakeCandy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqTakeCandy& from);
  void MergeFrom(const stReqTakeCandy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqTakeCandy_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqTakeCandy_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqTakeCandy_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqTakeCandy_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqTakeCandy_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqTakeCandy_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqTakeCandy_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqTakeCandy_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqTakeCandy_ProtoModID_Parse(name, value);
  }

  typedef stReqTakeCandy_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqTakeCandy_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqTakeCandy_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqTakeCandy_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqTakeCandy_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqTakeCandy_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqTakeCandy_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqTakeCandy_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqTakeCandy_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline ::google::protobuf::uint32 data() const;
  inline void set_data(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqTakeCandy)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqTakeCandy* default_instance_;
};
// -------------------------------------------------------------------

class ResultTakeCandy : public ::google::protobuf::Message {
 public:
  ResultTakeCandy();
  virtual ~ResultTakeCandy();

  ResultTakeCandy(const ResultTakeCandy& from);

  inline ResultTakeCandy& operator=(const ResultTakeCandy& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultTakeCandy& default_instance();

  void Swap(ResultTakeCandy* other);

  // implements Message ----------------------------------------------

  ResultTakeCandy* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultTakeCandy& from);
  void MergeFrom(const ResultTakeCandy& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResultTakeCandy_Result Result;
  static const Result RESULT_SUCCESS = ResultTakeCandy_Result_RESULT_SUCCESS;
  static const Result RESULT_FAILURE = ResultTakeCandy_Result_RESULT_FAILURE;
  static inline bool Result_IsValid(int value) {
    return ResultTakeCandy_Result_IsValid(value);
  }
  static const Result Result_MIN =
    ResultTakeCandy_Result_Result_MIN;
  static const Result Result_MAX =
    ResultTakeCandy_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    ResultTakeCandy_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return ResultTakeCandy_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return ResultTakeCandy_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return ResultTakeCandy_Result_Parse(name, value);
  }

  typedef ResultTakeCandy_ProtoModID ProtoModID;
  static const ProtoModID ModID = ResultTakeCandy_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ResultTakeCandy_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ResultTakeCandy_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ResultTakeCandy_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ResultTakeCandy_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ResultTakeCandy_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ResultTakeCandy_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ResultTakeCandy_ProtoModID_Parse(name, value);
  }

  typedef ResultTakeCandy_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ResultTakeCandy_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ResultTakeCandy_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ResultTakeCandy_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ResultTakeCandy_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ResultTakeCandy_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ResultTakeCandy_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ResultTakeCandy_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ResultTakeCandy_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.ResultTakeCandy.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::ResultTakeCandy_Result result() const;
  inline void set_result(::Role::ResultTakeCandy_Result value);

  // @@protoc_insertion_point(class_scope:Role.ResultTakeCandy)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ResultTakeCandy* default_instance_;
};
// -------------------------------------------------------------------

class stReqBuyFirework : public ::google::protobuf::Message {
 public:
  stReqBuyFirework();
  virtual ~stReqBuyFirework();

  stReqBuyFirework(const stReqBuyFirework& from);

  inline stReqBuyFirework& operator=(const stReqBuyFirework& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBuyFirework& default_instance();

  void Swap(stReqBuyFirework* other);

  // implements Message ----------------------------------------------

  stReqBuyFirework* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBuyFirework& from);
  void MergeFrom(const stReqBuyFirework& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBuyFirework_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBuyFirework_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBuyFirework_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBuyFirework_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBuyFirework_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBuyFirework_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBuyFirework_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBuyFirework_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBuyFirework_ProtoModID_Parse(name, value);
  }

  typedef stReqBuyFirework_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBuyFirework_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBuyFirework_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBuyFirework_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBuyFirework_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBuyFirework_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBuyFirework_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBuyFirework_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBuyFirework_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqBuyFirework)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqBuyFirework* default_instance_;
};
// -------------------------------------------------------------------

class ResultBuyFirework : public ::google::protobuf::Message {
 public:
  ResultBuyFirework();
  virtual ~ResultBuyFirework();

  ResultBuyFirework(const ResultBuyFirework& from);

  inline ResultBuyFirework& operator=(const ResultBuyFirework& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultBuyFirework& default_instance();

  void Swap(ResultBuyFirework* other);

  // implements Message ----------------------------------------------

  ResultBuyFirework* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultBuyFirework& from);
  void MergeFrom(const ResultBuyFirework& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResultBuyFirework_Result Result;
  static const Result RESULT_SUCCESS = ResultBuyFirework_Result_RESULT_SUCCESS;
  static const Result RESULT_FAILURE = ResultBuyFirework_Result_RESULT_FAILURE;
  static inline bool Result_IsValid(int value) {
    return ResultBuyFirework_Result_IsValid(value);
  }
  static const Result Result_MIN =
    ResultBuyFirework_Result_Result_MIN;
  static const Result Result_MAX =
    ResultBuyFirework_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    ResultBuyFirework_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return ResultBuyFirework_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return ResultBuyFirework_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return ResultBuyFirework_Result_Parse(name, value);
  }

  typedef ResultBuyFirework_ProtoModID ProtoModID;
  static const ProtoModID ModID = ResultBuyFirework_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ResultBuyFirework_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ResultBuyFirework_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ResultBuyFirework_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ResultBuyFirework_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ResultBuyFirework_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ResultBuyFirework_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ResultBuyFirework_ProtoModID_Parse(name, value);
  }

  typedef ResultBuyFirework_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ResultBuyFirework_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ResultBuyFirework_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ResultBuyFirework_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ResultBuyFirework_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ResultBuyFirework_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ResultBuyFirework_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ResultBuyFirework_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ResultBuyFirework_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.ResultBuyFirework.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::ResultBuyFirework_Result result() const;
  inline void set_result(::Role::ResultBuyFirework_Result value);

  // @@protoc_insertion_point(class_scope:Role.ResultBuyFirework)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ResultBuyFirework* default_instance_;
};
// -------------------------------------------------------------------

class stReqEnterWeddingAlone : public ::google::protobuf::Message {
 public:
  stReqEnterWeddingAlone();
  virtual ~stReqEnterWeddingAlone();

  stReqEnterWeddingAlone(const stReqEnterWeddingAlone& from);

  inline stReqEnterWeddingAlone& operator=(const stReqEnterWeddingAlone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqEnterWeddingAlone& default_instance();

  void Swap(stReqEnterWeddingAlone* other);

  // implements Message ----------------------------------------------

  stReqEnterWeddingAlone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqEnterWeddingAlone& from);
  void MergeFrom(const stReqEnterWeddingAlone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqEnterWeddingAlone_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqEnterWeddingAlone_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqEnterWeddingAlone_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqEnterWeddingAlone_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqEnterWeddingAlone_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqEnterWeddingAlone_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqEnterWeddingAlone_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqEnterWeddingAlone_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqEnterWeddingAlone_ProtoModID_Parse(name, value);
  }

  typedef stReqEnterWeddingAlone_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqEnterWeddingAlone_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqEnterWeddingAlone_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqEnterWeddingAlone_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqEnterWeddingAlone_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqEnterWeddingAlone_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqEnterWeddingAlone_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqEnterWeddingAlone_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqEnterWeddingAlone_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline ::google::protobuf::uint32 data() const;
  inline void set_data(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqEnterWeddingAlone)
 private:
  inline void set_has_data();
  inline void clear_has_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 data_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqEnterWeddingAlone* default_instance_;
};
// -------------------------------------------------------------------

class ResultEnterWeddingAlone : public ::google::protobuf::Message {
 public:
  ResultEnterWeddingAlone();
  virtual ~ResultEnterWeddingAlone();

  ResultEnterWeddingAlone(const ResultEnterWeddingAlone& from);

  inline ResultEnterWeddingAlone& operator=(const ResultEnterWeddingAlone& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultEnterWeddingAlone& default_instance();

  void Swap(ResultEnterWeddingAlone* other);

  // implements Message ----------------------------------------------

  ResultEnterWeddingAlone* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultEnterWeddingAlone& from);
  void MergeFrom(const ResultEnterWeddingAlone& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ResultEnterWeddingAlone_Result Result;
  static const Result RESULT_SUCCESS = ResultEnterWeddingAlone_Result_RESULT_SUCCESS;
  static const Result RESULT_FAILURE = ResultEnterWeddingAlone_Result_RESULT_FAILURE;
  static inline bool Result_IsValid(int value) {
    return ResultEnterWeddingAlone_Result_IsValid(value);
  }
  static const Result Result_MIN =
    ResultEnterWeddingAlone_Result_Result_MIN;
  static const Result Result_MAX =
    ResultEnterWeddingAlone_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    ResultEnterWeddingAlone_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return ResultEnterWeddingAlone_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return ResultEnterWeddingAlone_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return ResultEnterWeddingAlone_Result_Parse(name, value);
  }

  typedef ResultEnterWeddingAlone_ProtoModID ProtoModID;
  static const ProtoModID ModID = ResultEnterWeddingAlone_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return ResultEnterWeddingAlone_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    ResultEnterWeddingAlone_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    ResultEnterWeddingAlone_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    ResultEnterWeddingAlone_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return ResultEnterWeddingAlone_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return ResultEnterWeddingAlone_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return ResultEnterWeddingAlone_ProtoModID_Parse(name, value);
  }

  typedef ResultEnterWeddingAlone_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = ResultEnterWeddingAlone_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return ResultEnterWeddingAlone_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    ResultEnterWeddingAlone_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    ResultEnterWeddingAlone_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    ResultEnterWeddingAlone_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return ResultEnterWeddingAlone_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return ResultEnterWeddingAlone_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return ResultEnterWeddingAlone_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.ResultEnterWeddingAlone.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::ResultEnterWeddingAlone_Result result() const;
  inline void set_result(::Role::ResultEnterWeddingAlone_Result value);

  // @@protoc_insertion_point(class_scope:Role.ResultEnterWeddingAlone)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static ResultEnterWeddingAlone* default_instance_;
};
// -------------------------------------------------------------------

class stReqQuitWeddingScene : public ::google::protobuf::Message {
 public:
  stReqQuitWeddingScene();
  virtual ~stReqQuitWeddingScene();

  stReqQuitWeddingScene(const stReqQuitWeddingScene& from);

  inline stReqQuitWeddingScene& operator=(const stReqQuitWeddingScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqQuitWeddingScene& default_instance();

  void Swap(stReqQuitWeddingScene* other);

  // implements Message ----------------------------------------------

  stReqQuitWeddingScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqQuitWeddingScene& from);
  void MergeFrom(const stReqQuitWeddingScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqQuitWeddingScene_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqQuitWeddingScene_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqQuitWeddingScene_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqQuitWeddingScene_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqQuitWeddingScene_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqQuitWeddingScene_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqQuitWeddingScene_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqQuitWeddingScene_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqQuitWeddingScene_ProtoModID_Parse(name, value);
  }

  typedef stReqQuitWeddingScene_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqQuitWeddingScene_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqQuitWeddingScene_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqQuitWeddingScene_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqQuitWeddingScene_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqQuitWeddingScene_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqQuitWeddingScene_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqQuitWeddingScene_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqQuitWeddingScene_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 levelId = 1;
  inline bool has_levelid() const;
  inline void clear_levelid();
  static const int kLevelIdFieldNumber = 1;
  inline ::google::protobuf::uint32 levelid() const;
  inline void set_levelid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqQuitWeddingScene)
 private:
  inline void set_has_levelid();
  inline void clear_has_levelid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 levelid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqQuitWeddingScene* default_instance_;
};
// -------------------------------------------------------------------

class stRetQuitWeddingScene : public ::google::protobuf::Message {
 public:
  stRetQuitWeddingScene();
  virtual ~stRetQuitWeddingScene();

  stRetQuitWeddingScene(const stRetQuitWeddingScene& from);

  inline stRetQuitWeddingScene& operator=(const stRetQuitWeddingScene& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetQuitWeddingScene& default_instance();

  void Swap(stRetQuitWeddingScene* other);

  // implements Message ----------------------------------------------

  stRetQuitWeddingScene* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetQuitWeddingScene& from);
  void MergeFrom(const stRetQuitWeddingScene& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetQuitWeddingScene_Result Result;
  static const Result eSuccess = stRetQuitWeddingScene_Result_eSuccess;
  static const Result eNot_In_Scene = stRetQuitWeddingScene_Result_eNot_In_Scene;
  static inline bool Result_IsValid(int value) {
    return stRetQuitWeddingScene_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stRetQuitWeddingScene_Result_Result_MIN;
  static const Result Result_MAX =
    stRetQuitWeddingScene_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stRetQuitWeddingScene_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stRetQuitWeddingScene_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stRetQuitWeddingScene_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stRetQuitWeddingScene_Result_Parse(name, value);
  }

  typedef stRetQuitWeddingScene_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetQuitWeddingScene_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetQuitWeddingScene_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetQuitWeddingScene_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetQuitWeddingScene_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetQuitWeddingScene_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetQuitWeddingScene_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetQuitWeddingScene_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetQuitWeddingScene_ProtoModID_Parse(name, value);
  }

  typedef stRetQuitWeddingScene_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetQuitWeddingScene_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetQuitWeddingScene_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetQuitWeddingScene_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetQuitWeddingScene_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetQuitWeddingScene_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetQuitWeddingScene_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetQuitWeddingScene_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetQuitWeddingScene_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRetQuitWeddingScene.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRetQuitWeddingScene_Result result() const;
  inline void set_result(::Role::stRetQuitWeddingScene_Result value);

  // @@protoc_insertion_point(class_scope:Role.stRetQuitWeddingScene)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetQuitWeddingScene* default_instance_;
};
// -------------------------------------------------------------------

class stNotifyFriendAction : public ::google::protobuf::Message {
 public:
  stNotifyFriendAction();
  virtual ~stNotifyFriendAction();

  stNotifyFriendAction(const stNotifyFriendAction& from);

  inline stNotifyFriendAction& operator=(const stNotifyFriendAction& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNotifyFriendAction& default_instance();

  void Swap(stNotifyFriendAction* other);

  // implements Message ----------------------------------------------

  stNotifyFriendAction* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNotifyFriendAction& from);
  void MergeFrom(const stNotifyFriendAction& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNotifyFriendAction_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNotifyFriendAction_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNotifyFriendAction_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNotifyFriendAction_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNotifyFriendAction_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNotifyFriendAction_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNotifyFriendAction_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNotifyFriendAction_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNotifyFriendAction_ProtoModID_Parse(name, value);
  }

  typedef stNotifyFriendAction_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNotifyFriendAction_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNotifyFriendAction_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNotifyFriendAction_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNotifyFriendAction_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNotifyFriendAction_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNotifyFriendAction_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNotifyFriendAction_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNotifyFriendAction_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional bool in = 1;
  inline bool has_in() const;
  inline void clear_in();
  static const int kInFieldNumber = 1;
  inline bool in() const;
  inline void set_in(bool value);

  // optional uint32 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stNotifyFriendAction)
 private:
  inline void set_has_in();
  inline void clear_has_in();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool in_;
  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stNotifyFriendAction* default_instance_;
};
// -------------------------------------------------------------------

class stSendCharCreateTime : public ::google::protobuf::Message {
 public:
  stSendCharCreateTime();
  virtual ~stSendCharCreateTime();

  stSendCharCreateTime(const stSendCharCreateTime& from);

  inline stSendCharCreateTime& operator=(const stSendCharCreateTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSendCharCreateTime& default_instance();

  void Swap(stSendCharCreateTime* other);

  // implements Message ----------------------------------------------

  stSendCharCreateTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSendCharCreateTime& from);
  void MergeFrom(const stSendCharCreateTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSendCharCreateTime_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSendCharCreateTime_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSendCharCreateTime_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSendCharCreateTime_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSendCharCreateTime_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSendCharCreateTime_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSendCharCreateTime_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSendCharCreateTime_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSendCharCreateTime_ProtoModID_Parse(name, value);
  }

  typedef stSendCharCreateTime_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSendCharCreateTime_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSendCharCreateTime_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSendCharCreateTime_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSendCharCreateTime_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSendCharCreateTime_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSendCharCreateTime_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSendCharCreateTime_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSendCharCreateTime_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional string createTimeStr = 1;
  inline bool has_createtimestr() const;
  inline void clear_createtimestr();
  static const int kCreateTimeStrFieldNumber = 1;
  inline const ::std::string& createtimestr() const;
  inline void set_createtimestr(const ::std::string& value);
  inline void set_createtimestr(const char* value);
  inline void set_createtimestr(const char* value, size_t size);
  inline ::std::string* mutable_createtimestr();
  inline ::std::string* release_createtimestr();
  inline void set_allocated_createtimestr(::std::string* createtimestr);

  // @@protoc_insertion_point(class_scope:Role.stSendCharCreateTime)
 private:
  inline void set_has_createtimestr();
  inline void clear_has_createtimestr();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* createtimestr_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSendCharCreateTime* default_instance_;
};
// -------------------------------------------------------------------

class stReqDrawWeddingRing : public ::google::protobuf::Message {
 public:
  stReqDrawWeddingRing();
  virtual ~stReqDrawWeddingRing();

  stReqDrawWeddingRing(const stReqDrawWeddingRing& from);

  inline stReqDrawWeddingRing& operator=(const stReqDrawWeddingRing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqDrawWeddingRing& default_instance();

  void Swap(stReqDrawWeddingRing* other);

  // implements Message ----------------------------------------------

  stReqDrawWeddingRing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqDrawWeddingRing& from);
  void MergeFrom(const stReqDrawWeddingRing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqDrawWeddingRing_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqDrawWeddingRing_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqDrawWeddingRing_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqDrawWeddingRing_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqDrawWeddingRing_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqDrawWeddingRing_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqDrawWeddingRing_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqDrawWeddingRing_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqDrawWeddingRing_ProtoModID_Parse(name, value);
  }

  typedef stReqDrawWeddingRing_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqDrawWeddingRing_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqDrawWeddingRing_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqDrawWeddingRing_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqDrawWeddingRing_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqDrawWeddingRing_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqDrawWeddingRing_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqDrawWeddingRing_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqDrawWeddingRing_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqDrawWeddingRing)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqDrawWeddingRing* default_instance_;
};
// -------------------------------------------------------------------

class stRetDrawWeddingRing : public ::google::protobuf::Message {
 public:
  stRetDrawWeddingRing();
  virtual ~stRetDrawWeddingRing();

  stRetDrawWeddingRing(const stRetDrawWeddingRing& from);

  inline stRetDrawWeddingRing& operator=(const stRetDrawWeddingRing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRetDrawWeddingRing& default_instance();

  void Swap(stRetDrawWeddingRing* other);

  // implements Message ----------------------------------------------

  stRetDrawWeddingRing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRetDrawWeddingRing& from);
  void MergeFrom(const stRetDrawWeddingRing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRetDrawWeddingRing_Result Result;
  static const Result eSuccess = stRetDrawWeddingRing_Result_eSuccess;
  static const Result eNot_In_Scene = stRetDrawWeddingRing_Result_eNot_In_Scene;
  static const Result eAready_Draw = stRetDrawWeddingRing_Result_eAready_Draw;
  static const Result eNot_Marry = stRetDrawWeddingRing_Result_eNot_Marry;
  static const Result eInner_Error = stRetDrawWeddingRing_Result_eInner_Error;
  static inline bool Result_IsValid(int value) {
    return stRetDrawWeddingRing_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stRetDrawWeddingRing_Result_Result_MIN;
  static const Result Result_MAX =
    stRetDrawWeddingRing_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stRetDrawWeddingRing_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stRetDrawWeddingRing_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stRetDrawWeddingRing_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stRetDrawWeddingRing_Result_Parse(name, value);
  }

  typedef stRetDrawWeddingRing_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRetDrawWeddingRing_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRetDrawWeddingRing_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRetDrawWeddingRing_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRetDrawWeddingRing_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRetDrawWeddingRing_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRetDrawWeddingRing_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRetDrawWeddingRing_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRetDrawWeddingRing_ProtoModID_Parse(name, value);
  }

  typedef stRetDrawWeddingRing_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRetDrawWeddingRing_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRetDrawWeddingRing_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRetDrawWeddingRing_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRetDrawWeddingRing_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRetDrawWeddingRing_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRetDrawWeddingRing_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRetDrawWeddingRing_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRetDrawWeddingRing_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRetDrawWeddingRing.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRetDrawWeddingRing_Result result() const;
  inline void set_result(::Role::stRetDrawWeddingRing_Result value);

  // @@protoc_insertion_point(class_scope:Role.stRetDrawWeddingRing)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRetDrawWeddingRing* default_instance_;
};
// -------------------------------------------------------------------

class stReqBuyNum : public ::google::protobuf::Message {
 public:
  stReqBuyNum();
  virtual ~stReqBuyNum();

  stReqBuyNum(const stReqBuyNum& from);

  inline stReqBuyNum& operator=(const stReqBuyNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqBuyNum& default_instance();

  void Swap(stReqBuyNum* other);

  // implements Message ----------------------------------------------

  stReqBuyNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqBuyNum& from);
  void MergeFrom(const stReqBuyNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqBuyNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqBuyNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqBuyNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqBuyNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqBuyNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqBuyNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqBuyNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqBuyNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqBuyNum_ProtoModID_Parse(name, value);
  }

  typedef stReqBuyNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqBuyNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqBuyNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqBuyNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqBuyNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqBuyNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqBuyNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqBuyNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqBuyNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqBuyNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqBuyNum* default_instance_;
};
// -------------------------------------------------------------------

class stBuyNumResult : public ::google::protobuf::Message {
 public:
  stBuyNumResult();
  virtual ~stBuyNumResult();

  stBuyNumResult(const stBuyNumResult& from);

  inline stBuyNumResult& operator=(const stBuyNumResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stBuyNumResult& default_instance();

  void Swap(stBuyNumResult* other);

  // implements Message ----------------------------------------------

  stBuyNumResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stBuyNumResult& from);
  void MergeFrom(const stBuyNumResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stBuyNumResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stBuyNumResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stBuyNumResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stBuyNumResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stBuyNumResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stBuyNumResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stBuyNumResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stBuyNumResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stBuyNumResult_ProtoModID_Parse(name, value);
  }

  typedef stBuyNumResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stBuyNumResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stBuyNumResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stBuyNumResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stBuyNumResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stBuyNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stBuyNumResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stBuyNumResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stBuyNumResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 buyNum = 1;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 1;
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stBuyNumResult)
 private:
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 buynum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stBuyNumResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRefreshNum : public ::google::protobuf::Message {
 public:
  stReqRefreshNum();
  virtual ~stReqRefreshNum();

  stReqRefreshNum(const stReqRefreshNum& from);

  inline stReqRefreshNum& operator=(const stReqRefreshNum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRefreshNum& default_instance();

  void Swap(stReqRefreshNum* other);

  // implements Message ----------------------------------------------

  stReqRefreshNum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRefreshNum& from);
  void MergeFrom(const stReqRefreshNum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRefreshNum_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRefreshNum_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRefreshNum_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRefreshNum_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRefreshNum_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRefreshNum_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRefreshNum_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRefreshNum_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRefreshNum_ProtoModID_Parse(name, value);
  }

  typedef stReqRefreshNum_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRefreshNum_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRefreshNum_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRefreshNum_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRefreshNum_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRefreshNum_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRefreshNum_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRefreshNum_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRefreshNum_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRefreshNum)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRefreshNum* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshNumResult : public ::google::protobuf::Message {
 public:
  stRefreshNumResult();
  virtual ~stRefreshNumResult();

  stRefreshNumResult(const stRefreshNumResult& from);

  inline stRefreshNumResult& operator=(const stRefreshNumResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshNumResult& default_instance();

  void Swap(stRefreshNumResult* other);

  // implements Message ----------------------------------------------

  stRefreshNumResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshNumResult& from);
  void MergeFrom(const stRefreshNumResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshNumResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshNumResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshNumResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshNumResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshNumResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshNumResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshNumResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshNumResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshNumResult_ProtoModID_Parse(name, value);
  }

  typedef stRefreshNumResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshNumResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshNumResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshNumResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshNumResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshNumResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshNumResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshNumResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshNumResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 refreshNum = 1;
  inline bool has_refreshnum() const;
  inline void clear_refreshnum();
  static const int kRefreshNumFieldNumber = 1;
  inline ::google::protobuf::uint32 refreshnum() const;
  inline void set_refreshnum(::google::protobuf::uint32 value);

  // optional uint32 diamondRefreshNum = 2;
  inline bool has_diamondrefreshnum() const;
  inline void clear_diamondrefreshnum();
  static const int kDiamondRefreshNumFieldNumber = 2;
  inline ::google::protobuf::uint32 diamondrefreshnum() const;
  inline void set_diamondrefreshnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stRefreshNumResult)
 private:
  inline void set_has_refreshnum();
  inline void clear_has_refreshnum();
  inline void set_has_diamondrefreshnum();
  inline void clear_has_diamondrefreshnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 refreshnum_;
  ::google::protobuf::uint32 diamondrefreshnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRefreshNumResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqColumnList : public ::google::protobuf::Message {
 public:
  stReqColumnList();
  virtual ~stReqColumnList();

  stReqColumnList(const stReqColumnList& from);

  inline stReqColumnList& operator=(const stReqColumnList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqColumnList& default_instance();

  void Swap(stReqColumnList* other);

  // implements Message ----------------------------------------------

  stReqColumnList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqColumnList& from);
  void MergeFrom(const stReqColumnList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqColumnList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqColumnList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqColumnList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqColumnList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqColumnList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqColumnList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqColumnList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqColumnList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqColumnList_ProtoModID_Parse(name, value);
  }

  typedef stReqColumnList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqColumnList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqColumnList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqColumnList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqColumnList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqColumnList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqColumnList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqColumnList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqColumnList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.eColumn type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Role::eColumn type() const;
  inline void set_type(::Role::eColumn value);

  // @@protoc_insertion_point(class_scope:Role.stReqColumnList)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqColumnList* default_instance_;
};
// -------------------------------------------------------------------

class stItemInfo : public ::google::protobuf::Message {
 public:
  stItemInfo();
  virtual ~stItemInfo();

  stItemInfo(const stItemInfo& from);

  inline stItemInfo& operator=(const stItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stItemInfo& default_instance();

  void Swap(stItemInfo* other);

  // implements Message ----------------------------------------------

  stItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stItemInfo& from);
  void MergeFrom(const stItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 uniqueID = 1;
  inline bool has_uniqueid() const;
  inline void clear_uniqueid();
  static const int kUniqueIDFieldNumber = 1;
  inline ::google::protobuf::uint32 uniqueid() const;
  inline void set_uniqueid(::google::protobuf::uint32 value);

  // optional uint32 itemNum = 2;
  inline bool has_itemnum() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 2;
  inline ::google::protobuf::uint32 itemnum() const;
  inline void set_itemnum(::google::protobuf::uint32 value);

  // optional uint32 costResType = 3;
  inline bool has_costrestype() const;
  inline void clear_costrestype();
  static const int kCostResTypeFieldNumber = 3;
  inline ::google::protobuf::uint32 costrestype() const;
  inline void set_costrestype(::google::protobuf::uint32 value);

  // optional uint32 itemPrice = 4;
  inline bool has_itemprice() const;
  inline void clear_itemprice();
  static const int kItemPriceFieldNumber = 4;
  inline ::google::protobuf::uint32 itemprice() const;
  inline void set_itemprice(::google::protobuf::uint32 value);

  // optional uint32 buyNum = 5;
  inline bool has_buynum() const;
  inline void clear_buynum();
  static const int kBuyNumFieldNumber = 5;
  inline ::google::protobuf::uint32 buynum() const;
  inline void set_buynum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stItemInfo)
 private:
  inline void set_has_uniqueid();
  inline void clear_has_uniqueid();
  inline void set_has_itemnum();
  inline void clear_has_itemnum();
  inline void set_has_costrestype();
  inline void clear_has_costrestype();
  inline void set_has_itemprice();
  inline void clear_has_itemprice();
  inline void set_has_buynum();
  inline void clear_has_buynum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 uniqueid_;
  ::google::protobuf::uint32 itemnum_;
  ::google::protobuf::uint32 costrestype_;
  ::google::protobuf::uint32 itemprice_;
  ::google::protobuf::uint32 buynum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stColumnListResult : public ::google::protobuf::Message {
 public:
  stColumnListResult();
  virtual ~stColumnListResult();

  stColumnListResult(const stColumnListResult& from);

  inline stColumnListResult& operator=(const stColumnListResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stColumnListResult& default_instance();

  void Swap(stColumnListResult* other);

  // implements Message ----------------------------------------------

  stColumnListResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stColumnListResult& from);
  void MergeFrom(const stColumnListResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stColumnListResult_eResult eResult;
  static const eResult SUCCESS = stColumnListResult_eResult_SUCCESS;
  static const eResult INNER_ERROR = stColumnListResult_eResult_INNER_ERROR;
  static const eResult FAILURE = stColumnListResult_eResult_FAILURE;
  static inline bool eResult_IsValid(int value) {
    return stColumnListResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stColumnListResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stColumnListResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stColumnListResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stColumnListResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stColumnListResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stColumnListResult_eResult_Parse(name, value);
  }

  typedef stColumnListResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stColumnListResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stColumnListResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stColumnListResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stColumnListResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stColumnListResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stColumnListResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stColumnListResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stColumnListResult_ProtoModID_Parse(name, value);
  }

  typedef stColumnListResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stColumnListResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stColumnListResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stColumnListResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stColumnListResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stColumnListResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stColumnListResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stColumnListResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stColumnListResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stColumnListResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stColumnListResult_eResult result() const;
  inline void set_result(::Role::stColumnListResult_eResult value);

  // repeated .Role.stShopItem shopList = 2;
  inline int shoplist_size() const;
  inline void clear_shoplist();
  static const int kShopListFieldNumber = 2;
  inline const ::Role::stShopItem& shoplist(int index) const;
  inline ::Role::stShopItem* mutable_shoplist(int index);
  inline ::Role::stShopItem* add_shoplist();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >&
      shoplist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >*
      mutable_shoplist();

  // @@protoc_insertion_point(class_scope:Role.stColumnListResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stShopItem > shoplist_;
  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stColumnListResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqMarketBuyItem : public ::google::protobuf::Message {
 public:
  stReqMarketBuyItem();
  virtual ~stReqMarketBuyItem();

  stReqMarketBuyItem(const stReqMarketBuyItem& from);

  inline stReqMarketBuyItem& operator=(const stReqMarketBuyItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqMarketBuyItem& default_instance();

  void Swap(stReqMarketBuyItem* other);

  // implements Message ----------------------------------------------

  stReqMarketBuyItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqMarketBuyItem& from);
  void MergeFrom(const stReqMarketBuyItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqMarketBuyItem_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqMarketBuyItem_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqMarketBuyItem_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqMarketBuyItem_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqMarketBuyItem_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqMarketBuyItem_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqMarketBuyItem_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqMarketBuyItem_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqMarketBuyItem_ProtoModID_Parse(name, value);
  }

  typedef stReqMarketBuyItem_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqMarketBuyItem_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqMarketBuyItem_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqMarketBuyItem_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqMarketBuyItem_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqMarketBuyItem_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqMarketBuyItem_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqMarketBuyItem_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqMarketBuyItem_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.eColumn type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::Role::eColumn type() const;
  inline void set_type(::Role::eColumn value);

  // optional uint32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::uint32 index() const;
  inline void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqMarketBuyItem)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int type_;
  ::google::protobuf::uint32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqMarketBuyItem* default_instance_;
};
// -------------------------------------------------------------------

class stMarketBuyItemResult : public ::google::protobuf::Message {
 public:
  stMarketBuyItemResult();
  virtual ~stMarketBuyItemResult();

  stMarketBuyItemResult(const stMarketBuyItemResult& from);

  inline stMarketBuyItemResult& operator=(const stMarketBuyItemResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMarketBuyItemResult& default_instance();

  void Swap(stMarketBuyItemResult* other);

  // implements Message ----------------------------------------------

  stMarketBuyItemResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMarketBuyItemResult& from);
  void MergeFrom(const stMarketBuyItemResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stMarketBuyItemResult_BUYRESULT BUYRESULT;
  static const BUYRESULT BUY_SUCCESS = stMarketBuyItemResult_BUYRESULT_BUY_SUCCESS;
  static const BUYRESULT RESOURCE_NOT_ENOUGH = stMarketBuyItemResult_BUYRESULT_RESOURCE_NOT_ENOUGH;
  static const BUYRESULT BUY_FULL = stMarketBuyItemResult_BUYRESULT_BUY_FULL;
  static const BUYRESULT ITEM_NOT_EXIST = stMarketBuyItemResult_BUYRESULT_ITEM_NOT_EXIST;
  static const BUYRESULT BUY_OUT = stMarketBuyItemResult_BUYRESULT_BUY_OUT;
  static const BUYRESULT INNER_ERROR = stMarketBuyItemResult_BUYRESULT_INNER_ERROR;
  static const BUYRESULT TIME_USE_OUT = stMarketBuyItemResult_BUYRESULT_TIME_USE_OUT;
  static inline bool BUYRESULT_IsValid(int value) {
    return stMarketBuyItemResult_BUYRESULT_IsValid(value);
  }
  static const BUYRESULT BUYRESULT_MIN =
    stMarketBuyItemResult_BUYRESULT_BUYRESULT_MIN;
  static const BUYRESULT BUYRESULT_MAX =
    stMarketBuyItemResult_BUYRESULT_BUYRESULT_MAX;
  static const int BUYRESULT_ARRAYSIZE =
    stMarketBuyItemResult_BUYRESULT_BUYRESULT_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  BUYRESULT_descriptor() {
    return stMarketBuyItemResult_BUYRESULT_descriptor();
  }
  static inline const ::std::string& BUYRESULT_Name(BUYRESULT value) {
    return stMarketBuyItemResult_BUYRESULT_Name(value);
  }
  static inline bool BUYRESULT_Parse(const ::std::string& name,
      BUYRESULT* value) {
    return stMarketBuyItemResult_BUYRESULT_Parse(name, value);
  }

  typedef stMarketBuyItemResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stMarketBuyItemResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stMarketBuyItemResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stMarketBuyItemResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stMarketBuyItemResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stMarketBuyItemResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stMarketBuyItemResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stMarketBuyItemResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stMarketBuyItemResult_ProtoModID_Parse(name, value);
  }

  typedef stMarketBuyItemResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stMarketBuyItemResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stMarketBuyItemResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stMarketBuyItemResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stMarketBuyItemResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stMarketBuyItemResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stMarketBuyItemResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stMarketBuyItemResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stMarketBuyItemResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stMarketBuyItemResult.BUYRESULT retCode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetCodeFieldNumber = 1;
  inline ::Role::stMarketBuyItemResult_BUYRESULT retcode() const;
  inline void set_retcode(::Role::stMarketBuyItemResult_BUYRESULT value);

  // optional .Role.stShopItem shopItem = 2;
  inline bool has_shopitem() const;
  inline void clear_shopitem();
  static const int kShopItemFieldNumber = 2;
  inline const ::Role::stShopItem& shopitem() const;
  inline ::Role::stShopItem* mutable_shopitem();
  inline ::Role::stShopItem* release_shopitem();
  inline void set_allocated_shopitem(::Role::stShopItem* shopitem);

  // @@protoc_insertion_point(class_scope:Role.stMarketBuyItemResult)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_shopitem();
  inline void clear_has_shopitem();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::Role::stShopItem* shopitem_;
  int retcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stMarketBuyItemResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqOpenWindow : public ::google::protobuf::Message {
 public:
  stReqOpenWindow();
  virtual ~stReqOpenWindow();

  stReqOpenWindow(const stReqOpenWindow& from);

  inline stReqOpenWindow& operator=(const stReqOpenWindow& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqOpenWindow& default_instance();

  void Swap(stReqOpenWindow* other);

  // implements Message ----------------------------------------------

  stReqOpenWindow* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqOpenWindow& from);
  void MergeFrom(const stReqOpenWindow& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqOpenWindow_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqOpenWindow_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqOpenWindow_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqOpenWindow_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqOpenWindow_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqOpenWindow_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqOpenWindow_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqOpenWindow_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqOpenWindow_ProtoModID_Parse(name, value);
  }

  typedef stReqOpenWindow_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqOpenWindow_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqOpenWindow_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqOpenWindow_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqOpenWindow_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqOpenWindow_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqOpenWindow_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqOpenWindow_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqOpenWindow_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqOpenWindow)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqOpenWindow* default_instance_;
};
// -------------------------------------------------------------------

class stOpenWindowResult : public ::google::protobuf::Message {
 public:
  stOpenWindowResult();
  virtual ~stOpenWindowResult();

  stOpenWindowResult(const stOpenWindowResult& from);

  inline stOpenWindowResult& operator=(const stOpenWindowResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stOpenWindowResult& default_instance();

  void Swap(stOpenWindowResult* other);

  // implements Message ----------------------------------------------

  stOpenWindowResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stOpenWindowResult& from);
  void MergeFrom(const stOpenWindowResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stOpenWindowResult_eResult eResult;
  static const eResult OPEN_SUCCESS = stOpenWindowResult_eResult_OPEN_SUCCESS;
  static const eResult TIME_LIMIT = stOpenWindowResult_eResult_TIME_LIMIT;
  static inline bool eResult_IsValid(int value) {
    return stOpenWindowResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stOpenWindowResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stOpenWindowResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stOpenWindowResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stOpenWindowResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stOpenWindowResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stOpenWindowResult_eResult_Parse(name, value);
  }

  typedef stOpenWindowResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stOpenWindowResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stOpenWindowResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stOpenWindowResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stOpenWindowResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stOpenWindowResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stOpenWindowResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stOpenWindowResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stOpenWindowResult_ProtoModID_Parse(name, value);
  }

  typedef stOpenWindowResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stOpenWindowResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stOpenWindowResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stOpenWindowResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stOpenWindowResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stOpenWindowResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stOpenWindowResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stOpenWindowResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stOpenWindowResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stOpenWindowResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stOpenWindowResult_eResult result() const;
  inline void set_result(::Role::stOpenWindowResult_eResult value);

  // optional uint32 lv = 2;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 2;
  inline ::google::protobuf::uint32 lv() const;
  inline void set_lv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stOpenWindowResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stOpenWindowResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqRefreshList : public ::google::protobuf::Message {
 public:
  stReqRefreshList();
  virtual ~stReqRefreshList();

  stReqRefreshList(const stReqRefreshList& from);

  inline stReqRefreshList& operator=(const stReqRefreshList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqRefreshList& default_instance();

  void Swap(stReqRefreshList* other);

  // implements Message ----------------------------------------------

  stReqRefreshList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqRefreshList& from);
  void MergeFrom(const stReqRefreshList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqRefreshList_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqRefreshList_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqRefreshList_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqRefreshList_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqRefreshList_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqRefreshList_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqRefreshList_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqRefreshList_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqRefreshList_ProtoModID_Parse(name, value);
  }

  typedef stReqRefreshList_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqRefreshList_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqRefreshList_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqRefreshList_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqRefreshList_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqRefreshList_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqRefreshList_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqRefreshList_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqRefreshList_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqRefreshList)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqRefreshList* default_instance_;
};
// -------------------------------------------------------------------

class stRefreshListResult : public ::google::protobuf::Message {
 public:
  stRefreshListResult();
  virtual ~stRefreshListResult();

  stRefreshListResult(const stRefreshListResult& from);

  inline stRefreshListResult& operator=(const stRefreshListResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stRefreshListResult& default_instance();

  void Swap(stRefreshListResult* other);

  // implements Message ----------------------------------------------

  stRefreshListResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stRefreshListResult& from);
  void MergeFrom(const stRefreshListResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stRefreshListResult_eResult eResult;
  static const eResult SUCCESS = stRefreshListResult_eResult_SUCCESS;
  static const eResult INNER_ERROR = stRefreshListResult_eResult_INNER_ERROR;
  static const eResult RESOURCE_NOT_ENOUGH = stRefreshListResult_eResult_RESOURCE_NOT_ENOUGH;
  static const eResult SHOP_NOT_EXIST = stRefreshListResult_eResult_SHOP_NOT_EXIST;
  static const eResult REFRESH_LIMIT = stRefreshListResult_eResult_REFRESH_LIMIT;
  static inline bool eResult_IsValid(int value) {
    return stRefreshListResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stRefreshListResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stRefreshListResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stRefreshListResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stRefreshListResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stRefreshListResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stRefreshListResult_eResult_Parse(name, value);
  }

  typedef stRefreshListResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stRefreshListResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stRefreshListResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stRefreshListResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stRefreshListResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stRefreshListResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stRefreshListResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stRefreshListResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stRefreshListResult_ProtoModID_Parse(name, value);
  }

  typedef stRefreshListResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stRefreshListResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stRefreshListResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stRefreshListResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stRefreshListResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stRefreshListResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stRefreshListResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stRefreshListResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stRefreshListResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stRefreshListResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stRefreshListResult_eResult result() const;
  inline void set_result(::Role::stRefreshListResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stRefreshListResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stRefreshListResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqAKeyRaiseUserSkillLv : public ::google::protobuf::Message {
 public:
  stReqAKeyRaiseUserSkillLv();
  virtual ~stReqAKeyRaiseUserSkillLv();

  stReqAKeyRaiseUserSkillLv(const stReqAKeyRaiseUserSkillLv& from);

  inline stReqAKeyRaiseUserSkillLv& operator=(const stReqAKeyRaiseUserSkillLv& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqAKeyRaiseUserSkillLv& default_instance();

  void Swap(stReqAKeyRaiseUserSkillLv* other);

  // implements Message ----------------------------------------------

  stReqAKeyRaiseUserSkillLv* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqAKeyRaiseUserSkillLv& from);
  void MergeFrom(const stReqAKeyRaiseUserSkillLv& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqAKeyRaiseUserSkillLv_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqAKeyRaiseUserSkillLv_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqAKeyRaiseUserSkillLv_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqAKeyRaiseUserSkillLv_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqAKeyRaiseUserSkillLv_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqAKeyRaiseUserSkillLv_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqAKeyRaiseUserSkillLv_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqAKeyRaiseUserSkillLv_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqAKeyRaiseUserSkillLv_ProtoModID_Parse(name, value);
  }

  typedef stReqAKeyRaiseUserSkillLv_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqAKeyRaiseUserSkillLv_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqAKeyRaiseUserSkillLv_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqAKeyRaiseUserSkillLv_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqAKeyRaiseUserSkillLv_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqAKeyRaiseUserSkillLv_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqAKeyRaiseUserSkillLv_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqAKeyRaiseUserSkillLv_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqAKeyRaiseUserSkillLv_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 skillID = 1;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 1;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqAKeyRaiseUserSkillLv)
 private:
  inline void set_has_skillid();
  inline void clear_has_skillid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 skillid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqAKeyRaiseUserSkillLv* default_instance_;
};
// -------------------------------------------------------------------

class stAKeyRaiseUserSkillLvResult : public ::google::protobuf::Message {
 public:
  stAKeyRaiseUserSkillLvResult();
  virtual ~stAKeyRaiseUserSkillLvResult();

  stAKeyRaiseUserSkillLvResult(const stAKeyRaiseUserSkillLvResult& from);

  inline stAKeyRaiseUserSkillLvResult& operator=(const stAKeyRaiseUserSkillLvResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stAKeyRaiseUserSkillLvResult& default_instance();

  void Swap(stAKeyRaiseUserSkillLvResult* other);

  // implements Message ----------------------------------------------

  stAKeyRaiseUserSkillLvResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stAKeyRaiseUserSkillLvResult& from);
  void MergeFrom(const stAKeyRaiseUserSkillLvResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stAKeyRaiseUserSkillLvResult_eResult eResult;
  static const eResult eSuccess = stAKeyRaiseUserSkillLvResult_eResult_eSuccess;
  static const eResult eSkill_Not_Exist = stAKeyRaiseUserSkillLvResult_eResult_eSkill_Not_Exist;
  static const eResult eInner_Cfg_Error = stAKeyRaiseUserSkillLvResult_eResult_eInner_Cfg_Error;
  static const eResult eGoldCoin_Not_Enough = stAKeyRaiseUserSkillLvResult_eResult_eGoldCoin_Not_Enough;
  static const eResult eRole_Lv_Limit = stAKeyRaiseUserSkillLvResult_eResult_eRole_Lv_Limit;
  static inline bool eResult_IsValid(int value) {
    return stAKeyRaiseUserSkillLvResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stAKeyRaiseUserSkillLvResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stAKeyRaiseUserSkillLvResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stAKeyRaiseUserSkillLvResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stAKeyRaiseUserSkillLvResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stAKeyRaiseUserSkillLvResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stAKeyRaiseUserSkillLvResult_eResult_Parse(name, value);
  }

  typedef stAKeyRaiseUserSkillLvResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stAKeyRaiseUserSkillLvResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stAKeyRaiseUserSkillLvResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stAKeyRaiseUserSkillLvResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stAKeyRaiseUserSkillLvResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stAKeyRaiseUserSkillLvResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stAKeyRaiseUserSkillLvResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stAKeyRaiseUserSkillLvResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stAKeyRaiseUserSkillLvResult_ProtoModID_Parse(name, value);
  }

  typedef stAKeyRaiseUserSkillLvResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stAKeyRaiseUserSkillLvResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stAKeyRaiseUserSkillLvResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stAKeyRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stAKeyRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stAKeyRaiseUserSkillLvResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stAKeyRaiseUserSkillLvResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stAKeyRaiseUserSkillLvResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stAKeyRaiseUserSkillLvResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stAKeyRaiseUserSkillLvResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stAKeyRaiseUserSkillLvResult_eResult result() const;
  inline void set_result(::Role::stAKeyRaiseUserSkillLvResult_eResult value);

  // optional uint32 skillID = 2;
  inline bool has_skillid() const;
  inline void clear_skillid();
  static const int kSkillIDFieldNumber = 2;
  inline ::google::protobuf::uint32 skillid() const;
  inline void set_skillid(::google::protobuf::uint32 value);

  // optional uint32 skillLv = 3;
  inline bool has_skilllv() const;
  inline void clear_skilllv();
  static const int kSkillLvFieldNumber = 3;
  inline ::google::protobuf::uint32 skilllv() const;
  inline void set_skilllv(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stAKeyRaiseUserSkillLvResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_skillid();
  inline void clear_has_skillid();
  inline void set_has_skilllv();
  inline void clear_has_skilllv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 skillid_;
  ::google::protobuf::uint32 skilllv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stAKeyRaiseUserSkillLvResult* default_instance_;
};
// -------------------------------------------------------------------

class stMountItemInfo : public ::google::protobuf::Message {
 public:
  stMountItemInfo();
  virtual ~stMountItemInfo();

  stMountItemInfo(const stMountItemInfo& from);

  inline stMountItemInfo& operator=(const stMountItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stMountItemInfo& default_instance();

  void Swap(stMountItemInfo* other);

  // implements Message ----------------------------------------------

  stMountItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stMountItemInfo& from);
  void MergeFrom(const stMountItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 bagType = 1;
  inline bool has_bagtype() const;
  inline void clear_bagtype();
  static const int kBagTypeFieldNumber = 1;
  inline ::google::protobuf::uint32 bagtype() const;
  inline void set_bagtype(::google::protobuf::uint32 value);

  // optional uint32 pos = 2;
  inline bool has_pos() const;
  inline void clear_pos();
  static const int kPosFieldNumber = 2;
  inline ::google::protobuf::uint32 pos() const;
  inline void set_pos(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 3;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 3;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stMountItemInfo)
 private:
  inline void set_has_bagtype();
  inline void clear_has_bagtype();
  inline void set_has_pos();
  inline void clear_has_pos();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 bagtype_;
  ::google::protobuf::uint32 pos_;
  ::google::protobuf::uint64 instanceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stMountItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class stReqStoneSynthesis : public ::google::protobuf::Message {
 public:
  stReqStoneSynthesis();
  virtual ~stReqStoneSynthesis();

  stReqStoneSynthesis(const stReqStoneSynthesis& from);

  inline stReqStoneSynthesis& operator=(const stReqStoneSynthesis& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqStoneSynthesis& default_instance();

  void Swap(stReqStoneSynthesis* other);

  // implements Message ----------------------------------------------

  stReqStoneSynthesis* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqStoneSynthesis& from);
  void MergeFrom(const stReqStoneSynthesis& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqStoneSynthesis_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqStoneSynthesis_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqStoneSynthesis_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqStoneSynthesis_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqStoneSynthesis_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqStoneSynthesis_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqStoneSynthesis_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqStoneSynthesis_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqStoneSynthesis_ProtoModID_Parse(name, value);
  }

  typedef stReqStoneSynthesis_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqStoneSynthesis_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqStoneSynthesis_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqStoneSynthesis_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqStoneSynthesis_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqStoneSynthesis_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqStoneSynthesis_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqStoneSynthesis_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqStoneSynthesis_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stMountItemInfo items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Role::stMountItemInfo& items(int index) const;
  inline ::Role::stMountItemInfo* mutable_items(int index);
  inline ::Role::stMountItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Role.stReqStoneSynthesis)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqStoneSynthesis* default_instance_;
};
// -------------------------------------------------------------------

class stStoneSynthesisResult : public ::google::protobuf::Message {
 public:
  stStoneSynthesisResult();
  virtual ~stStoneSynthesisResult();

  stStoneSynthesisResult(const stStoneSynthesisResult& from);

  inline stStoneSynthesisResult& operator=(const stStoneSynthesisResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stStoneSynthesisResult& default_instance();

  void Swap(stStoneSynthesisResult* other);

  // implements Message ----------------------------------------------

  stStoneSynthesisResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stStoneSynthesisResult& from);
  void MergeFrom(const stStoneSynthesisResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stStoneSynthesisResult_Result Result;
  static const Result eSUCCESS = stStoneSynthesisResult_Result_eSUCCESS;
  static const Result eFAILURE = stStoneSynthesisResult_Result_eFAILURE;
  static const Result eBAG_FULL = stStoneSynthesisResult_Result_eBAG_FULL;
  static const Result eRESOURCE_NOT_ENOUGH = stStoneSynthesisResult_Result_eRESOURCE_NOT_ENOUGH;
  static inline bool Result_IsValid(int value) {
    return stStoneSynthesisResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stStoneSynthesisResult_Result_Result_MIN;
  static const Result Result_MAX =
    stStoneSynthesisResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stStoneSynthesisResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stStoneSynthesisResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stStoneSynthesisResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stStoneSynthesisResult_Result_Parse(name, value);
  }

  typedef stStoneSynthesisResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stStoneSynthesisResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stStoneSynthesisResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stStoneSynthesisResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stStoneSynthesisResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stStoneSynthesisResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stStoneSynthesisResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stStoneSynthesisResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stStoneSynthesisResult_ProtoModID_Parse(name, value);
  }

  typedef stStoneSynthesisResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stStoneSynthesisResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stStoneSynthesisResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stStoneSynthesisResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stStoneSynthesisResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stStoneSynthesisResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stStoneSynthesisResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stStoneSynthesisResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stStoneSynthesisResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stStoneSynthesisResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stStoneSynthesisResult_Result result() const;
  inline void set_result(::Role::stStoneSynthesisResult_Result value);

  // optional uint32 itemID = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stStoneSynthesisResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stStoneSynthesisResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqStoneEvolvement : public ::google::protobuf::Message {
 public:
  stReqStoneEvolvement();
  virtual ~stReqStoneEvolvement();

  stReqStoneEvolvement(const stReqStoneEvolvement& from);

  inline stReqStoneEvolvement& operator=(const stReqStoneEvolvement& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqStoneEvolvement& default_instance();

  void Swap(stReqStoneEvolvement* other);

  // implements Message ----------------------------------------------

  stReqStoneEvolvement* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqStoneEvolvement& from);
  void MergeFrom(const stReqStoneEvolvement& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqStoneEvolvement_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqStoneEvolvement_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqStoneEvolvement_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqStoneEvolvement_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqStoneEvolvement_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqStoneEvolvement_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqStoneEvolvement_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqStoneEvolvement_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqStoneEvolvement_ProtoModID_Parse(name, value);
  }

  typedef stReqStoneEvolvement_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqStoneEvolvement_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqStoneEvolvement_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqStoneEvolvement_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqStoneEvolvement_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqStoneEvolvement_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqStoneEvolvement_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqStoneEvolvement_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqStoneEvolvement_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stMountItemInfo items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Role::stMountItemInfo& items(int index) const;
  inline ::Role::stMountItemInfo* mutable_items(int index);
  inline ::Role::stMountItemInfo* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Role.stReqStoneEvolvement)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqStoneEvolvement* default_instance_;
};
// -------------------------------------------------------------------

class stStoneEvolvementResult : public ::google::protobuf::Message {
 public:
  stStoneEvolvementResult();
  virtual ~stStoneEvolvementResult();

  stStoneEvolvementResult(const stStoneEvolvementResult& from);

  inline stStoneEvolvementResult& operator=(const stStoneEvolvementResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stStoneEvolvementResult& default_instance();

  void Swap(stStoneEvolvementResult* other);

  // implements Message ----------------------------------------------

  stStoneEvolvementResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stStoneEvolvementResult& from);
  void MergeFrom(const stStoneEvolvementResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stStoneEvolvementResult_Result Result;
  static const Result eSUCCESS = stStoneEvolvementResult_Result_eSUCCESS;
  static const Result eFAILURE = stStoneEvolvementResult_Result_eFAILURE;
  static const Result eBAG_FULL = stStoneEvolvementResult_Result_eBAG_FULL;
  static const Result eRESOURCE_NOT_ENOUGH = stStoneEvolvementResult_Result_eRESOURCE_NOT_ENOUGH;
  static inline bool Result_IsValid(int value) {
    return stStoneEvolvementResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stStoneEvolvementResult_Result_Result_MIN;
  static const Result Result_MAX =
    stStoneEvolvementResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stStoneEvolvementResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stStoneEvolvementResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stStoneEvolvementResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stStoneEvolvementResult_Result_Parse(name, value);
  }

  typedef stStoneEvolvementResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stStoneEvolvementResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stStoneEvolvementResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stStoneEvolvementResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stStoneEvolvementResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stStoneEvolvementResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stStoneEvolvementResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stStoneEvolvementResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stStoneEvolvementResult_ProtoModID_Parse(name, value);
  }

  typedef stStoneEvolvementResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stStoneEvolvementResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stStoneEvolvementResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stStoneEvolvementResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stStoneEvolvementResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stStoneEvolvementResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stStoneEvolvementResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stStoneEvolvementResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stStoneEvolvementResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stStoneEvolvementResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stStoneEvolvementResult_Result result() const;
  inline void set_result(::Role::stStoneEvolvementResult_Result value);

  // optional uint32 itemID = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::uint32 itemid() const;
  inline void set_itemid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stStoneEvolvementResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stStoneEvolvementResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqStoneProp : public ::google::protobuf::Message {
 public:
  stReqStoneProp();
  virtual ~stReqStoneProp();

  stReqStoneProp(const stReqStoneProp& from);

  inline stReqStoneProp& operator=(const stReqStoneProp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqStoneProp& default_instance();

  void Swap(stReqStoneProp* other);

  // implements Message ----------------------------------------------

  stReqStoneProp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqStoneProp& from);
  void MergeFrom(const stReqStoneProp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqStoneProp_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqStoneProp_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqStoneProp_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqStoneProp_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqStoneProp_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqStoneProp_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqStoneProp_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqStoneProp_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqStoneProp_ProtoModID_Parse(name, value);
  }

  typedef stReqStoneProp_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqStoneProp_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqStoneProp_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqStoneProp_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqStoneProp_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqStoneProp_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqStoneProp_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqStoneProp_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqStoneProp_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqStoneProp)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqStoneProp* default_instance_;
};
// -------------------------------------------------------------------

class stStonePropResult : public ::google::protobuf::Message {
 public:
  stStonePropResult();
  virtual ~stStonePropResult();

  stStonePropResult(const stStonePropResult& from);

  inline stStonePropResult& operator=(const stStonePropResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stStonePropResult& default_instance();

  void Swap(stStonePropResult* other);

  // implements Message ----------------------------------------------

  stStonePropResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stStonePropResult& from);
  void MergeFrom(const stStonePropResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stStonePropResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stStonePropResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stStonePropResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stStonePropResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stStonePropResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stStonePropResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stStonePropResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stStonePropResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stStonePropResult_ProtoModID_Parse(name, value);
  }

  typedef stStonePropResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stStonePropResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stStonePropResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stStonePropResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stStonePropResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stStonePropResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stStonePropResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stStonePropResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stStonePropResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stBattleProp battleProp = 1;
  inline int battleprop_size() const;
  inline void clear_battleprop();
  static const int kBattlePropFieldNumber = 1;
  inline const ::Role::stBattleProp& battleprop(int index) const;
  inline ::Role::stBattleProp* mutable_battleprop(int index);
  inline ::Role::stBattleProp* add_battleprop();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
      battleprop() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
      mutable_battleprop();

  // @@protoc_insertion_point(class_scope:Role.stStonePropResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp > battleprop_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stStonePropResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqChangePhoto : public ::google::protobuf::Message {
 public:
  stReqChangePhoto();
  virtual ~stReqChangePhoto();

  stReqChangePhoto(const stReqChangePhoto& from);

  inline stReqChangePhoto& operator=(const stReqChangePhoto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqChangePhoto& default_instance();

  void Swap(stReqChangePhoto* other);

  // implements Message ----------------------------------------------

  stReqChangePhoto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqChangePhoto& from);
  void MergeFrom(const stReqChangePhoto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqChangePhoto_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqChangePhoto_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqChangePhoto_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqChangePhoto_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqChangePhoto_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqChangePhoto_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqChangePhoto_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqChangePhoto_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqChangePhoto_ProtoModID_Parse(name, value);
  }

  typedef stReqChangePhoto_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqChangePhoto_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqChangePhoto_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqChangePhoto_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqChangePhoto_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqChangePhoto_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqChangePhoto_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqChangePhoto_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqChangePhoto_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqChangePhoto)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqChangePhoto* default_instance_;
};
// -------------------------------------------------------------------

class stChangePhotoResult : public ::google::protobuf::Message {
 public:
  stChangePhotoResult();
  virtual ~stChangePhotoResult();

  stChangePhotoResult(const stChangePhotoResult& from);

  inline stChangePhotoResult& operator=(const stChangePhotoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stChangePhotoResult& default_instance();

  void Swap(stChangePhotoResult* other);

  // implements Message ----------------------------------------------

  stChangePhotoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stChangePhotoResult& from);
  void MergeFrom(const stChangePhotoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stChangePhotoResult_Result Result;
  static const Result eSUCCESS = stChangePhotoResult_Result_eSUCCESS;
  static const Result eFAILURE = stChangePhotoResult_Result_eFAILURE;
  static inline bool Result_IsValid(int value) {
    return stChangePhotoResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stChangePhotoResult_Result_Result_MIN;
  static const Result Result_MAX =
    stChangePhotoResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stChangePhotoResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stChangePhotoResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stChangePhotoResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stChangePhotoResult_Result_Parse(name, value);
  }

  typedef stChangePhotoResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stChangePhotoResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stChangePhotoResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stChangePhotoResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stChangePhotoResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stChangePhotoResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stChangePhotoResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stChangePhotoResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stChangePhotoResult_ProtoModID_Parse(name, value);
  }

  typedef stChangePhotoResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stChangePhotoResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stChangePhotoResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stChangePhotoResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stChangePhotoResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stChangePhotoResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stChangePhotoResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stChangePhotoResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stChangePhotoResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stChangePhotoResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stChangePhotoResult_Result result() const;
  inline void set_result(::Role::stChangePhotoResult_Result value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stChangePhotoResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stChangePhotoResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqHasPhotoID : public ::google::protobuf::Message {
 public:
  stReqHasPhotoID();
  virtual ~stReqHasPhotoID();

  stReqHasPhotoID(const stReqHasPhotoID& from);

  inline stReqHasPhotoID& operator=(const stReqHasPhotoID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqHasPhotoID& default_instance();

  void Swap(stReqHasPhotoID* other);

  // implements Message ----------------------------------------------

  stReqHasPhotoID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqHasPhotoID& from);
  void MergeFrom(const stReqHasPhotoID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqHasPhotoID_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqHasPhotoID_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqHasPhotoID_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqHasPhotoID_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqHasPhotoID_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqHasPhotoID_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqHasPhotoID_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqHasPhotoID_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqHasPhotoID_ProtoModID_Parse(name, value);
  }

  typedef stReqHasPhotoID_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqHasPhotoID_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqHasPhotoID_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqHasPhotoID_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqHasPhotoID_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqHasPhotoID_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqHasPhotoID_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqHasPhotoID_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqHasPhotoID_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqHasPhotoID)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqHasPhotoID* default_instance_;
};
// -------------------------------------------------------------------

class stHasPhotoIDResult : public ::google::protobuf::Message {
 public:
  stHasPhotoIDResult();
  virtual ~stHasPhotoIDResult();

  stHasPhotoIDResult(const stHasPhotoIDResult& from);

  inline stHasPhotoIDResult& operator=(const stHasPhotoIDResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stHasPhotoIDResult& default_instance();

  void Swap(stHasPhotoIDResult* other);

  // implements Message ----------------------------------------------

  stHasPhotoIDResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stHasPhotoIDResult& from);
  void MergeFrom(const stHasPhotoIDResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stHasPhotoIDResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stHasPhotoIDResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stHasPhotoIDResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stHasPhotoIDResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stHasPhotoIDResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stHasPhotoIDResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stHasPhotoIDResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stHasPhotoIDResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stHasPhotoIDResult_ProtoModID_Parse(name, value);
  }

  typedef stHasPhotoIDResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stHasPhotoIDResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stHasPhotoIDResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stHasPhotoIDResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stHasPhotoIDResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stHasPhotoIDResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stHasPhotoIDResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stHasPhotoIDResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stHasPhotoIDResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated uint32 photoIDs = 1;
  inline int photoids_size() const;
  inline void clear_photoids();
  static const int kPhotoIDsFieldNumber = 1;
  inline ::google::protobuf::uint32 photoids(int index) const;
  inline void set_photoids(int index, ::google::protobuf::uint32 value);
  inline void add_photoids(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      photoids() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_photoids();

  // @@protoc_insertion_point(class_scope:Role.stHasPhotoIDResult)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > photoids_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stHasPhotoIDResult* default_instance_;
};
// -------------------------------------------------------------------

class stReqUnlockPhoto : public ::google::protobuf::Message {
 public:
  stReqUnlockPhoto();
  virtual ~stReqUnlockPhoto();

  stReqUnlockPhoto(const stReqUnlockPhoto& from);

  inline stReqUnlockPhoto& operator=(const stReqUnlockPhoto& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stReqUnlockPhoto& default_instance();

  void Swap(stReqUnlockPhoto* other);

  // implements Message ----------------------------------------------

  stReqUnlockPhoto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stReqUnlockPhoto& from);
  void MergeFrom(const stReqUnlockPhoto& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stReqUnlockPhoto_ProtoModID ProtoModID;
  static const ProtoModID ModID = stReqUnlockPhoto_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stReqUnlockPhoto_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stReqUnlockPhoto_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stReqUnlockPhoto_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stReqUnlockPhoto_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stReqUnlockPhoto_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stReqUnlockPhoto_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stReqUnlockPhoto_ProtoModID_Parse(name, value);
  }

  typedef stReqUnlockPhoto_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stReqUnlockPhoto_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stReqUnlockPhoto_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stReqUnlockPhoto_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stReqUnlockPhoto_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stReqUnlockPhoto_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stReqUnlockPhoto_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stReqUnlockPhoto_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stReqUnlockPhoto_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stReqUnlockPhoto)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stReqUnlockPhoto* default_instance_;
};
// -------------------------------------------------------------------

class stUnlockPhotoResult : public ::google::protobuf::Message {
 public:
  stUnlockPhotoResult();
  virtual ~stUnlockPhotoResult();

  stUnlockPhotoResult(const stUnlockPhotoResult& from);

  inline stUnlockPhotoResult& operator=(const stUnlockPhotoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stUnlockPhotoResult& default_instance();

  void Swap(stUnlockPhotoResult* other);

  // implements Message ----------------------------------------------

  stUnlockPhotoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stUnlockPhotoResult& from);
  void MergeFrom(const stUnlockPhotoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stUnlockPhotoResult_Result Result;
  static const Result eSUCCESS = stUnlockPhotoResult_Result_eSUCCESS;
  static const Result eFAILURE = stUnlockPhotoResult_Result_eFAILURE;
  static const Result eCOND_NOT_ENOUGH = stUnlockPhotoResult_Result_eCOND_NOT_ENOUGH;
  static inline bool Result_IsValid(int value) {
    return stUnlockPhotoResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stUnlockPhotoResult_Result_Result_MIN;
  static const Result Result_MAX =
    stUnlockPhotoResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stUnlockPhotoResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stUnlockPhotoResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stUnlockPhotoResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stUnlockPhotoResult_Result_Parse(name, value);
  }

  typedef stUnlockPhotoResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stUnlockPhotoResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stUnlockPhotoResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stUnlockPhotoResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stUnlockPhotoResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stUnlockPhotoResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stUnlockPhotoResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stUnlockPhotoResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stUnlockPhotoResult_ProtoModID_Parse(name, value);
  }

  typedef stUnlockPhotoResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stUnlockPhotoResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stUnlockPhotoResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stUnlockPhotoResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stUnlockPhotoResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stUnlockPhotoResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stUnlockPhotoResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stUnlockPhotoResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stUnlockPhotoResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stUnlockPhotoResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stUnlockPhotoResult_Result result() const;
  inline void set_result(::Role::stUnlockPhotoResult_Result value);

  // @@protoc_insertion_point(class_scope:Role.stUnlockPhotoResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stUnlockPhotoResult* default_instance_;
};
// -------------------------------------------------------------------

class stSpriteInfo : public ::google::protobuf::Message {
 public:
  stSpriteInfo();
  virtual ~stSpriteInfo();

  stSpriteInfo(const stSpriteInfo& from);

  inline stSpriteInfo& operator=(const stSpriteInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSpriteInfo& default_instance();

  void Swap(stSpriteInfo* other);

  // implements Message ----------------------------------------------

  stSpriteInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSpriteInfo& from);
  void MergeFrom(const stSpriteInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSpriteInfo_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSpriteInfo_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSpriteInfo_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSpriteInfo_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSpriteInfo_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSpriteInfo_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSpriteInfo_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSpriteInfo_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSpriteInfo_ProtoModID_Parse(name, value);
  }

  typedef stSpriteInfo_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSpriteInfo_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSpriteInfo_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSpriteInfo_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSpriteInfo_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSpriteInfo_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSpriteInfo_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSpriteInfo_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSpriteInfo_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 tag = 1;
  inline bool has_tag() const;
  inline void clear_tag();
  static const int kTagFieldNumber = 1;
  inline ::google::protobuf::uint32 tag() const;
  inline void set_tag(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSpriteInfo)
 private:
  inline void set_has_tag();
  inline void clear_has_tag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 tag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSpriteInfo* default_instance_;
};
// -------------------------------------------------------------------

class stSpriteInfoResult : public ::google::protobuf::Message {
 public:
  stSpriteInfoResult();
  virtual ~stSpriteInfoResult();

  stSpriteInfoResult(const stSpriteInfoResult& from);

  inline stSpriteInfoResult& operator=(const stSpriteInfoResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSpriteInfoResult& default_instance();

  void Swap(stSpriteInfoResult* other);

  // implements Message ----------------------------------------------

  stSpriteInfoResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSpriteInfoResult& from);
  void MergeFrom(const stSpriteInfoResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSpriteInfoResult_Result Result;
  static const Result eSUCCESS = stSpriteInfoResult_Result_eSUCCESS;
  static const Result eFAILURE = stSpriteInfoResult_Result_eFAILURE;
  static inline bool Result_IsValid(int value) {
    return stSpriteInfoResult_Result_IsValid(value);
  }
  static const Result Result_MIN =
    stSpriteInfoResult_Result_Result_MIN;
  static const Result Result_MAX =
    stSpriteInfoResult_Result_Result_MAX;
  static const int Result_ARRAYSIZE =
    stSpriteInfoResult_Result_Result_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Result_descriptor() {
    return stSpriteInfoResult_Result_descriptor();
  }
  static inline const ::std::string& Result_Name(Result value) {
    return stSpriteInfoResult_Result_Name(value);
  }
  static inline bool Result_Parse(const ::std::string& name,
      Result* value) {
    return stSpriteInfoResult_Result_Parse(name, value);
  }

  typedef stSpriteInfoResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSpriteInfoResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSpriteInfoResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSpriteInfoResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSpriteInfoResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSpriteInfoResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSpriteInfoResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSpriteInfoResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSpriteInfoResult_ProtoModID_Parse(name, value);
  }

  typedef stSpriteInfoResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSpriteInfoResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSpriteInfoResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSpriteInfoResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSpriteInfoResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSpriteInfoResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSpriteInfoResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSpriteInfoResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSpriteInfoResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stSpriteInfoResult.Result result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stSpriteInfoResult_Result result() const;
  inline void set_result(::Role::stSpriteInfoResult_Result value);

  // optional uint32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 level = 3;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 3;
  inline ::google::protobuf::uint32 level() const;
  inline void set_level(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSpriteInfoResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_level();
  inline void clear_has_level();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;
  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 level_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSpriteInfoResult* default_instance_;
};
// -------------------------------------------------------------------

class stTrainHeroReq : public ::google::protobuf::Message {
 public:
  stTrainHeroReq();
  virtual ~stTrainHeroReq();

  stTrainHeroReq(const stTrainHeroReq& from);

  inline stTrainHeroReq& operator=(const stTrainHeroReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTrainHeroReq& default_instance();

  void Swap(stTrainHeroReq* other);

  // implements Message ----------------------------------------------

  stTrainHeroReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTrainHeroReq& from);
  void MergeFrom(const stTrainHeroReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stTrainHeroReq_ProtoModID ProtoModID;
  static const ProtoModID ModID = stTrainHeroReq_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stTrainHeroReq_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stTrainHeroReq_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stTrainHeroReq_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stTrainHeroReq_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stTrainHeroReq_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stTrainHeroReq_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stTrainHeroReq_ProtoModID_Parse(name, value);
  }

  typedef stTrainHeroReq_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stTrainHeroReq_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stTrainHeroReq_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stTrainHeroReq_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stTrainHeroReq_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stTrainHeroReq_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stTrainHeroReq_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stTrainHeroReq_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stTrainHeroReq_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional uint64 instanceID = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIDFieldNumber = 2;
  inline ::google::protobuf::uint64 instanceid() const;
  inline void set_instanceid(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:Role.stTrainHeroReq)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint64 instanceid_;
  ::google::protobuf::uint32 heroid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stTrainHeroReq* default_instance_;
};
// -------------------------------------------------------------------

class stTrainHeroResult : public ::google::protobuf::Message {
 public:
  stTrainHeroResult();
  virtual ~stTrainHeroResult();

  stTrainHeroResult(const stTrainHeroResult& from);

  inline stTrainHeroResult& operator=(const stTrainHeroResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stTrainHeroResult& default_instance();

  void Swap(stTrainHeroResult* other);

  // implements Message ----------------------------------------------

  stTrainHeroResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stTrainHeroResult& from);
  void MergeFrom(const stTrainHeroResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stTrainHeroResult_eResult eResult;
  static const eResult eSuccess = stTrainHeroResult_eResult_eSuccess;
  static const eResult eHero_Not_Exist = stTrainHeroResult_eResult_eHero_Not_Exist;
  static const eResult eItem_Not_Exist = stTrainHeroResult_eResult_eItem_Not_Exist;
  static const eResult eHero_Max_Train_Level = stTrainHeroResult_eResult_eHero_Max_Train_Level;
  static const eResult eInner_Error = stTrainHeroResult_eResult_eInner_Error;
  static const eResult eTrainSP = stTrainHeroResult_eResult_eTrainSP;
  static inline bool eResult_IsValid(int value) {
    return stTrainHeroResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stTrainHeroResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stTrainHeroResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stTrainHeroResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stTrainHeroResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stTrainHeroResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stTrainHeroResult_eResult_Parse(name, value);
  }

  typedef stTrainHeroResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stTrainHeroResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stTrainHeroResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stTrainHeroResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stTrainHeroResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stTrainHeroResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stTrainHeroResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stTrainHeroResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stTrainHeroResult_ProtoModID_Parse(name, value);
  }

  typedef stTrainHeroResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stTrainHeroResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stTrainHeroResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stTrainHeroResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stTrainHeroResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stTrainHeroResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stTrainHeroResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stTrainHeroResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stTrainHeroResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 heroID = 1;
  inline bool has_heroid() const;
  inline void clear_heroid();
  static const int kHeroIDFieldNumber = 1;
  inline ::google::protobuf::uint32 heroid() const;
  inline void set_heroid(::google::protobuf::uint32 value);

  // optional .Role.stTrainHeroResult.eResult result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline ::Role::stTrainHeroResult_eResult result() const;
  inline void set_result(::Role::stTrainHeroResult_eResult value);

  // optional bool levelUp = 3;
  inline bool has_levelup() const;
  inline void clear_levelup();
  static const int kLevelUpFieldNumber = 3;
  inline bool levelup() const;
  inline void set_levelup(bool value);

  // optional uint32 newLevel = 4;
  inline bool has_newlevel() const;
  inline void clear_newlevel();
  static const int kNewLevelFieldNumber = 4;
  inline ::google::protobuf::uint32 newlevel() const;
  inline void set_newlevel(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stTrainHeroResult)
 private:
  inline void set_has_heroid();
  inline void clear_has_heroid();
  inline void set_has_result();
  inline void clear_has_result();
  inline void set_has_levelup();
  inline void clear_has_levelup();
  inline void set_has_newlevel();
  inline void clear_has_newlevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 heroid_;
  int result_;
  bool levelup_;
  ::google::protobuf::uint32 newlevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stTrainHeroResult* default_instance_;
};
// -------------------------------------------------------------------

class stGuaJiTimeNtf : public ::google::protobuf::Message {
 public:
  stGuaJiTimeNtf();
  virtual ~stGuaJiTimeNtf();

  stGuaJiTimeNtf(const stGuaJiTimeNtf& from);

  inline stGuaJiTimeNtf& operator=(const stGuaJiTimeNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuaJiTimeNtf& default_instance();

  void Swap(stGuaJiTimeNtf* other);

  // implements Message ----------------------------------------------

  stGuaJiTimeNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuaJiTimeNtf& from);
  void MergeFrom(const stGuaJiTimeNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuaJiTimeNtf_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuaJiTimeNtf_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuaJiTimeNtf_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuaJiTimeNtf_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuaJiTimeNtf_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuaJiTimeNtf_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuaJiTimeNtf_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuaJiTimeNtf_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuaJiTimeNtf_ProtoModID_Parse(name, value);
  }

  typedef stGuaJiTimeNtf_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuaJiTimeNtf_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuaJiTimeNtf_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuaJiTimeNtf_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuaJiTimeNtf_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuaJiTimeNtf_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuaJiTimeNtf_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuaJiTimeNtf_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuaJiTimeNtf_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 guajiStart = 1;
  inline bool has_guajistart() const;
  inline void clear_guajistart();
  static const int kGuajiStartFieldNumber = 1;
  inline ::google::protobuf::uint32 guajistart() const;
  inline void set_guajistart(::google::protobuf::uint32 value);

  // optional uint32 guajiEnd = 2;
  inline bool has_guajiend() const;
  inline void clear_guajiend();
  static const int kGuajiEndFieldNumber = 2;
  inline ::google::protobuf::uint32 guajiend() const;
  inline void set_guajiend(::google::protobuf::uint32 value);

  // optional uint32 todayCount = 3;
  inline bool has_todaycount() const;
  inline void clear_todaycount();
  static const int kTodayCountFieldNumber = 3;
  inline ::google::protobuf::uint32 todaycount() const;
  inline void set_todaycount(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stGuaJiTimeNtf)
 private:
  inline void set_has_guajistart();
  inline void clear_has_guajistart();
  inline void set_has_guajiend();
  inline void clear_has_guajiend();
  inline void set_has_todaycount();
  inline void clear_has_todaycount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 guajistart_;
  ::google::protobuf::uint32 guajiend_;
  ::google::protobuf::uint32 todaycount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stGuaJiTimeNtf* default_instance_;
};
// -------------------------------------------------------------------

class stGuaJiAwardReq : public ::google::protobuf::Message {
 public:
  stGuaJiAwardReq();
  virtual ~stGuaJiAwardReq();

  stGuaJiAwardReq(const stGuaJiAwardReq& from);

  inline stGuaJiAwardReq& operator=(const stGuaJiAwardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuaJiAwardReq& default_instance();

  void Swap(stGuaJiAwardReq* other);

  // implements Message ----------------------------------------------

  stGuaJiAwardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuaJiAwardReq& from);
  void MergeFrom(const stGuaJiAwardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuaJiAwardReq_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuaJiAwardReq_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuaJiAwardReq_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuaJiAwardReq_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuaJiAwardReq_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuaJiAwardReq_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuaJiAwardReq_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuaJiAwardReq_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuaJiAwardReq_ProtoModID_Parse(name, value);
  }

  typedef stGuaJiAwardReq_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuaJiAwardReq_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuaJiAwardReq_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuaJiAwardReq_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuaJiAwardReq_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuaJiAwardReq_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuaJiAwardReq_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuaJiAwardReq_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuaJiAwardReq_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stGuaJiAwardReq)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stGuaJiAwardReq* default_instance_;
};
// -------------------------------------------------------------------

class stGuaJiAwardResult : public ::google::protobuf::Message {
 public:
  stGuaJiAwardResult();
  virtual ~stGuaJiAwardResult();

  stGuaJiAwardResult(const stGuaJiAwardResult& from);

  inline stGuaJiAwardResult& operator=(const stGuaJiAwardResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuaJiAwardResult& default_instance();

  void Swap(stGuaJiAwardResult* other);

  // implements Message ----------------------------------------------

  stGuaJiAwardResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuaJiAwardResult& from);
  void MergeFrom(const stGuaJiAwardResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuaJiAwardResult_eResult eResult;
  static const eResult eSuccess = stGuaJiAwardResult_eResult_eSuccess;
  static const eResult eTime = stGuaJiAwardResult_eResult_eTime;
  static const eResult eInner_Error = stGuaJiAwardResult_eResult_eInner_Error;
  static inline bool eResult_IsValid(int value) {
    return stGuaJiAwardResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGuaJiAwardResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGuaJiAwardResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGuaJiAwardResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGuaJiAwardResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGuaJiAwardResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGuaJiAwardResult_eResult_Parse(name, value);
  }

  typedef stGuaJiAwardResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuaJiAwardResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuaJiAwardResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuaJiAwardResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuaJiAwardResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuaJiAwardResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuaJiAwardResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuaJiAwardResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuaJiAwardResult_ProtoModID_Parse(name, value);
  }

  typedef stGuaJiAwardResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuaJiAwardResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuaJiAwardResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuaJiAwardResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuaJiAwardResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuaJiAwardResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuaJiAwardResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuaJiAwardResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuaJiAwardResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stGuaJiAwardResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stGuaJiAwardResult_eResult result() const;
  inline void set_result(::Role::stGuaJiAwardResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stGuaJiAwardResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stGuaJiAwardResult* default_instance_;
};
// -------------------------------------------------------------------

class stNftVipNtf : public ::google::protobuf::Message {
 public:
  stNftVipNtf();
  virtual ~stNftVipNtf();

  stNftVipNtf(const stNftVipNtf& from);

  inline stNftVipNtf& operator=(const stNftVipNtf& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stNftVipNtf& default_instance();

  void Swap(stNftVipNtf* other);

  // implements Message ----------------------------------------------

  stNftVipNtf* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stNftVipNtf& from);
  void MergeFrom(const stNftVipNtf& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stNftVipNtf_ProtoModID ProtoModID;
  static const ProtoModID ModID = stNftVipNtf_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stNftVipNtf_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stNftVipNtf_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stNftVipNtf_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stNftVipNtf_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stNftVipNtf_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stNftVipNtf_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stNftVipNtf_ProtoModID_Parse(name, value);
  }

  typedef stNftVipNtf_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stNftVipNtf_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stNftVipNtf_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stNftVipNtf_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stNftVipNtf_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stNftVipNtf_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stNftVipNtf_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stNftVipNtf_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stNftVipNtf_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 isNftVip = 1;
  inline bool has_isnftvip() const;
  inline void clear_isnftvip();
  static const int kIsNftVipFieldNumber = 1;
  inline ::google::protobuf::uint32 isnftvip() const;
  inline void set_isnftvip(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stNftVipNtf)
 private:
  inline void set_has_isnftvip();
  inline void clear_has_isnftvip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 isnftvip_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stNftVipNtf* default_instance_;
};
// -------------------------------------------------------------------

class stGuaJiStartReq : public ::google::protobuf::Message {
 public:
  stGuaJiStartReq();
  virtual ~stGuaJiStartReq();

  stGuaJiStartReq(const stGuaJiStartReq& from);

  inline stGuaJiStartReq& operator=(const stGuaJiStartReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuaJiStartReq& default_instance();

  void Swap(stGuaJiStartReq* other);

  // implements Message ----------------------------------------------

  stGuaJiStartReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuaJiStartReq& from);
  void MergeFrom(const stGuaJiStartReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuaJiStartReq_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuaJiStartReq_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuaJiStartReq_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuaJiStartReq_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuaJiStartReq_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuaJiStartReq_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuaJiStartReq_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuaJiStartReq_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuaJiStartReq_ProtoModID_Parse(name, value);
  }

  typedef stGuaJiStartReq_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuaJiStartReq_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuaJiStartReq_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuaJiStartReq_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuaJiStartReq_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuaJiStartReq_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuaJiStartReq_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuaJiStartReq_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuaJiStartReq_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional uint32 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::uint32 charid() const;
  inline void set_charid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stGuaJiStartReq)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stGuaJiStartReq* default_instance_;
};
// -------------------------------------------------------------------

class stGuaJiStartResult : public ::google::protobuf::Message {
 public:
  stGuaJiStartResult();
  virtual ~stGuaJiStartResult();

  stGuaJiStartResult(const stGuaJiStartResult& from);

  inline stGuaJiStartResult& operator=(const stGuaJiStartResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stGuaJiStartResult& default_instance();

  void Swap(stGuaJiStartResult* other);

  // implements Message ----------------------------------------------

  stGuaJiStartResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stGuaJiStartResult& from);
  void MergeFrom(const stGuaJiStartResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stGuaJiStartResult_eResult eResult;
  static const eResult eSuccess = stGuaJiStartResult_eResult_eSuccess;
  static const eResult eTodaylimit = stGuaJiStartResult_eResult_eTodaylimit;
  static const eResult eInner_Error = stGuaJiStartResult_eResult_eInner_Error;
  static const eResult eCoin = stGuaJiStartResult_eResult_eCoin;
  static const eResult eInGuaji = stGuaJiStartResult_eResult_eInGuaji;
  static inline bool eResult_IsValid(int value) {
    return stGuaJiStartResult_eResult_IsValid(value);
  }
  static const eResult eResult_MIN =
    stGuaJiStartResult_eResult_eResult_MIN;
  static const eResult eResult_MAX =
    stGuaJiStartResult_eResult_eResult_MAX;
  static const int eResult_ARRAYSIZE =
    stGuaJiStartResult_eResult_eResult_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  eResult_descriptor() {
    return stGuaJiStartResult_eResult_descriptor();
  }
  static inline const ::std::string& eResult_Name(eResult value) {
    return stGuaJiStartResult_eResult_Name(value);
  }
  static inline bool eResult_Parse(const ::std::string& name,
      eResult* value) {
    return stGuaJiStartResult_eResult_Parse(name, value);
  }

  typedef stGuaJiStartResult_ProtoModID ProtoModID;
  static const ProtoModID ModID = stGuaJiStartResult_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stGuaJiStartResult_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stGuaJiStartResult_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stGuaJiStartResult_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stGuaJiStartResult_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stGuaJiStartResult_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stGuaJiStartResult_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stGuaJiStartResult_ProtoModID_Parse(name, value);
  }

  typedef stGuaJiStartResult_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stGuaJiStartResult_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stGuaJiStartResult_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stGuaJiStartResult_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stGuaJiStartResult_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stGuaJiStartResult_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stGuaJiStartResult_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stGuaJiStartResult_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stGuaJiStartResult_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .Role.stGuaJiStartResult.eResult result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::Role::stGuaJiStartResult_eResult result() const;
  inline void set_result(::Role::stGuaJiStartResult_eResult value);

  // @@protoc_insertion_point(class_scope:Role.stGuaJiStartResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  int result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stGuaJiStartResult* default_instance_;
};
// -------------------------------------------------------------------

class stSynRMPShopItem2 : public ::google::protobuf::Message {
 public:
  stSynRMPShopItem2();
  virtual ~stSynRMPShopItem2();

  stSynRMPShopItem2(const stSynRMPShopItem2& from);

  inline stSynRMPShopItem2& operator=(const stSynRMPShopItem2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRMPShopItem2& default_instance();

  void Swap(stSynRMPShopItem2* other);

  // implements Message ----------------------------------------------

  stSynRMPShopItem2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRMPShopItem2& from);
  void MergeFrom(const stSynRMPShopItem2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::uint32 id() const;
  inline void set_id(::google::protobuf::uint32 value);

  // optional uint32 delayTime = 2;
  inline bool has_delaytime() const;
  inline void clear_delaytime();
  static const int kDelayTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 delaytime() const;
  inline void set_delaytime(::google::protobuf::uint32 value);

  // optional uint32 buyCount = 3;
  inline bool has_buycount() const;
  inline void clear_buycount();
  static const int kBuyCountFieldNumber = 3;
  inline ::google::protobuf::uint32 buycount() const;
  inline void set_buycount(::google::protobuf::uint32 value);

  // optional uint32 startTime = 4;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 4;
  inline ::google::protobuf::uint32 starttime() const;
  inline void set_starttime(::google::protobuf::uint32 value);

  // optional uint32 planNumber = 5;
  inline bool has_plannumber() const;
  inline void clear_plannumber();
  static const int kPlanNumberFieldNumber = 5;
  inline ::google::protobuf::uint32 plannumber() const;
  inline void set_plannumber(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Role.stSynRMPShopItem2)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_delaytime();
  inline void clear_has_delaytime();
  inline void set_has_buycount();
  inline void clear_has_buycount();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_plannumber();
  inline void clear_has_plannumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 id_;
  ::google::protobuf::uint32 delaytime_;
  ::google::protobuf::uint32 buycount_;
  ::google::protobuf::uint32 starttime_;
  ::google::protobuf::uint32 plannumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynRMPShopItem2* default_instance_;
};
// -------------------------------------------------------------------

class stSynRMBShopInfo2 : public ::google::protobuf::Message {
 public:
  stSynRMBShopInfo2();
  virtual ~stSynRMBShopInfo2();

  stSynRMBShopInfo2(const stSynRMBShopInfo2& from);

  inline stSynRMBShopInfo2& operator=(const stSynRMBShopInfo2& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const stSynRMBShopInfo2& default_instance();

  void Swap(stSynRMBShopInfo2* other);

  // implements Message ----------------------------------------------

  stSynRMBShopInfo2* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const stSynRMBShopInfo2& from);
  void MergeFrom(const stSynRMBShopInfo2& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef stSynRMBShopInfo2_ProtoModID ProtoModID;
  static const ProtoModID ModID = stSynRMBShopInfo2_ProtoModID_ModID;
  static inline bool ProtoModID_IsValid(int value) {
    return stSynRMBShopInfo2_ProtoModID_IsValid(value);
  }
  static const ProtoModID ProtoModID_MIN =
    stSynRMBShopInfo2_ProtoModID_ProtoModID_MIN;
  static const ProtoModID ProtoModID_MAX =
    stSynRMBShopInfo2_ProtoModID_ProtoModID_MAX;
  static const int ProtoModID_ARRAYSIZE =
    stSynRMBShopInfo2_ProtoModID_ProtoModID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoModID_descriptor() {
    return stSynRMBShopInfo2_ProtoModID_descriptor();
  }
  static inline const ::std::string& ProtoModID_Name(ProtoModID value) {
    return stSynRMBShopInfo2_ProtoModID_Name(value);
  }
  static inline bool ProtoModID_Parse(const ::std::string& name,
      ProtoModID* value) {
    return stSynRMBShopInfo2_ProtoModID_Parse(name, value);
  }

  typedef stSynRMBShopInfo2_ProtoFunID ProtoFunID;
  static const ProtoFunID FunID = stSynRMBShopInfo2_ProtoFunID_FunID;
  static inline bool ProtoFunID_IsValid(int value) {
    return stSynRMBShopInfo2_ProtoFunID_IsValid(value);
  }
  static const ProtoFunID ProtoFunID_MIN =
    stSynRMBShopInfo2_ProtoFunID_ProtoFunID_MIN;
  static const ProtoFunID ProtoFunID_MAX =
    stSynRMBShopInfo2_ProtoFunID_ProtoFunID_MAX;
  static const int ProtoFunID_ARRAYSIZE =
    stSynRMBShopInfo2_ProtoFunID_ProtoFunID_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ProtoFunID_descriptor() {
    return stSynRMBShopInfo2_ProtoFunID_descriptor();
  }
  static inline const ::std::string& ProtoFunID_Name(ProtoFunID value) {
    return stSynRMBShopInfo2_ProtoFunID_Name(value);
  }
  static inline bool ProtoFunID_Parse(const ::std::string& name,
      ProtoFunID* value) {
    return stSynRMBShopInfo2_ProtoFunID_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .Role.stSynRMPShopItem2 items = 1;
  inline int items_size() const;
  inline void clear_items();
  static const int kItemsFieldNumber = 1;
  inline const ::Role::stSynRMPShopItem2& items(int index) const;
  inline ::Role::stSynRMPShopItem2* mutable_items(int index);
  inline ::Role::stSynRMPShopItem2* add_items();
  inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem2 >&
      items() const;
  inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem2 >*
      mutable_items();

  // @@protoc_insertion_point(class_scope:Role.stSynRMBShopInfo2)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem2 > items_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Role_2eproto();
  friend void protobuf_AssignDesc_Role_2eproto();
  friend void protobuf_ShutdownFile_Role_2eproto();

  void InitAsDefaultInstance();
  static stSynRMBShopInfo2* default_instance_;
};
// ===================================================================


// ===================================================================

// stBattleProp

// optional uint32 propID = 1;
inline bool stBattleProp::has_propid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBattleProp::set_has_propid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBattleProp::clear_has_propid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBattleProp::clear_propid() {
  propid_ = 0u;
  clear_has_propid();
}
inline ::google::protobuf::uint32 stBattleProp::propid() const {
  return propid_;
}
inline void stBattleProp::set_propid(::google::protobuf::uint32 value) {
  set_has_propid();
  propid_ = value;
}

// optional uint32 propVal = 2;
inline bool stBattleProp::has_propval() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBattleProp::set_has_propval() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBattleProp::clear_has_propval() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBattleProp::clear_propval() {
  propval_ = 0u;
  clear_has_propval();
}
inline ::google::protobuf::uint32 stBattleProp::propval() const {
  return propval_;
}
inline void stBattleProp::set_propval(::google::protobuf::uint32 value) {
  set_has_propval();
  propval_ = value;
}

// -------------------------------------------------------------------

// stRoleMainData

// optional uint32 charID = 1;
inline bool stRoleMainData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRoleMainData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRoleMainData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRoleMainData::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stRoleMainData::charid() const {
  return charid_;
}
inline void stRoleMainData::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stRoleMainData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRoleMainData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRoleMainData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRoleMainData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stRoleMainData::name() const {
  return *name_;
}
inline void stRoleMainData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRoleMainData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stRoleMainData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stRoleMainData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stRoleMainData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stRoleMainData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stRoleMainData::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRoleMainData::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRoleMainData::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRoleMainData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stRoleMainData::level() const {
  return level_;
}
inline void stRoleMainData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 exp = 4;
inline bool stRoleMainData::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRoleMainData::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRoleMainData::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRoleMainData::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stRoleMainData::exp() const {
  return exp_;
}
inline void stRoleMainData::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 goldCoin = 5;
inline bool stRoleMainData::has_goldcoin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRoleMainData::set_has_goldcoin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRoleMainData::clear_has_goldcoin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRoleMainData::clear_goldcoin() {
  goldcoin_ = 0u;
  clear_has_goldcoin();
}
inline ::google::protobuf::uint32 stRoleMainData::goldcoin() const {
  return goldcoin_;
}
inline void stRoleMainData::set_goldcoin(::google::protobuf::uint32 value) {
  set_has_goldcoin();
  goldcoin_ = value;
}

// optional uint32 pointCard = 6;
inline bool stRoleMainData::has_pointcard() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stRoleMainData::set_has_pointcard() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stRoleMainData::clear_has_pointcard() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stRoleMainData::clear_pointcard() {
  pointcard_ = 0u;
  clear_has_pointcard();
}
inline ::google::protobuf::uint32 stRoleMainData::pointcard() const {
  return pointcard_;
}
inline void stRoleMainData::set_pointcard(::google::protobuf::uint32 value) {
  set_has_pointcard();
  pointcard_ = value;
}

// optional uint32 curHP = 7;
inline bool stRoleMainData::has_curhp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stRoleMainData::set_has_curhp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stRoleMainData::clear_has_curhp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stRoleMainData::clear_curhp() {
  curhp_ = 0u;
  clear_has_curhp();
}
inline ::google::protobuf::uint32 stRoleMainData::curhp() const {
  return curhp_;
}
inline void stRoleMainData::set_curhp(::google::protobuf::uint32 value) {
  set_has_curhp();
  curhp_ = value;
}

// optional uint32 curMP = 8;
inline bool stRoleMainData::has_curmp() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stRoleMainData::set_has_curmp() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stRoleMainData::clear_has_curmp() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stRoleMainData::clear_curmp() {
  curmp_ = 0u;
  clear_has_curmp();
}
inline ::google::protobuf::uint32 stRoleMainData::curmp() const {
  return curmp_;
}
inline void stRoleMainData::set_curmp(::google::protobuf::uint32 value) {
  set_has_curmp();
  curmp_ = value;
}

// optional uint32 battlePower = 9;
inline bool stRoleMainData::has_battlepower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stRoleMainData::set_has_battlepower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stRoleMainData::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stRoleMainData::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stRoleMainData::battlepower() const {
  return battlepower_;
}
inline void stRoleMainData::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 heishijiejing = 10;
inline bool stRoleMainData::has_heishijiejing() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stRoleMainData::set_has_heishijiejing() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stRoleMainData::clear_has_heishijiejing() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stRoleMainData::clear_heishijiejing() {
  heishijiejing_ = 0u;
  clear_has_heishijiejing();
}
inline ::google::protobuf::uint32 stRoleMainData::heishijiejing() const {
  return heishijiejing_;
}
inline void stRoleMainData::set_heishijiejing(::google::protobuf::uint32 value) {
  set_has_heishijiejing();
  heishijiejing_ = value;
}

// optional uint32 reputaion = 11;
inline bool stRoleMainData::has_reputaion() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stRoleMainData::set_has_reputaion() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stRoleMainData::clear_has_reputaion() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stRoleMainData::clear_reputaion() {
  reputaion_ = 0u;
  clear_has_reputaion();
}
inline ::google::protobuf::uint32 stRoleMainData::reputaion() const {
  return reputaion_;
}
inline void stRoleMainData::set_reputaion(::google::protobuf::uint32 value) {
  set_has_reputaion();
  reputaion_ = value;
}

// optional uint32 honour = 12;
inline bool stRoleMainData::has_honour() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stRoleMainData::set_has_honour() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stRoleMainData::clear_has_honour() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stRoleMainData::clear_honour() {
  honour_ = 0u;
  clear_has_honour();
}
inline ::google::protobuf::uint32 stRoleMainData::honour() const {
  return honour_;
}
inline void stRoleMainData::set_honour(::google::protobuf::uint32 value) {
  set_has_honour();
  honour_ = value;
}

// optional uint32 braveVal = 13;
inline bool stRoleMainData::has_braveval() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stRoleMainData::set_has_braveval() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stRoleMainData::clear_has_braveval() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stRoleMainData::clear_braveval() {
  braveval_ = 0u;
  clear_has_braveval();
}
inline ::google::protobuf::uint32 stRoleMainData::braveval() const {
  return braveval_;
}
inline void stRoleMainData::set_braveval(::google::protobuf::uint32 value) {
  set_has_braveval();
  braveval_ = value;
}

// optional uint32 peakCertificate = 14;
inline bool stRoleMainData::has_peakcertificate() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stRoleMainData::set_has_peakcertificate() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stRoleMainData::clear_has_peakcertificate() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stRoleMainData::clear_peakcertificate() {
  peakcertificate_ = 0u;
  clear_has_peakcertificate();
}
inline ::google::protobuf::uint32 stRoleMainData::peakcertificate() const {
  return peakcertificate_;
}
inline void stRoleMainData::set_peakcertificate(::google::protobuf::uint32 value) {
  set_has_peakcertificate();
  peakcertificate_ = value;
}

// optional uint32 hufu = 15;
inline bool stRoleMainData::has_hufu() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stRoleMainData::set_has_hufu() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stRoleMainData::clear_has_hufu() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stRoleMainData::clear_hufu() {
  hufu_ = 0u;
  clear_has_hufu();
}
inline ::google::protobuf::uint32 stRoleMainData::hufu() const {
  return hufu_;
}
inline void stRoleMainData::set_hufu(::google::protobuf::uint32 value) {
  set_has_hufu();
  hufu_ = value;
}

// optional uint32 yuntie = 16;
inline bool stRoleMainData::has_yuntie() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void stRoleMainData::set_has_yuntie() {
  _has_bits_[0] |= 0x00008000u;
}
inline void stRoleMainData::clear_has_yuntie() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void stRoleMainData::clear_yuntie() {
  yuntie_ = 0u;
  clear_has_yuntie();
}
inline ::google::protobuf::uint32 stRoleMainData::yuntie() const {
  return yuntie_;
}
inline void stRoleMainData::set_yuntie(::google::protobuf::uint32 value) {
  set_has_yuntie();
  yuntie_ = value;
}

// optional uint32 totalRecharge = 17;
inline bool stRoleMainData::has_totalrecharge() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void stRoleMainData::set_has_totalrecharge() {
  _has_bits_[0] |= 0x00010000u;
}
inline void stRoleMainData::clear_has_totalrecharge() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void stRoleMainData::clear_totalrecharge() {
  totalrecharge_ = 0u;
  clear_has_totalrecharge();
}
inline ::google::protobuf::uint32 stRoleMainData::totalrecharge() const {
  return totalrecharge_;
}
inline void stRoleMainData::set_totalrecharge(::google::protobuf::uint32 value) {
  set_has_totalrecharge();
  totalrecharge_ = value;
}

// optional uint32 todayRecharge = 18;
inline bool stRoleMainData::has_todayrecharge() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void stRoleMainData::set_has_todayrecharge() {
  _has_bits_[0] |= 0x00020000u;
}
inline void stRoleMainData::clear_has_todayrecharge() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void stRoleMainData::clear_todayrecharge() {
  todayrecharge_ = 0u;
  clear_has_todayrecharge();
}
inline ::google::protobuf::uint32 stRoleMainData::todayrecharge() const {
  return todayrecharge_;
}
inline void stRoleMainData::set_todayrecharge(::google::protobuf::uint32 value) {
  set_has_todayrecharge();
  todayrecharge_ = value;
}

// optional uint32 job = 19;
inline bool stRoleMainData::has_job() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void stRoleMainData::set_has_job() {
  _has_bits_[0] |= 0x00040000u;
}
inline void stRoleMainData::clear_has_job() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void stRoleMainData::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stRoleMainData::job() const {
  return job_;
}
inline void stRoleMainData::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 20;
inline bool stRoleMainData::has_sex() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void stRoleMainData::set_has_sex() {
  _has_bits_[0] |= 0x00080000u;
}
inline void stRoleMainData::clear_has_sex() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void stRoleMainData::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stRoleMainData::sex() const {
  return sex_;
}
inline void stRoleMainData::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 sp = 21;
inline bool stRoleMainData::has_sp() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void stRoleMainData::set_has_sp() {
  _has_bits_[0] |= 0x00100000u;
}
inline void stRoleMainData::clear_has_sp() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void stRoleMainData::clear_sp() {
  sp_ = 0u;
  clear_has_sp();
}
inline ::google::protobuf::uint32 stRoleMainData::sp() const {
  return sp_;
}
inline void stRoleMainData::set_sp(::google::protobuf::uint32 value) {
  set_has_sp();
  sp_ = value;
}

// optional uint32 lilian = 22;
inline bool stRoleMainData::has_lilian() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void stRoleMainData::set_has_lilian() {
  _has_bits_[0] |= 0x00200000u;
}
inline void stRoleMainData::clear_has_lilian() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void stRoleMainData::clear_lilian() {
  lilian_ = 0u;
  clear_has_lilian();
}
inline ::google::protobuf::uint32 stRoleMainData::lilian() const {
  return lilian_;
}
inline void stRoleMainData::set_lilian(::google::protobuf::uint32 value) {
  set_has_lilian();
  lilian_ = value;
}

// optional uint32 totalConsume = 24;
inline bool stRoleMainData::has_totalconsume() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void stRoleMainData::set_has_totalconsume() {
  _has_bits_[0] |= 0x00400000u;
}
inline void stRoleMainData::clear_has_totalconsume() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void stRoleMainData::clear_totalconsume() {
  totalconsume_ = 0u;
  clear_has_totalconsume();
}
inline ::google::protobuf::uint32 stRoleMainData::totalconsume() const {
  return totalconsume_;
}
inline void stRoleMainData::set_totalconsume(::google::protobuf::uint32 value) {
  set_has_totalconsume();
  totalconsume_ = value;
}

// optional uint32 juexingNum = 25;
inline bool stRoleMainData::has_juexingnum() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void stRoleMainData::set_has_juexingnum() {
  _has_bits_[0] |= 0x00800000u;
}
inline void stRoleMainData::clear_has_juexingnum() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void stRoleMainData::clear_juexingnum() {
  juexingnum_ = 0u;
  clear_has_juexingnum();
}
inline ::google::protobuf::uint32 stRoleMainData::juexingnum() const {
  return juexingnum_;
}
inline void stRoleMainData::set_juexingnum(::google::protobuf::uint32 value) {
  set_has_juexingnum();
  juexingnum_ = value;
}

// optional uint32 juexingExp = 26;
inline bool stRoleMainData::has_juexingexp() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void stRoleMainData::set_has_juexingexp() {
  _has_bits_[0] |= 0x01000000u;
}
inline void stRoleMainData::clear_has_juexingexp() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void stRoleMainData::clear_juexingexp() {
  juexingexp_ = 0u;
  clear_has_juexingexp();
}
inline ::google::protobuf::uint32 stRoleMainData::juexingexp() const {
  return juexingexp_;
}
inline void stRoleMainData::set_juexingexp(::google::protobuf::uint32 value) {
  set_has_juexingexp();
  juexingexp_ = value;
}

// optional uint32 joinGuildRemainTime = 27;
inline bool stRoleMainData::has_joinguildremaintime() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void stRoleMainData::set_has_joinguildremaintime() {
  _has_bits_[0] |= 0x02000000u;
}
inline void stRoleMainData::clear_has_joinguildremaintime() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void stRoleMainData::clear_joinguildremaintime() {
  joinguildremaintime_ = 0u;
  clear_has_joinguildremaintime();
}
inline ::google::protobuf::uint32 stRoleMainData::joinguildremaintime() const {
  return joinguildremaintime_;
}
inline void stRoleMainData::set_joinguildremaintime(::google::protobuf::uint32 value) {
  set_has_joinguildremaintime();
  joinguildremaintime_ = value;
}

// optional uint32 headID = 28;
inline bool stRoleMainData::has_headid() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void stRoleMainData::set_has_headid() {
  _has_bits_[0] |= 0x04000000u;
}
inline void stRoleMainData::clear_has_headid() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void stRoleMainData::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 stRoleMainData::headid() const {
  return headid_;
}
inline void stRoleMainData::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 faceID = 29;
inline bool stRoleMainData::has_faceid() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void stRoleMainData::set_has_faceid() {
  _has_bits_[0] |= 0x08000000u;
}
inline void stRoleMainData::clear_has_faceid() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void stRoleMainData::clear_faceid() {
  faceid_ = 0u;
  clear_has_faceid();
}
inline ::google::protobuf::uint32 stRoleMainData::faceid() const {
  return faceid_;
}
inline void stRoleMainData::set_faceid(::google::protobuf::uint32 value) {
  set_has_faceid();
  faceid_ = value;
}

// optional uint32 studyHeroSkillNum = 30;
inline bool stRoleMainData::has_studyheroskillnum() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void stRoleMainData::set_has_studyheroskillnum() {
  _has_bits_[0] |= 0x10000000u;
}
inline void stRoleMainData::clear_has_studyheroskillnum() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void stRoleMainData::clear_studyheroskillnum() {
  studyheroskillnum_ = 0u;
  clear_has_studyheroskillnum();
}
inline ::google::protobuf::uint32 stRoleMainData::studyheroskillnum() const {
  return studyheroskillnum_;
}
inline void stRoleMainData::set_studyheroskillnum(::google::protobuf::uint32 value) {
  set_has_studyheroskillnum();
  studyheroskillnum_ = value;
}

// optional uint32 teamCopyMapNum = 31;
inline bool stRoleMainData::has_teamcopymapnum() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void stRoleMainData::set_has_teamcopymapnum() {
  _has_bits_[0] |= 0x20000000u;
}
inline void stRoleMainData::clear_has_teamcopymapnum() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void stRoleMainData::clear_teamcopymapnum() {
  teamcopymapnum_ = 0u;
  clear_has_teamcopymapnum();
}
inline ::google::protobuf::uint32 stRoleMainData::teamcopymapnum() const {
  return teamcopymapnum_;
}
inline void stRoleMainData::set_teamcopymapnum(::google::protobuf::uint32 value) {
  set_has_teamcopymapnum();
  teamcopymapnum_ = value;
}

// optional uint32 realTimePKNum = 32;
inline bool stRoleMainData::has_realtimepknum() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void stRoleMainData::set_has_realtimepknum() {
  _has_bits_[0] |= 0x40000000u;
}
inline void stRoleMainData::clear_has_realtimepknum() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void stRoleMainData::clear_realtimepknum() {
  realtimepknum_ = 0u;
  clear_has_realtimepknum();
}
inline ::google::protobuf::uint32 stRoleMainData::realtimepknum() const {
  return realtimepknum_;
}
inline void stRoleMainData::set_realtimepknum(::google::protobuf::uint32 value) {
  set_has_realtimepknum();
  realtimepknum_ = value;
}

// repeated .Role.stBattleProp battleProp = 33;
inline int stRoleMainData::battleprop_size() const {
  return battleprop_.size();
}
inline void stRoleMainData::clear_battleprop() {
  battleprop_.Clear();
}
inline const ::Role::stBattleProp& stRoleMainData::battleprop(int index) const {
  return battleprop_.Get(index);
}
inline ::Role::stBattleProp* stRoleMainData::mutable_battleprop(int index) {
  return battleprop_.Mutable(index);
}
inline ::Role::stBattleProp* stRoleMainData::add_battleprop() {
  return battleprop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
stRoleMainData::battleprop() const {
  return battleprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
stRoleMainData::mutable_battleprop() {
  return &battleprop_;
}

// optional bool gotFstRechargeReward = 34;
inline bool stRoleMainData::has_gotfstrechargereward() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void stRoleMainData::set_has_gotfstrechargereward() {
  _has_bits_[1] |= 0x00000001u;
}
inline void stRoleMainData::clear_has_gotfstrechargereward() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void stRoleMainData::clear_gotfstrechargereward() {
  gotfstrechargereward_ = false;
  clear_has_gotfstrechargereward();
}
inline bool stRoleMainData::gotfstrechargereward() const {
  return gotfstrechargereward_;
}
inline void stRoleMainData::set_gotfstrechargereward(bool value) {
  set_has_gotfstrechargereward();
  gotfstrechargereward_ = value;
}

// optional uint32 teamCopymapResetNum = 35;
inline bool stRoleMainData::has_teamcopymapresetnum() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void stRoleMainData::set_has_teamcopymapresetnum() {
  _has_bits_[1] |= 0x00000002u;
}
inline void stRoleMainData::clear_has_teamcopymapresetnum() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void stRoleMainData::clear_teamcopymapresetnum() {
  teamcopymapresetnum_ = 0u;
  clear_has_teamcopymapresetnum();
}
inline ::google::protobuf::uint32 stRoleMainData::teamcopymapresetnum() const {
  return teamcopymapresetnum_;
}
inline void stRoleMainData::set_teamcopymapresetnum(::google::protobuf::uint32 value) {
  set_has_teamcopymapresetnum();
  teamcopymapresetnum_ = value;
}

// optional uint32 realTimeResetNum = 36;
inline bool stRoleMainData::has_realtimeresetnum() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void stRoleMainData::set_has_realtimeresetnum() {
  _has_bits_[1] |= 0x00000004u;
}
inline void stRoleMainData::clear_has_realtimeresetnum() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void stRoleMainData::clear_realtimeresetnum() {
  realtimeresetnum_ = 0u;
  clear_has_realtimeresetnum();
}
inline ::google::protobuf::uint32 stRoleMainData::realtimeresetnum() const {
  return realtimeresetnum_;
}
inline void stRoleMainData::set_realtimeresetnum(::google::protobuf::uint32 value) {
  set_has_realtimeresetnum();
  realtimeresetnum_ = value;
}

// optional bool gotFst10RechargeReward = 37;
inline bool stRoleMainData::has_gotfst10rechargereward() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void stRoleMainData::set_has_gotfst10rechargereward() {
  _has_bits_[1] |= 0x00000008u;
}
inline void stRoleMainData::clear_has_gotfst10rechargereward() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void stRoleMainData::clear_gotfst10rechargereward() {
  gotfst10rechargereward_ = false;
  clear_has_gotfst10rechargereward();
}
inline bool stRoleMainData::gotfst10rechargereward() const {
  return gotfst10rechargereward_;
}
inline void stRoleMainData::set_gotfst10rechargereward(bool value) {
  set_has_gotfst10rechargereward();
  gotfst10rechargereward_ = value;
}

// optional uint32 changeNameNum = 38;
inline bool stRoleMainData::has_changenamenum() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void stRoleMainData::set_has_changenamenum() {
  _has_bits_[1] |= 0x00000010u;
}
inline void stRoleMainData::clear_has_changenamenum() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void stRoleMainData::clear_changenamenum() {
  changenamenum_ = 0u;
  clear_has_changenamenum();
}
inline ::google::protobuf::uint32 stRoleMainData::changenamenum() const {
  return changenamenum_;
}
inline void stRoleMainData::set_changenamenum(::google::protobuf::uint32 value) {
  set_has_changenamenum();
  changenamenum_ = value;
}

// optional uint32 integral = 39;
inline bool stRoleMainData::has_integral() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void stRoleMainData::set_has_integral() {
  _has_bits_[1] |= 0x00000020u;
}
inline void stRoleMainData::clear_has_integral() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void stRoleMainData::clear_integral() {
  integral_ = 0u;
  clear_has_integral();
}
inline ::google::protobuf::uint32 stRoleMainData::integral() const {
  return integral_;
}
inline void stRoleMainData::set_integral(::google::protobuf::uint32 value) {
  set_has_integral();
  integral_ = value;
}

// optional uint32 soulFire = 40;
inline bool stRoleMainData::has_soulfire() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void stRoleMainData::set_has_soulfire() {
  _has_bits_[1] |= 0x00000040u;
}
inline void stRoleMainData::clear_has_soulfire() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void stRoleMainData::clear_soulfire() {
  soulfire_ = 0u;
  clear_has_soulfire();
}
inline ::google::protobuf::uint32 stRoleMainData::soulfire() const {
  return soulfire_;
}
inline void stRoleMainData::set_soulfire(::google::protobuf::uint32 value) {
  set_has_soulfire();
  soulfire_ = value;
}

// optional uint32 glory = 41;
inline bool stRoleMainData::has_glory() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void stRoleMainData::set_has_glory() {
  _has_bits_[1] |= 0x00000080u;
}
inline void stRoleMainData::clear_has_glory() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void stRoleMainData::clear_glory() {
  glory_ = 0u;
  clear_has_glory();
}
inline ::google::protobuf::uint32 stRoleMainData::glory() const {
  return glory_;
}
inline void stRoleMainData::set_glory(::google::protobuf::uint32 value) {
  set_has_glory();
  glory_ = value;
}

// optional uint32 coupleId = 42;
inline bool stRoleMainData::has_coupleid() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void stRoleMainData::set_has_coupleid() {
  _has_bits_[1] |= 0x00000100u;
}
inline void stRoleMainData::clear_has_coupleid() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void stRoleMainData::clear_coupleid() {
  coupleid_ = 0u;
  clear_has_coupleid();
}
inline ::google::protobuf::uint32 stRoleMainData::coupleid() const {
  return coupleid_;
}
inline void stRoleMainData::set_coupleid(::google::protobuf::uint32 value) {
  set_has_coupleid();
  coupleid_ = value;
}

// optional uint32 lifeEssence = 43;
inline bool stRoleMainData::has_lifeessence() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void stRoleMainData::set_has_lifeessence() {
  _has_bits_[1] |= 0x00000200u;
}
inline void stRoleMainData::clear_has_lifeessence() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void stRoleMainData::clear_lifeessence() {
  lifeessence_ = 0u;
  clear_has_lifeessence();
}
inline ::google::protobuf::uint32 stRoleMainData::lifeessence() const {
  return lifeessence_;
}
inline void stRoleMainData::set_lifeessence(::google::protobuf::uint32 value) {
  set_has_lifeessence();
  lifeessence_ = value;
}

// optional uint32 guidCrystal = 44;
inline bool stRoleMainData::has_guidcrystal() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void stRoleMainData::set_has_guidcrystal() {
  _has_bits_[1] |= 0x00000400u;
}
inline void stRoleMainData::clear_has_guidcrystal() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void stRoleMainData::clear_guidcrystal() {
  guidcrystal_ = 0u;
  clear_has_guidcrystal();
}
inline ::google::protobuf::uint32 stRoleMainData::guidcrystal() const {
  return guidcrystal_;
}
inline void stRoleMainData::set_guidcrystal(::google::protobuf::uint32 value) {
  set_has_guidcrystal();
  guidcrystal_ = value;
}

// optional bool isReceive = 45;
inline bool stRoleMainData::has_isreceive() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void stRoleMainData::set_has_isreceive() {
  _has_bits_[1] |= 0x00000800u;
}
inline void stRoleMainData::clear_has_isreceive() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void stRoleMainData::clear_isreceive() {
  isreceive_ = false;
  clear_has_isreceive();
}
inline bool stRoleMainData::isreceive() const {
  return isreceive_;
}
inline void stRoleMainData::set_isreceive(bool value) {
  set_has_isreceive();
  isreceive_ = value;
}

// optional uint32 photoID = 46;
inline bool stRoleMainData::has_photoid() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void stRoleMainData::set_has_photoid() {
  _has_bits_[1] |= 0x00001000u;
}
inline void stRoleMainData::clear_has_photoid() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void stRoleMainData::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stRoleMainData::photoid() const {
  return photoid_;
}
inline void stRoleMainData::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// optional uint32 trainSp = 47;
inline bool stRoleMainData::has_trainsp() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void stRoleMainData::set_has_trainsp() {
  _has_bits_[1] |= 0x00002000u;
}
inline void stRoleMainData::clear_has_trainsp() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void stRoleMainData::clear_trainsp() {
  trainsp_ = 0u;
  clear_has_trainsp();
}
inline ::google::protobuf::uint32 stRoleMainData::trainsp() const {
  return trainsp_;
}
inline void stRoleMainData::set_trainsp(::google::protobuf::uint32 value) {
  set_has_trainsp();
  trainsp_ = value;
}

// optional uint32 guajiStart = 48;
inline bool stRoleMainData::has_guajistart() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void stRoleMainData::set_has_guajistart() {
  _has_bits_[1] |= 0x00004000u;
}
inline void stRoleMainData::clear_has_guajistart() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void stRoleMainData::clear_guajistart() {
  guajistart_ = 0u;
  clear_has_guajistart();
}
inline ::google::protobuf::uint32 stRoleMainData::guajistart() const {
  return guajistart_;
}
inline void stRoleMainData::set_guajistart(::google::protobuf::uint32 value) {
  set_has_guajistart();
  guajistart_ = value;
}

// optional uint32 guajiEnd = 49;
inline bool stRoleMainData::has_guajiend() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void stRoleMainData::set_has_guajiend() {
  _has_bits_[1] |= 0x00008000u;
}
inline void stRoleMainData::clear_has_guajiend() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void stRoleMainData::clear_guajiend() {
  guajiend_ = 0u;
  clear_has_guajiend();
}
inline ::google::protobuf::uint32 stRoleMainData::guajiend() const {
  return guajiend_;
}
inline void stRoleMainData::set_guajiend(::google::protobuf::uint32 value) {
  set_has_guajiend();
  guajiend_ = value;
}

// optional bool isRobot = 50;
inline bool stRoleMainData::has_isrobot() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void stRoleMainData::set_has_isrobot() {
  _has_bits_[1] |= 0x00010000u;
}
inline void stRoleMainData::clear_has_isrobot() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void stRoleMainData::clear_isrobot() {
  isrobot_ = false;
  clear_has_isrobot();
}
inline bool stRoleMainData::isrobot() const {
  return isrobot_;
}
inline void stRoleMainData::set_isrobot(bool value) {
  set_has_isrobot();
  isrobot_ = value;
}

// optional uint32 guajiTodayCount = 51;
inline bool stRoleMainData::has_guajitodaycount() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void stRoleMainData::set_has_guajitodaycount() {
  _has_bits_[1] |= 0x00020000u;
}
inline void stRoleMainData::clear_has_guajitodaycount() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void stRoleMainData::clear_guajitodaycount() {
  guajitodaycount_ = 0u;
  clear_has_guajitodaycount();
}
inline ::google::protobuf::uint32 stRoleMainData::guajitodaycount() const {
  return guajitodaycount_;
}
inline void stRoleMainData::set_guajitodaycount(::google::protobuf::uint32 value) {
  set_has_guajitodaycount();
  guajitodaycount_ = value;
}

// -------------------------------------------------------------------

// stInitMainData

// optional .Role.stRoleMainData data = 1;
inline bool stInitMainData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInitMainData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInitMainData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInitMainData::clear_data() {
  if (data_ != NULL) data_->::Role::stRoleMainData::Clear();
  clear_has_data();
}
inline const ::Role::stRoleMainData& stInitMainData::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Role::stRoleMainData* stInitMainData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Role::stRoleMainData;
  return data_;
}
inline ::Role::stRoleMainData* stInitMainData::release_data() {
  clear_has_data();
  ::Role::stRoleMainData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void stInitMainData::set_allocated_data(::Role::stRoleMainData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// ReqCreateRole

// optional string name = 1;
inline bool ReqCreateRole::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqCreateRole::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqCreateRole::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqCreateRole::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReqCreateRole::name() const {
  return *name_;
}
inline void ReqCreateRole::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReqCreateRole::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReqCreateRole::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReqCreateRole::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ReqCreateRole::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReqCreateRole::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 2;
inline bool ReqCreateRole::has_job() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqCreateRole::set_has_job() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqCreateRole::clear_has_job() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqCreateRole::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 ReqCreateRole::job() const {
  return job_;
}
inline void ReqCreateRole::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 3;
inline bool ReqCreateRole::has_sex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReqCreateRole::set_has_sex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReqCreateRole::clear_has_sex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReqCreateRole::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 ReqCreateRole::sex() const {
  return sex_;
}
inline void ReqCreateRole::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 headID = 4;
inline bool ReqCreateRole::has_headid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReqCreateRole::set_has_headid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReqCreateRole::clear_has_headid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReqCreateRole::clear_headid() {
  headid_ = 0u;
  clear_has_headid();
}
inline ::google::protobuf::uint32 ReqCreateRole::headid() const {
  return headid_;
}
inline void ReqCreateRole::set_headid(::google::protobuf::uint32 value) {
  set_has_headid();
  headid_ = value;
}

// optional uint32 faceID = 5;
inline bool ReqCreateRole::has_faceid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReqCreateRole::set_has_faceid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReqCreateRole::clear_has_faceid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReqCreateRole::clear_faceid() {
  faceid_ = 0u;
  clear_has_faceid();
}
inline ::google::protobuf::uint32 ReqCreateRole::faceid() const {
  return faceid_;
}
inline void ReqCreateRole::set_faceid(::google::protobuf::uint32 value) {
  set_has_faceid();
  faceid_ = value;
}

// optional uint32 opID = 6;
inline bool ReqCreateRole::has_opid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ReqCreateRole::set_has_opid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ReqCreateRole::clear_has_opid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ReqCreateRole::clear_opid() {
  opid_ = 0u;
  clear_has_opid();
}
inline ::google::protobuf::uint32 ReqCreateRole::opid() const {
  return opid_;
}
inline void ReqCreateRole::set_opid(::google::protobuf::uint32 value) {
  set_has_opid();
  opid_ = value;
}

// optional uint32 serverID = 7;
inline bool ReqCreateRole::has_serverid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ReqCreateRole::set_has_serverid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ReqCreateRole::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ReqCreateRole::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 ReqCreateRole::serverid() const {
  return serverid_;
}
inline void ReqCreateRole::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// -------------------------------------------------------------------

// CreateRoleResult

// optional uint32 retCode = 1;
inline bool CreateRoleResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateRoleResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateRoleResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateRoleResult::clear_retcode() {
  retcode_ = 0u;
  clear_has_retcode();
}
inline ::google::protobuf::uint32 CreateRoleResult::retcode() const {
  return retcode_;
}
inline void CreateRoleResult::set_retcode(::google::protobuf::uint32 value) {
  set_has_retcode();
  retcode_ = value;
}

// optional uint32 charID = 2;
inline bool CreateRoleResult::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateRoleResult::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateRoleResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateRoleResult::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 CreateRoleResult::charid() const {
  return charid_;
}
inline void CreateRoleResult::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 3;
inline bool CreateRoleResult::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateRoleResult::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateRoleResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateRoleResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CreateRoleResult::name() const {
  return *name_;
}
inline void CreateRoleResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateRoleResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CreateRoleResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateRoleResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CreateRoleResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateRoleResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 4;
inline bool CreateRoleResult::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateRoleResult::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateRoleResult::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateRoleResult::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 CreateRoleResult::level() const {
  return level_;
}
inline void CreateRoleResult::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 5;
inline bool CreateRoleResult::has_job() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateRoleResult::set_has_job() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateRoleResult::clear_has_job() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateRoleResult::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 CreateRoleResult::job() const {
  return job_;
}
inline void CreateRoleResult::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 6;
inline bool CreateRoleResult::has_sex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CreateRoleResult::set_has_sex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CreateRoleResult::clear_has_sex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CreateRoleResult::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 CreateRoleResult::sex() const {
  return sex_;
}
inline void CreateRoleResult::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 createTime = 7;
inline bool CreateRoleResult::has_createtime() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CreateRoleResult::set_has_createtime() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CreateRoleResult::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CreateRoleResult::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 CreateRoleResult::createtime() const {
  return createtime_;
}
inline void CreateRoleResult::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// -------------------------------------------------------------------

// stSynSnapData

// optional uint32 charID = 1;
inline bool stSynSnapData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynSnapData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynSnapData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynSnapData::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynSnapData::charid() const {
  return charid_;
}
inline void stSynSnapData::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional string name = 2;
inline bool stSynSnapData::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynSnapData::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynSnapData::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynSnapData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynSnapData::name() const {
  return *name_;
}
inline void stSynSnapData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynSnapData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynSnapData::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynSnapData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynSnapData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynSnapData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 3;
inline bool stSynSnapData::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynSnapData::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynSnapData::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynSnapData::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynSnapData::level() const {
  return level_;
}
inline void stSynSnapData::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 job = 4;
inline bool stSynSnapData::has_job() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynSnapData::set_has_job() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynSnapData::clear_has_job() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynSnapData::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stSynSnapData::job() const {
  return job_;
}
inline void stSynSnapData::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 5;
inline bool stSynSnapData::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynSnapData::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynSnapData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynSnapData::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stSynSnapData::sex() const {
  return sex_;
}
inline void stSynSnapData::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// -------------------------------------------------------------------

// RefreshSnapData

// repeated .Role.stSynSnapData data = 1;
inline int RefreshSnapData::data_size() const {
  return data_.size();
}
inline void RefreshSnapData::clear_data() {
  data_.Clear();
}
inline const ::Role::stSynSnapData& RefreshSnapData::data(int index) const {
  return data_.Get(index);
}
inline ::Role::stSynSnapData* RefreshSnapData::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Role::stSynSnapData* RefreshSnapData::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynSnapData >&
RefreshSnapData::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynSnapData >*
RefreshSnapData::mutable_data() {
  return &data_;
}

// optional uint32 flag = 2;
inline bool RefreshSnapData::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RefreshSnapData::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RefreshSnapData::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RefreshSnapData::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 RefreshSnapData::flag() const {
  return flag_;
}
inline void RefreshSnapData::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// ReqEnterGame

// optional uint32 charID = 1;
inline bool ReqEnterGame::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqEnterGame::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqEnterGame::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqEnterGame::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 ReqEnterGame::charid() const {
  return charid_;
}
inline void ReqEnterGame::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSynGoldCoin

// optional uint32 num = 1;
inline bool stSynGoldCoin::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynGoldCoin::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynGoldCoin::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynGoldCoin::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynGoldCoin::num() const {
  return num_;
}
inline void stSynGoldCoin::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSynPointCard

// optional uint32 num = 1;
inline bool stSynPointCard::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynPointCard::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynPointCard::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynPointCard::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynPointCard::num() const {
  return num_;
}
inline void stSynPointCard::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stBagPos

// optional uint32 bagType = 1;
inline bool stBagPos::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBagPos::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBagPos::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBagPos::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stBagPos::bagtype() const {
  return bagtype_;
}
inline void stBagPos::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint32 pos = 2;
inline bool stBagPos::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBagPos::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBagPos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBagPos::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stBagPos::pos() const {
  return pos_;
}
inline void stBagPos::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stItemSkillInfo

// optional uint32 skillID = 1;
inline bool stItemSkillInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stItemSkillInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stItemSkillInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stItemSkillInfo::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stItemSkillInfo::skillid() const {
  return skillid_;
}
inline void stItemSkillInfo::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillLv = 2;
inline bool stItemSkillInfo::has_skilllv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stItemSkillInfo::set_has_skilllv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stItemSkillInfo::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stItemSkillInfo::clear_skilllv() {
  skilllv_ = 0u;
  clear_has_skilllv();
}
inline ::google::protobuf::uint32 stItemSkillInfo::skilllv() const {
  return skilllv_;
}
inline void stItemSkillInfo::set_skilllv(::google::protobuf::uint32 value) {
  set_has_skilllv();
  skilllv_ = value;
}

// -------------------------------------------------------------------

// stRaiseSkillProp

// optional uint32 skillID = 1;
inline bool stRaiseSkillProp::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRaiseSkillProp::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRaiseSkillProp::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRaiseSkillProp::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stRaiseSkillProp::skillid() const {
  return skillid_;
}
inline void stRaiseSkillProp::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 raiseType = 2;
inline bool stRaiseSkillProp::has_raisetype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRaiseSkillProp::set_has_raisetype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRaiseSkillProp::clear_has_raisetype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRaiseSkillProp::clear_raisetype() {
  raisetype_ = 0u;
  clear_has_raisetype();
}
inline ::google::protobuf::uint32 stRaiseSkillProp::raisetype() const {
  return raisetype_;
}
inline void stRaiseSkillProp::set_raisetype(::google::protobuf::uint32 value) {
  set_has_raisetype();
  raisetype_ = value;
}

// optional uint32 raiseValue = 3;
inline bool stRaiseSkillProp::has_raisevalue() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRaiseSkillProp::set_has_raisevalue() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRaiseSkillProp::clear_has_raisevalue() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRaiseSkillProp::clear_raisevalue() {
  raisevalue_ = 0u;
  clear_has_raisevalue();
}
inline ::google::protobuf::uint32 stRaiseSkillProp::raisevalue() const {
  return raisevalue_;
}
inline void stRaiseSkillProp::set_raisevalue(::google::protobuf::uint32 value) {
  set_has_raisevalue();
  raisevalue_ = value;
}

// -------------------------------------------------------------------

// stEnchantInfo

// optional uint32 color = 1;
inline bool stEnchantInfo::has_color() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEnchantInfo::set_has_color() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEnchantInfo::clear_has_color() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEnchantInfo::clear_color() {
  color_ = 0u;
  clear_has_color();
}
inline ::google::protobuf::uint32 stEnchantInfo::color() const {
  return color_;
}
inline void stEnchantInfo::set_color(::google::protobuf::uint32 value) {
  set_has_color();
  color_ = value;
}

// optional uint32 locked = 2;
inline bool stEnchantInfo::has_locked() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEnchantInfo::set_has_locked() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEnchantInfo::clear_has_locked() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEnchantInfo::clear_locked() {
  locked_ = 0u;
  clear_has_locked();
}
inline ::google::protobuf::uint32 stEnchantInfo::locked() const {
  return locked_;
}
inline void stEnchantInfo::set_locked(::google::protobuf::uint32 value) {
  set_has_locked();
  locked_ = value;
}

// optional uint32 propType = 3;
inline bool stEnchantInfo::has_proptype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stEnchantInfo::set_has_proptype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stEnchantInfo::clear_has_proptype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stEnchantInfo::clear_proptype() {
  proptype_ = 0u;
  clear_has_proptype();
}
inline ::google::protobuf::uint32 stEnchantInfo::proptype() const {
  return proptype_;
}
inline void stEnchantInfo::set_proptype(::google::protobuf::uint32 value) {
  set_has_proptype();
  proptype_ = value;
}

// optional uint32 propVal = 4;
inline bool stEnchantInfo::has_propval() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stEnchantInfo::set_has_propval() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stEnchantInfo::clear_has_propval() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stEnchantInfo::clear_propval() {
  propval_ = 0u;
  clear_has_propval();
}
inline ::google::protobuf::uint32 stEnchantInfo::propval() const {
  return propval_;
}
inline void stEnchantInfo::set_propval(::google::protobuf::uint32 value) {
  set_has_propval();
  propval_ = value;
}

// optional uint32 index = 5;
inline bool stEnchantInfo::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stEnchantInfo::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stEnchantInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stEnchantInfo::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stEnchantInfo::index() const {
  return index_;
}
inline void stEnchantInfo::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// stSynItemInfo

// optional uint32 itemID = 1;
inline bool stSynItemInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynItemInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynItemInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynItemInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSynItemInfo::itemid() const {
  return itemid_;
}
inline void stSynItemInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint64 instanceID = 2;
inline bool stSynItemInfo::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynItemInfo::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynItemInfo::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynItemInfo::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stSynItemInfo::instanceid() const {
  return instanceid_;
}
inline void stSynItemInfo::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 num = 3;
inline bool stSynItemInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynItemInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynItemInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynItemInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynItemInfo::num() const {
  return num_;
}
inline void stSynItemInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional uint32 raiseLv = 4;
inline bool stSynItemInfo::has_raiselv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynItemInfo::set_has_raiselv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynItemInfo::clear_has_raiselv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynItemInfo::clear_raiselv() {
  raiselv_ = 0u;
  clear_has_raiselv();
}
inline ::google::protobuf::uint32 stSynItemInfo::raiselv() const {
  return raiselv_;
}
inline void stSynItemInfo::set_raiselv(::google::protobuf::uint32 value) {
  set_has_raiselv();
  raiselv_ = value;
}

// optional uint32 maxHP = 5;
inline bool stSynItemInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynItemInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynItemInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynItemInfo::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 stSynItemInfo::maxhp() const {
  return maxhp_;
}
inline void stSynItemInfo::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional uint32 damage = 7;
inline bool stSynItemInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynItemInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynItemInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynItemInfo::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 stSynItemInfo::damage() const {
  return damage_;
}
inline void stSynItemInfo::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// optional uint32 exp = 8;
inline bool stSynItemInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynItemInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynItemInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynItemInfo::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stSynItemInfo::exp() const {
  return exp_;
}
inline void stSynItemInfo::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional .Role.stBagPos bagPos = 9;
inline bool stSynItemInfo::has_bagpos() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynItemInfo::set_has_bagpos() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynItemInfo::clear_has_bagpos() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynItemInfo::clear_bagpos() {
  if (bagpos_ != NULL) bagpos_->::Role::stBagPos::Clear();
  clear_has_bagpos();
}
inline const ::Role::stBagPos& stSynItemInfo::bagpos() const {
  return bagpos_ != NULL ? *bagpos_ : *default_instance_->bagpos_;
}
inline ::Role::stBagPos* stSynItemInfo::mutable_bagpos() {
  set_has_bagpos();
  if (bagpos_ == NULL) bagpos_ = new ::Role::stBagPos;
  return bagpos_;
}
inline ::Role::stBagPos* stSynItemInfo::release_bagpos() {
  clear_has_bagpos();
  ::Role::stBagPos* temp = bagpos_;
  bagpos_ = NULL;
  return temp;
}
inline void stSynItemInfo::set_allocated_bagpos(::Role::stBagPos* bagpos) {
  delete bagpos_;
  bagpos_ = bagpos;
  if (bagpos) {
    set_has_bagpos();
  } else {
    clear_has_bagpos();
  }
}

// optional uint32 battlePower = 10;
inline bool stSynItemInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynItemInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynItemInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynItemInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynItemInfo::battlepower() const {
  return battlepower_;
}
inline void stSynItemInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 refineLv = 11;
inline bool stSynItemInfo::has_refinelv() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSynItemInfo::set_has_refinelv() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSynItemInfo::clear_has_refinelv() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSynItemInfo::clear_refinelv() {
  refinelv_ = 0u;
  clear_has_refinelv();
}
inline ::google::protobuf::uint32 stSynItemInfo::refinelv() const {
  return refinelv_;
}
inline void stSynItemInfo::set_refinelv(::google::protobuf::uint32 value) {
  set_has_refinelv();
  refinelv_ = value;
}

// optional uint32 obtainSkill = 12;
inline bool stSynItemInfo::has_obtainskill() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stSynItemInfo::set_has_obtainskill() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stSynItemInfo::clear_has_obtainskill() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stSynItemInfo::clear_obtainskill() {
  obtainskill_ = 0u;
  clear_has_obtainskill();
}
inline ::google::protobuf::uint32 stSynItemInfo::obtainskill() const {
  return obtainskill_;
}
inline void stSynItemInfo::set_obtainskill(::google::protobuf::uint32 value) {
  set_has_obtainskill();
  obtainskill_ = value;
}

// repeated .Role.stItemSkillInfo skillInfo = 13;
inline int stSynItemInfo::skillinfo_size() const {
  return skillinfo_.size();
}
inline void stSynItemInfo::clear_skillinfo() {
  skillinfo_.Clear();
}
inline const ::Role::stItemSkillInfo& stSynItemInfo::skillinfo(int index) const {
  return skillinfo_.Get(index);
}
inline ::Role::stItemSkillInfo* stSynItemInfo::mutable_skillinfo(int index) {
  return skillinfo_.Mutable(index);
}
inline ::Role::stItemSkillInfo* stSynItemInfo::add_skillinfo() {
  return skillinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stItemSkillInfo >&
stSynItemInfo::skillinfo() const {
  return skillinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stItemSkillInfo >*
stSynItemInfo::mutable_skillinfo() {
  return &skillinfo_;
}

// repeated .Role.stRaiseSkillProp raiseSkillProp = 14;
inline int stSynItemInfo::raiseskillprop_size() const {
  return raiseskillprop_.size();
}
inline void stSynItemInfo::clear_raiseskillprop() {
  raiseskillprop_.Clear();
}
inline const ::Role::stRaiseSkillProp& stSynItemInfo::raiseskillprop(int index) const {
  return raiseskillprop_.Get(index);
}
inline ::Role::stRaiseSkillProp* stSynItemInfo::mutable_raiseskillprop(int index) {
  return raiseskillprop_.Mutable(index);
}
inline ::Role::stRaiseSkillProp* stSynItemInfo::add_raiseskillprop() {
  return raiseskillprop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stRaiseSkillProp >&
stSynItemInfo::raiseskillprop() const {
  return raiseskillprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stRaiseSkillProp >*
stSynItemInfo::mutable_raiseskillprop() {
  return &raiseskillprop_;
}

// optional uint32 remainTime = 15;
inline bool stSynItemInfo::has_remaintime() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void stSynItemInfo::set_has_remaintime() {
  _has_bits_[0] |= 0x00002000u;
}
inline void stSynItemInfo::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void stSynItemInfo::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stSynItemInfo::remaintime() const {
  return remaintime_;
}
inline void stSynItemInfo::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// optional uint32 breakLv = 16;
inline bool stSynItemInfo::has_breaklv() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void stSynItemInfo::set_has_breaklv() {
  _has_bits_[0] |= 0x00004000u;
}
inline void stSynItemInfo::clear_has_breaklv() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void stSynItemInfo::clear_breaklv() {
  breaklv_ = 0u;
  clear_has_breaklv();
}
inline ::google::protobuf::uint32 stSynItemInfo::breaklv() const {
  return breaklv_;
}
inline void stSynItemInfo::set_breaklv(::google::protobuf::uint32 value) {
  set_has_breaklv();
  breaklv_ = value;
}

// repeated .Role.stEnchantInfo enchant = 17;
inline int stSynItemInfo::enchant_size() const {
  return enchant_.size();
}
inline void stSynItemInfo::clear_enchant() {
  enchant_.Clear();
}
inline const ::Role::stEnchantInfo& stSynItemInfo::enchant(int index) const {
  return enchant_.Get(index);
}
inline ::Role::stEnchantInfo* stSynItemInfo::mutable_enchant(int index) {
  return enchant_.Mutable(index);
}
inline ::Role::stEnchantInfo* stSynItemInfo::add_enchant() {
  return enchant_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stEnchantInfo >&
stSynItemInfo::enchant() const {
  return enchant_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stEnchantInfo >*
stSynItemInfo::mutable_enchant() {
  return &enchant_;
}

// -------------------------------------------------------------------

// stNotifyAddItem

// optional .Role.stSynItemInfo data = 1;
inline bool stNotifyAddItem::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyAddItem::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyAddItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyAddItem::clear_data() {
  if (data_ != NULL) data_->::Role::stSynItemInfo::Clear();
  clear_has_data();
}
inline const ::Role::stSynItemInfo& stNotifyAddItem::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Role::stSynItemInfo* stNotifyAddItem::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Role::stSynItemInfo;
  return data_;
}
inline ::Role::stSynItemInfo* stNotifyAddItem::release_data() {
  clear_has_data();
  ::Role::stSynItemInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void stNotifyAddItem::set_allocated_data(::Role::stSynItemInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// stDeleteItem

// optional uint64 instanceID = 1;
inline bool stDeleteItem::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDeleteItem::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDeleteItem::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDeleteItem::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stDeleteItem::instanceid() const {
  return instanceid_;
}
inline void stDeleteItem::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stBagPos bagPos = 2;
inline bool stDeleteItem::has_bagpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDeleteItem::set_has_bagpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDeleteItem::clear_has_bagpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDeleteItem::clear_bagpos() {
  if (bagpos_ != NULL) bagpos_->::Role::stBagPos::Clear();
  clear_has_bagpos();
}
inline const ::Role::stBagPos& stDeleteItem::bagpos() const {
  return bagpos_ != NULL ? *bagpos_ : *default_instance_->bagpos_;
}
inline ::Role::stBagPos* stDeleteItem::mutable_bagpos() {
  set_has_bagpos();
  if (bagpos_ == NULL) bagpos_ = new ::Role::stBagPos;
  return bagpos_;
}
inline ::Role::stBagPos* stDeleteItem::release_bagpos() {
  clear_has_bagpos();
  ::Role::stBagPos* temp = bagpos_;
  bagpos_ = NULL;
  return temp;
}
inline void stDeleteItem::set_allocated_bagpos(::Role::stBagPos* bagpos) {
  delete bagpos_;
  bagpos_ = bagpos;
  if (bagpos) {
    set_has_bagpos();
  } else {
    clear_has_bagpos();
  }
}

// -------------------------------------------------------------------

// stRefreshItem

// optional .Role.stSynItemInfo data = 1;
inline bool stRefreshItem::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshItem::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshItem::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshItem::clear_data() {
  if (data_ != NULL) data_->::Role::stSynItemInfo::Clear();
  clear_has_data();
}
inline const ::Role::stSynItemInfo& stRefreshItem::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Role::stSynItemInfo* stRefreshItem::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Role::stSynItemInfo;
  return data_;
}
inline ::Role::stSynItemInfo* stRefreshItem::release_data() {
  clear_has_data();
  ::Role::stSynItemInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void stRefreshItem::set_allocated_data(::Role::stSynItemInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// stInitAllItem

// repeated .Role.stSynItemInfo data = 1;
inline int stInitAllItem::data_size() const {
  return data_.size();
}
inline void stInitAllItem::clear_data() {
  data_.Clear();
}
inline const ::Role::stSynItemInfo& stInitAllItem::data(int index) const {
  return data_.Get(index);
}
inline ::Role::stSynItemInfo* stInitAllItem::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Role::stSynItemInfo* stInitAllItem::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >&
stInitAllItem::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >*
stInitAllItem::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// stReqOpenShop

// optional uint32 shopID = 1;
inline bool stReqOpenShop::has_shopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenShop::set_has_shopid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenShop::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenShop::clear_shopid() {
  shopid_ = 0u;
  clear_has_shopid();
}
inline ::google::protobuf::uint32 stReqOpenShop::shopid() const {
  return shopid_;
}
inline void stReqOpenShop::set_shopid(::google::protobuf::uint32 value) {
  set_has_shopid();
  shopid_ = value;
}

// -------------------------------------------------------------------

// stShopItem

// optional uint32 index = 1;
inline bool stShopItem::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stShopItem::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stShopItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stShopItem::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stShopItem::index() const {
  return index_;
}
inline void stShopItem::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 uniqueID = 2;
inline bool stShopItem::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stShopItem::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stShopItem::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stShopItem::clear_uniqueid() {
  uniqueid_ = 0u;
  clear_has_uniqueid();
}
inline ::google::protobuf::uint32 stShopItem::uniqueid() const {
  return uniqueid_;
}
inline void stShopItem::set_uniqueid(::google::protobuf::uint32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
}

// optional uint32 itemID = 3;
inline bool stShopItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stShopItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stShopItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stShopItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stShopItem::itemid() const {
  return itemid_;
}
inline void stShopItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 buyNum = 4;
inline bool stShopItem::has_buynum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stShopItem::set_has_buynum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stShopItem::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stShopItem::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 stShopItem::buynum() const {
  return buynum_;
}
inline void stShopItem::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
}

// optional uint32 buyNumPerTime = 5;
inline bool stShopItem::has_buynumpertime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stShopItem::set_has_buynumpertime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stShopItem::clear_has_buynumpertime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stShopItem::clear_buynumpertime() {
  buynumpertime_ = 0u;
  clear_has_buynumpertime();
}
inline ::google::protobuf::uint32 stShopItem::buynumpertime() const {
  return buynumpertime_;
}
inline void stShopItem::set_buynumpertime(::google::protobuf::uint32 value) {
  set_has_buynumpertime();
  buynumpertime_ = value;
}

// -------------------------------------------------------------------

// stRetShopItemList

// optional uint32 shopID = 1;
inline bool stRetShopItemList::has_shopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetShopItemList::set_has_shopid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetShopItemList::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetShopItemList::clear_shopid() {
  shopid_ = 0u;
  clear_has_shopid();
}
inline ::google::protobuf::uint32 stRetShopItemList::shopid() const {
  return shopid_;
}
inline void stRetShopItemList::set_shopid(::google::protobuf::uint32 value) {
  set_has_shopid();
  shopid_ = value;
}

// repeated .Role.stShopItem shopList = 2;
inline int stRetShopItemList::shoplist_size() const {
  return shoplist_.size();
}
inline void stRetShopItemList::clear_shoplist() {
  shoplist_.Clear();
}
inline const ::Role::stShopItem& stRetShopItemList::shoplist(int index) const {
  return shoplist_.Get(index);
}
inline ::Role::stShopItem* stRetShopItemList::mutable_shoplist(int index) {
  return shoplist_.Mutable(index);
}
inline ::Role::stShopItem* stRetShopItemList::add_shoplist() {
  return shoplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >&
stRetShopItemList::shoplist() const {
  return shoplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >*
stRetShopItemList::mutable_shoplist() {
  return &shoplist_;
}

// optional uint32 refreshRemainTime = 3;
inline bool stRetShopItemList::has_refreshremaintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetShopItemList::set_has_refreshremaintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetShopItemList::clear_has_refreshremaintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetShopItemList::clear_refreshremaintime() {
  refreshremaintime_ = 0u;
  clear_has_refreshremaintime();
}
inline ::google::protobuf::uint32 stRetShopItemList::refreshremaintime() const {
  return refreshremaintime_;
}
inline void stRetShopItemList::set_refreshremaintime(::google::protobuf::uint32 value) {
  set_has_refreshremaintime();
  refreshremaintime_ = value;
}

// optional uint32 refreshNum = 4;
inline bool stRetShopItemList::has_refreshnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetShopItemList::set_has_refreshnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetShopItemList::clear_has_refreshnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetShopItemList::clear_refreshnum() {
  refreshnum_ = 0u;
  clear_has_refreshnum();
}
inline ::google::protobuf::uint32 stRetShopItemList::refreshnum() const {
  return refreshnum_;
}
inline void stRetShopItemList::set_refreshnum(::google::protobuf::uint32 value) {
  set_has_refreshnum();
  refreshnum_ = value;
}

// -------------------------------------------------------------------

// stReqBuyItem

// optional uint32 shopID = 1;
inline bool stReqBuyItem::has_shopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBuyItem::set_has_shopid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBuyItem::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBuyItem::clear_shopid() {
  shopid_ = 0u;
  clear_has_shopid();
}
inline ::google::protobuf::uint32 stReqBuyItem::shopid() const {
  return shopid_;
}
inline void stReqBuyItem::set_shopid(::google::protobuf::uint32 value) {
  set_has_shopid();
  shopid_ = value;
}

// optional uint32 index = 2;
inline bool stReqBuyItem::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqBuyItem::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqBuyItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqBuyItem::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stReqBuyItem::index() const {
  return index_;
}
inline void stReqBuyItem::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 num = 3;
inline bool stReqBuyItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqBuyItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqBuyItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqBuyItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stReqBuyItem::num() const {
  return num_;
}
inline void stReqBuyItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// optional bool isFashion = 4;
inline bool stReqBuyItem::has_isfashion() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqBuyItem::set_has_isfashion() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqBuyItem::clear_has_isfashion() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqBuyItem::clear_isfashion() {
  isfashion_ = false;
  clear_has_isfashion();
}
inline bool stReqBuyItem::isfashion() const {
  return isfashion_;
}
inline void stReqBuyItem::set_isfashion(bool value) {
  set_has_isfashion();
  isfashion_ = value;
}

// -------------------------------------------------------------------

// stBuyItemResult

// optional .Role.stBuyItemResult.BUYRESULT retCode = 1;
inline bool stBuyItemResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyItemResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyItemResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyItemResult::clear_retcode() {
  retcode_ = 1;
  clear_has_retcode();
}
inline ::Role::stBuyItemResult_BUYRESULT stBuyItemResult::retcode() const {
  return static_cast< ::Role::stBuyItemResult_BUYRESULT >(retcode_);
}
inline void stBuyItemResult::set_retcode(::Role::stBuyItemResult_BUYRESULT value) {
  assert(::Role::stBuyItemResult_BUYRESULT_IsValid(value));
  set_has_retcode();
  retcode_ = value;
}

// optional .Role.stShopItem shopItem = 2;
inline bool stBuyItemResult::has_shopitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBuyItemResult::set_has_shopitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBuyItemResult::clear_has_shopitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBuyItemResult::clear_shopitem() {
  if (shopitem_ != NULL) shopitem_->::Role::stShopItem::Clear();
  clear_has_shopitem();
}
inline const ::Role::stShopItem& stBuyItemResult::shopitem() const {
  return shopitem_ != NULL ? *shopitem_ : *default_instance_->shopitem_;
}
inline ::Role::stShopItem* stBuyItemResult::mutable_shopitem() {
  set_has_shopitem();
  if (shopitem_ == NULL) shopitem_ = new ::Role::stShopItem;
  return shopitem_;
}
inline ::Role::stShopItem* stBuyItemResult::release_shopitem() {
  clear_has_shopitem();
  ::Role::stShopItem* temp = shopitem_;
  shopitem_ = NULL;
  return temp;
}
inline void stBuyItemResult::set_allocated_shopitem(::Role::stShopItem* shopitem) {
  delete shopitem_;
  shopitem_ = shopitem;
  if (shopitem) {
    set_has_shopitem();
  } else {
    clear_has_shopitem();
  }
}

// optional uint32 shopID = 3;
inline bool stBuyItemResult::has_shopid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBuyItemResult::set_has_shopid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBuyItemResult::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBuyItemResult::clear_shopid() {
  shopid_ = 0u;
  clear_has_shopid();
}
inline ::google::protobuf::uint32 stBuyItemResult::shopid() const {
  return shopid_;
}
inline void stBuyItemResult::set_shopid(::google::protobuf::uint32 value) {
  set_has_shopid();
  shopid_ = value;
}

// -------------------------------------------------------------------

// stSynHeroSkill

// optional uint32 skillID = 1;
inline bool stSynHeroSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynHeroSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynHeroSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynHeroSkill::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stSynHeroSkill::skillid() const {
  return skillid_;
}
inline void stSynHeroSkill::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillLv = 2;
inline bool stSynHeroSkill::has_skilllv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynHeroSkill::set_has_skilllv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynHeroSkill::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynHeroSkill::clear_skilllv() {
  skilllv_ = 0u;
  clear_has_skilllv();
}
inline ::google::protobuf::uint32 stSynHeroSkill::skilllv() const {
  return skilllv_;
}
inline void stSynHeroSkill::set_skilllv(::google::protobuf::uint32 value) {
  set_has_skilllv();
  skilllv_ = value;
}

// optional uint32 skillPos = 3;
inline bool stSynHeroSkill::has_skillpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynHeroSkill::set_has_skillpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynHeroSkill::clear_has_skillpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynHeroSkill::clear_skillpos() {
  skillpos_ = 0u;
  clear_has_skillpos();
}
inline ::google::protobuf::uint32 stSynHeroSkill::skillpos() const {
  return skillpos_;
}
inline void stSynHeroSkill::set_skillpos(::google::protobuf::uint32 value) {
  set_has_skillpos();
  skillpos_ = value;
}

// -------------------------------------------------------------------

// stImpactHeroInfo

// optional uint32 heroID = 1;
inline bool stImpactHeroInfo::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stImpactHeroInfo::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stImpactHeroInfo::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stImpactHeroInfo::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stImpactHeroInfo::heroid() const {
  return heroid_;
}
inline void stImpactHeroInfo::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// repeated .Role.stBattleProp battleProp = 2;
inline int stImpactHeroInfo::battleprop_size() const {
  return battleprop_.size();
}
inline void stImpactHeroInfo::clear_battleprop() {
  battleprop_.Clear();
}
inline const ::Role::stBattleProp& stImpactHeroInfo::battleprop(int index) const {
  return battleprop_.Get(index);
}
inline ::Role::stBattleProp* stImpactHeroInfo::mutable_battleprop(int index) {
  return battleprop_.Mutable(index);
}
inline ::Role::stBattleProp* stImpactHeroInfo::add_battleprop() {
  return battleprop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
stImpactHeroInfo::battleprop() const {
  return battleprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
stImpactHeroInfo::mutable_battleprop() {
  return &battleprop_;
}

// -------------------------------------------------------------------

// stSynHeroInfo

// optional uint32 heroID = 1;
inline bool stSynHeroInfo::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynHeroInfo::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynHeroInfo::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynHeroInfo::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stSynHeroInfo::heroid() const {
  return heroid_;
}
inline void stSynHeroInfo::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 level = 2;
inline bool stSynHeroInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynHeroInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynHeroInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynHeroInfo::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynHeroInfo::level() const {
  return level_;
}
inline void stSynHeroInfo::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional .Role.E_HERO_STATE state = 3;
inline bool stSynHeroInfo::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynHeroInfo::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynHeroInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynHeroInfo::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::Role::E_HERO_STATE stSynHeroInfo::state() const {
  return static_cast< ::Role::E_HERO_STATE >(state_);
}
inline void stSynHeroInfo::set_state(::Role::E_HERO_STATE value) {
  assert(::Role::E_HERO_STATE_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional uint32 pos = 4;
inline bool stSynHeroInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynHeroInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynHeroInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynHeroInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stSynHeroInfo::pos() const {
  return pos_;
}
inline void stSynHeroInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// repeated .Role.stSynHeroSkill skillVec = 5;
inline int stSynHeroInfo::skillvec_size() const {
  return skillvec_.size();
}
inline void stSynHeroInfo::clear_skillvec() {
  skillvec_.Clear();
}
inline const ::Role::stSynHeroSkill& stSynHeroInfo::skillvec(int index) const {
  return skillvec_.Get(index);
}
inline ::Role::stSynHeroSkill* stSynHeroInfo::mutable_skillvec(int index) {
  return skillvec_.Mutable(index);
}
inline ::Role::stSynHeroSkill* stSynHeroInfo::add_skillvec() {
  return skillvec_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroSkill >&
stSynHeroInfo::skillvec() const {
  return skillvec_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroSkill >*
stSynHeroInfo::mutable_skillvec() {
  return &skillvec_;
}

// optional uint32 maxHP = 6;
inline bool stSynHeroInfo::has_maxhp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynHeroInfo::set_has_maxhp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynHeroInfo::clear_has_maxhp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynHeroInfo::clear_maxhp() {
  maxhp_ = 0u;
  clear_has_maxhp();
}
inline ::google::protobuf::uint32 stSynHeroInfo::maxhp() const {
  return maxhp_;
}
inline void stSynHeroInfo::set_maxhp(::google::protobuf::uint32 value) {
  set_has_maxhp();
  maxhp_ = value;
}

// optional uint32 damage = 7;
inline bool stSynHeroInfo::has_damage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynHeroInfo::set_has_damage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynHeroInfo::clear_has_damage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynHeroInfo::clear_damage() {
  damage_ = 0u;
  clear_has_damage();
}
inline ::google::protobuf::uint32 stSynHeroInfo::damage() const {
  return damage_;
}
inline void stSynHeroInfo::set_damage(::google::protobuf::uint32 value) {
  set_has_damage();
  damage_ = value;
}

// optional uint32 evolutionLv = 8;
inline bool stSynHeroInfo::has_evolutionlv() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stSynHeroInfo::set_has_evolutionlv() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stSynHeroInfo::clear_has_evolutionlv() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stSynHeroInfo::clear_evolutionlv() {
  evolutionlv_ = 0u;
  clear_has_evolutionlv();
}
inline ::google::protobuf::uint32 stSynHeroInfo::evolutionlv() const {
  return evolutionlv_;
}
inline void stSynHeroInfo::set_evolutionlv(::google::protobuf::uint32 value) {
  set_has_evolutionlv();
  evolutionlv_ = value;
}

// optional uint32 battlePower = 9;
inline bool stSynHeroInfo::has_battlepower() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stSynHeroInfo::set_has_battlepower() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stSynHeroInfo::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stSynHeroInfo::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynHeroInfo::battlepower() const {
  return battlepower_;
}
inline void stSynHeroInfo::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 studySkillID = 10;
inline bool stSynHeroInfo::has_studyskillid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stSynHeroInfo::set_has_studyskillid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stSynHeroInfo::clear_has_studyskillid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stSynHeroInfo::clear_studyskillid() {
  studyskillid_ = 0u;
  clear_has_studyskillid();
}
inline ::google::protobuf::uint32 stSynHeroInfo::studyskillid() const {
  return studyskillid_;
}
inline void stSynHeroInfo::set_studyskillid(::google::protobuf::uint32 value) {
  set_has_studyskillid();
  studyskillid_ = value;
}

// repeated .Role.stBattleProp battleProp = 11;
inline int stSynHeroInfo::battleprop_size() const {
  return battleprop_.size();
}
inline void stSynHeroInfo::clear_battleprop() {
  battleprop_.Clear();
}
inline const ::Role::stBattleProp& stSynHeroInfo::battleprop(int index) const {
  return battleprop_.Get(index);
}
inline ::Role::stBattleProp* stSynHeroInfo::mutable_battleprop(int index) {
  return battleprop_.Mutable(index);
}
inline ::Role::stBattleProp* stSynHeroInfo::add_battleprop() {
  return battleprop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
stSynHeroInfo::battleprop() const {
  return battleprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
stSynHeroInfo::mutable_battleprop() {
  return &battleprop_;
}

// optional uint32 trainLv = 12;
inline bool stSynHeroInfo::has_trainlv() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stSynHeroInfo::set_has_trainlv() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stSynHeroInfo::clear_has_trainlv() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stSynHeroInfo::clear_trainlv() {
  trainlv_ = 0u;
  clear_has_trainlv();
}
inline ::google::protobuf::uint32 stSynHeroInfo::trainlv() const {
  return trainlv_;
}
inline void stSynHeroInfo::set_trainlv(::google::protobuf::uint32 value) {
  set_has_trainlv();
  trainlv_ = value;
}

// optional uint32 trainExp = 13;
inline bool stSynHeroInfo::has_trainexp() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stSynHeroInfo::set_has_trainexp() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stSynHeroInfo::clear_has_trainexp() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stSynHeroInfo::clear_trainexp() {
  trainexp_ = 0u;
  clear_has_trainexp();
}
inline ::google::protobuf::uint32 stSynHeroInfo::trainexp() const {
  return trainexp_;
}
inline void stSynHeroInfo::set_trainexp(::google::protobuf::uint32 value) {
  set_has_trainexp();
  trainexp_ = value;
}

// -------------------------------------------------------------------

// stInitAllHero

// optional uint32 skillExp = 1;
inline bool stInitAllHero::has_skillexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stInitAllHero::set_has_skillexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stInitAllHero::clear_has_skillexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stInitAllHero::clear_skillexp() {
  skillexp_ = 0u;
  clear_has_skillexp();
}
inline ::google::protobuf::uint32 stInitAllHero::skillexp() const {
  return skillexp_;
}
inline void stInitAllHero::set_skillexp(::google::protobuf::uint32 value) {
  set_has_skillexp();
  skillexp_ = value;
}

// optional uint32 useDiamondNum = 2;
inline bool stInitAllHero::has_usediamondnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stInitAllHero::set_has_usediamondnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stInitAllHero::clear_has_usediamondnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stInitAllHero::clear_usediamondnum() {
  usediamondnum_ = 0u;
  clear_has_usediamondnum();
}
inline ::google::protobuf::uint32 stInitAllHero::usediamondnum() const {
  return usediamondnum_;
}
inline void stInitAllHero::set_usediamondnum(::google::protobuf::uint32 value) {
  set_has_usediamondnum();
  usediamondnum_ = value;
}

// repeated .Role.stSynHeroInfo data = 3;
inline int stInitAllHero::data_size() const {
  return data_.size();
}
inline void stInitAllHero::clear_data() {
  data_.Clear();
}
inline const ::Role::stSynHeroInfo& stInitAllHero::data(int index) const {
  return data_.Get(index);
}
inline ::Role::stSynHeroInfo* stInitAllHero::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Role::stSynHeroInfo* stInitAllHero::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >&
stInitAllHero::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >*
stInitAllHero::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// stNotifyAddHero

// optional .Role.stSynHeroInfo data = 1;
inline bool stNotifyAddHero::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyAddHero::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyAddHero::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyAddHero::clear_data() {
  if (data_ != NULL) data_->::Role::stSynHeroInfo::Clear();
  clear_has_data();
}
inline const ::Role::stSynHeroInfo& stNotifyAddHero::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Role::stSynHeroInfo* stNotifyAddHero::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Role::stSynHeroInfo;
  return data_;
}
inline ::Role::stSynHeroInfo* stNotifyAddHero::release_data() {
  clear_has_data();
  ::Role::stSynHeroInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void stNotifyAddHero::set_allocated_data(::Role::stSynHeroInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// stRefreshHero

// optional .Role.stSynHeroInfo data = 1;
inline bool stRefreshHero::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshHero::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshHero::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshHero::clear_data() {
  if (data_ != NULL) data_->::Role::stSynHeroInfo::Clear();
  clear_has_data();
}
inline const ::Role::stSynHeroInfo& stRefreshHero::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Role::stSynHeroInfo* stRefreshHero::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Role::stSynHeroInfo;
  return data_;
}
inline ::Role::stSynHeroInfo* stRefreshHero::release_data() {
  clear_has_data();
  ::Role::stSynHeroInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void stRefreshHero::set_allocated_data(::Role::stSynHeroInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// stReqHeroGoOutForBattle

// optional uint32 heroID = 1;
inline bool stReqHeroGoOutForBattle::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqHeroGoOutForBattle::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqHeroGoOutForBattle::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqHeroGoOutForBattle::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqHeroGoOutForBattle::heroid() const {
  return heroid_;
}
inline void stReqHeroGoOutForBattle::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 pos = 2;
inline bool stReqHeroGoOutForBattle::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqHeroGoOutForBattle::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqHeroGoOutForBattle::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqHeroGoOutForBattle::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stReqHeroGoOutForBattle::pos() const {
  return pos_;
}
inline void stReqHeroGoOutForBattle::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// HeroGoOutForBattleResult

// optional uint32 heroID = 1;
inline bool HeroGoOutForBattleResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroGoOutForBattleResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroGoOutForBattleResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroGoOutForBattleResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 HeroGoOutForBattleResult::heroid() const {
  return heroid_;
}
inline void HeroGoOutForBattleResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional .Role.HeroGoOutForBattleResult.ERESULT retCode = 2;
inline bool HeroGoOutForBattleResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroGoOutForBattleResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroGoOutForBattleResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroGoOutForBattleResult::clear_retcode() {
  retcode_ = 1;
  clear_has_retcode();
}
inline ::Role::HeroGoOutForBattleResult_ERESULT HeroGoOutForBattleResult::retcode() const {
  return static_cast< ::Role::HeroGoOutForBattleResult_ERESULT >(retcode_);
}
inline void HeroGoOutForBattleResult::set_retcode(::Role::HeroGoOutForBattleResult_ERESULT value) {
  assert(::Role::HeroGoOutForBattleResult_ERESULT_IsValid(value));
  set_has_retcode();
  retcode_ = value;
}

// optional uint32 pos = 3;
inline bool HeroGoOutForBattleResult::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void HeroGoOutForBattleResult::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void HeroGoOutForBattleResult::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void HeroGoOutForBattleResult::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 HeroGoOutForBattleResult::pos() const {
  return pos_;
}
inline void HeroGoOutForBattleResult::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// ReqHeroChange2WaitState

// optional uint32 heroID = 1;
inline bool ReqHeroChange2WaitState::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqHeroChange2WaitState::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqHeroChange2WaitState::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqHeroChange2WaitState::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 ReqHeroChange2WaitState::heroid() const {
  return heroid_;
}
inline void ReqHeroChange2WaitState::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// HeroChange2WaitStateResult

// optional uint32 heroID = 1;
inline bool HeroChange2WaitStateResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void HeroChange2WaitStateResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void HeroChange2WaitStateResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void HeroChange2WaitStateResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 HeroChange2WaitStateResult::heroid() const {
  return heroid_;
}
inline void HeroChange2WaitStateResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional bool success = 2;
inline bool HeroChange2WaitStateResult::has_success() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void HeroChange2WaitStateResult::set_has_success() {
  _has_bits_[0] |= 0x00000002u;
}
inline void HeroChange2WaitStateResult::clear_has_success() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void HeroChange2WaitStateResult::clear_success() {
  success_ = false;
  clear_has_success();
}
inline bool HeroChange2WaitStateResult::success() const {
  return success_;
}
inline void HeroChange2WaitStateResult::set_success(bool value) {
  set_has_success();
  success_ = value;
}

// -------------------------------------------------------------------

// stNotifyRoleAddExp

// optional uint32 addExp = 1;
inline bool stNotifyRoleAddExp::has_addexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyRoleAddExp::set_has_addexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyRoleAddExp::clear_has_addexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyRoleAddExp::clear_addexp() {
  addexp_ = 0u;
  clear_has_addexp();
}
inline ::google::protobuf::uint32 stNotifyRoleAddExp::addexp() const {
  return addexp_;
}
inline void stNotifyRoleAddExp::set_addexp(::google::protobuf::uint32 value) {
  set_has_addexp();
  addexp_ = value;
}

// -------------------------------------------------------------------

// stSynRoleLevel

// optional uint32 curLevel = 1;
inline bool stSynRoleLevel::has_curlevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRoleLevel::set_has_curlevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRoleLevel::clear_has_curlevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRoleLevel::clear_curlevel() {
  curlevel_ = 0u;
  clear_has_curlevel();
}
inline ::google::protobuf::uint32 stSynRoleLevel::curlevel() const {
  return curlevel_;
}
inline void stSynRoleLevel::set_curlevel(::google::protobuf::uint32 value) {
  set_has_curlevel();
  curlevel_ = value;
}

// optional uint32 curExp = 2;
inline bool stSynRoleLevel::has_curexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynRoleLevel::set_has_curexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynRoleLevel::clear_has_curexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynRoleLevel::clear_curexp() {
  curexp_ = 0u;
  clear_has_curexp();
}
inline ::google::protobuf::uint32 stSynRoleLevel::curexp() const {
  return curexp_;
}
inline void stSynRoleLevel::set_curexp(::google::protobuf::uint32 value) {
  set_has_curexp();
  curexp_ = value;
}

// -------------------------------------------------------------------

// stSynHeroLv

// optional uint32 heroID = 1;
inline bool stSynHeroLv::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynHeroLv::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynHeroLv::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynHeroLv::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stSynHeroLv::heroid() const {
  return heroid_;
}
inline void stSynHeroLv::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 curExp = 2;
inline bool stSynHeroLv::has_curexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynHeroLv::set_has_curexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynHeroLv::clear_has_curexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynHeroLv::clear_curexp() {
  curexp_ = 0u;
  clear_has_curexp();
}
inline ::google::protobuf::uint32 stSynHeroLv::curexp() const {
  return curexp_;
}
inline void stSynHeroLv::set_curexp(::google::protobuf::uint32 value) {
  set_has_curexp();
  curexp_ = value;
}

// optional uint32 curLv = 3;
inline bool stSynHeroLv::has_curlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynHeroLv::set_has_curlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynHeroLv::clear_has_curlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynHeroLv::clear_curlv() {
  curlv_ = 0u;
  clear_has_curlv();
}
inline ::google::protobuf::uint32 stSynHeroLv::curlv() const {
  return curlv_;
}
inline void stSynHeroLv::set_curlv(::google::protobuf::uint32 value) {
  set_has_curlv();
  curlv_ = value;
}

// -------------------------------------------------------------------

// stSynBagPos

// optional uint32 bagType = 1;
inline bool stSynBagPos::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynBagPos::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynBagPos::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynBagPos::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stSynBagPos::bagtype() const {
  return bagtype_;
}
inline void stSynBagPos::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint32 pos = 2;
inline bool stSynBagPos::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynBagPos::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynBagPos::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynBagPos::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stSynBagPos::pos() const {
  return pos_;
}
inline void stSynBagPos::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stMoveItem

// optional uint32 bagType = 1;
inline bool stMoveItem::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMoveItem::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMoveItem::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMoveItem::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stMoveItem::bagtype() const {
  return bagtype_;
}
inline void stMoveItem::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stMoveItem::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMoveItem::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMoveItem::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMoveItem::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stMoveItem::instanceid() const {
  return instanceid_;
}
inline void stMoveItem::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stSynBagPos bagPos = 3;
inline bool stMoveItem::has_bagpos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMoveItem::set_has_bagpos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMoveItem::clear_has_bagpos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMoveItem::clear_bagpos() {
  if (bagpos_ != NULL) bagpos_->::Role::stSynBagPos::Clear();
  clear_has_bagpos();
}
inline const ::Role::stSynBagPos& stMoveItem::bagpos() const {
  return bagpos_ != NULL ? *bagpos_ : *default_instance_->bagpos_;
}
inline ::Role::stSynBagPos* stMoveItem::mutable_bagpos() {
  set_has_bagpos();
  if (bagpos_ == NULL) bagpos_ = new ::Role::stSynBagPos;
  return bagpos_;
}
inline ::Role::stSynBagPos* stMoveItem::release_bagpos() {
  clear_has_bagpos();
  ::Role::stSynBagPos* temp = bagpos_;
  bagpos_ = NULL;
  return temp;
}
inline void stMoveItem::set_allocated_bagpos(::Role::stSynBagPos* bagpos) {
  delete bagpos_;
  bagpos_ = bagpos;
  if (bagpos) {
    set_has_bagpos();
  } else {
    clear_has_bagpos();
  }
}

// -------------------------------------------------------------------

// stReqArrangeMainBag

// optional uint32 bagType = 1;
inline bool stReqArrangeMainBag::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqArrangeMainBag::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqArrangeMainBag::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqArrangeMainBag::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqArrangeMainBag::bagtype() const {
  return bagtype_;
}
inline void stReqArrangeMainBag::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// -------------------------------------------------------------------

// stReArrangeMainBagError

// optional uint32 errorCode = 1;
inline bool stReArrangeMainBagError::has_errorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReArrangeMainBagError::set_has_errorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReArrangeMainBagError::clear_has_errorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReArrangeMainBagError::clear_errorcode() {
  errorcode_ = 0u;
  clear_has_errorcode();
}
inline ::google::protobuf::uint32 stReArrangeMainBagError::errorcode() const {
  return errorcode_;
}
inline void stReArrangeMainBagError::set_errorcode(::google::protobuf::uint32 value) {
  set_has_errorcode();
  errorcode_ = value;
}

// -------------------------------------------------------------------

// stRefreshMainBag

// optional uint32 cdTime = 1;
inline bool stRefreshMainBag::has_cdtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshMainBag::set_has_cdtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshMainBag::clear_has_cdtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshMainBag::clear_cdtime() {
  cdtime_ = 0u;
  clear_has_cdtime();
}
inline ::google::protobuf::uint32 stRefreshMainBag::cdtime() const {
  return cdtime_;
}
inline void stRefreshMainBag::set_cdtime(::google::protobuf::uint32 value) {
  set_has_cdtime();
  cdtime_ = value;
}

// repeated .Role.stSynItemInfo data = 2;
inline int stRefreshMainBag::data_size() const {
  return data_.size();
}
inline void stRefreshMainBag::clear_data() {
  data_.Clear();
}
inline const ::Role::stSynItemInfo& stRefreshMainBag::data(int index) const {
  return data_.Get(index);
}
inline ::Role::stSynItemInfo* stRefreshMainBag::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Role::stSynItemInfo* stRefreshMainBag::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >&
stRefreshMainBag::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >*
stRefreshMainBag::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// stReqCombineHero

// optional uint32 heroID = 1;
inline bool stReqCombineHero::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCombineHero::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCombineHero::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCombineHero::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqCombineHero::heroid() const {
  return heroid_;
}
inline void stReqCombineHero::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stCombineHeroResult

// optional .Role.stCombineHeroResult.Result result = 1;
inline bool stCombineHeroResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCombineHeroResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCombineHeroResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCombineHeroResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stCombineHeroResult_Result stCombineHeroResult::result() const {
  return static_cast< ::Role::stCombineHeroResult_Result >(result_);
}
inline void stCombineHeroResult::set_result(::Role::stCombineHeroResult_Result value) {
  assert(::Role::stCombineHeroResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 heroID = 2;
inline bool stCombineHeroResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCombineHeroResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCombineHeroResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCombineHeroResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stCombineHeroResult::heroid() const {
  return heroid_;
}
inline void stCombineHeroResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stReqLevelupHero

// optional uint32 heroID = 1;
inline bool stReqLevelupHero::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLevelupHero::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLevelupHero::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLevelupHero::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqLevelupHero::heroid() const {
  return heroid_;
}
inline void stReqLevelupHero::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stLevelupHeroResult

// optional .Role.stLevelupHeroResult.Result result = 1;
inline bool stLevelupHeroResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLevelupHeroResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLevelupHeroResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLevelupHeroResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stLevelupHeroResult_Result stLevelupHeroResult::result() const {
  return static_cast< ::Role::stLevelupHeroResult_Result >(result_);
}
inline void stLevelupHeroResult::set_result(::Role::stLevelupHeroResult_Result value) {
  assert(::Role::stLevelupHeroResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 heroID = 2;
inline bool stLevelupHeroResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLevelupHeroResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLevelupHeroResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLevelupHeroResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stLevelupHeroResult::heroid() const {
  return heroid_;
}
inline void stLevelupHeroResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 curLv = 3;
inline bool stLevelupHeroResult::has_curlv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stLevelupHeroResult::set_has_curlv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stLevelupHeroResult::clear_has_curlv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stLevelupHeroResult::clear_curlv() {
  curlv_ = 0u;
  clear_has_curlv();
}
inline ::google::protobuf::uint32 stLevelupHeroResult::curlv() const {
  return curlv_;
}
inline void stLevelupHeroResult::set_curlv(::google::protobuf::uint32 value) {
  set_has_curlv();
  curlv_ = value;
}

// -------------------------------------------------------------------

// stReqHeroEvolution

// optional uint32 heroID = 1;
inline bool stReqHeroEvolution::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqHeroEvolution::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqHeroEvolution::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqHeroEvolution::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqHeroEvolution::heroid() const {
  return heroid_;
}
inline void stReqHeroEvolution::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stEvolutionHeroResult

// optional .Role.stEvolutionHeroResult.Result result = 1;
inline bool stEvolutionHeroResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stEvolutionHeroResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stEvolutionHeroResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stEvolutionHeroResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stEvolutionHeroResult_Result stEvolutionHeroResult::result() const {
  return static_cast< ::Role::stEvolutionHeroResult_Result >(result_);
}
inline void stEvolutionHeroResult::set_result(::Role::stEvolutionHeroResult_Result value) {
  assert(::Role::stEvolutionHeroResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 heroID = 2;
inline bool stEvolutionHeroResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stEvolutionHeroResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stEvolutionHeroResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stEvolutionHeroResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stEvolutionHeroResult::heroid() const {
  return heroid_;
}
inline void stEvolutionHeroResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stReqHeroStudySkill

// optional uint32 heroID = 1;
inline bool stReqHeroStudySkill::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqHeroStudySkill::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqHeroStudySkill::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqHeroStudySkill::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqHeroStudySkill::heroid() const {
  return heroid_;
}
inline void stReqHeroStudySkill::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional .Role.stReqHeroStudySkill.Type type = 2;
inline bool stReqHeroStudySkill::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqHeroStudySkill::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqHeroStudySkill::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqHeroStudySkill::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Role::stReqHeroStudySkill_Type stReqHeroStudySkill::type() const {
  return static_cast< ::Role::stReqHeroStudySkill_Type >(type_);
}
inline void stReqHeroStudySkill::set_type(::Role::stReqHeroStudySkill_Type value) {
  assert(::Role::stReqHeroStudySkill_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stHeroStudySkillResult

// optional uint32 heroID = 1;
inline bool stHeroStudySkillResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroStudySkillResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroStudySkillResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroStudySkillResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stHeroStudySkillResult::heroid() const {
  return heroid_;
}
inline void stHeroStudySkillResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional .Role.stHeroStudySkillResult.Result result = 2;
inline bool stHeroStudySkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHeroStudySkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHeroStudySkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHeroStudySkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stHeroStudySkillResult_Result stHeroStudySkillResult::result() const {
  return static_cast< ::Role::stHeroStudySkillResult_Result >(result_);
}
inline void stHeroStudySkillResult::set_result(::Role::stHeroStudySkillResult_Result value) {
  assert(::Role::stHeroStudySkillResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 skillID = 3;
inline bool stHeroStudySkillResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHeroStudySkillResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHeroStudySkillResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHeroStudySkillResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stHeroStudySkillResult::skillid() const {
  return skillid_;
}
inline void stHeroStudySkillResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillLv = 4;
inline bool stHeroStudySkillResult::has_skilllv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stHeroStudySkillResult::set_has_skilllv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stHeroStudySkillResult::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stHeroStudySkillResult::clear_skilllv() {
  skilllv_ = 0u;
  clear_has_skilllv();
}
inline ::google::protobuf::uint32 stHeroStudySkillResult::skilllv() const {
  return skilllv_;
}
inline void stHeroStudySkillResult::set_skilllv(::google::protobuf::uint32 value) {
  set_has_skilllv();
  skilllv_ = value;
}

// optional uint32 useDiamondNum = 5;
inline bool stHeroStudySkillResult::has_usediamondnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stHeroStudySkillResult::set_has_usediamondnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stHeroStudySkillResult::clear_has_usediamondnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stHeroStudySkillResult::clear_usediamondnum() {
  usediamondnum_ = 0u;
  clear_has_usediamondnum();
}
inline ::google::protobuf::uint32 stHeroStudySkillResult::usediamondnum() const {
  return usediamondnum_;
}
inline void stHeroStudySkillResult::set_usediamondnum(::google::protobuf::uint32 value) {
  set_has_usediamondnum();
  usediamondnum_ = value;
}

// -------------------------------------------------------------------

// stReqRefineHeroSkill

// optional uint32 heroID = 1;
inline bool stReqRefineHeroSkill::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRefineHeroSkill::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRefineHeroSkill::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRefineHeroSkill::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqRefineHeroSkill::heroid() const {
  return heroid_;
}
inline void stReqRefineHeroSkill::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stRefineHeroSkillResult

// optional uint32 heroID = 1;
inline bool stRefineHeroSkillResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefineHeroSkillResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefineHeroSkillResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefineHeroSkillResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stRefineHeroSkillResult::heroid() const {
  return heroid_;
}
inline void stRefineHeroSkillResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional .Role.stRefineHeroSkillResult.Result result = 2;
inline bool stRefineHeroSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRefineHeroSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRefineHeroSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRefineHeroSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRefineHeroSkillResult_Result stRefineHeroSkillResult::result() const {
  return static_cast< ::Role::stRefineHeroSkillResult_Result >(result_);
}
inline void stRefineHeroSkillResult::set_result(::Role::stRefineHeroSkillResult_Result value) {
  assert(::Role::stRefineHeroSkillResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynSkillExp

// optional uint32 curExp = 1;
inline bool stSynSkillExp::has_curexp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynSkillExp::set_has_curexp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynSkillExp::clear_has_curexp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynSkillExp::clear_curexp() {
  curexp_ = 0u;
  clear_has_curexp();
}
inline ::google::protobuf::uint32 stSynSkillExp::curexp() const {
  return curexp_;
}
inline void stSynSkillExp::set_curexp(::google::protobuf::uint32 value) {
  set_has_curexp();
  curexp_ = value;
}

// -------------------------------------------------------------------

// stReqReplaceHeroSkill

// optional uint32 heroID = 1;
inline bool stReqReplaceHeroSkill::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqReplaceHeroSkill::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqReplaceHeroSkill::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqReplaceHeroSkill::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqReplaceHeroSkill::heroid() const {
  return heroid_;
}
inline void stReqReplaceHeroSkill::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 pos = 2;
inline bool stReqReplaceHeroSkill::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqReplaceHeroSkill::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqReplaceHeroSkill::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqReplaceHeroSkill::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stReqReplaceHeroSkill::pos() const {
  return pos_;
}
inline void stReqReplaceHeroSkill::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stReplaceHeroSkillResult

// optional uint32 heroID = 1;
inline bool stReplaceHeroSkillResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReplaceHeroSkillResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReplaceHeroSkillResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReplaceHeroSkillResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReplaceHeroSkillResult::heroid() const {
  return heroid_;
}
inline void stReplaceHeroSkillResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 pos = 2;
inline bool stReplaceHeroSkillResult::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReplaceHeroSkillResult::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReplaceHeroSkillResult::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReplaceHeroSkillResult::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stReplaceHeroSkillResult::pos() const {
  return pos_;
}
inline void stReplaceHeroSkillResult::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint32 skillID = 3;
inline bool stReplaceHeroSkillResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReplaceHeroSkillResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReplaceHeroSkillResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReplaceHeroSkillResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stReplaceHeroSkillResult::skillid() const {
  return skillid_;
}
inline void stReplaceHeroSkillResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional .Role.stReplaceHeroSkillResult.Result result = 4;
inline bool stReplaceHeroSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReplaceHeroSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReplaceHeroSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReplaceHeroSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stReplaceHeroSkillResult_Result stReplaceHeroSkillResult::result() const {
  return static_cast< ::Role::stReplaceHeroSkillResult_Result >(result_);
}
inline void stReplaceHeroSkillResult::set_result(::Role::stReplaceHeroSkillResult_Result value) {
  assert(::Role::stReplaceHeroSkillResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqUpgradeHeroSkill

// optional uint32 heroID = 1;
inline bool stReqUpgradeHeroSkill::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUpgradeHeroSkill::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUpgradeHeroSkill::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUpgradeHeroSkill::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqUpgradeHeroSkill::heroid() const {
  return heroid_;
}
inline void stReqUpgradeHeroSkill::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 pos = 2;
inline bool stReqUpgradeHeroSkill::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqUpgradeHeroSkill::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqUpgradeHeroSkill::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqUpgradeHeroSkill::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stReqUpgradeHeroSkill::pos() const {
  return pos_;
}
inline void stReqUpgradeHeroSkill::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stUpgradeHeroSkillResult

// optional uint32 heroID = 1;
inline bool stUpgradeHeroSkillResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUpgradeHeroSkillResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUpgradeHeroSkillResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUpgradeHeroSkillResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stUpgradeHeroSkillResult::heroid() const {
  return heroid_;
}
inline void stUpgradeHeroSkillResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 skillID = 2;
inline bool stUpgradeHeroSkillResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUpgradeHeroSkillResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUpgradeHeroSkillResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUpgradeHeroSkillResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stUpgradeHeroSkillResult::skillid() const {
  return skillid_;
}
inline void stUpgradeHeroSkillResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillLv = 3;
inline bool stUpgradeHeroSkillResult::has_skilllv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUpgradeHeroSkillResult::set_has_skilllv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUpgradeHeroSkillResult::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUpgradeHeroSkillResult::clear_skilllv() {
  skilllv_ = 0u;
  clear_has_skilllv();
}
inline ::google::protobuf::uint32 stUpgradeHeroSkillResult::skilllv() const {
  return skilllv_;
}
inline void stUpgradeHeroSkillResult::set_skilllv(::google::protobuf::uint32 value) {
  set_has_skilllv();
  skilllv_ = value;
}

// optional .Role.stUpgradeHeroSkillResult.Result result = 4;
inline bool stUpgradeHeroSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUpgradeHeroSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUpgradeHeroSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUpgradeHeroSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stUpgradeHeroSkillResult_Result stUpgradeHeroSkillResult::result() const {
  return static_cast< ::Role::stUpgradeHeroSkillResult_Result >(result_);
}
inline void stUpgradeHeroSkillResult::set_result(::Role::stUpgradeHeroSkillResult_Result value) {
  assert(::Role::stUpgradeHeroSkillResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqSellItem

// optional uint32 bagType = 1;
inline bool stReqSellItem::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSellItem::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSellItem::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSellItem::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqSellItem::bagtype() const {
  return bagtype_;
}
inline void stReqSellItem::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqSellItem::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqSellItem::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqSellItem::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqSellItem::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqSellItem::instanceid() const {
  return instanceid_;
}
inline void stReqSellItem::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 num = 3;
inline bool stReqSellItem::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqSellItem::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqSellItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqSellItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stReqSellItem::num() const {
  return num_;
}
inline void stReqSellItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSellItemResult

// optional .Role.stSellItemResult.Result result = 1;
inline bool stSellItemResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSellItemResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSellItemResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSellItemResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stSellItemResult_Result stSellItemResult::result() const {
  return static_cast< ::Role::stSellItemResult_Result >(result_);
}
inline void stSellItemResult::set_result(::Role::stSellItemResult_Result value) {
  assert(::Role::stSellItemResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRaiseItem

// optional uint32 bagType = 1;
inline bool stReqRaiseItem::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRaiseItem::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRaiseItem::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRaiseItem::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqRaiseItem::bagtype() const {
  return bagtype_;
}
inline void stReqRaiseItem::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqRaiseItem::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRaiseItem::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRaiseItem::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRaiseItem::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqRaiseItem::instanceid() const {
  return instanceid_;
}
inline void stReqRaiseItem::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 raiseType = 3;
inline bool stReqRaiseItem::has_raisetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqRaiseItem::set_has_raisetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqRaiseItem::clear_has_raisetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqRaiseItem::clear_raisetype() {
  raisetype_ = 0u;
  clear_has_raisetype();
}
inline ::google::protobuf::uint32 stReqRaiseItem::raisetype() const {
  return raisetype_;
}
inline void stReqRaiseItem::set_raisetype(::google::protobuf::uint32 value) {
  set_has_raisetype();
  raisetype_ = value;
}

// repeated uint64 eatInstanceID = 4;
inline int stReqRaiseItem::eatinstanceid_size() const {
  return eatinstanceid_.size();
}
inline void stReqRaiseItem::clear_eatinstanceid() {
  eatinstanceid_.Clear();
}
inline ::google::protobuf::uint64 stReqRaiseItem::eatinstanceid(int index) const {
  return eatinstanceid_.Get(index);
}
inline void stReqRaiseItem::set_eatinstanceid(int index, ::google::protobuf::uint64 value) {
  eatinstanceid_.Set(index, value);
}
inline void stReqRaiseItem::add_eatinstanceid(::google::protobuf::uint64 value) {
  eatinstanceid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
stReqRaiseItem::eatinstanceid() const {
  return eatinstanceid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
stReqRaiseItem::mutable_eatinstanceid() {
  return &eatinstanceid_;
}

// optional uint32 yunTieNum = 5;
inline bool stReqRaiseItem::has_yuntienum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stReqRaiseItem::set_has_yuntienum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stReqRaiseItem::clear_has_yuntienum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stReqRaiseItem::clear_yuntienum() {
  yuntienum_ = 0u;
  clear_has_yuntienum();
}
inline ::google::protobuf::uint32 stReqRaiseItem::yuntienum() const {
  return yuntienum_;
}
inline void stReqRaiseItem::set_yuntienum(::google::protobuf::uint32 value) {
  set_has_yuntienum();
  yuntienum_ = value;
}

// -------------------------------------------------------------------

// stRaiseItemResult

// optional uint32 bagType = 1;
inline bool stRaiseItemResult::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRaiseItemResult::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRaiseItemResult::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRaiseItemResult::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stRaiseItemResult::bagtype() const {
  return bagtype_;
}
inline void stRaiseItemResult::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stRaiseItemResult::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRaiseItemResult::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRaiseItemResult::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRaiseItemResult::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRaiseItemResult::instanceid() const {
  return instanceid_;
}
inline void stRaiseItemResult::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stRaiseItemResult.Result result = 3;
inline bool stRaiseItemResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRaiseItemResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRaiseItemResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRaiseItemResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRaiseItemResult_Result stRaiseItemResult::result() const {
  return static_cast< ::Role::stRaiseItemResult_Result >(result_);
}
inline void stRaiseItemResult::set_result(::Role::stRaiseItemResult_Result value) {
  assert(::Role::stRaiseItemResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqSmeltEquip

// optional uint32 bagType = 1;
inline bool stReqSmeltEquip::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSmeltEquip::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSmeltEquip::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSmeltEquip::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqSmeltEquip::bagtype() const {
  return bagtype_;
}
inline void stReqSmeltEquip::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// repeated uint64 instanceID = 2;
inline int stReqSmeltEquip::instanceid_size() const {
  return instanceid_.size();
}
inline void stReqSmeltEquip::clear_instanceid() {
  instanceid_.Clear();
}
inline ::google::protobuf::uint64 stReqSmeltEquip::instanceid(int index) const {
  return instanceid_.Get(index);
}
inline void stReqSmeltEquip::set_instanceid(int index, ::google::protobuf::uint64 value) {
  instanceid_.Set(index, value);
}
inline void stReqSmeltEquip::add_instanceid(::google::protobuf::uint64 value) {
  instanceid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
stReqSmeltEquip::instanceid() const {
  return instanceid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
stReqSmeltEquip::mutable_instanceid() {
  return &instanceid_;
}

// -------------------------------------------------------------------

// stSmeltEquipResult

// optional .Role.stSmeltEquipResult.Result result = 1;
inline bool stSmeltEquipResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSmeltEquipResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSmeltEquipResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSmeltEquipResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stSmeltEquipResult_Result stSmeltEquipResult::result() const {
  return static_cast< ::Role::stSmeltEquipResult_Result >(result_);
}
inline void stSmeltEquipResult::set_result(::Role::stSmeltEquipResult_Result value) {
  assert(::Role::stSmeltEquipResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRecastEquip

// optional uint32 bagType = 1;
inline bool stReqRecastEquip::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRecastEquip::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRecastEquip::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRecastEquip::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqRecastEquip::bagtype() const {
  return bagtype_;
}
inline void stReqRecastEquip::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// repeated uint64 instanceID = 2;
inline int stReqRecastEquip::instanceid_size() const {
  return instanceid_.size();
}
inline void stReqRecastEquip::clear_instanceid() {
  instanceid_.Clear();
}
inline ::google::protobuf::uint64 stReqRecastEquip::instanceid(int index) const {
  return instanceid_.Get(index);
}
inline void stReqRecastEquip::set_instanceid(int index, ::google::protobuf::uint64 value) {
  instanceid_.Set(index, value);
}
inline void stReqRecastEquip::add_instanceid(::google::protobuf::uint64 value) {
  instanceid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
stReqRecastEquip::instanceid() const {
  return instanceid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
stReqRecastEquip::mutable_instanceid() {
  return &instanceid_;
}

// -------------------------------------------------------------------

// RecastEquipResult

// optional .Role.RecastEquipResult.Result result = 1;
inline bool RecastEquipResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecastEquipResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecastEquipResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecastEquipResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::RecastEquipResult_Result RecastEquipResult::result() const {
  return static_cast< ::Role::RecastEquipResult_Result >(result_);
}
inline void RecastEquipResult::set_result(::Role::RecastEquipResult_Result value) {
  assert(::Role::RecastEquipResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqCombineItem

// optional uint32 pieceID = 1;
inline bool stReqCombineItem::has_pieceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCombineItem::set_has_pieceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCombineItem::clear_has_pieceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCombineItem::clear_pieceid() {
  pieceid_ = 0u;
  clear_has_pieceid();
}
inline ::google::protobuf::uint32 stReqCombineItem::pieceid() const {
  return pieceid_;
}
inline void stReqCombineItem::set_pieceid(::google::protobuf::uint32 value) {
  set_has_pieceid();
  pieceid_ = value;
}

// optional uint32 combineNum = 2;
inline bool stReqCombineItem::has_combinenum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqCombineItem::set_has_combinenum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqCombineItem::clear_has_combinenum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqCombineItem::clear_combinenum() {
  combinenum_ = 0u;
  clear_has_combinenum();
}
inline ::google::protobuf::uint32 stReqCombineItem::combinenum() const {
  return combinenum_;
}
inline void stReqCombineItem::set_combinenum(::google::protobuf::uint32 value) {
  set_has_combinenum();
  combinenum_ = value;
}

// -------------------------------------------------------------------

// stCombineItemResult

// optional .Role.stCombineItemResult.Result result = 1;
inline bool stCombineItemResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCombineItemResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCombineItemResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCombineItemResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stCombineItemResult_Result stCombineItemResult::result() const {
  return static_cast< ::Role::stCombineItemResult_Result >(result_);
}
inline void stCombineItemResult::set_result(::Role::stCombineItemResult_Result value) {
  assert(::Role::stCombineItemResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRefreshShoplist

// optional uint32 shopID = 1;
inline bool stReqRefreshShoplist::has_shopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRefreshShoplist::set_has_shopid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRefreshShoplist::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRefreshShoplist::clear_shopid() {
  shopid_ = 0u;
  clear_has_shopid();
}
inline ::google::protobuf::uint32 stReqRefreshShoplist::shopid() const {
  return shopid_;
}
inline void stReqRefreshShoplist::set_shopid(::google::protobuf::uint32 value) {
  set_has_shopid();
  shopid_ = value;
}

// -------------------------------------------------------------------

// stRefreshShoplistResult

// optional uint32 shopID = 1;
inline bool stRefreshShoplistResult::has_shopid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshShoplistResult::set_has_shopid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshShoplistResult::clear_has_shopid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshShoplistResult::clear_shopid() {
  shopid_ = 0u;
  clear_has_shopid();
}
inline ::google::protobuf::uint32 stRefreshShoplistResult::shopid() const {
  return shopid_;
}
inline void stRefreshShoplistResult::set_shopid(::google::protobuf::uint32 value) {
  set_has_shopid();
  shopid_ = value;
}

// repeated .Role.stShopItem shoplist = 2;
inline int stRefreshShoplistResult::shoplist_size() const {
  return shoplist_.size();
}
inline void stRefreshShoplistResult::clear_shoplist() {
  shoplist_.Clear();
}
inline const ::Role::stShopItem& stRefreshShoplistResult::shoplist(int index) const {
  return shoplist_.Get(index);
}
inline ::Role::stShopItem* stRefreshShoplistResult::mutable_shoplist(int index) {
  return shoplist_.Mutable(index);
}
inline ::Role::stShopItem* stRefreshShoplistResult::add_shoplist() {
  return shoplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >&
stRefreshShoplistResult::shoplist() const {
  return shoplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >*
stRefreshShoplistResult::mutable_shoplist() {
  return &shoplist_;
}

// optional .Role.stRefreshShoplistResult.Result result = 3;
inline bool stRefreshShoplistResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRefreshShoplistResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRefreshShoplistResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRefreshShoplistResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRefreshShoplistResult_Result stRefreshShoplistResult::result() const {
  return static_cast< ::Role::stRefreshShoplistResult_Result >(result_);
}
inline void stRefreshShoplistResult::set_result(::Role::stRefreshShoplistResult_Result value) {
  assert(::Role::stRefreshShoplistResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stChatCmd

// optional .Role.eChatType type = 1;
inline bool stChatCmd::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChatCmd::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChatCmd::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChatCmd::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Role::eChatType stChatCmd::type() const {
  return static_cast< ::Role::eChatType >(type_);
}
inline void stChatCmd::set_type(::Role::eChatType value) {
  assert(::Role::eChatType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 destCharID = 2;
inline bool stChatCmd::has_destcharid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stChatCmd::set_has_destcharid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stChatCmd::clear_has_destcharid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stChatCmd::clear_destcharid() {
  destcharid_ = 0u;
  clear_has_destcharid();
}
inline ::google::protobuf::uint32 stChatCmd::destcharid() const {
  return destcharid_;
}
inline void stChatCmd::set_destcharid(::google::protobuf::uint32 value) {
  set_has_destcharid();
  destcharid_ = value;
}

// optional string destCharName = 3;
inline bool stChatCmd::has_destcharname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stChatCmd::set_has_destcharname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stChatCmd::clear_has_destcharname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stChatCmd::clear_destcharname() {
  if (destcharname_ != &::google::protobuf::internal::kEmptyString) {
    destcharname_->clear();
  }
  clear_has_destcharname();
}
inline const ::std::string& stChatCmd::destcharname() const {
  return *destcharname_;
}
inline void stChatCmd::set_destcharname(const ::std::string& value) {
  set_has_destcharname();
  if (destcharname_ == &::google::protobuf::internal::kEmptyString) {
    destcharname_ = new ::std::string;
  }
  destcharname_->assign(value);
}
inline void stChatCmd::set_destcharname(const char* value) {
  set_has_destcharname();
  if (destcharname_ == &::google::protobuf::internal::kEmptyString) {
    destcharname_ = new ::std::string;
  }
  destcharname_->assign(value);
}
inline void stChatCmd::set_destcharname(const char* value, size_t size) {
  set_has_destcharname();
  if (destcharname_ == &::google::protobuf::internal::kEmptyString) {
    destcharname_ = new ::std::string;
  }
  destcharname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stChatCmd::mutable_destcharname() {
  set_has_destcharname();
  if (destcharname_ == &::google::protobuf::internal::kEmptyString) {
    destcharname_ = new ::std::string;
  }
  return destcharname_;
}
inline ::std::string* stChatCmd::release_destcharname() {
  clear_has_destcharname();
  if (destcharname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destcharname_;
    destcharname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stChatCmd::set_allocated_destcharname(::std::string* destcharname) {
  if (destcharname_ != &::google::protobuf::internal::kEmptyString) {
    delete destcharname_;
  }
  if (destcharname) {
    set_has_destcharname();
    destcharname_ = destcharname;
  } else {
    clear_has_destcharname();
    destcharname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 srcCharID = 4;
inline bool stChatCmd::has_srccharid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stChatCmd::set_has_srccharid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stChatCmd::clear_has_srccharid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stChatCmd::clear_srccharid() {
  srccharid_ = 0u;
  clear_has_srccharid();
}
inline ::google::protobuf::uint32 stChatCmd::srccharid() const {
  return srccharid_;
}
inline void stChatCmd::set_srccharid(::google::protobuf::uint32 value) {
  set_has_srccharid();
  srccharid_ = value;
}

// optional string srcCharName = 5;
inline bool stChatCmd::has_srccharname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stChatCmd::set_has_srccharname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stChatCmd::clear_has_srccharname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stChatCmd::clear_srccharname() {
  if (srccharname_ != &::google::protobuf::internal::kEmptyString) {
    srccharname_->clear();
  }
  clear_has_srccharname();
}
inline const ::std::string& stChatCmd::srccharname() const {
  return *srccharname_;
}
inline void stChatCmd::set_srccharname(const ::std::string& value) {
  set_has_srccharname();
  if (srccharname_ == &::google::protobuf::internal::kEmptyString) {
    srccharname_ = new ::std::string;
  }
  srccharname_->assign(value);
}
inline void stChatCmd::set_srccharname(const char* value) {
  set_has_srccharname();
  if (srccharname_ == &::google::protobuf::internal::kEmptyString) {
    srccharname_ = new ::std::string;
  }
  srccharname_->assign(value);
}
inline void stChatCmd::set_srccharname(const char* value, size_t size) {
  set_has_srccharname();
  if (srccharname_ == &::google::protobuf::internal::kEmptyString) {
    srccharname_ = new ::std::string;
  }
  srccharname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stChatCmd::mutable_srccharname() {
  set_has_srccharname();
  if (srccharname_ == &::google::protobuf::internal::kEmptyString) {
    srccharname_ = new ::std::string;
  }
  return srccharname_;
}
inline ::std::string* stChatCmd::release_srccharname() {
  clear_has_srccharname();
  if (srccharname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = srccharname_;
    srccharname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stChatCmd::set_allocated_srccharname(::std::string* srccharname) {
  if (srccharname_ != &::google::protobuf::internal::kEmptyString) {
    delete srccharname_;
  }
  if (srccharname) {
    set_has_srccharname();
    srccharname_ = srccharname;
  } else {
    clear_has_srccharname();
    srccharname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 6;
inline bool stChatCmd::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stChatCmd::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stChatCmd::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stChatCmd::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& stChatCmd::content() const {
  return *content_;
}
inline void stChatCmd::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stChatCmd::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void stChatCmd::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stChatCmd::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* stChatCmd::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stChatCmd::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 job = 7;
inline bool stChatCmd::has_job() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stChatCmd::set_has_job() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stChatCmd::clear_has_job() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stChatCmd::clear_job() {
  job_ = 0u;
  clear_has_job();
}
inline ::google::protobuf::uint32 stChatCmd::job() const {
  return job_;
}
inline void stChatCmd::set_job(::google::protobuf::uint32 value) {
  set_has_job();
  job_ = value;
}

// optional uint32 sex = 8;
inline bool stChatCmd::has_sex() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void stChatCmd::set_has_sex() {
  _has_bits_[0] |= 0x00000080u;
}
inline void stChatCmd::clear_has_sex() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void stChatCmd::clear_sex() {
  sex_ = 0u;
  clear_has_sex();
}
inline ::google::protobuf::uint32 stChatCmd::sex() const {
  return sex_;
}
inline void stChatCmd::set_sex(::google::protobuf::uint32 value) {
  set_has_sex();
  sex_ = value;
}

// optional uint32 vipLv = 9;
inline bool stChatCmd::has_viplv() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void stChatCmd::set_has_viplv() {
  _has_bits_[0] |= 0x00000100u;
}
inline void stChatCmd::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void stChatCmd::clear_viplv() {
  viplv_ = 0u;
  clear_has_viplv();
}
inline ::google::protobuf::uint32 stChatCmd::viplv() const {
  return viplv_;
}
inline void stChatCmd::set_viplv(::google::protobuf::uint32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional bool isVoice = 10;
inline bool stChatCmd::has_isvoice() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void stChatCmd::set_has_isvoice() {
  _has_bits_[0] |= 0x00000200u;
}
inline void stChatCmd::clear_has_isvoice() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void stChatCmd::clear_isvoice() {
  isvoice_ = false;
  clear_has_isvoice();
}
inline bool stChatCmd::isvoice() const {
  return isvoice_;
}
inline void stChatCmd::set_isvoice(bool value) {
  set_has_isvoice();
  isvoice_ = value;
}

// optional string voiceUrl = 11;
inline bool stChatCmd::has_voiceurl() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void stChatCmd::set_has_voiceurl() {
  _has_bits_[0] |= 0x00000400u;
}
inline void stChatCmd::clear_has_voiceurl() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void stChatCmd::clear_voiceurl() {
  if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
    voiceurl_->clear();
  }
  clear_has_voiceurl();
}
inline const ::std::string& stChatCmd::voiceurl() const {
  return *voiceurl_;
}
inline void stChatCmd::set_voiceurl(const ::std::string& value) {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  voiceurl_->assign(value);
}
inline void stChatCmd::set_voiceurl(const char* value) {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  voiceurl_->assign(value);
}
inline void stChatCmd::set_voiceurl(const char* value, size_t size) {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  voiceurl_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stChatCmd::mutable_voiceurl() {
  set_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    voiceurl_ = new ::std::string;
  }
  return voiceurl_;
}
inline ::std::string* stChatCmd::release_voiceurl() {
  clear_has_voiceurl();
  if (voiceurl_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = voiceurl_;
    voiceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stChatCmd::set_allocated_voiceurl(::std::string* voiceurl) {
  if (voiceurl_ != &::google::protobuf::internal::kEmptyString) {
    delete voiceurl_;
  }
  if (voiceurl) {
    set_has_voiceurl();
    voiceurl_ = voiceurl;
  } else {
    clear_has_voiceurl();
    voiceurl_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 voiceLenght = 12;
inline bool stChatCmd::has_voicelenght() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void stChatCmd::set_has_voicelenght() {
  _has_bits_[0] |= 0x00000800u;
}
inline void stChatCmd::clear_has_voicelenght() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void stChatCmd::clear_voicelenght() {
  voicelenght_ = 0u;
  clear_has_voicelenght();
}
inline ::google::protobuf::uint32 stChatCmd::voicelenght() const {
  return voicelenght_;
}
inline void stChatCmd::set_voicelenght(::google::protobuf::uint32 value) {
  set_has_voicelenght();
  voicelenght_ = value;
}

// optional uint32 photoID = 13;
inline bool stChatCmd::has_photoid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void stChatCmd::set_has_photoid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void stChatCmd::clear_has_photoid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void stChatCmd::clear_photoid() {
  photoid_ = 0u;
  clear_has_photoid();
}
inline ::google::protobuf::uint32 stChatCmd::photoid() const {
  return photoid_;
}
inline void stChatCmd::set_photoid(::google::protobuf::uint32 value) {
  set_has_photoid();
  photoid_ = value;
}

// -------------------------------------------------------------------

// stSynResource

// optional uint32 resType = 1;
inline bool stSynResource::has_restype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynResource::set_has_restype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynResource::clear_has_restype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynResource::clear_restype() {
  restype_ = 0u;
  clear_has_restype();
}
inline ::google::protobuf::uint32 stSynResource::restype() const {
  return restype_;
}
inline void stSynResource::set_restype(::google::protobuf::uint32 value) {
  set_has_restype();
  restype_ = value;
}

// optional uint32 num = 2;
inline bool stSynResource::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynResource::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynResource::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynResource::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynResource::num() const {
  return num_;
}
inline void stSynResource::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSynLevelInfo

// optional uint32 levelID = 1;
inline bool stSynLevelInfo::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynLevelInfo::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynLevelInfo::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynLevelInfo::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stSynLevelInfo::levelid() const {
  return levelid_;
}
inline void stSynLevelInfo::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional .Role.eLevelStar star = 2;
inline bool stSynLevelInfo::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynLevelInfo::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynLevelInfo::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynLevelInfo::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::Role::eLevelStar stSynLevelInfo::star() const {
  return static_cast< ::Role::eLevelStar >(star_);
}
inline void stSynLevelInfo::set_star(::Role::eLevelStar value) {
  assert(::Role::eLevelStar_IsValid(value));
  set_has_star();
  star_ = value;
}

// optional uint32 rushNum = 3;
inline bool stSynLevelInfo::has_rushnum() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynLevelInfo::set_has_rushnum() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynLevelInfo::clear_has_rushnum() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynLevelInfo::clear_rushnum() {
  rushnum_ = 0u;
  clear_has_rushnum();
}
inline ::google::protobuf::uint32 stSynLevelInfo::rushnum() const {
  return rushnum_;
}
inline void stSynLevelInfo::set_rushnum(::google::protobuf::uint32 value) {
  set_has_rushnum();
  rushnum_ = value;
}

// optional uint32 resetNum = 4;
inline bool stSynLevelInfo::has_resetnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynLevelInfo::set_has_resetnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynLevelInfo::clear_has_resetnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynLevelInfo::clear_resetnum() {
  resetnum_ = 0u;
  clear_has_resetnum();
}
inline ::google::protobuf::uint32 stSynLevelInfo::resetnum() const {
  return resetnum_;
}
inline void stSynLevelInfo::set_resetnum(::google::protobuf::uint32 value) {
  set_has_resetnum();
  resetnum_ = value;
}

// -------------------------------------------------------------------

// stSynCharpterInfo

// optional uint32 charpterID = 1;
inline bool stSynCharpterInfo::has_charpterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynCharpterInfo::set_has_charpterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynCharpterInfo::clear_has_charpterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynCharpterInfo::clear_charpterid() {
  charpterid_ = 0u;
  clear_has_charpterid();
}
inline ::google::protobuf::uint32 stSynCharpterInfo::charpterid() const {
  return charpterid_;
}
inline void stSynCharpterInfo::set_charpterid(::google::protobuf::uint32 value) {
  set_has_charpterid();
  charpterid_ = value;
}

// optional uint32 rewardStep = 2;
inline bool stSynCharpterInfo::has_rewardstep() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynCharpterInfo::set_has_rewardstep() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynCharpterInfo::clear_has_rewardstep() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynCharpterInfo::clear_rewardstep() {
  rewardstep_ = 0u;
  clear_has_rewardstep();
}
inline ::google::protobuf::uint32 stSynCharpterInfo::rewardstep() const {
  return rewardstep_;
}
inline void stSynCharpterInfo::set_rewardstep(::google::protobuf::uint32 value) {
  set_has_rewardstep();
  rewardstep_ = value;
}

// repeated .Role.stSynLevelInfo levelInfo = 3;
inline int stSynCharpterInfo::levelinfo_size() const {
  return levelinfo_.size();
}
inline void stSynCharpterInfo::clear_levelinfo() {
  levelinfo_.Clear();
}
inline const ::Role::stSynLevelInfo& stSynCharpterInfo::levelinfo(int index) const {
  return levelinfo_.Get(index);
}
inline ::Role::stSynLevelInfo* stSynCharpterInfo::mutable_levelinfo(int index) {
  return levelinfo_.Mutable(index);
}
inline ::Role::stSynLevelInfo* stSynCharpterInfo::add_levelinfo() {
  return levelinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynLevelInfo >&
stSynCharpterInfo::levelinfo() const {
  return levelinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynLevelInfo >*
stSynCharpterInfo::mutable_levelinfo() {
  return &levelinfo_;
}

// -------------------------------------------------------------------

// stSynAllLevelInfo

// repeated .Role.stSynCharpterInfo charpterInfo = 1;
inline int stSynAllLevelInfo::charpterinfo_size() const {
  return charpterinfo_.size();
}
inline void stSynAllLevelInfo::clear_charpterinfo() {
  charpterinfo_.Clear();
}
inline const ::Role::stSynCharpterInfo& stSynAllLevelInfo::charpterinfo(int index) const {
  return charpterinfo_.Get(index);
}
inline ::Role::stSynCharpterInfo* stSynAllLevelInfo::mutable_charpterinfo(int index) {
  return charpterinfo_.Mutable(index);
}
inline ::Role::stSynCharpterInfo* stSynAllLevelInfo::add_charpterinfo() {
  return charpterinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynCharpterInfo >&
stSynAllLevelInfo::charpterinfo() const {
  return charpterinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynCharpterInfo >*
stSynAllLevelInfo::mutable_charpterinfo() {
  return &charpterinfo_;
}

// -------------------------------------------------------------------

// stObtainItem

// optional uint32 itemID = 1;
inline bool stObtainItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stObtainItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stObtainItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stObtainItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stObtainItem::itemid() const {
  return itemid_;
}
inline void stObtainItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stObtainItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stObtainItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stObtainItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stObtainItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stObtainItem::num() const {
  return num_;
}
inline void stObtainItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stReqFinishLv

// optional uint32 levelID = 1;
inline bool stReqFinishLv::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqFinishLv::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqFinishLv::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqFinishLv::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqFinishLv::levelid() const {
  return levelid_;
}
inline void stReqFinishLv::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional .Role.eLevelStar star = 2;
inline bool stReqFinishLv::has_star() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqFinishLv::set_has_star() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqFinishLv::clear_has_star() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqFinishLv::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::Role::eLevelStar stReqFinishLv::star() const {
  return static_cast< ::Role::eLevelStar >(star_);
}
inline void stReqFinishLv::set_star(::Role::eLevelStar value) {
  assert(::Role::eLevelStar_IsValid(value));
  set_has_star();
  star_ = value;
}

// optional uint32 goldCoin = 3;
inline bool stReqFinishLv::has_goldcoin() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqFinishLv::set_has_goldcoin() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqFinishLv::clear_has_goldcoin() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqFinishLv::clear_goldcoin() {
  goldcoin_ = 0u;
  clear_has_goldcoin();
}
inline ::google::protobuf::uint32 stReqFinishLv::goldcoin() const {
  return goldcoin_;
}
inline void stReqFinishLv::set_goldcoin(::google::protobuf::uint32 value) {
  set_has_goldcoin();
  goldcoin_ = value;
}

// repeated .Role.stObtainItem getItem = 4;
inline int stReqFinishLv::getitem_size() const {
  return getitem_.size();
}
inline void stReqFinishLv::clear_getitem() {
  getitem_.Clear();
}
inline const ::Role::stObtainItem& stReqFinishLv::getitem(int index) const {
  return getitem_.Get(index);
}
inline ::Role::stObtainItem* stReqFinishLv::mutable_getitem(int index) {
  return getitem_.Mutable(index);
}
inline ::Role::stObtainItem* stReqFinishLv::add_getitem() {
  return getitem_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stObtainItem >&
stReqFinishLv::getitem() const {
  return getitem_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stObtainItem >*
stReqFinishLv::mutable_getitem() {
  return &getitem_;
}

// -------------------------------------------------------------------

// stFinishLvResult

// optional .Role.stFinishLvResult.eResult result = 1;
inline bool stFinishLvResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFinishLvResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFinishLvResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFinishLvResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stFinishLvResult_eResult stFinishLvResult::result() const {
  return static_cast< ::Role::stFinishLvResult_eResult >(result_);
}
inline void stFinishLvResult::set_result(::Role::stFinishLvResult_eResult value) {
  assert(::Role::stFinishLvResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqCharpterReward

// optional uint32 charpterID = 1;
inline bool stReqCharpterReward::has_charpterid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqCharpterReward::set_has_charpterid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqCharpterReward::clear_has_charpterid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqCharpterReward::clear_charpterid() {
  charpterid_ = 0u;
  clear_has_charpterid();
}
inline ::google::protobuf::uint32 stReqCharpterReward::charpterid() const {
  return charpterid_;
}
inline void stReqCharpterReward::set_charpterid(::google::protobuf::uint32 value) {
  set_has_charpterid();
  charpterid_ = value;
}

// optional uint32 step = 2;
inline bool stReqCharpterReward::has_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqCharpterReward::set_has_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqCharpterReward::clear_has_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqCharpterReward::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 stReqCharpterReward::step() const {
  return step_;
}
inline void stReqCharpterReward::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
}

// -------------------------------------------------------------------

// stCharpterRewardResult

// optional .Role.stCharpterRewardResult.eResult result = 1;
inline bool stCharpterRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCharpterRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCharpterRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCharpterRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stCharpterRewardResult_eResult stCharpterRewardResult::result() const {
  return static_cast< ::Role::stCharpterRewardResult_eResult >(result_);
}
inline void stCharpterRewardResult::set_result(::Role::stCharpterRewardResult_eResult value) {
  assert(::Role::stCharpterRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 step = 2;
inline bool stCharpterRewardResult::has_step() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stCharpterRewardResult::set_has_step() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stCharpterRewardResult::clear_has_step() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stCharpterRewardResult::clear_step() {
  step_ = 0u;
  clear_has_step();
}
inline ::google::protobuf::uint32 stCharpterRewardResult::step() const {
  return step_;
}
inline void stCharpterRewardResult::set_step(::google::protobuf::uint32 value) {
  set_has_step();
  step_ = value;
}

// -------------------------------------------------------------------

// stReqRushLevel

// optional uint32 levelID = 1;
inline bool stReqRushLevel::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRushLevel::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRushLevel::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRushLevel::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqRushLevel::levelid() const {
  return levelid_;
}
inline void stReqRushLevel::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional .Role.eRushType type = 2;
inline bool stReqRushLevel::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRushLevel::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRushLevel::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRushLevel::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Role::eRushType stReqRushLevel::type() const {
  return static_cast< ::Role::eRushType >(type_);
}
inline void stReqRushLevel::set_type(::Role::eRushType value) {
  assert(::Role::eRushType_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 num = 3;
inline bool stReqRushLevel::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqRushLevel::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqRushLevel::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqRushLevel::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stReqRushLevel::num() const {
  return num_;
}
inline void stReqRushLevel::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSynRushReward

// optional uint32 itemID = 1;
inline bool stSynRushReward::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRushReward::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRushReward::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRushReward::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSynRushReward::itemid() const {
  return itemid_;
}
inline void stSynRushReward::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stSynRushReward::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynRushReward::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynRushReward::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynRushReward::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynRushReward::num() const {
  return num_;
}
inline void stSynRushReward::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stLevelRushResult

// optional .Role.stLevelRushResult.eResult result = 1;
inline bool stLevelRushResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stLevelRushResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stLevelRushResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stLevelRushResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stLevelRushResult_eResult stLevelRushResult::result() const {
  return static_cast< ::Role::stLevelRushResult_eResult >(result_);
}
inline void stLevelRushResult::set_result(::Role::stLevelRushResult_eResult value) {
  assert(::Role::stLevelRushResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 levelID = 2;
inline bool stLevelRushResult::has_levelid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stLevelRushResult::set_has_levelid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stLevelRushResult::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stLevelRushResult::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stLevelRushResult::levelid() const {
  return levelid_;
}
inline void stLevelRushResult::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// repeated .Role.stSynRushReward items = 3;
inline int stLevelRushResult::items_size() const {
  return items_.size();
}
inline void stLevelRushResult::clear_items() {
  items_.Clear();
}
inline const ::Role::stSynRushReward& stLevelRushResult::items(int index) const {
  return items_.Get(index);
}
inline ::Role::stSynRushReward* stLevelRushResult::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Role::stSynRushReward* stLevelRushResult::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRushReward >&
stLevelRushResult::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRushReward >*
stLevelRushResult::mutable_items() {
  return &items_;
}

// optional uint32 exp = 4;
inline bool stLevelRushResult::has_exp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stLevelRushResult::set_has_exp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stLevelRushResult::clear_has_exp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stLevelRushResult::clear_exp() {
  exp_ = 0u;
  clear_has_exp();
}
inline ::google::protobuf::uint32 stLevelRushResult::exp() const {
  return exp_;
}
inline void stLevelRushResult::set_exp(::google::protobuf::uint32 value) {
  set_has_exp();
  exp_ = value;
}

// optional uint32 goldCoin = 5;
inline bool stLevelRushResult::has_goldcoin() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stLevelRushResult::set_has_goldcoin() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stLevelRushResult::clear_has_goldcoin() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stLevelRushResult::clear_goldcoin() {
  goldcoin_ = 0u;
  clear_has_goldcoin();
}
inline ::google::protobuf::uint32 stLevelRushResult::goldcoin() const {
  return goldcoin_;
}
inline void stLevelRushResult::set_goldcoin(::google::protobuf::uint32 value) {
  set_has_goldcoin();
  goldcoin_ = value;
}

// optional .Role.eRushType type = 6;
inline bool stLevelRushResult::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stLevelRushResult::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stLevelRushResult::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stLevelRushResult::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Role::eRushType stLevelRushResult::type() const {
  return static_cast< ::Role::eRushType >(type_);
}
inline void stLevelRushResult::set_type(::Role::eRushType value) {
  assert(::Role::eRushType_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stReqResetRushNum

// optional uint32 levelID = 1;
inline bool stReqResetRushNum::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqResetRushNum::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqResetRushNum::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqResetRushNum::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqResetRushNum::levelid() const {
  return levelid_;
}
inline void stReqResetRushNum::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stResetRushNumResult

// optional uint32 levelID = 1;
inline bool stResetRushNumResult::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetRushNumResult::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetRushNumResult::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetRushNumResult::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stResetRushNumResult::levelid() const {
  return levelid_;
}
inline void stResetRushNumResult::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// optional .Role.stResetRushNumResult.eResult result = 2;
inline bool stResetRushNumResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stResetRushNumResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stResetRushNumResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stResetRushNumResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stResetRushNumResult_eResult stResetRushNumResult::result() const {
  return static_cast< ::Role::stResetRushNumResult_eResult >(result_);
}
inline void stResetRushNumResult::set_result(::Role::stResetRushNumResult_eResult value) {
  assert(::Role::stResetRushNumResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRefineEquip

// optional uint32 bagType = 1;
inline bool stReqRefineEquip::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRefineEquip::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRefineEquip::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRefineEquip::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqRefineEquip::bagtype() const {
  return bagtype_;
}
inline void stReqRefineEquip::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqRefineEquip::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRefineEquip::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRefineEquip::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRefineEquip::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqRefineEquip::instanceid() const {
  return instanceid_;
}
inline void stReqRefineEquip::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stRefineEquipResult

// optional uint32 bagType = 1;
inline bool stRefineEquipResult::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefineEquipResult::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefineEquipResult::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefineEquipResult::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stRefineEquipResult::bagtype() const {
  return bagtype_;
}
inline void stRefineEquipResult::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stRefineEquipResult::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRefineEquipResult::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRefineEquipResult::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRefineEquipResult::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRefineEquipResult::instanceid() const {
  return instanceid_;
}
inline void stRefineEquipResult::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stRefineEquipResult.eResult result = 3;
inline bool stRefineEquipResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRefineEquipResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRefineEquipResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRefineEquipResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRefineEquipResult_eResult stRefineEquipResult::result() const {
  return static_cast< ::Role::stRefineEquipResult_eResult >(result_);
}
inline void stRefineEquipResult::set_result(::Role::stRefineEquipResult_eResult value) {
  assert(::Role::stRefineEquipResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynTotoalRecharge

// optional uint32 totalRecharge = 1;
inline bool stSynTotoalRecharge::has_totalrecharge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynTotoalRecharge::set_has_totalrecharge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynTotoalRecharge::clear_has_totalrecharge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynTotoalRecharge::clear_totalrecharge() {
  totalrecharge_ = 0u;
  clear_has_totalrecharge();
}
inline ::google::protobuf::uint32 stSynTotoalRecharge::totalrecharge() const {
  return totalrecharge_;
}
inline void stSynTotoalRecharge::set_totalrecharge(::google::protobuf::uint32 value) {
  set_has_totalrecharge();
  totalrecharge_ = value;
}

// optional uint32 todayRecharge = 2;
inline bool stSynTotoalRecharge::has_todayrecharge() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynTotoalRecharge::set_has_todayrecharge() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynTotoalRecharge::clear_has_todayrecharge() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynTotoalRecharge::clear_todayrecharge() {
  todayrecharge_ = 0u;
  clear_has_todayrecharge();
}
inline ::google::protobuf::uint32 stSynTotoalRecharge::todayrecharge() const {
  return todayrecharge_;
}
inline void stSynTotoalRecharge::set_todayrecharge(::google::protobuf::uint32 value) {
  set_has_todayrecharge();
  todayrecharge_ = value;
}

// -------------------------------------------------------------------

// stSynSkillInfo

// optional uint32 skillID = 1;
inline bool stSynSkillInfo::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynSkillInfo::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynSkillInfo::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynSkillInfo::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stSynSkillInfo::skillid() const {
  return skillid_;
}
inline void stSynSkillInfo::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillLv = 2;
inline bool stSynSkillInfo::has_skilllv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynSkillInfo::set_has_skilllv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynSkillInfo::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynSkillInfo::clear_skilllv() {
  skilllv_ = 0u;
  clear_has_skilllv();
}
inline ::google::protobuf::uint32 stSynSkillInfo::skilllv() const {
  return skilllv_;
}
inline void stSynSkillInfo::set_skilllv(::google::protobuf::uint32 value) {
  set_has_skilllv();
  skilllv_ = value;
}

// -------------------------------------------------------------------

// stSynUserAllSkill

// repeated .Role.stSynSkillInfo skillInfo = 1;
inline int stSynUserAllSkill::skillinfo_size() const {
  return skillinfo_.size();
}
inline void stSynUserAllSkill::clear_skillinfo() {
  skillinfo_.Clear();
}
inline const ::Role::stSynSkillInfo& stSynUserAllSkill::skillinfo(int index) const {
  return skillinfo_.Get(index);
}
inline ::Role::stSynSkillInfo* stSynUserAllSkill::mutable_skillinfo(int index) {
  return skillinfo_.Mutable(index);
}
inline ::Role::stSynSkillInfo* stSynUserAllSkill::add_skillinfo() {
  return skillinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynSkillInfo >&
stSynUserAllSkill::skillinfo() const {
  return skillinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynSkillInfo >*
stSynUserAllSkill::mutable_skillinfo() {
  return &skillinfo_;
}

// -------------------------------------------------------------------

// stAddUserSkill

// optional .Role.stSynSkillInfo data = 1;
inline bool stAddUserSkill::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAddUserSkill::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAddUserSkill::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAddUserSkill::clear_data() {
  if (data_ != NULL) data_->::Role::stSynSkillInfo::Clear();
  clear_has_data();
}
inline const ::Role::stSynSkillInfo& stAddUserSkill::data() const {
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::Role::stSynSkillInfo* stAddUserSkill::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::Role::stSynSkillInfo;
  return data_;
}
inline ::Role::stSynSkillInfo* stAddUserSkill::release_data() {
  clear_has_data();
  ::Role::stSynSkillInfo* temp = data_;
  data_ = NULL;
  return temp;
}
inline void stAddUserSkill::set_allocated_data(::Role::stSynSkillInfo* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
}

// -------------------------------------------------------------------

// stReqUserDetailInfo

// optional uint32 charID = 1;
inline bool stReqUserDetailInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUserDetailInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUserDetailInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUserDetailInfo::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqUserDetailInfo::charid() const {
  return charid_;
}
inline void stReqUserDetailInfo::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stUserDetailInfo

// optional .Role.stRoleMainData mainData = 1;
inline bool stUserDetailInfo::has_maindata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUserDetailInfo::set_has_maindata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUserDetailInfo::clear_has_maindata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUserDetailInfo::clear_maindata() {
  if (maindata_ != NULL) maindata_->::Role::stRoleMainData::Clear();
  clear_has_maindata();
}
inline const ::Role::stRoleMainData& stUserDetailInfo::maindata() const {
  return maindata_ != NULL ? *maindata_ : *default_instance_->maindata_;
}
inline ::Role::stRoleMainData* stUserDetailInfo::mutable_maindata() {
  set_has_maindata();
  if (maindata_ == NULL) maindata_ = new ::Role::stRoleMainData;
  return maindata_;
}
inline ::Role::stRoleMainData* stUserDetailInfo::release_maindata() {
  clear_has_maindata();
  ::Role::stRoleMainData* temp = maindata_;
  maindata_ = NULL;
  return temp;
}
inline void stUserDetailInfo::set_allocated_maindata(::Role::stRoleMainData* maindata) {
  delete maindata_;
  maindata_ = maindata;
  if (maindata) {
    set_has_maindata();
  } else {
    clear_has_maindata();
  }
}

// repeated .Role.stSynItemInfo itemData = 2;
inline int stUserDetailInfo::itemdata_size() const {
  return itemdata_.size();
}
inline void stUserDetailInfo::clear_itemdata() {
  itemdata_.Clear();
}
inline const ::Role::stSynItemInfo& stUserDetailInfo::itemdata(int index) const {
  return itemdata_.Get(index);
}
inline ::Role::stSynItemInfo* stUserDetailInfo::mutable_itemdata(int index) {
  return itemdata_.Mutable(index);
}
inline ::Role::stSynItemInfo* stUserDetailInfo::add_itemdata() {
  return itemdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >&
stUserDetailInfo::itemdata() const {
  return itemdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >*
stUserDetailInfo::mutable_itemdata() {
  return &itemdata_;
}

// repeated .Role.stSynHeroInfo heroData = 3;
inline int stUserDetailInfo::herodata_size() const {
  return herodata_.size();
}
inline void stUserDetailInfo::clear_herodata() {
  herodata_.Clear();
}
inline const ::Role::stSynHeroInfo& stUserDetailInfo::herodata(int index) const {
  return herodata_.Get(index);
}
inline ::Role::stSynHeroInfo* stUserDetailInfo::mutable_herodata(int index) {
  return herodata_.Mutable(index);
}
inline ::Role::stSynHeroInfo* stUserDetailInfo::add_herodata() {
  return herodata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >&
stUserDetailInfo::herodata() const {
  return herodata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >*
stUserDetailInfo::mutable_herodata() {
  return &herodata_;
}

// optional string guildName = 4;
inline bool stUserDetailInfo::has_guildname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUserDetailInfo::set_has_guildname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUserDetailInfo::clear_has_guildname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUserDetailInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& stUserDetailInfo::guildname() const {
  return *guildname_;
}
inline void stUserDetailInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stUserDetailInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void stUserDetailInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserDetailInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* stUserDetailInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserDetailInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string coupleName = 5;
inline bool stUserDetailInfo::has_couplename() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stUserDetailInfo::set_has_couplename() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stUserDetailInfo::clear_has_couplename() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stUserDetailInfo::clear_couplename() {
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    couplename_->clear();
  }
  clear_has_couplename();
}
inline const ::std::string& stUserDetailInfo::couplename() const {
  return *couplename_;
}
inline void stUserDetailInfo::set_couplename(const ::std::string& value) {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  couplename_->assign(value);
}
inline void stUserDetailInfo::set_couplename(const char* value) {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  couplename_->assign(value);
}
inline void stUserDetailInfo::set_couplename(const char* value, size_t size) {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  couplename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stUserDetailInfo::mutable_couplename() {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  return couplename_;
}
inline ::std::string* stUserDetailInfo::release_couplename() {
  clear_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = couplename_;
    couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stUserDetailInfo::set_allocated_couplename(::std::string* couplename) {
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    delete couplename_;
  }
  if (couplename) {
    set_has_couplename();
    couplename_ = couplename;
  } else {
    clear_has_couplename();
    couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 mountID = 6;
inline bool stUserDetailInfo::has_mountid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stUserDetailInfo::set_has_mountid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stUserDetailInfo::clear_has_mountid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stUserDetailInfo::clear_mountid() {
  mountid_ = 0u;
  clear_has_mountid();
}
inline ::google::protobuf::uint32 stUserDetailInfo::mountid() const {
  return mountid_;
}
inline void stUserDetailInfo::set_mountid(::google::protobuf::uint32 value) {
  set_has_mountid();
  mountid_ = value;
}

// -------------------------------------------------------------------

// stUseItem

// optional uint32 bagType = 1;
inline bool stUseItem::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUseItem::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUseItem::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUseItem::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stUseItem::bagtype() const {
  return bagtype_;
}
inline void stUseItem::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stUseItem::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUseItem::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUseItem::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUseItem::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stUseItem::instanceid() const {
  return instanceid_;
}
inline void stUseItem::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional bool batchUse = 3;
inline bool stUseItem::has_batchuse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUseItem::set_has_batchuse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUseItem::clear_has_batchuse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUseItem::clear_batchuse() {
  batchuse_ = false;
  clear_has_batchuse();
}
inline bool stUseItem::batchuse() const {
  return batchuse_;
}
inline void stUseItem::set_batchuse(bool value) {
  set_has_batchuse();
  batchuse_ = value;
}

// -------------------------------------------------------------------

// stUseItemError

// optional .Role.stUseItemError.eResult result = 1;
inline bool stUseItemError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUseItemError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUseItemError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUseItemError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stUseItemError_eResult stUseItemError::result() const {
  return static_cast< ::Role::stUseItemError_eResult >(result_);
}
inline void stUseItemError::set_result(::Role::stUseItemError_eResult value) {
  assert(::Role::stUseItemError_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 itemID = 2;
inline bool stUseItemError::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUseItemError::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUseItemError::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUseItemError::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stUseItemError::itemid() const {
  return itemid_;
}
inline void stUseItemError::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// stSynTipItem

// optional uint32 itemID = 1;
inline bool stSynTipItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynTipItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynTipItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynTipItem::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stSynTipItem::itemid() const {
  return itemid_;
}
inline void stSynTipItem::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint32 num = 2;
inline bool stSynTipItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynTipItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynTipItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynTipItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynTipItem::num() const {
  return num_;
}
inline void stSynTipItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stObtainItemTip

// repeated .Role.stSynTipItem getItems = 1;
inline int stObtainItemTip::getitems_size() const {
  return getitems_.size();
}
inline void stObtainItemTip::clear_getitems() {
  getitems_.Clear();
}
inline const ::Role::stSynTipItem& stObtainItemTip::getitems(int index) const {
  return getitems_.Get(index);
}
inline ::Role::stSynTipItem* stObtainItemTip::mutable_getitems(int index) {
  return getitems_.Mutable(index);
}
inline ::Role::stSynTipItem* stObtainItemTip::add_getitems() {
  return getitems_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynTipItem >&
stObtainItemTip::getitems() const {
  return getitems_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynTipItem >*
stObtainItemTip::mutable_getitems() {
  return &getitems_;
}

// -------------------------------------------------------------------

// stReqGetEquipSkill

// optional uint32 bagType = 1;
inline bool stReqGetEquipSkill::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGetEquipSkill::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGetEquipSkill::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGetEquipSkill::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqGetEquipSkill::bagtype() const {
  return bagtype_;
}
inline void stReqGetEquipSkill::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqGetEquipSkill::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqGetEquipSkill::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqGetEquipSkill::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqGetEquipSkill::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqGetEquipSkill::instanceid() const {
  return instanceid_;
}
inline void stReqGetEquipSkill::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stGetEquipSkillResult

// optional uint32 bagType = 1;
inline bool stGetEquipSkillResult::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGetEquipSkillResult::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGetEquipSkillResult::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGetEquipSkillResult::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stGetEquipSkillResult::bagtype() const {
  return bagtype_;
}
inline void stGetEquipSkillResult::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stGetEquipSkillResult::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGetEquipSkillResult::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGetEquipSkillResult::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGetEquipSkillResult::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stGetEquipSkillResult::instanceid() const {
  return instanceid_;
}
inline void stGetEquipSkillResult::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stGetEquipSkillResult.eResult result = 3;
inline bool stGetEquipSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGetEquipSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGetEquipSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGetEquipSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stGetEquipSkillResult_eResult stGetEquipSkillResult::result() const {
  return static_cast< ::Role::stGetEquipSkillResult_eResult >(result_);
}
inline void stGetEquipSkillResult::set_result(::Role::stGetEquipSkillResult_eResult value) {
  assert(::Role::stGetEquipSkillResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 skillID = 4;
inline bool stGetEquipSkillResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stGetEquipSkillResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stGetEquipSkillResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stGetEquipSkillResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stGetEquipSkillResult::skillid() const {
  return skillid_;
}
inline void stGetEquipSkillResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// stReqRefineEquipSkill

// optional uint32 bagType = 1;
inline bool stReqRefineEquipSkill::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRefineEquipSkill::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRefineEquipSkill::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRefineEquipSkill::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqRefineEquipSkill::bagtype() const {
  return bagtype_;
}
inline void stReqRefineEquipSkill::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqRefineEquipSkill::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRefineEquipSkill::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRefineEquipSkill::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRefineEquipSkill::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqRefineEquipSkill::instanceid() const {
  return instanceid_;
}
inline void stReqRefineEquipSkill::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stRefineEquipSkillResult

// optional uint32 bagType = 1;
inline bool stRefineEquipSkillResult::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefineEquipSkillResult::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefineEquipSkillResult::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefineEquipSkillResult::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stRefineEquipSkillResult::bagtype() const {
  return bagtype_;
}
inline void stRefineEquipSkillResult::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stRefineEquipSkillResult::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRefineEquipSkillResult::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRefineEquipSkillResult::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRefineEquipSkillResult::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRefineEquipSkillResult::instanceid() const {
  return instanceid_;
}
inline void stRefineEquipSkillResult::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stRefineEquipSkillResult.eResult result = 3;
inline bool stRefineEquipSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRefineEquipSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRefineEquipSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRefineEquipSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRefineEquipSkillResult_eResult stRefineEquipSkillResult::result() const {
  return static_cast< ::Role::stRefineEquipSkillResult_eResult >(result_);
}
inline void stRefineEquipSkillResult::set_result(::Role::stRefineEquipSkillResult_eResult value) {
  assert(::Role::stRefineEquipSkillResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stMoveEquipSkill2Slot

// optional uint32 bagType = 1;
inline bool stMoveEquipSkill2Slot::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMoveEquipSkill2Slot::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMoveEquipSkill2Slot::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMoveEquipSkill2Slot::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stMoveEquipSkill2Slot::bagtype() const {
  return bagtype_;
}
inline void stMoveEquipSkill2Slot::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stMoveEquipSkill2Slot::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMoveEquipSkill2Slot::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMoveEquipSkill2Slot::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMoveEquipSkill2Slot::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stMoveEquipSkill2Slot::instanceid() const {
  return instanceid_;
}
inline void stMoveEquipSkill2Slot::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 index = 3;
inline bool stMoveEquipSkill2Slot::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMoveEquipSkill2Slot::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMoveEquipSkill2Slot::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMoveEquipSkill2Slot::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stMoveEquipSkill2Slot::index() const {
  return index_;
}
inline void stMoveEquipSkill2Slot::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// stMoveEquipSkillResult

// optional uint32 bagType = 1;
inline bool stMoveEquipSkillResult::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMoveEquipSkillResult::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMoveEquipSkillResult::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMoveEquipSkillResult::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stMoveEquipSkillResult::bagtype() const {
  return bagtype_;
}
inline void stMoveEquipSkillResult::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stMoveEquipSkillResult::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMoveEquipSkillResult::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMoveEquipSkillResult::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMoveEquipSkillResult::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stMoveEquipSkillResult::instanceid() const {
  return instanceid_;
}
inline void stMoveEquipSkillResult::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 index = 3;
inline bool stMoveEquipSkillResult::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMoveEquipSkillResult::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMoveEquipSkillResult::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMoveEquipSkillResult::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stMoveEquipSkillResult::index() const {
  return index_;
}
inline void stMoveEquipSkillResult::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 skillID = 4;
inline bool stMoveEquipSkillResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stMoveEquipSkillResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stMoveEquipSkillResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stMoveEquipSkillResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stMoveEquipSkillResult::skillid() const {
  return skillid_;
}
inline void stMoveEquipSkillResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional .Role.stMoveEquipSkillResult.eResult result = 5;
inline bool stMoveEquipSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stMoveEquipSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stMoveEquipSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stMoveEquipSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stMoveEquipSkillResult_eResult stMoveEquipSkillResult::result() const {
  return static_cast< ::Role::stMoveEquipSkillResult_eResult >(result_);
}
inline void stMoveEquipSkillResult::set_result(::Role::stMoveEquipSkillResult_eResult value) {
  assert(::Role::stMoveEquipSkillResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqUpgradeEquipSkill

// optional uint32 bagType = 1;
inline bool stReqUpgradeEquipSkill::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUpgradeEquipSkill::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUpgradeEquipSkill::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUpgradeEquipSkill::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqUpgradeEquipSkill::bagtype() const {
  return bagtype_;
}
inline void stReqUpgradeEquipSkill::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqUpgradeEquipSkill::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqUpgradeEquipSkill::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqUpgradeEquipSkill::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqUpgradeEquipSkill::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqUpgradeEquipSkill::instanceid() const {
  return instanceid_;
}
inline void stReqUpgradeEquipSkill::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 index = 3;
inline bool stReqUpgradeEquipSkill::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqUpgradeEquipSkill::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqUpgradeEquipSkill::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqUpgradeEquipSkill::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stReqUpgradeEquipSkill::index() const {
  return index_;
}
inline void stReqUpgradeEquipSkill::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// stUpgradeEquipSkillResult

// optional uint32 bagType = 1;
inline bool stUpgradeEquipSkillResult::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUpgradeEquipSkillResult::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUpgradeEquipSkillResult::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUpgradeEquipSkillResult::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stUpgradeEquipSkillResult::bagtype() const {
  return bagtype_;
}
inline void stUpgradeEquipSkillResult::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stUpgradeEquipSkillResult::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUpgradeEquipSkillResult::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUpgradeEquipSkillResult::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUpgradeEquipSkillResult::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stUpgradeEquipSkillResult::instanceid() const {
  return instanceid_;
}
inline void stUpgradeEquipSkillResult::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 index = 3;
inline bool stUpgradeEquipSkillResult::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUpgradeEquipSkillResult::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUpgradeEquipSkillResult::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUpgradeEquipSkillResult::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stUpgradeEquipSkillResult::index() const {
  return index_;
}
inline void stUpgradeEquipSkillResult::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 lv = 4;
inline bool stUpgradeEquipSkillResult::has_lv() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stUpgradeEquipSkillResult::set_has_lv() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stUpgradeEquipSkillResult::clear_has_lv() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stUpgradeEquipSkillResult::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stUpgradeEquipSkillResult::lv() const {
  return lv_;
}
inline void stUpgradeEquipSkillResult::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// optional .Role.stUpgradeEquipSkillResult.eResult result = 5;
inline bool stUpgradeEquipSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stUpgradeEquipSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stUpgradeEquipSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stUpgradeEquipSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stUpgradeEquipSkillResult_eResult stUpgradeEquipSkillResult::result() const {
  return static_cast< ::Role::stUpgradeEquipSkillResult_eResult >(result_);
}
inline void stUpgradeEquipSkillResult::set_result(::Role::stUpgradeEquipSkillResult_eResult value) {
  assert(::Role::stUpgradeEquipSkillResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSendPKUserData

// optional .Role.stRoleMainData mainData = 1;
inline bool stSendPKUserData::has_maindata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendPKUserData::set_has_maindata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendPKUserData::clear_has_maindata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendPKUserData::clear_maindata() {
  if (maindata_ != NULL) maindata_->::Role::stRoleMainData::Clear();
  clear_has_maindata();
}
inline const ::Role::stRoleMainData& stSendPKUserData::maindata() const {
  return maindata_ != NULL ? *maindata_ : *default_instance_->maindata_;
}
inline ::Role::stRoleMainData* stSendPKUserData::mutable_maindata() {
  set_has_maindata();
  if (maindata_ == NULL) maindata_ = new ::Role::stRoleMainData;
  return maindata_;
}
inline ::Role::stRoleMainData* stSendPKUserData::release_maindata() {
  clear_has_maindata();
  ::Role::stRoleMainData* temp = maindata_;
  maindata_ = NULL;
  return temp;
}
inline void stSendPKUserData::set_allocated_maindata(::Role::stRoleMainData* maindata) {
  delete maindata_;
  maindata_ = maindata;
  if (maindata) {
    set_has_maindata();
  } else {
    clear_has_maindata();
  }
}

// repeated .Role.stSynItemInfo itemData = 2;
inline int stSendPKUserData::itemdata_size() const {
  return itemdata_.size();
}
inline void stSendPKUserData::clear_itemdata() {
  itemdata_.Clear();
}
inline const ::Role::stSynItemInfo& stSendPKUserData::itemdata(int index) const {
  return itemdata_.Get(index);
}
inline ::Role::stSynItemInfo* stSendPKUserData::mutable_itemdata(int index) {
  return itemdata_.Mutable(index);
}
inline ::Role::stSynItemInfo* stSendPKUserData::add_itemdata() {
  return itemdata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >&
stSendPKUserData::itemdata() const {
  return itemdata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynItemInfo >*
stSendPKUserData::mutable_itemdata() {
  return &itemdata_;
}

// repeated .Role.stSynHeroInfo heroData = 3;
inline int stSendPKUserData::herodata_size() const {
  return herodata_.size();
}
inline void stSendPKUserData::clear_herodata() {
  herodata_.Clear();
}
inline const ::Role::stSynHeroInfo& stSendPKUserData::herodata(int index) const {
  return herodata_.Get(index);
}
inline ::Role::stSynHeroInfo* stSendPKUserData::mutable_herodata(int index) {
  return herodata_.Mutable(index);
}
inline ::Role::stSynHeroInfo* stSendPKUserData::add_herodata() {
  return herodata_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >&
stSendPKUserData::herodata() const {
  return herodata_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynHeroInfo >*
stSendPKUserData::mutable_herodata() {
  return &herodata_;
}

// optional .Role.stSendPKUserData.ePKType pkType = 4;
inline bool stSendPKUserData::has_pktype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSendPKUserData::set_has_pktype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSendPKUserData::clear_has_pktype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSendPKUserData::clear_pktype() {
  pktype_ = 1;
  clear_has_pktype();
}
inline ::Role::stSendPKUserData_ePKType stSendPKUserData::pktype() const {
  return static_cast< ::Role::stSendPKUserData_ePKType >(pktype_);
}
inline void stSendPKUserData::set_pktype(::Role::stSendPKUserData_ePKType value) {
  assert(::Role::stSendPKUserData_ePKType_IsValid(value));
  set_has_pktype();
  pktype_ = value;
}

// optional uint32 challengeRank = 5;
inline bool stSendPKUserData::has_challengerank() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSendPKUserData::set_has_challengerank() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSendPKUserData::clear_has_challengerank() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSendPKUserData::clear_challengerank() {
  challengerank_ = 0u;
  clear_has_challengerank();
}
inline ::google::protobuf::uint32 stSendPKUserData::challengerank() const {
  return challengerank_;
}
inline void stSendPKUserData::set_challengerank(::google::protobuf::uint32 value) {
  set_has_challengerank();
  challengerank_ = value;
}

// -------------------------------------------------------------------

// stReqRaiseUserSkillLv

// optional uint32 skillID = 1;
inline bool stReqRaiseUserSkillLv::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRaiseUserSkillLv::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRaiseUserSkillLv::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRaiseUserSkillLv::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stReqRaiseUserSkillLv::skillid() const {
  return skillid_;
}
inline void stReqRaiseUserSkillLv::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// stRaiseUserSkillLvResult

// optional .Role.stRaiseUserSkillLvResult.eResult result = 1;
inline bool stRaiseUserSkillLvResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRaiseUserSkillLvResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRaiseUserSkillLvResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRaiseUserSkillLvResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRaiseUserSkillLvResult_eResult stRaiseUserSkillLvResult::result() const {
  return static_cast< ::Role::stRaiseUserSkillLvResult_eResult >(result_);
}
inline void stRaiseUserSkillLvResult::set_result(::Role::stRaiseUserSkillLvResult_eResult value) {
  assert(::Role::stRaiseUserSkillLvResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 skillID = 2;
inline bool stRaiseUserSkillLvResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRaiseUserSkillLvResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRaiseUserSkillLvResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRaiseUserSkillLvResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stRaiseUserSkillLvResult::skillid() const {
  return skillid_;
}
inline void stRaiseUserSkillLvResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillLv = 3;
inline bool stRaiseUserSkillLvResult::has_skilllv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRaiseUserSkillLvResult::set_has_skilllv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRaiseUserSkillLvResult::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRaiseUserSkillLvResult::clear_skilllv() {
  skilllv_ = 0u;
  clear_has_skilllv();
}
inline ::google::protobuf::uint32 stRaiseUserSkillLvResult::skilllv() const {
  return skilllv_;
}
inline void stRaiseUserSkillLvResult::set_skilllv(::google::protobuf::uint32 value) {
  set_has_skilllv();
  skilllv_ = value;
}

// -------------------------------------------------------------------

// stNotifyNewBieGuideStep

// optional uint32 stepID = 1;
inline bool stNotifyNewBieGuideStep::has_stepid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyNewBieGuideStep::set_has_stepid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyNewBieGuideStep::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyNewBieGuideStep::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stNotifyNewBieGuideStep::stepid() const {
  return stepid_;
}
inline void stNotifyNewBieGuideStep::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// optional uint32 subStepID = 2;
inline bool stNotifyNewBieGuideStep::has_substepid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyNewBieGuideStep::set_has_substepid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyNewBieGuideStep::clear_has_substepid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyNewBieGuideStep::clear_substepid() {
  substepid_ = 0u;
  clear_has_substepid();
}
inline ::google::protobuf::uint32 stNotifyNewBieGuideStep::substepid() const {
  return substepid_;
}
inline void stNotifyNewBieGuideStep::set_substepid(::google::protobuf::uint32 value) {
  set_has_substepid();
  substepid_ = value;
}

// -------------------------------------------------------------------

// stSaveNewBieGuideStep

// optional uint32 stepID = 1;
inline bool stSaveNewBieGuideStep::has_stepid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSaveNewBieGuideStep::set_has_stepid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSaveNewBieGuideStep::clear_has_stepid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSaveNewBieGuideStep::clear_stepid() {
  stepid_ = 0u;
  clear_has_stepid();
}
inline ::google::protobuf::uint32 stSaveNewBieGuideStep::stepid() const {
  return stepid_;
}
inline void stSaveNewBieGuideStep::set_stepid(::google::protobuf::uint32 value) {
  set_has_stepid();
  stepid_ = value;
}

// -------------------------------------------------------------------

// stOpenLevelBox

// optional uint32 charID = 1;
inline bool stOpenLevelBox::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOpenLevelBox::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOpenLevelBox::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOpenLevelBox::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stOpenLevelBox::charid() const {
  return charid_;
}
inline void stOpenLevelBox::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stChangeRole

// optional uint32 charID = 1;
inline bool stChangeRole::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChangeRole::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChangeRole::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChangeRole::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stChangeRole::charid() const {
  return charid_;
}
inline void stChangeRole::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGotoSelectRole

// optional uint32 curCharID = 1;
inline bool stGotoSelectRole::has_curcharid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGotoSelectRole::set_has_curcharid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGotoSelectRole::clear_has_curcharid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGotoSelectRole::clear_curcharid() {
  curcharid_ = 0u;
  clear_has_curcharid();
}
inline ::google::protobuf::uint32 stGotoSelectRole::curcharid() const {
  return curcharid_;
}
inline void stGotoSelectRole::set_curcharid(::google::protobuf::uint32 value) {
  set_has_curcharid();
  curcharid_ = value;
}

// -------------------------------------------------------------------

// stSynRMPShopItem

// optional uint32 id = 1;
inline bool stSynRMPShopItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRMPShopItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRMPShopItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRMPShopItem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSynRMPShopItem::id() const {
  return id_;
}
inline void stSynRMPShopItem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional bool hasBuy = 2;
inline bool stSynRMPShopItem::has_hasbuy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynRMPShopItem::set_has_hasbuy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynRMPShopItem::clear_has_hasbuy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynRMPShopItem::clear_hasbuy() {
  hasbuy_ = false;
  clear_has_hasbuy();
}
inline bool stSynRMPShopItem::hasbuy() const {
  return hasbuy_;
}
inline void stSynRMPShopItem::set_hasbuy(bool value) {
  set_has_hasbuy();
  hasbuy_ = value;
}

// optional uint32 remainTime = 3;
inline bool stSynRMPShopItem::has_remaintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynRMPShopItem::set_has_remaintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynRMPShopItem::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynRMPShopItem::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stSynRMPShopItem::remaintime() const {
  return remaintime_;
}
inline void stSynRMPShopItem::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// optional uint32 buyCount = 4;
inline bool stSynRMPShopItem::has_buycount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynRMPShopItem::set_has_buycount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynRMPShopItem::clear_has_buycount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynRMPShopItem::clear_buycount() {
  buycount_ = 0u;
  clear_has_buycount();
}
inline ::google::protobuf::uint32 stSynRMPShopItem::buycount() const {
  return buycount_;
}
inline void stSynRMPShopItem::set_buycount(::google::protobuf::uint32 value) {
  set_has_buycount();
  buycount_ = value;
}

// -------------------------------------------------------------------

// stSynRMBShopInfo

// repeated .Role.stSynRMPShopItem items = 1;
inline int stSynRMBShopInfo::items_size() const {
  return items_.size();
}
inline void stSynRMBShopInfo::clear_items() {
  items_.Clear();
}
inline const ::Role::stSynRMPShopItem& stSynRMBShopInfo::items(int index) const {
  return items_.Get(index);
}
inline ::Role::stSynRMPShopItem* stSynRMBShopInfo::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Role::stSynRMPShopItem* stSynRMBShopInfo::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem >&
stSynRMBShopInfo::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem >*
stSynRMBShopInfo::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stSynOne2OnePVPItem

// optional string name = 1;
inline bool stSynOne2OnePVPItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynOne2OnePVPItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynOne2OnePVPItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynOne2OnePVPItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stSynOne2OnePVPItem::name() const {
  return *name_;
}
inline void stSynOne2OnePVPItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynOne2OnePVPItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stSynOne2OnePVPItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynOne2OnePVPItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stSynOne2OnePVPItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynOne2OnePVPItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 2;
inline bool stSynOne2OnePVPItem::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynOne2OnePVPItem::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynOne2OnePVPItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynOne2OnePVPItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPItem::level() const {
  return level_;
}
inline void stSynOne2OnePVPItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 3;
inline bool stSynOne2OnePVPItem::has_battlepower() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynOne2OnePVPItem::set_has_battlepower() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynOne2OnePVPItem::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynOne2OnePVPItem::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPItem::battlepower() const {
  return battlepower_;
}
inline void stSynOne2OnePVPItem::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 score = 4;
inline bool stSynOne2OnePVPItem::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynOne2OnePVPItem::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynOne2OnePVPItem::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynOne2OnePVPItem::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPItem::score() const {
  return score_;
}
inline void stSynOne2OnePVPItem::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// optional uint32 charid = 5;
inline bool stSynOne2OnePVPItem::has_charid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynOne2OnePVPItem::set_has_charid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynOne2OnePVPItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynOne2OnePVPItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynOne2OnePVPItem::charid() const {
  return charid_;
}
inline void stSynOne2OnePVPItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOne2OnePVPResult

// optional .Role.stSynOne2OnePVPItem winer = 1;
inline bool stOne2OnePVPResult::has_winer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOne2OnePVPResult::set_has_winer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOne2OnePVPResult::clear_has_winer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOne2OnePVPResult::clear_winer() {
  if (winer_ != NULL) winer_->::Role::stSynOne2OnePVPItem::Clear();
  clear_has_winer();
}
inline const ::Role::stSynOne2OnePVPItem& stOne2OnePVPResult::winer() const {
  return winer_ != NULL ? *winer_ : *default_instance_->winer_;
}
inline ::Role::stSynOne2OnePVPItem* stOne2OnePVPResult::mutable_winer() {
  set_has_winer();
  if (winer_ == NULL) winer_ = new ::Role::stSynOne2OnePVPItem;
  return winer_;
}
inline ::Role::stSynOne2OnePVPItem* stOne2OnePVPResult::release_winer() {
  clear_has_winer();
  ::Role::stSynOne2OnePVPItem* temp = winer_;
  winer_ = NULL;
  return temp;
}
inline void stOne2OnePVPResult::set_allocated_winer(::Role::stSynOne2OnePVPItem* winer) {
  delete winer_;
  winer_ = winer;
  if (winer) {
    set_has_winer();
  } else {
    clear_has_winer();
  }
}

// optional .Role.stSynOne2OnePVPItem loser = 2;
inline bool stOne2OnePVPResult::has_loser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOne2OnePVPResult::set_has_loser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOne2OnePVPResult::clear_has_loser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOne2OnePVPResult::clear_loser() {
  if (loser_ != NULL) loser_->::Role::stSynOne2OnePVPItem::Clear();
  clear_has_loser();
}
inline const ::Role::stSynOne2OnePVPItem& stOne2OnePVPResult::loser() const {
  return loser_ != NULL ? *loser_ : *default_instance_->loser_;
}
inline ::Role::stSynOne2OnePVPItem* stOne2OnePVPResult::mutable_loser() {
  set_has_loser();
  if (loser_ == NULL) loser_ = new ::Role::stSynOne2OnePVPItem;
  return loser_;
}
inline ::Role::stSynOne2OnePVPItem* stOne2OnePVPResult::release_loser() {
  clear_has_loser();
  ::Role::stSynOne2OnePVPItem* temp = loser_;
  loser_ = NULL;
  return temp;
}
inline void stOne2OnePVPResult::set_allocated_loser(::Role::stSynOne2OnePVPItem* loser) {
  delete loser_;
  loser_ = loser;
  if (loser) {
    set_has_loser();
  } else {
    clear_has_loser();
  }
}

// optional uint32 addScore = 3;
inline bool stOne2OnePVPResult::has_addscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stOne2OnePVPResult::set_has_addscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stOne2OnePVPResult::clear_has_addscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stOne2OnePVPResult::clear_addscore() {
  addscore_ = 0u;
  clear_has_addscore();
}
inline ::google::protobuf::uint32 stOne2OnePVPResult::addscore() const {
  return addscore_;
}
inline void stOne2OnePVPResult::set_addscore(::google::protobuf::uint32 value) {
  set_has_addscore();
  addscore_ = value;
}

// optional uint32 delScore = 4;
inline bool stOne2OnePVPResult::has_delscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stOne2OnePVPResult::set_has_delscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stOne2OnePVPResult::clear_has_delscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stOne2OnePVPResult::clear_delscore() {
  delscore_ = 0u;
  clear_has_delscore();
}
inline ::google::protobuf::uint32 stOne2OnePVPResult::delscore() const {
  return delscore_;
}
inline void stOne2OnePVPResult::set_delscore(::google::protobuf::uint32 value) {
  set_has_delscore();
  delscore_ = value;
}

// -------------------------------------------------------------------

// stPrivateChatNotUser

// optional string destName = 1;
inline bool stPrivateChatNotUser::has_destname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stPrivateChatNotUser::set_has_destname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stPrivateChatNotUser::clear_has_destname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stPrivateChatNotUser::clear_destname() {
  if (destname_ != &::google::protobuf::internal::kEmptyString) {
    destname_->clear();
  }
  clear_has_destname();
}
inline const ::std::string& stPrivateChatNotUser::destname() const {
  return *destname_;
}
inline void stPrivateChatNotUser::set_destname(const ::std::string& value) {
  set_has_destname();
  if (destname_ == &::google::protobuf::internal::kEmptyString) {
    destname_ = new ::std::string;
  }
  destname_->assign(value);
}
inline void stPrivateChatNotUser::set_destname(const char* value) {
  set_has_destname();
  if (destname_ == &::google::protobuf::internal::kEmptyString) {
    destname_ = new ::std::string;
  }
  destname_->assign(value);
}
inline void stPrivateChatNotUser::set_destname(const char* value, size_t size) {
  set_has_destname();
  if (destname_ == &::google::protobuf::internal::kEmptyString) {
    destname_ = new ::std::string;
  }
  destname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stPrivateChatNotUser::mutable_destname() {
  set_has_destname();
  if (destname_ == &::google::protobuf::internal::kEmptyString) {
    destname_ = new ::std::string;
  }
  return destname_;
}
inline ::std::string* stPrivateChatNotUser::release_destname() {
  clear_has_destname();
  if (destname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = destname_;
    destname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stPrivateChatNotUser::set_allocated_destname(::std::string* destname) {
  if (destname_ != &::google::protobuf::internal::kEmptyString) {
    delete destname_;
  }
  if (destname) {
    set_has_destname();
    destname_ = destname;
  } else {
    clear_has_destname();
    destname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqRecoverRemainTime

// optional uint32 charID = 1;
inline bool stReqRecoverRemainTime::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRecoverRemainTime::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRecoverRemainTime::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRecoverRemainTime::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRecoverRemainTime::charid() const {
  return charid_;
}
inline void stReqRecoverRemainTime::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSPAndLilianRecoverRemainTime

// optional uint32 spRemainTime = 1;
inline bool stSPAndLilianRecoverRemainTime::has_spremaintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSPAndLilianRecoverRemainTime::set_has_spremaintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSPAndLilianRecoverRemainTime::clear_has_spremaintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSPAndLilianRecoverRemainTime::clear_spremaintime() {
  spremaintime_ = 0u;
  clear_has_spremaintime();
}
inline ::google::protobuf::uint32 stSPAndLilianRecoverRemainTime::spremaintime() const {
  return spremaintime_;
}
inline void stSPAndLilianRecoverRemainTime::set_spremaintime(::google::protobuf::uint32 value) {
  set_has_spremaintime();
  spremaintime_ = value;
}

// optional uint32 lilianRemainTime = 2;
inline bool stSPAndLilianRecoverRemainTime::has_lilianremaintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSPAndLilianRecoverRemainTime::set_has_lilianremaintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSPAndLilianRecoverRemainTime::clear_has_lilianremaintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSPAndLilianRecoverRemainTime::clear_lilianremaintime() {
  lilianremaintime_ = 0u;
  clear_has_lilianremaintime();
}
inline ::google::protobuf::uint32 stSPAndLilianRecoverRemainTime::lilianremaintime() const {
  return lilianremaintime_;
}
inline void stSPAndLilianRecoverRemainTime::set_lilianremaintime(::google::protobuf::uint32 value) {
  set_has_lilianremaintime();
  lilianremaintime_ = value;
}

// optional uint32 trainSpRemainTime = 3;
inline bool stSPAndLilianRecoverRemainTime::has_trainspremaintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSPAndLilianRecoverRemainTime::set_has_trainspremaintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSPAndLilianRecoverRemainTime::clear_has_trainspremaintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSPAndLilianRecoverRemainTime::clear_trainspremaintime() {
  trainspremaintime_ = 0u;
  clear_has_trainspremaintime();
}
inline ::google::protobuf::uint32 stSPAndLilianRecoverRemainTime::trainspremaintime() const {
  return trainspremaintime_;
}
inline void stSPAndLilianRecoverRemainTime::set_trainspremaintime(::google::protobuf::uint32 value) {
  set_has_trainspremaintime();
  trainspremaintime_ = value;
}

// -------------------------------------------------------------------

// stSwapHeroBattlePos

// optional uint32 srcHeroID = 1;
inline bool stSwapHeroBattlePos::has_srcheroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSwapHeroBattlePos::set_has_srcheroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSwapHeroBattlePos::clear_has_srcheroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSwapHeroBattlePos::clear_srcheroid() {
  srcheroid_ = 0u;
  clear_has_srcheroid();
}
inline ::google::protobuf::uint32 stSwapHeroBattlePos::srcheroid() const {
  return srcheroid_;
}
inline void stSwapHeroBattlePos::set_srcheroid(::google::protobuf::uint32 value) {
  set_has_srcheroid();
  srcheroid_ = value;
}

// optional uint32 srcPos = 2;
inline bool stSwapHeroBattlePos::has_srcpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSwapHeroBattlePos::set_has_srcpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSwapHeroBattlePos::clear_has_srcpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSwapHeroBattlePos::clear_srcpos() {
  srcpos_ = 0u;
  clear_has_srcpos();
}
inline ::google::protobuf::uint32 stSwapHeroBattlePos::srcpos() const {
  return srcpos_;
}
inline void stSwapHeroBattlePos::set_srcpos(::google::protobuf::uint32 value) {
  set_has_srcpos();
  srcpos_ = value;
}

// optional uint32 destHeroID = 3;
inline bool stSwapHeroBattlePos::has_destheroid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSwapHeroBattlePos::set_has_destheroid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSwapHeroBattlePos::clear_has_destheroid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSwapHeroBattlePos::clear_destheroid() {
  destheroid_ = 0u;
  clear_has_destheroid();
}
inline ::google::protobuf::uint32 stSwapHeroBattlePos::destheroid() const {
  return destheroid_;
}
inline void stSwapHeroBattlePos::set_destheroid(::google::protobuf::uint32 value) {
  set_has_destheroid();
  destheroid_ = value;
}

// optional uint32 destPos = 4;
inline bool stSwapHeroBattlePos::has_destpos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSwapHeroBattlePos::set_has_destpos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSwapHeroBattlePos::clear_has_destpos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSwapHeroBattlePos::clear_destpos() {
  destpos_ = 0u;
  clear_has_destpos();
}
inline ::google::protobuf::uint32 stSwapHeroBattlePos::destpos() const {
  return destpos_;
}
inline void stSwapHeroBattlePos::set_destpos(::google::protobuf::uint32 value) {
  set_has_destpos();
  destpos_ = value;
}

// -------------------------------------------------------------------

// stSwapHeroBattlePosError

// optional .Role.stSwapHeroBattlePosError.eResult result = 1;
inline bool stSwapHeroBattlePosError::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSwapHeroBattlePosError::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSwapHeroBattlePosError::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSwapHeroBattlePosError::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stSwapHeroBattlePosError_eResult stSwapHeroBattlePosError::result() const {
  return static_cast< ::Role::stSwapHeroBattlePosError_eResult >(result_);
}
inline void stSwapHeroBattlePosError::set_result(::Role::stSwapHeroBattlePosError_eResult value) {
  assert(::Role::stSwapHeroBattlePosError_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynSystemSetting

// optional uint64 systemSetting = 1;
inline bool stSynSystemSetting::has_systemsetting() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynSystemSetting::set_has_systemsetting() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynSystemSetting::clear_has_systemsetting() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynSystemSetting::clear_systemsetting() {
  systemsetting_ = GOOGLE_ULONGLONG(0);
  clear_has_systemsetting();
}
inline ::google::protobuf::uint64 stSynSystemSetting::systemsetting() const {
  return systemsetting_;
}
inline void stSynSystemSetting::set_systemsetting(::google::protobuf::uint64 value) {
  set_has_systemsetting();
  systemsetting_ = value;
}

// -------------------------------------------------------------------

// stReqSaveSystemSetting

// optional uint32 charID = 1;
inline bool stReqSaveSystemSetting::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqSaveSystemSetting::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqSaveSystemSetting::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqSaveSystemSetting::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqSaveSystemSetting::charid() const {
  return charid_;
}
inline void stReqSaveSystemSetting::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// optional uint64 systemSetting = 2;
inline bool stReqSaveSystemSetting::has_systemsetting() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqSaveSystemSetting::set_has_systemsetting() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqSaveSystemSetting::clear_has_systemsetting() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqSaveSystemSetting::clear_systemsetting() {
  systemsetting_ = GOOGLE_ULONGLONG(0);
  clear_has_systemsetting();
}
inline ::google::protobuf::uint64 stReqSaveSystemSetting::systemsetting() const {
  return systemsetting_;
}
inline void stReqSaveSystemSetting::set_systemsetting(::google::protobuf::uint64 value) {
  set_has_systemsetting();
  systemsetting_ = value;
}

// -------------------------------------------------------------------

// stUnlockRareSkill

// optional uint32 heroID = 1;
inline bool stUnlockRareSkill::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUnlockRareSkill::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUnlockRareSkill::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUnlockRareSkill::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stUnlockRareSkill::heroid() const {
  return heroid_;
}
inline void stUnlockRareSkill::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stUnlockRareSkillResult

// optional uint32 heroID = 1;
inline bool stUnlockRareSkillResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUnlockRareSkillResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUnlockRareSkillResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUnlockRareSkillResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stUnlockRareSkillResult::heroid() const {
  return heroid_;
}
inline void stUnlockRareSkillResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 skillID = 2;
inline bool stUnlockRareSkillResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUnlockRareSkillResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUnlockRareSkillResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUnlockRareSkillResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stUnlockRareSkillResult::skillid() const {
  return skillid_;
}
inline void stUnlockRareSkillResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional .Role.stUnlockRareSkillResult.eResult result = 3;
inline bool stUnlockRareSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUnlockRareSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUnlockRareSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUnlockRareSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stUnlockRareSkillResult_eResult stUnlockRareSkillResult::result() const {
  return static_cast< ::Role::stUnlockRareSkillResult_eResult >(result_);
}
inline void stUnlockRareSkillResult::set_result(::Role::stUnlockRareSkillResult_eResult value) {
  assert(::Role::stUnlockRareSkillResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stUpgradeRareSkill

// optional uint32 heroID = 1;
inline bool stUpgradeRareSkill::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUpgradeRareSkill::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUpgradeRareSkill::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUpgradeRareSkill::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stUpgradeRareSkill::heroid() const {
  return heroid_;
}
inline void stUpgradeRareSkill::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 skillID = 2;
inline bool stUpgradeRareSkill::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUpgradeRareSkill::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUpgradeRareSkill::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUpgradeRareSkill::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stUpgradeRareSkill::skillid() const {
  return skillid_;
}
inline void stUpgradeRareSkill::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// stUpgradeRareSkillResult

// optional uint32 heroID = 1;
inline bool stUpgradeRareSkillResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUpgradeRareSkillResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUpgradeRareSkillResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUpgradeRareSkillResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stUpgradeRareSkillResult::heroid() const {
  return heroid_;
}
inline void stUpgradeRareSkillResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 skillID = 2;
inline bool stUpgradeRareSkillResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stUpgradeRareSkillResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stUpgradeRareSkillResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stUpgradeRareSkillResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stUpgradeRareSkillResult::skillid() const {
  return skillid_;
}
inline void stUpgradeRareSkillResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional .Role.stUpgradeRareSkillResult.eResult result = 3;
inline bool stUpgradeRareSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stUpgradeRareSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stUpgradeRareSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stUpgradeRareSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stUpgradeRareSkillResult_eResult stUpgradeRareSkillResult::result() const {
  return static_cast< ::Role::stUpgradeRareSkillResult_eResult >(result_);
}
inline void stUpgradeRareSkillResult::set_result(::Role::stUpgradeRareSkillResult_eResult value) {
  assert(::Role::stUpgradeRareSkillResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqGiftBag

// optional string code = 1;
inline bool stReqGiftBag::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGiftBag::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGiftBag::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGiftBag::clear_code() {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    code_->clear();
  }
  clear_has_code();
}
inline const ::std::string& stReqGiftBag::code() const {
  return *code_;
}
inline void stReqGiftBag::set_code(const ::std::string& value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void stReqGiftBag::set_code(const char* value) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(value);
}
inline void stReqGiftBag::set_code(const char* value, size_t size) {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  code_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqGiftBag::mutable_code() {
  set_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    code_ = new ::std::string;
  }
  return code_;
}
inline ::std::string* stReqGiftBag::release_code() {
  clear_has_code();
  if (code_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = code_;
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqGiftBag::set_allocated_code(::std::string* code) {
  if (code_ != &::google::protobuf::internal::kEmptyString) {
    delete code_;
  }
  if (code) {
    set_has_code();
    code_ = code;
  } else {
    clear_has_code();
    code_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stGotGiftBagResult

// optional .Role.stGotGiftBagResult.eResult result = 1;
inline bool stGotGiftBagResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGotGiftBagResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGotGiftBagResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGotGiftBagResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stGotGiftBagResult_eResult stGotGiftBagResult::result() const {
  return static_cast< ::Role::stGotGiftBagResult_eResult >(result_);
}
inline void stGotGiftBagResult::set_result(::Role::stGotGiftBagResult_eResult value) {
  assert(::Role::stGotGiftBagResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynRealTimeItem

// optional string roleName = 1;
inline bool stSynRealTimeItem::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRealTimeItem::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRealTimeItem::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRealTimeItem::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& stSynRealTimeItem::rolename() const {
  return *rolename_;
}
inline void stSynRealTimeItem::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void stSynRealTimeItem::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void stSynRealTimeItem::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynRealTimeItem::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* stSynRealTimeItem::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynRealTimeItem::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 2;
inline bool stSynRealTimeItem::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynRealTimeItem::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynRealTimeItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynRealTimeItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynRealTimeItem::level() const {
  return level_;
}
inline void stSynRealTimeItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 3;
inline bool stSynRealTimeItem::has_battlepower() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynRealTimeItem::set_has_battlepower() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynRealTimeItem::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynRealTimeItem::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynRealTimeItem::battlepower() const {
  return battlepower_;
}
inline void stSynRealTimeItem::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 addHonour = 4;
inline bool stSynRealTimeItem::has_addhonour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynRealTimeItem::set_has_addhonour() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynRealTimeItem::clear_has_addhonour() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynRealTimeItem::clear_addhonour() {
  addhonour_ = 0u;
  clear_has_addhonour();
}
inline ::google::protobuf::uint32 stSynRealTimeItem::addhonour() const {
  return addhonour_;
}
inline void stSynRealTimeItem::set_addhonour(::google::protobuf::uint32 value) {
  set_has_addhonour();
  addhonour_ = value;
}

// optional uint32 killNum = 5;
inline bool stSynRealTimeItem::has_killnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynRealTimeItem::set_has_killnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynRealTimeItem::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynRealTimeItem::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stSynRealTimeItem::killnum() const {
  return killnum_;
}
inline void stSynRealTimeItem::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional bool isDie = 6;
inline bool stSynRealTimeItem::has_isdie() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynRealTimeItem::set_has_isdie() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynRealTimeItem::clear_has_isdie() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynRealTimeItem::clear_isdie() {
  isdie_ = false;
  clear_has_isdie();
}
inline bool stSynRealTimeItem::isdie() const {
  return isdie_;
}
inline void stSynRealTimeItem::set_isdie(bool value) {
  set_has_isdie();
  isdie_ = value;
}

// optional uint32 charid = 7;
inline bool stSynRealTimeItem::has_charid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynRealTimeItem::set_has_charid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynRealTimeItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynRealTimeItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynRealTimeItem::charid() const {
  return charid_;
}
inline void stSynRealTimeItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRealTimePKResult

// repeated .Role.stSynRealTimeItem sideA = 1;
inline int stRealTimePKResult::sidea_size() const {
  return sidea_.size();
}
inline void stRealTimePKResult::clear_sidea() {
  sidea_.Clear();
}
inline const ::Role::stSynRealTimeItem& stRealTimePKResult::sidea(int index) const {
  return sidea_.Get(index);
}
inline ::Role::stSynRealTimeItem* stRealTimePKResult::mutable_sidea(int index) {
  return sidea_.Mutable(index);
}
inline ::Role::stSynRealTimeItem* stRealTimePKResult::add_sidea() {
  return sidea_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >&
stRealTimePKResult::sidea() const {
  return sidea_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >*
stRealTimePKResult::mutable_sidea() {
  return &sidea_;
}

// repeated .Role.stSynRealTimeItem sideB = 2;
inline int stRealTimePKResult::sideb_size() const {
  return sideb_.size();
}
inline void stRealTimePKResult::clear_sideb() {
  sideb_.Clear();
}
inline const ::Role::stSynRealTimeItem& stRealTimePKResult::sideb(int index) const {
  return sideb_.Get(index);
}
inline ::Role::stSynRealTimeItem* stRealTimePKResult::mutable_sideb(int index) {
  return sideb_.Mutable(index);
}
inline ::Role::stSynRealTimeItem* stRealTimePKResult::add_sideb() {
  return sideb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >&
stRealTimePKResult::sideb() const {
  return sideb_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >*
stRealTimePKResult::mutable_sideb() {
  return &sideb_;
}

// -------------------------------------------------------------------

// stReqFiveRaiseEquip

// optional uint32 bagType = 1;
inline bool stReqFiveRaiseEquip::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqFiveRaiseEquip::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqFiveRaiseEquip::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqFiveRaiseEquip::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqFiveRaiseEquip::bagtype() const {
  return bagtype_;
}
inline void stReqFiveRaiseEquip::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqFiveRaiseEquip::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqFiveRaiseEquip::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqFiveRaiseEquip::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqFiveRaiseEquip::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqFiveRaiseEquip::instanceid() const {
  return instanceid_;
}
inline void stReqFiveRaiseEquip::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 toLv = 3;
inline bool stReqFiveRaiseEquip::has_tolv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqFiveRaiseEquip::set_has_tolv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqFiveRaiseEquip::clear_has_tolv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqFiveRaiseEquip::clear_tolv() {
  tolv_ = 0u;
  clear_has_tolv();
}
inline ::google::protobuf::uint32 stReqFiveRaiseEquip::tolv() const {
  return tolv_;
}
inline void stReqFiveRaiseEquip::set_tolv(::google::protobuf::uint32 value) {
  set_has_tolv();
  tolv_ = value;
}

// -------------------------------------------------------------------

// stFiveRaiseEquipResult

// optional uint32 bagType = 1;
inline bool stFiveRaiseEquipResult::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stFiveRaiseEquipResult::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stFiveRaiseEquipResult::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stFiveRaiseEquipResult::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stFiveRaiseEquipResult::bagtype() const {
  return bagtype_;
}
inline void stFiveRaiseEquipResult::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stFiveRaiseEquipResult::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stFiveRaiseEquipResult::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stFiveRaiseEquipResult::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stFiveRaiseEquipResult::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stFiveRaiseEquipResult::instanceid() const {
  return instanceid_;
}
inline void stFiveRaiseEquipResult::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stFiveRaiseEquipResult.eResult result = 3;
inline bool stFiveRaiseEquipResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stFiveRaiseEquipResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stFiveRaiseEquipResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stFiveRaiseEquipResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stFiveRaiseEquipResult_eResult stFiveRaiseEquipResult::result() const {
  return static_cast< ::Role::stFiveRaiseEquipResult_eResult >(result_);
}
inline void stFiveRaiseEquipResult::set_result(::Role::stFiveRaiseEquipResult_eResult value) {
  assert(::Role::stFiveRaiseEquipResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynBattleProp

// optional uint32 battlePower = 1;
inline bool stSynBattleProp::has_battlepower() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynBattleProp::set_has_battlepower() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynBattleProp::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynBattleProp::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynBattleProp::battlepower() const {
  return battlepower_;
}
inline void stSynBattleProp::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// repeated .Role.stBattleProp battleProp = 2;
inline int stSynBattleProp::battleprop_size() const {
  return battleprop_.size();
}
inline void stSynBattleProp::clear_battleprop() {
  battleprop_.Clear();
}
inline const ::Role::stBattleProp& stSynBattleProp::battleprop(int index) const {
  return battleprop_.Get(index);
}
inline ::Role::stBattleProp* stSynBattleProp::mutable_battleprop(int index) {
  return battleprop_.Mutable(index);
}
inline ::Role::stBattleProp* stSynBattleProp::add_battleprop() {
  return battleprop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
stSynBattleProp::battleprop() const {
  return battleprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
stSynBattleProp::mutable_battleprop() {
  return &battleprop_;
}

// -------------------------------------------------------------------

// stSynTeamCopyMapNum

// optional uint32 num = 1;
inline bool stSynTeamCopyMapNum::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynTeamCopyMapNum::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynTeamCopyMapNum::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynTeamCopyMapNum::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynTeamCopyMapNum::num() const {
  return num_;
}
inline void stSynTeamCopyMapNum::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stSynRealTimePKNum

// optional uint32 num = 1;
inline bool stSynRealTimePKNum::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRealTimePKNum::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRealTimePKNum::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRealTimePKNum::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 stSynRealTimePKNum::num() const {
  return num_;
}
inline void stSynRealTimePKNum::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stCopymapFail

// optional uint32 copyMapID = 1;
inline bool stCopymapFail::has_copymapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stCopymapFail::set_has_copymapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stCopymapFail::clear_has_copymapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stCopymapFail::clear_copymapid() {
  copymapid_ = 0u;
  clear_has_copymapid();
}
inline ::google::protobuf::uint32 stCopymapFail::copymapid() const {
  return copymapid_;
}
inline void stCopymapFail::set_copymapid(::google::protobuf::uint32 value) {
  set_has_copymapid();
  copymapid_ = value;
}

// -------------------------------------------------------------------

// stReqHero10TimeStudySkill

// optional uint32 heroID = 1;
inline bool stReqHero10TimeStudySkill::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqHero10TimeStudySkill::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqHero10TimeStudySkill::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqHero10TimeStudySkill::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqHero10TimeStudySkill::heroid() const {
  return heroid_;
}
inline void stReqHero10TimeStudySkill::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stHero10TimesStudySkillResult

// optional .Role.stHero10TimesStudySkillResult.eResult result = 1;
inline bool stHero10TimesStudySkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHero10TimesStudySkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHero10TimesStudySkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHero10TimesStudySkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stHero10TimesStudySkillResult_eResult stHero10TimesStudySkillResult::result() const {
  return static_cast< ::Role::stHero10TimesStudySkillResult_eResult >(result_);
}
inline void stHero10TimesStudySkillResult::set_result(::Role::stHero10TimesStudySkillResult_eResult value) {
  assert(::Role::stHero10TimesStudySkillResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 heroID = 2;
inline bool stHero10TimesStudySkillResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHero10TimesStudySkillResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHero10TimesStudySkillResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHero10TimesStudySkillResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stHero10TimesStudySkillResult::heroid() const {
  return heroid_;
}
inline void stHero10TimesStudySkillResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint32 skillID = 3;
inline bool stHero10TimesStudySkillResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHero10TimesStudySkillResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHero10TimesStudySkillResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHero10TimesStudySkillResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stHero10TimesStudySkillResult::skillid() const {
  return skillid_;
}
inline void stHero10TimesStudySkillResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 useDiamondNum = 4;
inline bool stHero10TimesStudySkillResult::has_usediamondnum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stHero10TimesStudySkillResult::set_has_usediamondnum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stHero10TimesStudySkillResult::clear_has_usediamondnum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stHero10TimesStudySkillResult::clear_usediamondnum() {
  usediamondnum_ = 0u;
  clear_has_usediamondnum();
}
inline ::google::protobuf::uint32 stHero10TimesStudySkillResult::usediamondnum() const {
  return usediamondnum_;
}
inline void stHero10TimesStudySkillResult::set_usediamondnum(::google::protobuf::uint32 value) {
  set_has_usediamondnum();
  usediamondnum_ = value;
}

// optional uint32 addSkillExp = 5;
inline bool stHero10TimesStudySkillResult::has_addskillexp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stHero10TimesStudySkillResult::set_has_addskillexp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stHero10TimesStudySkillResult::clear_has_addskillexp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stHero10TimesStudySkillResult::clear_addskillexp() {
  addskillexp_ = 0u;
  clear_has_addskillexp();
}
inline ::google::protobuf::uint32 stHero10TimesStudySkillResult::addskillexp() const {
  return addskillexp_;
}
inline void stHero10TimesStudySkillResult::set_addskillexp(::google::protobuf::uint32 value) {
  set_has_addskillexp();
  addskillexp_ = value;
}

// optional uint32 studySkillNum = 6;
inline bool stHero10TimesStudySkillResult::has_studyskillnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stHero10TimesStudySkillResult::set_has_studyskillnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stHero10TimesStudySkillResult::clear_has_studyskillnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stHero10TimesStudySkillResult::clear_studyskillnum() {
  studyskillnum_ = 0u;
  clear_has_studyskillnum();
}
inline ::google::protobuf::uint32 stHero10TimesStudySkillResult::studyskillnum() const {
  return studyskillnum_;
}
inline void stHero10TimesStudySkillResult::set_studyskillnum(::google::protobuf::uint32 value) {
  set_has_studyskillnum();
  studyskillnum_ = value;
}

// -------------------------------------------------------------------

// st10TimesGetEquipSkill

// optional uint32 bagType = 1;
inline bool st10TimesGetEquipSkill::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void st10TimesGetEquipSkill::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void st10TimesGetEquipSkill::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void st10TimesGetEquipSkill::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 st10TimesGetEquipSkill::bagtype() const {
  return bagtype_;
}
inline void st10TimesGetEquipSkill::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool st10TimesGetEquipSkill::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void st10TimesGetEquipSkill::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void st10TimesGetEquipSkill::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void st10TimesGetEquipSkill::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 st10TimesGetEquipSkill::instanceid() const {
  return instanceid_;
}
inline void st10TimesGetEquipSkill::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// st10TimesGetEquipSkillResult

// optional uint32 bagType = 1;
inline bool st10TimesGetEquipSkillResult::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void st10TimesGetEquipSkillResult::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void st10TimesGetEquipSkillResult::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void st10TimesGetEquipSkillResult::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 st10TimesGetEquipSkillResult::bagtype() const {
  return bagtype_;
}
inline void st10TimesGetEquipSkillResult::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool st10TimesGetEquipSkillResult::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void st10TimesGetEquipSkillResult::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void st10TimesGetEquipSkillResult::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void st10TimesGetEquipSkillResult::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 st10TimesGetEquipSkillResult::instanceid() const {
  return instanceid_;
}
inline void st10TimesGetEquipSkillResult::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.st10TimesGetEquipSkillResult.eResult result = 3;
inline bool st10TimesGetEquipSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void st10TimesGetEquipSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void st10TimesGetEquipSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void st10TimesGetEquipSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::st10TimesGetEquipSkillResult_eResult st10TimesGetEquipSkillResult::result() const {
  return static_cast< ::Role::st10TimesGetEquipSkillResult_eResult >(result_);
}
inline void st10TimesGetEquipSkillResult::set_result(::Role::st10TimesGetEquipSkillResult_eResult value) {
  assert(::Role::st10TimesGetEquipSkillResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 skillID = 4;
inline bool st10TimesGetEquipSkillResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void st10TimesGetEquipSkillResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void st10TimesGetEquipSkillResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void st10TimesGetEquipSkillResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 st10TimesGetEquipSkillResult::skillid() const {
  return skillid_;
}
inline void st10TimesGetEquipSkillResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 juexingNum = 5;
inline bool st10TimesGetEquipSkillResult::has_juexingnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void st10TimesGetEquipSkillResult::set_has_juexingnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void st10TimesGetEquipSkillResult::clear_has_juexingnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void st10TimesGetEquipSkillResult::clear_juexingnum() {
  juexingnum_ = 0u;
  clear_has_juexingnum();
}
inline ::google::protobuf::uint32 st10TimesGetEquipSkillResult::juexingnum() const {
  return juexingnum_;
}
inline void st10TimesGetEquipSkillResult::set_juexingnum(::google::protobuf::uint32 value) {
  set_has_juexingnum();
  juexingnum_ = value;
}

// optional uint32 getJueXingExp = 6;
inline bool st10TimesGetEquipSkillResult::has_getjuexingexp() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void st10TimesGetEquipSkillResult::set_has_getjuexingexp() {
  _has_bits_[0] |= 0x00000020u;
}
inline void st10TimesGetEquipSkillResult::clear_has_getjuexingexp() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void st10TimesGetEquipSkillResult::clear_getjuexingexp() {
  getjuexingexp_ = 0u;
  clear_has_getjuexingexp();
}
inline ::google::protobuf::uint32 st10TimesGetEquipSkillResult::getjuexingexp() const {
  return getjuexingexp_;
}
inline void st10TimesGetEquipSkillResult::set_getjuexingexp(::google::protobuf::uint32 value) {
  set_has_getjuexingexp();
  getjuexingexp_ = value;
}

// -------------------------------------------------------------------

// stReqFirstRechargeReward

// optional uint32 charID = 1;
inline bool stReqFirstRechargeReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqFirstRechargeReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqFirstRechargeReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqFirstRechargeReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqFirstRechargeReward::charid() const {
  return charid_;
}
inline void stReqFirstRechargeReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetFirstRechargeReward

// optional .Role.stRetFirstRechargeReward.eResult result = 1;
inline bool stRetFirstRechargeReward::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetFirstRechargeReward::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetFirstRechargeReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetFirstRechargeReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetFirstRechargeReward_eResult stRetFirstRechargeReward::result() const {
  return static_cast< ::Role::stRetFirstRechargeReward_eResult >(result_);
}
inline void stRetFirstRechargeReward::set_result(::Role::stRetFirstRechargeReward_eResult value) {
  assert(::Role::stRetFirstRechargeReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynMobaItem

// optional string roleName = 1;
inline bool stSynMobaItem::has_rolename() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynMobaItem::set_has_rolename() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynMobaItem::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynMobaItem::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& stSynMobaItem::rolename() const {
  return *rolename_;
}
inline void stSynMobaItem::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void stSynMobaItem::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void stSynMobaItem::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSynMobaItem::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* stSynMobaItem::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSynMobaItem::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 2;
inline bool stSynMobaItem::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynMobaItem::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynMobaItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynMobaItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSynMobaItem::level() const {
  return level_;
}
inline void stSynMobaItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 3;
inline bool stSynMobaItem::has_battlepower() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynMobaItem::set_has_battlepower() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynMobaItem::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynMobaItem::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stSynMobaItem::battlepower() const {
  return battlepower_;
}
inline void stSynMobaItem::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 addHonour = 4;
inline bool stSynMobaItem::has_addhonour() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynMobaItem::set_has_addhonour() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynMobaItem::clear_has_addhonour() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynMobaItem::clear_addhonour() {
  addhonour_ = 0u;
  clear_has_addhonour();
}
inline ::google::protobuf::uint32 stSynMobaItem::addhonour() const {
  return addhonour_;
}
inline void stSynMobaItem::set_addhonour(::google::protobuf::uint32 value) {
  set_has_addhonour();
  addhonour_ = value;
}

// optional uint32 killNum = 5;
inline bool stSynMobaItem::has_killnum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynMobaItem::set_has_killnum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynMobaItem::clear_has_killnum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynMobaItem::clear_killnum() {
  killnum_ = 0u;
  clear_has_killnum();
}
inline ::google::protobuf::uint32 stSynMobaItem::killnum() const {
  return killnum_;
}
inline void stSynMobaItem::set_killnum(::google::protobuf::uint32 value) {
  set_has_killnum();
  killnum_ = value;
}

// optional uint32 beKillNum = 6;
inline bool stSynMobaItem::has_bekillnum() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void stSynMobaItem::set_has_bekillnum() {
  _has_bits_[0] |= 0x00000020u;
}
inline void stSynMobaItem::clear_has_bekillnum() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void stSynMobaItem::clear_bekillnum() {
  bekillnum_ = 0u;
  clear_has_bekillnum();
}
inline ::google::protobuf::uint32 stSynMobaItem::bekillnum() const {
  return bekillnum_;
}
inline void stSynMobaItem::set_bekillnum(::google::protobuf::uint32 value) {
  set_has_bekillnum();
  bekillnum_ = value;
}

// optional uint32 charid = 7;
inline bool stSynMobaItem::has_charid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void stSynMobaItem::set_has_charid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void stSynMobaItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void stSynMobaItem::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stSynMobaItem::charid() const {
  return charid_;
}
inline void stSynMobaItem::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stMobaPKResult

// repeated .Role.stSynMobaItem sideA = 1;
inline int stMobaPKResult::sidea_size() const {
  return sidea_.size();
}
inline void stMobaPKResult::clear_sidea() {
  sidea_.Clear();
}
inline const ::Role::stSynMobaItem& stMobaPKResult::sidea(int index) const {
  return sidea_.Get(index);
}
inline ::Role::stSynMobaItem* stMobaPKResult::mutable_sidea(int index) {
  return sidea_.Mutable(index);
}
inline ::Role::stSynMobaItem* stMobaPKResult::add_sidea() {
  return sidea_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem >&
stMobaPKResult::sidea() const {
  return sidea_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem >*
stMobaPKResult::mutable_sidea() {
  return &sidea_;
}

// repeated .Role.stSynMobaItem sideB = 2;
inline int stMobaPKResult::sideb_size() const {
  return sideb_.size();
}
inline void stMobaPKResult::clear_sideb() {
  sideb_.Clear();
}
inline const ::Role::stSynMobaItem& stMobaPKResult::sideb(int index) const {
  return sideb_.Get(index);
}
inline ::Role::stSynMobaItem* stMobaPKResult::mutable_sideb(int index) {
  return sideb_.Mutable(index);
}
inline ::Role::stSynMobaItem* stMobaPKResult::add_sideb() {
  return sideb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem >&
stMobaPKResult::sideb() const {
  return sideb_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynMobaItem >*
stMobaPKResult::mutable_sideb() {
  return &sideb_;
}

// -------------------------------------------------------------------

// stSubNewBieGuideID

// optional uint32 id = 1;
inline bool stSubNewBieGuideID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSubNewBieGuideID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSubNewBieGuideID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSubNewBieGuideID::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSubNewBieGuideID::id() const {
  return id_;
}
inline void stSubNewBieGuideID::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stResetTeamCopyMapNum

// optional uint32 charID = 1;
inline bool stResetTeamCopyMapNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetTeamCopyMapNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetTeamCopyMapNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetTeamCopyMapNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResetTeamCopyMapNum::charid() const {
  return charid_;
}
inline void stResetTeamCopyMapNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResetTeampCopyMapNumResult

// optional .Role.stResetTeampCopyMapNumResult.eResult result = 1;
inline bool stResetTeampCopyMapNumResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetTeampCopyMapNumResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetTeampCopyMapNumResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetTeampCopyMapNumResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stResetTeampCopyMapNumResult_eResult stResetTeampCopyMapNumResult::result() const {
  return static_cast< ::Role::stResetTeampCopyMapNumResult_eResult >(result_);
}
inline void stResetTeampCopyMapNumResult::set_result(::Role::stResetTeampCopyMapNumResult_eResult value) {
  assert(::Role::stResetTeampCopyMapNumResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stResetRealTimeCopyMapNum

// optional uint32 charID = 1;
inline bool stResetRealTimeCopyMapNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetRealTimeCopyMapNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetRealTimeCopyMapNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetRealTimeCopyMapNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stResetRealTimeCopyMapNum::charid() const {
  return charid_;
}
inline void stResetRealTimeCopyMapNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stResetRealTimeCopymapNumResult

// optional .Role.stResetRealTimeCopymapNumResult.eResult result = 1;
inline bool stResetRealTimeCopymapNumResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stResetRealTimeCopymapNumResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stResetRealTimeCopymapNumResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stResetRealTimeCopymapNumResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stResetRealTimeCopymapNumResult_eResult stResetRealTimeCopymapNumResult::result() const {
  return static_cast< ::Role::stResetRealTimeCopymapNumResult_eResult >(result_);
}
inline void stResetRealTimeCopymapNumResult::set_result(::Role::stResetRealTimeCopymapNumResult_eResult value) {
  assert(::Role::stResetRealTimeCopymapNumResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stBuyRMBItemSuccess

// optional .Role.stSynRMPShopItem itemInfo = 1;
inline bool stBuyRMBItemSuccess::has_iteminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyRMBItemSuccess::set_has_iteminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyRMBItemSuccess::clear_has_iteminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyRMBItemSuccess::clear_iteminfo() {
  if (iteminfo_ != NULL) iteminfo_->::Role::stSynRMPShopItem::Clear();
  clear_has_iteminfo();
}
inline const ::Role::stSynRMPShopItem& stBuyRMBItemSuccess::iteminfo() const {
  return iteminfo_ != NULL ? *iteminfo_ : *default_instance_->iteminfo_;
}
inline ::Role::stSynRMPShopItem* stBuyRMBItemSuccess::mutable_iteminfo() {
  set_has_iteminfo();
  if (iteminfo_ == NULL) iteminfo_ = new ::Role::stSynRMPShopItem;
  return iteminfo_;
}
inline ::Role::stSynRMPShopItem* stBuyRMBItemSuccess::release_iteminfo() {
  clear_has_iteminfo();
  ::Role::stSynRMPShopItem* temp = iteminfo_;
  iteminfo_ = NULL;
  return temp;
}
inline void stBuyRMBItemSuccess::set_allocated_iteminfo(::Role::stSynRMPShopItem* iteminfo) {
  delete iteminfo_;
  iteminfo_ = iteminfo;
  if (iteminfo) {
    set_has_iteminfo();
  } else {
    clear_has_iteminfo();
  }
}

// -------------------------------------------------------------------

// stOne2OnePVPFail

// repeated .Role.stSynOne2OnePVPItem loser = 1;
inline int stOne2OnePVPFail::loser_size() const {
  return loser_.size();
}
inline void stOne2OnePVPFail::clear_loser() {
  loser_.Clear();
}
inline const ::Role::stSynOne2OnePVPItem& stOne2OnePVPFail::loser(int index) const {
  return loser_.Get(index);
}
inline ::Role::stSynOne2OnePVPItem* stOne2OnePVPFail::mutable_loser(int index) {
  return loser_.Mutable(index);
}
inline ::Role::stSynOne2OnePVPItem* stOne2OnePVPFail::add_loser() {
  return loser_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynOne2OnePVPItem >&
stOne2OnePVPFail::loser() const {
  return loser_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynOne2OnePVPItem >*
stOne2OnePVPFail::mutable_loser() {
  return &loser_;
}

// optional bool pkWithFriend = 2;
inline bool stOne2OnePVPFail::has_pkwithfriend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOne2OnePVPFail::set_has_pkwithfriend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOne2OnePVPFail::clear_has_pkwithfriend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOne2OnePVPFail::clear_pkwithfriend() {
  pkwithfriend_ = false;
  clear_has_pkwithfriend();
}
inline bool stOne2OnePVPFail::pkwithfriend() const {
  return pkwithfriend_;
}
inline void stOne2OnePVPFail::set_pkwithfriend(bool value) {
  set_has_pkwithfriend();
  pkwithfriend_ = value;
}

// -------------------------------------------------------------------

// stRealTimeFail

// repeated .Role.stSynRealTimeItem sideA = 1;
inline int stRealTimeFail::sidea_size() const {
  return sidea_.size();
}
inline void stRealTimeFail::clear_sidea() {
  sidea_.Clear();
}
inline const ::Role::stSynRealTimeItem& stRealTimeFail::sidea(int index) const {
  return sidea_.Get(index);
}
inline ::Role::stSynRealTimeItem* stRealTimeFail::mutable_sidea(int index) {
  return sidea_.Mutable(index);
}
inline ::Role::stSynRealTimeItem* stRealTimeFail::add_sidea() {
  return sidea_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >&
stRealTimeFail::sidea() const {
  return sidea_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >*
stRealTimeFail::mutable_sidea() {
  return &sidea_;
}

// repeated .Role.stSynRealTimeItem sideB = 2;
inline int stRealTimeFail::sideb_size() const {
  return sideb_.size();
}
inline void stRealTimeFail::clear_sideb() {
  sideb_.Clear();
}
inline const ::Role::stSynRealTimeItem& stRealTimeFail::sideb(int index) const {
  return sideb_.Get(index);
}
inline ::Role::stSynRealTimeItem* stRealTimeFail::mutable_sideb(int index) {
  return sideb_.Mutable(index);
}
inline ::Role::stSynRealTimeItem* stRealTimeFail::add_sideb() {
  return sideb_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >&
stRealTimeFail::sideb() const {
  return sideb_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRealTimeItem >*
stRealTimeFail::mutable_sideb() {
  return &sideb_;
}

// -------------------------------------------------------------------

// stDataInitFinish

// optional bool result = 1;
inline bool stDataInitFinish::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stDataInitFinish::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stDataInitFinish::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stDataInitFinish::clear_result() {
  result_ = false;
  clear_has_result();
}
inline bool stDataInitFinish::result() const {
  return result_;
}
inline void stDataInitFinish::set_result(bool value) {
  set_has_result();
  result_ = value;
}

// optional string IP = 2;
inline bool stDataInitFinish::has_ip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stDataInitFinish::set_has_ip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stDataInitFinish::clear_has_ip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stDataInitFinish::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& stDataInitFinish::ip() const {
  return *ip_;
}
inline void stDataInitFinish::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stDataInitFinish::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void stDataInitFinish::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stDataInitFinish::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* stDataInitFinish::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stDataInitFinish::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqFirst10RechargeReward

// optional uint32 charID = 1;
inline bool stReqFirst10RechargeReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqFirst10RechargeReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqFirst10RechargeReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqFirst10RechargeReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqFirst10RechargeReward::charid() const {
  return charid_;
}
inline void stReqFirst10RechargeReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetFirst10RechargeReward

// optional .Role.stRetFirst10RechargeReward.eResult result = 1;
inline bool stRetFirst10RechargeReward::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetFirst10RechargeReward::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetFirst10RechargeReward::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetFirst10RechargeReward::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetFirst10RechargeReward_eResult stRetFirst10RechargeReward::result() const {
  return static_cast< ::Role::stRetFirst10RechargeReward_eResult >(result_);
}
inline void stRetFirst10RechargeReward::set_result(::Role::stRetFirst10RechargeReward_eResult value) {
  assert(::Role::stRetFirst10RechargeReward_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stChatInWorldCoolDown

// optional uint32 remainTime = 1;
inline bool stChatInWorldCoolDown::has_remaintime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChatInWorldCoolDown::set_has_remaintime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChatInWorldCoolDown::clear_has_remaintime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChatInWorldCoolDown::clear_remaintime() {
  remaintime_ = 0u;
  clear_has_remaintime();
}
inline ::google::protobuf::uint32 stChatInWorldCoolDown::remaintime() const {
  return remaintime_;
}
inline void stChatInWorldCoolDown::set_remaintime(::google::protobuf::uint32 value) {
  set_has_remaintime();
  remaintime_ = value;
}

// -------------------------------------------------------------------

// stSynRoleCreateTime

// optional uint32 createTime = 1;
inline bool stSynRoleCreateTime::has_createtime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRoleCreateTime::set_has_createtime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRoleCreateTime::clear_has_createtime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRoleCreateTime::clear_createtime() {
  createtime_ = 0u;
  clear_has_createtime();
}
inline ::google::protobuf::uint32 stSynRoleCreateTime::createtime() const {
  return createtime_;
}
inline void stSynRoleCreateTime::set_createtime(::google::protobuf::uint32 value) {
  set_has_createtime();
  createtime_ = value;
}

// -------------------------------------------------------------------

// stReqChgEquipSkill

// optional uint64 srcInstanceID = 1;
inline bool stReqChgEquipSkill::has_srcinstanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChgEquipSkill::set_has_srcinstanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChgEquipSkill::clear_has_srcinstanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChgEquipSkill::clear_srcinstanceid() {
  srcinstanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_srcinstanceid();
}
inline ::google::protobuf::uint64 stReqChgEquipSkill::srcinstanceid() const {
  return srcinstanceid_;
}
inline void stReqChgEquipSkill::set_srcinstanceid(::google::protobuf::uint64 value) {
  set_has_srcinstanceid();
  srcinstanceid_ = value;
}

// optional uint64 dstInstanceID = 2;
inline bool stReqChgEquipSkill::has_dstinstanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqChgEquipSkill::set_has_dstinstanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqChgEquipSkill::clear_has_dstinstanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqChgEquipSkill::clear_dstinstanceid() {
  dstinstanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_dstinstanceid();
}
inline ::google::protobuf::uint64 stReqChgEquipSkill::dstinstanceid() const {
  return dstinstanceid_;
}
inline void stReqChgEquipSkill::set_dstinstanceid(::google::protobuf::uint64 value) {
  set_has_dstinstanceid();
  dstinstanceid_ = value;
}

// optional uint64 chgSoulItemInstanceID = 3;
inline bool stReqChgEquipSkill::has_chgsouliteminstanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqChgEquipSkill::set_has_chgsouliteminstanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqChgEquipSkill::clear_has_chgsouliteminstanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqChgEquipSkill::clear_chgsouliteminstanceid() {
  chgsouliteminstanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_chgsouliteminstanceid();
}
inline ::google::protobuf::uint64 stReqChgEquipSkill::chgsouliteminstanceid() const {
  return chgsouliteminstanceid_;
}
inline void stReqChgEquipSkill::set_chgsouliteminstanceid(::google::protobuf::uint64 value) {
  set_has_chgsouliteminstanceid();
  chgsouliteminstanceid_ = value;
}

// -------------------------------------------------------------------

// stRetChgEquipSkillResult

// optional uint64 srcInstanceID = 1;
inline bool stRetChgEquipSkillResult::has_srcinstanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetChgEquipSkillResult::set_has_srcinstanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetChgEquipSkillResult::clear_has_srcinstanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetChgEquipSkillResult::clear_srcinstanceid() {
  srcinstanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_srcinstanceid();
}
inline ::google::protobuf::uint64 stRetChgEquipSkillResult::srcinstanceid() const {
  return srcinstanceid_;
}
inline void stRetChgEquipSkillResult::set_srcinstanceid(::google::protobuf::uint64 value) {
  set_has_srcinstanceid();
  srcinstanceid_ = value;
}

// optional uint64 dstInstanceID = 2;
inline bool stRetChgEquipSkillResult::has_dstinstanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetChgEquipSkillResult::set_has_dstinstanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetChgEquipSkillResult::clear_has_dstinstanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetChgEquipSkillResult::clear_dstinstanceid() {
  dstinstanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_dstinstanceid();
}
inline ::google::protobuf::uint64 stRetChgEquipSkillResult::dstinstanceid() const {
  return dstinstanceid_;
}
inline void stRetChgEquipSkillResult::set_dstinstanceid(::google::protobuf::uint64 value) {
  set_has_dstinstanceid();
  dstinstanceid_ = value;
}

// optional .Role.stRetChgEquipSkillResult.eResult result = 3;
inline bool stRetChgEquipSkillResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetChgEquipSkillResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetChgEquipSkillResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetChgEquipSkillResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetChgEquipSkillResult_eResult stRetChgEquipSkillResult::result() const {
  return static_cast< ::Role::stRetChgEquipSkillResult_eResult >(result_);
}
inline void stRetChgEquipSkillResult::set_result(::Role::stRetChgEquipSkillResult_eResult value) {
  assert(::Role::stRetChgEquipSkillResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stHasCloseBetaReward

// optional uint32 boxID = 1;
inline bool stHasCloseBetaReward::has_boxid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHasCloseBetaReward::set_has_boxid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHasCloseBetaReward::clear_has_boxid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHasCloseBetaReward::clear_boxid() {
  boxid_ = 0u;
  clear_has_boxid();
}
inline ::google::protobuf::uint32 stHasCloseBetaReward::boxid() const {
  return boxid_;
}
inline void stHasCloseBetaReward::set_boxid(::google::protobuf::uint32 value) {
  set_has_boxid();
  boxid_ = value;
}

// optional uint32 giveDiamond = 2;
inline bool stHasCloseBetaReward::has_givediamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHasCloseBetaReward::set_has_givediamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHasCloseBetaReward::clear_has_givediamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHasCloseBetaReward::clear_givediamond() {
  givediamond_ = 0u;
  clear_has_givediamond();
}
inline ::google::protobuf::uint32 stHasCloseBetaReward::givediamond() const {
  return givediamond_;
}
inline void stHasCloseBetaReward::set_givediamond(::google::protobuf::uint32 value) {
  set_has_givediamond();
  givediamond_ = value;
}

// optional uint32 giveRecharge = 3;
inline bool stHasCloseBetaReward::has_giverecharge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHasCloseBetaReward::set_has_giverecharge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHasCloseBetaReward::clear_has_giverecharge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHasCloseBetaReward::clear_giverecharge() {
  giverecharge_ = 0u;
  clear_has_giverecharge();
}
inline ::google::protobuf::uint32 stHasCloseBetaReward::giverecharge() const {
  return giverecharge_;
}
inline void stHasCloseBetaReward::set_giverecharge(::google::protobuf::uint32 value) {
  set_has_giverecharge();
  giverecharge_ = value;
}

// -------------------------------------------------------------------

// stReqGotCloseBetaReward

// optional uint32 charID = 1;
inline bool stReqGotCloseBetaReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqGotCloseBetaReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqGotCloseBetaReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqGotCloseBetaReward::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqGotCloseBetaReward::charid() const {
  return charid_;
}
inline void stReqGotCloseBetaReward::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGotCloseBetaRewardResult

// optional .Role.stGotCloseBetaRewardResult.eResult result = 1;
inline bool stGotCloseBetaRewardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGotCloseBetaRewardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGotCloseBetaRewardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGotCloseBetaRewardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stGotCloseBetaRewardResult_eResult stGotCloseBetaRewardResult::result() const {
  return static_cast< ::Role::stGotCloseBetaRewardResult_eResult >(result_);
}
inline void stGotCloseBetaRewardResult::set_result(::Role::stGotCloseBetaRewardResult_eResult value) {
  assert(::Role::stGotCloseBetaRewardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 giveDiamond = 2;
inline bool stGotCloseBetaRewardResult::has_givediamond() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGotCloseBetaRewardResult::set_has_givediamond() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGotCloseBetaRewardResult::clear_has_givediamond() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGotCloseBetaRewardResult::clear_givediamond() {
  givediamond_ = 0u;
  clear_has_givediamond();
}
inline ::google::protobuf::uint32 stGotCloseBetaRewardResult::givediamond() const {
  return givediamond_;
}
inline void stGotCloseBetaRewardResult::set_givediamond(::google::protobuf::uint32 value) {
  set_has_givediamond();
  givediamond_ = value;
}

// optional uint32 giveRecharge = 3;
inline bool stGotCloseBetaRewardResult::has_giverecharge() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGotCloseBetaRewardResult::set_has_giverecharge() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGotCloseBetaRewardResult::clear_has_giverecharge() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGotCloseBetaRewardResult::clear_giverecharge() {
  giverecharge_ = 0u;
  clear_has_giverecharge();
}
inline ::google::protobuf::uint32 stGotCloseBetaRewardResult::giverecharge() const {
  return giverecharge_;
}
inline void stGotCloseBetaRewardResult::set_giverecharge(::google::protobuf::uint32 value) {
  set_has_giverecharge();
  giverecharge_ = value;
}

// -------------------------------------------------------------------

// stReqUseMonthCardItem

// optional uint64 instanceID = 1;
inline bool stReqUseMonthCardItem::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUseMonthCardItem::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUseMonthCardItem::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUseMonthCardItem::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqUseMonthCardItem::instanceid() const {
  return instanceid_;
}
inline void stReqUseMonthCardItem::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stRetUseMonthCardItem

// optional .Role.stRetUseMonthCardItem.eResult result = 1;
inline bool stRetUseMonthCardItem::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetUseMonthCardItem::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetUseMonthCardItem::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetUseMonthCardItem::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetUseMonthCardItem_eResult stRetUseMonthCardItem::result() const {
  return static_cast< ::Role::stRetUseMonthCardItem_eResult >(result_);
}
inline void stRetUseMonthCardItem::set_result(::Role::stRetUseMonthCardItem_eResult value) {
  assert(::Role::stRetUseMonthCardItem_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqUseSelectItemBox

// optional uint64 instanceID = 1;
inline bool stReqUseSelectItemBox::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUseSelectItemBox::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUseSelectItemBox::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUseSelectItemBox::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqUseSelectItemBox::instanceid() const {
  return instanceid_;
}
inline void stReqUseSelectItemBox::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 selectIndex = 2;
inline bool stReqUseSelectItemBox::has_selectindex() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqUseSelectItemBox::set_has_selectindex() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqUseSelectItemBox::clear_has_selectindex() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqUseSelectItemBox::clear_selectindex() {
  selectindex_ = 0u;
  clear_has_selectindex();
}
inline ::google::protobuf::uint32 stReqUseSelectItemBox::selectindex() const {
  return selectindex_;
}
inline void stReqUseSelectItemBox::set_selectindex(::google::protobuf::uint32 value) {
  set_has_selectindex();
  selectindex_ = value;
}

// -------------------------------------------------------------------

// stRetUseSelectItemBox

// optional .Role.stRetUseSelectItemBox.eResult result = 1;
inline bool stRetUseSelectItemBox::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetUseSelectItemBox::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetUseSelectItemBox::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetUseSelectItemBox::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetUseSelectItemBox_eResult stRetUseSelectItemBox::result() const {
  return static_cast< ::Role::stRetUseSelectItemBox_eResult >(result_);
}
inline void stRetUseSelectItemBox::set_result(::Role::stRetUseSelectItemBox_eResult value) {
  assert(::Role::stRetUseSelectItemBox_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqUseHeroSkillBook

// optional uint64 instanceID = 1;
inline bool stReqUseHeroSkillBook::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUseHeroSkillBook::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUseHeroSkillBook::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUseHeroSkillBook::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqUseHeroSkillBook::instanceid() const {
  return instanceid_;
}
inline void stReqUseHeroSkillBook::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 heroID = 2;
inline bool stReqUseHeroSkillBook::has_heroid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqUseHeroSkillBook::set_has_heroid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqUseHeroSkillBook::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqUseHeroSkillBook::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqUseHeroSkillBook::heroid() const {
  return heroid_;
}
inline void stReqUseHeroSkillBook::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stRetUseHeroSkillBook

// optional .Role.stRetUseHeroSkillBook.eResult result = 1;
inline bool stRetUseHeroSkillBook::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetUseHeroSkillBook::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetUseHeroSkillBook::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetUseHeroSkillBook::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetUseHeroSkillBook_eResult stRetUseHeroSkillBook::result() const {
  return static_cast< ::Role::stRetUseHeroSkillBook_eResult >(result_);
}
inline void stRetUseHeroSkillBook::set_result(::Role::stRetUseHeroSkillBook_eResult value) {
  assert(::Role::stRetUseHeroSkillBook_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqUseEquipSkillBook

// optional uint64 instanceID = 1;
inline bool stReqUseEquipSkillBook::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUseEquipSkillBook::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUseEquipSkillBook::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUseEquipSkillBook::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqUseEquipSkillBook::instanceid() const {
  return instanceid_;
}
inline void stReqUseEquipSkillBook::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 destBagType = 2;
inline bool stReqUseEquipSkillBook::has_destbagtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqUseEquipSkillBook::set_has_destbagtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqUseEquipSkillBook::clear_has_destbagtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqUseEquipSkillBook::clear_destbagtype() {
  destbagtype_ = 0u;
  clear_has_destbagtype();
}
inline ::google::protobuf::uint32 stReqUseEquipSkillBook::destbagtype() const {
  return destbagtype_;
}
inline void stReqUseEquipSkillBook::set_destbagtype(::google::protobuf::uint32 value) {
  set_has_destbagtype();
  destbagtype_ = value;
}

// optional uint64 destInstanceID = 3;
inline bool stReqUseEquipSkillBook::has_destinstanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqUseEquipSkillBook::set_has_destinstanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqUseEquipSkillBook::clear_has_destinstanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqUseEquipSkillBook::clear_destinstanceid() {
  destinstanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_destinstanceid();
}
inline ::google::protobuf::uint64 stReqUseEquipSkillBook::destinstanceid() const {
  return destinstanceid_;
}
inline void stReqUseEquipSkillBook::set_destinstanceid(::google::protobuf::uint64 value) {
  set_has_destinstanceid();
  destinstanceid_ = value;
}

// -------------------------------------------------------------------

// stRetUseEquipSkillBook

// optional .Role.stRetUseEquipSkillBook.eResult result = 1;
inline bool stRetUseEquipSkillBook::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetUseEquipSkillBook::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetUseEquipSkillBook::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetUseEquipSkillBook::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetUseEquipSkillBook_eResult stRetUseEquipSkillBook::result() const {
  return static_cast< ::Role::stRetUseEquipSkillBook_eResult >(result_);
}
inline void stRetUseEquipSkillBook::set_result(::Role::stRetUseEquipSkillBook_eResult value) {
  assert(::Role::stRetUseEquipSkillBook_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqBreakEquip

// optional uint32 bagType = 1;
inline bool stReqBreakEquip::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBreakEquip::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBreakEquip::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBreakEquip::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqBreakEquip::bagtype() const {
  return bagtype_;
}
inline void stReqBreakEquip::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqBreakEquip::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqBreakEquip::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqBreakEquip::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqBreakEquip::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqBreakEquip::instanceid() const {
  return instanceid_;
}
inline void stReqBreakEquip::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stBreakEquipResult

// optional uint32 bagType = 1;
inline bool stBreakEquipResult::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBreakEquipResult::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBreakEquipResult::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBreakEquipResult::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stBreakEquipResult::bagtype() const {
  return bagtype_;
}
inline void stBreakEquipResult::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stBreakEquipResult::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stBreakEquipResult::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stBreakEquipResult::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stBreakEquipResult::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stBreakEquipResult::instanceid() const {
  return instanceid_;
}
inline void stBreakEquipResult::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stBreakEquipResult.eResult result = 3;
inline bool stBreakEquipResult::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stBreakEquipResult::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stBreakEquipResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stBreakEquipResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stBreakEquipResult_eResult stBreakEquipResult::result() const {
  return static_cast< ::Role::stBreakEquipResult_eResult >(result_);
}
inline void stBreakEquipResult::set_result(::Role::stBreakEquipResult_eResult value) {
  assert(::Role::stBreakEquipResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRecastHero

// repeated uint32 heroID = 2;
inline int stReqRecastHero::heroid_size() const {
  return heroid_.size();
}
inline void stReqRecastHero::clear_heroid() {
  heroid_.Clear();
}
inline ::google::protobuf::uint32 stReqRecastHero::heroid(int index) const {
  return heroid_.Get(index);
}
inline void stReqRecastHero::set_heroid(int index, ::google::protobuf::uint32 value) {
  heroid_.Set(index, value);
}
inline void stReqRecastHero::add_heroid(::google::protobuf::uint32 value) {
  heroid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stReqRecastHero::heroid() const {
  return heroid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stReqRecastHero::mutable_heroid() {
  return &heroid_;
}

// -------------------------------------------------------------------

// stRecastHeroResult

// optional .Role.stRecastHeroResult.Result result = 1;
inline bool stRecastHeroResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRecastHeroResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRecastHeroResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRecastHeroResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRecastHeroResult_Result stRecastHeroResult::result() const {
  return static_cast< ::Role::stRecastHeroResult_Result >(result_);
}
inline void stRecastHeroResult::set_result(::Role::stRecastHeroResult_Result value) {
  assert(::Role::stRecastHeroResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqChangeName

// optional string name = 1;
inline bool stReqChangeName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChangeName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChangeName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChangeName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stReqChangeName::name() const {
  return *name_;
}
inline void stReqChangeName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stReqChangeName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stReqChangeName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stReqChangeName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stReqChangeName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stReqChangeName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 charID = 2;
inline bool stReqChangeName::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqChangeName::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqChangeName::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqChangeName::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqChangeName::charid() const {
  return charid_;
}
inline void stReqChangeName::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stChangeNameResult

// optional .Role.stChangeNameResult.eResult result = 1;
inline bool stChangeNameResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChangeNameResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChangeNameResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChangeNameResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stChangeNameResult_eResult stChangeNameResult::result() const {
  return static_cast< ::Role::stChangeNameResult_eResult >(result_);
}
inline void stChangeNameResult::set_result(::Role::stChangeNameResult_eResult value) {
  assert(::Role::stChangeNameResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional string name = 2;
inline bool stChangeNameResult::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stChangeNameResult::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stChangeNameResult::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stChangeNameResult::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stChangeNameResult::name() const {
  return *name_;
}
inline void stChangeNameResult::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stChangeNameResult::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stChangeNameResult::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stChangeNameResult::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stChangeNameResult::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stChangeNameResult::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqOpenBuyGoldWindow

// optional uint32 charID = 1;
inline bool stReqOpenBuyGoldWindow::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenBuyGoldWindow::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenBuyGoldWindow::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenBuyGoldWindow::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenBuyGoldWindow::charid() const {
  return charid_;
}
inline void stReqOpenBuyGoldWindow::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOpenBuyGoldWindowResult

// optional uint32 buyCount = 1;
inline bool stOpenBuyGoldWindowResult::has_buycount() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOpenBuyGoldWindowResult::set_has_buycount() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOpenBuyGoldWindowResult::clear_has_buycount() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOpenBuyGoldWindowResult::clear_buycount() {
  buycount_ = 0u;
  clear_has_buycount();
}
inline ::google::protobuf::uint32 stOpenBuyGoldWindowResult::buycount() const {
  return buycount_;
}
inline void stOpenBuyGoldWindowResult::set_buycount(::google::protobuf::uint32 value) {
  set_has_buycount();
  buycount_ = value;
}

// -------------------------------------------------------------------

// stReqBuyGold

// optional uint32 charID = 1;
inline bool stReqBuyGold::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBuyGold::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBuyGold::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBuyGold::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqBuyGold::charid() const {
  return charid_;
}
inline void stReqBuyGold::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBuyGoldResult

// optional .Role.stBuyGoldResult.eResult result = 1;
inline bool stBuyGoldResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyGoldResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyGoldResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyGoldResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stBuyGoldResult_eResult stBuyGoldResult::result() const {
  return static_cast< ::Role::stBuyGoldResult_eResult >(result_);
}
inline void stBuyGoldResult::set_result(::Role::stBuyGoldResult_eResult value) {
  assert(::Role::stBuyGoldResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSendImpactHeroInfo

// repeated .Role.stImpactHeroInfo data = 1;
inline int stSendImpactHeroInfo::data_size() const {
  return data_.size();
}
inline void stSendImpactHeroInfo::clear_data() {
  data_.Clear();
}
inline const ::Role::stImpactHeroInfo& stSendImpactHeroInfo::data(int index) const {
  return data_.Get(index);
}
inline ::Role::stImpactHeroInfo* stSendImpactHeroInfo::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::Role::stImpactHeroInfo* stSendImpactHeroInfo::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stImpactHeroInfo >&
stSendImpactHeroInfo::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stImpactHeroInfo >*
stSendImpactHeroInfo::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// stExpBookLevelLimit

// optional .Role.stExpBookLevelLimit.eResult result = 1;
inline bool stExpBookLevelLimit::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stExpBookLevelLimit::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stExpBookLevelLimit::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stExpBookLevelLimit::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stExpBookLevelLimit_eResult stExpBookLevelLimit::result() const {
  return static_cast< ::Role::stExpBookLevelLimit_eResult >(result_);
}
inline void stExpBookLevelLimit::set_result(::Role::stExpBookLevelLimit_eResult value) {
  assert(::Role::stExpBookLevelLimit_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stNotifyPubUniqueID

// optional uint32 uniqueID = 1;
inline bool stNotifyPubUniqueID::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyPubUniqueID::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyPubUniqueID::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyPubUniqueID::clear_uniqueid() {
  uniqueid_ = 0u;
  clear_has_uniqueid();
}
inline ::google::protobuf::uint32 stNotifyPubUniqueID::uniqueid() const {
  return uniqueid_;
}
inline void stNotifyPubUniqueID::set_uniqueid(::google::protobuf::uint32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
}

// -------------------------------------------------------------------

// EnchantItem

// optional uint64 id = 1;
inline bool EnchantItem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EnchantItem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EnchantItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EnchantItem::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 EnchantItem::id() const {
  return id_;
}
inline void EnchantItem::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 num = 2;
inline bool EnchantItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EnchantItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EnchantItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EnchantItem::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 EnchantItem::num() const {
  return num_;
}
inline void EnchantItem::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// stReqEnchant

// optional uint32 bagType = 1;
inline bool stReqEnchant::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEnchant::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEnchant::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEnchant::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqEnchant::bagtype() const {
  return bagtype_;
}
inline void stReqEnchant::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 id = 2;
inline bool stReqEnchant::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqEnchant::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqEnchant::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqEnchant::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 stReqEnchant::id() const {
  return id_;
}
inline void stReqEnchant::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// repeated .Role.EnchantItem item = 3;
inline int stReqEnchant::item_size() const {
  return item_.size();
}
inline void stReqEnchant::clear_item() {
  item_.Clear();
}
inline const ::Role::EnchantItem& stReqEnchant::item(int index) const {
  return item_.Get(index);
}
inline ::Role::EnchantItem* stReqEnchant::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::Role::EnchantItem* stReqEnchant::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::EnchantItem >&
stReqEnchant::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::EnchantItem >*
stReqEnchant::mutable_item() {
  return &item_;
}

// optional uint64 enchantId = 4;
inline bool stReqEnchant::has_enchantid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqEnchant::set_has_enchantid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqEnchant::clear_has_enchantid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqEnchant::clear_enchantid() {
  enchantid_ = GOOGLE_ULONGLONG(0);
  clear_has_enchantid();
}
inline ::google::protobuf::uint64 stReqEnchant::enchantid() const {
  return enchantid_;
}
inline void stReqEnchant::set_enchantid(::google::protobuf::uint64 value) {
  set_has_enchantid();
  enchantid_ = value;
}

// -------------------------------------------------------------------

// stRetEnchant

// optional uint32 bagType = 1;
inline bool stRetEnchant::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetEnchant::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetEnchant::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetEnchant::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stRetEnchant::bagtype() const {
  return bagtype_;
}
inline void stRetEnchant::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 id = 2;
inline bool stRetEnchant::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetEnchant::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetEnchant::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetEnchant::clear_id() {
  id_ = GOOGLE_ULONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::uint64 stRetEnchant::id() const {
  return id_;
}
inline void stRetEnchant::set_id(::google::protobuf::uint64 value) {
  set_has_id();
  id_ = value;
}

// optional .Role.stRetEnchant.eResult result = 3;
inline bool stRetEnchant::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetEnchant::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetEnchant::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetEnchant::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetEnchant_eResult stRetEnchant::result() const {
  return static_cast< ::Role::stRetEnchant_eResult >(result_);
}
inline void stRetEnchant::set_result(::Role::stRetEnchant_eResult value) {
  assert(::Role::stRetEnchant_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional .Role.stEnchantInfo enchant = 4;
inline bool stRetEnchant::has_enchant() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetEnchant::set_has_enchant() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetEnchant::clear_has_enchant() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetEnchant::clear_enchant() {
  if (enchant_ != NULL) enchant_->::Role::stEnchantInfo::Clear();
  clear_has_enchant();
}
inline const ::Role::stEnchantInfo& stRetEnchant::enchant() const {
  return enchant_ != NULL ? *enchant_ : *default_instance_->enchant_;
}
inline ::Role::stEnchantInfo* stRetEnchant::mutable_enchant() {
  set_has_enchant();
  if (enchant_ == NULL) enchant_ = new ::Role::stEnchantInfo;
  return enchant_;
}
inline ::Role::stEnchantInfo* stRetEnchant::release_enchant() {
  clear_has_enchant();
  ::Role::stEnchantInfo* temp = enchant_;
  enchant_ = NULL;
  return temp;
}
inline void stRetEnchant::set_allocated_enchant(::Role::stEnchantInfo* enchant) {
  delete enchant_;
  enchant_ = enchant;
  if (enchant) {
    set_has_enchant();
  } else {
    clear_has_enchant();
  }
}

// -------------------------------------------------------------------

// stReqRecastEnchant

// optional uint32 bagType = 1;
inline bool stReqRecastEnchant::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRecastEnchant::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRecastEnchant::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRecastEnchant::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqRecastEnchant::bagtype() const {
  return bagtype_;
}
inline void stReqRecastEnchant::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqRecastEnchant::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRecastEnchant::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRecastEnchant::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRecastEnchant::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqRecastEnchant::instanceid() const {
  return instanceid_;
}
inline void stReqRecastEnchant::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stRetRecastEnchant

// optional uint32 bagType = 1;
inline bool stRetRecastEnchant::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRecastEnchant::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRecastEnchant::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRecastEnchant::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stRetRecastEnchant::bagtype() const {
  return bagtype_;
}
inline void stRetRecastEnchant::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stRetRecastEnchant::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRecastEnchant::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRecastEnchant::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRecastEnchant::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRetRecastEnchant::instanceid() const {
  return instanceid_;
}
inline void stRetRecastEnchant::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stRetRecastEnchant.eResult result = 3;
inline bool stRetRecastEnchant::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetRecastEnchant::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetRecastEnchant::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetRecastEnchant::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetRecastEnchant_eResult stRetRecastEnchant::result() const {
  return static_cast< ::Role::stRetRecastEnchant_eResult >(result_);
}
inline void stRetRecastEnchant::set_result(::Role::stRetRecastEnchant_eResult value) {
  assert(::Role::stRetRecastEnchant_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqLockEnchant

// optional uint32 bagType = 1;
inline bool stReqLockEnchant::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqLockEnchant::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqLockEnchant::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqLockEnchant::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqLockEnchant::bagtype() const {
  return bagtype_;
}
inline void stReqLockEnchant::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqLockEnchant::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqLockEnchant::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqLockEnchant::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqLockEnchant::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqLockEnchant::instanceid() const {
  return instanceid_;
}
inline void stReqLockEnchant::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 index = 3;
inline bool stReqLockEnchant::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqLockEnchant::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqLockEnchant::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqLockEnchant::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stReqLockEnchant::index() const {
  return index_;
}
inline void stReqLockEnchant::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 isLock = 4;
inline bool stReqLockEnchant::has_islock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqLockEnchant::set_has_islock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqLockEnchant::clear_has_islock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqLockEnchant::clear_islock() {
  islock_ = 0u;
  clear_has_islock();
}
inline ::google::protobuf::uint32 stReqLockEnchant::islock() const {
  return islock_;
}
inline void stReqLockEnchant::set_islock(::google::protobuf::uint32 value) {
  set_has_islock();
  islock_ = value;
}

// -------------------------------------------------------------------

// stRetLockEnchant

// optional uint32 bagType = 1;
inline bool stRetLockEnchant::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetLockEnchant::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetLockEnchant::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetLockEnchant::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stRetLockEnchant::bagtype() const {
  return bagtype_;
}
inline void stRetLockEnchant::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stRetLockEnchant::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetLockEnchant::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetLockEnchant::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetLockEnchant::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRetLockEnchant::instanceid() const {
  return instanceid_;
}
inline void stRetLockEnchant::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 index = 3;
inline bool stRetLockEnchant::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetLockEnchant::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetLockEnchant::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetLockEnchant::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stRetLockEnchant::index() const {
  return index_;
}
inline void stRetLockEnchant::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// optional uint32 isLock = 4;
inline bool stRetLockEnchant::has_islock() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stRetLockEnchant::set_has_islock() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stRetLockEnchant::clear_has_islock() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stRetLockEnchant::clear_islock() {
  islock_ = 0u;
  clear_has_islock();
}
inline ::google::protobuf::uint32 stRetLockEnchant::islock() const {
  return islock_;
}
inline void stRetLockEnchant::set_islock(::google::protobuf::uint32 value) {
  set_has_islock();
  islock_ = value;
}

// optional .Role.stRetLockEnchant.eResult result = 5;
inline bool stRetLockEnchant::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetLockEnchant::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetLockEnchant::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetLockEnchant::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetLockEnchant_eResult stRetLockEnchant::result() const {
  return static_cast< ::Role::stRetLockEnchant_eResult >(result_);
}
inline void stRetLockEnchant::set_result(::Role::stRetLockEnchant_eResult value) {
  assert(::Role::stRetLockEnchant_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stHeroLeagueItem

// optional string name = 1;
inline bool stHeroLeagueItem::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroLeagueItem::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroLeagueItem::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroLeagueItem::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& stHeroLeagueItem::name() const {
  return *name_;
}
inline void stHeroLeagueItem::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stHeroLeagueItem::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void stHeroLeagueItem::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stHeroLeagueItem::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* stHeroLeagueItem::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stHeroLeagueItem::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 level = 2;
inline bool stHeroLeagueItem::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHeroLeagueItem::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHeroLeagueItem::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHeroLeagueItem::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stHeroLeagueItem::level() const {
  return level_;
}
inline void stHeroLeagueItem::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// optional uint32 battlePower = 3;
inline bool stHeroLeagueItem::has_battlepower() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHeroLeagueItem::set_has_battlepower() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHeroLeagueItem::clear_has_battlepower() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHeroLeagueItem::clear_battlepower() {
  battlepower_ = 0u;
  clear_has_battlepower();
}
inline ::google::protobuf::uint32 stHeroLeagueItem::battlepower() const {
  return battlepower_;
}
inline void stHeroLeagueItem::set_battlepower(::google::protobuf::uint32 value) {
  set_has_battlepower();
  battlepower_ = value;
}

// optional uint32 score = 4;
inline bool stHeroLeagueItem::has_score() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stHeroLeagueItem::set_has_score() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stHeroLeagueItem::clear_has_score() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stHeroLeagueItem::clear_score() {
  score_ = 0u;
  clear_has_score();
}
inline ::google::protobuf::uint32 stHeroLeagueItem::score() const {
  return score_;
}
inline void stHeroLeagueItem::set_score(::google::protobuf::uint32 value) {
  set_has_score();
  score_ = value;
}

// -------------------------------------------------------------------

// stHerLeagueResult

// optional .Role.stHeroLeagueItem winer = 1;
inline bool stHerLeagueResult::has_winer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHerLeagueResult::set_has_winer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHerLeagueResult::clear_has_winer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHerLeagueResult::clear_winer() {
  if (winer_ != NULL) winer_->::Role::stHeroLeagueItem::Clear();
  clear_has_winer();
}
inline const ::Role::stHeroLeagueItem& stHerLeagueResult::winer() const {
  return winer_ != NULL ? *winer_ : *default_instance_->winer_;
}
inline ::Role::stHeroLeagueItem* stHerLeagueResult::mutable_winer() {
  set_has_winer();
  if (winer_ == NULL) winer_ = new ::Role::stHeroLeagueItem;
  return winer_;
}
inline ::Role::stHeroLeagueItem* stHerLeagueResult::release_winer() {
  clear_has_winer();
  ::Role::stHeroLeagueItem* temp = winer_;
  winer_ = NULL;
  return temp;
}
inline void stHerLeagueResult::set_allocated_winer(::Role::stHeroLeagueItem* winer) {
  delete winer_;
  winer_ = winer;
  if (winer) {
    set_has_winer();
  } else {
    clear_has_winer();
  }
}

// optional .Role.stHeroLeagueItem loser = 2;
inline bool stHerLeagueResult::has_loser() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHerLeagueResult::set_has_loser() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHerLeagueResult::clear_has_loser() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHerLeagueResult::clear_loser() {
  if (loser_ != NULL) loser_->::Role::stHeroLeagueItem::Clear();
  clear_has_loser();
}
inline const ::Role::stHeroLeagueItem& stHerLeagueResult::loser() const {
  return loser_ != NULL ? *loser_ : *default_instance_->loser_;
}
inline ::Role::stHeroLeagueItem* stHerLeagueResult::mutable_loser() {
  set_has_loser();
  if (loser_ == NULL) loser_ = new ::Role::stHeroLeagueItem;
  return loser_;
}
inline ::Role::stHeroLeagueItem* stHerLeagueResult::release_loser() {
  clear_has_loser();
  ::Role::stHeroLeagueItem* temp = loser_;
  loser_ = NULL;
  return temp;
}
inline void stHerLeagueResult::set_allocated_loser(::Role::stHeroLeagueItem* loser) {
  delete loser_;
  loser_ = loser;
  if (loser) {
    set_has_loser();
  } else {
    clear_has_loser();
  }
}

// optional uint32 winerScore = 3;
inline bool stHerLeagueResult::has_winerscore() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHerLeagueResult::set_has_winerscore() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHerLeagueResult::clear_has_winerscore() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHerLeagueResult::clear_winerscore() {
  winerscore_ = 0u;
  clear_has_winerscore();
}
inline ::google::protobuf::uint32 stHerLeagueResult::winerscore() const {
  return winerscore_;
}
inline void stHerLeagueResult::set_winerscore(::google::protobuf::uint32 value) {
  set_has_winerscore();
  winerscore_ = value;
}

// optional uint32 loserScore = 4;
inline bool stHerLeagueResult::has_loserscore() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stHerLeagueResult::set_has_loserscore() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stHerLeagueResult::clear_has_loserscore() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stHerLeagueResult::clear_loserscore() {
  loserscore_ = 0u;
  clear_has_loserscore();
}
inline ::google::protobuf::uint32 stHerLeagueResult::loserscore() const {
  return loserscore_;
}
inline void stHerLeagueResult::set_loserscore(::google::protobuf::uint32 value) {
  set_has_loserscore();
  loserscore_ = value;
}

// -------------------------------------------------------------------

// stReqHeroRune

// optional uint32 heroID = 1;
inline bool stReqHeroRune::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqHeroRune::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqHeroRune::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqHeroRune::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqHeroRune::heroid() const {
  return heroid_;
}
inline void stReqHeroRune::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stHeroRuneInfo

// optional uint32 itemId = 1;
inline bool stHeroRuneInfo::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stHeroRuneInfo::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stHeroRuneInfo::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stHeroRuneInfo::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stHeroRuneInfo::itemid() const {
  return itemid_;
}
inline void stHeroRuneInfo::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional uint64 instanceID = 2;
inline bool stHeroRuneInfo::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stHeroRuneInfo::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stHeroRuneInfo::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stHeroRuneInfo::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stHeroRuneInfo::instanceid() const {
  return instanceid_;
}
inline void stHeroRuneInfo::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 slot_index = 3;
inline bool stHeroRuneInfo::has_slot_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stHeroRuneInfo::set_has_slot_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stHeroRuneInfo::clear_has_slot_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stHeroRuneInfo::clear_slot_index() {
  slot_index_ = 0u;
  clear_has_slot_index();
}
inline ::google::protobuf::uint32 stHeroRuneInfo::slot_index() const {
  return slot_index_;
}
inline void stHeroRuneInfo::set_slot_index(::google::protobuf::uint32 value) {
  set_has_slot_index();
  slot_index_ = value;
}

// optional uint32 pos = 4;
inline bool stHeroRuneInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stHeroRuneInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stHeroRuneInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stHeroRuneInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stHeroRuneInfo::pos() const {
  return pos_;
}
inline void stHeroRuneInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stRetHeroRune

// optional uint32 heroID = 1;
inline bool stRetHeroRune::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetHeroRune::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetHeroRune::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetHeroRune::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stRetHeroRune::heroid() const {
  return heroid_;
}
inline void stRetHeroRune::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// repeated .Role.stHeroRuneInfo runes = 2;
inline int stRetHeroRune::runes_size() const {
  return runes_.size();
}
inline void stRetHeroRune::clear_runes() {
  runes_.Clear();
}
inline const ::Role::stHeroRuneInfo& stRetHeroRune::runes(int index) const {
  return runes_.Get(index);
}
inline ::Role::stHeroRuneInfo* stRetHeroRune::mutable_runes(int index) {
  return runes_.Mutable(index);
}
inline ::Role::stHeroRuneInfo* stRetHeroRune::add_runes() {
  return runes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >&
stRetHeroRune::runes() const {
  return runes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >*
stRetHeroRune::mutable_runes() {
  return &runes_;
}

// -------------------------------------------------------------------

// stReqAddHeroRune

// optional uint32 heroID = 1;
inline bool stReqAddHeroRune::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAddHeroRune::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAddHeroRune::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAddHeroRune::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqAddHeroRune::heroid() const {
  return heroid_;
}
inline void stReqAddHeroRune::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqAddHeroRune::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqAddHeroRune::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqAddHeroRune::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqAddHeroRune::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqAddHeroRune::instanceid() const {
  return instanceid_;
}
inline void stReqAddHeroRune::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 pos = 3;
inline bool stReqAddHeroRune::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqAddHeroRune::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqAddHeroRune::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqAddHeroRune::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stReqAddHeroRune::pos() const {
  return pos_;
}
inline void stReqAddHeroRune::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stRetAddHeroRune

// optional uint32 heroID = 1;
inline bool stRetAddHeroRune::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetAddHeroRune::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetAddHeroRune::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetAddHeroRune::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stRetAddHeroRune::heroid() const {
  return heroid_;
}
inline void stRetAddHeroRune::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint64 instanceID = 2;
inline bool stRetAddHeroRune::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetAddHeroRune::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetAddHeroRune::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetAddHeroRune::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRetAddHeroRune::instanceid() const {
  return instanceid_;
}
inline void stRetAddHeroRune::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 pos = 3;
inline bool stRetAddHeroRune::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetAddHeroRune::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetAddHeroRune::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetAddHeroRune::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stRetAddHeroRune::pos() const {
  return pos_;
}
inline void stRetAddHeroRune::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// repeated .Role.stHeroRuneInfo runes = 4;
inline int stRetAddHeroRune::runes_size() const {
  return runes_.size();
}
inline void stRetAddHeroRune::clear_runes() {
  runes_.Clear();
}
inline const ::Role::stHeroRuneInfo& stRetAddHeroRune::runes(int index) const {
  return runes_.Get(index);
}
inline ::Role::stHeroRuneInfo* stRetAddHeroRune::mutable_runes(int index) {
  return runes_.Mutable(index);
}
inline ::Role::stHeroRuneInfo* stRetAddHeroRune::add_runes() {
  return runes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >&
stRetAddHeroRune::runes() const {
  return runes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >*
stRetAddHeroRune::mutable_runes() {
  return &runes_;
}

// optional .Role.stRetAddHeroRune.eResult result = 5;
inline bool stRetAddHeroRune::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetAddHeroRune::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetAddHeroRune::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetAddHeroRune::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetAddHeroRune_eResult stRetAddHeroRune::result() const {
  return static_cast< ::Role::stRetAddHeroRune_eResult >(result_);
}
inline void stRetAddHeroRune::set_result(::Role::stRetAddHeroRune_eResult value) {
  assert(::Role::stRetAddHeroRune_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqDelHeroRune

// optional uint32 heroID = 1;
inline bool stReqDelHeroRune::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDelHeroRune::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDelHeroRune::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDelHeroRune::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqDelHeroRune::heroid() const {
  return heroid_;
}
inline void stReqDelHeroRune::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqDelHeroRune::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqDelHeroRune::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqDelHeroRune::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqDelHeroRune::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqDelHeroRune::instanceid() const {
  return instanceid_;
}
inline void stReqDelHeroRune::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 pos = 3;
inline bool stReqDelHeroRune::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqDelHeroRune::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqDelHeroRune::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqDelHeroRune::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stReqDelHeroRune::pos() const {
  return pos_;
}
inline void stReqDelHeroRune::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// -------------------------------------------------------------------

// stRetDelHeroRune

// optional uint32 heroID = 1;
inline bool stRetDelHeroRune::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDelHeroRune::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDelHeroRune::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDelHeroRune::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stRetDelHeroRune::heroid() const {
  return heroid_;
}
inline void stRetDelHeroRune::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint64 instanceID = 2;
inline bool stRetDelHeroRune::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetDelHeroRune::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetDelHeroRune::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetDelHeroRune::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRetDelHeroRune::instanceid() const {
  return instanceid_;
}
inline void stRetDelHeroRune::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 pos = 3;
inline bool stRetDelHeroRune::has_pos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetDelHeroRune::set_has_pos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetDelHeroRune::clear_has_pos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetDelHeroRune::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stRetDelHeroRune::pos() const {
  return pos_;
}
inline void stRetDelHeroRune::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// repeated .Role.stHeroRuneInfo runes = 4;
inline int stRetDelHeroRune::runes_size() const {
  return runes_.size();
}
inline void stRetDelHeroRune::clear_runes() {
  runes_.Clear();
}
inline const ::Role::stHeroRuneInfo& stRetDelHeroRune::runes(int index) const {
  return runes_.Get(index);
}
inline ::Role::stHeroRuneInfo* stRetDelHeroRune::mutable_runes(int index) {
  return runes_.Mutable(index);
}
inline ::Role::stHeroRuneInfo* stRetDelHeroRune::add_runes() {
  return runes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >&
stRetDelHeroRune::runes() const {
  return runes_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stHeroRuneInfo >*
stRetDelHeroRune::mutable_runes() {
  return &runes_;
}

// optional .Role.stRetDelHeroRune.eResult result = 5;
inline bool stRetDelHeroRune::has_result() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stRetDelHeroRune::set_has_result() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stRetDelHeroRune::clear_has_result() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stRetDelHeroRune::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetDelHeroRune_eResult stRetDelHeroRune::result() const {
  return static_cast< ::Role::stRetDelHeroRune_eResult >(result_);
}
inline void stRetDelHeroRune::set_result(::Role::stRetDelHeroRune_eResult value) {
  assert(::Role::stRetDelHeroRune_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRunePieceCombine

// optional uint64 instanceID = 1;
inline bool stReqRunePieceCombine::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRunePieceCombine::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRunePieceCombine::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRunePieceCombine::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqRunePieceCombine::instanceid() const {
  return instanceid_;
}
inline void stReqRunePieceCombine::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stRetRunePieceCombine

// optional uint64 instanceID = 1;
inline bool stRetRunePieceCombine::has_instanceid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRunePieceCombine::set_has_instanceid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRunePieceCombine::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRunePieceCombine::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRetRunePieceCombine::instanceid() const {
  return instanceid_;
}
inline void stRetRunePieceCombine::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 itemId = 2;
inline bool stRetRunePieceCombine::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRunePieceCombine::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRunePieceCombine::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRunePieceCombine::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stRetRunePieceCombine::itemid() const {
  return itemid_;
}
inline void stRetRunePieceCombine::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional .Role.stRetRunePieceCombine.eResult result = 3;
inline bool stRetRunePieceCombine::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetRunePieceCombine::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetRunePieceCombine::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetRunePieceCombine::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetRunePieceCombine_eResult stRetRunePieceCombine::result() const {
  return static_cast< ::Role::stRetRunePieceCombine_eResult >(result_);
}
inline void stRetRunePieceCombine::set_result(::Role::stRetRunePieceCombine_eResult value) {
  assert(::Role::stRetRunePieceCombine_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRuneIntensify

// optional uint32 bagType = 1;
inline bool stReqRuneIntensify::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRuneIntensify::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRuneIntensify::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRuneIntensify::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqRuneIntensify::bagtype() const {
  return bagtype_;
}
inline void stReqRuneIntensify::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqRuneIntensify::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRuneIntensify::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRuneIntensify::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRuneIntensify::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqRuneIntensify::instanceid() const {
  return instanceid_;
}
inline void stReqRuneIntensify::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// repeated uint64 eatInstanceID = 3;
inline int stReqRuneIntensify::eatinstanceid_size() const {
  return eatinstanceid_.size();
}
inline void stReqRuneIntensify::clear_eatinstanceid() {
  eatinstanceid_.Clear();
}
inline ::google::protobuf::uint64 stReqRuneIntensify::eatinstanceid(int index) const {
  return eatinstanceid_.Get(index);
}
inline void stReqRuneIntensify::set_eatinstanceid(int index, ::google::protobuf::uint64 value) {
  eatinstanceid_.Set(index, value);
}
inline void stReqRuneIntensify::add_eatinstanceid(::google::protobuf::uint64 value) {
  eatinstanceid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
stReqRuneIntensify::eatinstanceid() const {
  return eatinstanceid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
stReqRuneIntensify::mutable_eatinstanceid() {
  return &eatinstanceid_;
}

// optional uint32 heroID = 4;
inline bool stReqRuneIntensify::has_heroid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stReqRuneIntensify::set_has_heroid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stReqRuneIntensify::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stReqRuneIntensify::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqRuneIntensify::heroid() const {
  return heroid_;
}
inline void stReqRuneIntensify::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stRetRuneIntensify

// optional uint32 bagType = 1;
inline bool stRetRuneIntensify::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRuneIntensify::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRuneIntensify::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRuneIntensify::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stRetRuneIntensify::bagtype() const {
  return bagtype_;
}
inline void stRetRuneIntensify::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stRetRuneIntensify::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRuneIntensify::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRuneIntensify::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRuneIntensify::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRetRuneIntensify::instanceid() const {
  return instanceid_;
}
inline void stRetRuneIntensify::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stRetRuneIntensify.eResult result = 3;
inline bool stRetRuneIntensify::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetRuneIntensify::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetRuneIntensify::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetRuneIntensify::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetRuneIntensify_eResult stRetRuneIntensify::result() const {
  return static_cast< ::Role::stRetRuneIntensify_eResult >(result_);
}
inline void stRetRuneIntensify::set_result(::Role::stRetRuneIntensify_eResult value) {
  assert(::Role::stRetRuneIntensify_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRuneEvolve

// optional uint32 bagType = 1;
inline bool stReqRuneEvolve::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRuneEvolve::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRuneEvolve::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRuneEvolve::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stReqRuneEvolve::bagtype() const {
  return bagtype_;
}
inline void stReqRuneEvolve::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stReqRuneEvolve::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqRuneEvolve::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqRuneEvolve::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqRuneEvolve::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stReqRuneEvolve::instanceid() const {
  return instanceid_;
}
inline void stReqRuneEvolve::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional uint32 heroID = 3;
inline bool stReqRuneEvolve::has_heroid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqRuneEvolve::set_has_heroid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqRuneEvolve::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqRuneEvolve::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stReqRuneEvolve::heroid() const {
  return heroid_;
}
inline void stReqRuneEvolve::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// -------------------------------------------------------------------

// stRetRuneEvolve

// optional uint32 bagType = 1;
inline bool stRetRuneEvolve::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRuneEvolve::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRuneEvolve::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRuneEvolve::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stRetRuneEvolve::bagtype() const {
  return bagtype_;
}
inline void stRetRuneEvolve::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint64 instanceID = 2;
inline bool stRetRuneEvolve::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRetRuneEvolve::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRetRuneEvolve::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRetRuneEvolve::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stRetRuneEvolve::instanceid() const {
  return instanceid_;
}
inline void stRetRuneEvolve::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional .Role.stRetRuneEvolve.eResult result = 3;
inline bool stRetRuneEvolve::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stRetRuneEvolve::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stRetRuneEvolve::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stRetRuneEvolve::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetRuneEvolve_eResult stRetRuneEvolve::result() const {
  return static_cast< ::Role::stRetRuneEvolve_eResult >(result_);
}
inline void stRetRuneEvolve::set_result(::Role::stRetRuneEvolve_eResult value) {
  assert(::Role::stRetRuneEvolve_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqExtractGem

// optional uint32 id = 1;
inline bool stReqExtractGem::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqExtractGem::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqExtractGem::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqExtractGem::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqExtractGem::id() const {
  return id_;
}
inline void stReqExtractGem::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// repeated uint64 pay = 2;
inline int stReqExtractGem::pay_size() const {
  return pay_.size();
}
inline void stReqExtractGem::clear_pay() {
  pay_.Clear();
}
inline ::google::protobuf::uint64 stReqExtractGem::pay(int index) const {
  return pay_.Get(index);
}
inline void stReqExtractGem::set_pay(int index, ::google::protobuf::uint64 value) {
  pay_.Set(index, value);
}
inline void stReqExtractGem::add_pay(::google::protobuf::uint64 value) {
  pay_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
stReqExtractGem::pay() const {
  return pay_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
stReqExtractGem::mutable_pay() {
  return &pay_;
}

// optional uint64 successpay = 3;
inline bool stReqExtractGem::has_successpay() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqExtractGem::set_has_successpay() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqExtractGem::clear_has_successpay() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqExtractGem::clear_successpay() {
  successpay_ = GOOGLE_ULONGLONG(0);
  clear_has_successpay();
}
inline ::google::protobuf::uint64 stReqExtractGem::successpay() const {
  return successpay_;
}
inline void stReqExtractGem::set_successpay(::google::protobuf::uint64 value) {
  set_has_successpay();
  successpay_ = value;
}

// -------------------------------------------------------------------

// ExtractGemResult

// optional .Role.ExtractGemResult.Result result = 1;
inline bool ExtractGemResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExtractGemResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExtractGemResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExtractGemResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::ExtractGemResult_Result ExtractGemResult::result() const {
  return static_cast< ::Role::ExtractGemResult_Result >(result_);
}
inline void ExtractGemResult::set_result(::Role::ExtractGemResult_Result value) {
  assert(::Role::ExtractGemResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 id = 2;
inline bool ExtractGemResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExtractGemResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExtractGemResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExtractGemResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 ExtractGemResult::id() const {
  return id_;
}
inline void ExtractGemResult::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stReqWedding

// optional uint32 id = 1;
inline bool stReqWedding::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqWedding::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqWedding::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqWedding::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqWedding::id() const {
  return id_;
}
inline void stReqWedding::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 cfg1 = 2;
inline bool stReqWedding::has_cfg1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqWedding::set_has_cfg1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqWedding::clear_has_cfg1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqWedding::clear_cfg1() {
  cfg1_ = 0u;
  clear_has_cfg1();
}
inline ::google::protobuf::uint32 stReqWedding::cfg1() const {
  return cfg1_;
}
inline void stReqWedding::set_cfg1(::google::protobuf::uint32 value) {
  set_has_cfg1();
  cfg1_ = value;
}

// optional uint32 cfg2 = 3;
inline bool stReqWedding::has_cfg2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqWedding::set_has_cfg2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqWedding::clear_has_cfg2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqWedding::clear_cfg2() {
  cfg2_ = 0u;
  clear_has_cfg2();
}
inline ::google::protobuf::uint32 stReqWedding::cfg2() const {
  return cfg2_;
}
inline void stReqWedding::set_cfg2(::google::protobuf::uint32 value) {
  set_has_cfg2();
  cfg2_ = value;
}

// -------------------------------------------------------------------

// stReqAgreeWedding

// optional uint32 id = 1;
inline bool stReqAgreeWedding::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAgreeWedding::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAgreeWedding::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAgreeWedding::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqAgreeWedding::id() const {
  return id_;
}
inline void stReqAgreeWedding::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 cfg1 = 2;
inline bool stReqAgreeWedding::has_cfg1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqAgreeWedding::set_has_cfg1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqAgreeWedding::clear_has_cfg1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqAgreeWedding::clear_cfg1() {
  cfg1_ = 0u;
  clear_has_cfg1();
}
inline ::google::protobuf::uint32 stReqAgreeWedding::cfg1() const {
  return cfg1_;
}
inline void stReqAgreeWedding::set_cfg1(::google::protobuf::uint32 value) {
  set_has_cfg1();
  cfg1_ = value;
}

// optional uint32 cfg2 = 3;
inline bool stReqAgreeWedding::has_cfg2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stReqAgreeWedding::set_has_cfg2() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stReqAgreeWedding::clear_has_cfg2() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stReqAgreeWedding::clear_cfg2() {
  cfg2_ = 0u;
  clear_has_cfg2();
}
inline ::google::protobuf::uint32 stReqAgreeWedding::cfg2() const {
  return cfg2_;
}
inline void stReqAgreeWedding::set_cfg2(::google::protobuf::uint32 value) {
  set_has_cfg2();
  cfg2_ = value;
}

// -------------------------------------------------------------------

// ResultWedding

// optional .Role.ResultWedding.Result result = 1;
inline bool ResultWedding::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultWedding::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultWedding::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultWedding::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::ResultWedding_Result ResultWedding::result() const {
  return static_cast< ::Role::ResultWedding_Result >(result_);
}
inline void ResultWedding::set_result(::Role::ResultWedding_Result value) {
  assert(::Role::ResultWedding_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqInviteToRoom

// optional uint32 id = 1;
inline bool stReqInviteToRoom::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqInviteToRoom::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqInviteToRoom::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqInviteToRoom::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqInviteToRoom::id() const {
  return id_;
}
inline void stReqInviteToRoom::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// NotifyEnterWedding

// optional uint32 id = 1;
inline bool NotifyEnterWedding::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyEnterWedding::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyEnterWedding::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyEnterWedding::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 NotifyEnterWedding::id() const {
  return id_;
}
inline void NotifyEnterWedding::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stReqAgreeEnterWedding

// optional .Role.stReqAgreeEnterWedding.Result result = 1;
inline bool stReqAgreeEnterWedding::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAgreeEnterWedding::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAgreeEnterWedding::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAgreeEnterWedding::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stReqAgreeEnterWedding_Result stReqAgreeEnterWedding::result() const {
  return static_cast< ::Role::stReqAgreeEnterWedding_Result >(result_);
}
inline void stReqAgreeEnterWedding::set_result(::Role::stReqAgreeEnterWedding_Result value) {
  assert(::Role::stReqAgreeEnterWedding_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 id = 2;
inline bool stReqAgreeEnterWedding::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqAgreeEnterWedding::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqAgreeEnterWedding::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqAgreeEnterWedding::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqAgreeEnterWedding::id() const {
  return id_;
}
inline void stReqAgreeEnterWedding::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// ResultEnterWedding

// optional .Role.ResultEnterWedding.Result result = 1;
inline bool ResultEnterWedding::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultEnterWedding::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultEnterWedding::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultEnterWedding::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::ResultEnterWedding_Result ResultEnterWedding::result() const {
  return static_cast< ::Role::ResultEnterWedding_Result >(result_);
}
inline void ResultEnterWedding::set_result(::Role::ResultEnterWedding_Result value) {
  assert(::Role::ResultEnterWedding_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// MarryInviterPlace

// optional .Role.MarryInviterPlace.State state = 1;
inline bool MarryInviterPlace::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryInviterPlace::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryInviterPlace::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryInviterPlace::clear_state() {
  state_ = 1;
  clear_has_state();
}
inline ::Role::MarryInviterPlace_State MarryInviterPlace::state() const {
  return static_cast< ::Role::MarryInviterPlace_State >(state_);
}
inline void MarryInviterPlace::set_state(::Role::MarryInviterPlace_State value) {
  assert(::Role::MarryInviterPlace_State_IsValid(value));
  set_has_state();
  state_ = value;
}

// optional uint32 cfg1 = 2;
inline bool MarryInviterPlace::has_cfg1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryInviterPlace::set_has_cfg1() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryInviterPlace::clear_has_cfg1() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryInviterPlace::clear_cfg1() {
  cfg1_ = 0u;
  clear_has_cfg1();
}
inline ::google::protobuf::uint32 MarryInviterPlace::cfg1() const {
  return cfg1_;
}
inline void MarryInviterPlace::set_cfg1(::google::protobuf::uint32 value) {
  set_has_cfg1();
  cfg1_ = value;
}

// repeated uint32 id = 3;
inline int MarryInviterPlace::id_size() const {
  return id_.size();
}
inline void MarryInviterPlace::clear_id() {
  id_.Clear();
}
inline ::google::protobuf::uint32 MarryInviterPlace::id(int index) const {
  return id_.Get(index);
}
inline void MarryInviterPlace::set_id(int index, ::google::protobuf::uint32 value) {
  id_.Set(index, value);
}
inline void MarryInviterPlace::add_id(::google::protobuf::uint32 value) {
  id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MarryInviterPlace::id() const {
  return id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MarryInviterPlace::mutable_id() {
  return &id_;
}

// optional string name1 = 4;
inline bool MarryInviterPlace::has_name1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarryInviterPlace::set_has_name1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarryInviterPlace::clear_has_name1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarryInviterPlace::clear_name1() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    name1_->clear();
  }
  clear_has_name1();
}
inline const ::std::string& MarryInviterPlace::name1() const {
  return *name1_;
}
inline void MarryInviterPlace::set_name1(const ::std::string& value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void MarryInviterPlace::set_name1(const char* value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void MarryInviterPlace::set_name1(const char* value, size_t size) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarryInviterPlace::mutable_name1() {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  return name1_;
}
inline ::std::string* MarryInviterPlace::release_name1() {
  clear_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name1_;
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarryInviterPlace::set_allocated_name1(::std::string* name1) {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name1) {
    set_has_name1();
    name1_ = name1;
  } else {
    clear_has_name1();
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name2 = 5;
inline bool MarryInviterPlace::has_name2() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarryInviterPlace::set_has_name2() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarryInviterPlace::clear_has_name2() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarryInviterPlace::clear_name2() {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    name2_->clear();
  }
  clear_has_name2();
}
inline const ::std::string& MarryInviterPlace::name2() const {
  return *name2_;
}
inline void MarryInviterPlace::set_name2(const ::std::string& value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void MarryInviterPlace::set_name2(const char* value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void MarryInviterPlace::set_name2(const char* value, size_t size) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarryInviterPlace::mutable_name2() {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  return name2_;
}
inline ::std::string* MarryInviterPlace::release_name2() {
  clear_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name2_;
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarryInviterPlace::set_allocated_name2(::std::string* name2) {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name2) {
    set_has_name2();
    name2_ = name2;
  } else {
    clear_has_name2();
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 time = 6;
inline bool MarryInviterPlace::has_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarryInviterPlace::set_has_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarryInviterPlace::clear_has_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarryInviterPlace::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 MarryInviterPlace::time() const {
  return time_;
}
inline void MarryInviterPlace::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// stReqDivorce

// optional bool isForce = 1;
inline bool stReqDivorce::has_isforce() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDivorce::set_has_isforce() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDivorce::clear_has_isforce() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDivorce::clear_isforce() {
  isforce_ = false;
  clear_has_isforce();
}
inline bool stReqDivorce::isforce() const {
  return isforce_;
}
inline void stReqDivorce::set_isforce(bool value) {
  set_has_isforce();
  isforce_ = value;
}

// optional uint32 coupleId = 2;
inline bool stReqDivorce::has_coupleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqDivorce::set_has_coupleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqDivorce::clear_has_coupleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqDivorce::clear_coupleid() {
  coupleid_ = 0u;
  clear_has_coupleid();
}
inline ::google::protobuf::uint32 stReqDivorce::coupleid() const {
  return coupleid_;
}
inline void stReqDivorce::set_coupleid(::google::protobuf::uint32 value) {
  set_has_coupleid();
  coupleid_ = value;
}

// -------------------------------------------------------------------

// RejectDivorce

// optional .Role.RejectDivorce.Result result = 1;
inline bool RejectDivorce::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RejectDivorce::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RejectDivorce::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RejectDivorce::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::RejectDivorce_Result RejectDivorce::result() const {
  return static_cast< ::Role::RejectDivorce_Result >(result_);
}
inline void RejectDivorce::set_result(::Role::RejectDivorce_Result value) {
  assert(::Role::RejectDivorce_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqRejectDivorce

// optional bool refused = 1;
inline bool stReqRejectDivorce::has_refused() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRejectDivorce::set_has_refused() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRejectDivorce::clear_has_refused() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRejectDivorce::clear_refused() {
  refused_ = false;
  clear_has_refused();
}
inline bool stReqRejectDivorce::refused() const {
  return refused_;
}
inline void stReqRejectDivorce::set_refused(bool value) {
  set_has_refused();
  refused_ = value;
}

// -------------------------------------------------------------------

// stRetRejectDivorce

// optional .Role.stRetRejectDivorce.Result result = 1;
inline bool stRetRejectDivorce::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetRejectDivorce::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetRejectDivorce::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetRejectDivorce::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetRejectDivorce_Result stRetRejectDivorce::result() const {
  return static_cast< ::Role::stRetRejectDivorce_Result >(result_);
}
inline void stRetRejectDivorce::set_result(::Role::stRetRejectDivorce_Result value) {
  assert(::Role::stRetRejectDivorce_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// BoardcastMarryInfo

// optional string name1 = 1;
inline bool BoardcastMarryInfo::has_name1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoardcastMarryInfo::set_has_name1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoardcastMarryInfo::clear_has_name1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoardcastMarryInfo::clear_name1() {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    name1_->clear();
  }
  clear_has_name1();
}
inline const ::std::string& BoardcastMarryInfo::name1() const {
  return *name1_;
}
inline void BoardcastMarryInfo::set_name1(const ::std::string& value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void BoardcastMarryInfo::set_name1(const char* value) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(value);
}
inline void BoardcastMarryInfo::set_name1(const char* value, size_t size) {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  name1_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BoardcastMarryInfo::mutable_name1() {
  set_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    name1_ = new ::std::string;
  }
  return name1_;
}
inline ::std::string* BoardcastMarryInfo::release_name1() {
  clear_has_name1();
  if (name1_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name1_;
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BoardcastMarryInfo::set_allocated_name1(::std::string* name1) {
  if (name1_ != &::google::protobuf::internal::kEmptyString) {
    delete name1_;
  }
  if (name1) {
    set_has_name1();
    name1_ = name1;
  } else {
    clear_has_name1();
    name1_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string name2 = 2;
inline bool BoardcastMarryInfo::has_name2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoardcastMarryInfo::set_has_name2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoardcastMarryInfo::clear_has_name2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoardcastMarryInfo::clear_name2() {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    name2_->clear();
  }
  clear_has_name2();
}
inline const ::std::string& BoardcastMarryInfo::name2() const {
  return *name2_;
}
inline void BoardcastMarryInfo::set_name2(const ::std::string& value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void BoardcastMarryInfo::set_name2(const char* value) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(value);
}
inline void BoardcastMarryInfo::set_name2(const char* value, size_t size) {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  name2_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BoardcastMarryInfo::mutable_name2() {
  set_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    name2_ = new ::std::string;
  }
  return name2_;
}
inline ::std::string* BoardcastMarryInfo::release_name2() {
  clear_has_name2();
  if (name2_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name2_;
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BoardcastMarryInfo::set_allocated_name2(::std::string* name2) {
  if (name2_ != &::google::protobuf::internal::kEmptyString) {
    delete name2_;
  }
  if (name2) {
    set_has_name2();
    name2_ = name2;
  } else {
    clear_has_name2();
    name2_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqUseFirework

// optional uint32 fire = 1;
inline bool stReqUseFirework::has_fire() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUseFirework::set_has_fire() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUseFirework::clear_has_fire() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUseFirework::clear_fire() {
  fire_ = 0u;
  clear_has_fire();
}
inline ::google::protobuf::uint32 stReqUseFirework::fire() const {
  return fire_;
}
inline void stReqUseFirework::set_fire(::google::protobuf::uint32 value) {
  set_has_fire();
  fire_ = value;
}

// optional uint32 id = 2;
inline bool stReqUseFirework::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqUseFirework::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqUseFirework::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqUseFirework::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqUseFirework::id() const {
  return id_;
}
inline void stReqUseFirework::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// ResultUseFirework

// optional .Role.ResultUseFirework.Result result = 1;
inline bool ResultUseFirework::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultUseFirework::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultUseFirework::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultUseFirework::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::ResultUseFirework_Result ResultUseFirework::result() const {
  return static_cast< ::Role::ResultUseFirework_Result >(result_);
}
inline void ResultUseFirework::set_result(::Role::ResultUseFirework_Result value) {
  assert(::Role::ResultUseFirework_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// NotifyFirework

// optional uint32 fire = 1;
inline bool NotifyFirework::has_fire() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NotifyFirework::set_has_fire() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NotifyFirework::clear_has_fire() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NotifyFirework::clear_fire() {
  fire_ = 0u;
  clear_has_fire();
}
inline ::google::protobuf::uint32 NotifyFirework::fire() const {
  return fire_;
}
inline void NotifyFirework::set_fire(::google::protobuf::uint32 value) {
  set_has_fire();
  fire_ = value;
}

// optional string name = 2;
inline bool NotifyFirework::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NotifyFirework::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NotifyFirework::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NotifyFirework::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NotifyFirework::name() const {
  return *name_;
}
inline void NotifyFirework::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NotifyFirework::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NotifyFirework::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NotifyFirework::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NotifyFirework::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NotifyFirework::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqTakeCandy

// optional uint32 data = 1;
inline bool stReqTakeCandy::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqTakeCandy::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqTakeCandy::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqTakeCandy::clear_data() {
  data_ = 0u;
  clear_has_data();
}
inline ::google::protobuf::uint32 stReqTakeCandy::data() const {
  return data_;
}
inline void stReqTakeCandy::set_data(::google::protobuf::uint32 value) {
  set_has_data();
  data_ = value;
}

// -------------------------------------------------------------------

// ResultTakeCandy

// optional .Role.ResultTakeCandy.Result result = 1;
inline bool ResultTakeCandy::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultTakeCandy::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultTakeCandy::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultTakeCandy::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::ResultTakeCandy_Result ResultTakeCandy::result() const {
  return static_cast< ::Role::ResultTakeCandy_Result >(result_);
}
inline void ResultTakeCandy::set_result(::Role::ResultTakeCandy_Result value) {
  assert(::Role::ResultTakeCandy_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqBuyFirework

// optional uint32 id = 1;
inline bool stReqBuyFirework::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBuyFirework::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBuyFirework::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBuyFirework::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqBuyFirework::id() const {
  return id_;
}
inline void stReqBuyFirework::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// ResultBuyFirework

// optional .Role.ResultBuyFirework.Result result = 1;
inline bool ResultBuyFirework::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultBuyFirework::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultBuyFirework::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultBuyFirework::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::ResultBuyFirework_Result ResultBuyFirework::result() const {
  return static_cast< ::Role::ResultBuyFirework_Result >(result_);
}
inline void ResultBuyFirework::set_result(::Role::ResultBuyFirework_Result value) {
  assert(::Role::ResultBuyFirework_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqEnterWeddingAlone

// optional uint32 data = 1;
inline bool stReqEnterWeddingAlone::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqEnterWeddingAlone::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqEnterWeddingAlone::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqEnterWeddingAlone::clear_data() {
  data_ = 0u;
  clear_has_data();
}
inline ::google::protobuf::uint32 stReqEnterWeddingAlone::data() const {
  return data_;
}
inline void stReqEnterWeddingAlone::set_data(::google::protobuf::uint32 value) {
  set_has_data();
  data_ = value;
}

// -------------------------------------------------------------------

// ResultEnterWeddingAlone

// optional .Role.ResultEnterWeddingAlone.Result result = 1;
inline bool ResultEnterWeddingAlone::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultEnterWeddingAlone::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultEnterWeddingAlone::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultEnterWeddingAlone::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::ResultEnterWeddingAlone_Result ResultEnterWeddingAlone::result() const {
  return static_cast< ::Role::ResultEnterWeddingAlone_Result >(result_);
}
inline void ResultEnterWeddingAlone::set_result(::Role::ResultEnterWeddingAlone_Result value) {
  assert(::Role::ResultEnterWeddingAlone_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqQuitWeddingScene

// optional uint32 levelId = 1;
inline bool stReqQuitWeddingScene::has_levelid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqQuitWeddingScene::set_has_levelid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqQuitWeddingScene::clear_has_levelid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqQuitWeddingScene::clear_levelid() {
  levelid_ = 0u;
  clear_has_levelid();
}
inline ::google::protobuf::uint32 stReqQuitWeddingScene::levelid() const {
  return levelid_;
}
inline void stReqQuitWeddingScene::set_levelid(::google::protobuf::uint32 value) {
  set_has_levelid();
  levelid_ = value;
}

// -------------------------------------------------------------------

// stRetQuitWeddingScene

// optional .Role.stRetQuitWeddingScene.Result result = 1;
inline bool stRetQuitWeddingScene::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetQuitWeddingScene::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetQuitWeddingScene::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetQuitWeddingScene::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetQuitWeddingScene_Result stRetQuitWeddingScene::result() const {
  return static_cast< ::Role::stRetQuitWeddingScene_Result >(result_);
}
inline void stRetQuitWeddingScene::set_result(::Role::stRetQuitWeddingScene_Result value) {
  assert(::Role::stRetQuitWeddingScene_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stNotifyFriendAction

// optional bool in = 1;
inline bool stNotifyFriendAction::has_in() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNotifyFriendAction::set_has_in() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNotifyFriendAction::clear_has_in() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNotifyFriendAction::clear_in() {
  in_ = false;
  clear_has_in();
}
inline bool stNotifyFriendAction::in() const {
  return in_;
}
inline void stNotifyFriendAction::set_in(bool value) {
  set_has_in();
  in_ = value;
}

// optional uint32 charid = 2;
inline bool stNotifyFriendAction::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stNotifyFriendAction::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stNotifyFriendAction::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stNotifyFriendAction::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stNotifyFriendAction::charid() const {
  return charid_;
}
inline void stNotifyFriendAction::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stSendCharCreateTime

// optional string createTimeStr = 1;
inline bool stSendCharCreateTime::has_createtimestr() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSendCharCreateTime::set_has_createtimestr() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSendCharCreateTime::clear_has_createtimestr() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSendCharCreateTime::clear_createtimestr() {
  if (createtimestr_ != &::google::protobuf::internal::kEmptyString) {
    createtimestr_->clear();
  }
  clear_has_createtimestr();
}
inline const ::std::string& stSendCharCreateTime::createtimestr() const {
  return *createtimestr_;
}
inline void stSendCharCreateTime::set_createtimestr(const ::std::string& value) {
  set_has_createtimestr();
  if (createtimestr_ == &::google::protobuf::internal::kEmptyString) {
    createtimestr_ = new ::std::string;
  }
  createtimestr_->assign(value);
}
inline void stSendCharCreateTime::set_createtimestr(const char* value) {
  set_has_createtimestr();
  if (createtimestr_ == &::google::protobuf::internal::kEmptyString) {
    createtimestr_ = new ::std::string;
  }
  createtimestr_->assign(value);
}
inline void stSendCharCreateTime::set_createtimestr(const char* value, size_t size) {
  set_has_createtimestr();
  if (createtimestr_ == &::google::protobuf::internal::kEmptyString) {
    createtimestr_ = new ::std::string;
  }
  createtimestr_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* stSendCharCreateTime::mutable_createtimestr() {
  set_has_createtimestr();
  if (createtimestr_ == &::google::protobuf::internal::kEmptyString) {
    createtimestr_ = new ::std::string;
  }
  return createtimestr_;
}
inline ::std::string* stSendCharCreateTime::release_createtimestr() {
  clear_has_createtimestr();
  if (createtimestr_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = createtimestr_;
    createtimestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void stSendCharCreateTime::set_allocated_createtimestr(::std::string* createtimestr) {
  if (createtimestr_ != &::google::protobuf::internal::kEmptyString) {
    delete createtimestr_;
  }
  if (createtimestr) {
    set_has_createtimestr();
    createtimestr_ = createtimestr;
  } else {
    clear_has_createtimestr();
    createtimestr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// stReqDrawWeddingRing

// optional uint32 charId = 1;
inline bool stReqDrawWeddingRing::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqDrawWeddingRing::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqDrawWeddingRing::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqDrawWeddingRing::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqDrawWeddingRing::charid() const {
  return charid_;
}
inline void stReqDrawWeddingRing::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRetDrawWeddingRing

// optional .Role.stRetDrawWeddingRing.Result result = 1;
inline bool stRetDrawWeddingRing::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRetDrawWeddingRing::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRetDrawWeddingRing::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRetDrawWeddingRing::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRetDrawWeddingRing_Result stRetDrawWeddingRing::result() const {
  return static_cast< ::Role::stRetDrawWeddingRing_Result >(result_);
}
inline void stRetDrawWeddingRing::set_result(::Role::stRetDrawWeddingRing_Result value) {
  assert(::Role::stRetDrawWeddingRing_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqBuyNum

// optional uint32 charId = 1;
inline bool stReqBuyNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqBuyNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqBuyNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqBuyNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqBuyNum::charid() const {
  return charid_;
}
inline void stReqBuyNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stBuyNumResult

// optional uint32 buyNum = 1;
inline bool stBuyNumResult::has_buynum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stBuyNumResult::set_has_buynum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stBuyNumResult::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stBuyNumResult::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 stBuyNumResult::buynum() const {
  return buynum_;
}
inline void stBuyNumResult::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
}

// -------------------------------------------------------------------

// stReqRefreshNum

// optional uint32 charId = 1;
inline bool stReqRefreshNum::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRefreshNum::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRefreshNum::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRefreshNum::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRefreshNum::charid() const {
  return charid_;
}
inline void stReqRefreshNum::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRefreshNumResult

// optional uint32 refreshNum = 1;
inline bool stRefreshNumResult::has_refreshnum() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshNumResult::set_has_refreshnum() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshNumResult::clear_has_refreshnum() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshNumResult::clear_refreshnum() {
  refreshnum_ = 0u;
  clear_has_refreshnum();
}
inline ::google::protobuf::uint32 stRefreshNumResult::refreshnum() const {
  return refreshnum_;
}
inline void stRefreshNumResult::set_refreshnum(::google::protobuf::uint32 value) {
  set_has_refreshnum();
  refreshnum_ = value;
}

// optional uint32 diamondRefreshNum = 2;
inline bool stRefreshNumResult::has_diamondrefreshnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stRefreshNumResult::set_has_diamondrefreshnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stRefreshNumResult::clear_has_diamondrefreshnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stRefreshNumResult::clear_diamondrefreshnum() {
  diamondrefreshnum_ = 0u;
  clear_has_diamondrefreshnum();
}
inline ::google::protobuf::uint32 stRefreshNumResult::diamondrefreshnum() const {
  return diamondrefreshnum_;
}
inline void stRefreshNumResult::set_diamondrefreshnum(::google::protobuf::uint32 value) {
  set_has_diamondrefreshnum();
  diamondrefreshnum_ = value;
}

// -------------------------------------------------------------------

// stReqColumnList

// optional .Role.eColumn type = 1;
inline bool stReqColumnList::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqColumnList::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqColumnList::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqColumnList::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Role::eColumn stReqColumnList::type() const {
  return static_cast< ::Role::eColumn >(type_);
}
inline void stReqColumnList::set_type(::Role::eColumn value) {
  assert(::Role::eColumn_IsValid(value));
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// stItemInfo

// optional uint32 uniqueID = 1;
inline bool stItemInfo::has_uniqueid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stItemInfo::set_has_uniqueid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stItemInfo::clear_has_uniqueid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stItemInfo::clear_uniqueid() {
  uniqueid_ = 0u;
  clear_has_uniqueid();
}
inline ::google::protobuf::uint32 stItemInfo::uniqueid() const {
  return uniqueid_;
}
inline void stItemInfo::set_uniqueid(::google::protobuf::uint32 value) {
  set_has_uniqueid();
  uniqueid_ = value;
}

// optional uint32 itemNum = 2;
inline bool stItemInfo::has_itemnum() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stItemInfo::set_has_itemnum() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stItemInfo::clear_has_itemnum() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stItemInfo::clear_itemnum() {
  itemnum_ = 0u;
  clear_has_itemnum();
}
inline ::google::protobuf::uint32 stItemInfo::itemnum() const {
  return itemnum_;
}
inline void stItemInfo::set_itemnum(::google::protobuf::uint32 value) {
  set_has_itemnum();
  itemnum_ = value;
}

// optional uint32 costResType = 3;
inline bool stItemInfo::has_costrestype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stItemInfo::set_has_costrestype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stItemInfo::clear_has_costrestype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stItemInfo::clear_costrestype() {
  costrestype_ = 0u;
  clear_has_costrestype();
}
inline ::google::protobuf::uint32 stItemInfo::costrestype() const {
  return costrestype_;
}
inline void stItemInfo::set_costrestype(::google::protobuf::uint32 value) {
  set_has_costrestype();
  costrestype_ = value;
}

// optional uint32 itemPrice = 4;
inline bool stItemInfo::has_itemprice() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stItemInfo::set_has_itemprice() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stItemInfo::clear_has_itemprice() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stItemInfo::clear_itemprice() {
  itemprice_ = 0u;
  clear_has_itemprice();
}
inline ::google::protobuf::uint32 stItemInfo::itemprice() const {
  return itemprice_;
}
inline void stItemInfo::set_itemprice(::google::protobuf::uint32 value) {
  set_has_itemprice();
  itemprice_ = value;
}

// optional uint32 buyNum = 5;
inline bool stItemInfo::has_buynum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stItemInfo::set_has_buynum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stItemInfo::clear_has_buynum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stItemInfo::clear_buynum() {
  buynum_ = 0u;
  clear_has_buynum();
}
inline ::google::protobuf::uint32 stItemInfo::buynum() const {
  return buynum_;
}
inline void stItemInfo::set_buynum(::google::protobuf::uint32 value) {
  set_has_buynum();
  buynum_ = value;
}

// -------------------------------------------------------------------

// stColumnListResult

// optional .Role.stColumnListResult.eResult result = 1;
inline bool stColumnListResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stColumnListResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stColumnListResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stColumnListResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stColumnListResult_eResult stColumnListResult::result() const {
  return static_cast< ::Role::stColumnListResult_eResult >(result_);
}
inline void stColumnListResult::set_result(::Role::stColumnListResult_eResult value) {
  assert(::Role::stColumnListResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// repeated .Role.stShopItem shopList = 2;
inline int stColumnListResult::shoplist_size() const {
  return shoplist_.size();
}
inline void stColumnListResult::clear_shoplist() {
  shoplist_.Clear();
}
inline const ::Role::stShopItem& stColumnListResult::shoplist(int index) const {
  return shoplist_.Get(index);
}
inline ::Role::stShopItem* stColumnListResult::mutable_shoplist(int index) {
  return shoplist_.Mutable(index);
}
inline ::Role::stShopItem* stColumnListResult::add_shoplist() {
  return shoplist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >&
stColumnListResult::shoplist() const {
  return shoplist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stShopItem >*
stColumnListResult::mutable_shoplist() {
  return &shoplist_;
}

// -------------------------------------------------------------------

// stReqMarketBuyItem

// optional .Role.eColumn type = 1;
inline bool stReqMarketBuyItem::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqMarketBuyItem::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqMarketBuyItem::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqMarketBuyItem::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::Role::eColumn stReqMarketBuyItem::type() const {
  return static_cast< ::Role::eColumn >(type_);
}
inline void stReqMarketBuyItem::set_type(::Role::eColumn value) {
  assert(::Role::eColumn_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional uint32 index = 2;
inline bool stReqMarketBuyItem::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stReqMarketBuyItem::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stReqMarketBuyItem::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stReqMarketBuyItem::clear_index() {
  index_ = 0u;
  clear_has_index();
}
inline ::google::protobuf::uint32 stReqMarketBuyItem::index() const {
  return index_;
}
inline void stReqMarketBuyItem::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
}

// -------------------------------------------------------------------

// stMarketBuyItemResult

// optional .Role.stMarketBuyItemResult.BUYRESULT retCode = 1;
inline bool stMarketBuyItemResult::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMarketBuyItemResult::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMarketBuyItemResult::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMarketBuyItemResult::clear_retcode() {
  retcode_ = 1;
  clear_has_retcode();
}
inline ::Role::stMarketBuyItemResult_BUYRESULT stMarketBuyItemResult::retcode() const {
  return static_cast< ::Role::stMarketBuyItemResult_BUYRESULT >(retcode_);
}
inline void stMarketBuyItemResult::set_retcode(::Role::stMarketBuyItemResult_BUYRESULT value) {
  assert(::Role::stMarketBuyItemResult_BUYRESULT_IsValid(value));
  set_has_retcode();
  retcode_ = value;
}

// optional .Role.stShopItem shopItem = 2;
inline bool stMarketBuyItemResult::has_shopitem() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMarketBuyItemResult::set_has_shopitem() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMarketBuyItemResult::clear_has_shopitem() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMarketBuyItemResult::clear_shopitem() {
  if (shopitem_ != NULL) shopitem_->::Role::stShopItem::Clear();
  clear_has_shopitem();
}
inline const ::Role::stShopItem& stMarketBuyItemResult::shopitem() const {
  return shopitem_ != NULL ? *shopitem_ : *default_instance_->shopitem_;
}
inline ::Role::stShopItem* stMarketBuyItemResult::mutable_shopitem() {
  set_has_shopitem();
  if (shopitem_ == NULL) shopitem_ = new ::Role::stShopItem;
  return shopitem_;
}
inline ::Role::stShopItem* stMarketBuyItemResult::release_shopitem() {
  clear_has_shopitem();
  ::Role::stShopItem* temp = shopitem_;
  shopitem_ = NULL;
  return temp;
}
inline void stMarketBuyItemResult::set_allocated_shopitem(::Role::stShopItem* shopitem) {
  delete shopitem_;
  shopitem_ = shopitem;
  if (shopitem) {
    set_has_shopitem();
  } else {
    clear_has_shopitem();
  }
}

// -------------------------------------------------------------------

// stReqOpenWindow

// optional uint32 charId = 1;
inline bool stReqOpenWindow::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqOpenWindow::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqOpenWindow::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqOpenWindow::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqOpenWindow::charid() const {
  return charid_;
}
inline void stReqOpenWindow::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stOpenWindowResult

// optional .Role.stOpenWindowResult.eResult result = 1;
inline bool stOpenWindowResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stOpenWindowResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stOpenWindowResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stOpenWindowResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stOpenWindowResult_eResult stOpenWindowResult::result() const {
  return static_cast< ::Role::stOpenWindowResult_eResult >(result_);
}
inline void stOpenWindowResult::set_result(::Role::stOpenWindowResult_eResult value) {
  assert(::Role::stOpenWindowResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 lv = 2;
inline bool stOpenWindowResult::has_lv() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stOpenWindowResult::set_has_lv() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stOpenWindowResult::clear_has_lv() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stOpenWindowResult::clear_lv() {
  lv_ = 0u;
  clear_has_lv();
}
inline ::google::protobuf::uint32 stOpenWindowResult::lv() const {
  return lv_;
}
inline void stOpenWindowResult::set_lv(::google::protobuf::uint32 value) {
  set_has_lv();
  lv_ = value;
}

// -------------------------------------------------------------------

// stReqRefreshList

// optional uint32 charId = 1;
inline bool stReqRefreshList::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqRefreshList::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqRefreshList::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqRefreshList::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqRefreshList::charid() const {
  return charid_;
}
inline void stReqRefreshList::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stRefreshListResult

// optional .Role.stRefreshListResult.eResult result = 1;
inline bool stRefreshListResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stRefreshListResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stRefreshListResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stRefreshListResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stRefreshListResult_eResult stRefreshListResult::result() const {
  return static_cast< ::Role::stRefreshListResult_eResult >(result_);
}
inline void stRefreshListResult::set_result(::Role::stRefreshListResult_eResult value) {
  assert(::Role::stRefreshListResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stReqAKeyRaiseUserSkillLv

// optional uint32 skillID = 1;
inline bool stReqAKeyRaiseUserSkillLv::has_skillid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqAKeyRaiseUserSkillLv::set_has_skillid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqAKeyRaiseUserSkillLv::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqAKeyRaiseUserSkillLv::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stReqAKeyRaiseUserSkillLv::skillid() const {
  return skillid_;
}
inline void stReqAKeyRaiseUserSkillLv::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// -------------------------------------------------------------------

// stAKeyRaiseUserSkillLvResult

// optional .Role.stAKeyRaiseUserSkillLvResult.eResult result = 1;
inline bool stAKeyRaiseUserSkillLvResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stAKeyRaiseUserSkillLvResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stAKeyRaiseUserSkillLvResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stAKeyRaiseUserSkillLvResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stAKeyRaiseUserSkillLvResult_eResult stAKeyRaiseUserSkillLvResult::result() const {
  return static_cast< ::Role::stAKeyRaiseUserSkillLvResult_eResult >(result_);
}
inline void stAKeyRaiseUserSkillLvResult::set_result(::Role::stAKeyRaiseUserSkillLvResult_eResult value) {
  assert(::Role::stAKeyRaiseUserSkillLvResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 skillID = 2;
inline bool stAKeyRaiseUserSkillLvResult::has_skillid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stAKeyRaiseUserSkillLvResult::set_has_skillid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stAKeyRaiseUserSkillLvResult::clear_has_skillid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stAKeyRaiseUserSkillLvResult::clear_skillid() {
  skillid_ = 0u;
  clear_has_skillid();
}
inline ::google::protobuf::uint32 stAKeyRaiseUserSkillLvResult::skillid() const {
  return skillid_;
}
inline void stAKeyRaiseUserSkillLvResult::set_skillid(::google::protobuf::uint32 value) {
  set_has_skillid();
  skillid_ = value;
}

// optional uint32 skillLv = 3;
inline bool stAKeyRaiseUserSkillLvResult::has_skilllv() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stAKeyRaiseUserSkillLvResult::set_has_skilllv() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stAKeyRaiseUserSkillLvResult::clear_has_skilllv() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stAKeyRaiseUserSkillLvResult::clear_skilllv() {
  skilllv_ = 0u;
  clear_has_skilllv();
}
inline ::google::protobuf::uint32 stAKeyRaiseUserSkillLvResult::skilllv() const {
  return skilllv_;
}
inline void stAKeyRaiseUserSkillLvResult::set_skilllv(::google::protobuf::uint32 value) {
  set_has_skilllv();
  skilllv_ = value;
}

// -------------------------------------------------------------------

// stMountItemInfo

// optional uint32 bagType = 1;
inline bool stMountItemInfo::has_bagtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stMountItemInfo::set_has_bagtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stMountItemInfo::clear_has_bagtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stMountItemInfo::clear_bagtype() {
  bagtype_ = 0u;
  clear_has_bagtype();
}
inline ::google::protobuf::uint32 stMountItemInfo::bagtype() const {
  return bagtype_;
}
inline void stMountItemInfo::set_bagtype(::google::protobuf::uint32 value) {
  set_has_bagtype();
  bagtype_ = value;
}

// optional uint32 pos = 2;
inline bool stMountItemInfo::has_pos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stMountItemInfo::set_has_pos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stMountItemInfo::clear_has_pos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stMountItemInfo::clear_pos() {
  pos_ = 0u;
  clear_has_pos();
}
inline ::google::protobuf::uint32 stMountItemInfo::pos() const {
  return pos_;
}
inline void stMountItemInfo::set_pos(::google::protobuf::uint32 value) {
  set_has_pos();
  pos_ = value;
}

// optional uint64 instanceID = 3;
inline bool stMountItemInfo::has_instanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stMountItemInfo::set_has_instanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stMountItemInfo::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stMountItemInfo::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stMountItemInfo::instanceid() const {
  return instanceid_;
}
inline void stMountItemInfo::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stReqStoneSynthesis

// repeated .Role.stMountItemInfo items = 1;
inline int stReqStoneSynthesis::items_size() const {
  return items_.size();
}
inline void stReqStoneSynthesis::clear_items() {
  items_.Clear();
}
inline const ::Role::stMountItemInfo& stReqStoneSynthesis::items(int index) const {
  return items_.Get(index);
}
inline ::Role::stMountItemInfo* stReqStoneSynthesis::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Role::stMountItemInfo* stReqStoneSynthesis::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo >&
stReqStoneSynthesis::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo >*
stReqStoneSynthesis::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stStoneSynthesisResult

// optional .Role.stStoneSynthesisResult.Result result = 1;
inline bool stStoneSynthesisResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stStoneSynthesisResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stStoneSynthesisResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stStoneSynthesisResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stStoneSynthesisResult_Result stStoneSynthesisResult::result() const {
  return static_cast< ::Role::stStoneSynthesisResult_Result >(result_);
}
inline void stStoneSynthesisResult::set_result(::Role::stStoneSynthesisResult_Result value) {
  assert(::Role::stStoneSynthesisResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 itemID = 2;
inline bool stStoneSynthesisResult::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stStoneSynthesisResult::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stStoneSynthesisResult::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stStoneSynthesisResult::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stStoneSynthesisResult::itemid() const {
  return itemid_;
}
inline void stStoneSynthesisResult::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// stReqStoneEvolvement

// repeated .Role.stMountItemInfo items = 1;
inline int stReqStoneEvolvement::items_size() const {
  return items_.size();
}
inline void stReqStoneEvolvement::clear_items() {
  items_.Clear();
}
inline const ::Role::stMountItemInfo& stReqStoneEvolvement::items(int index) const {
  return items_.Get(index);
}
inline ::Role::stMountItemInfo* stReqStoneEvolvement::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Role::stMountItemInfo* stReqStoneEvolvement::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo >&
stReqStoneEvolvement::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stMountItemInfo >*
stReqStoneEvolvement::mutable_items() {
  return &items_;
}

// -------------------------------------------------------------------

// stStoneEvolvementResult

// optional .Role.stStoneEvolvementResult.Result result = 1;
inline bool stStoneEvolvementResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stStoneEvolvementResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stStoneEvolvementResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stStoneEvolvementResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stStoneEvolvementResult_Result stStoneEvolvementResult::result() const {
  return static_cast< ::Role::stStoneEvolvementResult_Result >(result_);
}
inline void stStoneEvolvementResult::set_result(::Role::stStoneEvolvementResult_Result value) {
  assert(::Role::stStoneEvolvementResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 itemID = 2;
inline bool stStoneEvolvementResult::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stStoneEvolvementResult::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stStoneEvolvementResult::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stStoneEvolvementResult::clear_itemid() {
  itemid_ = 0u;
  clear_has_itemid();
}
inline ::google::protobuf::uint32 stStoneEvolvementResult::itemid() const {
  return itemid_;
}
inline void stStoneEvolvementResult::set_itemid(::google::protobuf::uint32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// stReqStoneProp

// optional uint32 charID = 1;
inline bool stReqStoneProp::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqStoneProp::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqStoneProp::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqStoneProp::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqStoneProp::charid() const {
  return charid_;
}
inline void stReqStoneProp::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stStonePropResult

// repeated .Role.stBattleProp battleProp = 1;
inline int stStonePropResult::battleprop_size() const {
  return battleprop_.size();
}
inline void stStonePropResult::clear_battleprop() {
  battleprop_.Clear();
}
inline const ::Role::stBattleProp& stStonePropResult::battleprop(int index) const {
  return battleprop_.Get(index);
}
inline ::Role::stBattleProp* stStonePropResult::mutable_battleprop(int index) {
  return battleprop_.Mutable(index);
}
inline ::Role::stBattleProp* stStonePropResult::add_battleprop() {
  return battleprop_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >&
stStonePropResult::battleprop() const {
  return battleprop_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stBattleProp >*
stStonePropResult::mutable_battleprop() {
  return &battleprop_;
}

// -------------------------------------------------------------------

// stReqChangePhoto

// optional uint32 id = 1;
inline bool stReqChangePhoto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqChangePhoto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqChangePhoto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqChangePhoto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqChangePhoto::id() const {
  return id_;
}
inline void stReqChangePhoto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stChangePhotoResult

// optional .Role.stChangePhotoResult.Result result = 1;
inline bool stChangePhotoResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stChangePhotoResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stChangePhotoResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stChangePhotoResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stChangePhotoResult_Result stChangePhotoResult::result() const {
  return static_cast< ::Role::stChangePhotoResult_Result >(result_);
}
inline void stChangePhotoResult::set_result(::Role::stChangePhotoResult_Result value) {
  assert(::Role::stChangePhotoResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 id = 2;
inline bool stChangePhotoResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stChangePhotoResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stChangePhotoResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stChangePhotoResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stChangePhotoResult::id() const {
  return id_;
}
inline void stChangePhotoResult::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stReqHasPhotoID

// optional uint32 charID = 1;
inline bool stReqHasPhotoID::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqHasPhotoID::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqHasPhotoID::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqHasPhotoID::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stReqHasPhotoID::charid() const {
  return charid_;
}
inline void stReqHasPhotoID::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stHasPhotoIDResult

// repeated uint32 photoIDs = 1;
inline int stHasPhotoIDResult::photoids_size() const {
  return photoids_.size();
}
inline void stHasPhotoIDResult::clear_photoids() {
  photoids_.Clear();
}
inline ::google::protobuf::uint32 stHasPhotoIDResult::photoids(int index) const {
  return photoids_.Get(index);
}
inline void stHasPhotoIDResult::set_photoids(int index, ::google::protobuf::uint32 value) {
  photoids_.Set(index, value);
}
inline void stHasPhotoIDResult::add_photoids(::google::protobuf::uint32 value) {
  photoids_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
stHasPhotoIDResult::photoids() const {
  return photoids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
stHasPhotoIDResult::mutable_photoids() {
  return &photoids_;
}

// -------------------------------------------------------------------

// stReqUnlockPhoto

// optional uint32 id = 1;
inline bool stReqUnlockPhoto::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stReqUnlockPhoto::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stReqUnlockPhoto::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stReqUnlockPhoto::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stReqUnlockPhoto::id() const {
  return id_;
}
inline void stReqUnlockPhoto::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// stUnlockPhotoResult

// optional .Role.stUnlockPhotoResult.Result result = 1;
inline bool stUnlockPhotoResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stUnlockPhotoResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stUnlockPhotoResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stUnlockPhotoResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stUnlockPhotoResult_Result stUnlockPhotoResult::result() const {
  return static_cast< ::Role::stUnlockPhotoResult_Result >(result_);
}
inline void stUnlockPhotoResult::set_result(::Role::stUnlockPhotoResult_Result value) {
  assert(::Role::stUnlockPhotoResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSpriteInfo

// optional uint32 tag = 1;
inline bool stSpriteInfo::has_tag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSpriteInfo::set_has_tag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSpriteInfo::clear_has_tag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSpriteInfo::clear_tag() {
  tag_ = 0u;
  clear_has_tag();
}
inline ::google::protobuf::uint32 stSpriteInfo::tag() const {
  return tag_;
}
inline void stSpriteInfo::set_tag(::google::protobuf::uint32 value) {
  set_has_tag();
  tag_ = value;
}

// -------------------------------------------------------------------

// stSpriteInfoResult

// optional .Role.stSpriteInfoResult.Result result = 1;
inline bool stSpriteInfoResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSpriteInfoResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSpriteInfoResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSpriteInfoResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stSpriteInfoResult_Result stSpriteInfoResult::result() const {
  return static_cast< ::Role::stSpriteInfoResult_Result >(result_);
}
inline void stSpriteInfoResult::set_result(::Role::stSpriteInfoResult_Result value) {
  assert(::Role::stSpriteInfoResult_Result_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional uint32 id = 2;
inline bool stSpriteInfoResult::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSpriteInfoResult::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSpriteInfoResult::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSpriteInfoResult::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSpriteInfoResult::id() const {
  return id_;
}
inline void stSpriteInfoResult::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 level = 3;
inline bool stSpriteInfoResult::has_level() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSpriteInfoResult::set_has_level() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSpriteInfoResult::clear_has_level() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSpriteInfoResult::clear_level() {
  level_ = 0u;
  clear_has_level();
}
inline ::google::protobuf::uint32 stSpriteInfoResult::level() const {
  return level_;
}
inline void stSpriteInfoResult::set_level(::google::protobuf::uint32 value) {
  set_has_level();
  level_ = value;
}

// -------------------------------------------------------------------

// stTrainHeroReq

// optional uint32 heroID = 1;
inline bool stTrainHeroReq::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTrainHeroReq::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTrainHeroReq::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTrainHeroReq::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stTrainHeroReq::heroid() const {
  return heroid_;
}
inline void stTrainHeroReq::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional uint64 instanceID = 2;
inline bool stTrainHeroReq::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTrainHeroReq::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTrainHeroReq::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTrainHeroReq::clear_instanceid() {
  instanceid_ = GOOGLE_ULONGLONG(0);
  clear_has_instanceid();
}
inline ::google::protobuf::uint64 stTrainHeroReq::instanceid() const {
  return instanceid_;
}
inline void stTrainHeroReq::set_instanceid(::google::protobuf::uint64 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// stTrainHeroResult

// optional uint32 heroID = 1;
inline bool stTrainHeroResult::has_heroid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stTrainHeroResult::set_has_heroid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stTrainHeroResult::clear_has_heroid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stTrainHeroResult::clear_heroid() {
  heroid_ = 0u;
  clear_has_heroid();
}
inline ::google::protobuf::uint32 stTrainHeroResult::heroid() const {
  return heroid_;
}
inline void stTrainHeroResult::set_heroid(::google::protobuf::uint32 value) {
  set_has_heroid();
  heroid_ = value;
}

// optional .Role.stTrainHeroResult.eResult result = 2;
inline bool stTrainHeroResult::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stTrainHeroResult::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stTrainHeroResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stTrainHeroResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stTrainHeroResult_eResult stTrainHeroResult::result() const {
  return static_cast< ::Role::stTrainHeroResult_eResult >(result_);
}
inline void stTrainHeroResult::set_result(::Role::stTrainHeroResult_eResult value) {
  assert(::Role::stTrainHeroResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// optional bool levelUp = 3;
inline bool stTrainHeroResult::has_levelup() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stTrainHeroResult::set_has_levelup() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stTrainHeroResult::clear_has_levelup() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stTrainHeroResult::clear_levelup() {
  levelup_ = false;
  clear_has_levelup();
}
inline bool stTrainHeroResult::levelup() const {
  return levelup_;
}
inline void stTrainHeroResult::set_levelup(bool value) {
  set_has_levelup();
  levelup_ = value;
}

// optional uint32 newLevel = 4;
inline bool stTrainHeroResult::has_newlevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stTrainHeroResult::set_has_newlevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stTrainHeroResult::clear_has_newlevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stTrainHeroResult::clear_newlevel() {
  newlevel_ = 0u;
  clear_has_newlevel();
}
inline ::google::protobuf::uint32 stTrainHeroResult::newlevel() const {
  return newlevel_;
}
inline void stTrainHeroResult::set_newlevel(::google::protobuf::uint32 value) {
  set_has_newlevel();
  newlevel_ = value;
}

// -------------------------------------------------------------------

// stGuaJiTimeNtf

// optional uint32 guajiStart = 1;
inline bool stGuaJiTimeNtf::has_guajistart() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuaJiTimeNtf::set_has_guajistart() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuaJiTimeNtf::clear_has_guajistart() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuaJiTimeNtf::clear_guajistart() {
  guajistart_ = 0u;
  clear_has_guajistart();
}
inline ::google::protobuf::uint32 stGuaJiTimeNtf::guajistart() const {
  return guajistart_;
}
inline void stGuaJiTimeNtf::set_guajistart(::google::protobuf::uint32 value) {
  set_has_guajistart();
  guajistart_ = value;
}

// optional uint32 guajiEnd = 2;
inline bool stGuaJiTimeNtf::has_guajiend() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stGuaJiTimeNtf::set_has_guajiend() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stGuaJiTimeNtf::clear_has_guajiend() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stGuaJiTimeNtf::clear_guajiend() {
  guajiend_ = 0u;
  clear_has_guajiend();
}
inline ::google::protobuf::uint32 stGuaJiTimeNtf::guajiend() const {
  return guajiend_;
}
inline void stGuaJiTimeNtf::set_guajiend(::google::protobuf::uint32 value) {
  set_has_guajiend();
  guajiend_ = value;
}

// optional uint32 todayCount = 3;
inline bool stGuaJiTimeNtf::has_todaycount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stGuaJiTimeNtf::set_has_todaycount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stGuaJiTimeNtf::clear_has_todaycount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stGuaJiTimeNtf::clear_todaycount() {
  todaycount_ = 0u;
  clear_has_todaycount();
}
inline ::google::protobuf::uint32 stGuaJiTimeNtf::todaycount() const {
  return todaycount_;
}
inline void stGuaJiTimeNtf::set_todaycount(::google::protobuf::uint32 value) {
  set_has_todaycount();
  todaycount_ = value;
}

// -------------------------------------------------------------------

// stGuaJiAwardReq

// optional uint32 charid = 1;
inline bool stGuaJiAwardReq::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuaJiAwardReq::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuaJiAwardReq::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuaJiAwardReq::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGuaJiAwardReq::charid() const {
  return charid_;
}
inline void stGuaJiAwardReq::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGuaJiAwardResult

// optional .Role.stGuaJiAwardResult.eResult result = 1;
inline bool stGuaJiAwardResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuaJiAwardResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuaJiAwardResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuaJiAwardResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stGuaJiAwardResult_eResult stGuaJiAwardResult::result() const {
  return static_cast< ::Role::stGuaJiAwardResult_eResult >(result_);
}
inline void stGuaJiAwardResult::set_result(::Role::stGuaJiAwardResult_eResult value) {
  assert(::Role::stGuaJiAwardResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stNftVipNtf

// optional uint32 isNftVip = 1;
inline bool stNftVipNtf::has_isnftvip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stNftVipNtf::set_has_isnftvip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stNftVipNtf::clear_has_isnftvip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stNftVipNtf::clear_isnftvip() {
  isnftvip_ = 0u;
  clear_has_isnftvip();
}
inline ::google::protobuf::uint32 stNftVipNtf::isnftvip() const {
  return isnftvip_;
}
inline void stNftVipNtf::set_isnftvip(::google::protobuf::uint32 value) {
  set_has_isnftvip();
  isnftvip_ = value;
}

// -------------------------------------------------------------------

// stGuaJiStartReq

// optional uint32 charid = 1;
inline bool stGuaJiStartReq::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuaJiStartReq::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuaJiStartReq::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuaJiStartReq::clear_charid() {
  charid_ = 0u;
  clear_has_charid();
}
inline ::google::protobuf::uint32 stGuaJiStartReq::charid() const {
  return charid_;
}
inline void stGuaJiStartReq::set_charid(::google::protobuf::uint32 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// stGuaJiStartResult

// optional .Role.stGuaJiStartResult.eResult result = 1;
inline bool stGuaJiStartResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stGuaJiStartResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stGuaJiStartResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stGuaJiStartResult::clear_result() {
  result_ = 1;
  clear_has_result();
}
inline ::Role::stGuaJiStartResult_eResult stGuaJiStartResult::result() const {
  return static_cast< ::Role::stGuaJiStartResult_eResult >(result_);
}
inline void stGuaJiStartResult::set_result(::Role::stGuaJiStartResult_eResult value) {
  assert(::Role::stGuaJiStartResult_eResult_IsValid(value));
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// stSynRMPShopItem2

// optional uint32 id = 1;
inline bool stSynRMPShopItem2::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void stSynRMPShopItem2::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void stSynRMPShopItem2::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void stSynRMPShopItem2::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 stSynRMPShopItem2::id() const {
  return id_;
}
inline void stSynRMPShopItem2::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 delayTime = 2;
inline bool stSynRMPShopItem2::has_delaytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void stSynRMPShopItem2::set_has_delaytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void stSynRMPShopItem2::clear_has_delaytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void stSynRMPShopItem2::clear_delaytime() {
  delaytime_ = 0u;
  clear_has_delaytime();
}
inline ::google::protobuf::uint32 stSynRMPShopItem2::delaytime() const {
  return delaytime_;
}
inline void stSynRMPShopItem2::set_delaytime(::google::protobuf::uint32 value) {
  set_has_delaytime();
  delaytime_ = value;
}

// optional uint32 buyCount = 3;
inline bool stSynRMPShopItem2::has_buycount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void stSynRMPShopItem2::set_has_buycount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void stSynRMPShopItem2::clear_has_buycount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void stSynRMPShopItem2::clear_buycount() {
  buycount_ = 0u;
  clear_has_buycount();
}
inline ::google::protobuf::uint32 stSynRMPShopItem2::buycount() const {
  return buycount_;
}
inline void stSynRMPShopItem2::set_buycount(::google::protobuf::uint32 value) {
  set_has_buycount();
  buycount_ = value;
}

// optional uint32 startTime = 4;
inline bool stSynRMPShopItem2::has_starttime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void stSynRMPShopItem2::set_has_starttime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void stSynRMPShopItem2::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void stSynRMPShopItem2::clear_starttime() {
  starttime_ = 0u;
  clear_has_starttime();
}
inline ::google::protobuf::uint32 stSynRMPShopItem2::starttime() const {
  return starttime_;
}
inline void stSynRMPShopItem2::set_starttime(::google::protobuf::uint32 value) {
  set_has_starttime();
  starttime_ = value;
}

// optional uint32 planNumber = 5;
inline bool stSynRMPShopItem2::has_plannumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void stSynRMPShopItem2::set_has_plannumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void stSynRMPShopItem2::clear_has_plannumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void stSynRMPShopItem2::clear_plannumber() {
  plannumber_ = 0u;
  clear_has_plannumber();
}
inline ::google::protobuf::uint32 stSynRMPShopItem2::plannumber() const {
  return plannumber_;
}
inline void stSynRMPShopItem2::set_plannumber(::google::protobuf::uint32 value) {
  set_has_plannumber();
  plannumber_ = value;
}

// -------------------------------------------------------------------

// stSynRMBShopInfo2

// repeated .Role.stSynRMPShopItem2 items = 1;
inline int stSynRMBShopInfo2::items_size() const {
  return items_.size();
}
inline void stSynRMBShopInfo2::clear_items() {
  items_.Clear();
}
inline const ::Role::stSynRMPShopItem2& stSynRMBShopInfo2::items(int index) const {
  return items_.Get(index);
}
inline ::Role::stSynRMPShopItem2* stSynRMBShopInfo2::mutable_items(int index) {
  return items_.Mutable(index);
}
inline ::Role::stSynRMPShopItem2* stSynRMBShopInfo2::add_items() {
  return items_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem2 >&
stSynRMBShopInfo2::items() const {
  return items_;
}
inline ::google::protobuf::RepeatedPtrField< ::Role::stSynRMPShopItem2 >*
stSynRMBShopInfo2::mutable_items() {
  return &items_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Role

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stInitMainData_ProtoModID>() {
  return ::Role::stInitMainData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stInitMainData_ProtoFunID>() {
  return ::Role::stInitMainData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ReqCreateRole_ProtoModID>() {
  return ::Role::ReqCreateRole_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ReqCreateRole_ProtoFunID>() {
  return ::Role::ReqCreateRole_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::CreateRoleResult_ProtoModID>() {
  return ::Role::CreateRoleResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::CreateRoleResult_ProtoFunID>() {
  return ::Role::CreateRoleResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::RefreshSnapData_ProtoModID>() {
  return ::Role::RefreshSnapData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::RefreshSnapData_ProtoFunID>() {
  return ::Role::RefreshSnapData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ReqEnterGame_ProtoModID>() {
  return ::Role::ReqEnterGame_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ReqEnterGame_ProtoFunID>() {
  return ::Role::ReqEnterGame_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynGoldCoin_ProtoModID>() {
  return ::Role::stSynGoldCoin_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynGoldCoin_ProtoFunID>() {
  return ::Role::stSynGoldCoin_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynPointCard_ProtoModID>() {
  return ::Role::stSynPointCard_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynPointCard_ProtoFunID>() {
  return ::Role::stSynPointCard_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyAddItem_ProtoModID>() {
  return ::Role::stNotifyAddItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyAddItem_ProtoFunID>() {
  return ::Role::stNotifyAddItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stDeleteItem_ProtoModID>() {
  return ::Role::stDeleteItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stDeleteItem_ProtoFunID>() {
  return ::Role::stDeleteItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshItem_ProtoModID>() {
  return ::Role::stRefreshItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshItem_ProtoFunID>() {
  return ::Role::stRefreshItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stInitAllItem_ProtoModID>() {
  return ::Role::stInitAllItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stInitAllItem_ProtoFunID>() {
  return ::Role::stInitAllItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqOpenShop_ProtoModID>() {
  return ::Role::stReqOpenShop_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqOpenShop_ProtoFunID>() {
  return ::Role::stReqOpenShop_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetShopItemList_ProtoModID>() {
  return ::Role::stRetShopItemList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetShopItemList_ProtoFunID>() {
  return ::Role::stRetShopItemList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBuyItem_ProtoModID>() {
  return ::Role::stReqBuyItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBuyItem_ProtoFunID>() {
  return ::Role::stReqBuyItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyItemResult_BUYRESULT>() {
  return ::Role::stBuyItemResult_BUYRESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyItemResult_ProtoModID>() {
  return ::Role::stBuyItemResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyItemResult_ProtoFunID>() {
  return ::Role::stBuyItemResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stInitAllHero_ProtoModID>() {
  return ::Role::stInitAllHero_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stInitAllHero_ProtoFunID>() {
  return ::Role::stInitAllHero_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyAddHero_ProtoModID>() {
  return ::Role::stNotifyAddHero_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyAddHero_ProtoFunID>() {
  return ::Role::stNotifyAddHero_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshHero_ProtoModID>() {
  return ::Role::stRefreshHero_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshHero_ProtoFunID>() {
  return ::Role::stRefreshHero_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHeroGoOutForBattle_ProtoModID>() {
  return ::Role::stReqHeroGoOutForBattle_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHeroGoOutForBattle_ProtoFunID>() {
  return ::Role::stReqHeroGoOutForBattle_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::HeroGoOutForBattleResult_ERESULT>() {
  return ::Role::HeroGoOutForBattleResult_ERESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::HeroGoOutForBattleResult_ProtoModID>() {
  return ::Role::HeroGoOutForBattleResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::HeroGoOutForBattleResult_ProtoFunID>() {
  return ::Role::HeroGoOutForBattleResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ReqHeroChange2WaitState_ProtoModID>() {
  return ::Role::ReqHeroChange2WaitState_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ReqHeroChange2WaitState_ProtoFunID>() {
  return ::Role::ReqHeroChange2WaitState_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::HeroChange2WaitStateResult_ProtoModID>() {
  return ::Role::HeroChange2WaitStateResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::HeroChange2WaitStateResult_ProtoFunID>() {
  return ::Role::HeroChange2WaitStateResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyRoleAddExp_ProtoModID>() {
  return ::Role::stNotifyRoleAddExp_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyRoleAddExp_ProtoFunID>() {
  return ::Role::stNotifyRoleAddExp_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRoleLevel_ProtoModID>() {
  return ::Role::stSynRoleLevel_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRoleLevel_ProtoFunID>() {
  return ::Role::stSynRoleLevel_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynHeroLv_ProtoModID>() {
  return ::Role::stSynHeroLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynHeroLv_ProtoFunID>() {
  return ::Role::stSynHeroLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMoveItem_ProtoModID>() {
  return ::Role::stMoveItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMoveItem_ProtoFunID>() {
  return ::Role::stMoveItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqArrangeMainBag_ProtoModID>() {
  return ::Role::stReqArrangeMainBag_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqArrangeMainBag_ProtoFunID>() {
  return ::Role::stReqArrangeMainBag_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReArrangeMainBagError_ProtoModID>() {
  return ::Role::stReArrangeMainBagError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReArrangeMainBagError_ProtoFunID>() {
  return ::Role::stReArrangeMainBagError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshMainBag_ProtoModID>() {
  return ::Role::stRefreshMainBag_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshMainBag_ProtoFunID>() {
  return ::Role::stRefreshMainBag_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqCombineHero_ProtoModID>() {
  return ::Role::stReqCombineHero_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqCombineHero_ProtoFunID>() {
  return ::Role::stReqCombineHero_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCombineHeroResult_Result>() {
  return ::Role::stCombineHeroResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCombineHeroResult_ProtoModID>() {
  return ::Role::stCombineHeroResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCombineHeroResult_ProtoFunID>() {
  return ::Role::stCombineHeroResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqLevelupHero_ProtoModID>() {
  return ::Role::stReqLevelupHero_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqLevelupHero_ProtoFunID>() {
  return ::Role::stReqLevelupHero_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stLevelupHeroResult_Result>() {
  return ::Role::stLevelupHeroResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stLevelupHeroResult_ProtoModID>() {
  return ::Role::stLevelupHeroResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stLevelupHeroResult_ProtoFunID>() {
  return ::Role::stLevelupHeroResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHeroEvolution_ProtoModID>() {
  return ::Role::stReqHeroEvolution_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHeroEvolution_ProtoFunID>() {
  return ::Role::stReqHeroEvolution_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stEvolutionHeroResult_Result>() {
  return ::Role::stEvolutionHeroResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stEvolutionHeroResult_ProtoModID>() {
  return ::Role::stEvolutionHeroResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stEvolutionHeroResult_ProtoFunID>() {
  return ::Role::stEvolutionHeroResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHeroStudySkill_Type>() {
  return ::Role::stReqHeroStudySkill_Type_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHeroStudySkill_ProtoModID>() {
  return ::Role::stReqHeroStudySkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHeroStudySkill_ProtoFunID>() {
  return ::Role::stReqHeroStudySkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHeroStudySkillResult_Result>() {
  return ::Role::stHeroStudySkillResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHeroStudySkillResult_ProtoModID>() {
  return ::Role::stHeroStudySkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHeroStudySkillResult_ProtoFunID>() {
  return ::Role::stHeroStudySkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefineHeroSkill_ProtoModID>() {
  return ::Role::stReqRefineHeroSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefineHeroSkill_ProtoFunID>() {
  return ::Role::stReqRefineHeroSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefineHeroSkillResult_Result>() {
  return ::Role::stRefineHeroSkillResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefineHeroSkillResult_ProtoModID>() {
  return ::Role::stRefineHeroSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefineHeroSkillResult_ProtoFunID>() {
  return ::Role::stRefineHeroSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynSkillExp_ProtoModID>() {
  return ::Role::stSynSkillExp_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynSkillExp_ProtoFunID>() {
  return ::Role::stSynSkillExp_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqReplaceHeroSkill_ProtoModID>() {
  return ::Role::stReqReplaceHeroSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqReplaceHeroSkill_ProtoFunID>() {
  return ::Role::stReqReplaceHeroSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReplaceHeroSkillResult_Result>() {
  return ::Role::stReplaceHeroSkillResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReplaceHeroSkillResult_ProtoModID>() {
  return ::Role::stReplaceHeroSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReplaceHeroSkillResult_ProtoFunID>() {
  return ::Role::stReplaceHeroSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUpgradeHeroSkill_ProtoModID>() {
  return ::Role::stReqUpgradeHeroSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUpgradeHeroSkill_ProtoFunID>() {
  return ::Role::stReqUpgradeHeroSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeHeroSkillResult_Result>() {
  return ::Role::stUpgradeHeroSkillResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeHeroSkillResult_ProtoModID>() {
  return ::Role::stUpgradeHeroSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeHeroSkillResult_ProtoFunID>() {
  return ::Role::stUpgradeHeroSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqSellItem_ProtoModID>() {
  return ::Role::stReqSellItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqSellItem_ProtoFunID>() {
  return ::Role::stReqSellItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSellItemResult_Result>() {
  return ::Role::stSellItemResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSellItemResult_ProtoModID>() {
  return ::Role::stSellItemResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSellItemResult_ProtoFunID>() {
  return ::Role::stSellItemResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRaiseItem_eRaiseType>() {
  return ::Role::stReqRaiseItem_eRaiseType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRaiseItem_ProtoModID>() {
  return ::Role::stReqRaiseItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRaiseItem_ProtoFunID>() {
  return ::Role::stReqRaiseItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRaiseItemResult_Result>() {
  return ::Role::stRaiseItemResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRaiseItemResult_ProtoModID>() {
  return ::Role::stRaiseItemResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRaiseItemResult_ProtoFunID>() {
  return ::Role::stRaiseItemResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqSmeltEquip_ProtoModID>() {
  return ::Role::stReqSmeltEquip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqSmeltEquip_ProtoFunID>() {
  return ::Role::stReqSmeltEquip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSmeltEquipResult_Result>() {
  return ::Role::stSmeltEquipResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSmeltEquipResult_ProtoModID>() {
  return ::Role::stSmeltEquipResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSmeltEquipResult_ProtoFunID>() {
  return ::Role::stSmeltEquipResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRecastEquip_ProtoModID>() {
  return ::Role::stReqRecastEquip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRecastEquip_ProtoFunID>() {
  return ::Role::stReqRecastEquip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::RecastEquipResult_Result>() {
  return ::Role::RecastEquipResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::RecastEquipResult_ProtoModID>() {
  return ::Role::RecastEquipResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::RecastEquipResult_ProtoFunID>() {
  return ::Role::RecastEquipResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqCombineItem_ProtoModID>() {
  return ::Role::stReqCombineItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqCombineItem_ProtoFunID>() {
  return ::Role::stReqCombineItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCombineItemResult_Result>() {
  return ::Role::stCombineItemResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCombineItemResult_ProtoModID>() {
  return ::Role::stCombineItemResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCombineItemResult_ProtoFunID>() {
  return ::Role::stCombineItemResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefreshShoplist_ProtoModID>() {
  return ::Role::stReqRefreshShoplist_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefreshShoplist_ProtoFunID>() {
  return ::Role::stReqRefreshShoplist_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshShoplistResult_Result>() {
  return ::Role::stRefreshShoplistResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshShoplistResult_ProtoModID>() {
  return ::Role::stRefreshShoplistResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshShoplistResult_ProtoFunID>() {
  return ::Role::stRefreshShoplistResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChatCmd_ProtoModID>() {
  return ::Role::stChatCmd_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChatCmd_ProtoFunID>() {
  return ::Role::stChatCmd_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynResource_ProtoModID>() {
  return ::Role::stSynResource_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynResource_ProtoFunID>() {
  return ::Role::stSynResource_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynAllLevelInfo_ProtoModID>() {
  return ::Role::stSynAllLevelInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynAllLevelInfo_ProtoFunID>() {
  return ::Role::stSynAllLevelInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqFinishLv_ProtoModID>() {
  return ::Role::stReqFinishLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqFinishLv_ProtoFunID>() {
  return ::Role::stReqFinishLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stFinishLvResult_eResult>() {
  return ::Role::stFinishLvResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stFinishLvResult_ProtoModID>() {
  return ::Role::stFinishLvResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stFinishLvResult_ProtoFunID>() {
  return ::Role::stFinishLvResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqCharpterReward_ProtoModID>() {
  return ::Role::stReqCharpterReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqCharpterReward_ProtoFunID>() {
  return ::Role::stReqCharpterReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCharpterRewardResult_eResult>() {
  return ::Role::stCharpterRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCharpterRewardResult_ProtoModID>() {
  return ::Role::stCharpterRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCharpterRewardResult_ProtoFunID>() {
  return ::Role::stCharpterRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRushLevel_ProtoModID>() {
  return ::Role::stReqRushLevel_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRushLevel_ProtoFunID>() {
  return ::Role::stReqRushLevel_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stLevelRushResult_eResult>() {
  return ::Role::stLevelRushResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stLevelRushResult_ProtoModID>() {
  return ::Role::stLevelRushResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stLevelRushResult_ProtoFunID>() {
  return ::Role::stLevelRushResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqResetRushNum_ProtoModID>() {
  return ::Role::stReqResetRushNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqResetRushNum_ProtoFunID>() {
  return ::Role::stReqResetRushNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetRushNumResult_eResult>() {
  return ::Role::stResetRushNumResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetRushNumResult_ProtoModID>() {
  return ::Role::stResetRushNumResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetRushNumResult_ProtoFunID>() {
  return ::Role::stResetRushNumResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefineEquip_ProtoModID>() {
  return ::Role::stReqRefineEquip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefineEquip_ProtoFunID>() {
  return ::Role::stReqRefineEquip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefineEquipResult_eResult>() {
  return ::Role::stRefineEquipResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefineEquipResult_ProtoModID>() {
  return ::Role::stRefineEquipResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefineEquipResult_ProtoFunID>() {
  return ::Role::stRefineEquipResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynTotoalRecharge_ProtoModID>() {
  return ::Role::stSynTotoalRecharge_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynTotoalRecharge_ProtoFunID>() {
  return ::Role::stSynTotoalRecharge_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynUserAllSkill_ProtoModID>() {
  return ::Role::stSynUserAllSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynUserAllSkill_ProtoFunID>() {
  return ::Role::stSynUserAllSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stAddUserSkill_ProtoModID>() {
  return ::Role::stAddUserSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stAddUserSkill_ProtoFunID>() {
  return ::Role::stAddUserSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUserDetailInfo_ProtoModID>() {
  return ::Role::stReqUserDetailInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUserDetailInfo_ProtoFunID>() {
  return ::Role::stReqUserDetailInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUserDetailInfo_ProtoModID>() {
  return ::Role::stUserDetailInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUserDetailInfo_ProtoFunID>() {
  return ::Role::stUserDetailInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUseItem_ProtoModID>() {
  return ::Role::stUseItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUseItem_ProtoFunID>() {
  return ::Role::stUseItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUseItemError_eResult>() {
  return ::Role::stUseItemError_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUseItemError_ProtoModID>() {
  return ::Role::stUseItemError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUseItemError_ProtoFunID>() {
  return ::Role::stUseItemError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stObtainItemTip_ProtoModID>() {
  return ::Role::stObtainItemTip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stObtainItemTip_ProtoFunID>() {
  return ::Role::stObtainItemTip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqGetEquipSkill_ProtoModID>() {
  return ::Role::stReqGetEquipSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqGetEquipSkill_ProtoFunID>() {
  return ::Role::stReqGetEquipSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGetEquipSkillResult_eResult>() {
  return ::Role::stGetEquipSkillResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGetEquipSkillResult_ProtoModID>() {
  return ::Role::stGetEquipSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGetEquipSkillResult_ProtoFunID>() {
  return ::Role::stGetEquipSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefineEquipSkill_ProtoModID>() {
  return ::Role::stReqRefineEquipSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefineEquipSkill_ProtoFunID>() {
  return ::Role::stReqRefineEquipSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefineEquipSkillResult_eResult>() {
  return ::Role::stRefineEquipSkillResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefineEquipSkillResult_ProtoModID>() {
  return ::Role::stRefineEquipSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefineEquipSkillResult_ProtoFunID>() {
  return ::Role::stRefineEquipSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMoveEquipSkill2Slot_ProtoModID>() {
  return ::Role::stMoveEquipSkill2Slot_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMoveEquipSkill2Slot_ProtoFunID>() {
  return ::Role::stMoveEquipSkill2Slot_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMoveEquipSkillResult_eResult>() {
  return ::Role::stMoveEquipSkillResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMoveEquipSkillResult_ProtoModID>() {
  return ::Role::stMoveEquipSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMoveEquipSkillResult_ProtoFunID>() {
  return ::Role::stMoveEquipSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUpgradeEquipSkill_ProtoModID>() {
  return ::Role::stReqUpgradeEquipSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUpgradeEquipSkill_ProtoFunID>() {
  return ::Role::stReqUpgradeEquipSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeEquipSkillResult_eResult>() {
  return ::Role::stUpgradeEquipSkillResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeEquipSkillResult_ProtoModID>() {
  return ::Role::stUpgradeEquipSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeEquipSkillResult_ProtoFunID>() {
  return ::Role::stUpgradeEquipSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSendPKUserData_ePKType>() {
  return ::Role::stSendPKUserData_ePKType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSendPKUserData_ProtoModID>() {
  return ::Role::stSendPKUserData_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSendPKUserData_ProtoFunID>() {
  return ::Role::stSendPKUserData_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRaiseUserSkillLv_ProtoModID>() {
  return ::Role::stReqRaiseUserSkillLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRaiseUserSkillLv_ProtoFunID>() {
  return ::Role::stReqRaiseUserSkillLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRaiseUserSkillLvResult_eResult>() {
  return ::Role::stRaiseUserSkillLvResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRaiseUserSkillLvResult_ProtoModID>() {
  return ::Role::stRaiseUserSkillLvResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRaiseUserSkillLvResult_ProtoFunID>() {
  return ::Role::stRaiseUserSkillLvResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyNewBieGuideStep_ProtoModID>() {
  return ::Role::stNotifyNewBieGuideStep_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyNewBieGuideStep_ProtoFunID>() {
  return ::Role::stNotifyNewBieGuideStep_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSaveNewBieGuideStep_ProtoModID>() {
  return ::Role::stSaveNewBieGuideStep_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSaveNewBieGuideStep_ProtoFunID>() {
  return ::Role::stSaveNewBieGuideStep_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOpenLevelBox_ProtoModID>() {
  return ::Role::stOpenLevelBox_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOpenLevelBox_ProtoFunID>() {
  return ::Role::stOpenLevelBox_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChangeRole_ProtoModID>() {
  return ::Role::stChangeRole_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChangeRole_ProtoFunID>() {
  return ::Role::stChangeRole_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGotoSelectRole_ProtoModID>() {
  return ::Role::stGotoSelectRole_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGotoSelectRole_ProtoFunID>() {
  return ::Role::stGotoSelectRole_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRMBShopInfo_ProtoModID>() {
  return ::Role::stSynRMBShopInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRMBShopInfo_ProtoFunID>() {
  return ::Role::stSynRMBShopInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOne2OnePVPResult_ProtoModID>() {
  return ::Role::stOne2OnePVPResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOne2OnePVPResult_ProtoFunID>() {
  return ::Role::stOne2OnePVPResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stPrivateChatNotUser_ProtoModID>() {
  return ::Role::stPrivateChatNotUser_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stPrivateChatNotUser_ProtoFunID>() {
  return ::Role::stPrivateChatNotUser_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRecoverRemainTime_ProtoModID>() {
  return ::Role::stReqRecoverRemainTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRecoverRemainTime_ProtoFunID>() {
  return ::Role::stReqRecoverRemainTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSPAndLilianRecoverRemainTime_ProtoModID>() {
  return ::Role::stSPAndLilianRecoverRemainTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSPAndLilianRecoverRemainTime_ProtoFunID>() {
  return ::Role::stSPAndLilianRecoverRemainTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSwapHeroBattlePos_ProtoModID>() {
  return ::Role::stSwapHeroBattlePos_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSwapHeroBattlePos_ProtoFunID>() {
  return ::Role::stSwapHeroBattlePos_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSwapHeroBattlePosError_eResult>() {
  return ::Role::stSwapHeroBattlePosError_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSwapHeroBattlePosError_ProtoModID>() {
  return ::Role::stSwapHeroBattlePosError_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSwapHeroBattlePosError_ProtoFunID>() {
  return ::Role::stSwapHeroBattlePosError_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynSystemSetting_ProtoModID>() {
  return ::Role::stSynSystemSetting_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynSystemSetting_ProtoFunID>() {
  return ::Role::stSynSystemSetting_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqSaveSystemSetting_ProtoModID>() {
  return ::Role::stReqSaveSystemSetting_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqSaveSystemSetting_ProtoFunID>() {
  return ::Role::stReqSaveSystemSetting_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUnlockRareSkill_ProtoModID>() {
  return ::Role::stUnlockRareSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUnlockRareSkill_ProtoFunID>() {
  return ::Role::stUnlockRareSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUnlockRareSkillResult_eResult>() {
  return ::Role::stUnlockRareSkillResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUnlockRareSkillResult_ProtoModID>() {
  return ::Role::stUnlockRareSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUnlockRareSkillResult_ProtoFunID>() {
  return ::Role::stUnlockRareSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeRareSkill_ProtoModID>() {
  return ::Role::stUpgradeRareSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeRareSkill_ProtoFunID>() {
  return ::Role::stUpgradeRareSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeRareSkillResult_eResult>() {
  return ::Role::stUpgradeRareSkillResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeRareSkillResult_ProtoModID>() {
  return ::Role::stUpgradeRareSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUpgradeRareSkillResult_ProtoFunID>() {
  return ::Role::stUpgradeRareSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqGiftBag_ProtoModID>() {
  return ::Role::stReqGiftBag_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqGiftBag_ProtoFunID>() {
  return ::Role::stReqGiftBag_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGotGiftBagResult_eResult>() {
  return ::Role::stGotGiftBagResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGotGiftBagResult_ProtoModID>() {
  return ::Role::stGotGiftBagResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGotGiftBagResult_ProtoFunID>() {
  return ::Role::stGotGiftBagResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRealTimePKResult_ProtoModID>() {
  return ::Role::stRealTimePKResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRealTimePKResult_ProtoFunID>() {
  return ::Role::stRealTimePKResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqFiveRaiseEquip_ProtoModID>() {
  return ::Role::stReqFiveRaiseEquip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqFiveRaiseEquip_ProtoFunID>() {
  return ::Role::stReqFiveRaiseEquip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stFiveRaiseEquipResult_eResult>() {
  return ::Role::stFiveRaiseEquipResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stFiveRaiseEquipResult_ProtoModID>() {
  return ::Role::stFiveRaiseEquipResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stFiveRaiseEquipResult_ProtoFunID>() {
  return ::Role::stFiveRaiseEquipResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynBattleProp_ProtoModID>() {
  return ::Role::stSynBattleProp_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynBattleProp_ProtoFunID>() {
  return ::Role::stSynBattleProp_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynTeamCopyMapNum_ProtoModID>() {
  return ::Role::stSynTeamCopyMapNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynTeamCopyMapNum_ProtoFunID>() {
  return ::Role::stSynTeamCopyMapNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRealTimePKNum_ProtoModID>() {
  return ::Role::stSynRealTimePKNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRealTimePKNum_ProtoFunID>() {
  return ::Role::stSynRealTimePKNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCopymapFail_ProtoModID>() {
  return ::Role::stCopymapFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stCopymapFail_ProtoFunID>() {
  return ::Role::stCopymapFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHero10TimeStudySkill_ProtoModID>() {
  return ::Role::stReqHero10TimeStudySkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHero10TimeStudySkill_ProtoFunID>() {
  return ::Role::stReqHero10TimeStudySkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHero10TimesStudySkillResult_eResult>() {
  return ::Role::stHero10TimesStudySkillResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHero10TimesStudySkillResult_ProtoModID>() {
  return ::Role::stHero10TimesStudySkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHero10TimesStudySkillResult_ProtoFunID>() {
  return ::Role::stHero10TimesStudySkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::st10TimesGetEquipSkill_ProtoModID>() {
  return ::Role::st10TimesGetEquipSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::st10TimesGetEquipSkill_ProtoFunID>() {
  return ::Role::st10TimesGetEquipSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::st10TimesGetEquipSkillResult_eResult>() {
  return ::Role::st10TimesGetEquipSkillResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::st10TimesGetEquipSkillResult_ProtoModID>() {
  return ::Role::st10TimesGetEquipSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::st10TimesGetEquipSkillResult_ProtoFunID>() {
  return ::Role::st10TimesGetEquipSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqFirstRechargeReward_ProtoModID>() {
  return ::Role::stReqFirstRechargeReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqFirstRechargeReward_ProtoFunID>() {
  return ::Role::stReqFirstRechargeReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetFirstRechargeReward_eResult>() {
  return ::Role::stRetFirstRechargeReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetFirstRechargeReward_ProtoModID>() {
  return ::Role::stRetFirstRechargeReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetFirstRechargeReward_ProtoFunID>() {
  return ::Role::stRetFirstRechargeReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMobaPKResult_ProtoModID>() {
  return ::Role::stMobaPKResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMobaPKResult_ProtoFunID>() {
  return ::Role::stMobaPKResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSubNewBieGuideID_ProtoModID>() {
  return ::Role::stSubNewBieGuideID_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSubNewBieGuideID_ProtoFunID>() {
  return ::Role::stSubNewBieGuideID_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetTeamCopyMapNum_ProtoModID>() {
  return ::Role::stResetTeamCopyMapNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetTeamCopyMapNum_ProtoFunID>() {
  return ::Role::stResetTeamCopyMapNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetTeampCopyMapNumResult_eResult>() {
  return ::Role::stResetTeampCopyMapNumResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetTeampCopyMapNumResult_ProtoModID>() {
  return ::Role::stResetTeampCopyMapNumResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetTeampCopyMapNumResult_ProtoFunID>() {
  return ::Role::stResetTeampCopyMapNumResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetRealTimeCopyMapNum_ProtoModID>() {
  return ::Role::stResetRealTimeCopyMapNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetRealTimeCopyMapNum_ProtoFunID>() {
  return ::Role::stResetRealTimeCopyMapNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetRealTimeCopymapNumResult_eResult>() {
  return ::Role::stResetRealTimeCopymapNumResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetRealTimeCopymapNumResult_ProtoModID>() {
  return ::Role::stResetRealTimeCopymapNumResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stResetRealTimeCopymapNumResult_ProtoFunID>() {
  return ::Role::stResetRealTimeCopymapNumResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyRMBItemSuccess_ProtoModID>() {
  return ::Role::stBuyRMBItemSuccess_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyRMBItemSuccess_ProtoFunID>() {
  return ::Role::stBuyRMBItemSuccess_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOne2OnePVPFail_ProtoModID>() {
  return ::Role::stOne2OnePVPFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOne2OnePVPFail_ProtoFunID>() {
  return ::Role::stOne2OnePVPFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRealTimeFail_ProtoModID>() {
  return ::Role::stRealTimeFail_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRealTimeFail_ProtoFunID>() {
  return ::Role::stRealTimeFail_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stDataInitFinish_ProtoModID>() {
  return ::Role::stDataInitFinish_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stDataInitFinish_ProtoFunID>() {
  return ::Role::stDataInitFinish_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqFirst10RechargeReward_ProtoModID>() {
  return ::Role::stReqFirst10RechargeReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqFirst10RechargeReward_ProtoFunID>() {
  return ::Role::stReqFirst10RechargeReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetFirst10RechargeReward_eResult>() {
  return ::Role::stRetFirst10RechargeReward_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetFirst10RechargeReward_ProtoModID>() {
  return ::Role::stRetFirst10RechargeReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetFirst10RechargeReward_ProtoFunID>() {
  return ::Role::stRetFirst10RechargeReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChatInWorldCoolDown_ProtoModID>() {
  return ::Role::stChatInWorldCoolDown_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChatInWorldCoolDown_ProtoFunID>() {
  return ::Role::stChatInWorldCoolDown_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRoleCreateTime_ProtoModID>() {
  return ::Role::stSynRoleCreateTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRoleCreateTime_ProtoFunID>() {
  return ::Role::stSynRoleCreateTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqChgEquipSkill_ProtoModID>() {
  return ::Role::stReqChgEquipSkill_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqChgEquipSkill_ProtoFunID>() {
  return ::Role::stReqChgEquipSkill_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetChgEquipSkillResult_eResult>() {
  return ::Role::stRetChgEquipSkillResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetChgEquipSkillResult_ProtoModID>() {
  return ::Role::stRetChgEquipSkillResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetChgEquipSkillResult_ProtoFunID>() {
  return ::Role::stRetChgEquipSkillResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHasCloseBetaReward_ProtoModID>() {
  return ::Role::stHasCloseBetaReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHasCloseBetaReward_ProtoFunID>() {
  return ::Role::stHasCloseBetaReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqGotCloseBetaReward_ProtoModID>() {
  return ::Role::stReqGotCloseBetaReward_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqGotCloseBetaReward_ProtoFunID>() {
  return ::Role::stReqGotCloseBetaReward_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGotCloseBetaRewardResult_eResult>() {
  return ::Role::stGotCloseBetaRewardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGotCloseBetaRewardResult_ProtoModID>() {
  return ::Role::stGotCloseBetaRewardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGotCloseBetaRewardResult_ProtoFunID>() {
  return ::Role::stGotCloseBetaRewardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseMonthCardItem_ProtoModID>() {
  return ::Role::stReqUseMonthCardItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseMonthCardItem_ProtoFunID>() {
  return ::Role::stReqUseMonthCardItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseMonthCardItem_eResult>() {
  return ::Role::stRetUseMonthCardItem_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseMonthCardItem_ProtoModID>() {
  return ::Role::stRetUseMonthCardItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseMonthCardItem_ProtoFunID>() {
  return ::Role::stRetUseMonthCardItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseSelectItemBox_ProtoModID>() {
  return ::Role::stReqUseSelectItemBox_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseSelectItemBox_ProtoFunID>() {
  return ::Role::stReqUseSelectItemBox_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseSelectItemBox_eResult>() {
  return ::Role::stRetUseSelectItemBox_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseSelectItemBox_ProtoModID>() {
  return ::Role::stRetUseSelectItemBox_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseSelectItemBox_ProtoFunID>() {
  return ::Role::stRetUseSelectItemBox_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseHeroSkillBook_ProtoModID>() {
  return ::Role::stReqUseHeroSkillBook_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseHeroSkillBook_ProtoFunID>() {
  return ::Role::stReqUseHeroSkillBook_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseHeroSkillBook_eResult>() {
  return ::Role::stRetUseHeroSkillBook_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseHeroSkillBook_ProtoModID>() {
  return ::Role::stRetUseHeroSkillBook_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseHeroSkillBook_ProtoFunID>() {
  return ::Role::stRetUseHeroSkillBook_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseEquipSkillBook_ProtoModID>() {
  return ::Role::stReqUseEquipSkillBook_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseEquipSkillBook_ProtoFunID>() {
  return ::Role::stReqUseEquipSkillBook_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseEquipSkillBook_eResult>() {
  return ::Role::stRetUseEquipSkillBook_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseEquipSkillBook_ProtoModID>() {
  return ::Role::stRetUseEquipSkillBook_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetUseEquipSkillBook_ProtoFunID>() {
  return ::Role::stRetUseEquipSkillBook_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBreakEquip_ProtoModID>() {
  return ::Role::stReqBreakEquip_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBreakEquip_ProtoFunID>() {
  return ::Role::stReqBreakEquip_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBreakEquipResult_eResult>() {
  return ::Role::stBreakEquipResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBreakEquipResult_ProtoModID>() {
  return ::Role::stBreakEquipResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBreakEquipResult_ProtoFunID>() {
  return ::Role::stBreakEquipResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRecastHero_ProtoModID>() {
  return ::Role::stReqRecastHero_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRecastHero_ProtoFunID>() {
  return ::Role::stReqRecastHero_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRecastHeroResult_Result>() {
  return ::Role::stRecastHeroResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRecastHeroResult_ProtoModID>() {
  return ::Role::stRecastHeroResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRecastHeroResult_ProtoFunID>() {
  return ::Role::stRecastHeroResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqChangeName_ProtoModID>() {
  return ::Role::stReqChangeName_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqChangeName_ProtoFunID>() {
  return ::Role::stReqChangeName_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChangeNameResult_eResult>() {
  return ::Role::stChangeNameResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChangeNameResult_ProtoModID>() {
  return ::Role::stChangeNameResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChangeNameResult_ProtoFunID>() {
  return ::Role::stChangeNameResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqOpenBuyGoldWindow_ProtoModID>() {
  return ::Role::stReqOpenBuyGoldWindow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqOpenBuyGoldWindow_ProtoFunID>() {
  return ::Role::stReqOpenBuyGoldWindow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOpenBuyGoldWindowResult_ProtoModID>() {
  return ::Role::stOpenBuyGoldWindowResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOpenBuyGoldWindowResult_ProtoFunID>() {
  return ::Role::stOpenBuyGoldWindowResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBuyGold_ProtoModID>() {
  return ::Role::stReqBuyGold_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBuyGold_ProtoFunID>() {
  return ::Role::stReqBuyGold_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyGoldResult_eResult>() {
  return ::Role::stBuyGoldResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyGoldResult_ProtoModID>() {
  return ::Role::stBuyGoldResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyGoldResult_ProtoFunID>() {
  return ::Role::stBuyGoldResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSendImpactHeroInfo_ProtoModID>() {
  return ::Role::stSendImpactHeroInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSendImpactHeroInfo_ProtoFunID>() {
  return ::Role::stSendImpactHeroInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stExpBookLevelLimit_eResult>() {
  return ::Role::stExpBookLevelLimit_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stExpBookLevelLimit_ProtoModID>() {
  return ::Role::stExpBookLevelLimit_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stExpBookLevelLimit_ProtoFunID>() {
  return ::Role::stExpBookLevelLimit_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyPubUniqueID_ProtoModID>() {
  return ::Role::stNotifyPubUniqueID_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyPubUniqueID_ProtoFunID>() {
  return ::Role::stNotifyPubUniqueID_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqEnchant_ProtoModID>() {
  return ::Role::stReqEnchant_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqEnchant_ProtoFunID>() {
  return ::Role::stReqEnchant_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetEnchant_eResult>() {
  return ::Role::stRetEnchant_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetEnchant_ProtoModID>() {
  return ::Role::stRetEnchant_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetEnchant_ProtoFunID>() {
  return ::Role::stRetEnchant_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRecastEnchant_ProtoModID>() {
  return ::Role::stReqRecastEnchant_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRecastEnchant_ProtoFunID>() {
  return ::Role::stReqRecastEnchant_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRecastEnchant_eResult>() {
  return ::Role::stRetRecastEnchant_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRecastEnchant_ProtoModID>() {
  return ::Role::stRetRecastEnchant_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRecastEnchant_ProtoFunID>() {
  return ::Role::stRetRecastEnchant_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqLockEnchant_ProtoModID>() {
  return ::Role::stReqLockEnchant_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqLockEnchant_ProtoFunID>() {
  return ::Role::stReqLockEnchant_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetLockEnchant_eResult>() {
  return ::Role::stRetLockEnchant_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetLockEnchant_ProtoModID>() {
  return ::Role::stRetLockEnchant_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetLockEnchant_ProtoFunID>() {
  return ::Role::stRetLockEnchant_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHerLeagueResult_ProtoModID>() {
  return ::Role::stHerLeagueResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHerLeagueResult_ProtoFunID>() {
  return ::Role::stHerLeagueResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHeroRune_ProtoModID>() {
  return ::Role::stReqHeroRune_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHeroRune_ProtoFunID>() {
  return ::Role::stReqHeroRune_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetHeroRune_ProtoModID>() {
  return ::Role::stRetHeroRune_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetHeroRune_ProtoFunID>() {
  return ::Role::stRetHeroRune_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqAddHeroRune_ProtoModID>() {
  return ::Role::stReqAddHeroRune_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqAddHeroRune_ProtoFunID>() {
  return ::Role::stReqAddHeroRune_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetAddHeroRune_eResult>() {
  return ::Role::stRetAddHeroRune_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetAddHeroRune_ProtoModID>() {
  return ::Role::stRetAddHeroRune_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetAddHeroRune_ProtoFunID>() {
  return ::Role::stRetAddHeroRune_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqDelHeroRune_ProtoModID>() {
  return ::Role::stReqDelHeroRune_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqDelHeroRune_ProtoFunID>() {
  return ::Role::stReqDelHeroRune_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetDelHeroRune_eResult>() {
  return ::Role::stRetDelHeroRune_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetDelHeroRune_ProtoModID>() {
  return ::Role::stRetDelHeroRune_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetDelHeroRune_ProtoFunID>() {
  return ::Role::stRetDelHeroRune_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRunePieceCombine_ProtoModID>() {
  return ::Role::stReqRunePieceCombine_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRunePieceCombine_ProtoFunID>() {
  return ::Role::stReqRunePieceCombine_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRunePieceCombine_eResult>() {
  return ::Role::stRetRunePieceCombine_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRunePieceCombine_ProtoModID>() {
  return ::Role::stRetRunePieceCombine_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRunePieceCombine_ProtoFunID>() {
  return ::Role::stRetRunePieceCombine_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRuneIntensify_ProtoModID>() {
  return ::Role::stReqRuneIntensify_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRuneIntensify_ProtoFunID>() {
  return ::Role::stReqRuneIntensify_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRuneIntensify_eResult>() {
  return ::Role::stRetRuneIntensify_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRuneIntensify_ProtoModID>() {
  return ::Role::stRetRuneIntensify_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRuneIntensify_ProtoFunID>() {
  return ::Role::stRetRuneIntensify_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRuneEvolve_ProtoModID>() {
  return ::Role::stReqRuneEvolve_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRuneEvolve_ProtoFunID>() {
  return ::Role::stReqRuneEvolve_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRuneEvolve_eResult>() {
  return ::Role::stRetRuneEvolve_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRuneEvolve_ProtoModID>() {
  return ::Role::stRetRuneEvolve_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRuneEvolve_ProtoFunID>() {
  return ::Role::stRetRuneEvolve_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqExtractGem_ProtoModID>() {
  return ::Role::stReqExtractGem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqExtractGem_ProtoFunID>() {
  return ::Role::stReqExtractGem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ExtractGemResult_Result>() {
  return ::Role::ExtractGemResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ExtractGemResult_ProtoModID>() {
  return ::Role::ExtractGemResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ExtractGemResult_ProtoFunID>() {
  return ::Role::ExtractGemResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqWedding_ProtoModID>() {
  return ::Role::stReqWedding_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqWedding_ProtoFunID>() {
  return ::Role::stReqWedding_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqAgreeWedding_ProtoModID>() {
  return ::Role::stReqAgreeWedding_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqAgreeWedding_ProtoFunID>() {
  return ::Role::stReqAgreeWedding_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultWedding_Result>() {
  return ::Role::ResultWedding_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultWedding_ProtoModID>() {
  return ::Role::ResultWedding_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultWedding_ProtoFunID>() {
  return ::Role::ResultWedding_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqInviteToRoom_ProtoModID>() {
  return ::Role::stReqInviteToRoom_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqInviteToRoom_ProtoFunID>() {
  return ::Role::stReqInviteToRoom_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::NotifyEnterWedding_ProtoModID>() {
  return ::Role::NotifyEnterWedding_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::NotifyEnterWedding_ProtoFunID>() {
  return ::Role::NotifyEnterWedding_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqAgreeEnterWedding_Result>() {
  return ::Role::stReqAgreeEnterWedding_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqAgreeEnterWedding_ProtoModID>() {
  return ::Role::stReqAgreeEnterWedding_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqAgreeEnterWedding_ProtoFunID>() {
  return ::Role::stReqAgreeEnterWedding_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultEnterWedding_Result>() {
  return ::Role::ResultEnterWedding_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultEnterWedding_ProtoModID>() {
  return ::Role::ResultEnterWedding_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultEnterWedding_ProtoFunID>() {
  return ::Role::ResultEnterWedding_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::MarryInviterPlace_State>() {
  return ::Role::MarryInviterPlace_State_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::MarryInviterPlace_ProtoModID>() {
  return ::Role::MarryInviterPlace_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::MarryInviterPlace_ProtoFunID>() {
  return ::Role::MarryInviterPlace_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqDivorce_ProtoModID>() {
  return ::Role::stReqDivorce_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqDivorce_ProtoFunID>() {
  return ::Role::stReqDivorce_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::RejectDivorce_Result>() {
  return ::Role::RejectDivorce_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::RejectDivorce_ProtoModID>() {
  return ::Role::RejectDivorce_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::RejectDivorce_ProtoFunID>() {
  return ::Role::RejectDivorce_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRejectDivorce_ProtoModID>() {
  return ::Role::stReqRejectDivorce_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRejectDivorce_ProtoFunID>() {
  return ::Role::stReqRejectDivorce_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRejectDivorce_Result>() {
  return ::Role::stRetRejectDivorce_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRejectDivorce_ProtoModID>() {
  return ::Role::stRetRejectDivorce_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetRejectDivorce_ProtoFunID>() {
  return ::Role::stRetRejectDivorce_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::BoardcastMarryInfo_ProtoModID>() {
  return ::Role::BoardcastMarryInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::BoardcastMarryInfo_ProtoFunID>() {
  return ::Role::BoardcastMarryInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseFirework_ProtoModID>() {
  return ::Role::stReqUseFirework_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUseFirework_ProtoFunID>() {
  return ::Role::stReqUseFirework_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultUseFirework_Result>() {
  return ::Role::ResultUseFirework_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultUseFirework_ProtoModID>() {
  return ::Role::ResultUseFirework_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultUseFirework_ProtoFunID>() {
  return ::Role::ResultUseFirework_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::NotifyFirework_ProtoModID>() {
  return ::Role::NotifyFirework_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::NotifyFirework_ProtoFunID>() {
  return ::Role::NotifyFirework_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqTakeCandy_ProtoModID>() {
  return ::Role::stReqTakeCandy_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqTakeCandy_ProtoFunID>() {
  return ::Role::stReqTakeCandy_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultTakeCandy_Result>() {
  return ::Role::ResultTakeCandy_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultTakeCandy_ProtoModID>() {
  return ::Role::ResultTakeCandy_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultTakeCandy_ProtoFunID>() {
  return ::Role::ResultTakeCandy_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBuyFirework_ProtoModID>() {
  return ::Role::stReqBuyFirework_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBuyFirework_ProtoFunID>() {
  return ::Role::stReqBuyFirework_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultBuyFirework_Result>() {
  return ::Role::ResultBuyFirework_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultBuyFirework_ProtoModID>() {
  return ::Role::ResultBuyFirework_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultBuyFirework_ProtoFunID>() {
  return ::Role::ResultBuyFirework_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqEnterWeddingAlone_ProtoModID>() {
  return ::Role::stReqEnterWeddingAlone_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqEnterWeddingAlone_ProtoFunID>() {
  return ::Role::stReqEnterWeddingAlone_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultEnterWeddingAlone_Result>() {
  return ::Role::ResultEnterWeddingAlone_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultEnterWeddingAlone_ProtoModID>() {
  return ::Role::ResultEnterWeddingAlone_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ResultEnterWeddingAlone_ProtoFunID>() {
  return ::Role::ResultEnterWeddingAlone_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqQuitWeddingScene_ProtoModID>() {
  return ::Role::stReqQuitWeddingScene_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqQuitWeddingScene_ProtoFunID>() {
  return ::Role::stReqQuitWeddingScene_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetQuitWeddingScene_Result>() {
  return ::Role::stRetQuitWeddingScene_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetQuitWeddingScene_ProtoModID>() {
  return ::Role::stRetQuitWeddingScene_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetQuitWeddingScene_ProtoFunID>() {
  return ::Role::stRetQuitWeddingScene_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyFriendAction_ProtoModID>() {
  return ::Role::stNotifyFriendAction_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNotifyFriendAction_ProtoFunID>() {
  return ::Role::stNotifyFriendAction_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSendCharCreateTime_ProtoModID>() {
  return ::Role::stSendCharCreateTime_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSendCharCreateTime_ProtoFunID>() {
  return ::Role::stSendCharCreateTime_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqDrawWeddingRing_ProtoModID>() {
  return ::Role::stReqDrawWeddingRing_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqDrawWeddingRing_ProtoFunID>() {
  return ::Role::stReqDrawWeddingRing_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetDrawWeddingRing_Result>() {
  return ::Role::stRetDrawWeddingRing_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetDrawWeddingRing_ProtoModID>() {
  return ::Role::stRetDrawWeddingRing_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRetDrawWeddingRing_ProtoFunID>() {
  return ::Role::stRetDrawWeddingRing_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBuyNum_ProtoModID>() {
  return ::Role::stReqBuyNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqBuyNum_ProtoFunID>() {
  return ::Role::stReqBuyNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyNumResult_ProtoModID>() {
  return ::Role::stBuyNumResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stBuyNumResult_ProtoFunID>() {
  return ::Role::stBuyNumResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefreshNum_ProtoModID>() {
  return ::Role::stReqRefreshNum_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefreshNum_ProtoFunID>() {
  return ::Role::stReqRefreshNum_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshNumResult_ProtoModID>() {
  return ::Role::stRefreshNumResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshNumResult_ProtoFunID>() {
  return ::Role::stRefreshNumResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqColumnList_ProtoModID>() {
  return ::Role::stReqColumnList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqColumnList_ProtoFunID>() {
  return ::Role::stReqColumnList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stColumnListResult_eResult>() {
  return ::Role::stColumnListResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stColumnListResult_ProtoModID>() {
  return ::Role::stColumnListResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stColumnListResult_ProtoFunID>() {
  return ::Role::stColumnListResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqMarketBuyItem_ProtoModID>() {
  return ::Role::stReqMarketBuyItem_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqMarketBuyItem_ProtoFunID>() {
  return ::Role::stReqMarketBuyItem_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMarketBuyItemResult_BUYRESULT>() {
  return ::Role::stMarketBuyItemResult_BUYRESULT_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMarketBuyItemResult_ProtoModID>() {
  return ::Role::stMarketBuyItemResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stMarketBuyItemResult_ProtoFunID>() {
  return ::Role::stMarketBuyItemResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqOpenWindow_ProtoModID>() {
  return ::Role::stReqOpenWindow_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqOpenWindow_ProtoFunID>() {
  return ::Role::stReqOpenWindow_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOpenWindowResult_eResult>() {
  return ::Role::stOpenWindowResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOpenWindowResult_ProtoModID>() {
  return ::Role::stOpenWindowResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stOpenWindowResult_ProtoFunID>() {
  return ::Role::stOpenWindowResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefreshList_ProtoModID>() {
  return ::Role::stReqRefreshList_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqRefreshList_ProtoFunID>() {
  return ::Role::stReqRefreshList_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshListResult_eResult>() {
  return ::Role::stRefreshListResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshListResult_ProtoModID>() {
  return ::Role::stRefreshListResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stRefreshListResult_ProtoFunID>() {
  return ::Role::stRefreshListResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqAKeyRaiseUserSkillLv_ProtoModID>() {
  return ::Role::stReqAKeyRaiseUserSkillLv_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqAKeyRaiseUserSkillLv_ProtoFunID>() {
  return ::Role::stReqAKeyRaiseUserSkillLv_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stAKeyRaiseUserSkillLvResult_eResult>() {
  return ::Role::stAKeyRaiseUserSkillLvResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stAKeyRaiseUserSkillLvResult_ProtoModID>() {
  return ::Role::stAKeyRaiseUserSkillLvResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stAKeyRaiseUserSkillLvResult_ProtoFunID>() {
  return ::Role::stAKeyRaiseUserSkillLvResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqStoneSynthesis_ProtoModID>() {
  return ::Role::stReqStoneSynthesis_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqStoneSynthesis_ProtoFunID>() {
  return ::Role::stReqStoneSynthesis_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stStoneSynthesisResult_Result>() {
  return ::Role::stStoneSynthesisResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stStoneSynthesisResult_ProtoModID>() {
  return ::Role::stStoneSynthesisResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stStoneSynthesisResult_ProtoFunID>() {
  return ::Role::stStoneSynthesisResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqStoneEvolvement_ProtoModID>() {
  return ::Role::stReqStoneEvolvement_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqStoneEvolvement_ProtoFunID>() {
  return ::Role::stReqStoneEvolvement_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stStoneEvolvementResult_Result>() {
  return ::Role::stStoneEvolvementResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stStoneEvolvementResult_ProtoModID>() {
  return ::Role::stStoneEvolvementResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stStoneEvolvementResult_ProtoFunID>() {
  return ::Role::stStoneEvolvementResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqStoneProp_ProtoModID>() {
  return ::Role::stReqStoneProp_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqStoneProp_ProtoFunID>() {
  return ::Role::stReqStoneProp_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stStonePropResult_ProtoModID>() {
  return ::Role::stStonePropResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stStonePropResult_ProtoFunID>() {
  return ::Role::stStonePropResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqChangePhoto_ProtoModID>() {
  return ::Role::stReqChangePhoto_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqChangePhoto_ProtoFunID>() {
  return ::Role::stReqChangePhoto_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChangePhotoResult_Result>() {
  return ::Role::stChangePhotoResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChangePhotoResult_ProtoModID>() {
  return ::Role::stChangePhotoResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stChangePhotoResult_ProtoFunID>() {
  return ::Role::stChangePhotoResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHasPhotoID_ProtoModID>() {
  return ::Role::stReqHasPhotoID_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqHasPhotoID_ProtoFunID>() {
  return ::Role::stReqHasPhotoID_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHasPhotoIDResult_ProtoModID>() {
  return ::Role::stHasPhotoIDResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stHasPhotoIDResult_ProtoFunID>() {
  return ::Role::stHasPhotoIDResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUnlockPhoto_ProtoModID>() {
  return ::Role::stReqUnlockPhoto_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stReqUnlockPhoto_ProtoFunID>() {
  return ::Role::stReqUnlockPhoto_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUnlockPhotoResult_Result>() {
  return ::Role::stUnlockPhotoResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUnlockPhotoResult_ProtoModID>() {
  return ::Role::stUnlockPhotoResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stUnlockPhotoResult_ProtoFunID>() {
  return ::Role::stUnlockPhotoResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSpriteInfo_ProtoModID>() {
  return ::Role::stSpriteInfo_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSpriteInfo_ProtoFunID>() {
  return ::Role::stSpriteInfo_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSpriteInfoResult_Result>() {
  return ::Role::stSpriteInfoResult_Result_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSpriteInfoResult_ProtoModID>() {
  return ::Role::stSpriteInfoResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSpriteInfoResult_ProtoFunID>() {
  return ::Role::stSpriteInfoResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stTrainHeroReq_ProtoModID>() {
  return ::Role::stTrainHeroReq_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stTrainHeroReq_ProtoFunID>() {
  return ::Role::stTrainHeroReq_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stTrainHeroResult_eResult>() {
  return ::Role::stTrainHeroResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stTrainHeroResult_ProtoModID>() {
  return ::Role::stTrainHeroResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stTrainHeroResult_ProtoFunID>() {
  return ::Role::stTrainHeroResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiTimeNtf_ProtoModID>() {
  return ::Role::stGuaJiTimeNtf_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiTimeNtf_ProtoFunID>() {
  return ::Role::stGuaJiTimeNtf_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiAwardReq_ProtoModID>() {
  return ::Role::stGuaJiAwardReq_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiAwardReq_ProtoFunID>() {
  return ::Role::stGuaJiAwardReq_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiAwardResult_eResult>() {
  return ::Role::stGuaJiAwardResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiAwardResult_ProtoModID>() {
  return ::Role::stGuaJiAwardResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiAwardResult_ProtoFunID>() {
  return ::Role::stGuaJiAwardResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNftVipNtf_ProtoModID>() {
  return ::Role::stNftVipNtf_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stNftVipNtf_ProtoFunID>() {
  return ::Role::stNftVipNtf_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiStartReq_ProtoModID>() {
  return ::Role::stGuaJiStartReq_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiStartReq_ProtoFunID>() {
  return ::Role::stGuaJiStartReq_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiStartResult_eResult>() {
  return ::Role::stGuaJiStartResult_eResult_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiStartResult_ProtoModID>() {
  return ::Role::stGuaJiStartResult_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stGuaJiStartResult_ProtoFunID>() {
  return ::Role::stGuaJiStartResult_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRMBShopInfo2_ProtoModID>() {
  return ::Role::stSynRMBShopInfo2_ProtoModID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::stSynRMBShopInfo2_ProtoFunID>() {
  return ::Role::stSynRMBShopInfo2_ProtoFunID_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::eRoleJob>() {
  return ::Role::eRoleJob_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::eRoleSex>() {
  return ::Role::eRoleSex_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::CreateRoleResultCode>() {
  return ::Role::CreateRoleResultCode_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::eBagType>() {
  return ::Role::eBagType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::E_HERO_STATE>() {
  return ::Role::E_HERO_STATE_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::ArrageMainBagError>() {
  return ::Role::ArrageMainBagError_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::eChatType>() {
  return ::Role::eChatType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::eLevelStar>() {
  return ::Role::eLevelStar_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::eCharpterRewardStep>() {
  return ::Role::eCharpterRewardStep_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::eRushType>() {
  return ::Role::eRushType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::eSystemSetting>() {
  return ::Role::eSystemSetting_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::Role::eColumn>() {
  return ::Role::eColumn_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Role_2eproto__INCLUDED
