// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GuildProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GuildProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GuildProto {

namespace {

const ::google::protobuf::Descriptor* stSynGuildMemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynGuildMemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stGuildListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuildListInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGuildDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGuildDetailInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildDetailInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildDetailInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetGuildDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGuildDetailInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildDetailInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildDetailInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqCreateGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqCreateGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCreateGuild_eUseResType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCreateGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqCreateGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCreateGuildError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCreateGuildError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateGuildError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCreateGuildError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSendMyGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSendMyGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendMyGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSendMyGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqJoinInGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqJoinInGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqJoinInGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqJoinInGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stJoinInGuildResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stJoinInGuildResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stJoinInGuildResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stJoinInGuildResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqApplyJoinInList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqApplyJoinInList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqApplyJoinInList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqApplyJoinInList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynApplierInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynApplierInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetApplyJoinInList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetApplyJoinInList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetApplyJoinInList_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetApplyJoinInList_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyApplier_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyApplier_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyApplier_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyApplier_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReplyApplerError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReplyApplerError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyApplerError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReplyApplerError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stJoinInGuildTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stJoinInGuildTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stJoinInGuildTip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stJoinInGuildTip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMemJoinInGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMemJoinInGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMemJoinInGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMemJoinInGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLeaveGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLeaveGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeaveGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLeaveGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stMemLeaveGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stMemLeaveGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stMemLeaveGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stMemLeaveGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAssignGuildTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAssignGuildTitle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAssignGuildTitle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAssignGuildTitle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAssignTitleError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAssignTitleError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAssignTitleError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAssignTitleError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelTitle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelTitle_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelTitle_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelTitle_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelTitleError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelTitleError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelTitleError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelTitleError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiveLeader2Other_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveLeader2Other_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLeader2Other_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLeader2Other_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGiveLeaderError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGiveLeaderError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLeaderError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGiveLeaderError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFireGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFireGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFireGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFireGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stFireGuildError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stFireGuildError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stFireGuildError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stFireGuildError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuildMemOnOffLine_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuildMemOnOffLine_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildMemOnOffLine_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildMemOnOffLine_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stKillOutGroupMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stKillOutGroupMember_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillOutGroupMember_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillOutGroupMember_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stKillOutTip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stKillOutTip_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillOutTip_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillOutTip_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stKillOutGroupMemberError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stKillOutGroupMemberError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillOutGroupMemberError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stKillOutGroupMemberError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetGuildMemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGuildMemInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildMemInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildMemInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynGuildContribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynGuildContribute_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildContribute_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildContribute_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChgGuildSign_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChgGuildSign_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChgGuildSign_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChgGuildSign_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyFireRemainTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyFireRemainTime_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFireRemainTime_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyFireRemainTime_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGuildMemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGuildMemInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildMemInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildMemInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelFireGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelFireGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelFireGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelFireGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelFireGuildResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelFireGuildResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelFireGuildResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelFireGuildResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelFireGuildResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelJoinInGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelJoinInGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelJoinInGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelJoinInGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCancelJoinInGuildResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCancelJoinInGuildResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelJoinInGuildResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelJoinInGuildResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stCancelJoinInGuildResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDonate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDonate_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDonate_eType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDonate_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDonate_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDonateResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDonateResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stDonateResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDonateResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stDonateResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLevelUpHallLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLevelUpHallLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelUpHallLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelUpHallLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLevelUpHallLvResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLevelUpHallLvResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelUpHallLvResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelUpHallLvResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelUpHallLvResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynHallLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynHallLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynHallLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynHallLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPrayBuildingLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPrayBuildingLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPrayBuildingLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPrayBuildingLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPrayBuildingLvResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPrayBuildingLvResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPrayBuildingLvResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPrayBuildingLvResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPrayBuildingLvResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynPrayBuildingLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynPrayBuildingLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynPrayBuildingLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynPrayBuildingLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqPray_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqPray_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPray_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqPray_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stPrayResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stPrayResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stPrayResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPrayResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stPrayResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLevelUpShopBuildingLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLevelUpShopBuildingLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelUpShopBuildingLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelUpShopBuildingLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLevelUpShopBuildingLvResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLevelUpShopBuildingLvResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelUpShopBuildingLvResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelUpShopBuildingLvResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelUpShopBuildingLvResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynShopBuilding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynShopBuilding_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynShopBuilding_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynShopBuilding_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGuildTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGuildTrace_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildTrace_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildTrace_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuildTraceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuildTraceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetGuildTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGuildTrace_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildTrace_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildTrace_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stAddNewGuildTrace_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stAddNewGuildTrace_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddNewGuildTrace_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stAddNewGuildTrace_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChgNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChgNotice_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChgNotice_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChgNotice_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuildDonateState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuildDonateState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildDonateState_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildDonateState_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stGuildPrayState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stGuildPrayState_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildPrayState_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stGuildPrayState_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqChangeBadge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChangeBadge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangeBadge_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChangeBadge_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChangeBadge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChangeBadge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeBadge_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeBadge_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChangeBadge_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stIntoGuildCopymap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stIntoGuildCopymap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stIntoGuildCopymap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stIntoGuildCopymap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stIntoGuildCopymapError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stIntoGuildCopymapError_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stIntoGuildCopymapError_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stIntoGuildCopymapError_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stIntoGuildCopymapError_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSearchGuild_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSearchGuild_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSearchGuild_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSearchGuild_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetSearchGuildResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetSearchGuildResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetSearchGuildResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetSearchGuildResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynMemberContribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMemberContribute_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMemberContribute_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMemberContribute_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenGuildCopymapWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenGuildCopymapWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenGuildCopymapWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenGuildCopymapWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCopymapOpenInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCopymapOpenInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetGuildCopymapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGuildCopymapInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildCopymapInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildCopymapInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqDamageSortlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqDamageSortlist_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDamageSortlist_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqDamageSortlist_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stDamageSortItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stDamageSortItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetDamageSortlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetDamageSortlist_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDamageSortlist_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetDamageSortlist_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stCopymapScoreSortItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stCopymapScoreSortItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stReqGuildCopymapScoreSortlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGuildCopymapScoreSortlist_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildCopymapScoreSortlist_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildCopymapScoreSortlist_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetGuildCopymapScoreSortlist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGuildCopymapScoreSortlist_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildCopymapScoreSortlist_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildCopymapScoreSortlist_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynGuildActivityDegree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynGuildActivityDegree_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildActivityDegree_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynGuildActivityDegree_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynMemberChallengeNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMemberChallengeNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMemberChallengeNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMemberChallengeNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynMemberAssistNum_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynMemberAssistNum_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMemberAssistNum_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynMemberAssistNum_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqEnterGuildCopymap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqEnterGuildCopymap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterGuildCopymap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqEnterGuildCopymap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetEnterGuildCopymapResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetEnterGuildCopymapResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetEnterGuildCopymapResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetEnterGuildCopymapResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetEnterGuildCopymapResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stStartGuildCopymap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stStartGuildCopymap_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stStartGuildCopymap_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stStartGuildCopymap_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stStartGuildCopymapResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stStartGuildCopymapResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stStartGuildCopymapResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stStartGuildCopymapResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stStartGuildCopymapResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stInviteTeamInGuildChannel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stInviteTeamInGuildChannel_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteTeamInGuildChannel_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stInviteTeamInGuildChannel_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyGuildMemContribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyGuildMemContribute_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuildMemContribute_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuildMemContribute_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyGuildMemActivityDegree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyGuildMemActivityDegree_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuildMemActivityDegree_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyGuildMemActivityDegree_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqGuildManorFightWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqGuildManorFightWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildManorFightWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqGuildManorFightWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynManorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynManorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetGuildManorFightInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetGuildManorFightInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildManorFightInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetGuildManorFightInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqOpenApplyManorFightWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqOpenApplyManorFightWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenApplyManorFightWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqOpenApplyManorFightWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynManoryApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynManoryApplyInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stApplyManorWinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stApplyManorWinInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stApplyManorWinInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stApplyManorWinInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRefreshManorApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRefreshManorApplyInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshManorApplyInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRefreshManorApplyInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stRetManorApplyInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetManorApplyInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetManorApplyInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetManorApplyInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stApplyManorFight_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stApplyManorFight_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stApplyManorFight_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stApplyManorFight_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stApplyManorFightRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stApplyManorFightRet_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stApplyManorFightRet_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stApplyManorFightRet_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stApplyManorFightRet_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqManorFightWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqManorFightWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqManorFightWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqManorFightWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynFormationTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynFormationTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetManorFightWinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetManorFightWinInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetManorFightWinInfo_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetManorFightWinInfo_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqManorFightFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqManorFightFormation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqManorFightFormation_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqManorFightFormation_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynManorBattleMem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynManorBattleMem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stRetManorFightFormation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stRetManorFightFormation_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetManorFightFormation_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stRetManorFightFormation_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEnterManorFightTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterManorFightTeam_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterManorFightTeam_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterManorFightTeam_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stEnterManorFightTeamResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stEnterManorFightTeamResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterManorFightTeamResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterManorFightTeamResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stEnterManorFightTeamResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyLeaveManorFightWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyLeaveManorFightWin_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyLeaveManorFightWin_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyLeaveManorFightWin_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynManorFightItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynManorFightItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* stManorFightPKResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stManorFightPKResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightPKResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightPKResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stManorFightPKFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stManorFightPKFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightPKFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightPKFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyWinerAfterApplyEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyWinerAfterApplyEnd_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyWinerAfterApplyEnd_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyWinerAfterApplyEnd_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqChgManorFightTeamPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqChgManorFightTeamPos_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChgManorFightTeamPos_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqChgManorFightTeamPos_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyChgManorFightTeamPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyChgManorFightTeamPos_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyChgManorFightTeamPos_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyChgManorFightTeamPos_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stChgManorFightTeamPosResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stChgManorFightTeamPosResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stChgManorFightTeamPosResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChgManorFightTeamPosResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stChgManorFightTeamPosResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyManorFightFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyManorFightFail_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyManorFightFail_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyManorFightFail_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stManorFightHasNotMatch_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stManorFightHasNotMatch_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightHasNotMatch_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightHasNotMatch_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stManorFightFormationResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stManorFightFormationResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightFormationResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightFormationResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stManorFightFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stManorFightFinish_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightFinish_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stManorFightFinish_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stReqLevelUpBlackMarketLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stReqLevelUpBlackMarketLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelUpBlackMarketLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stReqLevelUpBlackMarketLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stLevelUpBlackMarketLvResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLevelUpBlackMarketLvResult_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelUpBlackMarketLvResult_eResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelUpBlackMarketLvResult_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLevelUpBlackMarketLvResult_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stSynBlackMarketBuildingLv_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stSynBlackMarketBuildingLv_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynBlackMarketBuildingLv_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stSynBlackMarketBuildingLv_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGuildTile_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eCreateGuildError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* JoinGuildResult_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ReplyError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eAssignTitleError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eCancelTitleError_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eGiveLeaderErrorNo_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eFireMemberErrorNo_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eKillOutErrorNo_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eTraceID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* eFormation_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_GuildProto_2eproto() {
  protobuf_AddDesc_GuildProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GuildProto.proto");
  GOOGLE_CHECK(file != NULL);
  stSynGuildMemInfo_descriptor_ = file->message_type(0);
  static const int stSynGuildMemInfo_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, todaycontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, assistnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, activityval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, photoid_),
  };
  stSynGuildMemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynGuildMemInfo_descriptor_,
      stSynGuildMemInfo::default_instance_,
      stSynGuildMemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildMemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynGuildMemInfo));
  stGuildListInfo_descriptor_ = file->message_type(1);
  static const int stGuildListInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, halllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, leaderlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, memnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, hasapplied_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, badge_),
  };
  stGuildListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuildListInfo_descriptor_,
      stGuildListInfo::default_instance_,
      stGuildListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuildListInfo));
  stReqGuild_descriptor_ = file->message_type(2);
  static const int stReqGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuild, rank_),
  };
  stReqGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGuild_descriptor_,
      stReqGuild::default_instance_,
      stReqGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGuild));
  stReqGuild_ProtoModID_descriptor_ = stReqGuild_descriptor_->enum_type(0);
  stReqGuild_ProtoFunID_descriptor_ = stReqGuild_descriptor_->enum_type(1);
  stRetGuild_descriptor_ = file->message_type(3);
  static const int stRetGuild_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuild, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuild, data_),
  };
  stRetGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGuild_descriptor_,
      stRetGuild::default_instance_,
      stRetGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGuild));
  stRetGuild_ProtoModID_descriptor_ = stRetGuild_descriptor_->enum_type(0);
  stRetGuild_ProtoFunID_descriptor_ = stRetGuild_descriptor_->enum_type(1);
  stReqGuildDetailInfo_descriptor_ = file->message_type(4);
  static const int stReqGuildDetailInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildDetailInfo, guildid_),
  };
  stReqGuildDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGuildDetailInfo_descriptor_,
      stReqGuildDetailInfo::default_instance_,
      stReqGuildDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGuildDetailInfo));
  stReqGuildDetailInfo_ProtoModID_descriptor_ = stReqGuildDetailInfo_descriptor_->enum_type(0);
  stReqGuildDetailInfo_ProtoFunID_descriptor_ = stReqGuildDetailInfo_descriptor_->enum_type(1);
  stRetGuildDetailInfo_descriptor_ = file->message_type(5);
  static const int stRetGuildDetailInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, halllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, memnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, meminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, badge_),
  };
  stRetGuildDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGuildDetailInfo_descriptor_,
      stRetGuildDetailInfo::default_instance_,
      stRetGuildDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGuildDetailInfo));
  stRetGuildDetailInfo_ProtoModID_descriptor_ = stRetGuildDetailInfo_descriptor_->enum_type(0);
  stRetGuildDetailInfo_ProtoFunID_descriptor_ = stRetGuildDetailInfo_descriptor_->enum_type(1);
  stReqCreateGuild_descriptor_ = file->message_type(6);
  static const int stReqCreateGuild_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCreateGuild, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCreateGuild, etype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCreateGuild, badge_),
  };
  stReqCreateGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqCreateGuild_descriptor_,
      stReqCreateGuild::default_instance_,
      stReqCreateGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCreateGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqCreateGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqCreateGuild));
  stReqCreateGuild_eUseResType_descriptor_ = stReqCreateGuild_descriptor_->enum_type(0);
  stReqCreateGuild_ProtoModID_descriptor_ = stReqCreateGuild_descriptor_->enum_type(1);
  stReqCreateGuild_ProtoFunID_descriptor_ = stReqCreateGuild_descriptor_->enum_type(2);
  stCreateGuildError_descriptor_ = file->message_type(7);
  static const int stCreateGuildError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuildError, result_),
  };
  stCreateGuildError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCreateGuildError_descriptor_,
      stCreateGuildError::default_instance_,
      stCreateGuildError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuildError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCreateGuildError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCreateGuildError));
  stCreateGuildError_ProtoModID_descriptor_ = stCreateGuildError_descriptor_->enum_type(0);
  stCreateGuildError_ProtoFunID_descriptor_ = stCreateGuildError_descriptor_->enum_type(1);
  stSendMyGuild_descriptor_ = file->message_type(8);
  static const int stSendMyGuild_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, leaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, fireremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, sign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, maxnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, halllv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, shoplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, praybuildinglv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, badge_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, activitydegree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, blackmarket_),
  };
  stSendMyGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSendMyGuild_descriptor_,
      stSendMyGuild::default_instance_,
      stSendMyGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSendMyGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSendMyGuild));
  stSendMyGuild_ProtoModID_descriptor_ = stSendMyGuild_descriptor_->enum_type(0);
  stSendMyGuild_ProtoFunID_descriptor_ = stSendMyGuild_descriptor_->enum_type(1);
  stReqJoinInGuild_descriptor_ = file->message_type(9);
  static const int stReqJoinInGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqJoinInGuild, guildid_),
  };
  stReqJoinInGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqJoinInGuild_descriptor_,
      stReqJoinInGuild::default_instance_,
      stReqJoinInGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqJoinInGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqJoinInGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqJoinInGuild));
  stReqJoinInGuild_ProtoModID_descriptor_ = stReqJoinInGuild_descriptor_->enum_type(0);
  stReqJoinInGuild_ProtoFunID_descriptor_ = stReqJoinInGuild_descriptor_->enum_type(1);
  stJoinInGuildResult_descriptor_ = file->message_type(10);
  static const int stJoinInGuildResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stJoinInGuildResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stJoinInGuildResult, guildid_),
  };
  stJoinInGuildResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stJoinInGuildResult_descriptor_,
      stJoinInGuildResult::default_instance_,
      stJoinInGuildResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stJoinInGuildResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stJoinInGuildResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stJoinInGuildResult));
  stJoinInGuildResult_ProtoModID_descriptor_ = stJoinInGuildResult_descriptor_->enum_type(0);
  stJoinInGuildResult_ProtoFunID_descriptor_ = stJoinInGuildResult_descriptor_->enum_type(1);
  stReqApplyJoinInList_descriptor_ = file->message_type(11);
  static const int stReqApplyJoinInList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqApplyJoinInList, charid_),
  };
  stReqApplyJoinInList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqApplyJoinInList_descriptor_,
      stReqApplyJoinInList::default_instance_,
      stReqApplyJoinInList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqApplyJoinInList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqApplyJoinInList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqApplyJoinInList));
  stReqApplyJoinInList_ProtoModID_descriptor_ = stReqApplyJoinInList_descriptor_->enum_type(0);
  stReqApplyJoinInList_ProtoFunID_descriptor_ = stReqApplyJoinInList_descriptor_->enum_type(1);
  stSynApplierInfo_descriptor_ = file->message_type(12);
  static const int stSynApplierInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, passtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, photoid_),
  };
  stSynApplierInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynApplierInfo_descriptor_,
      stSynApplierInfo::default_instance_,
      stSynApplierInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynApplierInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynApplierInfo));
  stRetApplyJoinInList_descriptor_ = file->message_type(13);
  static const int stRetApplyJoinInList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetApplyJoinInList, data_),
  };
  stRetApplyJoinInList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetApplyJoinInList_descriptor_,
      stRetApplyJoinInList::default_instance_,
      stRetApplyJoinInList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetApplyJoinInList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetApplyJoinInList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetApplyJoinInList));
  stRetApplyJoinInList_ProtoModID_descriptor_ = stRetApplyJoinInList_descriptor_->enum_type(0);
  stRetApplyJoinInList_ProtoFunID_descriptor_ = stRetApplyJoinInList_descriptor_->enum_type(1);
  stReplyApplier_descriptor_ = file->message_type(14);
  static const int stReplyApplier_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyApplier, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyApplier, agree_),
  };
  stReplyApplier_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyApplier_descriptor_,
      stReplyApplier::default_instance_,
      stReplyApplier_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyApplier, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyApplier, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyApplier));
  stReplyApplier_ProtoModID_descriptor_ = stReplyApplier_descriptor_->enum_type(0);
  stReplyApplier_ProtoFunID_descriptor_ = stReplyApplier_descriptor_->enum_type(1);
  stReplyApplerError_descriptor_ = file->message_type(15);
  static const int stReplyApplerError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyApplerError, result_),
  };
  stReplyApplerError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReplyApplerError_descriptor_,
      stReplyApplerError::default_instance_,
      stReplyApplerError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyApplerError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReplyApplerError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReplyApplerError));
  stReplyApplerError_ProtoModID_descriptor_ = stReplyApplerError_descriptor_->enum_type(0);
  stReplyApplerError_ProtoFunID_descriptor_ = stReplyApplerError_descriptor_->enum_type(1);
  stJoinInGuildTip_descriptor_ = file->message_type(16);
  static const int stJoinInGuildTip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stJoinInGuildTip, accept_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stJoinInGuildTip, othername_),
  };
  stJoinInGuildTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stJoinInGuildTip_descriptor_,
      stJoinInGuildTip::default_instance_,
      stJoinInGuildTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stJoinInGuildTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stJoinInGuildTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stJoinInGuildTip));
  stJoinInGuildTip_ProtoModID_descriptor_ = stJoinInGuildTip_descriptor_->enum_type(0);
  stJoinInGuildTip_ProtoFunID_descriptor_ = stJoinInGuildTip_descriptor_->enum_type(1);
  stMemJoinInGuild_descriptor_ = file->message_type(17);
  static const int stMemJoinInGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMemJoinInGuild, data_),
  };
  stMemJoinInGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMemJoinInGuild_descriptor_,
      stMemJoinInGuild::default_instance_,
      stMemJoinInGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMemJoinInGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMemJoinInGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMemJoinInGuild));
  stMemJoinInGuild_ProtoModID_descriptor_ = stMemJoinInGuild_descriptor_->enum_type(0);
  stMemJoinInGuild_ProtoFunID_descriptor_ = stMemJoinInGuild_descriptor_->enum_type(1);
  stReqLeaveGuild_descriptor_ = file->message_type(18);
  static const int stReqLeaveGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveGuild, guildid_),
  };
  stReqLeaveGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLeaveGuild_descriptor_,
      stReqLeaveGuild::default_instance_,
      stReqLeaveGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLeaveGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLeaveGuild));
  stReqLeaveGuild_ProtoModID_descriptor_ = stReqLeaveGuild_descriptor_->enum_type(0);
  stReqLeaveGuild_ProtoFunID_descriptor_ = stReqLeaveGuild_descriptor_->enum_type(1);
  stMemLeaveGuild_descriptor_ = file->message_type(19);
  static const int stMemLeaveGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMemLeaveGuild, charid_),
  };
  stMemLeaveGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stMemLeaveGuild_descriptor_,
      stMemLeaveGuild::default_instance_,
      stMemLeaveGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMemLeaveGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stMemLeaveGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stMemLeaveGuild));
  stMemLeaveGuild_ProtoModID_descriptor_ = stMemLeaveGuild_descriptor_->enum_type(0);
  stMemLeaveGuild_ProtoFunID_descriptor_ = stMemLeaveGuild_descriptor_->enum_type(1);
  stAssignGuildTitle_descriptor_ = file->message_type(20);
  static const int stAssignGuildTitle_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAssignGuildTitle, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAssignGuildTitle, etitle_),
  };
  stAssignGuildTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAssignGuildTitle_descriptor_,
      stAssignGuildTitle::default_instance_,
      stAssignGuildTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAssignGuildTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAssignGuildTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAssignGuildTitle));
  stAssignGuildTitle_ProtoModID_descriptor_ = stAssignGuildTitle_descriptor_->enum_type(0);
  stAssignGuildTitle_ProtoFunID_descriptor_ = stAssignGuildTitle_descriptor_->enum_type(1);
  stAssignTitleError_descriptor_ = file->message_type(21);
  static const int stAssignTitleError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAssignTitleError, result_),
  };
  stAssignTitleError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAssignTitleError_descriptor_,
      stAssignTitleError::default_instance_,
      stAssignTitleError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAssignTitleError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAssignTitleError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAssignTitleError));
  stAssignTitleError_ProtoModID_descriptor_ = stAssignTitleError_descriptor_->enum_type(0);
  stAssignTitleError_ProtoFunID_descriptor_ = stAssignTitleError_descriptor_->enum_type(1);
  stCancelTitle_descriptor_ = file->message_type(22);
  static const int stCancelTitle_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelTitle, charid_),
  };
  stCancelTitle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelTitle_descriptor_,
      stCancelTitle::default_instance_,
      stCancelTitle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelTitle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelTitle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelTitle));
  stCancelTitle_ProtoModID_descriptor_ = stCancelTitle_descriptor_->enum_type(0);
  stCancelTitle_ProtoFunID_descriptor_ = stCancelTitle_descriptor_->enum_type(1);
  stCancelTitleError_descriptor_ = file->message_type(23);
  static const int stCancelTitleError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelTitleError, result_),
  };
  stCancelTitleError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelTitleError_descriptor_,
      stCancelTitleError::default_instance_,
      stCancelTitleError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelTitleError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelTitleError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelTitleError));
  stCancelTitleError_ProtoModID_descriptor_ = stCancelTitleError_descriptor_->enum_type(0);
  stCancelTitleError_ProtoFunID_descriptor_ = stCancelTitleError_descriptor_->enum_type(1);
  stGiveLeader2Other_descriptor_ = file->message_type(24);
  static const int stGiveLeader2Other_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLeader2Other, charid_),
  };
  stGiveLeader2Other_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveLeader2Other_descriptor_,
      stGiveLeader2Other::default_instance_,
      stGiveLeader2Other_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLeader2Other, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLeader2Other, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveLeader2Other));
  stGiveLeader2Other_ProtoModID_descriptor_ = stGiveLeader2Other_descriptor_->enum_type(0);
  stGiveLeader2Other_ProtoFunID_descriptor_ = stGiveLeader2Other_descriptor_->enum_type(1);
  stGiveLeaderError_descriptor_ = file->message_type(25);
  static const int stGiveLeaderError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLeaderError, result_),
  };
  stGiveLeaderError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGiveLeaderError_descriptor_,
      stGiveLeaderError::default_instance_,
      stGiveLeaderError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLeaderError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGiveLeaderError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGiveLeaderError));
  stGiveLeaderError_ProtoModID_descriptor_ = stGiveLeaderError_descriptor_->enum_type(0);
  stGiveLeaderError_ProtoFunID_descriptor_ = stGiveLeaderError_descriptor_->enum_type(1);
  stFireGuild_descriptor_ = file->message_type(26);
  static const int stFireGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFireGuild, guildid_),
  };
  stFireGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFireGuild_descriptor_,
      stFireGuild::default_instance_,
      stFireGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFireGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFireGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFireGuild));
  stFireGuild_ProtoModID_descriptor_ = stFireGuild_descriptor_->enum_type(0);
  stFireGuild_ProtoFunID_descriptor_ = stFireGuild_descriptor_->enum_type(1);
  stFireGuildError_descriptor_ = file->message_type(27);
  static const int stFireGuildError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFireGuildError, result_),
  };
  stFireGuildError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stFireGuildError_descriptor_,
      stFireGuildError::default_instance_,
      stFireGuildError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFireGuildError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stFireGuildError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stFireGuildError));
  stFireGuildError_ProtoModID_descriptor_ = stFireGuildError_descriptor_->enum_type(0);
  stFireGuildError_ProtoFunID_descriptor_ = stFireGuildError_descriptor_->enum_type(1);
  stGuildMemOnOffLine_descriptor_ = file->message_type(28);
  static const int stGuildMemOnOffLine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildMemOnOffLine, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildMemOnOffLine, online_),
  };
  stGuildMemOnOffLine_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuildMemOnOffLine_descriptor_,
      stGuildMemOnOffLine::default_instance_,
      stGuildMemOnOffLine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildMemOnOffLine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildMemOnOffLine, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuildMemOnOffLine));
  stGuildMemOnOffLine_ProtoModID_descriptor_ = stGuildMemOnOffLine_descriptor_->enum_type(0);
  stGuildMemOnOffLine_ProtoFunID_descriptor_ = stGuildMemOnOffLine_descriptor_->enum_type(1);
  stKillOutGroupMember_descriptor_ = file->message_type(29);
  static const int stKillOutGroupMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutGroupMember, charid_),
  };
  stKillOutGroupMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stKillOutGroupMember_descriptor_,
      stKillOutGroupMember::default_instance_,
      stKillOutGroupMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutGroupMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutGroupMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stKillOutGroupMember));
  stKillOutGroupMember_ProtoModID_descriptor_ = stKillOutGroupMember_descriptor_->enum_type(0);
  stKillOutGroupMember_ProtoFunID_descriptor_ = stKillOutGroupMember_descriptor_->enum_type(1);
  stKillOutTip_descriptor_ = file->message_type(30);
  static const int stKillOutTip_offsets_[1] = {
  };
  stKillOutTip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stKillOutTip_descriptor_,
      stKillOutTip::default_instance_,
      stKillOutTip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutTip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutTip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stKillOutTip));
  stKillOutTip_ProtoModID_descriptor_ = stKillOutTip_descriptor_->enum_type(0);
  stKillOutTip_ProtoFunID_descriptor_ = stKillOutTip_descriptor_->enum_type(1);
  stKillOutGroupMemberError_descriptor_ = file->message_type(31);
  static const int stKillOutGroupMemberError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutGroupMemberError, result_),
  };
  stKillOutGroupMemberError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stKillOutGroupMemberError_descriptor_,
      stKillOutGroupMemberError::default_instance_,
      stKillOutGroupMemberError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutGroupMemberError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stKillOutGroupMemberError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stKillOutGroupMemberError));
  stKillOutGroupMemberError_ProtoModID_descriptor_ = stKillOutGroupMemberError_descriptor_->enum_type(0);
  stKillOutGroupMemberError_ProtoFunID_descriptor_ = stKillOutGroupMemberError_descriptor_->enum_type(1);
  stRetGuildMemInfo_descriptor_ = file->message_type(32);
  static const int stRetGuildMemInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildMemInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildMemInfo, joinintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildMemInfo, contributetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildMemInfo, todaycontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildMemInfo, allcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildMemInfo, lastlogintime_),
  };
  stRetGuildMemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGuildMemInfo_descriptor_,
      stRetGuildMemInfo::default_instance_,
      stRetGuildMemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildMemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildMemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGuildMemInfo));
  stRetGuildMemInfo_ProtoModID_descriptor_ = stRetGuildMemInfo_descriptor_->enum_type(0);
  stRetGuildMemInfo_ProtoFunID_descriptor_ = stRetGuildMemInfo_descriptor_->enum_type(1);
  stSynGuildContribute_descriptor_ = file->message_type(33);
  static const int stSynGuildContribute_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildContribute, num_),
  };
  stSynGuildContribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynGuildContribute_descriptor_,
      stSynGuildContribute::default_instance_,
      stSynGuildContribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildContribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildContribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynGuildContribute));
  stSynGuildContribute_ProtoModID_descriptor_ = stSynGuildContribute_descriptor_->enum_type(0);
  stSynGuildContribute_ProtoFunID_descriptor_ = stSynGuildContribute_descriptor_->enum_type(1);
  stChgGuildSign_descriptor_ = file->message_type(34);
  static const int stChgGuildSign_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgGuildSign, sign_),
  };
  stChgGuildSign_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChgGuildSign_descriptor_,
      stChgGuildSign::default_instance_,
      stChgGuildSign_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgGuildSign, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgGuildSign, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChgGuildSign));
  stChgGuildSign_ProtoModID_descriptor_ = stChgGuildSign_descriptor_->enum_type(0);
  stChgGuildSign_ProtoFunID_descriptor_ = stChgGuildSign_descriptor_->enum_type(1);
  stNotifyFireRemainTime_descriptor_ = file->message_type(35);
  static const int stNotifyFireRemainTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFireRemainTime, remaintime_),
  };
  stNotifyFireRemainTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyFireRemainTime_descriptor_,
      stNotifyFireRemainTime::default_instance_,
      stNotifyFireRemainTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFireRemainTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyFireRemainTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyFireRemainTime));
  stNotifyFireRemainTime_ProtoModID_descriptor_ = stNotifyFireRemainTime_descriptor_->enum_type(0);
  stNotifyFireRemainTime_ProtoFunID_descriptor_ = stNotifyFireRemainTime_descriptor_->enum_type(1);
  stReqGuildMemInfo_descriptor_ = file->message_type(36);
  static const int stReqGuildMemInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildMemInfo, charid_),
  };
  stReqGuildMemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGuildMemInfo_descriptor_,
      stReqGuildMemInfo::default_instance_,
      stReqGuildMemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildMemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildMemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGuildMemInfo));
  stReqGuildMemInfo_ProtoModID_descriptor_ = stReqGuildMemInfo_descriptor_->enum_type(0);
  stReqGuildMemInfo_ProtoFunID_descriptor_ = stReqGuildMemInfo_descriptor_->enum_type(1);
  stCancelFireGuild_descriptor_ = file->message_type(37);
  static const int stCancelFireGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelFireGuild, guildid_),
  };
  stCancelFireGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelFireGuild_descriptor_,
      stCancelFireGuild::default_instance_,
      stCancelFireGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelFireGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelFireGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelFireGuild));
  stCancelFireGuild_ProtoModID_descriptor_ = stCancelFireGuild_descriptor_->enum_type(0);
  stCancelFireGuild_ProtoFunID_descriptor_ = stCancelFireGuild_descriptor_->enum_type(1);
  stCancelFireGuildResult_descriptor_ = file->message_type(38);
  static const int stCancelFireGuildResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelFireGuildResult, result_),
  };
  stCancelFireGuildResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelFireGuildResult_descriptor_,
      stCancelFireGuildResult::default_instance_,
      stCancelFireGuildResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelFireGuildResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelFireGuildResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelFireGuildResult));
  stCancelFireGuildResult_eResult_descriptor_ = stCancelFireGuildResult_descriptor_->enum_type(0);
  stCancelFireGuildResult_ProtoModID_descriptor_ = stCancelFireGuildResult_descriptor_->enum_type(1);
  stCancelFireGuildResult_ProtoFunID_descriptor_ = stCancelFireGuildResult_descriptor_->enum_type(2);
  stCancelJoinInGuild_descriptor_ = file->message_type(39);
  static const int stCancelJoinInGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelJoinInGuild, guildid_),
  };
  stCancelJoinInGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelJoinInGuild_descriptor_,
      stCancelJoinInGuild::default_instance_,
      stCancelJoinInGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelJoinInGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelJoinInGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelJoinInGuild));
  stCancelJoinInGuild_ProtoModID_descriptor_ = stCancelJoinInGuild_descriptor_->enum_type(0);
  stCancelJoinInGuild_ProtoFunID_descriptor_ = stCancelJoinInGuild_descriptor_->enum_type(1);
  stCancelJoinInGuildResult_descriptor_ = file->message_type(40);
  static const int stCancelJoinInGuildResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelJoinInGuildResult, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelJoinInGuildResult, result_),
  };
  stCancelJoinInGuildResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCancelJoinInGuildResult_descriptor_,
      stCancelJoinInGuildResult::default_instance_,
      stCancelJoinInGuildResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelJoinInGuildResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCancelJoinInGuildResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCancelJoinInGuildResult));
  stCancelJoinInGuildResult_eResult_descriptor_ = stCancelJoinInGuildResult_descriptor_->enum_type(0);
  stCancelJoinInGuildResult_ProtoModID_descriptor_ = stCancelJoinInGuildResult_descriptor_->enum_type(1);
  stCancelJoinInGuildResult_ProtoFunID_descriptor_ = stCancelJoinInGuildResult_descriptor_->enum_type(2);
  stReqDonate_descriptor_ = file->message_type(41);
  static const int stReqDonate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDonate, type_),
  };
  stReqDonate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDonate_descriptor_,
      stReqDonate::default_instance_,
      stReqDonate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDonate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDonate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDonate));
  stReqDonate_eType_descriptor_ = stReqDonate_descriptor_->enum_type(0);
  stReqDonate_ProtoModID_descriptor_ = stReqDonate_descriptor_->enum_type(1);
  stReqDonate_ProtoFunID_descriptor_ = stReqDonate_descriptor_->enum_type(2);
  stDonateResult_descriptor_ = file->message_type(42);
  static const int stDonateResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDonateResult, result_),
  };
  stDonateResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDonateResult_descriptor_,
      stDonateResult::default_instance_,
      stDonateResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDonateResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDonateResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDonateResult));
  stDonateResult_eResult_descriptor_ = stDonateResult_descriptor_->enum_type(0);
  stDonateResult_ProtoModID_descriptor_ = stDonateResult_descriptor_->enum_type(1);
  stDonateResult_ProtoFunID_descriptor_ = stDonateResult_descriptor_->enum_type(2);
  stReqLevelUpHallLv_descriptor_ = file->message_type(43);
  static const int stReqLevelUpHallLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelUpHallLv, guildid_),
  };
  stReqLevelUpHallLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLevelUpHallLv_descriptor_,
      stReqLevelUpHallLv::default_instance_,
      stReqLevelUpHallLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelUpHallLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelUpHallLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLevelUpHallLv));
  stReqLevelUpHallLv_ProtoModID_descriptor_ = stReqLevelUpHallLv_descriptor_->enum_type(0);
  stReqLevelUpHallLv_ProtoFunID_descriptor_ = stReqLevelUpHallLv_descriptor_->enum_type(1);
  stLevelUpHallLvResult_descriptor_ = file->message_type(44);
  static const int stLevelUpHallLvResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelUpHallLvResult, result_),
  };
  stLevelUpHallLvResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLevelUpHallLvResult_descriptor_,
      stLevelUpHallLvResult::default_instance_,
      stLevelUpHallLvResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelUpHallLvResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelUpHallLvResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLevelUpHallLvResult));
  stLevelUpHallLvResult_eResult_descriptor_ = stLevelUpHallLvResult_descriptor_->enum_type(0);
  stLevelUpHallLvResult_ProtoModID_descriptor_ = stLevelUpHallLvResult_descriptor_->enum_type(1);
  stLevelUpHallLvResult_ProtoFunID_descriptor_ = stLevelUpHallLvResult_descriptor_->enum_type(2);
  stSynHallLv_descriptor_ = file->message_type(45);
  static const int stSynHallLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHallLv, lv_),
  };
  stSynHallLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynHallLv_descriptor_,
      stSynHallLv::default_instance_,
      stSynHallLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHallLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynHallLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynHallLv));
  stSynHallLv_ProtoModID_descriptor_ = stSynHallLv_descriptor_->enum_type(0);
  stSynHallLv_ProtoFunID_descriptor_ = stSynHallLv_descriptor_->enum_type(1);
  stReqPrayBuildingLv_descriptor_ = file->message_type(46);
  static const int stReqPrayBuildingLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPrayBuildingLv, guildid_),
  };
  stReqPrayBuildingLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPrayBuildingLv_descriptor_,
      stReqPrayBuildingLv::default_instance_,
      stReqPrayBuildingLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPrayBuildingLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPrayBuildingLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPrayBuildingLv));
  stReqPrayBuildingLv_ProtoModID_descriptor_ = stReqPrayBuildingLv_descriptor_->enum_type(0);
  stReqPrayBuildingLv_ProtoFunID_descriptor_ = stReqPrayBuildingLv_descriptor_->enum_type(1);
  stPrayBuildingLvResult_descriptor_ = file->message_type(47);
  static const int stPrayBuildingLvResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPrayBuildingLvResult, result_),
  };
  stPrayBuildingLvResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPrayBuildingLvResult_descriptor_,
      stPrayBuildingLvResult::default_instance_,
      stPrayBuildingLvResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPrayBuildingLvResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPrayBuildingLvResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPrayBuildingLvResult));
  stPrayBuildingLvResult_eResult_descriptor_ = stPrayBuildingLvResult_descriptor_->enum_type(0);
  stPrayBuildingLvResult_ProtoModID_descriptor_ = stPrayBuildingLvResult_descriptor_->enum_type(1);
  stPrayBuildingLvResult_ProtoFunID_descriptor_ = stPrayBuildingLvResult_descriptor_->enum_type(2);
  stSynPrayBuildingLv_descriptor_ = file->message_type(48);
  static const int stSynPrayBuildingLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPrayBuildingLv, lv_),
  };
  stSynPrayBuildingLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynPrayBuildingLv_descriptor_,
      stSynPrayBuildingLv::default_instance_,
      stSynPrayBuildingLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPrayBuildingLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynPrayBuildingLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynPrayBuildingLv));
  stSynPrayBuildingLv_ProtoModID_descriptor_ = stSynPrayBuildingLv_descriptor_->enum_type(0);
  stSynPrayBuildingLv_ProtoFunID_descriptor_ = stSynPrayBuildingLv_descriptor_->enum_type(1);
  stReqPray_descriptor_ = file->message_type(49);
  static const int stReqPray_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPray, guildid_),
  };
  stReqPray_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqPray_descriptor_,
      stReqPray::default_instance_,
      stReqPray_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPray, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqPray, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqPray));
  stReqPray_ProtoModID_descriptor_ = stReqPray_descriptor_->enum_type(0);
  stReqPray_ProtoFunID_descriptor_ = stReqPray_descriptor_->enum_type(1);
  stPrayResult_descriptor_ = file->message_type(50);
  static const int stPrayResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPrayResult, result_),
  };
  stPrayResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stPrayResult_descriptor_,
      stPrayResult::default_instance_,
      stPrayResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPrayResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stPrayResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stPrayResult));
  stPrayResult_eResult_descriptor_ = stPrayResult_descriptor_->enum_type(0);
  stPrayResult_ProtoModID_descriptor_ = stPrayResult_descriptor_->enum_type(1);
  stPrayResult_ProtoFunID_descriptor_ = stPrayResult_descriptor_->enum_type(2);
  stReqLevelUpShopBuildingLv_descriptor_ = file->message_type(51);
  static const int stReqLevelUpShopBuildingLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelUpShopBuildingLv, guildid_),
  };
  stReqLevelUpShopBuildingLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLevelUpShopBuildingLv_descriptor_,
      stReqLevelUpShopBuildingLv::default_instance_,
      stReqLevelUpShopBuildingLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelUpShopBuildingLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelUpShopBuildingLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLevelUpShopBuildingLv));
  stReqLevelUpShopBuildingLv_ProtoModID_descriptor_ = stReqLevelUpShopBuildingLv_descriptor_->enum_type(0);
  stReqLevelUpShopBuildingLv_ProtoFunID_descriptor_ = stReqLevelUpShopBuildingLv_descriptor_->enum_type(1);
  stLevelUpShopBuildingLvResult_descriptor_ = file->message_type(52);
  static const int stLevelUpShopBuildingLvResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelUpShopBuildingLvResult, result_),
  };
  stLevelUpShopBuildingLvResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLevelUpShopBuildingLvResult_descriptor_,
      stLevelUpShopBuildingLvResult::default_instance_,
      stLevelUpShopBuildingLvResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelUpShopBuildingLvResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelUpShopBuildingLvResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLevelUpShopBuildingLvResult));
  stLevelUpShopBuildingLvResult_eResult_descriptor_ = stLevelUpShopBuildingLvResult_descriptor_->enum_type(0);
  stLevelUpShopBuildingLvResult_ProtoModID_descriptor_ = stLevelUpShopBuildingLvResult_descriptor_->enum_type(1);
  stLevelUpShopBuildingLvResult_ProtoFunID_descriptor_ = stLevelUpShopBuildingLvResult_descriptor_->enum_type(2);
  stSynShopBuilding_descriptor_ = file->message_type(53);
  static const int stSynShopBuilding_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynShopBuilding, lv_),
  };
  stSynShopBuilding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynShopBuilding_descriptor_,
      stSynShopBuilding::default_instance_,
      stSynShopBuilding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynShopBuilding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynShopBuilding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynShopBuilding));
  stSynShopBuilding_ProtoModID_descriptor_ = stSynShopBuilding_descriptor_->enum_type(0);
  stSynShopBuilding_ProtoFunID_descriptor_ = stSynShopBuilding_descriptor_->enum_type(1);
  stReqGuildTrace_descriptor_ = file->message_type(54);
  static const int stReqGuildTrace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildTrace, guildid_),
  };
  stReqGuildTrace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGuildTrace_descriptor_,
      stReqGuildTrace::default_instance_,
      stReqGuildTrace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildTrace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildTrace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGuildTrace));
  stReqGuildTrace_ProtoModID_descriptor_ = stReqGuildTrace_descriptor_->enum_type(0);
  stReqGuildTrace_ProtoFunID_descriptor_ = stReqGuildTrace_descriptor_->enum_type(1);
  stGuildTraceInfo_descriptor_ = file->message_type(55);
  static const int stGuildTraceInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildTraceInfo, etraceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildTraceInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildTraceInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildTraceInfo, dotime_),
  };
  stGuildTraceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuildTraceInfo_descriptor_,
      stGuildTraceInfo::default_instance_,
      stGuildTraceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildTraceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildTraceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuildTraceInfo));
  stRetGuildTrace_descriptor_ = file->message_type(56);
  static const int stRetGuildTrace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildTrace, traces_),
  };
  stRetGuildTrace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGuildTrace_descriptor_,
      stRetGuildTrace::default_instance_,
      stRetGuildTrace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildTrace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildTrace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGuildTrace));
  stRetGuildTrace_ProtoModID_descriptor_ = stRetGuildTrace_descriptor_->enum_type(0);
  stRetGuildTrace_ProtoFunID_descriptor_ = stRetGuildTrace_descriptor_->enum_type(1);
  stAddNewGuildTrace_descriptor_ = file->message_type(57);
  static const int stAddNewGuildTrace_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGuildTrace, traceinfo_),
  };
  stAddNewGuildTrace_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stAddNewGuildTrace_descriptor_,
      stAddNewGuildTrace::default_instance_,
      stAddNewGuildTrace_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGuildTrace, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stAddNewGuildTrace, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stAddNewGuildTrace));
  stAddNewGuildTrace_ProtoModID_descriptor_ = stAddNewGuildTrace_descriptor_->enum_type(0);
  stAddNewGuildTrace_ProtoFunID_descriptor_ = stAddNewGuildTrace_descriptor_->enum_type(1);
  stChgNotice_descriptor_ = file->message_type(58);
  static const int stChgNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgNotice, notice_),
  };
  stChgNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChgNotice_descriptor_,
      stChgNotice::default_instance_,
      stChgNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChgNotice));
  stChgNotice_ProtoModID_descriptor_ = stChgNotice_descriptor_->enum_type(0);
  stChgNotice_ProtoFunID_descriptor_ = stChgNotice_descriptor_->enum_type(1);
  stGuildDonateState_descriptor_ = file->message_type(59);
  static const int stGuildDonateState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildDonateState, hasdonate_),
  };
  stGuildDonateState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuildDonateState_descriptor_,
      stGuildDonateState::default_instance_,
      stGuildDonateState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildDonateState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildDonateState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuildDonateState));
  stGuildDonateState_ProtoModID_descriptor_ = stGuildDonateState_descriptor_->enum_type(0);
  stGuildDonateState_ProtoFunID_descriptor_ = stGuildDonateState_descriptor_->enum_type(1);
  stGuildPrayState_descriptor_ = file->message_type(60);
  static const int stGuildPrayState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildPrayState, haspray_),
  };
  stGuildPrayState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stGuildPrayState_descriptor_,
      stGuildPrayState::default_instance_,
      stGuildPrayState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildPrayState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stGuildPrayState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stGuildPrayState));
  stGuildPrayState_ProtoModID_descriptor_ = stGuildPrayState_descriptor_->enum_type(0);
  stGuildPrayState_ProtoFunID_descriptor_ = stGuildPrayState_descriptor_->enum_type(1);
  stReqChangeBadge_descriptor_ = file->message_type(61);
  static const int stReqChangeBadge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeBadge, badgeid_),
  };
  stReqChangeBadge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChangeBadge_descriptor_,
      stReqChangeBadge::default_instance_,
      stReqChangeBadge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeBadge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChangeBadge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChangeBadge));
  stReqChangeBadge_ProtoModID_descriptor_ = stReqChangeBadge_descriptor_->enum_type(0);
  stReqChangeBadge_ProtoFunID_descriptor_ = stReqChangeBadge_descriptor_->enum_type(1);
  stChangeBadge_descriptor_ = file->message_type(62);
  static const int stChangeBadge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeBadge, badgeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeBadge, result_),
  };
  stChangeBadge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChangeBadge_descriptor_,
      stChangeBadge::default_instance_,
      stChangeBadge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeBadge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChangeBadge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChangeBadge));
  stChangeBadge_eResult_descriptor_ = stChangeBadge_descriptor_->enum_type(0);
  stChangeBadge_ProtoModID_descriptor_ = stChangeBadge_descriptor_->enum_type(1);
  stChangeBadge_ProtoFunID_descriptor_ = stChangeBadge_descriptor_->enum_type(2);
  stIntoGuildCopymap_descriptor_ = file->message_type(63);
  static const int stIntoGuildCopymap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIntoGuildCopymap, charid_),
  };
  stIntoGuildCopymap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stIntoGuildCopymap_descriptor_,
      stIntoGuildCopymap::default_instance_,
      stIntoGuildCopymap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIntoGuildCopymap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIntoGuildCopymap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stIntoGuildCopymap));
  stIntoGuildCopymap_ProtoModID_descriptor_ = stIntoGuildCopymap_descriptor_->enum_type(0);
  stIntoGuildCopymap_ProtoFunID_descriptor_ = stIntoGuildCopymap_descriptor_->enum_type(1);
  stIntoGuildCopymapError_descriptor_ = file->message_type(64);
  static const int stIntoGuildCopymapError_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIntoGuildCopymapError, result_),
  };
  stIntoGuildCopymapError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stIntoGuildCopymapError_descriptor_,
      stIntoGuildCopymapError::default_instance_,
      stIntoGuildCopymapError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIntoGuildCopymapError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stIntoGuildCopymapError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stIntoGuildCopymapError));
  stIntoGuildCopymapError_eResult_descriptor_ = stIntoGuildCopymapError_descriptor_->enum_type(0);
  stIntoGuildCopymapError_ProtoModID_descriptor_ = stIntoGuildCopymapError_descriptor_->enum_type(1);
  stIntoGuildCopymapError_ProtoFunID_descriptor_ = stIntoGuildCopymapError_descriptor_->enum_type(2);
  stSearchGuild_descriptor_ = file->message_type(65);
  static const int stSearchGuild_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSearchGuild, guildname_),
  };
  stSearchGuild_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSearchGuild_descriptor_,
      stSearchGuild::default_instance_,
      stSearchGuild_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSearchGuild, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSearchGuild, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSearchGuild));
  stSearchGuild_ProtoModID_descriptor_ = stSearchGuild_descriptor_->enum_type(0);
  stSearchGuild_ProtoFunID_descriptor_ = stSearchGuild_descriptor_->enum_type(1);
  stRetSearchGuildResult_descriptor_ = file->message_type(66);
  static const int stRetSearchGuildResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSearchGuildResult, listinfo_),
  };
  stRetSearchGuildResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetSearchGuildResult_descriptor_,
      stRetSearchGuildResult::default_instance_,
      stRetSearchGuildResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSearchGuildResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetSearchGuildResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetSearchGuildResult));
  stRetSearchGuildResult_ProtoModID_descriptor_ = stRetSearchGuildResult_descriptor_->enum_type(0);
  stRetSearchGuildResult_ProtoFunID_descriptor_ = stRetSearchGuildResult_descriptor_->enum_type(1);
  stSynMemberContribute_descriptor_ = file->message_type(67);
  static const int stSynMemberContribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberContribute, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberContribute, num_),
  };
  stSynMemberContribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMemberContribute_descriptor_,
      stSynMemberContribute::default_instance_,
      stSynMemberContribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberContribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberContribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMemberContribute));
  stSynMemberContribute_ProtoModID_descriptor_ = stSynMemberContribute_descriptor_->enum_type(0);
  stSynMemberContribute_ProtoFunID_descriptor_ = stSynMemberContribute_descriptor_->enum_type(1);
  stReqOpenGuildCopymapWin_descriptor_ = file->message_type(68);
  static const int stReqOpenGuildCopymapWin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenGuildCopymapWin, charid_),
  };
  stReqOpenGuildCopymapWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenGuildCopymapWin_descriptor_,
      stReqOpenGuildCopymapWin::default_instance_,
      stReqOpenGuildCopymapWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenGuildCopymapWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenGuildCopymapWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenGuildCopymapWin));
  stReqOpenGuildCopymapWin_ProtoModID_descriptor_ = stReqOpenGuildCopymapWin_descriptor_->enum_type(0);
  stReqOpenGuildCopymapWin_ProtoFunID_descriptor_ = stReqOpenGuildCopymapWin_descriptor_->enum_type(1);
  stCopymapOpenInfo_descriptor_ = file->message_type(69);
  static const int stCopymapOpenInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapOpenInfo, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapOpenInfo, opentime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapOpenInfo, stepid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapOpenInfo, isstarted_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapOpenInfo, killerid_),
  };
  stCopymapOpenInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCopymapOpenInfo_descriptor_,
      stCopymapOpenInfo::default_instance_,
      stCopymapOpenInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapOpenInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapOpenInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCopymapOpenInfo));
  stRetGuildCopymapInfo_descriptor_ = file->message_type(70);
  static const int stRetGuildCopymapInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapInfo, openinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapInfo, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapInfo, assistnum_),
  };
  stRetGuildCopymapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGuildCopymapInfo_descriptor_,
      stRetGuildCopymapInfo::default_instance_,
      stRetGuildCopymapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGuildCopymapInfo));
  stRetGuildCopymapInfo_ProtoModID_descriptor_ = stRetGuildCopymapInfo_descriptor_->enum_type(0);
  stRetGuildCopymapInfo_ProtoFunID_descriptor_ = stRetGuildCopymapInfo_descriptor_->enum_type(1);
  stReqDamageSortlist_descriptor_ = file->message_type(71);
  static const int stReqDamageSortlist_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDamageSortlist, beginrank_),
  };
  stReqDamageSortlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqDamageSortlist_descriptor_,
      stReqDamageSortlist::default_instance_,
      stReqDamageSortlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDamageSortlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqDamageSortlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqDamageSortlist));
  stReqDamageSortlist_ProtoModID_descriptor_ = stReqDamageSortlist_descriptor_->enum_type(0);
  stReqDamageSortlist_ProtoFunID_descriptor_ = stReqDamageSortlist_descriptor_->enum_type(1);
  stDamageSortItemInfo_descriptor_ = file->message_type(72);
  static const int stDamageSortItemInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDamageSortItemInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDamageSortItemInfo, damage_),
  };
  stDamageSortItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stDamageSortItemInfo_descriptor_,
      stDamageSortItemInfo::default_instance_,
      stDamageSortItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDamageSortItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stDamageSortItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stDamageSortItemInfo));
  stRetDamageSortlist_descriptor_ = file->message_type(73);
  static const int stRetDamageSortlist_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDamageSortlist, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDamageSortlist, sortitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDamageSortlist, myrank_),
  };
  stRetDamageSortlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetDamageSortlist_descriptor_,
      stRetDamageSortlist::default_instance_,
      stRetDamageSortlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDamageSortlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetDamageSortlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetDamageSortlist));
  stRetDamageSortlist_ProtoModID_descriptor_ = stRetDamageSortlist_descriptor_->enum_type(0);
  stRetDamageSortlist_ProtoFunID_descriptor_ = stRetDamageSortlist_descriptor_->enum_type(1);
  stCopymapScoreSortItem_descriptor_ = file->message_type(74);
  static const int stCopymapScoreSortItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapScoreSortItem, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapScoreSortItem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapScoreSortItem, score_),
  };
  stCopymapScoreSortItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stCopymapScoreSortItem_descriptor_,
      stCopymapScoreSortItem::default_instance_,
      stCopymapScoreSortItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapScoreSortItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stCopymapScoreSortItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stCopymapScoreSortItem));
  stReqGuildCopymapScoreSortlist_descriptor_ = file->message_type(75);
  static const int stReqGuildCopymapScoreSortlist_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildCopymapScoreSortlist, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildCopymapScoreSortlist, copymapid_),
  };
  stReqGuildCopymapScoreSortlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGuildCopymapScoreSortlist_descriptor_,
      stReqGuildCopymapScoreSortlist::default_instance_,
      stReqGuildCopymapScoreSortlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildCopymapScoreSortlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildCopymapScoreSortlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGuildCopymapScoreSortlist));
  stReqGuildCopymapScoreSortlist_ProtoModID_descriptor_ = stReqGuildCopymapScoreSortlist_descriptor_->enum_type(0);
  stReqGuildCopymapScoreSortlist_ProtoFunID_descriptor_ = stReqGuildCopymapScoreSortlist_descriptor_->enum_type(1);
  stRetGuildCopymapScoreSortlist_descriptor_ = file->message_type(76);
  static const int stRetGuildCopymapScoreSortlist_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapScoreSortlist, beginrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapScoreSortlist, copymapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapScoreSortlist, sortitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapScoreSortlist, myrank_),
  };
  stRetGuildCopymapScoreSortlist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGuildCopymapScoreSortlist_descriptor_,
      stRetGuildCopymapScoreSortlist::default_instance_,
      stRetGuildCopymapScoreSortlist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapScoreSortlist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildCopymapScoreSortlist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGuildCopymapScoreSortlist));
  stRetGuildCopymapScoreSortlist_ProtoModID_descriptor_ = stRetGuildCopymapScoreSortlist_descriptor_->enum_type(0);
  stRetGuildCopymapScoreSortlist_ProtoFunID_descriptor_ = stRetGuildCopymapScoreSortlist_descriptor_->enum_type(1);
  stSynGuildActivityDegree_descriptor_ = file->message_type(77);
  static const int stSynGuildActivityDegree_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildActivityDegree, value_),
  };
  stSynGuildActivityDegree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynGuildActivityDegree_descriptor_,
      stSynGuildActivityDegree::default_instance_,
      stSynGuildActivityDegree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildActivityDegree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynGuildActivityDegree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynGuildActivityDegree));
  stSynGuildActivityDegree_ProtoModID_descriptor_ = stSynGuildActivityDegree_descriptor_->enum_type(0);
  stSynGuildActivityDegree_ProtoFunID_descriptor_ = stSynGuildActivityDegree_descriptor_->enum_type(1);
  stSynMemberChallengeNum_descriptor_ = file->message_type(78);
  static const int stSynMemberChallengeNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberChallengeNum, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberChallengeNum, challengenum_),
  };
  stSynMemberChallengeNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMemberChallengeNum_descriptor_,
      stSynMemberChallengeNum::default_instance_,
      stSynMemberChallengeNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberChallengeNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberChallengeNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMemberChallengeNum));
  stSynMemberChallengeNum_ProtoModID_descriptor_ = stSynMemberChallengeNum_descriptor_->enum_type(0);
  stSynMemberChallengeNum_ProtoFunID_descriptor_ = stSynMemberChallengeNum_descriptor_->enum_type(1);
  stSynMemberAssistNum_descriptor_ = file->message_type(79);
  static const int stSynMemberAssistNum_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberAssistNum, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberAssistNum, assistnum_),
  };
  stSynMemberAssistNum_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynMemberAssistNum_descriptor_,
      stSynMemberAssistNum::default_instance_,
      stSynMemberAssistNum_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberAssistNum, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynMemberAssistNum, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynMemberAssistNum));
  stSynMemberAssistNum_ProtoModID_descriptor_ = stSynMemberAssistNum_descriptor_->enum_type(0);
  stSynMemberAssistNum_ProtoFunID_descriptor_ = stSynMemberAssistNum_descriptor_->enum_type(1);
  stReqEnterGuildCopymap_descriptor_ = file->message_type(80);
  static const int stReqEnterGuildCopymap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterGuildCopymap, copymapid_),
  };
  stReqEnterGuildCopymap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqEnterGuildCopymap_descriptor_,
      stReqEnterGuildCopymap::default_instance_,
      stReqEnterGuildCopymap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterGuildCopymap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqEnterGuildCopymap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqEnterGuildCopymap));
  stReqEnterGuildCopymap_ProtoModID_descriptor_ = stReqEnterGuildCopymap_descriptor_->enum_type(0);
  stReqEnterGuildCopymap_ProtoFunID_descriptor_ = stReqEnterGuildCopymap_descriptor_->enum_type(1);
  stRetEnterGuildCopymapResult_descriptor_ = file->message_type(81);
  static const int stRetEnterGuildCopymapResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnterGuildCopymapResult, result_),
  };
  stRetEnterGuildCopymapResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetEnterGuildCopymapResult_descriptor_,
      stRetEnterGuildCopymapResult::default_instance_,
      stRetEnterGuildCopymapResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnterGuildCopymapResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetEnterGuildCopymapResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetEnterGuildCopymapResult));
  stRetEnterGuildCopymapResult_eResult_descriptor_ = stRetEnterGuildCopymapResult_descriptor_->enum_type(0);
  stRetEnterGuildCopymapResult_ProtoModID_descriptor_ = stRetEnterGuildCopymapResult_descriptor_->enum_type(1);
  stRetEnterGuildCopymapResult_ProtoFunID_descriptor_ = stRetEnterGuildCopymapResult_descriptor_->enum_type(2);
  stStartGuildCopymap_descriptor_ = file->message_type(82);
  static const int stStartGuildCopymap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStartGuildCopymap, copymapid_),
  };
  stStartGuildCopymap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stStartGuildCopymap_descriptor_,
      stStartGuildCopymap::default_instance_,
      stStartGuildCopymap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStartGuildCopymap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStartGuildCopymap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stStartGuildCopymap));
  stStartGuildCopymap_ProtoModID_descriptor_ = stStartGuildCopymap_descriptor_->enum_type(0);
  stStartGuildCopymap_ProtoFunID_descriptor_ = stStartGuildCopymap_descriptor_->enum_type(1);
  stStartGuildCopymapResult_descriptor_ = file->message_type(83);
  static const int stStartGuildCopymapResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStartGuildCopymapResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStartGuildCopymapResult, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStartGuildCopymapResult, copymapid_),
  };
  stStartGuildCopymapResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stStartGuildCopymapResult_descriptor_,
      stStartGuildCopymapResult::default_instance_,
      stStartGuildCopymapResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStartGuildCopymapResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stStartGuildCopymapResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stStartGuildCopymapResult));
  stStartGuildCopymapResult_eResult_descriptor_ = stStartGuildCopymapResult_descriptor_->enum_type(0);
  stStartGuildCopymapResult_ProtoModID_descriptor_ = stStartGuildCopymapResult_descriptor_->enum_type(1);
  stStartGuildCopymapResult_ProtoFunID_descriptor_ = stStartGuildCopymapResult_descriptor_->enum_type(2);
  stInviteTeamInGuildChannel_descriptor_ = file->message_type(84);
  static const int stInviteTeamInGuildChannel_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteTeamInGuildChannel, charid_),
  };
  stInviteTeamInGuildChannel_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stInviteTeamInGuildChannel_descriptor_,
      stInviteTeamInGuildChannel::default_instance_,
      stInviteTeamInGuildChannel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteTeamInGuildChannel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stInviteTeamInGuildChannel, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stInviteTeamInGuildChannel));
  stInviteTeamInGuildChannel_ProtoModID_descriptor_ = stInviteTeamInGuildChannel_descriptor_->enum_type(0);
  stInviteTeamInGuildChannel_ProtoFunID_descriptor_ = stInviteTeamInGuildChannel_descriptor_->enum_type(1);
  stNotifyGuildMemContribute_descriptor_ = file->message_type(85);
  static const int stNotifyGuildMemContribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuildMemContribute, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuildMemContribute, curval_),
  };
  stNotifyGuildMemContribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyGuildMemContribute_descriptor_,
      stNotifyGuildMemContribute::default_instance_,
      stNotifyGuildMemContribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuildMemContribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuildMemContribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyGuildMemContribute));
  stNotifyGuildMemContribute_ProtoModID_descriptor_ = stNotifyGuildMemContribute_descriptor_->enum_type(0);
  stNotifyGuildMemContribute_ProtoFunID_descriptor_ = stNotifyGuildMemContribute_descriptor_->enum_type(1);
  stNotifyGuildMemActivityDegree_descriptor_ = file->message_type(86);
  static const int stNotifyGuildMemActivityDegree_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuildMemActivityDegree, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuildMemActivityDegree, curval_),
  };
  stNotifyGuildMemActivityDegree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyGuildMemActivityDegree_descriptor_,
      stNotifyGuildMemActivityDegree::default_instance_,
      stNotifyGuildMemActivityDegree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuildMemActivityDegree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyGuildMemActivityDegree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyGuildMemActivityDegree));
  stNotifyGuildMemActivityDegree_ProtoModID_descriptor_ = stNotifyGuildMemActivityDegree_descriptor_->enum_type(0);
  stNotifyGuildMemActivityDegree_ProtoFunID_descriptor_ = stNotifyGuildMemActivityDegree_descriptor_->enum_type(1);
  stReqGuildManorFightWin_descriptor_ = file->message_type(87);
  static const int stReqGuildManorFightWin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildManorFightWin, charid_),
  };
  stReqGuildManorFightWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqGuildManorFightWin_descriptor_,
      stReqGuildManorFightWin::default_instance_,
      stReqGuildManorFightWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildManorFightWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqGuildManorFightWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqGuildManorFightWin));
  stReqGuildManorFightWin_ProtoModID_descriptor_ = stReqGuildManorFightWin_descriptor_->enum_type(0);
  stReqGuildManorFightWin_ProtoFunID_descriptor_ = stReqGuildManorFightWin_descriptor_->enum_type(1);
  stSynManorInfo_descriptor_ = file->message_type(88);
  static const int stSynManorInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorInfo, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorInfo, ownerguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorInfo, ownerguildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorInfo, sideaguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorInfo, sidebguildid_),
  };
  stSynManorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynManorInfo_descriptor_,
      stSynManorInfo::default_instance_,
      stSynManorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynManorInfo));
  stRetGuildManorFightInfo_descriptor_ = file->message_type(89);
  static const int stRetGuildManorFightInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildManorFightInfo, manorinfos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildManorFightInfo, applymanorid_),
  };
  stRetGuildManorFightInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetGuildManorFightInfo_descriptor_,
      stRetGuildManorFightInfo::default_instance_,
      stRetGuildManorFightInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildManorFightInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetGuildManorFightInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetGuildManorFightInfo));
  stRetGuildManorFightInfo_ProtoModID_descriptor_ = stRetGuildManorFightInfo_descriptor_->enum_type(0);
  stRetGuildManorFightInfo_ProtoFunID_descriptor_ = stRetGuildManorFightInfo_descriptor_->enum_type(1);
  stReqOpenApplyManorFightWin_descriptor_ = file->message_type(90);
  static const int stReqOpenApplyManorFightWin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenApplyManorFightWin, manorid_),
  };
  stReqOpenApplyManorFightWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqOpenApplyManorFightWin_descriptor_,
      stReqOpenApplyManorFightWin::default_instance_,
      stReqOpenApplyManorFightWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenApplyManorFightWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqOpenApplyManorFightWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqOpenApplyManorFightWin));
  stReqOpenApplyManorFightWin_ProtoModID_descriptor_ = stReqOpenApplyManorFightWin_descriptor_->enum_type(0);
  stReqOpenApplyManorFightWin_ProtoFunID_descriptor_ = stReqOpenApplyManorFightWin_descriptor_->enum_type(1);
  stSynManoryApplyInfo_descriptor_ = file->message_type(91);
  static const int stSynManoryApplyInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManoryApplyInfo, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManoryApplyInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManoryApplyInfo, contribute_),
  };
  stSynManoryApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynManoryApplyInfo_descriptor_,
      stSynManoryApplyInfo::default_instance_,
      stSynManoryApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManoryApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManoryApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynManoryApplyInfo));
  stApplyManorWinInfo_descriptor_ = file->message_type(92);
  static const int stApplyManorWinInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorWinInfo, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorWinInfo, applyinfo_),
  };
  stApplyManorWinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stApplyManorWinInfo_descriptor_,
      stApplyManorWinInfo::default_instance_,
      stApplyManorWinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorWinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorWinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stApplyManorWinInfo));
  stApplyManorWinInfo_ProtoModID_descriptor_ = stApplyManorWinInfo_descriptor_->enum_type(0);
  stApplyManorWinInfo_ProtoFunID_descriptor_ = stApplyManorWinInfo_descriptor_->enum_type(1);
  stRefreshManorApplyInfo_descriptor_ = file->message_type(93);
  static const int stRefreshManorApplyInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshManorApplyInfo, manorid_),
  };
  stRefreshManorApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRefreshManorApplyInfo_descriptor_,
      stRefreshManorApplyInfo::default_instance_,
      stRefreshManorApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshManorApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRefreshManorApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRefreshManorApplyInfo));
  stRefreshManorApplyInfo_ProtoModID_descriptor_ = stRefreshManorApplyInfo_descriptor_->enum_type(0);
  stRefreshManorApplyInfo_ProtoFunID_descriptor_ = stRefreshManorApplyInfo_descriptor_->enum_type(1);
  stRetManorApplyInfo_descriptor_ = file->message_type(94);
  static const int stRetManorApplyInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorApplyInfo, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorApplyInfo, applyinfo_),
  };
  stRetManorApplyInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetManorApplyInfo_descriptor_,
      stRetManorApplyInfo::default_instance_,
      stRetManorApplyInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorApplyInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorApplyInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetManorApplyInfo));
  stRetManorApplyInfo_ProtoModID_descriptor_ = stRetManorApplyInfo_descriptor_->enum_type(0);
  stRetManorApplyInfo_ProtoFunID_descriptor_ = stRetManorApplyInfo_descriptor_->enum_type(1);
  stApplyManorFight_descriptor_ = file->message_type(95);
  static const int stApplyManorFight_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFight, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFight, contribute_),
  };
  stApplyManorFight_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stApplyManorFight_descriptor_,
      stApplyManorFight::default_instance_,
      stApplyManorFight_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFight, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFight, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stApplyManorFight));
  stApplyManorFight_ProtoModID_descriptor_ = stApplyManorFight_descriptor_->enum_type(0);
  stApplyManorFight_ProtoFunID_descriptor_ = stApplyManorFight_descriptor_->enum_type(1);
  stApplyManorFightRet_descriptor_ = file->message_type(96);
  static const int stApplyManorFightRet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFightRet, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFightRet, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFightRet, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFightRet, guildid_),
  };
  stApplyManorFightRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stApplyManorFightRet_descriptor_,
      stApplyManorFightRet::default_instance_,
      stApplyManorFightRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFightRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stApplyManorFightRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stApplyManorFightRet));
  stApplyManorFightRet_eResult_descriptor_ = stApplyManorFightRet_descriptor_->enum_type(0);
  stApplyManorFightRet_ProtoModID_descriptor_ = stApplyManorFightRet_descriptor_->enum_type(1);
  stApplyManorFightRet_ProtoFunID_descriptor_ = stApplyManorFightRet_descriptor_->enum_type(2);
  stReqManorFightWin_descriptor_ = file->message_type(97);
  static const int stReqManorFightWin_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqManorFightWin, manorid_),
  };
  stReqManorFightWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqManorFightWin_descriptor_,
      stReqManorFightWin::default_instance_,
      stReqManorFightWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqManorFightWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqManorFightWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqManorFightWin));
  stReqManorFightWin_ProtoModID_descriptor_ = stReqManorFightWin_descriptor_->enum_type(0);
  stReqManorFightWin_ProtoFunID_descriptor_ = stReqManorFightWin_descriptor_->enum_type(1);
  stSynFormationTeamInfo_descriptor_ = file->message_type(98);
  static const int stSynFormationTeamInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFormationTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFormationTeamInfo, num_),
  };
  stSynFormationTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynFormationTeamInfo_descriptor_,
      stSynFormationTeamInfo::default_instance_,
      stSynFormationTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFormationTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynFormationTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynFormationTeamInfo));
  stRetManorFightWinInfo_descriptor_ = file->message_type(99);
  static const int stRetManorFightWinInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, mainjoininnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, leftjoininnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, rightjoininnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, guildaname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, guildbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, mainwinguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, leftwinguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, rightwinguildid_),
  };
  stRetManorFightWinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetManorFightWinInfo_descriptor_,
      stRetManorFightWinInfo::default_instance_,
      stRetManorFightWinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightWinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetManorFightWinInfo));
  stRetManorFightWinInfo_ProtoModID_descriptor_ = stRetManorFightWinInfo_descriptor_->enum_type(0);
  stRetManorFightWinInfo_ProtoFunID_descriptor_ = stRetManorFightWinInfo_descriptor_->enum_type(1);
  stReqManorFightFormation_descriptor_ = file->message_type(100);
  static const int stReqManorFightFormation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqManorFightFormation, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqManorFightFormation, formation_),
  };
  stReqManorFightFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqManorFightFormation_descriptor_,
      stReqManorFightFormation::default_instance_,
      stReqManorFightFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqManorFightFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqManorFightFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqManorFightFormation));
  stReqManorFightFormation_ProtoModID_descriptor_ = stReqManorFightFormation_descriptor_->enum_type(0);
  stReqManorFightFormation_ProtoFunID_descriptor_ = stReqManorFightFormation_descriptor_->enum_type(1);
  stSynManorBattleMem_descriptor_ = file->message_type(101);
  static const int stSynManorBattleMem_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, curhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, photoid_),
  };
  stSynManorBattleMem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynManorBattleMem_descriptor_,
      stSynManorBattleMem::default_instance_,
      stSynManorBattleMem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorBattleMem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynManorBattleMem));
  stRetManorFightFormation_descriptor_ = file->message_type(102);
  static const int stRetManorFightFormation_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightFormation, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightFormation, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightFormation, sideateam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightFormation, sidebteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightFormation, sideaguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightFormation, sidebguildid_),
  };
  stRetManorFightFormation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stRetManorFightFormation_descriptor_,
      stRetManorFightFormation::default_instance_,
      stRetManorFightFormation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightFormation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stRetManorFightFormation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stRetManorFightFormation));
  stRetManorFightFormation_ProtoModID_descriptor_ = stRetManorFightFormation_descriptor_->enum_type(0);
  stRetManorFightFormation_ProtoFunID_descriptor_ = stRetManorFightFormation_descriptor_->enum_type(1);
  stEnterManorFightTeam_descriptor_ = file->message_type(103);
  static const int stEnterManorFightTeam_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, sideaguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, sidebguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, maxhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, photoid_),
  };
  stEnterManorFightTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterManorFightTeam_descriptor_,
      stEnterManorFightTeam::default_instance_,
      stEnterManorFightTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterManorFightTeam));
  stEnterManorFightTeam_ProtoModID_descriptor_ = stEnterManorFightTeam_descriptor_->enum_type(0);
  stEnterManorFightTeam_ProtoFunID_descriptor_ = stEnterManorFightTeam_descriptor_->enum_type(1);
  stEnterManorFightTeamResult_descriptor_ = file->message_type(104);
  static const int stEnterManorFightTeamResult_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeamResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeamResult, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeamResult, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeamResult, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeamResult, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeamResult, sideaguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeamResult, sidebguildid_),
  };
  stEnterManorFightTeamResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stEnterManorFightTeamResult_descriptor_,
      stEnterManorFightTeamResult::default_instance_,
      stEnterManorFightTeamResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeamResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stEnterManorFightTeamResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stEnterManorFightTeamResult));
  stEnterManorFightTeamResult_eResult_descriptor_ = stEnterManorFightTeamResult_descriptor_->enum_type(0);
  stEnterManorFightTeamResult_ProtoModID_descriptor_ = stEnterManorFightTeamResult_descriptor_->enum_type(1);
  stEnterManorFightTeamResult_ProtoFunID_descriptor_ = stEnterManorFightTeamResult_descriptor_->enum_type(2);
  stNotifyLeaveManorFightWin_descriptor_ = file->message_type(105);
  static const int stNotifyLeaveManorFightWin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLeaveManorFightWin, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLeaveManorFightWin, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLeaveManorFightWin, formation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLeaveManorFightWin, teamid_),
  };
  stNotifyLeaveManorFightWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyLeaveManorFightWin_descriptor_,
      stNotifyLeaveManorFightWin::default_instance_,
      stNotifyLeaveManorFightWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLeaveManorFightWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyLeaveManorFightWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyLeaveManorFightWin));
  stNotifyLeaveManorFightWin_ProtoModID_descriptor_ = stNotifyLeaveManorFightWin_descriptor_->enum_type(0);
  stNotifyLeaveManorFightWin_ProtoFunID_descriptor_ = stNotifyLeaveManorFightWin_descriptor_->enum_type(1);
  stSynManorFightItem_descriptor_ = file->message_type(106);
  static const int stSynManorFightItem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorFightItem, rolename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorFightItem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorFightItem, battlepower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorFightItem, killnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorFightItem, isdie_),
  };
  stSynManorFightItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynManorFightItem_descriptor_,
      stSynManorFightItem::default_instance_,
      stSynManorFightItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorFightItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynManorFightItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynManorFightItem));
  stManorFightPKResult_descriptor_ = file->message_type(107);
  static const int stManorFightPKResult_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightPKResult, sidea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightPKResult, sideb_),
  };
  stManorFightPKResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stManorFightPKResult_descriptor_,
      stManorFightPKResult::default_instance_,
      stManorFightPKResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightPKResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightPKResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stManorFightPKResult));
  stManorFightPKResult_ProtoModID_descriptor_ = stManorFightPKResult_descriptor_->enum_type(0);
  stManorFightPKResult_ProtoFunID_descriptor_ = stManorFightPKResult_descriptor_->enum_type(1);
  stManorFightPKFail_descriptor_ = file->message_type(108);
  static const int stManorFightPKFail_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightPKFail, sidea_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightPKFail, sideb_),
  };
  stManorFightPKFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stManorFightPKFail_descriptor_,
      stManorFightPKFail::default_instance_,
      stManorFightPKFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightPKFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightPKFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stManorFightPKFail));
  stManorFightPKFail_ProtoModID_descriptor_ = stManorFightPKFail_descriptor_->enum_type(0);
  stManorFightPKFail_ProtoFunID_descriptor_ = stManorFightPKFail_descriptor_->enum_type(1);
  stNotifyWinerAfterApplyEnd_descriptor_ = file->message_type(109);
  static const int stNotifyWinerAfterApplyEnd_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWinerAfterApplyEnd, guildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWinerAfterApplyEnd, manorid_),
  };
  stNotifyWinerAfterApplyEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyWinerAfterApplyEnd_descriptor_,
      stNotifyWinerAfterApplyEnd::default_instance_,
      stNotifyWinerAfterApplyEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWinerAfterApplyEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyWinerAfterApplyEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyWinerAfterApplyEnd));
  stNotifyWinerAfterApplyEnd_ProtoModID_descriptor_ = stNotifyWinerAfterApplyEnd_descriptor_->enum_type(0);
  stNotifyWinerAfterApplyEnd_ProtoFunID_descriptor_ = stNotifyWinerAfterApplyEnd_descriptor_->enum_type(1);
  stReqChgManorFightTeamPos_descriptor_ = file->message_type(110);
  static const int stReqChgManorFightTeamPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgManorFightTeamPos, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgManorFightTeamPos, destteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgManorFightTeamPos, destpos_),
  };
  stReqChgManorFightTeamPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqChgManorFightTeamPos_descriptor_,
      stReqChgManorFightTeamPos::default_instance_,
      stReqChgManorFightTeamPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgManorFightTeamPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqChgManorFightTeamPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqChgManorFightTeamPos));
  stReqChgManorFightTeamPos_ProtoModID_descriptor_ = stReqChgManorFightTeamPos_descriptor_->enum_type(0);
  stReqChgManorFightTeamPos_ProtoFunID_descriptor_ = stReqChgManorFightTeamPos_descriptor_->enum_type(1);
  stNotifyChgManorFightTeamPos_descriptor_ = file->message_type(111);
  static const int stNotifyChgManorFightTeamPos_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyChgManorFightTeamPos, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyChgManorFightTeamPos, srcteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyChgManorFightTeamPos, srcpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyChgManorFightTeamPos, dstteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyChgManorFightTeamPos, dstpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyChgManorFightTeamPos, formation_),
  };
  stNotifyChgManorFightTeamPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyChgManorFightTeamPos_descriptor_,
      stNotifyChgManorFightTeamPos::default_instance_,
      stNotifyChgManorFightTeamPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyChgManorFightTeamPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyChgManorFightTeamPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyChgManorFightTeamPos));
  stNotifyChgManorFightTeamPos_ProtoModID_descriptor_ = stNotifyChgManorFightTeamPos_descriptor_->enum_type(0);
  stNotifyChgManorFightTeamPos_ProtoFunID_descriptor_ = stNotifyChgManorFightTeamPos_descriptor_->enum_type(1);
  stChgManorFightTeamPosResult_descriptor_ = file->message_type(112);
  static const int stChgManorFightTeamPosResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgManorFightTeamPosResult, result_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgManorFightTeamPosResult, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgManorFightTeamPosResult, pos_),
  };
  stChgManorFightTeamPosResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stChgManorFightTeamPosResult_descriptor_,
      stChgManorFightTeamPosResult::default_instance_,
      stChgManorFightTeamPosResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgManorFightTeamPosResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stChgManorFightTeamPosResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stChgManorFightTeamPosResult));
  stChgManorFightTeamPosResult_eResult_descriptor_ = stChgManorFightTeamPosResult_descriptor_->enum_type(0);
  stChgManorFightTeamPosResult_ProtoModID_descriptor_ = stChgManorFightTeamPosResult_descriptor_->enum_type(1);
  stChgManorFightTeamPosResult_ProtoFunID_descriptor_ = stChgManorFightTeamPosResult_descriptor_->enum_type(2);
  stNotifyManorFightFail_descriptor_ = file->message_type(113);
  static const int stNotifyManorFightFail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyManorFightFail, manorid_),
  };
  stNotifyManorFightFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyManorFightFail_descriptor_,
      stNotifyManorFightFail::default_instance_,
      stNotifyManorFightFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyManorFightFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyManorFightFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyManorFightFail));
  stNotifyManorFightFail_ProtoModID_descriptor_ = stNotifyManorFightFail_descriptor_->enum_type(0);
  stNotifyManorFightFail_ProtoFunID_descriptor_ = stNotifyManorFightFail_descriptor_->enum_type(1);
  stManorFightHasNotMatch_descriptor_ = file->message_type(114);
  static const int stManorFightHasNotMatch_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightHasNotMatch, manorid_),
  };
  stManorFightHasNotMatch_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stManorFightHasNotMatch_descriptor_,
      stManorFightHasNotMatch::default_instance_,
      stManorFightHasNotMatch_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightHasNotMatch, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightHasNotMatch, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stManorFightHasNotMatch));
  stManorFightHasNotMatch_ProtoModID_descriptor_ = stManorFightHasNotMatch_descriptor_->enum_type(0);
  stManorFightHasNotMatch_ProtoFunID_descriptor_ = stManorFightHasNotMatch_descriptor_->enum_type(1);
  stManorFightFormationResult_descriptor_ = file->message_type(115);
  static const int stManorFightFormationResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightFormationResult, manorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightFormationResult, winguildid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightFormationResult, formation_),
  };
  stManorFightFormationResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stManorFightFormationResult_descriptor_,
      stManorFightFormationResult::default_instance_,
      stManorFightFormationResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightFormationResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightFormationResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stManorFightFormationResult));
  stManorFightFormationResult_ProtoModID_descriptor_ = stManorFightFormationResult_descriptor_->enum_type(0);
  stManorFightFormationResult_ProtoFunID_descriptor_ = stManorFightFormationResult_descriptor_->enum_type(1);
  stManorFightFinish_descriptor_ = file->message_type(116);
  static const int stManorFightFinish_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightFinish, manorid_),
  };
  stManorFightFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stManorFightFinish_descriptor_,
      stManorFightFinish::default_instance_,
      stManorFightFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stManorFightFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stManorFightFinish));
  stManorFightFinish_ProtoModID_descriptor_ = stManorFightFinish_descriptor_->enum_type(0);
  stManorFightFinish_ProtoFunID_descriptor_ = stManorFightFinish_descriptor_->enum_type(1);
  stReqLevelUpBlackMarketLv_descriptor_ = file->message_type(117);
  static const int stReqLevelUpBlackMarketLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelUpBlackMarketLv, guildid_),
  };
  stReqLevelUpBlackMarketLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stReqLevelUpBlackMarketLv_descriptor_,
      stReqLevelUpBlackMarketLv::default_instance_,
      stReqLevelUpBlackMarketLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelUpBlackMarketLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stReqLevelUpBlackMarketLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stReqLevelUpBlackMarketLv));
  stReqLevelUpBlackMarketLv_ProtoModID_descriptor_ = stReqLevelUpBlackMarketLv_descriptor_->enum_type(0);
  stReqLevelUpBlackMarketLv_ProtoFunID_descriptor_ = stReqLevelUpBlackMarketLv_descriptor_->enum_type(1);
  stLevelUpBlackMarketLvResult_descriptor_ = file->message_type(118);
  static const int stLevelUpBlackMarketLvResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelUpBlackMarketLvResult, result_),
  };
  stLevelUpBlackMarketLvResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLevelUpBlackMarketLvResult_descriptor_,
      stLevelUpBlackMarketLvResult::default_instance_,
      stLevelUpBlackMarketLvResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelUpBlackMarketLvResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLevelUpBlackMarketLvResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLevelUpBlackMarketLvResult));
  stLevelUpBlackMarketLvResult_eResult_descriptor_ = stLevelUpBlackMarketLvResult_descriptor_->enum_type(0);
  stLevelUpBlackMarketLvResult_ProtoModID_descriptor_ = stLevelUpBlackMarketLvResult_descriptor_->enum_type(1);
  stLevelUpBlackMarketLvResult_ProtoFunID_descriptor_ = stLevelUpBlackMarketLvResult_descriptor_->enum_type(2);
  stSynBlackMarketBuildingLv_descriptor_ = file->message_type(119);
  static const int stSynBlackMarketBuildingLv_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBlackMarketBuildingLv, lv_),
  };
  stSynBlackMarketBuildingLv_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stSynBlackMarketBuildingLv_descriptor_,
      stSynBlackMarketBuildingLv::default_instance_,
      stSynBlackMarketBuildingLv_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBlackMarketBuildingLv, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stSynBlackMarketBuildingLv, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stSynBlackMarketBuildingLv));
  stSynBlackMarketBuildingLv_ProtoModID_descriptor_ = stSynBlackMarketBuildingLv_descriptor_->enum_type(0);
  stSynBlackMarketBuildingLv_ProtoFunID_descriptor_ = stSynBlackMarketBuildingLv_descriptor_->enum_type(1);
  eGuildTile_descriptor_ = file->enum_type(0);
  eCreateGuildError_descriptor_ = file->enum_type(1);
  JoinGuildResult_descriptor_ = file->enum_type(2);
  ReplyError_descriptor_ = file->enum_type(3);
  eAssignTitleError_descriptor_ = file->enum_type(4);
  eCancelTitleError_descriptor_ = file->enum_type(5);
  eGiveLeaderErrorNo_descriptor_ = file->enum_type(6);
  eFireMemberErrorNo_descriptor_ = file->enum_type(7);
  eKillOutErrorNo_descriptor_ = file->enum_type(8);
  eTraceID_descriptor_ = file->enum_type(9);
  eFormation_descriptor_ = file->enum_type(10);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GuildProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynGuildMemInfo_descriptor_, &stSynGuildMemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuildListInfo_descriptor_, &stGuildListInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGuild_descriptor_, &stReqGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGuild_descriptor_, &stRetGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGuildDetailInfo_descriptor_, &stReqGuildDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGuildDetailInfo_descriptor_, &stRetGuildDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqCreateGuild_descriptor_, &stReqCreateGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCreateGuildError_descriptor_, &stCreateGuildError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSendMyGuild_descriptor_, &stSendMyGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqJoinInGuild_descriptor_, &stReqJoinInGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stJoinInGuildResult_descriptor_, &stJoinInGuildResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqApplyJoinInList_descriptor_, &stReqApplyJoinInList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynApplierInfo_descriptor_, &stSynApplierInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetApplyJoinInList_descriptor_, &stRetApplyJoinInList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyApplier_descriptor_, &stReplyApplier::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReplyApplerError_descriptor_, &stReplyApplerError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stJoinInGuildTip_descriptor_, &stJoinInGuildTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMemJoinInGuild_descriptor_, &stMemJoinInGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLeaveGuild_descriptor_, &stReqLeaveGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stMemLeaveGuild_descriptor_, &stMemLeaveGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAssignGuildTitle_descriptor_, &stAssignGuildTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAssignTitleError_descriptor_, &stAssignTitleError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelTitle_descriptor_, &stCancelTitle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelTitleError_descriptor_, &stCancelTitleError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveLeader2Other_descriptor_, &stGiveLeader2Other::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGiveLeaderError_descriptor_, &stGiveLeaderError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFireGuild_descriptor_, &stFireGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stFireGuildError_descriptor_, &stFireGuildError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuildMemOnOffLine_descriptor_, &stGuildMemOnOffLine::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stKillOutGroupMember_descriptor_, &stKillOutGroupMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stKillOutTip_descriptor_, &stKillOutTip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stKillOutGroupMemberError_descriptor_, &stKillOutGroupMemberError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGuildMemInfo_descriptor_, &stRetGuildMemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynGuildContribute_descriptor_, &stSynGuildContribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChgGuildSign_descriptor_, &stChgGuildSign::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyFireRemainTime_descriptor_, &stNotifyFireRemainTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGuildMemInfo_descriptor_, &stReqGuildMemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelFireGuild_descriptor_, &stCancelFireGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelFireGuildResult_descriptor_, &stCancelFireGuildResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelJoinInGuild_descriptor_, &stCancelJoinInGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCancelJoinInGuildResult_descriptor_, &stCancelJoinInGuildResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDonate_descriptor_, &stReqDonate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDonateResult_descriptor_, &stDonateResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLevelUpHallLv_descriptor_, &stReqLevelUpHallLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLevelUpHallLvResult_descriptor_, &stLevelUpHallLvResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynHallLv_descriptor_, &stSynHallLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPrayBuildingLv_descriptor_, &stReqPrayBuildingLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPrayBuildingLvResult_descriptor_, &stPrayBuildingLvResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynPrayBuildingLv_descriptor_, &stSynPrayBuildingLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqPray_descriptor_, &stReqPray::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stPrayResult_descriptor_, &stPrayResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLevelUpShopBuildingLv_descriptor_, &stReqLevelUpShopBuildingLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLevelUpShopBuildingLvResult_descriptor_, &stLevelUpShopBuildingLvResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynShopBuilding_descriptor_, &stSynShopBuilding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGuildTrace_descriptor_, &stReqGuildTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuildTraceInfo_descriptor_, &stGuildTraceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGuildTrace_descriptor_, &stRetGuildTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stAddNewGuildTrace_descriptor_, &stAddNewGuildTrace::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChgNotice_descriptor_, &stChgNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuildDonateState_descriptor_, &stGuildDonateState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stGuildPrayState_descriptor_, &stGuildPrayState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChangeBadge_descriptor_, &stReqChangeBadge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChangeBadge_descriptor_, &stChangeBadge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stIntoGuildCopymap_descriptor_, &stIntoGuildCopymap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stIntoGuildCopymapError_descriptor_, &stIntoGuildCopymapError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSearchGuild_descriptor_, &stSearchGuild::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetSearchGuildResult_descriptor_, &stRetSearchGuildResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMemberContribute_descriptor_, &stSynMemberContribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenGuildCopymapWin_descriptor_, &stReqOpenGuildCopymapWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCopymapOpenInfo_descriptor_, &stCopymapOpenInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGuildCopymapInfo_descriptor_, &stRetGuildCopymapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqDamageSortlist_descriptor_, &stReqDamageSortlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stDamageSortItemInfo_descriptor_, &stDamageSortItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetDamageSortlist_descriptor_, &stRetDamageSortlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stCopymapScoreSortItem_descriptor_, &stCopymapScoreSortItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGuildCopymapScoreSortlist_descriptor_, &stReqGuildCopymapScoreSortlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGuildCopymapScoreSortlist_descriptor_, &stRetGuildCopymapScoreSortlist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynGuildActivityDegree_descriptor_, &stSynGuildActivityDegree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMemberChallengeNum_descriptor_, &stSynMemberChallengeNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynMemberAssistNum_descriptor_, &stSynMemberAssistNum::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqEnterGuildCopymap_descriptor_, &stReqEnterGuildCopymap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetEnterGuildCopymapResult_descriptor_, &stRetEnterGuildCopymapResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stStartGuildCopymap_descriptor_, &stStartGuildCopymap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stStartGuildCopymapResult_descriptor_, &stStartGuildCopymapResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stInviteTeamInGuildChannel_descriptor_, &stInviteTeamInGuildChannel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyGuildMemContribute_descriptor_, &stNotifyGuildMemContribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyGuildMemActivityDegree_descriptor_, &stNotifyGuildMemActivityDegree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqGuildManorFightWin_descriptor_, &stReqGuildManorFightWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynManorInfo_descriptor_, &stSynManorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetGuildManorFightInfo_descriptor_, &stRetGuildManorFightInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqOpenApplyManorFightWin_descriptor_, &stReqOpenApplyManorFightWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynManoryApplyInfo_descriptor_, &stSynManoryApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stApplyManorWinInfo_descriptor_, &stApplyManorWinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRefreshManorApplyInfo_descriptor_, &stRefreshManorApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetManorApplyInfo_descriptor_, &stRetManorApplyInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stApplyManorFight_descriptor_, &stApplyManorFight::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stApplyManorFightRet_descriptor_, &stApplyManorFightRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqManorFightWin_descriptor_, &stReqManorFightWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynFormationTeamInfo_descriptor_, &stSynFormationTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetManorFightWinInfo_descriptor_, &stRetManorFightWinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqManorFightFormation_descriptor_, &stReqManorFightFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynManorBattleMem_descriptor_, &stSynManorBattleMem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stRetManorFightFormation_descriptor_, &stRetManorFightFormation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterManorFightTeam_descriptor_, &stEnterManorFightTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stEnterManorFightTeamResult_descriptor_, &stEnterManorFightTeamResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyLeaveManorFightWin_descriptor_, &stNotifyLeaveManorFightWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynManorFightItem_descriptor_, &stSynManorFightItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stManorFightPKResult_descriptor_, &stManorFightPKResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stManorFightPKFail_descriptor_, &stManorFightPKFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyWinerAfterApplyEnd_descriptor_, &stNotifyWinerAfterApplyEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqChgManorFightTeamPos_descriptor_, &stReqChgManorFightTeamPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyChgManorFightTeamPos_descriptor_, &stNotifyChgManorFightTeamPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stChgManorFightTeamPosResult_descriptor_, &stChgManorFightTeamPosResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyManorFightFail_descriptor_, &stNotifyManorFightFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stManorFightHasNotMatch_descriptor_, &stManorFightHasNotMatch::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stManorFightFormationResult_descriptor_, &stManorFightFormationResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stManorFightFinish_descriptor_, &stManorFightFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stReqLevelUpBlackMarketLv_descriptor_, &stReqLevelUpBlackMarketLv::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLevelUpBlackMarketLvResult_descriptor_, &stLevelUpBlackMarketLvResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stSynBlackMarketBuildingLv_descriptor_, &stSynBlackMarketBuildingLv::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GuildProto_2eproto() {
  delete stSynGuildMemInfo::default_instance_;
  delete stSynGuildMemInfo_reflection_;
  delete stGuildListInfo::default_instance_;
  delete stGuildListInfo_reflection_;
  delete stReqGuild::default_instance_;
  delete stReqGuild_reflection_;
  delete stRetGuild::default_instance_;
  delete stRetGuild_reflection_;
  delete stReqGuildDetailInfo::default_instance_;
  delete stReqGuildDetailInfo_reflection_;
  delete stRetGuildDetailInfo::default_instance_;
  delete stRetGuildDetailInfo_reflection_;
  delete stReqCreateGuild::default_instance_;
  delete stReqCreateGuild_reflection_;
  delete stCreateGuildError::default_instance_;
  delete stCreateGuildError_reflection_;
  delete stSendMyGuild::default_instance_;
  delete stSendMyGuild_reflection_;
  delete stReqJoinInGuild::default_instance_;
  delete stReqJoinInGuild_reflection_;
  delete stJoinInGuildResult::default_instance_;
  delete stJoinInGuildResult_reflection_;
  delete stReqApplyJoinInList::default_instance_;
  delete stReqApplyJoinInList_reflection_;
  delete stSynApplierInfo::default_instance_;
  delete stSynApplierInfo_reflection_;
  delete stRetApplyJoinInList::default_instance_;
  delete stRetApplyJoinInList_reflection_;
  delete stReplyApplier::default_instance_;
  delete stReplyApplier_reflection_;
  delete stReplyApplerError::default_instance_;
  delete stReplyApplerError_reflection_;
  delete stJoinInGuildTip::default_instance_;
  delete stJoinInGuildTip_reflection_;
  delete stMemJoinInGuild::default_instance_;
  delete stMemJoinInGuild_reflection_;
  delete stReqLeaveGuild::default_instance_;
  delete stReqLeaveGuild_reflection_;
  delete stMemLeaveGuild::default_instance_;
  delete stMemLeaveGuild_reflection_;
  delete stAssignGuildTitle::default_instance_;
  delete stAssignGuildTitle_reflection_;
  delete stAssignTitleError::default_instance_;
  delete stAssignTitleError_reflection_;
  delete stCancelTitle::default_instance_;
  delete stCancelTitle_reflection_;
  delete stCancelTitleError::default_instance_;
  delete stCancelTitleError_reflection_;
  delete stGiveLeader2Other::default_instance_;
  delete stGiveLeader2Other_reflection_;
  delete stGiveLeaderError::default_instance_;
  delete stGiveLeaderError_reflection_;
  delete stFireGuild::default_instance_;
  delete stFireGuild_reflection_;
  delete stFireGuildError::default_instance_;
  delete stFireGuildError_reflection_;
  delete stGuildMemOnOffLine::default_instance_;
  delete stGuildMemOnOffLine_reflection_;
  delete stKillOutGroupMember::default_instance_;
  delete stKillOutGroupMember_reflection_;
  delete stKillOutTip::default_instance_;
  delete stKillOutTip_reflection_;
  delete stKillOutGroupMemberError::default_instance_;
  delete stKillOutGroupMemberError_reflection_;
  delete stRetGuildMemInfo::default_instance_;
  delete stRetGuildMemInfo_reflection_;
  delete stSynGuildContribute::default_instance_;
  delete stSynGuildContribute_reflection_;
  delete stChgGuildSign::default_instance_;
  delete stChgGuildSign_reflection_;
  delete stNotifyFireRemainTime::default_instance_;
  delete stNotifyFireRemainTime_reflection_;
  delete stReqGuildMemInfo::default_instance_;
  delete stReqGuildMemInfo_reflection_;
  delete stCancelFireGuild::default_instance_;
  delete stCancelFireGuild_reflection_;
  delete stCancelFireGuildResult::default_instance_;
  delete stCancelFireGuildResult_reflection_;
  delete stCancelJoinInGuild::default_instance_;
  delete stCancelJoinInGuild_reflection_;
  delete stCancelJoinInGuildResult::default_instance_;
  delete stCancelJoinInGuildResult_reflection_;
  delete stReqDonate::default_instance_;
  delete stReqDonate_reflection_;
  delete stDonateResult::default_instance_;
  delete stDonateResult_reflection_;
  delete stReqLevelUpHallLv::default_instance_;
  delete stReqLevelUpHallLv_reflection_;
  delete stLevelUpHallLvResult::default_instance_;
  delete stLevelUpHallLvResult_reflection_;
  delete stSynHallLv::default_instance_;
  delete stSynHallLv_reflection_;
  delete stReqPrayBuildingLv::default_instance_;
  delete stReqPrayBuildingLv_reflection_;
  delete stPrayBuildingLvResult::default_instance_;
  delete stPrayBuildingLvResult_reflection_;
  delete stSynPrayBuildingLv::default_instance_;
  delete stSynPrayBuildingLv_reflection_;
  delete stReqPray::default_instance_;
  delete stReqPray_reflection_;
  delete stPrayResult::default_instance_;
  delete stPrayResult_reflection_;
  delete stReqLevelUpShopBuildingLv::default_instance_;
  delete stReqLevelUpShopBuildingLv_reflection_;
  delete stLevelUpShopBuildingLvResult::default_instance_;
  delete stLevelUpShopBuildingLvResult_reflection_;
  delete stSynShopBuilding::default_instance_;
  delete stSynShopBuilding_reflection_;
  delete stReqGuildTrace::default_instance_;
  delete stReqGuildTrace_reflection_;
  delete stGuildTraceInfo::default_instance_;
  delete stGuildTraceInfo_reflection_;
  delete stRetGuildTrace::default_instance_;
  delete stRetGuildTrace_reflection_;
  delete stAddNewGuildTrace::default_instance_;
  delete stAddNewGuildTrace_reflection_;
  delete stChgNotice::default_instance_;
  delete stChgNotice_reflection_;
  delete stGuildDonateState::default_instance_;
  delete stGuildDonateState_reflection_;
  delete stGuildPrayState::default_instance_;
  delete stGuildPrayState_reflection_;
  delete stReqChangeBadge::default_instance_;
  delete stReqChangeBadge_reflection_;
  delete stChangeBadge::default_instance_;
  delete stChangeBadge_reflection_;
  delete stIntoGuildCopymap::default_instance_;
  delete stIntoGuildCopymap_reflection_;
  delete stIntoGuildCopymapError::default_instance_;
  delete stIntoGuildCopymapError_reflection_;
  delete stSearchGuild::default_instance_;
  delete stSearchGuild_reflection_;
  delete stRetSearchGuildResult::default_instance_;
  delete stRetSearchGuildResult_reflection_;
  delete stSynMemberContribute::default_instance_;
  delete stSynMemberContribute_reflection_;
  delete stReqOpenGuildCopymapWin::default_instance_;
  delete stReqOpenGuildCopymapWin_reflection_;
  delete stCopymapOpenInfo::default_instance_;
  delete stCopymapOpenInfo_reflection_;
  delete stRetGuildCopymapInfo::default_instance_;
  delete stRetGuildCopymapInfo_reflection_;
  delete stReqDamageSortlist::default_instance_;
  delete stReqDamageSortlist_reflection_;
  delete stDamageSortItemInfo::default_instance_;
  delete stDamageSortItemInfo_reflection_;
  delete stRetDamageSortlist::default_instance_;
  delete stRetDamageSortlist_reflection_;
  delete stCopymapScoreSortItem::default_instance_;
  delete stCopymapScoreSortItem_reflection_;
  delete stReqGuildCopymapScoreSortlist::default_instance_;
  delete stReqGuildCopymapScoreSortlist_reflection_;
  delete stRetGuildCopymapScoreSortlist::default_instance_;
  delete stRetGuildCopymapScoreSortlist_reflection_;
  delete stSynGuildActivityDegree::default_instance_;
  delete stSynGuildActivityDegree_reflection_;
  delete stSynMemberChallengeNum::default_instance_;
  delete stSynMemberChallengeNum_reflection_;
  delete stSynMemberAssistNum::default_instance_;
  delete stSynMemberAssistNum_reflection_;
  delete stReqEnterGuildCopymap::default_instance_;
  delete stReqEnterGuildCopymap_reflection_;
  delete stRetEnterGuildCopymapResult::default_instance_;
  delete stRetEnterGuildCopymapResult_reflection_;
  delete stStartGuildCopymap::default_instance_;
  delete stStartGuildCopymap_reflection_;
  delete stStartGuildCopymapResult::default_instance_;
  delete stStartGuildCopymapResult_reflection_;
  delete stInviteTeamInGuildChannel::default_instance_;
  delete stInviteTeamInGuildChannel_reflection_;
  delete stNotifyGuildMemContribute::default_instance_;
  delete stNotifyGuildMemContribute_reflection_;
  delete stNotifyGuildMemActivityDegree::default_instance_;
  delete stNotifyGuildMemActivityDegree_reflection_;
  delete stReqGuildManorFightWin::default_instance_;
  delete stReqGuildManorFightWin_reflection_;
  delete stSynManorInfo::default_instance_;
  delete stSynManorInfo_reflection_;
  delete stRetGuildManorFightInfo::default_instance_;
  delete stRetGuildManorFightInfo_reflection_;
  delete stReqOpenApplyManorFightWin::default_instance_;
  delete stReqOpenApplyManorFightWin_reflection_;
  delete stSynManoryApplyInfo::default_instance_;
  delete stSynManoryApplyInfo_reflection_;
  delete stApplyManorWinInfo::default_instance_;
  delete stApplyManorWinInfo_reflection_;
  delete stRefreshManorApplyInfo::default_instance_;
  delete stRefreshManorApplyInfo_reflection_;
  delete stRetManorApplyInfo::default_instance_;
  delete stRetManorApplyInfo_reflection_;
  delete stApplyManorFight::default_instance_;
  delete stApplyManorFight_reflection_;
  delete stApplyManorFightRet::default_instance_;
  delete stApplyManorFightRet_reflection_;
  delete stReqManorFightWin::default_instance_;
  delete stReqManorFightWin_reflection_;
  delete stSynFormationTeamInfo::default_instance_;
  delete stSynFormationTeamInfo_reflection_;
  delete stRetManorFightWinInfo::default_instance_;
  delete stRetManorFightWinInfo_reflection_;
  delete stReqManorFightFormation::default_instance_;
  delete stReqManorFightFormation_reflection_;
  delete stSynManorBattleMem::default_instance_;
  delete stSynManorBattleMem_reflection_;
  delete stRetManorFightFormation::default_instance_;
  delete stRetManorFightFormation_reflection_;
  delete stEnterManorFightTeam::default_instance_;
  delete stEnterManorFightTeam_reflection_;
  delete stEnterManorFightTeamResult::default_instance_;
  delete stEnterManorFightTeamResult_reflection_;
  delete stNotifyLeaveManorFightWin::default_instance_;
  delete stNotifyLeaveManorFightWin_reflection_;
  delete stSynManorFightItem::default_instance_;
  delete stSynManorFightItem_reflection_;
  delete stManorFightPKResult::default_instance_;
  delete stManorFightPKResult_reflection_;
  delete stManorFightPKFail::default_instance_;
  delete stManorFightPKFail_reflection_;
  delete stNotifyWinerAfterApplyEnd::default_instance_;
  delete stNotifyWinerAfterApplyEnd_reflection_;
  delete stReqChgManorFightTeamPos::default_instance_;
  delete stReqChgManorFightTeamPos_reflection_;
  delete stNotifyChgManorFightTeamPos::default_instance_;
  delete stNotifyChgManorFightTeamPos_reflection_;
  delete stChgManorFightTeamPosResult::default_instance_;
  delete stChgManorFightTeamPosResult_reflection_;
  delete stNotifyManorFightFail::default_instance_;
  delete stNotifyManorFightFail_reflection_;
  delete stManorFightHasNotMatch::default_instance_;
  delete stManorFightHasNotMatch_reflection_;
  delete stManorFightFormationResult::default_instance_;
  delete stManorFightFormationResult_reflection_;
  delete stManorFightFinish::default_instance_;
  delete stManorFightFinish_reflection_;
  delete stReqLevelUpBlackMarketLv::default_instance_;
  delete stReqLevelUpBlackMarketLv_reflection_;
  delete stLevelUpBlackMarketLvResult::default_instance_;
  delete stLevelUpBlackMarketLvResult_reflection_;
  delete stSynBlackMarketBuildingLv::default_instance_;
  delete stSynBlackMarketBuildingLv_reflection_;
}

void protobuf_AddDesc_GuildProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::Proto::protobuf_AddDesc_ModID_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020GuildProto.proto\022\nGuildProto\032\013ModID.pr"
    "oto\"\241\002\n\021stSynGuildMemInfo\022\016\n\006charID\030\001 \001("
    "\r\022\014\n\004name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013\n\003job\030\004 "
    "\001(\r\022\013\n\003sex\030\005 \001(\r\022\r\n\005title\030\006 \001(\r\022\027\n\017today"
    "Contribute\030\007 \001(\r\022\022\n\ncontribute\030\010 \001(\r\022\016\n\006"
    "online\030\t \001(\010\022\023\n\013battlePower\030\n \001(\r\022\024\n\014cha"
    "llengeNum\030\013 \001(\r\022\021\n\tassistNum\030\014 \001(\r\022\023\n\013ac"
    "tivityVal\030\r \001(\r\022\025\n\rlastLoginTime\030\016 \001(\r\022\017"
    "\n\007photoID\030\017 \001(\r\"\312\001\n\017stGuildListInfo\022\014\n\004r"
    "ank\030\001 \001(\r\022\017\n\007guildID\030\002 \001(\r\022\021\n\tguildName\030"
    "\003 \001(\t\022\016\n\006hallLv\030\004 \001(\r\022\022\n\nleaderName\030\005 \001("
    "\t\022\020\n\010leaderLv\030\006 \001(\r\022\016\n\006memNum\030\007 \001(\r\022\016\n\006m"
    "axNum\030\010 \001(\r\022\014\n\004sign\030\t \001(\t\022\022\n\nhasApplied\030"
    "\n \001(\010\022\r\n\005badge\030\013 \001(\r\"L\n\nstReqGuild\022\014\n\004ra"
    "nk\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020\001\"y\n\nstRetGuild\022\016\n\006maxN"
    "um\030\001 \001(\r\022)\n\004data\030\002 \003(\0132\033.GuildProto.stGu"
    "ildListInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\002\"Y\n\024stReqGuildDetai"
    "lInfo\022\017\n\007guildID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\003\"\366\001\n\024stR"
    "etGuildDetailInfo\022\017\n\007guildID\030\001 \001(\r\022\021\n\tgu"
    "ildName\030\002 \001(\t\022\016\n\006hallLv\030\003 \001(\r\022\013\n\003exp\030\004 \001"
    "(\r\022\016\n\006memNum\030\005 \001(\r\022\016\n\006maxNum\030\007 \001(\r\022\014\n\004si"
    "gn\030\010 \001(\t\022.\n\007memInfo\030\t \003(\0132\035.GuildProto.s"
    "tSynGuildMemInfo\022\r\n\005badge\030\n \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "\004\"\313\001\n\020stReqCreateGuild\022\021\n\tguildName\030\001 \001("
    "\t\0227\n\005eType\030\002 \001(\0162(.GuildProto.stReqCreat"
    "eGuild.eUseResType\022\r\n\005badge\030\003 \001(\r\"*\n\013eUs"
    "eResType\022\014\n\010eDiamond\020\001\022\r\n\teGoldCoin\020\002\"\027\n"
    "\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005"
    "FunID\020\005\"u\n\022stCreateGuildError\022-\n\006result\030"
    "\001 \001(\0162\035.GuildProto.eCreateGuildError\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\006\"\215\003\n\rstSendMyGuild\022\017\n\007guildID\030\001 \001("
    "\r\022\021\n\tguildName\030\002 \001(\t\022\013\n\003exp\030\003 \001(\r\022\020\n\010lea"
    "derID\030\004 \001(\r\022\022\n\ncontribute\030\005 \001(\r\022\026\n\016fireR"
    "emainTime\030\006 \001(\r\022\014\n\004sign\030\007 \001(\t\022\016\n\006maxNum\030"
    "\010 \001(\r\022\016\n\006notice\030\t \001(\t\022\016\n\006hallLv\030\n \001(\r\022\016\n"
    "\006shopLv\030\013 \001(\r\022\026\n\016prayBuildingLv\030\014 \001(\r\022+\n"
    "\004data\030\r \003(\0132\035.GuildProto.stSynGuildMemIn"
    "fo\022\r\n\005badge\030\016 \001(\r\022\014\n\004rank\030\017 \001(\r\022\026\n\016activ"
    "ityDegree\030\020 \001(\r\022\023\n\013blackMarket\030\021 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020\007\"U\n\020stReqJoinInGuild\022\017\n\007guildID\030\001 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020\010\"\205\001\n\023stJoinInGuildResult\022+\n"
    "\006result\030\001 \001(\0162\033.GuildProto.JoinGuildResu"
    "lt\022\017\n\007guildID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\t\"X\n\024stReqAp"
    "plyJoinInList\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\n\""
    "\221\001\n\020stSynApplierInfo\022\016\n\006charID\030\001 \001(\r\022\014\n\004"
    "name\030\002 \001(\t\022\r\n\005level\030\003 \001(\r\022\013\n\003job\030\004 \001(\r\022\013"
    "\n\003sex\030\005 \001(\r\022\020\n\010passTime\030\006 \001(\r\022\023\n\013battleP"
    "ower\030\007 \001(\r\022\017\n\007photoID\030\010 \001(\r\"t\n\024stRetAppl"
    "yJoinInList\022*\n\004data\030\001 \003(\0132\034.GuildProto.s"
    "tSynApplierInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\007"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020\013\"a\n\016stReplyAppl"
    "ier\022\016\n\006charID\030\001 \001(\r\022\r\n\005agree\030\002 \001(\010\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\014\"n\n\022stReplyApplerError\022&\n\006result\030\001 \001"
    "(\0162\026.GuildProto.ReplyError\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\r\"g\n\020"
    "stJoinInGuildTip\022\016\n\006accept\030\001 \001(\010\022\021\n\tothe"
    "rName\030\002 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020\016\"q\n\020stMemJoinInGuil"
    "d\022+\n\004data\030\001 \001(\0132\035.GuildProto.stSynGuildM"
    "emInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020\017\"T\n\017stReqLeaveGuild\022\017\n\007g"
    "uildID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\020\"S\n\017stMemLeaveGuil"
    "d\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\021\"~\n\022stAssignG"
    "uildTitle\022\016\n\006charID\030\001 \001(\r\022&\n\006eTitle\030\002 \001("
    "\0162\026.GuildProto.eGuildTile\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\022\"u\n\022s"
    "tAssignTitleError\022-\n\006result\030\001 \001(\0162\035.Guil"
    "dProto.eAssignTitleError\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\023\"Q\n\rst"
    "CancelTitle\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\024\"u\n"
    "\022stCancelTitleError\022-\n\006result\030\001 \001(\0162\035.Gu"
    "ildProto.eCancelTitleError\"\027\n\nProtoModID"
    "\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\025\"V\n\022"
    "stGiveLeader2Other\022\016\n\006charID\030\001 \001(\r\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020\026\"u\n\021stGiveLeaderError\022.\n\006result\030\001 \001("
    "\0162\036.GuildProto.eGiveLeaderErrorNo\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\027\"P\n\013stFireGuild\022\017\n\007guildID\030\001 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020\030\"t\n\020stFireGuildError\022.\n\006result\030\001 \001("
    "\0162\036.GuildProto.eFireMemberErrorNo\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020\031\"g\n\023stGuildMemOnOffLine\022\016\n\006charID\030\001 \001"
    "(\r\022\016\n\006online\030\002 \001(\010\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\032\"X\n\024stKillOu"
    "tGroupMember\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\033\"@"
    "\n\014stKillOutTip\"\027\n\nProtoModID\022\t\n\005ModID\020\007\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020\034\"z\n\031stKillOutGro"
    "upMemberError\022+\n\006result\030\001 \001(\0162\033.GuildPro"
    "to.eKillOutErrorNo\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\035\"\310\001\n\021stRetGu"
    "ildMemInfo\022\016\n\006charID\030\001 \001(\r\022\022\n\njoinInTime"
    "\030\002 \001(\r\022\026\n\016contributeTime\030\003 \001(\r\022\027\n\017todayC"
    "ontribute\030\004 \001(\r\022\025\n\rallContribute\030\005 \001(\r\022\025"
    "\n\rlastLoginTime\030\006 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\036\"U\n\024stSyn"
    "GuildContribute\022\013\n\003num\030\001 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\037\"P"
    "\n\016stChgGuildSign\022\014\n\004sign\030\001 \001(\t\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020 "
    "\"^\n\026stNotifyFireRemainTime\022\022\n\nremainTime"
    "\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProto"
    "FunID\022\t\n\005FunID\020!\"U\n\021stReqGuildMemInfo\022\016\n"
    "\006charID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020\"\"V\n\021stCancelFireG"
    "uild\022\017\n\007guildID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020#\"\265\001\n\027stCa"
    "ncelFireGuildResult\022;\n\006result\030\001 \001(\0162+.Gu"
    "ildProto.stCancelFireGuildResult.eResult"
    "\"+\n\007eResult\022\014\n\010eSUCCESS\020\001\022\022\n\016eHAS_NOT_PO"
    "WER\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020$\"X\n\023stCancelJoinInGuild\022\017"
    "\n\007guildID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007"
    "\"\027\n\nProtoFunID\022\t\n\005FunID\020%\"\301\001\n\031stCancelJo"
    "inInGuildResult\022\017\n\007guildID\030\001 \001(\r\022=\n\006resu"
    "lt\030\002 \001(\0162-.GuildProto.stCancelJoinInGuil"
    "dResult.eResult\"\"\n\007eResult\022\014\n\010eSUCCESS\020\001"
    "\022\t\n\005eFAIL\020\002\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\n"
    "ProtoFunID\022\t\n\005FunID\020&\"\231\001\n\013stReqDonate\022+\n"
    "\004type\030\001 \001(\0162\035.GuildProto.stReqDonate.eTy"
    "pe\"+\n\005eType\022\n\n\006eType1\020\001\022\n\n\006eType2\020\002\022\n\n\006e"
    "Type3\020\003\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020\'\"\362\001\n\016stDonateResult\0222\n\006"
    "result\030\001 \001(\0162\".GuildProto.stDonateResult"
    ".eResult\"z\n\007eResult\022\014\n\010eSUCCESS\020\001\022\025\n\021eMO"
    "NEY_NOT_ENOUGH\020\002\022\020\n\014eINNER_ERROR\020\003\022\021\n\reH"
    "AS_NO_GUILD\020\004\022\017\n\013eHAS_DONATE\020\005\022\024\n\020eHAS_N"
    "O_VIPRIGHT\020\006\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020(\"W\n\022stReqLevelUpHa"
    "llLv\022\017\n\007guildID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020)\"\337\001\n\025stLe"
    "velUpHallLvResult\0229\n\006result\030\001 \001(\0162).Guil"
    "dProto.stLevelUpHallLvResult.eResult\"Y\n\007"
    "eResult\022\014\n\010eSUCCESS\020\001\022\032\n\026eCONTRIBUTE_NOT"
    "_ENOGUH\020\002\022\022\n\016eHAS_NOT_RIGHT\020\003\022\020\n\014eINNER_"
    "ERROR\020\004\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020*\"K\n\013stSynHallLv\022\n\n\002lv\030\001"
    " \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFu"
    "nID\022\t\n\005FunID\020+\"X\n\023stReqPrayBuildingLv\022\017\n"
    "\007guildID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020,\"\367\001\n\026stPrayBuild"
    "ingLvResult\022:\n\006result\030\001 \001(\0162*.GuildProto"
    ".stPrayBuildingLvResult.eResult\"o\n\007eResu"
    "lt\022\014\n\010eSUCCESS\020\001\022\032\n\026eCONTRIBUTE_NOT_ENOG"
    "UH\020\002\022\022\n\016eHAS_NOT_RIGHT\020\003\022\020\n\014eINNER_ERROR"
    "\020\004\022\024\n\020eHALL_LV_TOO_LOW\020\005\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020-\"S\n\023st"
    "SynPrayBuildingLv\022\n\n\002lv\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020.\""
    "N\n\tstReqPray\022\017\n\007guildID\030\001 \001(\r\"\027\n\nProtoMo"
    "dID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020/\""
    "\276\001\n\014stPrayResult\0220\n\006result\030\001 \001(\0162 .Guild"
    "Proto.stPrayResult.eResult\"J\n\007eResult\022\014\n"
    "\010eSUCCESS\020\001\022\r\n\teHAS_PRAY\020\002\022\021\n\rePRAY_NUM_"
    "OUT\020\003\022\017\n\013eCANNT_PRAY\020\004\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\0200\"_\n\032stRe"
    "qLevelUpShopBuildingLv\022\017\n\007guildID\030\001 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\0201\"\204\002\n\035stLevelUpShopBuildingLvRes"
    "ult\022A\n\006result\030\001 \001(\01621.GuildProto.stLevel"
    "UpShopBuildingLvResult.eResult\"n\n\007eResul"
    "t\022\014\n\010eSUCCESS\020\001\022\021\n\reHAS_NO_RIGHT\020\002\022\032\n\026eC"
    "ONTRIBUTE_NOT_ENOUGH\020\003\022\020\n\014eINNER_ERROR\020\004"
    "\022\024\n\020eHALL_LV_TOO_LOW\020\005\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\0202\"Q\n\021stSy"
    "nShopBuilding\022\n\n\002lv\030\001 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\0203\"T\n\017s"
    "tReqGuildTrace\022\017\n\007guildID\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "4\"h\n\020stGuildTraceInfo\022&\n\010eTraceID\030\001 \001(\0162"
    "\024.GuildProto.eTraceID\022\016\n\006charID\030\002 \001(\r\022\014\n"
    "\004name\030\003 \001(\t\022\016\n\006doTime\030\004 \001(\r\"q\n\017stRetGuil"
    "dTrace\022,\n\006traces\030\001 \003(\0132\034.GuildProto.stGu"
    "ildTraceInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\0205\"w\n\022stAddNewGuildT"
    "race\022/\n\ttraceInfo\030\001 \001(\0132\034.GuildProto.stG"
    "uildTraceInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\0206\"O\n\013stChgNotice\022\016"
    "\n\006notice\030\001 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\007\""
    "\027\n\nProtoFunID\022\t\n\005FunID\0207\"Y\n\022stGuildDonat"
    "eState\022\021\n\thasDonate\030\001 \001(\010\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\0208\"U\n\020s"
    "tGuildPrayState\022\017\n\007hasPray\030\001 \001(\010\"\027\n\nProt"
    "oModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID"
    "\0209\"U\n\020stReqChangeBadge\022\017\n\007badgeID\030\001 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020:\"\267\001\n\rstChangeBadge\022\017\n\007badgeID\030\001"
    " \001(\r\0221\n\006result\030\002 \001(\0162!.GuildProto.stChan"
    "geBadge.eResult\"0\n\007eResult\022\014\n\010eSuccess\020\001"
    "\022\027\n\023eNot_Enough_Diamond\020\002\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020;\"V\n\022s"
    "tIntoGuildCopymap\022\016\n\006charID\030\001 \001(\r\"\027\n\nPro"
    "toModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunI"
    "D\020<\"\247\001\n\027stIntoGuildCopymapError\022;\n\006resul"
    "t\030\001 \001(\0162+.GuildProto.stIntoGuildCopymapE"
    "rror.eResult\"\035\n\007eResult\022\022\n\016eHAS_NOT_GUIL"
    "D\020\001\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020=\"T\n\rstSearchGuild\022\021\n\tguildN"
    "ame\030\001 \001(\t\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nPr"
    "otoFunID\022\t\n\005FunID\020>\"y\n\026stRetSearchGuildR"
    "esult\022-\n\010listInfo\030\001 \003(\0132\033.GuildProto.stG"
    "uildListInfo\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020\?\"f\n\025stSynMemberCon"
    "tribute\022\016\n\006charID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020@\"\\\n\030stReqOpenGuildCopymapWin\022\016\n\006ch"
    "arID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nP"
    "rotoFunID\022\t\n\005FunID\020A\"m\n\021stCopymapOpenInf"
    "o\022\021\n\tcopymapID\030\001 \001(\r\022\020\n\010openTime\030\002 \001(\r\022\016"
    "\n\006stepID\030\003 \001(\r\022\021\n\tisStarted\030\004 \001(\010\022\020\n\010kil"
    "lerID\030\005 \001(\r\"\243\001\n\025stRetGuildCopymapInfo\022/\n"
    "\010openInfo\030\001 \003(\0132\035.GuildProto.stCopymapOp"
    "enInfo\022\024\n\014challengeNum\030\002 \001(\r\022\021\n\tassistNu"
    "m\030\003 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020B\"Z\n\023stReqDamageSortlist"
    "\022\021\n\tbeginRank\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020C\"6\n\024stDamag"
    "eSortItemInfo\022\016\n\006charID\030\001 \001(\r\022\016\n\006damage\030"
    "\002 \001(\r\"\236\001\n\023stRetDamageSortlist\022\021\n\tbeginRa"
    "nk\030\001 \001(\r\0222\n\010sortItem\030\002 \003(\0132 .GuildProto."
    "stDamageSortItemInfo\022\016\n\006myRank\030\003 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020D\"F\n\026stCopymapScoreSortItem\022\017\n\007guil"
    "dID\030\001 \001(\r\022\014\n\004name\030\002 \001(\t\022\r\n\005score\030\003 \001(\r\"x"
    "\n\036stReqGuildCopymapScoreSortlist\022\021\n\tbegi"
    "nRank\030\001 \001(\r\022\021\n\tcopymapID\030\002 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020E"
    "\"\276\001\n\036stRetGuildCopymapScoreSortlist\022\021\n\tb"
    "eginRank\030\001 \001(\r\022\021\n\tcopymapID\030\002 \001(\r\0224\n\010sor"
    "tItem\030\003 \003(\0132\".GuildProto.stCopymapScoreS"
    "ortItem\022\016\n\006myRank\030\004 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020F\"[\n\030stS"
    "ynGuildActivityDegree\022\r\n\005value\030\001 \001(\r\"\027\n\n"
    "ProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005F"
    "unID\020G\"q\n\027stSynMemberChallengeNum\022\016\n\006cha"
    "rID\030\001 \001(\r\022\024\n\014challengeNum\030\002 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "H\"k\n\024stSynMemberAssistNum\022\016\n\006charID\030\001 \001("
    "\r\022\021\n\tassistNum\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020I\"]\n\026stReqE"
    "nterGuildCopymap\022\021\n\tcopymapID\030\001 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020J\"\355\001\n\034stRetEnterGuildCopymapResult\022@"
    "\n\006result\030\001 \001(\01620.GuildProto.stRetEnterGu"
    "ildCopymapResult.eResult\"Y\n\007eResult\022\027\n\023e"
    "Has_Member_timeout\020\001\022\022\n\016eHas_Not_Start\020\002"
    "\022\020\n\014eHas_No_Team\020\003\022\017\n\013eNot_Leader\020\004\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020K\"Z\n\023stStartGuildCopymap\022\021\n\tcopymapI"
    "D\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020L\"\234\002\n\031stStartGuildCopyma"
    "pResult\022=\n\006result\030\001 \001(\0162-.GuildProto.stS"
    "tartGuildCopymapResult.eResult\022\021\n\tstartT"
    "ime\030\002 \001(\r\022\021\n\tcopymapID\030\003 \001(\r\"h\n\007eResult\022"
    "\014\n\010eSuccess\020\001\022\030\n\024eNot_Enough_Activity\020\002\022"
    "\r\n\teHas_Open\020\003\022\021\n\reHas_No_Right\020\004\022\023\n\017eLe"
    "vel_Not_Meet\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\007\""
    "\027\n\nProtoFunID\022\t\n\005FunID\020M\"^\n\032stInviteTeam"
    "InGuildChannel\022\016\n\006charID\030\001 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020N"
    "\"n\n\032stNotifyGuildMemContribute\022\016\n\006charID"
    "\030\001 \001(\r\022\016\n\006curVal\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020O\"r\n\036stNo"
    "tifyGuildMemActivityDegree\022\016\n\006charID\030\001 \001"
    "(\r\022\016\n\006curVal\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModI"
    "D\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020P\"[\n\027stReqGui"
    "ldManorFightWin\022\016\n\006charID\030\001 \001(\r\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "Q\"{\n\016stSynManorInfo\022\017\n\007manorID\030\001 \001(\r\022\024\n\014"
    "ownerGuildID\030\002 \001(\r\022\026\n\016ownerGuildName\030\003 \001"
    "(\t\022\024\n\014sideAGuildID\030\004 \001(\r\022\024\n\014sideBGuildID"
    "\030\005 \001(\r\"\222\001\n\030stRetGuildManorFightInfo\022.\n\nm"
    "anorInfos\030\001 \003(\0132\032.GuildProto.stSynManorI"
    "nfo\022\024\n\014applyManorID\030\002 \001(\r\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020R\"`\n\033s"
    "tReqOpenApplyManorFightWin\022\017\n\007manorID\030\001 "
    "\001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020S\"N\n\024stSynManoryApplyInfo\022\017\n"
    "\007guildID\030\001 \001(\r\022\021\n\tguildName\030\002 \001(\t\022\022\n\ncon"
    "tribute\030\003 \001(\r\"\215\001\n\023stApplyManorWinInfo\022\017\n"
    "\007manorID\030\001 \001(\r\0223\n\tapplyInfo\030\002 \003(\0132 .Guil"
    "dProto.stSynManoryApplyInfo\"\027\n\nProtoModI"
    "D\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020T\"\\\n"
    "\027stRefreshManorApplyInfo\022\017\n\007manorID\030\001 \001("
    "\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID"
    "\022\t\n\005FunID\020U\"\215\001\n\023stRetManorApplyInfo\022\017\n\007m"
    "anorID\030\001 \001(\r\0223\n\tapplyInfo\030\002 \003(\0132 .GuildP"
    "roto.stSynManoryApplyInfo\"\027\n\nProtoModID\022"
    "\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020V\"j\n\021s"
    "tApplyManorFight\022\017\n\007manorID\030\001 \001(\r\022\022\n\ncon"
    "tribute\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027"
    "\n\nProtoFunID\022\t\n\005FunID\020W\"\263\002\n\024stApplyManor"
    "FightRet\0228\n\006result\030\001 \001(\0162(.GuildProto.st"
    "ApplyManorFightRet.eResult\022\017\n\007manorID\030\002 "
    "\001(\r\022\022\n\ncontribute\030\003 \001(\r\022\017\n\007guildID\030\004 \001(\r"
    "\"y\n\007eResult\022\014\n\010eSuccess\020\001\022\023\n\017eRes_Not_En"
    "ough\020\002\022\r\n\teOut_Time\020\003\022\021\n\reHas_No_Right\020\004"
    "\022\023\n\017eManor_ID_Error\020\005\022\024\n\020eManor_Has_Appl"
    "y\020\006\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFun"
    "ID\022\t\n\005FunID\020X\"W\n\022stReqManorFightWin\022\017\n\007m"
    "anorID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020Y\"5\n\026stSynFormation"
    "TeamInfo\022\016\n\006teamID\030\001 \001(\r\022\013\n\003num\030\002 \001(\r\"\376\002"
    "\n\026stRetManorFightWinInfo\0229\n\rmainJoinInNu"
    "m\030\001 \003(\0132\".GuildProto.stSynFormationTeamI"
    "nfo\0229\n\rleftJoinInNum\030\002 \003(\0132\".GuildProto."
    "stSynFormationTeamInfo\022:\n\016rightJoinInNum"
    "\030\003 \003(\0132\".GuildProto.stSynFormationTeamIn"
    "fo\022\017\n\007manorID\030\004 \001(\r\022\022\n\nguildAName\030\005 \001(\t\022"
    "\022\n\nguildBName\030\006 \001(\t\022\026\n\016mainWinGuildID\030\007 "
    "\001(\r\022\026\n\016leftWinGuildID\030\010 \001(\r\022\027\n\017rightWinG"
    "uildID\030\t \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n"
    "\nProtoFunID\022\t\n\005FunID\020Z\"\210\001\n\030stReqManorFig"
    "htFormation\022\017\n\007manorID\030\001 \001(\r\022)\n\tformatio"
    "n\030\002 \001(\0162\026.GuildProto.eFormation\"\027\n\nProto"
    "ModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020"
    "[\"\275\001\n\023stSynManorBattleMem\022\016\n\006charID\030\001 \001("
    "\r\022\014\n\004name\030\002 \001(\t\022\013\n\003job\030\003 \001(\r\022\013\n\003sex\030\004 \001("
    "\r\022\r\n\005level\030\005 \001(\r\022\023\n\013battlePower\030\006 \001(\r\022\r\n"
    "\005curHP\030\007 \001(\r\022\r\n\005maxHP\030\010 \001(\r\022\013\n\003pos\030\t \001(\r"
    "\022\016\n\006teamID\030\n \001(\r\022\017\n\007photoID\030\013 \001(\r\"\234\002\n\030st"
    "RetManorFightFormation\022\017\n\007manorID\030\001 \001(\r\022"
    ")\n\tformation\030\002 \001(\0162\026.GuildProto.eFormati"
    "on\0222\n\tsideATeam\030\003 \003(\0132\037.GuildProto.stSyn"
    "ManorBattleMem\0222\n\tsideBTeam\030\004 \003(\0132\037.Guil"
    "dProto.stSynManorBattleMem\022\024\n\014sideAGuild"
    "ID\030\005 \001(\r\022\024\n\014sideBGuildID\030\006 \001(\r\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020\\"
    "\"\333\002\n\025stEnterManorFightTeam\022\017\n\007manorID\030\001 "
    "\001(\r\022)\n\tformation\030\002 \001(\0162\026.GuildProto.eFor"
    "mation\022\016\n\006teamID\030\003 \001(\r\022\013\n\003pos\030\004 \001(\r\022\024\n\014s"
    "ideAGuildID\030\005 \001(\r\022\024\n\014sideBGuildID\030\006 \001(\r\022"
    "\016\n\006charID\030\007 \001(\r\022\014\n\004name\030\010 \001(\t\022\017\n\007guildID"
    "\030\t \001(\r\022\013\n\003sex\030\n \001(\r\022\013\n\003job\030\013 \001(\r\022\r\n\005leve"
    "l\030\014 \001(\r\022\023\n\013battlePower\030\r \001(\r\022\r\n\005maxHP\030\016 "
    "\001(\r\022\017\n\007photoID\030\017 \001(\r\"\027\n\nProtoModID\022\t\n\005Mo"
    "dID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020]\"\357\002\n\033stEnt"
    "erManorFightTeamResult\022\?\n\006result\030\001 \001(\0162/"
    ".GuildProto.stEnterManorFightTeamResult."
    "eResult\022\017\n\007manorID\030\002 \001(\r\022)\n\tformation\030\003 "
    "\001(\0162\026.GuildProto.eFormation\022\016\n\006teamID\030\004 "
    "\001(\r\022\013\n\003pos\030\005 \001(\r\022\024\n\014sideAGuildID\030\006 \001(\r\022\024"
    "\n\014sideBGuildID\030\007 \001(\r\"X\n\007eResult\022\014\n\010eSucc"
    "ess\020\001\022\031\n\025eNot_ChallengeGuildID\020\002\022\022\n\016ePos"
    "_Not_Empty\020\003\022\020\n\014eNot_In_Time\020\004\"\027\n\nProtoM"
    "odID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020^"
    "\"\222\001\n\032stNotifyLeaveManorFightWin\022\016\n\006charI"
    "D\030\001 \001(\r\022\017\n\007guildID\030\002 \001(\r\022\021\n\tformation\030\003 "
    "\001(\r\022\016\n\006teamID\030\004 \001(\r\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020_\"k\n\023stSynMa"
    "norFightItem\022\020\n\010roleName\030\001 \001(\t\022\r\n\005level\030"
    "\002 \001(\r\022\023\n\013battlePower\030\003 \001(\r\022\017\n\007killNum\030\004 "
    "\001(\r\022\r\n\005isDie\030\005 \001(\010\"\250\001\n\024stManorFightPKRes"
    "ult\022.\n\005sideA\030\001 \003(\0132\037.GuildProto.stSynMan"
    "orFightItem\022.\n\005sideB\030\002 \003(\0132\037.GuildProto."
    "stSynManorFightItem\"\027\n\nProtoModID\022\t\n\005Mod"
    "ID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020`\"\246\001\n\022stMano"
    "rFightPKFail\022.\n\005sideA\030\001 \003(\0132\037.GuildProto"
    ".stSynManorFightItem\022.\n\005sideB\030\002 \003(\0132\037.Gu"
    "ildProto.stSynManorFightItem\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020a\"p"
    "\n\032stNotifyWinerAfterApplyEnd\022\017\n\007guildID\030"
    "\001 \001(\r\022\017\n\007manorID\030\002 \001(\r\"\027\n\nProtoModID\022\t\n\005"
    "ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020b\"\202\001\n\031stR"
    "eqChgManorFightTeamPos\022\016\n\006charID\030\001 \001(\r\022\022"
    "\n\ndestTeamID\030\002 \001(\r\022\017\n\007destPos\030\003 \001(\r\"\027\n\nP"
    "rotoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005Fu"
    "nID\020c\"\271\001\n\034stNotifyChgManorFightTeamPos\022\016"
    "\n\006charID\030\001 \001(\r\022\021\n\tsrcTeamID\030\002 \001(\r\022\016\n\006src"
    "Pos\030\003 \001(\r\022\021\n\tdstTeamID\030\004 \001(\r\022\016\n\006dstPos\030\005"
    " \001(\r\022\021\n\tformation\030\006 \001(\r\"\027\n\nProtoModID\022\t\n"
    "\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020d\"\370\001\n\034st"
    "ChgManorFightTeamPosResult\022@\n\006result\030\001 \001"
    "(\01620.GuildProto.stChgManorFightTeamPosRe"
    "sult.eResult\022\016\n\006teamID\030\002 \001(\r\022\013\n\003pos\030\003 \001("
    "\r\"G\n\007eResult\022\014\n\010eSuccess\020\001\022\022\n\016eHas_Not_E"
    "nter\020\002\022\032\n\026eDest_Pos_Was_Occupied\020\003\"\027\n\nPr"
    "otoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005Fun"
    "ID\020e\"[\n\026stNotifyManorFightFail\022\017\n\007manorI"
    "D\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProt"
    "oFunID\022\t\n\005FunID\020f\"\\\n\027stManorFightHasNotM"
    "atch\022\017\n\007manorID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005M"
    "odID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020g\"\207\001\n\033stMa"
    "norFightFormationResult\022\017\n\007manorID\030\001 \001(\r"
    "\022\022\n\nwinGuildID\030\002 \001(\r\022\021\n\tformation\030\003 \001(\r\""
    "\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoFunID\022\t"
    "\n\005FunID\020h\"W\n\022stManorFightFinish\022\017\n\007manor"
    "ID\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nPro"
    "toFunID\022\t\n\005FunID\020i\"^\n\031stReqLevelUpBlackM"
    "arketLv\022\017\n\007guildID\030\001 \001(\r\"\027\n\nProtoModID\022\t"
    "\n\005ModID\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020j\"\202\002\n\034s"
    "tLevelUpBlackMarketLvResult\022@\n\006result\030\001 "
    "\001(\01620.GuildProto.stLevelUpBlackMarketLvR"
    "esult.eResult\"n\n\007eResult\022\014\n\010eSUCCESS\020\001\022\021"
    "\n\reHAS_NO_RIGHT\020\002\022\032\n\026eCONTRIBUTE_NOT_ENO"
    "UGH\020\003\022\020\n\014eINNER_ERROR\020\004\022\024\n\020eHALL_LV_TOO_"
    "LOW\020\005\"\027\n\nProtoModID\022\t\n\005ModID\020\007\"\027\n\nProtoF"
    "unID\022\t\n\005FunID\020k\"Z\n\032stSynBlackMarketBuild"
    "ingLv\022\n\n\002lv\030\001 \001(\r\"\027\n\nProtoModID\022\t\n\005ModID"
    "\020\007\"\027\n\nProtoFunID\022\t\n\005FunID\020l*n\n\neGuildTil"
    "e\022\026\n\022GUILD_TITLE_NORMAL\020\000\022\025\n\021GUILD_TITLE"
    "_ELITE\020\001\022\031\n\025GUILD_TILE_VICELEADER\020\002\022\026\n\022G"
    "UILD_TITLE_LEADER\020\003*\276\001\n\021eCreateGuildErro"
    "r\022\035\n\031CREATE_GUILD_ERROR_LV_LOW\020\001\022\"\n\036CREA"
    "TE_GUILD_ERROR_NO_GOLDCOIN\020\002\022!\n\035CREATE_G"
    "UILD_ERROR_NO_DIAMOND\020\003\022 \n\034CREATE_GUILD_"
    "ERROR_HAS_GUILD\020\004\022!\n\035CREATE_GUILD_ERROR_"
    "NAME_EXIST\020\005*\324\001\n\017JoinGuildResult\022\031\n\025REQ_"
    "JOIN_GUILD_SUCESS\020\001\022\"\n\036REQ_JOIN_GUILD_ER"
    "ROR_HAS_GROUP\020\002\022\"\n\036REQ_JOIN_GUILD_ERROR_"
    "NOT_EXIST\020\003\022\"\n\036REQ_JOIN_GUILD_ERROR_HAS_"
    "APPLY\020\004\022\033\n\027REQ_JOIN_GUILD_ERROR_CD\020\005\022\035\n\031"
    "REQ_JOIN_GUILD_ERROR_FULL\020\006*s\n\nReplyErro"
    "r\022\030\n\024REPLY_ERROR_NO_POWER\020\001\022\024\n\020REPLY_ERR"
    "OR_FULL\020\002\022\032\n\026REPLY_ERROR_NO_IN_LIST\020\003\022\031\n"
    "\025REPLY_ERROR_HAS_GUILD\020\004*W\n\021eAssignTitle"
    "Error\022\037\n\033ASSIGN_TITLE_ERROR_NO_POWER\020\001\022!"
    "\n\035ASSIGN_TITLE_ERROR_NOT_MEMBER\020\002*W\n\021eCa"
    "ncelTitleError\022\037\n\033CANCEL_TITLE_ERROR_NO_"
    "POWER\020\001\022!\n\035CANCEL_TITLE_ERROR_NOT_MEMBER"
    "\020\002*V\n\022eGiveLeaderErrorNo\022\036\n\032GIVE_LEADER_"
    "ERROR_NO_POWER\020\001\022 \n\034GIVE_LEADER_ERROR_NO"
    "T_MEMBER\020\002*4\n\022eFireMemberErrorNo\022\036\n\032FIRE"
    "_MEMBER_ERROR_NO_POWER\020\001*M\n\017eKillOutErro"
    "rNo\022\035\n\031KILL_OUT_ERROR_NOT_MEMBER\020\001\022\033\n\027KI"
    "LL_OUT_ERROR_NO_POWER\020\002*\335\002\n\010eTraceID\022\017\n\013"
    "eTrace_None\020\000\022\026\n\022eTrace_Enter_Guild\020\001\022\026\n"
    "\022eTrace_Leave_Guild\020\002\022\032\n\026eTrace_Kill_Out"
    "_Member\020\003\022\035\n\031eTrace_Assign_Vice_Leader\020\004"
    "\022\027\n\023eTrace_Assign_Elite\020\005\022\027\n\023eTrace_Dona"
    "te_Type1\020\006\022\027\n\023eTrace_Donate_Type2\020\007\022\027\n\023e"
    "Trace_Donate_Type3\020\010\022\027\n\023eTrace_Hall_Leve"
    "lup\020\t\022\037\n\033eTrace_Pray_BuildingLevelup\020\n\022\027"
    "\n\023eTrace_Shop_Levelup\020\013\022\036\n\032eTrace_BlackM"
    "arket_Levelup\020\014*L\n\neFormation\022\023\n\017eFormat"
    "ion_Main\020\001\022\023\n\017eFormation_Left\020\002\022\024\n\020eForm"
    "ation_Right\020\003", 18053);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GuildProto.proto", &protobuf_RegisterTypes);
  stSynGuildMemInfo::default_instance_ = new stSynGuildMemInfo();
  stGuildListInfo::default_instance_ = new stGuildListInfo();
  stReqGuild::default_instance_ = new stReqGuild();
  stRetGuild::default_instance_ = new stRetGuild();
  stReqGuildDetailInfo::default_instance_ = new stReqGuildDetailInfo();
  stRetGuildDetailInfo::default_instance_ = new stRetGuildDetailInfo();
  stReqCreateGuild::default_instance_ = new stReqCreateGuild();
  stCreateGuildError::default_instance_ = new stCreateGuildError();
  stSendMyGuild::default_instance_ = new stSendMyGuild();
  stReqJoinInGuild::default_instance_ = new stReqJoinInGuild();
  stJoinInGuildResult::default_instance_ = new stJoinInGuildResult();
  stReqApplyJoinInList::default_instance_ = new stReqApplyJoinInList();
  stSynApplierInfo::default_instance_ = new stSynApplierInfo();
  stRetApplyJoinInList::default_instance_ = new stRetApplyJoinInList();
  stReplyApplier::default_instance_ = new stReplyApplier();
  stReplyApplerError::default_instance_ = new stReplyApplerError();
  stJoinInGuildTip::default_instance_ = new stJoinInGuildTip();
  stMemJoinInGuild::default_instance_ = new stMemJoinInGuild();
  stReqLeaveGuild::default_instance_ = new stReqLeaveGuild();
  stMemLeaveGuild::default_instance_ = new stMemLeaveGuild();
  stAssignGuildTitle::default_instance_ = new stAssignGuildTitle();
  stAssignTitleError::default_instance_ = new stAssignTitleError();
  stCancelTitle::default_instance_ = new stCancelTitle();
  stCancelTitleError::default_instance_ = new stCancelTitleError();
  stGiveLeader2Other::default_instance_ = new stGiveLeader2Other();
  stGiveLeaderError::default_instance_ = new stGiveLeaderError();
  stFireGuild::default_instance_ = new stFireGuild();
  stFireGuildError::default_instance_ = new stFireGuildError();
  stGuildMemOnOffLine::default_instance_ = new stGuildMemOnOffLine();
  stKillOutGroupMember::default_instance_ = new stKillOutGroupMember();
  stKillOutTip::default_instance_ = new stKillOutTip();
  stKillOutGroupMemberError::default_instance_ = new stKillOutGroupMemberError();
  stRetGuildMemInfo::default_instance_ = new stRetGuildMemInfo();
  stSynGuildContribute::default_instance_ = new stSynGuildContribute();
  stChgGuildSign::default_instance_ = new stChgGuildSign();
  stNotifyFireRemainTime::default_instance_ = new stNotifyFireRemainTime();
  stReqGuildMemInfo::default_instance_ = new stReqGuildMemInfo();
  stCancelFireGuild::default_instance_ = new stCancelFireGuild();
  stCancelFireGuildResult::default_instance_ = new stCancelFireGuildResult();
  stCancelJoinInGuild::default_instance_ = new stCancelJoinInGuild();
  stCancelJoinInGuildResult::default_instance_ = new stCancelJoinInGuildResult();
  stReqDonate::default_instance_ = new stReqDonate();
  stDonateResult::default_instance_ = new stDonateResult();
  stReqLevelUpHallLv::default_instance_ = new stReqLevelUpHallLv();
  stLevelUpHallLvResult::default_instance_ = new stLevelUpHallLvResult();
  stSynHallLv::default_instance_ = new stSynHallLv();
  stReqPrayBuildingLv::default_instance_ = new stReqPrayBuildingLv();
  stPrayBuildingLvResult::default_instance_ = new stPrayBuildingLvResult();
  stSynPrayBuildingLv::default_instance_ = new stSynPrayBuildingLv();
  stReqPray::default_instance_ = new stReqPray();
  stPrayResult::default_instance_ = new stPrayResult();
  stReqLevelUpShopBuildingLv::default_instance_ = new stReqLevelUpShopBuildingLv();
  stLevelUpShopBuildingLvResult::default_instance_ = new stLevelUpShopBuildingLvResult();
  stSynShopBuilding::default_instance_ = new stSynShopBuilding();
  stReqGuildTrace::default_instance_ = new stReqGuildTrace();
  stGuildTraceInfo::default_instance_ = new stGuildTraceInfo();
  stRetGuildTrace::default_instance_ = new stRetGuildTrace();
  stAddNewGuildTrace::default_instance_ = new stAddNewGuildTrace();
  stChgNotice::default_instance_ = new stChgNotice();
  stGuildDonateState::default_instance_ = new stGuildDonateState();
  stGuildPrayState::default_instance_ = new stGuildPrayState();
  stReqChangeBadge::default_instance_ = new stReqChangeBadge();
  stChangeBadge::default_instance_ = new stChangeBadge();
  stIntoGuildCopymap::default_instance_ = new stIntoGuildCopymap();
  stIntoGuildCopymapError::default_instance_ = new stIntoGuildCopymapError();
  stSearchGuild::default_instance_ = new stSearchGuild();
  stRetSearchGuildResult::default_instance_ = new stRetSearchGuildResult();
  stSynMemberContribute::default_instance_ = new stSynMemberContribute();
  stReqOpenGuildCopymapWin::default_instance_ = new stReqOpenGuildCopymapWin();
  stCopymapOpenInfo::default_instance_ = new stCopymapOpenInfo();
  stRetGuildCopymapInfo::default_instance_ = new stRetGuildCopymapInfo();
  stReqDamageSortlist::default_instance_ = new stReqDamageSortlist();
  stDamageSortItemInfo::default_instance_ = new stDamageSortItemInfo();
  stRetDamageSortlist::default_instance_ = new stRetDamageSortlist();
  stCopymapScoreSortItem::default_instance_ = new stCopymapScoreSortItem();
  stReqGuildCopymapScoreSortlist::default_instance_ = new stReqGuildCopymapScoreSortlist();
  stRetGuildCopymapScoreSortlist::default_instance_ = new stRetGuildCopymapScoreSortlist();
  stSynGuildActivityDegree::default_instance_ = new stSynGuildActivityDegree();
  stSynMemberChallengeNum::default_instance_ = new stSynMemberChallengeNum();
  stSynMemberAssistNum::default_instance_ = new stSynMemberAssistNum();
  stReqEnterGuildCopymap::default_instance_ = new stReqEnterGuildCopymap();
  stRetEnterGuildCopymapResult::default_instance_ = new stRetEnterGuildCopymapResult();
  stStartGuildCopymap::default_instance_ = new stStartGuildCopymap();
  stStartGuildCopymapResult::default_instance_ = new stStartGuildCopymapResult();
  stInviteTeamInGuildChannel::default_instance_ = new stInviteTeamInGuildChannel();
  stNotifyGuildMemContribute::default_instance_ = new stNotifyGuildMemContribute();
  stNotifyGuildMemActivityDegree::default_instance_ = new stNotifyGuildMemActivityDegree();
  stReqGuildManorFightWin::default_instance_ = new stReqGuildManorFightWin();
  stSynManorInfo::default_instance_ = new stSynManorInfo();
  stRetGuildManorFightInfo::default_instance_ = new stRetGuildManorFightInfo();
  stReqOpenApplyManorFightWin::default_instance_ = new stReqOpenApplyManorFightWin();
  stSynManoryApplyInfo::default_instance_ = new stSynManoryApplyInfo();
  stApplyManorWinInfo::default_instance_ = new stApplyManorWinInfo();
  stRefreshManorApplyInfo::default_instance_ = new stRefreshManorApplyInfo();
  stRetManorApplyInfo::default_instance_ = new stRetManorApplyInfo();
  stApplyManorFight::default_instance_ = new stApplyManorFight();
  stApplyManorFightRet::default_instance_ = new stApplyManorFightRet();
  stReqManorFightWin::default_instance_ = new stReqManorFightWin();
  stSynFormationTeamInfo::default_instance_ = new stSynFormationTeamInfo();
  stRetManorFightWinInfo::default_instance_ = new stRetManorFightWinInfo();
  stReqManorFightFormation::default_instance_ = new stReqManorFightFormation();
  stSynManorBattleMem::default_instance_ = new stSynManorBattleMem();
  stRetManorFightFormation::default_instance_ = new stRetManorFightFormation();
  stEnterManorFightTeam::default_instance_ = new stEnterManorFightTeam();
  stEnterManorFightTeamResult::default_instance_ = new stEnterManorFightTeamResult();
  stNotifyLeaveManorFightWin::default_instance_ = new stNotifyLeaveManorFightWin();
  stSynManorFightItem::default_instance_ = new stSynManorFightItem();
  stManorFightPKResult::default_instance_ = new stManorFightPKResult();
  stManorFightPKFail::default_instance_ = new stManorFightPKFail();
  stNotifyWinerAfterApplyEnd::default_instance_ = new stNotifyWinerAfterApplyEnd();
  stReqChgManorFightTeamPos::default_instance_ = new stReqChgManorFightTeamPos();
  stNotifyChgManorFightTeamPos::default_instance_ = new stNotifyChgManorFightTeamPos();
  stChgManorFightTeamPosResult::default_instance_ = new stChgManorFightTeamPosResult();
  stNotifyManorFightFail::default_instance_ = new stNotifyManorFightFail();
  stManorFightHasNotMatch::default_instance_ = new stManorFightHasNotMatch();
  stManorFightFormationResult::default_instance_ = new stManorFightFormationResult();
  stManorFightFinish::default_instance_ = new stManorFightFinish();
  stReqLevelUpBlackMarketLv::default_instance_ = new stReqLevelUpBlackMarketLv();
  stLevelUpBlackMarketLvResult::default_instance_ = new stLevelUpBlackMarketLvResult();
  stSynBlackMarketBuildingLv::default_instance_ = new stSynBlackMarketBuildingLv();
  stSynGuildMemInfo::default_instance_->InitAsDefaultInstance();
  stGuildListInfo::default_instance_->InitAsDefaultInstance();
  stReqGuild::default_instance_->InitAsDefaultInstance();
  stRetGuild::default_instance_->InitAsDefaultInstance();
  stReqGuildDetailInfo::default_instance_->InitAsDefaultInstance();
  stRetGuildDetailInfo::default_instance_->InitAsDefaultInstance();
  stReqCreateGuild::default_instance_->InitAsDefaultInstance();
  stCreateGuildError::default_instance_->InitAsDefaultInstance();
  stSendMyGuild::default_instance_->InitAsDefaultInstance();
  stReqJoinInGuild::default_instance_->InitAsDefaultInstance();
  stJoinInGuildResult::default_instance_->InitAsDefaultInstance();
  stReqApplyJoinInList::default_instance_->InitAsDefaultInstance();
  stSynApplierInfo::default_instance_->InitAsDefaultInstance();
  stRetApplyJoinInList::default_instance_->InitAsDefaultInstance();
  stReplyApplier::default_instance_->InitAsDefaultInstance();
  stReplyApplerError::default_instance_->InitAsDefaultInstance();
  stJoinInGuildTip::default_instance_->InitAsDefaultInstance();
  stMemJoinInGuild::default_instance_->InitAsDefaultInstance();
  stReqLeaveGuild::default_instance_->InitAsDefaultInstance();
  stMemLeaveGuild::default_instance_->InitAsDefaultInstance();
  stAssignGuildTitle::default_instance_->InitAsDefaultInstance();
  stAssignTitleError::default_instance_->InitAsDefaultInstance();
  stCancelTitle::default_instance_->InitAsDefaultInstance();
  stCancelTitleError::default_instance_->InitAsDefaultInstance();
  stGiveLeader2Other::default_instance_->InitAsDefaultInstance();
  stGiveLeaderError::default_instance_->InitAsDefaultInstance();
  stFireGuild::default_instance_->InitAsDefaultInstance();
  stFireGuildError::default_instance_->InitAsDefaultInstance();
  stGuildMemOnOffLine::default_instance_->InitAsDefaultInstance();
  stKillOutGroupMember::default_instance_->InitAsDefaultInstance();
  stKillOutTip::default_instance_->InitAsDefaultInstance();
  stKillOutGroupMemberError::default_instance_->InitAsDefaultInstance();
  stRetGuildMemInfo::default_instance_->InitAsDefaultInstance();
  stSynGuildContribute::default_instance_->InitAsDefaultInstance();
  stChgGuildSign::default_instance_->InitAsDefaultInstance();
  stNotifyFireRemainTime::default_instance_->InitAsDefaultInstance();
  stReqGuildMemInfo::default_instance_->InitAsDefaultInstance();
  stCancelFireGuild::default_instance_->InitAsDefaultInstance();
  stCancelFireGuildResult::default_instance_->InitAsDefaultInstance();
  stCancelJoinInGuild::default_instance_->InitAsDefaultInstance();
  stCancelJoinInGuildResult::default_instance_->InitAsDefaultInstance();
  stReqDonate::default_instance_->InitAsDefaultInstance();
  stDonateResult::default_instance_->InitAsDefaultInstance();
  stReqLevelUpHallLv::default_instance_->InitAsDefaultInstance();
  stLevelUpHallLvResult::default_instance_->InitAsDefaultInstance();
  stSynHallLv::default_instance_->InitAsDefaultInstance();
  stReqPrayBuildingLv::default_instance_->InitAsDefaultInstance();
  stPrayBuildingLvResult::default_instance_->InitAsDefaultInstance();
  stSynPrayBuildingLv::default_instance_->InitAsDefaultInstance();
  stReqPray::default_instance_->InitAsDefaultInstance();
  stPrayResult::default_instance_->InitAsDefaultInstance();
  stReqLevelUpShopBuildingLv::default_instance_->InitAsDefaultInstance();
  stLevelUpShopBuildingLvResult::default_instance_->InitAsDefaultInstance();
  stSynShopBuilding::default_instance_->InitAsDefaultInstance();
  stReqGuildTrace::default_instance_->InitAsDefaultInstance();
  stGuildTraceInfo::default_instance_->InitAsDefaultInstance();
  stRetGuildTrace::default_instance_->InitAsDefaultInstance();
  stAddNewGuildTrace::default_instance_->InitAsDefaultInstance();
  stChgNotice::default_instance_->InitAsDefaultInstance();
  stGuildDonateState::default_instance_->InitAsDefaultInstance();
  stGuildPrayState::default_instance_->InitAsDefaultInstance();
  stReqChangeBadge::default_instance_->InitAsDefaultInstance();
  stChangeBadge::default_instance_->InitAsDefaultInstance();
  stIntoGuildCopymap::default_instance_->InitAsDefaultInstance();
  stIntoGuildCopymapError::default_instance_->InitAsDefaultInstance();
  stSearchGuild::default_instance_->InitAsDefaultInstance();
  stRetSearchGuildResult::default_instance_->InitAsDefaultInstance();
  stSynMemberContribute::default_instance_->InitAsDefaultInstance();
  stReqOpenGuildCopymapWin::default_instance_->InitAsDefaultInstance();
  stCopymapOpenInfo::default_instance_->InitAsDefaultInstance();
  stRetGuildCopymapInfo::default_instance_->InitAsDefaultInstance();
  stReqDamageSortlist::default_instance_->InitAsDefaultInstance();
  stDamageSortItemInfo::default_instance_->InitAsDefaultInstance();
  stRetDamageSortlist::default_instance_->InitAsDefaultInstance();
  stCopymapScoreSortItem::default_instance_->InitAsDefaultInstance();
  stReqGuildCopymapScoreSortlist::default_instance_->InitAsDefaultInstance();
  stRetGuildCopymapScoreSortlist::default_instance_->InitAsDefaultInstance();
  stSynGuildActivityDegree::default_instance_->InitAsDefaultInstance();
  stSynMemberChallengeNum::default_instance_->InitAsDefaultInstance();
  stSynMemberAssistNum::default_instance_->InitAsDefaultInstance();
  stReqEnterGuildCopymap::default_instance_->InitAsDefaultInstance();
  stRetEnterGuildCopymapResult::default_instance_->InitAsDefaultInstance();
  stStartGuildCopymap::default_instance_->InitAsDefaultInstance();
  stStartGuildCopymapResult::default_instance_->InitAsDefaultInstance();
  stInviteTeamInGuildChannel::default_instance_->InitAsDefaultInstance();
  stNotifyGuildMemContribute::default_instance_->InitAsDefaultInstance();
  stNotifyGuildMemActivityDegree::default_instance_->InitAsDefaultInstance();
  stReqGuildManorFightWin::default_instance_->InitAsDefaultInstance();
  stSynManorInfo::default_instance_->InitAsDefaultInstance();
  stRetGuildManorFightInfo::default_instance_->InitAsDefaultInstance();
  stReqOpenApplyManorFightWin::default_instance_->InitAsDefaultInstance();
  stSynManoryApplyInfo::default_instance_->InitAsDefaultInstance();
  stApplyManorWinInfo::default_instance_->InitAsDefaultInstance();
  stRefreshManorApplyInfo::default_instance_->InitAsDefaultInstance();
  stRetManorApplyInfo::default_instance_->InitAsDefaultInstance();
  stApplyManorFight::default_instance_->InitAsDefaultInstance();
  stApplyManorFightRet::default_instance_->InitAsDefaultInstance();
  stReqManorFightWin::default_instance_->InitAsDefaultInstance();
  stSynFormationTeamInfo::default_instance_->InitAsDefaultInstance();
  stRetManorFightWinInfo::default_instance_->InitAsDefaultInstance();
  stReqManorFightFormation::default_instance_->InitAsDefaultInstance();
  stSynManorBattleMem::default_instance_->InitAsDefaultInstance();
  stRetManorFightFormation::default_instance_->InitAsDefaultInstance();
  stEnterManorFightTeam::default_instance_->InitAsDefaultInstance();
  stEnterManorFightTeamResult::default_instance_->InitAsDefaultInstance();
  stNotifyLeaveManorFightWin::default_instance_->InitAsDefaultInstance();
  stSynManorFightItem::default_instance_->InitAsDefaultInstance();
  stManorFightPKResult::default_instance_->InitAsDefaultInstance();
  stManorFightPKFail::default_instance_->InitAsDefaultInstance();
  stNotifyWinerAfterApplyEnd::default_instance_->InitAsDefaultInstance();
  stReqChgManorFightTeamPos::default_instance_->InitAsDefaultInstance();
  stNotifyChgManorFightTeamPos::default_instance_->InitAsDefaultInstance();
  stChgManorFightTeamPosResult::default_instance_->InitAsDefaultInstance();
  stNotifyManorFightFail::default_instance_->InitAsDefaultInstance();
  stManorFightHasNotMatch::default_instance_->InitAsDefaultInstance();
  stManorFightFormationResult::default_instance_->InitAsDefaultInstance();
  stManorFightFinish::default_instance_->InitAsDefaultInstance();
  stReqLevelUpBlackMarketLv::default_instance_->InitAsDefaultInstance();
  stLevelUpBlackMarketLvResult::default_instance_->InitAsDefaultInstance();
  stSynBlackMarketBuildingLv::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GuildProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GuildProto_2eproto {
  StaticDescriptorInitializer_GuildProto_2eproto() {
    protobuf_AddDesc_GuildProto_2eproto();
  }
} static_descriptor_initializer_GuildProto_2eproto_;
const ::google::protobuf::EnumDescriptor* eGuildTile_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGuildTile_descriptor_;
}
bool eGuildTile_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eCreateGuildError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eCreateGuildError_descriptor_;
}
bool eCreateGuildError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* JoinGuildResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinGuildResult_descriptor_;
}
bool JoinGuildResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ReplyError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReplyError_descriptor_;
}
bool ReplyError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eAssignTitleError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eAssignTitleError_descriptor_;
}
bool eAssignTitleError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eCancelTitleError_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eCancelTitleError_descriptor_;
}
bool eCancelTitleError_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eGiveLeaderErrorNo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eGiveLeaderErrorNo_descriptor_;
}
bool eGiveLeaderErrorNo_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eFireMemberErrorNo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eFireMemberErrorNo_descriptor_;
}
bool eFireMemberErrorNo_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eKillOutErrorNo_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eKillOutErrorNo_descriptor_;
}
bool eKillOutErrorNo_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eTraceID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eTraceID_descriptor_;
}
bool eTraceID_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* eFormation_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return eFormation_descriptor_;
}
bool eFormation_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int stSynGuildMemInfo::kCharIDFieldNumber;
const int stSynGuildMemInfo::kNameFieldNumber;
const int stSynGuildMemInfo::kLevelFieldNumber;
const int stSynGuildMemInfo::kJobFieldNumber;
const int stSynGuildMemInfo::kSexFieldNumber;
const int stSynGuildMemInfo::kTitleFieldNumber;
const int stSynGuildMemInfo::kTodayContributeFieldNumber;
const int stSynGuildMemInfo::kContributeFieldNumber;
const int stSynGuildMemInfo::kOnlineFieldNumber;
const int stSynGuildMemInfo::kBattlePowerFieldNumber;
const int stSynGuildMemInfo::kChallengeNumFieldNumber;
const int stSynGuildMemInfo::kAssistNumFieldNumber;
const int stSynGuildMemInfo::kActivityValFieldNumber;
const int stSynGuildMemInfo::kLastLoginTimeFieldNumber;
const int stSynGuildMemInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynGuildMemInfo::stSynGuildMemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynGuildMemInfo::InitAsDefaultInstance() {
}

stSynGuildMemInfo::stSynGuildMemInfo(const stSynGuildMemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynGuildMemInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  title_ = 0u;
  todaycontribute_ = 0u;
  contribute_ = 0u;
  online_ = false;
  battlepower_ = 0u;
  challengenum_ = 0u;
  assistnum_ = 0u;
  activityval_ = 0u;
  lastlogintime_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynGuildMemInfo::~stSynGuildMemInfo() {
  SharedDtor();
}

void stSynGuildMemInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynGuildMemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynGuildMemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildMemInfo_descriptor_;
}

const stSynGuildMemInfo& stSynGuildMemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynGuildMemInfo* stSynGuildMemInfo::default_instance_ = NULL;

stSynGuildMemInfo* stSynGuildMemInfo::New() const {
  return new stSynGuildMemInfo;
}

void stSynGuildMemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    title_ = 0u;
    todaycontribute_ = 0u;
    contribute_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    online_ = false;
    battlepower_ = 0u;
    challengenum_ = 0u;
    assistnum_ = 0u;
    activityval_ = 0u;
    lastlogintime_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynGuildMemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_title;
        break;
      }

      // optional uint32 title = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &title_)));
          set_has_title();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_todayContribute;
        break;
      }

      // optional uint32 todayContribute = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaycontribute_)));
          set_has_todaycontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_contribute;
        break;
      }

      // optional uint32 contribute = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_online;
        break;
      }

      // optional bool online = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_challengeNum;
        break;
      }

      // optional uint32 challengeNum = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_assistNum;
        break;
      }

      // optional uint32 assistNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assistNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistnum_)));
          set_has_assistnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_activityVal;
        break;
      }

      // optional uint32 activityVal = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activityval_)));
          set_has_activityval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lastLoginTime;
        break;
      }

      // optional uint32 lastLoginTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynGuildMemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 title = 6;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->title(), output);
  }

  // optional uint32 todayContribute = 7;
  if (has_todaycontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->todaycontribute(), output);
  }

  // optional uint32 contribute = 8;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->contribute(), output);
  }

  // optional bool online = 9;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->online(), output);
  }

  // optional uint32 battlePower = 10;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->battlepower(), output);
  }

  // optional uint32 challengeNum = 11;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->challengenum(), output);
  }

  // optional uint32 assistNum = 12;
  if (has_assistnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->assistnum(), output);
  }

  // optional uint32 activityVal = 13;
  if (has_activityval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->activityval(), output);
  }

  // optional uint32 lastLoginTime = 14;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->lastlogintime(), output);
  }

  // optional uint32 photoID = 15;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynGuildMemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 title = 6;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->title(), target);
  }

  // optional uint32 todayContribute = 7;
  if (has_todaycontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->todaycontribute(), target);
  }

  // optional uint32 contribute = 8;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->contribute(), target);
  }

  // optional bool online = 9;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->online(), target);
  }

  // optional uint32 battlePower = 10;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->battlepower(), target);
  }

  // optional uint32 challengeNum = 11;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->challengenum(), target);
  }

  // optional uint32 assistNum = 12;
  if (has_assistnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->assistnum(), target);
  }

  // optional uint32 activityVal = 13;
  if (has_activityval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->activityval(), target);
  }

  // optional uint32 lastLoginTime = 14;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->lastlogintime(), target);
  }

  // optional uint32 photoID = 15;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynGuildMemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 title = 6;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->title());
    }

    // optional uint32 todayContribute = 7;
    if (has_todaycontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaycontribute());
    }

    // optional uint32 contribute = 8;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool online = 9;
    if (has_online()) {
      total_size += 1 + 1;
    }

    // optional uint32 battlePower = 10;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 challengeNum = 11;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 assistNum = 12;
    if (has_assistnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistnum());
    }

    // optional uint32 activityVal = 13;
    if (has_activityval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activityval());
    }

    // optional uint32 lastLoginTime = 14;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogintime());
    }

    // optional uint32 photoID = 15;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynGuildMemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynGuildMemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynGuildMemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynGuildMemInfo::MergeFrom(const stSynGuildMemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_todaycontribute()) {
      set_todaycontribute(from.todaycontribute());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_assistnum()) {
      set_assistnum(from.assistnum());
    }
    if (from.has_activityval()) {
      set_activityval(from.activityval());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynGuildMemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynGuildMemInfo::CopyFrom(const stSynGuildMemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynGuildMemInfo::IsInitialized() const {

  return true;
}

void stSynGuildMemInfo::Swap(stSynGuildMemInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(title_, other->title_);
    std::swap(todaycontribute_, other->todaycontribute_);
    std::swap(contribute_, other->contribute_);
    std::swap(online_, other->online_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(assistnum_, other->assistnum_);
    std::swap(activityval_, other->activityval_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynGuildMemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynGuildMemInfo_descriptor_;
  metadata.reflection = stSynGuildMemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGuildListInfo::kRankFieldNumber;
const int stGuildListInfo::kGuildIDFieldNumber;
const int stGuildListInfo::kGuildNameFieldNumber;
const int stGuildListInfo::kHallLvFieldNumber;
const int stGuildListInfo::kLeaderNameFieldNumber;
const int stGuildListInfo::kLeaderLvFieldNumber;
const int stGuildListInfo::kMemNumFieldNumber;
const int stGuildListInfo::kMaxNumFieldNumber;
const int stGuildListInfo::kSignFieldNumber;
const int stGuildListInfo::kHasAppliedFieldNumber;
const int stGuildListInfo::kBadgeFieldNumber;
#endif  // !_MSC_VER

stGuildListInfo::stGuildListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuildListInfo::InitAsDefaultInstance() {
}

stGuildListInfo::stGuildListInfo(const stGuildListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuildListInfo::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  guildid_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  halllv_ = 0u;
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  leaderlv_ = 0u;
  memnum_ = 0u;
  maxnum_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hasapplied_ = false;
  badge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuildListInfo::~stGuildListInfo() {
  SharedDtor();
}

void stGuildListInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void stGuildListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuildListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildListInfo_descriptor_;
}

const stGuildListInfo& stGuildListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stGuildListInfo* stGuildListInfo::default_instance_ = NULL;

stGuildListInfo* stGuildListInfo::New() const {
  return new stGuildListInfo;
}

void stGuildListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
    guildid_ = 0u;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    halllv_ = 0u;
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::kEmptyString) {
        leadername_->clear();
      }
    }
    leaderlv_ = 0u;
    memnum_ = 0u;
    maxnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    hasapplied_ = false;
    badge_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuildListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildID;
        break;
      }

      // optional uint32 guildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_guildName;
        break;
      }

      // optional string guildName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hallLv;
        break;
      }

      // optional uint32 hallLv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hallLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &halllv_)));
          set_has_halllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_leaderName;
        break;
      }

      // optional string leaderName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_leadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->leadername().data(), this->leadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_leaderLv;
        break;
      }

      // optional uint32 leaderLv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderlv_)));
          set_has_leaderlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_memNum;
        break;
      }

      // optional uint32 memNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memnum_)));
          set_has_memnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxNum;
        break;
      }

      // optional uint32 maxNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sign;
        break;
      }

      // optional string sign = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hasApplied;
        break;
      }

      // optional bool hasApplied = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hasApplied:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasapplied_)));
          set_has_hasapplied();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_badge;
        break;
      }

      // optional uint32 badge = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuildListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guildid(), output);
  }

  // optional string guildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->guildname(), output);
  }

  // optional uint32 hallLv = 4;
  if (has_halllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->halllv(), output);
  }

  // optional string leaderName = 5;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->leadername(), output);
  }

  // optional uint32 leaderLv = 6;
  if (has_leaderlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->leaderlv(), output);
  }

  // optional uint32 memNum = 7;
  if (has_memnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->memnum(), output);
  }

  // optional uint32 maxNum = 8;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxnum(), output);
  }

  // optional string sign = 9;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->sign(), output);
  }

  // optional bool hasApplied = 10;
  if (has_hasapplied()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->hasapplied(), output);
  }

  // optional uint32 badge = 11;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->badge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuildListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guildid(), target);
  }

  // optional string guildName = 3;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->guildname(), target);
  }

  // optional uint32 hallLv = 4;
  if (has_halllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->halllv(), target);
  }

  // optional string leaderName = 5;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->leadername().data(), this->leadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->leadername(), target);
  }

  // optional uint32 leaderLv = 6;
  if (has_leaderlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->leaderlv(), target);
  }

  // optional uint32 memNum = 7;
  if (has_memnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->memnum(), target);
  }

  // optional uint32 maxNum = 8;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxnum(), target);
  }

  // optional string sign = 9;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sign(), target);
  }

  // optional bool hasApplied = 10;
  if (has_hasapplied()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->hasapplied(), target);
  }

  // optional uint32 badge = 11;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->badge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuildListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 guildID = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional string guildName = 3;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 hallLv = 4;
    if (has_halllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->halllv());
    }

    // optional string leaderName = 5;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->leadername());
    }

    // optional uint32 leaderLv = 6;
    if (has_leaderlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderlv());
    }

    // optional uint32 memNum = 7;
    if (has_memnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memnum());
    }

    // optional uint32 maxNum = 8;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string sign = 9;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional bool hasApplied = 10;
    if (has_hasapplied()) {
      total_size += 1 + 1;
    }

    // optional uint32 badge = 11;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuildListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuildListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuildListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuildListInfo::MergeFrom(const stGuildListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_halllv()) {
      set_halllv(from.halllv());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_leaderlv()) {
      set_leaderlv(from.leaderlv());
    }
    if (from.has_memnum()) {
      set_memnum(from.memnum());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_hasapplied()) {
      set_hasapplied(from.hasapplied());
    }
    if (from.has_badge()) {
      set_badge(from.badge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuildListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuildListInfo::CopyFrom(const stGuildListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuildListInfo::IsInitialized() const {

  return true;
}

void stGuildListInfo::Swap(stGuildListInfo* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(halllv_, other->halllv_);
    std::swap(leadername_, other->leadername_);
    std::swap(leaderlv_, other->leaderlv_);
    std::swap(memnum_, other->memnum_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(sign_, other->sign_);
    std::swap(hasapplied_, other->hasapplied_);
    std::swap(badge_, other->badge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuildListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuildListInfo_descriptor_;
  metadata.reflection = stGuildListInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuild_ProtoModID_descriptor_;
}
bool stReqGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuild_ProtoModID stReqGuild::ModID;
const stReqGuild_ProtoModID stReqGuild::ProtoModID_MIN;
const stReqGuild_ProtoModID stReqGuild::ProtoModID_MAX;
const int stReqGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuild_ProtoFunID_descriptor_;
}
bool stReqGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuild_ProtoFunID stReqGuild::FunID;
const stReqGuild_ProtoFunID stReqGuild::ProtoFunID_MIN;
const stReqGuild_ProtoFunID stReqGuild::ProtoFunID_MAX;
const int stReqGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGuild::kRankFieldNumber;
#endif  // !_MSC_VER

stReqGuild::stReqGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGuild::InitAsDefaultInstance() {
}

stReqGuild::stReqGuild(const stReqGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGuild::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGuild::~stReqGuild() {
  SharedDtor();
}

void stReqGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuild_descriptor_;
}

const stReqGuild& stReqGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqGuild* stReqGuild::default_instance_ = NULL;

stReqGuild* stReqGuild::New() const {
  return new stReqGuild;
}

void stReqGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGuild::MergeFrom(const stReqGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGuild::CopyFrom(const stReqGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGuild::IsInitialized() const {

  return true;
}

void stReqGuild::Swap(stReqGuild* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGuild_descriptor_;
  metadata.reflection = stReqGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuild_ProtoModID_descriptor_;
}
bool stRetGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuild_ProtoModID stRetGuild::ModID;
const stRetGuild_ProtoModID stRetGuild::ProtoModID_MIN;
const stRetGuild_ProtoModID stRetGuild::ProtoModID_MAX;
const int stRetGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuild_ProtoFunID_descriptor_;
}
bool stRetGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuild_ProtoFunID stRetGuild::FunID;
const stRetGuild_ProtoFunID stRetGuild::ProtoFunID_MIN;
const stRetGuild_ProtoFunID stRetGuild::ProtoFunID_MAX;
const int stRetGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGuild::kMaxNumFieldNumber;
const int stRetGuild::kDataFieldNumber;
#endif  // !_MSC_VER

stRetGuild::stRetGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGuild::InitAsDefaultInstance() {
}

stRetGuild::stRetGuild(const stRetGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGuild::SharedCtor() {
  _cached_size_ = 0;
  maxnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGuild::~stRetGuild() {
  SharedDtor();
}

void stRetGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuild_descriptor_;
}

const stRetGuild& stRetGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetGuild* stRetGuild::default_instance_ = NULL;

stRetGuild* stRetGuild::New() const {
  return new stRetGuild;
}

void stRetGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    maxnum_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 maxNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .GuildProto.stGuildListInfo data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 maxNum = 1;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->maxnum(), output);
  }

  // repeated .GuildProto.stGuildListInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 maxNum = 1;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->maxnum(), target);
  }

  // repeated .GuildProto.stGuildListInfo data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 maxNum = 1;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnum());
    }

  }
  // repeated .GuildProto.stGuildListInfo data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGuild::MergeFrom(const stRetGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGuild::CopyFrom(const stRetGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGuild::IsInitialized() const {

  return true;
}

void stRetGuild::Swap(stRetGuild* other) {
  if (other != this) {
    std::swap(maxnum_, other->maxnum_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGuild_descriptor_;
  metadata.reflection = stRetGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGuildDetailInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildDetailInfo_ProtoModID_descriptor_;
}
bool stReqGuildDetailInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildDetailInfo_ProtoModID stReqGuildDetailInfo::ModID;
const stReqGuildDetailInfo_ProtoModID stReqGuildDetailInfo::ProtoModID_MIN;
const stReqGuildDetailInfo_ProtoModID stReqGuildDetailInfo::ProtoModID_MAX;
const int stReqGuildDetailInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGuildDetailInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildDetailInfo_ProtoFunID_descriptor_;
}
bool stReqGuildDetailInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildDetailInfo_ProtoFunID stReqGuildDetailInfo::FunID;
const stReqGuildDetailInfo_ProtoFunID stReqGuildDetailInfo::ProtoFunID_MIN;
const stReqGuildDetailInfo_ProtoFunID stReqGuildDetailInfo::ProtoFunID_MAX;
const int stReqGuildDetailInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGuildDetailInfo::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stReqGuildDetailInfo::stReqGuildDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGuildDetailInfo::InitAsDefaultInstance() {
}

stReqGuildDetailInfo::stReqGuildDetailInfo(const stReqGuildDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGuildDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGuildDetailInfo::~stReqGuildDetailInfo() {
  SharedDtor();
}

void stReqGuildDetailInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGuildDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGuildDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildDetailInfo_descriptor_;
}

const stReqGuildDetailInfo& stReqGuildDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqGuildDetailInfo* stReqGuildDetailInfo::default_instance_ = NULL;

stReqGuildDetailInfo* stReqGuildDetailInfo::New() const {
  return new stReqGuildDetailInfo;
}

void stReqGuildDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGuildDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGuildDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGuildDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGuildDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGuildDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGuildDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGuildDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGuildDetailInfo::MergeFrom(const stReqGuildDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGuildDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGuildDetailInfo::CopyFrom(const stReqGuildDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGuildDetailInfo::IsInitialized() const {

  return true;
}

void stReqGuildDetailInfo::Swap(stReqGuildDetailInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGuildDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGuildDetailInfo_descriptor_;
  metadata.reflection = stReqGuildDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGuildDetailInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildDetailInfo_ProtoModID_descriptor_;
}
bool stRetGuildDetailInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildDetailInfo_ProtoModID stRetGuildDetailInfo::ModID;
const stRetGuildDetailInfo_ProtoModID stRetGuildDetailInfo::ProtoModID_MIN;
const stRetGuildDetailInfo_ProtoModID stRetGuildDetailInfo::ProtoModID_MAX;
const int stRetGuildDetailInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGuildDetailInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildDetailInfo_ProtoFunID_descriptor_;
}
bool stRetGuildDetailInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildDetailInfo_ProtoFunID stRetGuildDetailInfo::FunID;
const stRetGuildDetailInfo_ProtoFunID stRetGuildDetailInfo::ProtoFunID_MIN;
const stRetGuildDetailInfo_ProtoFunID stRetGuildDetailInfo::ProtoFunID_MAX;
const int stRetGuildDetailInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGuildDetailInfo::kGuildIDFieldNumber;
const int stRetGuildDetailInfo::kGuildNameFieldNumber;
const int stRetGuildDetailInfo::kHallLvFieldNumber;
const int stRetGuildDetailInfo::kExpFieldNumber;
const int stRetGuildDetailInfo::kMemNumFieldNumber;
const int stRetGuildDetailInfo::kMaxNumFieldNumber;
const int stRetGuildDetailInfo::kSignFieldNumber;
const int stRetGuildDetailInfo::kMemInfoFieldNumber;
const int stRetGuildDetailInfo::kBadgeFieldNumber;
#endif  // !_MSC_VER

stRetGuildDetailInfo::stRetGuildDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGuildDetailInfo::InitAsDefaultInstance() {
}

stRetGuildDetailInfo::stRetGuildDetailInfo(const stRetGuildDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGuildDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  halllv_ = 0u;
  exp_ = 0u;
  memnum_ = 0u;
  maxnum_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  badge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGuildDetailInfo::~stRetGuildDetailInfo() {
  SharedDtor();
}

void stRetGuildDetailInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void stRetGuildDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGuildDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildDetailInfo_descriptor_;
}

const stRetGuildDetailInfo& stRetGuildDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetGuildDetailInfo* stRetGuildDetailInfo::default_instance_ = NULL;

stRetGuildDetailInfo* stRetGuildDetailInfo::New() const {
  return new stRetGuildDetailInfo;
}

void stRetGuildDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    halllv_ = 0u;
    exp_ = 0u;
    memnum_ = 0u;
    maxnum_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    badge_ = 0u;
  }
  meminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGuildDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildName;
        break;
      }

      // optional string guildName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hallLv;
        break;
      }

      // optional uint32 hallLv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hallLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &halllv_)));
          set_has_halllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_memNum;
        break;
      }

      // optional uint32 memNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &memnum_)));
          set_has_memnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_maxNum;
        break;
      }

      // optional uint32 maxNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_sign;
        break;
      }

      // optional string sign = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_memInfo;
        break;
      }

      // repeated .GuildProto.stSynGuildMemInfo memInfo = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_meminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_memInfo;
        if (input->ExpectTag(80)) goto parse_badge;
        break;
      }

      // optional uint32 badge = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGuildDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  // optional string guildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // optional uint32 hallLv = 3;
  if (has_halllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->halllv(), output);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->exp(), output);
  }

  // optional uint32 memNum = 5;
  if (has_memnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->memnum(), output);
  }

  // optional uint32 maxNum = 7;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->maxnum(), output);
  }

  // optional string sign = 8;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->sign(), output);
  }

  // repeated .GuildProto.stSynGuildMemInfo memInfo = 9;
  for (int i = 0; i < this->meminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->meminfo(i), output);
  }

  // optional uint32 badge = 10;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->badge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGuildDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  // optional string guildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional uint32 hallLv = 3;
  if (has_halllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->halllv(), target);
  }

  // optional uint32 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->exp(), target);
  }

  // optional uint32 memNum = 5;
  if (has_memnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->memnum(), target);
  }

  // optional uint32 maxNum = 7;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->maxnum(), target);
  }

  // optional string sign = 8;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sign(), target);
  }

  // repeated .GuildProto.stSynGuildMemInfo memInfo = 9;
  for (int i = 0; i < this->meminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->meminfo(i), target);
  }

  // optional uint32 badge = 10;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->badge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGuildDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional string guildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 hallLv = 3;
    if (has_halllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->halllv());
    }

    // optional uint32 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 memNum = 5;
    if (has_memnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->memnum());
    }

    // optional uint32 maxNum = 7;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnum());
    }

    // optional string sign = 8;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 badge = 10;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge());
    }

  }
  // repeated .GuildProto.stSynGuildMemInfo memInfo = 9;
  total_size += 1 * this->meminfo_size();
  for (int i = 0; i < this->meminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->meminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGuildDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGuildDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGuildDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGuildDetailInfo::MergeFrom(const stRetGuildDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  meminfo_.MergeFrom(from.meminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_halllv()) {
      set_halllv(from.halllv());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_memnum()) {
      set_memnum(from.memnum());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_badge()) {
      set_badge(from.badge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGuildDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGuildDetailInfo::CopyFrom(const stRetGuildDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGuildDetailInfo::IsInitialized() const {

  return true;
}

void stRetGuildDetailInfo::Swap(stRetGuildDetailInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(halllv_, other->halllv_);
    std::swap(exp_, other->exp_);
    std::swap(memnum_, other->memnum_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(sign_, other->sign_);
    meminfo_.Swap(&other->meminfo_);
    std::swap(badge_, other->badge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGuildDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGuildDetailInfo_descriptor_;
  metadata.reflection = stRetGuildDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqCreateGuild_eUseResType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCreateGuild_eUseResType_descriptor_;
}
bool stReqCreateGuild_eUseResType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCreateGuild_eUseResType stReqCreateGuild::eDiamond;
const stReqCreateGuild_eUseResType stReqCreateGuild::eGoldCoin;
const stReqCreateGuild_eUseResType stReqCreateGuild::eUseResType_MIN;
const stReqCreateGuild_eUseResType stReqCreateGuild::eUseResType_MAX;
const int stReqCreateGuild::eUseResType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCreateGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCreateGuild_ProtoModID_descriptor_;
}
bool stReqCreateGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCreateGuild_ProtoModID stReqCreateGuild::ModID;
const stReqCreateGuild_ProtoModID stReqCreateGuild::ProtoModID_MIN;
const stReqCreateGuild_ProtoModID stReqCreateGuild::ProtoModID_MAX;
const int stReqCreateGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqCreateGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCreateGuild_ProtoFunID_descriptor_;
}
bool stReqCreateGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqCreateGuild_ProtoFunID stReqCreateGuild::FunID;
const stReqCreateGuild_ProtoFunID stReqCreateGuild::ProtoFunID_MIN;
const stReqCreateGuild_ProtoFunID stReqCreateGuild::ProtoFunID_MAX;
const int stReqCreateGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqCreateGuild::kGuildNameFieldNumber;
const int stReqCreateGuild::kETypeFieldNumber;
const int stReqCreateGuild::kBadgeFieldNumber;
#endif  // !_MSC_VER

stReqCreateGuild::stReqCreateGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqCreateGuild::InitAsDefaultInstance() {
}

stReqCreateGuild::stReqCreateGuild(const stReqCreateGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqCreateGuild::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  etype_ = 1;
  badge_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqCreateGuild::~stReqCreateGuild() {
  SharedDtor();
}

void stReqCreateGuild::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void stReqCreateGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqCreateGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqCreateGuild_descriptor_;
}

const stReqCreateGuild& stReqCreateGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqCreateGuild* stReqCreateGuild::default_instance_ = NULL;

stReqCreateGuild* stReqCreateGuild::New() const {
  return new stReqCreateGuild;
}

void stReqCreateGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    etype_ = 1;
    badge_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqCreateGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guildName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eType;
        break;
      }

      // optional .GuildProto.stReqCreateGuild.eUseResType eType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stReqCreateGuild_eUseResType_IsValid(value)) {
            set_etype(static_cast< ::GuildProto::stReqCreateGuild_eUseResType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_badge;
        break;
      }

      // optional uint32 badge = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqCreateGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

  // optional .GuildProto.stReqCreateGuild.eUseResType eType = 2;
  if (has_etype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etype(), output);
  }

  // optional uint32 badge = 3;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->badge(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqCreateGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  // optional .GuildProto.stReqCreateGuild.eUseResType eType = 2;
  if (has_etype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etype(), target);
  }

  // optional uint32 badge = 3;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->badge(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqCreateGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guildName = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional .GuildProto.stReqCreateGuild.eUseResType eType = 2;
    if (has_etype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etype());
    }

    // optional uint32 badge = 3;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqCreateGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqCreateGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqCreateGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqCreateGuild::MergeFrom(const stReqCreateGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_etype()) {
      set_etype(from.etype());
    }
    if (from.has_badge()) {
      set_badge(from.badge());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqCreateGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqCreateGuild::CopyFrom(const stReqCreateGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqCreateGuild::IsInitialized() const {

  return true;
}

void stReqCreateGuild::Swap(stReqCreateGuild* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(etype_, other->etype_);
    std::swap(badge_, other->badge_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqCreateGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqCreateGuild_descriptor_;
  metadata.reflection = stReqCreateGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCreateGuildError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateGuildError_ProtoModID_descriptor_;
}
bool stCreateGuildError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateGuildError_ProtoModID stCreateGuildError::ModID;
const stCreateGuildError_ProtoModID stCreateGuildError::ProtoModID_MIN;
const stCreateGuildError_ProtoModID stCreateGuildError::ProtoModID_MAX;
const int stCreateGuildError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCreateGuildError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateGuildError_ProtoFunID_descriptor_;
}
bool stCreateGuildError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCreateGuildError_ProtoFunID stCreateGuildError::FunID;
const stCreateGuildError_ProtoFunID stCreateGuildError::ProtoFunID_MIN;
const stCreateGuildError_ProtoFunID stCreateGuildError::ProtoFunID_MAX;
const int stCreateGuildError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCreateGuildError::kResultFieldNumber;
#endif  // !_MSC_VER

stCreateGuildError::stCreateGuildError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCreateGuildError::InitAsDefaultInstance() {
}

stCreateGuildError::stCreateGuildError(const stCreateGuildError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCreateGuildError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCreateGuildError::~stCreateGuildError() {
  SharedDtor();
}

void stCreateGuildError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCreateGuildError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCreateGuildError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCreateGuildError_descriptor_;
}

const stCreateGuildError& stCreateGuildError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stCreateGuildError* stCreateGuildError::default_instance_ = NULL;

stCreateGuildError* stCreateGuildError::New() const {
  return new stCreateGuildError;
}

void stCreateGuildError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCreateGuildError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.eCreateGuildError result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eCreateGuildError_IsValid(value)) {
            set_result(static_cast< ::GuildProto::eCreateGuildError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCreateGuildError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.eCreateGuildError result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCreateGuildError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.eCreateGuildError result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCreateGuildError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.eCreateGuildError result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCreateGuildError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCreateGuildError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCreateGuildError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCreateGuildError::MergeFrom(const stCreateGuildError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCreateGuildError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCreateGuildError::CopyFrom(const stCreateGuildError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCreateGuildError::IsInitialized() const {

  return true;
}

void stCreateGuildError::Swap(stCreateGuildError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCreateGuildError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCreateGuildError_descriptor_;
  metadata.reflection = stCreateGuildError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSendMyGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMyGuild_ProtoModID_descriptor_;
}
bool stSendMyGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendMyGuild_ProtoModID stSendMyGuild::ModID;
const stSendMyGuild_ProtoModID stSendMyGuild::ProtoModID_MIN;
const stSendMyGuild_ProtoModID stSendMyGuild::ProtoModID_MAX;
const int stSendMyGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSendMyGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMyGuild_ProtoFunID_descriptor_;
}
bool stSendMyGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSendMyGuild_ProtoFunID stSendMyGuild::FunID;
const stSendMyGuild_ProtoFunID stSendMyGuild::ProtoFunID_MIN;
const stSendMyGuild_ProtoFunID stSendMyGuild::ProtoFunID_MAX;
const int stSendMyGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSendMyGuild::kGuildIDFieldNumber;
const int stSendMyGuild::kGuildNameFieldNumber;
const int stSendMyGuild::kExpFieldNumber;
const int stSendMyGuild::kLeaderIDFieldNumber;
const int stSendMyGuild::kContributeFieldNumber;
const int stSendMyGuild::kFireRemainTimeFieldNumber;
const int stSendMyGuild::kSignFieldNumber;
const int stSendMyGuild::kMaxNumFieldNumber;
const int stSendMyGuild::kNoticeFieldNumber;
const int stSendMyGuild::kHallLvFieldNumber;
const int stSendMyGuild::kShopLvFieldNumber;
const int stSendMyGuild::kPrayBuildingLvFieldNumber;
const int stSendMyGuild::kDataFieldNumber;
const int stSendMyGuild::kBadgeFieldNumber;
const int stSendMyGuild::kRankFieldNumber;
const int stSendMyGuild::kActivityDegreeFieldNumber;
const int stSendMyGuild::kBlackMarketFieldNumber;
#endif  // !_MSC_VER

stSendMyGuild::stSendMyGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSendMyGuild::InitAsDefaultInstance() {
}

stSendMyGuild::stSendMyGuild(const stSendMyGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSendMyGuild::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = 0u;
  leaderid_ = 0u;
  contribute_ = 0u;
  fireremaintime_ = 0u;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxnum_ = 0u;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  halllv_ = 0u;
  shoplv_ = 0u;
  praybuildinglv_ = 0u;
  badge_ = 0u;
  rank_ = 0u;
  activitydegree_ = 0u;
  blackmarket_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSendMyGuild::~stSendMyGuild() {
  SharedDtor();
}

void stSendMyGuild::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void stSendMyGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSendMyGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSendMyGuild_descriptor_;
}

const stSendMyGuild& stSendMyGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSendMyGuild* stSendMyGuild::default_instance_ = NULL;

stSendMyGuild* stSendMyGuild::New() const {
  return new stSendMyGuild;
}

void stSendMyGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    exp_ = 0u;
    leaderid_ = 0u;
    contribute_ = 0u;
    fireremaintime_ = 0u;
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
    maxnum_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    halllv_ = 0u;
    shoplv_ = 0u;
    praybuildinglv_ = 0u;
    badge_ = 0u;
    rank_ = 0u;
    activitydegree_ = 0u;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    blackmarket_ = 0u;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSendMyGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildName;
        break;
      }

      // optional string guildName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional uint32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leaderID;
        break;
      }

      // optional uint32 leaderID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leaderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leaderid_)));
          set_has_leaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contribute;
        break;
      }

      // optional uint32 contribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fireRemainTime;
        break;
      }

      // optional uint32 fireRemainTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fireRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &fireremaintime_)));
          set_has_fireremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_sign;
        break;
      }

      // optional string sign = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxNum;
        break;
      }

      // optional uint32 maxNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxnum_)));
          set_has_maxnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_notice;
        break;
      }

      // optional string notice = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_hallLv;
        break;
      }

      // optional uint32 hallLv = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hallLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &halllv_)));
          set_has_halllv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_shopLv;
        break;
      }

      // optional uint32 shopLv = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shopLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shoplv_)));
          set_has_shoplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_prayBuildingLv;
        break;
      }

      // optional uint32 prayBuildingLv = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prayBuildingLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &praybuildinglv_)));
          set_has_praybuildinglv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_data;
        break;
      }

      // repeated .GuildProto.stSynGuildMemInfo data = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_data;
        if (input->ExpectTag(112)) goto parse_badge;
        break;
      }

      // optional uint32 badge = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_badge:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badge_)));
          set_has_badge();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_rank;
        break;
      }

      // optional uint32 rank = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_activityDegree;
        break;
      }

      // optional uint32 activityDegree = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activityDegree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &activitydegree_)));
          set_has_activitydegree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_blackMarket;
        break;
      }

      // optional uint32 blackMarket = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_blackMarket:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &blackmarket_)));
          set_has_blackmarket();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSendMyGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  // optional string guildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->exp(), output);
  }

  // optional uint32 leaderID = 4;
  if (has_leaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->leaderid(), output);
  }

  // optional uint32 contribute = 5;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->contribute(), output);
  }

  // optional uint32 fireRemainTime = 6;
  if (has_fireremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->fireremaintime(), output);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->sign(), output);
  }

  // optional uint32 maxNum = 8;
  if (has_maxnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxnum(), output);
  }

  // optional string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->notice(), output);
  }

  // optional uint32 hallLv = 10;
  if (has_halllv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->halllv(), output);
  }

  // optional uint32 shopLv = 11;
  if (has_shoplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->shoplv(), output);
  }

  // optional uint32 prayBuildingLv = 12;
  if (has_praybuildinglv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->praybuildinglv(), output);
  }

  // repeated .GuildProto.stSynGuildMemInfo data = 13;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->data(i), output);
  }

  // optional uint32 badge = 14;
  if (has_badge()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->badge(), output);
  }

  // optional uint32 rank = 15;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->rank(), output);
  }

  // optional uint32 activityDegree = 16;
  if (has_activitydegree()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(16, this->activitydegree(), output);
  }

  // optional uint32 blackMarket = 17;
  if (has_blackmarket()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(17, this->blackmarket(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSendMyGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  // optional string guildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional uint32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->exp(), target);
  }

  // optional uint32 leaderID = 4;
  if (has_leaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->leaderid(), target);
  }

  // optional uint32 contribute = 5;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->contribute(), target);
  }

  // optional uint32 fireRemainTime = 6;
  if (has_fireremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->fireremaintime(), target);
  }

  // optional string sign = 7;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sign(), target);
  }

  // optional uint32 maxNum = 8;
  if (has_maxnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxnum(), target);
  }

  // optional string notice = 9;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->notice(), target);
  }

  // optional uint32 hallLv = 10;
  if (has_halllv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->halllv(), target);
  }

  // optional uint32 shopLv = 11;
  if (has_shoplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->shoplv(), target);
  }

  // optional uint32 prayBuildingLv = 12;
  if (has_praybuildinglv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->praybuildinglv(), target);
  }

  // repeated .GuildProto.stSynGuildMemInfo data = 13;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->data(i), target);
  }

  // optional uint32 badge = 14;
  if (has_badge()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->badge(), target);
  }

  // optional uint32 rank = 15;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->rank(), target);
  }

  // optional uint32 activityDegree = 16;
  if (has_activitydegree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(16, this->activitydegree(), target);
  }

  // optional uint32 blackMarket = 17;
  if (has_blackmarket()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(17, this->blackmarket(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSendMyGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional string guildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->exp());
    }

    // optional uint32 leaderID = 4;
    if (has_leaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leaderid());
    }

    // optional uint32 contribute = 5;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

    // optional uint32 fireRemainTime = 6;
    if (has_fireremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->fireremaintime());
    }

    // optional string sign = 7;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

    // optional uint32 maxNum = 8;
    if (has_maxnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxnum());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string notice = 9;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

    // optional uint32 hallLv = 10;
    if (has_halllv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->halllv());
    }

    // optional uint32 shopLv = 11;
    if (has_shoplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->shoplv());
    }

    // optional uint32 prayBuildingLv = 12;
    if (has_praybuildinglv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->praybuildinglv());
    }

    // optional uint32 badge = 14;
    if (has_badge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badge());
    }

    // optional uint32 rank = 15;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rank());
    }

    // optional uint32 activityDegree = 16;
    if (has_activitydegree()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->activitydegree());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional uint32 blackMarket = 17;
    if (has_blackmarket()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->blackmarket());
    }

  }
  // repeated .GuildProto.stSynGuildMemInfo data = 13;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSendMyGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSendMyGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSendMyGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSendMyGuild::MergeFrom(const stSendMyGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_leaderid()) {
      set_leaderid(from.leaderid());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_fireremaintime()) {
      set_fireremaintime(from.fireremaintime());
    }
    if (from.has_sign()) {
      set_sign(from.sign());
    }
    if (from.has_maxnum()) {
      set_maxnum(from.maxnum());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_halllv()) {
      set_halllv(from.halllv());
    }
    if (from.has_shoplv()) {
      set_shoplv(from.shoplv());
    }
    if (from.has_praybuildinglv()) {
      set_praybuildinglv(from.praybuildinglv());
    }
    if (from.has_badge()) {
      set_badge(from.badge());
    }
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_activitydegree()) {
      set_activitydegree(from.activitydegree());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_blackmarket()) {
      set_blackmarket(from.blackmarket());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSendMyGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSendMyGuild::CopyFrom(const stSendMyGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSendMyGuild::IsInitialized() const {

  return true;
}

void stSendMyGuild::Swap(stSendMyGuild* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(exp_, other->exp_);
    std::swap(leaderid_, other->leaderid_);
    std::swap(contribute_, other->contribute_);
    std::swap(fireremaintime_, other->fireremaintime_);
    std::swap(sign_, other->sign_);
    std::swap(maxnum_, other->maxnum_);
    std::swap(notice_, other->notice_);
    std::swap(halllv_, other->halllv_);
    std::swap(shoplv_, other->shoplv_);
    std::swap(praybuildinglv_, other->praybuildinglv_);
    data_.Swap(&other->data_);
    std::swap(badge_, other->badge_);
    std::swap(rank_, other->rank_);
    std::swap(activitydegree_, other->activitydegree_);
    std::swap(blackmarket_, other->blackmarket_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSendMyGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSendMyGuild_descriptor_;
  metadata.reflection = stSendMyGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqJoinInGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqJoinInGuild_ProtoModID_descriptor_;
}
bool stReqJoinInGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqJoinInGuild_ProtoModID stReqJoinInGuild::ModID;
const stReqJoinInGuild_ProtoModID stReqJoinInGuild::ProtoModID_MIN;
const stReqJoinInGuild_ProtoModID stReqJoinInGuild::ProtoModID_MAX;
const int stReqJoinInGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqJoinInGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqJoinInGuild_ProtoFunID_descriptor_;
}
bool stReqJoinInGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 8:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqJoinInGuild_ProtoFunID stReqJoinInGuild::FunID;
const stReqJoinInGuild_ProtoFunID stReqJoinInGuild::ProtoFunID_MIN;
const stReqJoinInGuild_ProtoFunID stReqJoinInGuild::ProtoFunID_MAX;
const int stReqJoinInGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqJoinInGuild::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stReqJoinInGuild::stReqJoinInGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqJoinInGuild::InitAsDefaultInstance() {
}

stReqJoinInGuild::stReqJoinInGuild(const stReqJoinInGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqJoinInGuild::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqJoinInGuild::~stReqJoinInGuild() {
  SharedDtor();
}

void stReqJoinInGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqJoinInGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqJoinInGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqJoinInGuild_descriptor_;
}

const stReqJoinInGuild& stReqJoinInGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqJoinInGuild* stReqJoinInGuild::default_instance_ = NULL;

stReqJoinInGuild* stReqJoinInGuild::New() const {
  return new stReqJoinInGuild;
}

void stReqJoinInGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqJoinInGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqJoinInGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqJoinInGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqJoinInGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqJoinInGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqJoinInGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqJoinInGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqJoinInGuild::MergeFrom(const stReqJoinInGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqJoinInGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqJoinInGuild::CopyFrom(const stReqJoinInGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqJoinInGuild::IsInitialized() const {

  return true;
}

void stReqJoinInGuild::Swap(stReqJoinInGuild* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqJoinInGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqJoinInGuild_descriptor_;
  metadata.reflection = stReqJoinInGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stJoinInGuildResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stJoinInGuildResult_ProtoModID_descriptor_;
}
bool stJoinInGuildResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stJoinInGuildResult_ProtoModID stJoinInGuildResult::ModID;
const stJoinInGuildResult_ProtoModID stJoinInGuildResult::ProtoModID_MIN;
const stJoinInGuildResult_ProtoModID stJoinInGuildResult::ProtoModID_MAX;
const int stJoinInGuildResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stJoinInGuildResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stJoinInGuildResult_ProtoFunID_descriptor_;
}
bool stJoinInGuildResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 9:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stJoinInGuildResult_ProtoFunID stJoinInGuildResult::FunID;
const stJoinInGuildResult_ProtoFunID stJoinInGuildResult::ProtoFunID_MIN;
const stJoinInGuildResult_ProtoFunID stJoinInGuildResult::ProtoFunID_MAX;
const int stJoinInGuildResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stJoinInGuildResult::kResultFieldNumber;
const int stJoinInGuildResult::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stJoinInGuildResult::stJoinInGuildResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stJoinInGuildResult::InitAsDefaultInstance() {
}

stJoinInGuildResult::stJoinInGuildResult(const stJoinInGuildResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stJoinInGuildResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stJoinInGuildResult::~stJoinInGuildResult() {
  SharedDtor();
}

void stJoinInGuildResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stJoinInGuildResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stJoinInGuildResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stJoinInGuildResult_descriptor_;
}

const stJoinInGuildResult& stJoinInGuildResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stJoinInGuildResult* stJoinInGuildResult::default_instance_ = NULL;

stJoinInGuildResult* stJoinInGuildResult::New() const {
  return new stJoinInGuildResult;
}

void stJoinInGuildResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stJoinInGuildResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.JoinGuildResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::JoinGuildResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::JoinGuildResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildID;
        break;
      }

      // optional uint32 guildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stJoinInGuildResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.JoinGuildResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stJoinInGuildResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.JoinGuildResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stJoinInGuildResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.JoinGuildResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 guildID = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stJoinInGuildResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stJoinInGuildResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stJoinInGuildResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stJoinInGuildResult::MergeFrom(const stJoinInGuildResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stJoinInGuildResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stJoinInGuildResult::CopyFrom(const stJoinInGuildResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stJoinInGuildResult::IsInitialized() const {

  return true;
}

void stJoinInGuildResult::Swap(stJoinInGuildResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stJoinInGuildResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stJoinInGuildResult_descriptor_;
  metadata.reflection = stJoinInGuildResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqApplyJoinInList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqApplyJoinInList_ProtoModID_descriptor_;
}
bool stReqApplyJoinInList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqApplyJoinInList_ProtoModID stReqApplyJoinInList::ModID;
const stReqApplyJoinInList_ProtoModID stReqApplyJoinInList::ProtoModID_MIN;
const stReqApplyJoinInList_ProtoModID stReqApplyJoinInList::ProtoModID_MAX;
const int stReqApplyJoinInList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqApplyJoinInList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqApplyJoinInList_ProtoFunID_descriptor_;
}
bool stReqApplyJoinInList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 10:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqApplyJoinInList_ProtoFunID stReqApplyJoinInList::FunID;
const stReqApplyJoinInList_ProtoFunID stReqApplyJoinInList::ProtoFunID_MIN;
const stReqApplyJoinInList_ProtoFunID stReqApplyJoinInList::ProtoFunID_MAX;
const int stReqApplyJoinInList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqApplyJoinInList::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqApplyJoinInList::stReqApplyJoinInList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqApplyJoinInList::InitAsDefaultInstance() {
}

stReqApplyJoinInList::stReqApplyJoinInList(const stReqApplyJoinInList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqApplyJoinInList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqApplyJoinInList::~stReqApplyJoinInList() {
  SharedDtor();
}

void stReqApplyJoinInList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqApplyJoinInList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqApplyJoinInList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqApplyJoinInList_descriptor_;
}

const stReqApplyJoinInList& stReqApplyJoinInList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqApplyJoinInList* stReqApplyJoinInList::default_instance_ = NULL;

stReqApplyJoinInList* stReqApplyJoinInList::New() const {
  return new stReqApplyJoinInList;
}

void stReqApplyJoinInList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqApplyJoinInList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqApplyJoinInList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqApplyJoinInList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqApplyJoinInList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqApplyJoinInList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqApplyJoinInList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqApplyJoinInList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqApplyJoinInList::MergeFrom(const stReqApplyJoinInList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqApplyJoinInList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqApplyJoinInList::CopyFrom(const stReqApplyJoinInList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqApplyJoinInList::IsInitialized() const {

  return true;
}

void stReqApplyJoinInList::Swap(stReqApplyJoinInList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqApplyJoinInList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqApplyJoinInList_descriptor_;
  metadata.reflection = stReqApplyJoinInList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynApplierInfo::kCharIDFieldNumber;
const int stSynApplierInfo::kNameFieldNumber;
const int stSynApplierInfo::kLevelFieldNumber;
const int stSynApplierInfo::kJobFieldNumber;
const int stSynApplierInfo::kSexFieldNumber;
const int stSynApplierInfo::kPassTimeFieldNumber;
const int stSynApplierInfo::kBattlePowerFieldNumber;
const int stSynApplierInfo::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynApplierInfo::stSynApplierInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynApplierInfo::InitAsDefaultInstance() {
}

stSynApplierInfo::stSynApplierInfo(const stSynApplierInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynApplierInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  job_ = 0u;
  sex_ = 0u;
  passtime_ = 0u;
  battlepower_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynApplierInfo::~stSynApplierInfo() {
  SharedDtor();
}

void stSynApplierInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynApplierInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynApplierInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynApplierInfo_descriptor_;
}

const stSynApplierInfo& stSynApplierInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynApplierInfo* stSynApplierInfo::default_instance_ = NULL;

stSynApplierInfo* stSynApplierInfo::New() const {
  return new stSynApplierInfo;
}

void stSynApplierInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0u;
    job_ = 0u;
    sex_ = 0u;
    passtime_ = 0u;
    battlepower_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynApplierInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional uint32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional uint32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_passTime;
        break;
      }

      // optional uint32 passTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &passtime_)));
          set_has_passtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynApplierInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->level(), output);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->job(), output);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sex(), output);
  }

  // optional uint32 passTime = 6;
  if (has_passtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->passtime(), output);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->battlepower(), output);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynApplierInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->level(), target);
  }

  // optional uint32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->job(), target);
  }

  // optional uint32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sex(), target);
  }

  // optional uint32 passTime = 6;
  if (has_passtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->passtime(), target);
  }

  // optional uint32 battlePower = 7;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->battlepower(), target);
  }

  // optional uint32 photoID = 8;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynApplierInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 passTime = 6;
    if (has_passtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->passtime());
    }

    // optional uint32 battlePower = 7;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 photoID = 8;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynApplierInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynApplierInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynApplierInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynApplierInfo::MergeFrom(const stSynApplierInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_passtime()) {
      set_passtime(from.passtime());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynApplierInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynApplierInfo::CopyFrom(const stSynApplierInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynApplierInfo::IsInitialized() const {

  return true;
}

void stSynApplierInfo::Swap(stSynApplierInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(passtime_, other->passtime_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynApplierInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynApplierInfo_descriptor_;
  metadata.reflection = stSynApplierInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetApplyJoinInList_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetApplyJoinInList_ProtoModID_descriptor_;
}
bool stRetApplyJoinInList_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetApplyJoinInList_ProtoModID stRetApplyJoinInList::ModID;
const stRetApplyJoinInList_ProtoModID stRetApplyJoinInList::ProtoModID_MIN;
const stRetApplyJoinInList_ProtoModID stRetApplyJoinInList::ProtoModID_MAX;
const int stRetApplyJoinInList::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetApplyJoinInList_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetApplyJoinInList_ProtoFunID_descriptor_;
}
bool stRetApplyJoinInList_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 11:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetApplyJoinInList_ProtoFunID stRetApplyJoinInList::FunID;
const stRetApplyJoinInList_ProtoFunID stRetApplyJoinInList::ProtoFunID_MIN;
const stRetApplyJoinInList_ProtoFunID stRetApplyJoinInList::ProtoFunID_MAX;
const int stRetApplyJoinInList::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetApplyJoinInList::kDataFieldNumber;
#endif  // !_MSC_VER

stRetApplyJoinInList::stRetApplyJoinInList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetApplyJoinInList::InitAsDefaultInstance() {
}

stRetApplyJoinInList::stRetApplyJoinInList(const stRetApplyJoinInList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetApplyJoinInList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetApplyJoinInList::~stRetApplyJoinInList() {
  SharedDtor();
}

void stRetApplyJoinInList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetApplyJoinInList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetApplyJoinInList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetApplyJoinInList_descriptor_;
}

const stRetApplyJoinInList& stRetApplyJoinInList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetApplyJoinInList* stRetApplyJoinInList::default_instance_ = NULL;

stRetApplyJoinInList* stRetApplyJoinInList::New() const {
  return new stRetApplyJoinInList;
}

void stRetApplyJoinInList::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetApplyJoinInList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuildProto.stSynApplierInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetApplyJoinInList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuildProto.stSynApplierInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetApplyJoinInList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuildProto.stSynApplierInfo data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetApplyJoinInList::ByteSize() const {
  int total_size = 0;

  // repeated .GuildProto.stSynApplierInfo data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetApplyJoinInList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetApplyJoinInList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetApplyJoinInList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetApplyJoinInList::MergeFrom(const stRetApplyJoinInList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetApplyJoinInList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetApplyJoinInList::CopyFrom(const stRetApplyJoinInList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetApplyJoinInList::IsInitialized() const {

  return true;
}

void stRetApplyJoinInList::Swap(stRetApplyJoinInList* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetApplyJoinInList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetApplyJoinInList_descriptor_;
  metadata.reflection = stRetApplyJoinInList_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyApplier_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyApplier_ProtoModID_descriptor_;
}
bool stReplyApplier_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyApplier_ProtoModID stReplyApplier::ModID;
const stReplyApplier_ProtoModID stReplyApplier::ProtoModID_MIN;
const stReplyApplier_ProtoModID stReplyApplier::ProtoModID_MAX;
const int stReplyApplier::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyApplier_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyApplier_ProtoFunID_descriptor_;
}
bool stReplyApplier_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 12:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyApplier_ProtoFunID stReplyApplier::FunID;
const stReplyApplier_ProtoFunID stReplyApplier::ProtoFunID_MIN;
const stReplyApplier_ProtoFunID stReplyApplier::ProtoFunID_MAX;
const int stReplyApplier::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyApplier::kCharIDFieldNumber;
const int stReplyApplier::kAgreeFieldNumber;
#endif  // !_MSC_VER

stReplyApplier::stReplyApplier()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyApplier::InitAsDefaultInstance() {
}

stReplyApplier::stReplyApplier(const stReplyApplier& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyApplier::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  agree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyApplier::~stReplyApplier() {
  SharedDtor();
}

void stReplyApplier::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReplyApplier::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyApplier::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyApplier_descriptor_;
}

const stReplyApplier& stReplyApplier::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReplyApplier* stReplyApplier::default_instance_ = NULL;

stReplyApplier* stReplyApplier::New() const {
  return new stReplyApplier;
}

void stReplyApplier::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    agree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyApplier::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_agree;
        break;
      }

      // optional bool agree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &agree_)));
          set_has_agree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyApplier::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->agree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyApplier::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bool agree = 2;
  if (has_agree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->agree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyApplier::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool agree = 2;
    if (has_agree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyApplier::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyApplier* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyApplier*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyApplier::MergeFrom(const stReplyApplier& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_agree()) {
      set_agree(from.agree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyApplier::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyApplier::CopyFrom(const stReplyApplier& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyApplier::IsInitialized() const {

  return true;
}

void stReplyApplier::Swap(stReplyApplier* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(agree_, other->agree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyApplier::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyApplier_descriptor_;
  metadata.reflection = stReplyApplier_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReplyApplerError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyApplerError_ProtoModID_descriptor_;
}
bool stReplyApplerError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyApplerError_ProtoModID stReplyApplerError::ModID;
const stReplyApplerError_ProtoModID stReplyApplerError::ProtoModID_MIN;
const stReplyApplerError_ProtoModID stReplyApplerError::ProtoModID_MAX;
const int stReplyApplerError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReplyApplerError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyApplerError_ProtoFunID_descriptor_;
}
bool stReplyApplerError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReplyApplerError_ProtoFunID stReplyApplerError::FunID;
const stReplyApplerError_ProtoFunID stReplyApplerError::ProtoFunID_MIN;
const stReplyApplerError_ProtoFunID stReplyApplerError::ProtoFunID_MAX;
const int stReplyApplerError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReplyApplerError::kResultFieldNumber;
#endif  // !_MSC_VER

stReplyApplerError::stReplyApplerError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReplyApplerError::InitAsDefaultInstance() {
}

stReplyApplerError::stReplyApplerError(const stReplyApplerError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReplyApplerError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReplyApplerError::~stReplyApplerError() {
  SharedDtor();
}

void stReplyApplerError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReplyApplerError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReplyApplerError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReplyApplerError_descriptor_;
}

const stReplyApplerError& stReplyApplerError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReplyApplerError* stReplyApplerError::default_instance_ = NULL;

stReplyApplerError* stReplyApplerError::New() const {
  return new stReplyApplerError;
}

void stReplyApplerError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReplyApplerError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.ReplyError result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::ReplyError_IsValid(value)) {
            set_result(static_cast< ::GuildProto::ReplyError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReplyApplerError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.ReplyError result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReplyApplerError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.ReplyError result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReplyApplerError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.ReplyError result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReplyApplerError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReplyApplerError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReplyApplerError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReplyApplerError::MergeFrom(const stReplyApplerError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReplyApplerError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReplyApplerError::CopyFrom(const stReplyApplerError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReplyApplerError::IsInitialized() const {

  return true;
}

void stReplyApplerError::Swap(stReplyApplerError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReplyApplerError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReplyApplerError_descriptor_;
  metadata.reflection = stReplyApplerError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stJoinInGuildTip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stJoinInGuildTip_ProtoModID_descriptor_;
}
bool stJoinInGuildTip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stJoinInGuildTip_ProtoModID stJoinInGuildTip::ModID;
const stJoinInGuildTip_ProtoModID stJoinInGuildTip::ProtoModID_MIN;
const stJoinInGuildTip_ProtoModID stJoinInGuildTip::ProtoModID_MAX;
const int stJoinInGuildTip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stJoinInGuildTip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stJoinInGuildTip_ProtoFunID_descriptor_;
}
bool stJoinInGuildTip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 14:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stJoinInGuildTip_ProtoFunID stJoinInGuildTip::FunID;
const stJoinInGuildTip_ProtoFunID stJoinInGuildTip::ProtoFunID_MIN;
const stJoinInGuildTip_ProtoFunID stJoinInGuildTip::ProtoFunID_MAX;
const int stJoinInGuildTip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stJoinInGuildTip::kAcceptFieldNumber;
const int stJoinInGuildTip::kOtherNameFieldNumber;
#endif  // !_MSC_VER

stJoinInGuildTip::stJoinInGuildTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stJoinInGuildTip::InitAsDefaultInstance() {
}

stJoinInGuildTip::stJoinInGuildTip(const stJoinInGuildTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stJoinInGuildTip::SharedCtor() {
  _cached_size_ = 0;
  accept_ = false;
  othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stJoinInGuildTip::~stJoinInGuildTip() {
  SharedDtor();
}

void stJoinInGuildTip::SharedDtor() {
  if (othername_ != &::google::protobuf::internal::kEmptyString) {
    delete othername_;
  }
  if (this != default_instance_) {
  }
}

void stJoinInGuildTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stJoinInGuildTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stJoinInGuildTip_descriptor_;
}

const stJoinInGuildTip& stJoinInGuildTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stJoinInGuildTip* stJoinInGuildTip::default_instance_ = NULL;

stJoinInGuildTip* stJoinInGuildTip::New() const {
  return new stJoinInGuildTip;
}

void stJoinInGuildTip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    accept_ = false;
    if (has_othername()) {
      if (othername_ != &::google::protobuf::internal::kEmptyString) {
        othername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stJoinInGuildTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool accept = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accept_)));
          set_has_accept();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_otherName;
        break;
      }

      // optional string otherName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_othername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->othername().data(), this->othername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stJoinInGuildTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool accept = 1;
  if (has_accept()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->accept(), output);
  }

  // optional string otherName = 2;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->othername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stJoinInGuildTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool accept = 1;
  if (has_accept()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->accept(), target);
  }

  // optional string otherName = 2;
  if (has_othername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->othername().data(), this->othername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->othername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stJoinInGuildTip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool accept = 1;
    if (has_accept()) {
      total_size += 1 + 1;
    }

    // optional string otherName = 2;
    if (has_othername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->othername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stJoinInGuildTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stJoinInGuildTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stJoinInGuildTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stJoinInGuildTip::MergeFrom(const stJoinInGuildTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_accept()) {
      set_accept(from.accept());
    }
    if (from.has_othername()) {
      set_othername(from.othername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stJoinInGuildTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stJoinInGuildTip::CopyFrom(const stJoinInGuildTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stJoinInGuildTip::IsInitialized() const {

  return true;
}

void stJoinInGuildTip::Swap(stJoinInGuildTip* other) {
  if (other != this) {
    std::swap(accept_, other->accept_);
    std::swap(othername_, other->othername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stJoinInGuildTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stJoinInGuildTip_descriptor_;
  metadata.reflection = stJoinInGuildTip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMemJoinInGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMemJoinInGuild_ProtoModID_descriptor_;
}
bool stMemJoinInGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMemJoinInGuild_ProtoModID stMemJoinInGuild::ModID;
const stMemJoinInGuild_ProtoModID stMemJoinInGuild::ProtoModID_MIN;
const stMemJoinInGuild_ProtoModID stMemJoinInGuild::ProtoModID_MAX;
const int stMemJoinInGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMemJoinInGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMemJoinInGuild_ProtoFunID_descriptor_;
}
bool stMemJoinInGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 15:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMemJoinInGuild_ProtoFunID stMemJoinInGuild::FunID;
const stMemJoinInGuild_ProtoFunID stMemJoinInGuild::ProtoFunID_MIN;
const stMemJoinInGuild_ProtoFunID stMemJoinInGuild::ProtoFunID_MAX;
const int stMemJoinInGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMemJoinInGuild::kDataFieldNumber;
#endif  // !_MSC_VER

stMemJoinInGuild::stMemJoinInGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMemJoinInGuild::InitAsDefaultInstance() {
  data_ = const_cast< ::GuildProto::stSynGuildMemInfo*>(&::GuildProto::stSynGuildMemInfo::default_instance());
}

stMemJoinInGuild::stMemJoinInGuild(const stMemJoinInGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMemJoinInGuild::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMemJoinInGuild::~stMemJoinInGuild() {
  SharedDtor();
}

void stMemJoinInGuild::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void stMemJoinInGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMemJoinInGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMemJoinInGuild_descriptor_;
}

const stMemJoinInGuild& stMemJoinInGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stMemJoinInGuild* stMemJoinInGuild::default_instance_ = NULL;

stMemJoinInGuild* stMemJoinInGuild::New() const {
  return new stMemJoinInGuild;
}

void stMemJoinInGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_data()) {
      if (data_ != NULL) data_->::GuildProto::stSynGuildMemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMemJoinInGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stSynGuildMemInfo data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMemJoinInGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stSynGuildMemInfo data = 1;
  if (has_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMemJoinInGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stSynGuildMemInfo data = 1;
  if (has_data()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMemJoinInGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stSynGuildMemInfo data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMemJoinInGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMemJoinInGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMemJoinInGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMemJoinInGuild::MergeFrom(const stMemJoinInGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::GuildProto::stSynGuildMemInfo::MergeFrom(from.data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMemJoinInGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMemJoinInGuild::CopyFrom(const stMemJoinInGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMemJoinInGuild::IsInitialized() const {

  return true;
}

void stMemJoinInGuild::Swap(stMemJoinInGuild* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMemJoinInGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMemJoinInGuild_descriptor_;
  metadata.reflection = stMemJoinInGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLeaveGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveGuild_ProtoModID_descriptor_;
}
bool stReqLeaveGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeaveGuild_ProtoModID stReqLeaveGuild::ModID;
const stReqLeaveGuild_ProtoModID stReqLeaveGuild::ProtoModID_MIN;
const stReqLeaveGuild_ProtoModID stReqLeaveGuild::ProtoModID_MAX;
const int stReqLeaveGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLeaveGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveGuild_ProtoFunID_descriptor_;
}
bool stReqLeaveGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 16:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLeaveGuild_ProtoFunID stReqLeaveGuild::FunID;
const stReqLeaveGuild_ProtoFunID stReqLeaveGuild::ProtoFunID_MIN;
const stReqLeaveGuild_ProtoFunID stReqLeaveGuild::ProtoFunID_MAX;
const int stReqLeaveGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLeaveGuild::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stReqLeaveGuild::stReqLeaveGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLeaveGuild::InitAsDefaultInstance() {
}

stReqLeaveGuild::stReqLeaveGuild(const stReqLeaveGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLeaveGuild::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLeaveGuild::~stReqLeaveGuild() {
  SharedDtor();
}

void stReqLeaveGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLeaveGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLeaveGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLeaveGuild_descriptor_;
}

const stReqLeaveGuild& stReqLeaveGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqLeaveGuild* stReqLeaveGuild::default_instance_ = NULL;

stReqLeaveGuild* stReqLeaveGuild::New() const {
  return new stReqLeaveGuild;
}

void stReqLeaveGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLeaveGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLeaveGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLeaveGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLeaveGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLeaveGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLeaveGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLeaveGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLeaveGuild::MergeFrom(const stReqLeaveGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLeaveGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLeaveGuild::CopyFrom(const stReqLeaveGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLeaveGuild::IsInitialized() const {

  return true;
}

void stReqLeaveGuild::Swap(stReqLeaveGuild* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLeaveGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLeaveGuild_descriptor_;
  metadata.reflection = stReqLeaveGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stMemLeaveGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMemLeaveGuild_ProtoModID_descriptor_;
}
bool stMemLeaveGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMemLeaveGuild_ProtoModID stMemLeaveGuild::ModID;
const stMemLeaveGuild_ProtoModID stMemLeaveGuild::ProtoModID_MIN;
const stMemLeaveGuild_ProtoModID stMemLeaveGuild::ProtoModID_MAX;
const int stMemLeaveGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stMemLeaveGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMemLeaveGuild_ProtoFunID_descriptor_;
}
bool stMemLeaveGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 17:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stMemLeaveGuild_ProtoFunID stMemLeaveGuild::FunID;
const stMemLeaveGuild_ProtoFunID stMemLeaveGuild::ProtoFunID_MIN;
const stMemLeaveGuild_ProtoFunID stMemLeaveGuild::ProtoFunID_MAX;
const int stMemLeaveGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stMemLeaveGuild::kCharIDFieldNumber;
#endif  // !_MSC_VER

stMemLeaveGuild::stMemLeaveGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stMemLeaveGuild::InitAsDefaultInstance() {
}

stMemLeaveGuild::stMemLeaveGuild(const stMemLeaveGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stMemLeaveGuild::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stMemLeaveGuild::~stMemLeaveGuild() {
  SharedDtor();
}

void stMemLeaveGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stMemLeaveGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stMemLeaveGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stMemLeaveGuild_descriptor_;
}

const stMemLeaveGuild& stMemLeaveGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stMemLeaveGuild* stMemLeaveGuild::default_instance_ = NULL;

stMemLeaveGuild* stMemLeaveGuild::New() const {
  return new stMemLeaveGuild;
}

void stMemLeaveGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stMemLeaveGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stMemLeaveGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stMemLeaveGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stMemLeaveGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stMemLeaveGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stMemLeaveGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stMemLeaveGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stMemLeaveGuild::MergeFrom(const stMemLeaveGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stMemLeaveGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stMemLeaveGuild::CopyFrom(const stMemLeaveGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stMemLeaveGuild::IsInitialized() const {

  return true;
}

void stMemLeaveGuild::Swap(stMemLeaveGuild* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stMemLeaveGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stMemLeaveGuild_descriptor_;
  metadata.reflection = stMemLeaveGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAssignGuildTitle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAssignGuildTitle_ProtoModID_descriptor_;
}
bool stAssignGuildTitle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAssignGuildTitle_ProtoModID stAssignGuildTitle::ModID;
const stAssignGuildTitle_ProtoModID stAssignGuildTitle::ProtoModID_MIN;
const stAssignGuildTitle_ProtoModID stAssignGuildTitle::ProtoModID_MAX;
const int stAssignGuildTitle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAssignGuildTitle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAssignGuildTitle_ProtoFunID_descriptor_;
}
bool stAssignGuildTitle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 18:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAssignGuildTitle_ProtoFunID stAssignGuildTitle::FunID;
const stAssignGuildTitle_ProtoFunID stAssignGuildTitle::ProtoFunID_MIN;
const stAssignGuildTitle_ProtoFunID stAssignGuildTitle::ProtoFunID_MAX;
const int stAssignGuildTitle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAssignGuildTitle::kCharIDFieldNumber;
const int stAssignGuildTitle::kETitleFieldNumber;
#endif  // !_MSC_VER

stAssignGuildTitle::stAssignGuildTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAssignGuildTitle::InitAsDefaultInstance() {
}

stAssignGuildTitle::stAssignGuildTitle(const stAssignGuildTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAssignGuildTitle::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  etitle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAssignGuildTitle::~stAssignGuildTitle() {
  SharedDtor();
}

void stAssignGuildTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAssignGuildTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAssignGuildTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAssignGuildTitle_descriptor_;
}

const stAssignGuildTitle& stAssignGuildTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stAssignGuildTitle* stAssignGuildTitle::default_instance_ = NULL;

stAssignGuildTitle* stAssignGuildTitle::New() const {
  return new stAssignGuildTitle;
}

void stAssignGuildTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    etitle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAssignGuildTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_eTitle;
        break;
      }

      // optional .GuildProto.eGuildTile eTitle = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eTitle:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eGuildTile_IsValid(value)) {
            set_etitle(static_cast< ::GuildProto::eGuildTile >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAssignGuildTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional .GuildProto.eGuildTile eTitle = 2;
  if (has_etitle()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->etitle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAssignGuildTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional .GuildProto.eGuildTile eTitle = 2;
  if (has_etitle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->etitle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAssignGuildTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional .GuildProto.eGuildTile eTitle = 2;
    if (has_etitle()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etitle());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAssignGuildTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAssignGuildTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAssignGuildTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAssignGuildTitle::MergeFrom(const stAssignGuildTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_etitle()) {
      set_etitle(from.etitle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAssignGuildTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAssignGuildTitle::CopyFrom(const stAssignGuildTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAssignGuildTitle::IsInitialized() const {

  return true;
}

void stAssignGuildTitle::Swap(stAssignGuildTitle* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(etitle_, other->etitle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAssignGuildTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAssignGuildTitle_descriptor_;
  metadata.reflection = stAssignGuildTitle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAssignTitleError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAssignTitleError_ProtoModID_descriptor_;
}
bool stAssignTitleError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAssignTitleError_ProtoModID stAssignTitleError::ModID;
const stAssignTitleError_ProtoModID stAssignTitleError::ProtoModID_MIN;
const stAssignTitleError_ProtoModID stAssignTitleError::ProtoModID_MAX;
const int stAssignTitleError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAssignTitleError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAssignTitleError_ProtoFunID_descriptor_;
}
bool stAssignTitleError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 19:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAssignTitleError_ProtoFunID stAssignTitleError::FunID;
const stAssignTitleError_ProtoFunID stAssignTitleError::ProtoFunID_MIN;
const stAssignTitleError_ProtoFunID stAssignTitleError::ProtoFunID_MAX;
const int stAssignTitleError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAssignTitleError::kResultFieldNumber;
#endif  // !_MSC_VER

stAssignTitleError::stAssignTitleError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAssignTitleError::InitAsDefaultInstance() {
}

stAssignTitleError::stAssignTitleError(const stAssignTitleError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAssignTitleError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAssignTitleError::~stAssignTitleError() {
  SharedDtor();
}

void stAssignTitleError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stAssignTitleError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAssignTitleError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAssignTitleError_descriptor_;
}

const stAssignTitleError& stAssignTitleError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stAssignTitleError* stAssignTitleError::default_instance_ = NULL;

stAssignTitleError* stAssignTitleError::New() const {
  return new stAssignTitleError;
}

void stAssignTitleError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAssignTitleError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.eAssignTitleError result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eAssignTitleError_IsValid(value)) {
            set_result(static_cast< ::GuildProto::eAssignTitleError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAssignTitleError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.eAssignTitleError result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAssignTitleError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.eAssignTitleError result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAssignTitleError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.eAssignTitleError result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAssignTitleError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAssignTitleError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAssignTitleError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAssignTitleError::MergeFrom(const stAssignTitleError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAssignTitleError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAssignTitleError::CopyFrom(const stAssignTitleError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAssignTitleError::IsInitialized() const {

  return true;
}

void stAssignTitleError::Swap(stAssignTitleError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAssignTitleError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAssignTitleError_descriptor_;
  metadata.reflection = stAssignTitleError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelTitle_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelTitle_ProtoModID_descriptor_;
}
bool stCancelTitle_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelTitle_ProtoModID stCancelTitle::ModID;
const stCancelTitle_ProtoModID stCancelTitle::ProtoModID_MIN;
const stCancelTitle_ProtoModID stCancelTitle::ProtoModID_MAX;
const int stCancelTitle::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelTitle_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelTitle_ProtoFunID_descriptor_;
}
bool stCancelTitle_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 20:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelTitle_ProtoFunID stCancelTitle::FunID;
const stCancelTitle_ProtoFunID stCancelTitle::ProtoFunID_MIN;
const stCancelTitle_ProtoFunID stCancelTitle::ProtoFunID_MAX;
const int stCancelTitle::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelTitle::kCharIDFieldNumber;
#endif  // !_MSC_VER

stCancelTitle::stCancelTitle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelTitle::InitAsDefaultInstance() {
}

stCancelTitle::stCancelTitle(const stCancelTitle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelTitle::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelTitle::~stCancelTitle() {
  SharedDtor();
}

void stCancelTitle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelTitle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelTitle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelTitle_descriptor_;
}

const stCancelTitle& stCancelTitle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stCancelTitle* stCancelTitle::default_instance_ = NULL;

stCancelTitle* stCancelTitle::New() const {
  return new stCancelTitle;
}

void stCancelTitle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelTitle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelTitle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelTitle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelTitle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelTitle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelTitle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelTitle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelTitle::MergeFrom(const stCancelTitle& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelTitle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelTitle::CopyFrom(const stCancelTitle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelTitle::IsInitialized() const {

  return true;
}

void stCancelTitle::Swap(stCancelTitle* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelTitle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelTitle_descriptor_;
  metadata.reflection = stCancelTitle_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelTitleError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelTitleError_ProtoModID_descriptor_;
}
bool stCancelTitleError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelTitleError_ProtoModID stCancelTitleError::ModID;
const stCancelTitleError_ProtoModID stCancelTitleError::ProtoModID_MIN;
const stCancelTitleError_ProtoModID stCancelTitleError::ProtoModID_MAX;
const int stCancelTitleError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelTitleError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelTitleError_ProtoFunID_descriptor_;
}
bool stCancelTitleError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 21:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelTitleError_ProtoFunID stCancelTitleError::FunID;
const stCancelTitleError_ProtoFunID stCancelTitleError::ProtoFunID_MIN;
const stCancelTitleError_ProtoFunID stCancelTitleError::ProtoFunID_MAX;
const int stCancelTitleError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelTitleError::kResultFieldNumber;
#endif  // !_MSC_VER

stCancelTitleError::stCancelTitleError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelTitleError::InitAsDefaultInstance() {
}

stCancelTitleError::stCancelTitleError(const stCancelTitleError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelTitleError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelTitleError::~stCancelTitleError() {
  SharedDtor();
}

void stCancelTitleError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelTitleError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelTitleError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelTitleError_descriptor_;
}

const stCancelTitleError& stCancelTitleError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stCancelTitleError* stCancelTitleError::default_instance_ = NULL;

stCancelTitleError* stCancelTitleError::New() const {
  return new stCancelTitleError;
}

void stCancelTitleError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelTitleError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.eCancelTitleError result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eCancelTitleError_IsValid(value)) {
            set_result(static_cast< ::GuildProto::eCancelTitleError >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelTitleError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.eCancelTitleError result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelTitleError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.eCancelTitleError result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelTitleError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.eCancelTitleError result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelTitleError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelTitleError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelTitleError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelTitleError::MergeFrom(const stCancelTitleError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelTitleError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelTitleError::CopyFrom(const stCancelTitleError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelTitleError::IsInitialized() const {

  return true;
}

void stCancelTitleError::Swap(stCancelTitleError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelTitleError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelTitleError_descriptor_;
  metadata.reflection = stCancelTitleError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveLeader2Other_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLeader2Other_ProtoModID_descriptor_;
}
bool stGiveLeader2Other_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLeader2Other_ProtoModID stGiveLeader2Other::ModID;
const stGiveLeader2Other_ProtoModID stGiveLeader2Other::ProtoModID_MIN;
const stGiveLeader2Other_ProtoModID stGiveLeader2Other::ProtoModID_MAX;
const int stGiveLeader2Other::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveLeader2Other_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLeader2Other_ProtoFunID_descriptor_;
}
bool stGiveLeader2Other_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 22:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLeader2Other_ProtoFunID stGiveLeader2Other::FunID;
const stGiveLeader2Other_ProtoFunID stGiveLeader2Other::ProtoFunID_MIN;
const stGiveLeader2Other_ProtoFunID stGiveLeader2Other::ProtoFunID_MAX;
const int stGiveLeader2Other::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveLeader2Other::kCharIDFieldNumber;
#endif  // !_MSC_VER

stGiveLeader2Other::stGiveLeader2Other()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveLeader2Other::InitAsDefaultInstance() {
}

stGiveLeader2Other::stGiveLeader2Other(const stGiveLeader2Other& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveLeader2Other::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveLeader2Other::~stGiveLeader2Other() {
  SharedDtor();
}

void stGiveLeader2Other::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveLeader2Other::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveLeader2Other::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLeader2Other_descriptor_;
}

const stGiveLeader2Other& stGiveLeader2Other::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stGiveLeader2Other* stGiveLeader2Other::default_instance_ = NULL;

stGiveLeader2Other* stGiveLeader2Other::New() const {
  return new stGiveLeader2Other;
}

void stGiveLeader2Other::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveLeader2Other::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveLeader2Other::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveLeader2Other::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveLeader2Other::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveLeader2Other::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveLeader2Other* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveLeader2Other*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveLeader2Other::MergeFrom(const stGiveLeader2Other& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveLeader2Other::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveLeader2Other::CopyFrom(const stGiveLeader2Other& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveLeader2Other::IsInitialized() const {

  return true;
}

void stGiveLeader2Other::Swap(stGiveLeader2Other* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveLeader2Other::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveLeader2Other_descriptor_;
  metadata.reflection = stGiveLeader2Other_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGiveLeaderError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLeaderError_ProtoModID_descriptor_;
}
bool stGiveLeaderError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLeaderError_ProtoModID stGiveLeaderError::ModID;
const stGiveLeaderError_ProtoModID stGiveLeaderError::ProtoModID_MIN;
const stGiveLeaderError_ProtoModID stGiveLeaderError::ProtoModID_MAX;
const int stGiveLeaderError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGiveLeaderError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLeaderError_ProtoFunID_descriptor_;
}
bool stGiveLeaderError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 23:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGiveLeaderError_ProtoFunID stGiveLeaderError::FunID;
const stGiveLeaderError_ProtoFunID stGiveLeaderError::ProtoFunID_MIN;
const stGiveLeaderError_ProtoFunID stGiveLeaderError::ProtoFunID_MAX;
const int stGiveLeaderError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGiveLeaderError::kResultFieldNumber;
#endif  // !_MSC_VER

stGiveLeaderError::stGiveLeaderError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGiveLeaderError::InitAsDefaultInstance() {
}

stGiveLeaderError::stGiveLeaderError(const stGiveLeaderError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGiveLeaderError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGiveLeaderError::~stGiveLeaderError() {
  SharedDtor();
}

void stGiveLeaderError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGiveLeaderError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGiveLeaderError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGiveLeaderError_descriptor_;
}

const stGiveLeaderError& stGiveLeaderError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stGiveLeaderError* stGiveLeaderError::default_instance_ = NULL;

stGiveLeaderError* stGiveLeaderError::New() const {
  return new stGiveLeaderError;
}

void stGiveLeaderError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGiveLeaderError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.eGiveLeaderErrorNo result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eGiveLeaderErrorNo_IsValid(value)) {
            set_result(static_cast< ::GuildProto::eGiveLeaderErrorNo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGiveLeaderError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.eGiveLeaderErrorNo result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGiveLeaderError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.eGiveLeaderErrorNo result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGiveLeaderError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.eGiveLeaderErrorNo result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGiveLeaderError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGiveLeaderError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGiveLeaderError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGiveLeaderError::MergeFrom(const stGiveLeaderError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGiveLeaderError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGiveLeaderError::CopyFrom(const stGiveLeaderError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGiveLeaderError::IsInitialized() const {

  return true;
}

void stGiveLeaderError::Swap(stGiveLeaderError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGiveLeaderError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGiveLeaderError_descriptor_;
  metadata.reflection = stGiveLeaderError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFireGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFireGuild_ProtoModID_descriptor_;
}
bool stFireGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFireGuild_ProtoModID stFireGuild::ModID;
const stFireGuild_ProtoModID stFireGuild::ProtoModID_MIN;
const stFireGuild_ProtoModID stFireGuild::ProtoModID_MAX;
const int stFireGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFireGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFireGuild_ProtoFunID_descriptor_;
}
bool stFireGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 24:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFireGuild_ProtoFunID stFireGuild::FunID;
const stFireGuild_ProtoFunID stFireGuild::ProtoFunID_MIN;
const stFireGuild_ProtoFunID stFireGuild::ProtoFunID_MAX;
const int stFireGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFireGuild::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stFireGuild::stFireGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFireGuild::InitAsDefaultInstance() {
}

stFireGuild::stFireGuild(const stFireGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFireGuild::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFireGuild::~stFireGuild() {
  SharedDtor();
}

void stFireGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFireGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFireGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFireGuild_descriptor_;
}

const stFireGuild& stFireGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stFireGuild* stFireGuild::default_instance_ = NULL;

stFireGuild* stFireGuild::New() const {
  return new stFireGuild;
}

void stFireGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFireGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFireGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFireGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFireGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFireGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFireGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFireGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFireGuild::MergeFrom(const stFireGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFireGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFireGuild::CopyFrom(const stFireGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFireGuild::IsInitialized() const {

  return true;
}

void stFireGuild::Swap(stFireGuild* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFireGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFireGuild_descriptor_;
  metadata.reflection = stFireGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stFireGuildError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFireGuildError_ProtoModID_descriptor_;
}
bool stFireGuildError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFireGuildError_ProtoModID stFireGuildError::ModID;
const stFireGuildError_ProtoModID stFireGuildError::ProtoModID_MIN;
const stFireGuildError_ProtoModID stFireGuildError::ProtoModID_MAX;
const int stFireGuildError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stFireGuildError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFireGuildError_ProtoFunID_descriptor_;
}
bool stFireGuildError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 25:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stFireGuildError_ProtoFunID stFireGuildError::FunID;
const stFireGuildError_ProtoFunID stFireGuildError::ProtoFunID_MIN;
const stFireGuildError_ProtoFunID stFireGuildError::ProtoFunID_MAX;
const int stFireGuildError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stFireGuildError::kResultFieldNumber;
#endif  // !_MSC_VER

stFireGuildError::stFireGuildError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stFireGuildError::InitAsDefaultInstance() {
}

stFireGuildError::stFireGuildError(const stFireGuildError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stFireGuildError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stFireGuildError::~stFireGuildError() {
  SharedDtor();
}

void stFireGuildError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stFireGuildError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stFireGuildError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stFireGuildError_descriptor_;
}

const stFireGuildError& stFireGuildError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stFireGuildError* stFireGuildError::default_instance_ = NULL;

stFireGuildError* stFireGuildError::New() const {
  return new stFireGuildError;
}

void stFireGuildError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stFireGuildError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.eFireMemberErrorNo result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eFireMemberErrorNo_IsValid(value)) {
            set_result(static_cast< ::GuildProto::eFireMemberErrorNo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stFireGuildError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.eFireMemberErrorNo result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stFireGuildError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.eFireMemberErrorNo result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stFireGuildError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.eFireMemberErrorNo result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stFireGuildError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stFireGuildError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stFireGuildError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stFireGuildError::MergeFrom(const stFireGuildError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stFireGuildError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stFireGuildError::CopyFrom(const stFireGuildError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stFireGuildError::IsInitialized() const {

  return true;
}

void stFireGuildError::Swap(stFireGuildError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stFireGuildError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stFireGuildError_descriptor_;
  metadata.reflection = stFireGuildError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuildMemOnOffLine_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildMemOnOffLine_ProtoModID_descriptor_;
}
bool stGuildMemOnOffLine_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildMemOnOffLine_ProtoModID stGuildMemOnOffLine::ModID;
const stGuildMemOnOffLine_ProtoModID stGuildMemOnOffLine::ProtoModID_MIN;
const stGuildMemOnOffLine_ProtoModID stGuildMemOnOffLine::ProtoModID_MAX;
const int stGuildMemOnOffLine::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuildMemOnOffLine_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildMemOnOffLine_ProtoFunID_descriptor_;
}
bool stGuildMemOnOffLine_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 26:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildMemOnOffLine_ProtoFunID stGuildMemOnOffLine::FunID;
const stGuildMemOnOffLine_ProtoFunID stGuildMemOnOffLine::ProtoFunID_MIN;
const stGuildMemOnOffLine_ProtoFunID stGuildMemOnOffLine::ProtoFunID_MAX;
const int stGuildMemOnOffLine::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuildMemOnOffLine::kCharIDFieldNumber;
const int stGuildMemOnOffLine::kOnlineFieldNumber;
#endif  // !_MSC_VER

stGuildMemOnOffLine::stGuildMemOnOffLine()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuildMemOnOffLine::InitAsDefaultInstance() {
}

stGuildMemOnOffLine::stGuildMemOnOffLine(const stGuildMemOnOffLine& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuildMemOnOffLine::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuildMemOnOffLine::~stGuildMemOnOffLine() {
  SharedDtor();
}

void stGuildMemOnOffLine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuildMemOnOffLine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuildMemOnOffLine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildMemOnOffLine_descriptor_;
}

const stGuildMemOnOffLine& stGuildMemOnOffLine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stGuildMemOnOffLine* stGuildMemOnOffLine::default_instance_ = NULL;

stGuildMemOnOffLine* stGuildMemOnOffLine::New() const {
  return new stGuildMemOnOffLine;
}

void stGuildMemOnOffLine::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuildMemOnOffLine::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // optional bool online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuildMemOnOffLine::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional bool online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuildMemOnOffLine::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional bool online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuildMemOnOffLine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional bool online = 2;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuildMemOnOffLine::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuildMemOnOffLine* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuildMemOnOffLine*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuildMemOnOffLine::MergeFrom(const stGuildMemOnOffLine& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuildMemOnOffLine::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuildMemOnOffLine::CopyFrom(const stGuildMemOnOffLine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuildMemOnOffLine::IsInitialized() const {

  return true;
}

void stGuildMemOnOffLine::Swap(stGuildMemOnOffLine* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuildMemOnOffLine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuildMemOnOffLine_descriptor_;
  metadata.reflection = stGuildMemOnOffLine_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stKillOutGroupMember_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutGroupMember_ProtoModID_descriptor_;
}
bool stKillOutGroupMember_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillOutGroupMember_ProtoModID stKillOutGroupMember::ModID;
const stKillOutGroupMember_ProtoModID stKillOutGroupMember::ProtoModID_MIN;
const stKillOutGroupMember_ProtoModID stKillOutGroupMember::ProtoModID_MAX;
const int stKillOutGroupMember::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stKillOutGroupMember_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutGroupMember_ProtoFunID_descriptor_;
}
bool stKillOutGroupMember_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 27:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillOutGroupMember_ProtoFunID stKillOutGroupMember::FunID;
const stKillOutGroupMember_ProtoFunID stKillOutGroupMember::ProtoFunID_MIN;
const stKillOutGroupMember_ProtoFunID stKillOutGroupMember::ProtoFunID_MAX;
const int stKillOutGroupMember::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stKillOutGroupMember::kCharIDFieldNumber;
#endif  // !_MSC_VER

stKillOutGroupMember::stKillOutGroupMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stKillOutGroupMember::InitAsDefaultInstance() {
}

stKillOutGroupMember::stKillOutGroupMember(const stKillOutGroupMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stKillOutGroupMember::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stKillOutGroupMember::~stKillOutGroupMember() {
  SharedDtor();
}

void stKillOutGroupMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stKillOutGroupMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stKillOutGroupMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutGroupMember_descriptor_;
}

const stKillOutGroupMember& stKillOutGroupMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stKillOutGroupMember* stKillOutGroupMember::default_instance_ = NULL;

stKillOutGroupMember* stKillOutGroupMember::New() const {
  return new stKillOutGroupMember;
}

void stKillOutGroupMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stKillOutGroupMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stKillOutGroupMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stKillOutGroupMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stKillOutGroupMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stKillOutGroupMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stKillOutGroupMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stKillOutGroupMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stKillOutGroupMember::MergeFrom(const stKillOutGroupMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stKillOutGroupMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stKillOutGroupMember::CopyFrom(const stKillOutGroupMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stKillOutGroupMember::IsInitialized() const {

  return true;
}

void stKillOutGroupMember::Swap(stKillOutGroupMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stKillOutGroupMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stKillOutGroupMember_descriptor_;
  metadata.reflection = stKillOutGroupMember_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stKillOutTip_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutTip_ProtoModID_descriptor_;
}
bool stKillOutTip_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillOutTip_ProtoModID stKillOutTip::ModID;
const stKillOutTip_ProtoModID stKillOutTip::ProtoModID_MIN;
const stKillOutTip_ProtoModID stKillOutTip::ProtoModID_MAX;
const int stKillOutTip::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stKillOutTip_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutTip_ProtoFunID_descriptor_;
}
bool stKillOutTip_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 28:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillOutTip_ProtoFunID stKillOutTip::FunID;
const stKillOutTip_ProtoFunID stKillOutTip::ProtoFunID_MIN;
const stKillOutTip_ProtoFunID stKillOutTip::ProtoFunID_MAX;
const int stKillOutTip::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

stKillOutTip::stKillOutTip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stKillOutTip::InitAsDefaultInstance() {
}

stKillOutTip::stKillOutTip(const stKillOutTip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stKillOutTip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stKillOutTip::~stKillOutTip() {
  SharedDtor();
}

void stKillOutTip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stKillOutTip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stKillOutTip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutTip_descriptor_;
}

const stKillOutTip& stKillOutTip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stKillOutTip* stKillOutTip::default_instance_ = NULL;

stKillOutTip* stKillOutTip::New() const {
  return new stKillOutTip;
}

void stKillOutTip::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stKillOutTip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void stKillOutTip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stKillOutTip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stKillOutTip::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stKillOutTip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stKillOutTip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stKillOutTip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stKillOutTip::MergeFrom(const stKillOutTip& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stKillOutTip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stKillOutTip::CopyFrom(const stKillOutTip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stKillOutTip::IsInitialized() const {

  return true;
}

void stKillOutTip::Swap(stKillOutTip* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stKillOutTip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stKillOutTip_descriptor_;
  metadata.reflection = stKillOutTip_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stKillOutGroupMemberError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutGroupMemberError_ProtoModID_descriptor_;
}
bool stKillOutGroupMemberError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillOutGroupMemberError_ProtoModID stKillOutGroupMemberError::ModID;
const stKillOutGroupMemberError_ProtoModID stKillOutGroupMemberError::ProtoModID_MIN;
const stKillOutGroupMemberError_ProtoModID stKillOutGroupMemberError::ProtoModID_MAX;
const int stKillOutGroupMemberError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stKillOutGroupMemberError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutGroupMemberError_ProtoFunID_descriptor_;
}
bool stKillOutGroupMemberError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 29:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stKillOutGroupMemberError_ProtoFunID stKillOutGroupMemberError::FunID;
const stKillOutGroupMemberError_ProtoFunID stKillOutGroupMemberError::ProtoFunID_MIN;
const stKillOutGroupMemberError_ProtoFunID stKillOutGroupMemberError::ProtoFunID_MAX;
const int stKillOutGroupMemberError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stKillOutGroupMemberError::kResultFieldNumber;
#endif  // !_MSC_VER

stKillOutGroupMemberError::stKillOutGroupMemberError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stKillOutGroupMemberError::InitAsDefaultInstance() {
}

stKillOutGroupMemberError::stKillOutGroupMemberError(const stKillOutGroupMemberError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stKillOutGroupMemberError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stKillOutGroupMemberError::~stKillOutGroupMemberError() {
  SharedDtor();
}

void stKillOutGroupMemberError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stKillOutGroupMemberError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stKillOutGroupMemberError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stKillOutGroupMemberError_descriptor_;
}

const stKillOutGroupMemberError& stKillOutGroupMemberError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stKillOutGroupMemberError* stKillOutGroupMemberError::default_instance_ = NULL;

stKillOutGroupMemberError* stKillOutGroupMemberError::New() const {
  return new stKillOutGroupMemberError;
}

void stKillOutGroupMemberError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stKillOutGroupMemberError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.eKillOutErrorNo result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eKillOutErrorNo_IsValid(value)) {
            set_result(static_cast< ::GuildProto::eKillOutErrorNo >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stKillOutGroupMemberError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.eKillOutErrorNo result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stKillOutGroupMemberError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.eKillOutErrorNo result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stKillOutGroupMemberError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.eKillOutErrorNo result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stKillOutGroupMemberError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stKillOutGroupMemberError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stKillOutGroupMemberError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stKillOutGroupMemberError::MergeFrom(const stKillOutGroupMemberError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stKillOutGroupMemberError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stKillOutGroupMemberError::CopyFrom(const stKillOutGroupMemberError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stKillOutGroupMemberError::IsInitialized() const {

  return true;
}

void stKillOutGroupMemberError::Swap(stKillOutGroupMemberError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stKillOutGroupMemberError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stKillOutGroupMemberError_descriptor_;
  metadata.reflection = stKillOutGroupMemberError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGuildMemInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildMemInfo_ProtoModID_descriptor_;
}
bool stRetGuildMemInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildMemInfo_ProtoModID stRetGuildMemInfo::ModID;
const stRetGuildMemInfo_ProtoModID stRetGuildMemInfo::ProtoModID_MIN;
const stRetGuildMemInfo_ProtoModID stRetGuildMemInfo::ProtoModID_MAX;
const int stRetGuildMemInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGuildMemInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildMemInfo_ProtoFunID_descriptor_;
}
bool stRetGuildMemInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 30:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildMemInfo_ProtoFunID stRetGuildMemInfo::FunID;
const stRetGuildMemInfo_ProtoFunID stRetGuildMemInfo::ProtoFunID_MIN;
const stRetGuildMemInfo_ProtoFunID stRetGuildMemInfo::ProtoFunID_MAX;
const int stRetGuildMemInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGuildMemInfo::kCharIDFieldNumber;
const int stRetGuildMemInfo::kJoinInTimeFieldNumber;
const int stRetGuildMemInfo::kContributeTimeFieldNumber;
const int stRetGuildMemInfo::kTodayContributeFieldNumber;
const int stRetGuildMemInfo::kAllContributeFieldNumber;
const int stRetGuildMemInfo::kLastLoginTimeFieldNumber;
#endif  // !_MSC_VER

stRetGuildMemInfo::stRetGuildMemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGuildMemInfo::InitAsDefaultInstance() {
}

stRetGuildMemInfo::stRetGuildMemInfo(const stRetGuildMemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGuildMemInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  joinintime_ = 0u;
  contributetime_ = 0u;
  todaycontribute_ = 0u;
  allcontribute_ = 0u;
  lastlogintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGuildMemInfo::~stRetGuildMemInfo() {
  SharedDtor();
}

void stRetGuildMemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetGuildMemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGuildMemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildMemInfo_descriptor_;
}

const stRetGuildMemInfo& stRetGuildMemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetGuildMemInfo* stRetGuildMemInfo::default_instance_ = NULL;

stRetGuildMemInfo* stRetGuildMemInfo::New() const {
  return new stRetGuildMemInfo;
}

void stRetGuildMemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    joinintime_ = 0u;
    contributetime_ = 0u;
    todaycontribute_ = 0u;
    allcontribute_ = 0u;
    lastlogintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGuildMemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_joinInTime;
        break;
      }

      // optional uint32 joinInTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_joinInTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &joinintime_)));
          set_has_joinintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contributeTime;
        break;
      }

      // optional uint32 contributeTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contributeTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contributetime_)));
          set_has_contributetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_todayContribute;
        break;
      }

      // optional uint32 todayContribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_todayContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &todaycontribute_)));
          set_has_todaycontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_allContribute;
        break;
      }

      // optional uint32 allContribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &allcontribute_)));
          set_has_allcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastLoginTime;
        break;
      }

      // optional uint32 lastLoginTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGuildMemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 joinInTime = 2;
  if (has_joinintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->joinintime(), output);
  }

  // optional uint32 contributeTime = 3;
  if (has_contributetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contributetime(), output);
  }

  // optional uint32 todayContribute = 4;
  if (has_todaycontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->todaycontribute(), output);
  }

  // optional uint32 allContribute = 5;
  if (has_allcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->allcontribute(), output);
  }

  // optional uint32 lastLoginTime = 6;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->lastlogintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGuildMemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 joinInTime = 2;
  if (has_joinintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->joinintime(), target);
  }

  // optional uint32 contributeTime = 3;
  if (has_contributetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contributetime(), target);
  }

  // optional uint32 todayContribute = 4;
  if (has_todaycontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->todaycontribute(), target);
  }

  // optional uint32 allContribute = 5;
  if (has_allcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->allcontribute(), target);
  }

  // optional uint32 lastLoginTime = 6;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->lastlogintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGuildMemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 joinInTime = 2;
    if (has_joinintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->joinintime());
    }

    // optional uint32 contributeTime = 3;
    if (has_contributetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contributetime());
    }

    // optional uint32 todayContribute = 4;
    if (has_todaycontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->todaycontribute());
    }

    // optional uint32 allContribute = 5;
    if (has_allcontribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->allcontribute());
    }

    // optional uint32 lastLoginTime = 6;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lastlogintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGuildMemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGuildMemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGuildMemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGuildMemInfo::MergeFrom(const stRetGuildMemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_joinintime()) {
      set_joinintime(from.joinintime());
    }
    if (from.has_contributetime()) {
      set_contributetime(from.contributetime());
    }
    if (from.has_todaycontribute()) {
      set_todaycontribute(from.todaycontribute());
    }
    if (from.has_allcontribute()) {
      set_allcontribute(from.allcontribute());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGuildMemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGuildMemInfo::CopyFrom(const stRetGuildMemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGuildMemInfo::IsInitialized() const {

  return true;
}

void stRetGuildMemInfo::Swap(stRetGuildMemInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(joinintime_, other->joinintime_);
    std::swap(contributetime_, other->contributetime_);
    std::swap(todaycontribute_, other->todaycontribute_);
    std::swap(allcontribute_, other->allcontribute_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGuildMemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGuildMemInfo_descriptor_;
  metadata.reflection = stRetGuildMemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynGuildContribute_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildContribute_ProtoModID_descriptor_;
}
bool stSynGuildContribute_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildContribute_ProtoModID stSynGuildContribute::ModID;
const stSynGuildContribute_ProtoModID stSynGuildContribute::ProtoModID_MIN;
const stSynGuildContribute_ProtoModID stSynGuildContribute::ProtoModID_MAX;
const int stSynGuildContribute::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynGuildContribute_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildContribute_ProtoFunID_descriptor_;
}
bool stSynGuildContribute_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 31:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildContribute_ProtoFunID stSynGuildContribute::FunID;
const stSynGuildContribute_ProtoFunID stSynGuildContribute::ProtoFunID_MIN;
const stSynGuildContribute_ProtoFunID stSynGuildContribute::ProtoFunID_MAX;
const int stSynGuildContribute::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynGuildContribute::kNumFieldNumber;
#endif  // !_MSC_VER

stSynGuildContribute::stSynGuildContribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynGuildContribute::InitAsDefaultInstance() {
}

stSynGuildContribute::stSynGuildContribute(const stSynGuildContribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynGuildContribute::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynGuildContribute::~stSynGuildContribute() {
  SharedDtor();
}

void stSynGuildContribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynGuildContribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynGuildContribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildContribute_descriptor_;
}

const stSynGuildContribute& stSynGuildContribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynGuildContribute* stSynGuildContribute::default_instance_ = NULL;

stSynGuildContribute* stSynGuildContribute::New() const {
  return new stSynGuildContribute;
}

void stSynGuildContribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynGuildContribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynGuildContribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynGuildContribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynGuildContribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynGuildContribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynGuildContribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynGuildContribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynGuildContribute::MergeFrom(const stSynGuildContribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynGuildContribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynGuildContribute::CopyFrom(const stSynGuildContribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynGuildContribute::IsInitialized() const {

  return true;
}

void stSynGuildContribute::Swap(stSynGuildContribute* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynGuildContribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynGuildContribute_descriptor_;
  metadata.reflection = stSynGuildContribute_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChgGuildSign_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgGuildSign_ProtoModID_descriptor_;
}
bool stChgGuildSign_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChgGuildSign_ProtoModID stChgGuildSign::ModID;
const stChgGuildSign_ProtoModID stChgGuildSign::ProtoModID_MIN;
const stChgGuildSign_ProtoModID stChgGuildSign::ProtoModID_MAX;
const int stChgGuildSign::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChgGuildSign_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgGuildSign_ProtoFunID_descriptor_;
}
bool stChgGuildSign_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 32:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChgGuildSign_ProtoFunID stChgGuildSign::FunID;
const stChgGuildSign_ProtoFunID stChgGuildSign::ProtoFunID_MIN;
const stChgGuildSign_ProtoFunID stChgGuildSign::ProtoFunID_MAX;
const int stChgGuildSign::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChgGuildSign::kSignFieldNumber;
#endif  // !_MSC_VER

stChgGuildSign::stChgGuildSign()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChgGuildSign::InitAsDefaultInstance() {
}

stChgGuildSign::stChgGuildSign(const stChgGuildSign& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChgGuildSign::SharedCtor() {
  _cached_size_ = 0;
  sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChgGuildSign::~stChgGuildSign() {
  SharedDtor();
}

void stChgGuildSign::SharedDtor() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (this != default_instance_) {
  }
}

void stChgGuildSign::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChgGuildSign::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgGuildSign_descriptor_;
}

const stChgGuildSign& stChgGuildSign::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stChgGuildSign* stChgGuildSign::default_instance_ = NULL;

stChgGuildSign* stChgGuildSign::New() const {
  return new stChgGuildSign;
}

void stChgGuildSign::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sign()) {
      if (sign_ != &::google::protobuf::internal::kEmptyString) {
        sign_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChgGuildSign::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sign = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sign().data(), this->sign().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChgGuildSign::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string sign = 1;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChgGuildSign::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string sign = 1;
  if (has_sign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sign().data(), this->sign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChgGuildSign::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string sign = 1;
    if (has_sign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChgGuildSign::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChgGuildSign* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChgGuildSign*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChgGuildSign::MergeFrom(const stChgGuildSign& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sign()) {
      set_sign(from.sign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChgGuildSign::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChgGuildSign::CopyFrom(const stChgGuildSign& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChgGuildSign::IsInitialized() const {

  return true;
}

void stChgGuildSign::Swap(stChgGuildSign* other) {
  if (other != this) {
    std::swap(sign_, other->sign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChgGuildSign::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChgGuildSign_descriptor_;
  metadata.reflection = stChgGuildSign_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyFireRemainTime_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFireRemainTime_ProtoModID_descriptor_;
}
bool stNotifyFireRemainTime_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFireRemainTime_ProtoModID stNotifyFireRemainTime::ModID;
const stNotifyFireRemainTime_ProtoModID stNotifyFireRemainTime::ProtoModID_MIN;
const stNotifyFireRemainTime_ProtoModID stNotifyFireRemainTime::ProtoModID_MAX;
const int stNotifyFireRemainTime::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyFireRemainTime_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFireRemainTime_ProtoFunID_descriptor_;
}
bool stNotifyFireRemainTime_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 33:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyFireRemainTime_ProtoFunID stNotifyFireRemainTime::FunID;
const stNotifyFireRemainTime_ProtoFunID stNotifyFireRemainTime::ProtoFunID_MIN;
const stNotifyFireRemainTime_ProtoFunID stNotifyFireRemainTime::ProtoFunID_MAX;
const int stNotifyFireRemainTime::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyFireRemainTime::kRemainTimeFieldNumber;
#endif  // !_MSC_VER

stNotifyFireRemainTime::stNotifyFireRemainTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyFireRemainTime::InitAsDefaultInstance() {
}

stNotifyFireRemainTime::stNotifyFireRemainTime(const stNotifyFireRemainTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyFireRemainTime::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyFireRemainTime::~stNotifyFireRemainTime() {
  SharedDtor();
}

void stNotifyFireRemainTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyFireRemainTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyFireRemainTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyFireRemainTime_descriptor_;
}

const stNotifyFireRemainTime& stNotifyFireRemainTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stNotifyFireRemainTime* stNotifyFireRemainTime::default_instance_ = NULL;

stNotifyFireRemainTime* stNotifyFireRemainTime::New() const {
  return new stNotifyFireRemainTime;
}

void stNotifyFireRemainTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    remaintime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyFireRemainTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 remainTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyFireRemainTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->remaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyFireRemainTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 remainTime = 1;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->remaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyFireRemainTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 remainTime = 1;
    if (has_remaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->remaintime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyFireRemainTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyFireRemainTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyFireRemainTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyFireRemainTime::MergeFrom(const stNotifyFireRemainTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyFireRemainTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyFireRemainTime::CopyFrom(const stNotifyFireRemainTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyFireRemainTime::IsInitialized() const {

  return true;
}

void stNotifyFireRemainTime::Swap(stNotifyFireRemainTime* other) {
  if (other != this) {
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyFireRemainTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyFireRemainTime_descriptor_;
  metadata.reflection = stNotifyFireRemainTime_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGuildMemInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildMemInfo_ProtoModID_descriptor_;
}
bool stReqGuildMemInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildMemInfo_ProtoModID stReqGuildMemInfo::ModID;
const stReqGuildMemInfo_ProtoModID stReqGuildMemInfo::ProtoModID_MIN;
const stReqGuildMemInfo_ProtoModID stReqGuildMemInfo::ProtoModID_MAX;
const int stReqGuildMemInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGuildMemInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildMemInfo_ProtoFunID_descriptor_;
}
bool stReqGuildMemInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 34:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildMemInfo_ProtoFunID stReqGuildMemInfo::FunID;
const stReqGuildMemInfo_ProtoFunID stReqGuildMemInfo::ProtoFunID_MIN;
const stReqGuildMemInfo_ProtoFunID stReqGuildMemInfo::ProtoFunID_MAX;
const int stReqGuildMemInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGuildMemInfo::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqGuildMemInfo::stReqGuildMemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGuildMemInfo::InitAsDefaultInstance() {
}

stReqGuildMemInfo::stReqGuildMemInfo(const stReqGuildMemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGuildMemInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGuildMemInfo::~stReqGuildMemInfo() {
  SharedDtor();
}

void stReqGuildMemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGuildMemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGuildMemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildMemInfo_descriptor_;
}

const stReqGuildMemInfo& stReqGuildMemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqGuildMemInfo* stReqGuildMemInfo::default_instance_ = NULL;

stReqGuildMemInfo* stReqGuildMemInfo::New() const {
  return new stReqGuildMemInfo;
}

void stReqGuildMemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGuildMemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGuildMemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGuildMemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGuildMemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGuildMemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGuildMemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGuildMemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGuildMemInfo::MergeFrom(const stReqGuildMemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGuildMemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGuildMemInfo::CopyFrom(const stReqGuildMemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGuildMemInfo::IsInitialized() const {

  return true;
}

void stReqGuildMemInfo::Swap(stReqGuildMemInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGuildMemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGuildMemInfo_descriptor_;
  metadata.reflection = stReqGuildMemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelFireGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelFireGuild_ProtoModID_descriptor_;
}
bool stCancelFireGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelFireGuild_ProtoModID stCancelFireGuild::ModID;
const stCancelFireGuild_ProtoModID stCancelFireGuild::ProtoModID_MIN;
const stCancelFireGuild_ProtoModID stCancelFireGuild::ProtoModID_MAX;
const int stCancelFireGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelFireGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelFireGuild_ProtoFunID_descriptor_;
}
bool stCancelFireGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 35:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelFireGuild_ProtoFunID stCancelFireGuild::FunID;
const stCancelFireGuild_ProtoFunID stCancelFireGuild::ProtoFunID_MIN;
const stCancelFireGuild_ProtoFunID stCancelFireGuild::ProtoFunID_MAX;
const int stCancelFireGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelFireGuild::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stCancelFireGuild::stCancelFireGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelFireGuild::InitAsDefaultInstance() {
}

stCancelFireGuild::stCancelFireGuild(const stCancelFireGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelFireGuild::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelFireGuild::~stCancelFireGuild() {
  SharedDtor();
}

void stCancelFireGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelFireGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelFireGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelFireGuild_descriptor_;
}

const stCancelFireGuild& stCancelFireGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stCancelFireGuild* stCancelFireGuild::default_instance_ = NULL;

stCancelFireGuild* stCancelFireGuild::New() const {
  return new stCancelFireGuild;
}

void stCancelFireGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelFireGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelFireGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelFireGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelFireGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelFireGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelFireGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelFireGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelFireGuild::MergeFrom(const stCancelFireGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelFireGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelFireGuild::CopyFrom(const stCancelFireGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelFireGuild::IsInitialized() const {

  return true;
}

void stCancelFireGuild::Swap(stCancelFireGuild* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelFireGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelFireGuild_descriptor_;
  metadata.reflection = stCancelFireGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelFireGuildResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelFireGuildResult_eResult_descriptor_;
}
bool stCancelFireGuildResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelFireGuildResult_eResult stCancelFireGuildResult::eSUCCESS;
const stCancelFireGuildResult_eResult stCancelFireGuildResult::eHAS_NOT_POWER;
const stCancelFireGuildResult_eResult stCancelFireGuildResult::eResult_MIN;
const stCancelFireGuildResult_eResult stCancelFireGuildResult::eResult_MAX;
const int stCancelFireGuildResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelFireGuildResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelFireGuildResult_ProtoModID_descriptor_;
}
bool stCancelFireGuildResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelFireGuildResult_ProtoModID stCancelFireGuildResult::ModID;
const stCancelFireGuildResult_ProtoModID stCancelFireGuildResult::ProtoModID_MIN;
const stCancelFireGuildResult_ProtoModID stCancelFireGuildResult::ProtoModID_MAX;
const int stCancelFireGuildResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelFireGuildResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelFireGuildResult_ProtoFunID_descriptor_;
}
bool stCancelFireGuildResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 36:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelFireGuildResult_ProtoFunID stCancelFireGuildResult::FunID;
const stCancelFireGuildResult_ProtoFunID stCancelFireGuildResult::ProtoFunID_MIN;
const stCancelFireGuildResult_ProtoFunID stCancelFireGuildResult::ProtoFunID_MAX;
const int stCancelFireGuildResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelFireGuildResult::kResultFieldNumber;
#endif  // !_MSC_VER

stCancelFireGuildResult::stCancelFireGuildResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelFireGuildResult::InitAsDefaultInstance() {
}

stCancelFireGuildResult::stCancelFireGuildResult(const stCancelFireGuildResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelFireGuildResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelFireGuildResult::~stCancelFireGuildResult() {
  SharedDtor();
}

void stCancelFireGuildResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelFireGuildResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelFireGuildResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelFireGuildResult_descriptor_;
}

const stCancelFireGuildResult& stCancelFireGuildResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stCancelFireGuildResult* stCancelFireGuildResult::default_instance_ = NULL;

stCancelFireGuildResult* stCancelFireGuildResult::New() const {
  return new stCancelFireGuildResult;
}

void stCancelFireGuildResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelFireGuildResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stCancelFireGuildResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stCancelFireGuildResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stCancelFireGuildResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelFireGuildResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stCancelFireGuildResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelFireGuildResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stCancelFireGuildResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelFireGuildResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stCancelFireGuildResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelFireGuildResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelFireGuildResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelFireGuildResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelFireGuildResult::MergeFrom(const stCancelFireGuildResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelFireGuildResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelFireGuildResult::CopyFrom(const stCancelFireGuildResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelFireGuildResult::IsInitialized() const {

  return true;
}

void stCancelFireGuildResult::Swap(stCancelFireGuildResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelFireGuildResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelFireGuildResult_descriptor_;
  metadata.reflection = stCancelFireGuildResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelJoinInGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelJoinInGuild_ProtoModID_descriptor_;
}
bool stCancelJoinInGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelJoinInGuild_ProtoModID stCancelJoinInGuild::ModID;
const stCancelJoinInGuild_ProtoModID stCancelJoinInGuild::ProtoModID_MIN;
const stCancelJoinInGuild_ProtoModID stCancelJoinInGuild::ProtoModID_MAX;
const int stCancelJoinInGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelJoinInGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelJoinInGuild_ProtoFunID_descriptor_;
}
bool stCancelJoinInGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 37:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelJoinInGuild_ProtoFunID stCancelJoinInGuild::FunID;
const stCancelJoinInGuild_ProtoFunID stCancelJoinInGuild::ProtoFunID_MIN;
const stCancelJoinInGuild_ProtoFunID stCancelJoinInGuild::ProtoFunID_MAX;
const int stCancelJoinInGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelJoinInGuild::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stCancelJoinInGuild::stCancelJoinInGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelJoinInGuild::InitAsDefaultInstance() {
}

stCancelJoinInGuild::stCancelJoinInGuild(const stCancelJoinInGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelJoinInGuild::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelJoinInGuild::~stCancelJoinInGuild() {
  SharedDtor();
}

void stCancelJoinInGuild::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelJoinInGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelJoinInGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelJoinInGuild_descriptor_;
}

const stCancelJoinInGuild& stCancelJoinInGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stCancelJoinInGuild* stCancelJoinInGuild::default_instance_ = NULL;

stCancelJoinInGuild* stCancelJoinInGuild::New() const {
  return new stCancelJoinInGuild;
}

void stCancelJoinInGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelJoinInGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelJoinInGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelJoinInGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelJoinInGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelJoinInGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelJoinInGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelJoinInGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelJoinInGuild::MergeFrom(const stCancelJoinInGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelJoinInGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelJoinInGuild::CopyFrom(const stCancelJoinInGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelJoinInGuild::IsInitialized() const {

  return true;
}

void stCancelJoinInGuild::Swap(stCancelJoinInGuild* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelJoinInGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelJoinInGuild_descriptor_;
  metadata.reflection = stCancelJoinInGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stCancelJoinInGuildResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelJoinInGuildResult_eResult_descriptor_;
}
bool stCancelJoinInGuildResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelJoinInGuildResult_eResult stCancelJoinInGuildResult::eSUCCESS;
const stCancelJoinInGuildResult_eResult stCancelJoinInGuildResult::eFAIL;
const stCancelJoinInGuildResult_eResult stCancelJoinInGuildResult::eResult_MIN;
const stCancelJoinInGuildResult_eResult stCancelJoinInGuildResult::eResult_MAX;
const int stCancelJoinInGuildResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelJoinInGuildResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelJoinInGuildResult_ProtoModID_descriptor_;
}
bool stCancelJoinInGuildResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelJoinInGuildResult_ProtoModID stCancelJoinInGuildResult::ModID;
const stCancelJoinInGuildResult_ProtoModID stCancelJoinInGuildResult::ProtoModID_MIN;
const stCancelJoinInGuildResult_ProtoModID stCancelJoinInGuildResult::ProtoModID_MAX;
const int stCancelJoinInGuildResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stCancelJoinInGuildResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelJoinInGuildResult_ProtoFunID_descriptor_;
}
bool stCancelJoinInGuildResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 38:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stCancelJoinInGuildResult_ProtoFunID stCancelJoinInGuildResult::FunID;
const stCancelJoinInGuildResult_ProtoFunID stCancelJoinInGuildResult::ProtoFunID_MIN;
const stCancelJoinInGuildResult_ProtoFunID stCancelJoinInGuildResult::ProtoFunID_MAX;
const int stCancelJoinInGuildResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stCancelJoinInGuildResult::kGuildIDFieldNumber;
const int stCancelJoinInGuildResult::kResultFieldNumber;
#endif  // !_MSC_VER

stCancelJoinInGuildResult::stCancelJoinInGuildResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCancelJoinInGuildResult::InitAsDefaultInstance() {
}

stCancelJoinInGuildResult::stCancelJoinInGuildResult(const stCancelJoinInGuildResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCancelJoinInGuildResult::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCancelJoinInGuildResult::~stCancelJoinInGuildResult() {
  SharedDtor();
}

void stCancelJoinInGuildResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCancelJoinInGuildResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCancelJoinInGuildResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCancelJoinInGuildResult_descriptor_;
}

const stCancelJoinInGuildResult& stCancelJoinInGuildResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stCancelJoinInGuildResult* stCancelJoinInGuildResult::default_instance_ = NULL;

stCancelJoinInGuildResult* stCancelJoinInGuildResult::New() const {
  return new stCancelJoinInGuildResult;
}

void stCancelJoinInGuildResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCancelJoinInGuildResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .GuildProto.stCancelJoinInGuildResult.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stCancelJoinInGuildResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stCancelJoinInGuildResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCancelJoinInGuildResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  // optional .GuildProto.stCancelJoinInGuildResult.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCancelJoinInGuildResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  // optional .GuildProto.stCancelJoinInGuildResult.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCancelJoinInGuildResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional .GuildProto.stCancelJoinInGuildResult.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCancelJoinInGuildResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCancelJoinInGuildResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCancelJoinInGuildResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCancelJoinInGuildResult::MergeFrom(const stCancelJoinInGuildResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCancelJoinInGuildResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCancelJoinInGuildResult::CopyFrom(const stCancelJoinInGuildResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCancelJoinInGuildResult::IsInitialized() const {

  return true;
}

void stCancelJoinInGuildResult::Swap(stCancelJoinInGuildResult* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCancelJoinInGuildResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCancelJoinInGuildResult_descriptor_;
  metadata.reflection = stCancelJoinInGuildResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDonate_eType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDonate_eType_descriptor_;
}
bool stReqDonate_eType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDonate_eType stReqDonate::eType1;
const stReqDonate_eType stReqDonate::eType2;
const stReqDonate_eType stReqDonate::eType3;
const stReqDonate_eType stReqDonate::eType_MIN;
const stReqDonate_eType stReqDonate::eType_MAX;
const int stReqDonate::eType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDonate_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDonate_ProtoModID_descriptor_;
}
bool stReqDonate_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDonate_ProtoModID stReqDonate::ModID;
const stReqDonate_ProtoModID stReqDonate::ProtoModID_MIN;
const stReqDonate_ProtoModID stReqDonate::ProtoModID_MAX;
const int stReqDonate::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDonate_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDonate_ProtoFunID_descriptor_;
}
bool stReqDonate_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 39:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDonate_ProtoFunID stReqDonate::FunID;
const stReqDonate_ProtoFunID stReqDonate::ProtoFunID_MIN;
const stReqDonate_ProtoFunID stReqDonate::ProtoFunID_MAX;
const int stReqDonate::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDonate::kTypeFieldNumber;
#endif  // !_MSC_VER

stReqDonate::stReqDonate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDonate::InitAsDefaultInstance() {
}

stReqDonate::stReqDonate(const stReqDonate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDonate::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDonate::~stReqDonate() {
  SharedDtor();
}

void stReqDonate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDonate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDonate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDonate_descriptor_;
}

const stReqDonate& stReqDonate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqDonate* stReqDonate::default_instance_ = NULL;

stReqDonate* stReqDonate::New() const {
  return new stReqDonate;
}

void stReqDonate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDonate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stReqDonate.eType type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stReqDonate_eType_IsValid(value)) {
            set_type(static_cast< ::GuildProto::stReqDonate_eType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDonate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stReqDonate.eType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDonate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stReqDonate.eType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDonate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stReqDonate.eType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDonate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDonate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDonate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDonate::MergeFrom(const stReqDonate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDonate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDonate::CopyFrom(const stReqDonate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDonate::IsInitialized() const {

  return true;
}

void stReqDonate::Swap(stReqDonate* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDonate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDonate_descriptor_;
  metadata.reflection = stReqDonate_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stDonateResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDonateResult_eResult_descriptor_;
}
bool stDonateResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDonateResult_eResult stDonateResult::eSUCCESS;
const stDonateResult_eResult stDonateResult::eMONEY_NOT_ENOUGH;
const stDonateResult_eResult stDonateResult::eINNER_ERROR;
const stDonateResult_eResult stDonateResult::eHAS_NO_GUILD;
const stDonateResult_eResult stDonateResult::eHAS_DONATE;
const stDonateResult_eResult stDonateResult::eHAS_NO_VIPRIGHT;
const stDonateResult_eResult stDonateResult::eResult_MIN;
const stDonateResult_eResult stDonateResult::eResult_MAX;
const int stDonateResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDonateResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDonateResult_ProtoModID_descriptor_;
}
bool stDonateResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDonateResult_ProtoModID stDonateResult::ModID;
const stDonateResult_ProtoModID stDonateResult::ProtoModID_MIN;
const stDonateResult_ProtoModID stDonateResult::ProtoModID_MAX;
const int stDonateResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stDonateResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDonateResult_ProtoFunID_descriptor_;
}
bool stDonateResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 40:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stDonateResult_ProtoFunID stDonateResult::FunID;
const stDonateResult_ProtoFunID stDonateResult::ProtoFunID_MIN;
const stDonateResult_ProtoFunID stDonateResult::ProtoFunID_MAX;
const int stDonateResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stDonateResult::kResultFieldNumber;
#endif  // !_MSC_VER

stDonateResult::stDonateResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDonateResult::InitAsDefaultInstance() {
}

stDonateResult::stDonateResult(const stDonateResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDonateResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDonateResult::~stDonateResult() {
  SharedDtor();
}

void stDonateResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDonateResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDonateResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDonateResult_descriptor_;
}

const stDonateResult& stDonateResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stDonateResult* stDonateResult::default_instance_ = NULL;

stDonateResult* stDonateResult::New() const {
  return new stDonateResult;
}

void stDonateResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDonateResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stDonateResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stDonateResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stDonateResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDonateResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stDonateResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDonateResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stDonateResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDonateResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stDonateResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDonateResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDonateResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDonateResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDonateResult::MergeFrom(const stDonateResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDonateResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDonateResult::CopyFrom(const stDonateResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDonateResult::IsInitialized() const {

  return true;
}

void stDonateResult::Swap(stDonateResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDonateResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDonateResult_descriptor_;
  metadata.reflection = stDonateResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLevelUpHallLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelUpHallLv_ProtoModID_descriptor_;
}
bool stReqLevelUpHallLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelUpHallLv_ProtoModID stReqLevelUpHallLv::ModID;
const stReqLevelUpHallLv_ProtoModID stReqLevelUpHallLv::ProtoModID_MIN;
const stReqLevelUpHallLv_ProtoModID stReqLevelUpHallLv::ProtoModID_MAX;
const int stReqLevelUpHallLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLevelUpHallLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelUpHallLv_ProtoFunID_descriptor_;
}
bool stReqLevelUpHallLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 41:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelUpHallLv_ProtoFunID stReqLevelUpHallLv::FunID;
const stReqLevelUpHallLv_ProtoFunID stReqLevelUpHallLv::ProtoFunID_MIN;
const stReqLevelUpHallLv_ProtoFunID stReqLevelUpHallLv::ProtoFunID_MAX;
const int stReqLevelUpHallLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLevelUpHallLv::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stReqLevelUpHallLv::stReqLevelUpHallLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLevelUpHallLv::InitAsDefaultInstance() {
}

stReqLevelUpHallLv::stReqLevelUpHallLv(const stReqLevelUpHallLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLevelUpHallLv::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLevelUpHallLv::~stReqLevelUpHallLv() {
  SharedDtor();
}

void stReqLevelUpHallLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLevelUpHallLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLevelUpHallLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelUpHallLv_descriptor_;
}

const stReqLevelUpHallLv& stReqLevelUpHallLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqLevelUpHallLv* stReqLevelUpHallLv::default_instance_ = NULL;

stReqLevelUpHallLv* stReqLevelUpHallLv::New() const {
  return new stReqLevelUpHallLv;
}

void stReqLevelUpHallLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLevelUpHallLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLevelUpHallLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLevelUpHallLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLevelUpHallLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLevelUpHallLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLevelUpHallLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLevelUpHallLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLevelUpHallLv::MergeFrom(const stReqLevelUpHallLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLevelUpHallLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLevelUpHallLv::CopyFrom(const stReqLevelUpHallLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLevelUpHallLv::IsInitialized() const {

  return true;
}

void stReqLevelUpHallLv::Swap(stReqLevelUpHallLv* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLevelUpHallLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLevelUpHallLv_descriptor_;
  metadata.reflection = stReqLevelUpHallLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLevelUpHallLvResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpHallLvResult_eResult_descriptor_;
}
bool stLevelUpHallLvResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelUpHallLvResult_eResult stLevelUpHallLvResult::eSUCCESS;
const stLevelUpHallLvResult_eResult stLevelUpHallLvResult::eCONTRIBUTE_NOT_ENOGUH;
const stLevelUpHallLvResult_eResult stLevelUpHallLvResult::eHAS_NOT_RIGHT;
const stLevelUpHallLvResult_eResult stLevelUpHallLvResult::eINNER_ERROR;
const stLevelUpHallLvResult_eResult stLevelUpHallLvResult::eResult_MIN;
const stLevelUpHallLvResult_eResult stLevelUpHallLvResult::eResult_MAX;
const int stLevelUpHallLvResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelUpHallLvResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpHallLvResult_ProtoModID_descriptor_;
}
bool stLevelUpHallLvResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelUpHallLvResult_ProtoModID stLevelUpHallLvResult::ModID;
const stLevelUpHallLvResult_ProtoModID stLevelUpHallLvResult::ProtoModID_MIN;
const stLevelUpHallLvResult_ProtoModID stLevelUpHallLvResult::ProtoModID_MAX;
const int stLevelUpHallLvResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelUpHallLvResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpHallLvResult_ProtoFunID_descriptor_;
}
bool stLevelUpHallLvResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 42:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelUpHallLvResult_ProtoFunID stLevelUpHallLvResult::FunID;
const stLevelUpHallLvResult_ProtoFunID stLevelUpHallLvResult::ProtoFunID_MIN;
const stLevelUpHallLvResult_ProtoFunID stLevelUpHallLvResult::ProtoFunID_MAX;
const int stLevelUpHallLvResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLevelUpHallLvResult::kResultFieldNumber;
#endif  // !_MSC_VER

stLevelUpHallLvResult::stLevelUpHallLvResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLevelUpHallLvResult::InitAsDefaultInstance() {
}

stLevelUpHallLvResult::stLevelUpHallLvResult(const stLevelUpHallLvResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLevelUpHallLvResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLevelUpHallLvResult::~stLevelUpHallLvResult() {
  SharedDtor();
}

void stLevelUpHallLvResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLevelUpHallLvResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLevelUpHallLvResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpHallLvResult_descriptor_;
}

const stLevelUpHallLvResult& stLevelUpHallLvResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stLevelUpHallLvResult* stLevelUpHallLvResult::default_instance_ = NULL;

stLevelUpHallLvResult* stLevelUpHallLvResult::New() const {
  return new stLevelUpHallLvResult;
}

void stLevelUpHallLvResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLevelUpHallLvResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stLevelUpHallLvResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stLevelUpHallLvResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stLevelUpHallLvResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLevelUpHallLvResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stLevelUpHallLvResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLevelUpHallLvResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stLevelUpHallLvResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLevelUpHallLvResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stLevelUpHallLvResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLevelUpHallLvResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLevelUpHallLvResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLevelUpHallLvResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLevelUpHallLvResult::MergeFrom(const stLevelUpHallLvResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLevelUpHallLvResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLevelUpHallLvResult::CopyFrom(const stLevelUpHallLvResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLevelUpHallLvResult::IsInitialized() const {

  return true;
}

void stLevelUpHallLvResult::Swap(stLevelUpHallLvResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLevelUpHallLvResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLevelUpHallLvResult_descriptor_;
  metadata.reflection = stLevelUpHallLvResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynHallLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynHallLv_ProtoModID_descriptor_;
}
bool stSynHallLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynHallLv_ProtoModID stSynHallLv::ModID;
const stSynHallLv_ProtoModID stSynHallLv::ProtoModID_MIN;
const stSynHallLv_ProtoModID stSynHallLv::ProtoModID_MAX;
const int stSynHallLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynHallLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynHallLv_ProtoFunID_descriptor_;
}
bool stSynHallLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 43:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynHallLv_ProtoFunID stSynHallLv::FunID;
const stSynHallLv_ProtoFunID stSynHallLv::ProtoFunID_MIN;
const stSynHallLv_ProtoFunID stSynHallLv::ProtoFunID_MAX;
const int stSynHallLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynHallLv::kLvFieldNumber;
#endif  // !_MSC_VER

stSynHallLv::stSynHallLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynHallLv::InitAsDefaultInstance() {
}

stSynHallLv::stSynHallLv(const stSynHallLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynHallLv::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynHallLv::~stSynHallLv() {
  SharedDtor();
}

void stSynHallLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynHallLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynHallLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynHallLv_descriptor_;
}

const stSynHallLv& stSynHallLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynHallLv* stSynHallLv::default_instance_ = NULL;

stSynHallLv* stSynHallLv::New() const {
  return new stSynHallLv;
}

void stSynHallLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynHallLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynHallLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynHallLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynHallLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynHallLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynHallLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynHallLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynHallLv::MergeFrom(const stSynHallLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynHallLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynHallLv::CopyFrom(const stSynHallLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynHallLv::IsInitialized() const {

  return true;
}

void stSynHallLv::Swap(stSynHallLv* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynHallLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynHallLv_descriptor_;
  metadata.reflection = stSynHallLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPrayBuildingLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPrayBuildingLv_ProtoModID_descriptor_;
}
bool stReqPrayBuildingLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPrayBuildingLv_ProtoModID stReqPrayBuildingLv::ModID;
const stReqPrayBuildingLv_ProtoModID stReqPrayBuildingLv::ProtoModID_MIN;
const stReqPrayBuildingLv_ProtoModID stReqPrayBuildingLv::ProtoModID_MAX;
const int stReqPrayBuildingLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPrayBuildingLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPrayBuildingLv_ProtoFunID_descriptor_;
}
bool stReqPrayBuildingLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 44:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPrayBuildingLv_ProtoFunID stReqPrayBuildingLv::FunID;
const stReqPrayBuildingLv_ProtoFunID stReqPrayBuildingLv::ProtoFunID_MIN;
const stReqPrayBuildingLv_ProtoFunID stReqPrayBuildingLv::ProtoFunID_MAX;
const int stReqPrayBuildingLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPrayBuildingLv::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stReqPrayBuildingLv::stReqPrayBuildingLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPrayBuildingLv::InitAsDefaultInstance() {
}

stReqPrayBuildingLv::stReqPrayBuildingLv(const stReqPrayBuildingLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPrayBuildingLv::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPrayBuildingLv::~stReqPrayBuildingLv() {
  SharedDtor();
}

void stReqPrayBuildingLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqPrayBuildingLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPrayBuildingLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPrayBuildingLv_descriptor_;
}

const stReqPrayBuildingLv& stReqPrayBuildingLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqPrayBuildingLv* stReqPrayBuildingLv::default_instance_ = NULL;

stReqPrayBuildingLv* stReqPrayBuildingLv::New() const {
  return new stReqPrayBuildingLv;
}

void stReqPrayBuildingLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPrayBuildingLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPrayBuildingLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPrayBuildingLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPrayBuildingLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPrayBuildingLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPrayBuildingLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPrayBuildingLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPrayBuildingLv::MergeFrom(const stReqPrayBuildingLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPrayBuildingLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPrayBuildingLv::CopyFrom(const stReqPrayBuildingLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPrayBuildingLv::IsInitialized() const {

  return true;
}

void stReqPrayBuildingLv::Swap(stReqPrayBuildingLv* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPrayBuildingLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPrayBuildingLv_descriptor_;
  metadata.reflection = stReqPrayBuildingLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPrayBuildingLvResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrayBuildingLvResult_eResult_descriptor_;
}
bool stPrayBuildingLvResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPrayBuildingLvResult_eResult stPrayBuildingLvResult::eSUCCESS;
const stPrayBuildingLvResult_eResult stPrayBuildingLvResult::eCONTRIBUTE_NOT_ENOGUH;
const stPrayBuildingLvResult_eResult stPrayBuildingLvResult::eHAS_NOT_RIGHT;
const stPrayBuildingLvResult_eResult stPrayBuildingLvResult::eINNER_ERROR;
const stPrayBuildingLvResult_eResult stPrayBuildingLvResult::eHALL_LV_TOO_LOW;
const stPrayBuildingLvResult_eResult stPrayBuildingLvResult::eResult_MIN;
const stPrayBuildingLvResult_eResult stPrayBuildingLvResult::eResult_MAX;
const int stPrayBuildingLvResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPrayBuildingLvResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrayBuildingLvResult_ProtoModID_descriptor_;
}
bool stPrayBuildingLvResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPrayBuildingLvResult_ProtoModID stPrayBuildingLvResult::ModID;
const stPrayBuildingLvResult_ProtoModID stPrayBuildingLvResult::ProtoModID_MIN;
const stPrayBuildingLvResult_ProtoModID stPrayBuildingLvResult::ProtoModID_MAX;
const int stPrayBuildingLvResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPrayBuildingLvResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrayBuildingLvResult_ProtoFunID_descriptor_;
}
bool stPrayBuildingLvResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 45:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPrayBuildingLvResult_ProtoFunID stPrayBuildingLvResult::FunID;
const stPrayBuildingLvResult_ProtoFunID stPrayBuildingLvResult::ProtoFunID_MIN;
const stPrayBuildingLvResult_ProtoFunID stPrayBuildingLvResult::ProtoFunID_MAX;
const int stPrayBuildingLvResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPrayBuildingLvResult::kResultFieldNumber;
#endif  // !_MSC_VER

stPrayBuildingLvResult::stPrayBuildingLvResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPrayBuildingLvResult::InitAsDefaultInstance() {
}

stPrayBuildingLvResult::stPrayBuildingLvResult(const stPrayBuildingLvResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPrayBuildingLvResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPrayBuildingLvResult::~stPrayBuildingLvResult() {
  SharedDtor();
}

void stPrayBuildingLvResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stPrayBuildingLvResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPrayBuildingLvResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrayBuildingLvResult_descriptor_;
}

const stPrayBuildingLvResult& stPrayBuildingLvResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stPrayBuildingLvResult* stPrayBuildingLvResult::default_instance_ = NULL;

stPrayBuildingLvResult* stPrayBuildingLvResult::New() const {
  return new stPrayBuildingLvResult;
}

void stPrayBuildingLvResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPrayBuildingLvResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stPrayBuildingLvResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stPrayBuildingLvResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stPrayBuildingLvResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPrayBuildingLvResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stPrayBuildingLvResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPrayBuildingLvResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stPrayBuildingLvResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPrayBuildingLvResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stPrayBuildingLvResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPrayBuildingLvResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPrayBuildingLvResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPrayBuildingLvResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPrayBuildingLvResult::MergeFrom(const stPrayBuildingLvResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPrayBuildingLvResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPrayBuildingLvResult::CopyFrom(const stPrayBuildingLvResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPrayBuildingLvResult::IsInitialized() const {

  return true;
}

void stPrayBuildingLvResult::Swap(stPrayBuildingLvResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPrayBuildingLvResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPrayBuildingLvResult_descriptor_;
  metadata.reflection = stPrayBuildingLvResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynPrayBuildingLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPrayBuildingLv_ProtoModID_descriptor_;
}
bool stSynPrayBuildingLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynPrayBuildingLv_ProtoModID stSynPrayBuildingLv::ModID;
const stSynPrayBuildingLv_ProtoModID stSynPrayBuildingLv::ProtoModID_MIN;
const stSynPrayBuildingLv_ProtoModID stSynPrayBuildingLv::ProtoModID_MAX;
const int stSynPrayBuildingLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynPrayBuildingLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPrayBuildingLv_ProtoFunID_descriptor_;
}
bool stSynPrayBuildingLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 46:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynPrayBuildingLv_ProtoFunID stSynPrayBuildingLv::FunID;
const stSynPrayBuildingLv_ProtoFunID stSynPrayBuildingLv::ProtoFunID_MIN;
const stSynPrayBuildingLv_ProtoFunID stSynPrayBuildingLv::ProtoFunID_MAX;
const int stSynPrayBuildingLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynPrayBuildingLv::kLvFieldNumber;
#endif  // !_MSC_VER

stSynPrayBuildingLv::stSynPrayBuildingLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynPrayBuildingLv::InitAsDefaultInstance() {
}

stSynPrayBuildingLv::stSynPrayBuildingLv(const stSynPrayBuildingLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynPrayBuildingLv::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynPrayBuildingLv::~stSynPrayBuildingLv() {
  SharedDtor();
}

void stSynPrayBuildingLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynPrayBuildingLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynPrayBuildingLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynPrayBuildingLv_descriptor_;
}

const stSynPrayBuildingLv& stSynPrayBuildingLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynPrayBuildingLv* stSynPrayBuildingLv::default_instance_ = NULL;

stSynPrayBuildingLv* stSynPrayBuildingLv::New() const {
  return new stSynPrayBuildingLv;
}

void stSynPrayBuildingLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynPrayBuildingLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynPrayBuildingLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynPrayBuildingLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynPrayBuildingLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynPrayBuildingLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynPrayBuildingLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynPrayBuildingLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynPrayBuildingLv::MergeFrom(const stSynPrayBuildingLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynPrayBuildingLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynPrayBuildingLv::CopyFrom(const stSynPrayBuildingLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynPrayBuildingLv::IsInitialized() const {

  return true;
}

void stSynPrayBuildingLv::Swap(stSynPrayBuildingLv* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynPrayBuildingLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynPrayBuildingLv_descriptor_;
  metadata.reflection = stSynPrayBuildingLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqPray_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPray_ProtoModID_descriptor_;
}
bool stReqPray_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPray_ProtoModID stReqPray::ModID;
const stReqPray_ProtoModID stReqPray::ProtoModID_MIN;
const stReqPray_ProtoModID stReqPray::ProtoModID_MAX;
const int stReqPray::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqPray_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPray_ProtoFunID_descriptor_;
}
bool stReqPray_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 47:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqPray_ProtoFunID stReqPray::FunID;
const stReqPray_ProtoFunID stReqPray::ProtoFunID_MIN;
const stReqPray_ProtoFunID stReqPray::ProtoFunID_MAX;
const int stReqPray::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqPray::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stReqPray::stReqPray()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqPray::InitAsDefaultInstance() {
}

stReqPray::stReqPray(const stReqPray& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqPray::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqPray::~stReqPray() {
  SharedDtor();
}

void stReqPray::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqPray::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqPray::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqPray_descriptor_;
}

const stReqPray& stReqPray::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqPray* stReqPray::default_instance_ = NULL;

stReqPray* stReqPray::New() const {
  return new stReqPray;
}

void stReqPray::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqPray::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqPray::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqPray::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqPray::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqPray::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqPray* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqPray*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqPray::MergeFrom(const stReqPray& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqPray::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqPray::CopyFrom(const stReqPray& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqPray::IsInitialized() const {

  return true;
}

void stReqPray::Swap(stReqPray* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqPray::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqPray_descriptor_;
  metadata.reflection = stReqPray_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stPrayResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrayResult_eResult_descriptor_;
}
bool stPrayResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPrayResult_eResult stPrayResult::eSUCCESS;
const stPrayResult_eResult stPrayResult::eHAS_PRAY;
const stPrayResult_eResult stPrayResult::ePRAY_NUM_OUT;
const stPrayResult_eResult stPrayResult::eCANNT_PRAY;
const stPrayResult_eResult stPrayResult::eResult_MIN;
const stPrayResult_eResult stPrayResult::eResult_MAX;
const int stPrayResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPrayResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrayResult_ProtoModID_descriptor_;
}
bool stPrayResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPrayResult_ProtoModID stPrayResult::ModID;
const stPrayResult_ProtoModID stPrayResult::ProtoModID_MIN;
const stPrayResult_ProtoModID stPrayResult::ProtoModID_MAX;
const int stPrayResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stPrayResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrayResult_ProtoFunID_descriptor_;
}
bool stPrayResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 48:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stPrayResult_ProtoFunID stPrayResult::FunID;
const stPrayResult_ProtoFunID stPrayResult::ProtoFunID_MIN;
const stPrayResult_ProtoFunID stPrayResult::ProtoFunID_MAX;
const int stPrayResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stPrayResult::kResultFieldNumber;
#endif  // !_MSC_VER

stPrayResult::stPrayResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stPrayResult::InitAsDefaultInstance() {
}

stPrayResult::stPrayResult(const stPrayResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stPrayResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stPrayResult::~stPrayResult() {
  SharedDtor();
}

void stPrayResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stPrayResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stPrayResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stPrayResult_descriptor_;
}

const stPrayResult& stPrayResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stPrayResult* stPrayResult::default_instance_ = NULL;

stPrayResult* stPrayResult::New() const {
  return new stPrayResult;
}

void stPrayResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stPrayResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stPrayResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stPrayResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stPrayResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stPrayResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stPrayResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stPrayResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stPrayResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stPrayResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stPrayResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stPrayResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stPrayResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stPrayResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stPrayResult::MergeFrom(const stPrayResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stPrayResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stPrayResult::CopyFrom(const stPrayResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stPrayResult::IsInitialized() const {

  return true;
}

void stPrayResult::Swap(stPrayResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stPrayResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stPrayResult_descriptor_;
  metadata.reflection = stPrayResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLevelUpShopBuildingLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelUpShopBuildingLv_ProtoModID_descriptor_;
}
bool stReqLevelUpShopBuildingLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelUpShopBuildingLv_ProtoModID stReqLevelUpShopBuildingLv::ModID;
const stReqLevelUpShopBuildingLv_ProtoModID stReqLevelUpShopBuildingLv::ProtoModID_MIN;
const stReqLevelUpShopBuildingLv_ProtoModID stReqLevelUpShopBuildingLv::ProtoModID_MAX;
const int stReqLevelUpShopBuildingLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLevelUpShopBuildingLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelUpShopBuildingLv_ProtoFunID_descriptor_;
}
bool stReqLevelUpShopBuildingLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 49:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelUpShopBuildingLv_ProtoFunID stReqLevelUpShopBuildingLv::FunID;
const stReqLevelUpShopBuildingLv_ProtoFunID stReqLevelUpShopBuildingLv::ProtoFunID_MIN;
const stReqLevelUpShopBuildingLv_ProtoFunID stReqLevelUpShopBuildingLv::ProtoFunID_MAX;
const int stReqLevelUpShopBuildingLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLevelUpShopBuildingLv::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stReqLevelUpShopBuildingLv::stReqLevelUpShopBuildingLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLevelUpShopBuildingLv::InitAsDefaultInstance() {
}

stReqLevelUpShopBuildingLv::stReqLevelUpShopBuildingLv(const stReqLevelUpShopBuildingLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLevelUpShopBuildingLv::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLevelUpShopBuildingLv::~stReqLevelUpShopBuildingLv() {
  SharedDtor();
}

void stReqLevelUpShopBuildingLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLevelUpShopBuildingLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLevelUpShopBuildingLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelUpShopBuildingLv_descriptor_;
}

const stReqLevelUpShopBuildingLv& stReqLevelUpShopBuildingLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqLevelUpShopBuildingLv* stReqLevelUpShopBuildingLv::default_instance_ = NULL;

stReqLevelUpShopBuildingLv* stReqLevelUpShopBuildingLv::New() const {
  return new stReqLevelUpShopBuildingLv;
}

void stReqLevelUpShopBuildingLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLevelUpShopBuildingLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLevelUpShopBuildingLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLevelUpShopBuildingLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLevelUpShopBuildingLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLevelUpShopBuildingLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLevelUpShopBuildingLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLevelUpShopBuildingLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLevelUpShopBuildingLv::MergeFrom(const stReqLevelUpShopBuildingLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLevelUpShopBuildingLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLevelUpShopBuildingLv::CopyFrom(const stReqLevelUpShopBuildingLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLevelUpShopBuildingLv::IsInitialized() const {

  return true;
}

void stReqLevelUpShopBuildingLv::Swap(stReqLevelUpShopBuildingLv* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLevelUpShopBuildingLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLevelUpShopBuildingLv_descriptor_;
  metadata.reflection = stReqLevelUpShopBuildingLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLevelUpShopBuildingLvResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpShopBuildingLvResult_eResult_descriptor_;
}
bool stLevelUpShopBuildingLvResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult::eSUCCESS;
const stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult::eHAS_NO_RIGHT;
const stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult::eCONTRIBUTE_NOT_ENOUGH;
const stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult::eINNER_ERROR;
const stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult::eHALL_LV_TOO_LOW;
const stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult::eResult_MIN;
const stLevelUpShopBuildingLvResult_eResult stLevelUpShopBuildingLvResult::eResult_MAX;
const int stLevelUpShopBuildingLvResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelUpShopBuildingLvResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpShopBuildingLvResult_ProtoModID_descriptor_;
}
bool stLevelUpShopBuildingLvResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelUpShopBuildingLvResult_ProtoModID stLevelUpShopBuildingLvResult::ModID;
const stLevelUpShopBuildingLvResult_ProtoModID stLevelUpShopBuildingLvResult::ProtoModID_MIN;
const stLevelUpShopBuildingLvResult_ProtoModID stLevelUpShopBuildingLvResult::ProtoModID_MAX;
const int stLevelUpShopBuildingLvResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelUpShopBuildingLvResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpShopBuildingLvResult_ProtoFunID_descriptor_;
}
bool stLevelUpShopBuildingLvResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 50:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelUpShopBuildingLvResult_ProtoFunID stLevelUpShopBuildingLvResult::FunID;
const stLevelUpShopBuildingLvResult_ProtoFunID stLevelUpShopBuildingLvResult::ProtoFunID_MIN;
const stLevelUpShopBuildingLvResult_ProtoFunID stLevelUpShopBuildingLvResult::ProtoFunID_MAX;
const int stLevelUpShopBuildingLvResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLevelUpShopBuildingLvResult::kResultFieldNumber;
#endif  // !_MSC_VER

stLevelUpShopBuildingLvResult::stLevelUpShopBuildingLvResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLevelUpShopBuildingLvResult::InitAsDefaultInstance() {
}

stLevelUpShopBuildingLvResult::stLevelUpShopBuildingLvResult(const stLevelUpShopBuildingLvResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLevelUpShopBuildingLvResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLevelUpShopBuildingLvResult::~stLevelUpShopBuildingLvResult() {
  SharedDtor();
}

void stLevelUpShopBuildingLvResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLevelUpShopBuildingLvResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLevelUpShopBuildingLvResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpShopBuildingLvResult_descriptor_;
}

const stLevelUpShopBuildingLvResult& stLevelUpShopBuildingLvResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stLevelUpShopBuildingLvResult* stLevelUpShopBuildingLvResult::default_instance_ = NULL;

stLevelUpShopBuildingLvResult* stLevelUpShopBuildingLvResult::New() const {
  return new stLevelUpShopBuildingLvResult;
}

void stLevelUpShopBuildingLvResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLevelUpShopBuildingLvResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stLevelUpShopBuildingLvResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stLevelUpShopBuildingLvResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stLevelUpShopBuildingLvResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLevelUpShopBuildingLvResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stLevelUpShopBuildingLvResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLevelUpShopBuildingLvResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stLevelUpShopBuildingLvResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLevelUpShopBuildingLvResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stLevelUpShopBuildingLvResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLevelUpShopBuildingLvResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLevelUpShopBuildingLvResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLevelUpShopBuildingLvResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLevelUpShopBuildingLvResult::MergeFrom(const stLevelUpShopBuildingLvResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLevelUpShopBuildingLvResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLevelUpShopBuildingLvResult::CopyFrom(const stLevelUpShopBuildingLvResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLevelUpShopBuildingLvResult::IsInitialized() const {

  return true;
}

void stLevelUpShopBuildingLvResult::Swap(stLevelUpShopBuildingLvResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLevelUpShopBuildingLvResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLevelUpShopBuildingLvResult_descriptor_;
  metadata.reflection = stLevelUpShopBuildingLvResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynShopBuilding_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynShopBuilding_ProtoModID_descriptor_;
}
bool stSynShopBuilding_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynShopBuilding_ProtoModID stSynShopBuilding::ModID;
const stSynShopBuilding_ProtoModID stSynShopBuilding::ProtoModID_MIN;
const stSynShopBuilding_ProtoModID stSynShopBuilding::ProtoModID_MAX;
const int stSynShopBuilding::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynShopBuilding_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynShopBuilding_ProtoFunID_descriptor_;
}
bool stSynShopBuilding_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 51:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynShopBuilding_ProtoFunID stSynShopBuilding::FunID;
const stSynShopBuilding_ProtoFunID stSynShopBuilding::ProtoFunID_MIN;
const stSynShopBuilding_ProtoFunID stSynShopBuilding::ProtoFunID_MAX;
const int stSynShopBuilding::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynShopBuilding::kLvFieldNumber;
#endif  // !_MSC_VER

stSynShopBuilding::stSynShopBuilding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynShopBuilding::InitAsDefaultInstance() {
}

stSynShopBuilding::stSynShopBuilding(const stSynShopBuilding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynShopBuilding::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynShopBuilding::~stSynShopBuilding() {
  SharedDtor();
}

void stSynShopBuilding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynShopBuilding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynShopBuilding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynShopBuilding_descriptor_;
}

const stSynShopBuilding& stSynShopBuilding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynShopBuilding* stSynShopBuilding::default_instance_ = NULL;

stSynShopBuilding* stSynShopBuilding::New() const {
  return new stSynShopBuilding;
}

void stSynShopBuilding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynShopBuilding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynShopBuilding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynShopBuilding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynShopBuilding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynShopBuilding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynShopBuilding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynShopBuilding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynShopBuilding::MergeFrom(const stSynShopBuilding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynShopBuilding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynShopBuilding::CopyFrom(const stSynShopBuilding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynShopBuilding::IsInitialized() const {

  return true;
}

void stSynShopBuilding::Swap(stSynShopBuilding* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynShopBuilding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynShopBuilding_descriptor_;
  metadata.reflection = stSynShopBuilding_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGuildTrace_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildTrace_ProtoModID_descriptor_;
}
bool stReqGuildTrace_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildTrace_ProtoModID stReqGuildTrace::ModID;
const stReqGuildTrace_ProtoModID stReqGuildTrace::ProtoModID_MIN;
const stReqGuildTrace_ProtoModID stReqGuildTrace::ProtoModID_MAX;
const int stReqGuildTrace::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGuildTrace_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildTrace_ProtoFunID_descriptor_;
}
bool stReqGuildTrace_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 52:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildTrace_ProtoFunID stReqGuildTrace::FunID;
const stReqGuildTrace_ProtoFunID stReqGuildTrace::ProtoFunID_MIN;
const stReqGuildTrace_ProtoFunID stReqGuildTrace::ProtoFunID_MAX;
const int stReqGuildTrace::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGuildTrace::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stReqGuildTrace::stReqGuildTrace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGuildTrace::InitAsDefaultInstance() {
}

stReqGuildTrace::stReqGuildTrace(const stReqGuildTrace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGuildTrace::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGuildTrace::~stReqGuildTrace() {
  SharedDtor();
}

void stReqGuildTrace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGuildTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGuildTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildTrace_descriptor_;
}

const stReqGuildTrace& stReqGuildTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqGuildTrace* stReqGuildTrace::default_instance_ = NULL;

stReqGuildTrace* stReqGuildTrace::New() const {
  return new stReqGuildTrace;
}

void stReqGuildTrace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGuildTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGuildTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGuildTrace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGuildTrace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGuildTrace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGuildTrace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGuildTrace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGuildTrace::MergeFrom(const stReqGuildTrace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGuildTrace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGuildTrace::CopyFrom(const stReqGuildTrace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGuildTrace::IsInitialized() const {

  return true;
}

void stReqGuildTrace::Swap(stReqGuildTrace* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGuildTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGuildTrace_descriptor_;
  metadata.reflection = stReqGuildTrace_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stGuildTraceInfo::kETraceIDFieldNumber;
const int stGuildTraceInfo::kCharIDFieldNumber;
const int stGuildTraceInfo::kNameFieldNumber;
const int stGuildTraceInfo::kDoTimeFieldNumber;
#endif  // !_MSC_VER

stGuildTraceInfo::stGuildTraceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuildTraceInfo::InitAsDefaultInstance() {
}

stGuildTraceInfo::stGuildTraceInfo(const stGuildTraceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuildTraceInfo::SharedCtor() {
  _cached_size_ = 0;
  etraceid_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dotime_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuildTraceInfo::~stGuildTraceInfo() {
  SharedDtor();
}

void stGuildTraceInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stGuildTraceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuildTraceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildTraceInfo_descriptor_;
}

const stGuildTraceInfo& stGuildTraceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stGuildTraceInfo* stGuildTraceInfo::default_instance_ = NULL;

stGuildTraceInfo* stGuildTraceInfo::New() const {
  return new stGuildTraceInfo;
}

void stGuildTraceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    etraceid_ = 0;
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    dotime_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuildTraceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.eTraceID eTraceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eTraceID_IsValid(value)) {
            set_etraceid(static_cast< ::GuildProto::eTraceID >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_doTime;
        break;
      }

      // optional uint32 doTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dotime_)));
          set_has_dotime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuildTraceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.eTraceID eTraceID = 1;
  if (has_etraceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->etraceid(), output);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->charid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional uint32 doTime = 4;
  if (has_dotime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dotime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuildTraceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.eTraceID eTraceID = 1;
  if (has_etraceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->etraceid(), target);
  }

  // optional uint32 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->charid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional uint32 doTime = 4;
  if (has_dotime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dotime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuildTraceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.eTraceID eTraceID = 1;
    if (has_etraceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->etraceid());
    }

    // optional uint32 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 doTime = 4;
    if (has_dotime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dotime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuildTraceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuildTraceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuildTraceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuildTraceInfo::MergeFrom(const stGuildTraceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_etraceid()) {
      set_etraceid(from.etraceid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_dotime()) {
      set_dotime(from.dotime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuildTraceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuildTraceInfo::CopyFrom(const stGuildTraceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuildTraceInfo::IsInitialized() const {

  return true;
}

void stGuildTraceInfo::Swap(stGuildTraceInfo* other) {
  if (other != this) {
    std::swap(etraceid_, other->etraceid_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(dotime_, other->dotime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuildTraceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuildTraceInfo_descriptor_;
  metadata.reflection = stGuildTraceInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGuildTrace_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildTrace_ProtoModID_descriptor_;
}
bool stRetGuildTrace_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildTrace_ProtoModID stRetGuildTrace::ModID;
const stRetGuildTrace_ProtoModID stRetGuildTrace::ProtoModID_MIN;
const stRetGuildTrace_ProtoModID stRetGuildTrace::ProtoModID_MAX;
const int stRetGuildTrace::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGuildTrace_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildTrace_ProtoFunID_descriptor_;
}
bool stRetGuildTrace_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 53:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildTrace_ProtoFunID stRetGuildTrace::FunID;
const stRetGuildTrace_ProtoFunID stRetGuildTrace::ProtoFunID_MIN;
const stRetGuildTrace_ProtoFunID stRetGuildTrace::ProtoFunID_MAX;
const int stRetGuildTrace::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGuildTrace::kTracesFieldNumber;
#endif  // !_MSC_VER

stRetGuildTrace::stRetGuildTrace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGuildTrace::InitAsDefaultInstance() {
}

stRetGuildTrace::stRetGuildTrace(const stRetGuildTrace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGuildTrace::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGuildTrace::~stRetGuildTrace() {
  SharedDtor();
}

void stRetGuildTrace::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetGuildTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGuildTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildTrace_descriptor_;
}

const stRetGuildTrace& stRetGuildTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetGuildTrace* stRetGuildTrace::default_instance_ = NULL;

stRetGuildTrace* stRetGuildTrace::New() const {
  return new stRetGuildTrace;
}

void stRetGuildTrace::Clear() {
  traces_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGuildTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuildProto.stGuildTraceInfo traces = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_traces:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_traces()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_traces;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGuildTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuildProto.stGuildTraceInfo traces = 1;
  for (int i = 0; i < this->traces_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traces(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGuildTrace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuildProto.stGuildTraceInfo traces = 1;
  for (int i = 0; i < this->traces_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->traces(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGuildTrace::ByteSize() const {
  int total_size = 0;

  // repeated .GuildProto.stGuildTraceInfo traces = 1;
  total_size += 1 * this->traces_size();
  for (int i = 0; i < this->traces_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->traces(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGuildTrace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGuildTrace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGuildTrace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGuildTrace::MergeFrom(const stRetGuildTrace& from) {
  GOOGLE_CHECK_NE(&from, this);
  traces_.MergeFrom(from.traces_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGuildTrace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGuildTrace::CopyFrom(const stRetGuildTrace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGuildTrace::IsInitialized() const {

  return true;
}

void stRetGuildTrace::Swap(stRetGuildTrace* other) {
  if (other != this) {
    traces_.Swap(&other->traces_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGuildTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGuildTrace_descriptor_;
  metadata.reflection = stRetGuildTrace_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stAddNewGuildTrace_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddNewGuildTrace_ProtoModID_descriptor_;
}
bool stAddNewGuildTrace_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddNewGuildTrace_ProtoModID stAddNewGuildTrace::ModID;
const stAddNewGuildTrace_ProtoModID stAddNewGuildTrace::ProtoModID_MIN;
const stAddNewGuildTrace_ProtoModID stAddNewGuildTrace::ProtoModID_MAX;
const int stAddNewGuildTrace::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stAddNewGuildTrace_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddNewGuildTrace_ProtoFunID_descriptor_;
}
bool stAddNewGuildTrace_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 54:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stAddNewGuildTrace_ProtoFunID stAddNewGuildTrace::FunID;
const stAddNewGuildTrace_ProtoFunID stAddNewGuildTrace::ProtoFunID_MIN;
const stAddNewGuildTrace_ProtoFunID stAddNewGuildTrace::ProtoFunID_MAX;
const int stAddNewGuildTrace::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stAddNewGuildTrace::kTraceInfoFieldNumber;
#endif  // !_MSC_VER

stAddNewGuildTrace::stAddNewGuildTrace()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stAddNewGuildTrace::InitAsDefaultInstance() {
  traceinfo_ = const_cast< ::GuildProto::stGuildTraceInfo*>(&::GuildProto::stGuildTraceInfo::default_instance());
}

stAddNewGuildTrace::stAddNewGuildTrace(const stAddNewGuildTrace& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stAddNewGuildTrace::SharedCtor() {
  _cached_size_ = 0;
  traceinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stAddNewGuildTrace::~stAddNewGuildTrace() {
  SharedDtor();
}

void stAddNewGuildTrace::SharedDtor() {
  if (this != default_instance_) {
    delete traceinfo_;
  }
}

void stAddNewGuildTrace::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stAddNewGuildTrace::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stAddNewGuildTrace_descriptor_;
}

const stAddNewGuildTrace& stAddNewGuildTrace::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stAddNewGuildTrace* stAddNewGuildTrace::default_instance_ = NULL;

stAddNewGuildTrace* stAddNewGuildTrace::New() const {
  return new stAddNewGuildTrace;
}

void stAddNewGuildTrace::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_traceinfo()) {
      if (traceinfo_ != NULL) traceinfo_->::GuildProto::stGuildTraceInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stAddNewGuildTrace::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stGuildTraceInfo traceInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_traceinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stAddNewGuildTrace::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stGuildTraceInfo traceInfo = 1;
  if (has_traceinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->traceinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stAddNewGuildTrace::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stGuildTraceInfo traceInfo = 1;
  if (has_traceinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->traceinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stAddNewGuildTrace::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stGuildTraceInfo traceInfo = 1;
    if (has_traceinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->traceinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stAddNewGuildTrace::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stAddNewGuildTrace* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stAddNewGuildTrace*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stAddNewGuildTrace::MergeFrom(const stAddNewGuildTrace& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_traceinfo()) {
      mutable_traceinfo()->::GuildProto::stGuildTraceInfo::MergeFrom(from.traceinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stAddNewGuildTrace::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stAddNewGuildTrace::CopyFrom(const stAddNewGuildTrace& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stAddNewGuildTrace::IsInitialized() const {

  return true;
}

void stAddNewGuildTrace::Swap(stAddNewGuildTrace* other) {
  if (other != this) {
    std::swap(traceinfo_, other->traceinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stAddNewGuildTrace::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stAddNewGuildTrace_descriptor_;
  metadata.reflection = stAddNewGuildTrace_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChgNotice_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgNotice_ProtoModID_descriptor_;
}
bool stChgNotice_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChgNotice_ProtoModID stChgNotice::ModID;
const stChgNotice_ProtoModID stChgNotice::ProtoModID_MIN;
const stChgNotice_ProtoModID stChgNotice::ProtoModID_MAX;
const int stChgNotice::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChgNotice_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgNotice_ProtoFunID_descriptor_;
}
bool stChgNotice_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 55:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChgNotice_ProtoFunID stChgNotice::FunID;
const stChgNotice_ProtoFunID stChgNotice::ProtoFunID_MIN;
const stChgNotice_ProtoFunID stChgNotice::ProtoFunID_MAX;
const int stChgNotice::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChgNotice::kNoticeFieldNumber;
#endif  // !_MSC_VER

stChgNotice::stChgNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChgNotice::InitAsDefaultInstance() {
}

stChgNotice::stChgNotice(const stChgNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChgNotice::SharedCtor() {
  _cached_size_ = 0;
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChgNotice::~stChgNotice() {
  SharedDtor();
}

void stChgNotice::SharedDtor() {
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void stChgNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChgNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgNotice_descriptor_;
}

const stChgNotice& stChgNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stChgNotice* stChgNotice::default_instance_ = NULL;

stChgNotice* stChgNotice::New() const {
  return new stChgNotice;
}

void stChgNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChgNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string notice = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_notice()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->notice().data(), this->notice().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChgNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->notice(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChgNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string notice = 1;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->notice().data(), this->notice().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->notice(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChgNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string notice = 1;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->notice());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChgNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChgNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChgNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChgNotice::MergeFrom(const stChgNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_notice()) {
      set_notice(from.notice());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChgNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChgNotice::CopyFrom(const stChgNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChgNotice::IsInitialized() const {

  return true;
}

void stChgNotice::Swap(stChgNotice* other) {
  if (other != this) {
    std::swap(notice_, other->notice_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChgNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChgNotice_descriptor_;
  metadata.reflection = stChgNotice_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuildDonateState_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildDonateState_ProtoModID_descriptor_;
}
bool stGuildDonateState_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildDonateState_ProtoModID stGuildDonateState::ModID;
const stGuildDonateState_ProtoModID stGuildDonateState::ProtoModID_MIN;
const stGuildDonateState_ProtoModID stGuildDonateState::ProtoModID_MAX;
const int stGuildDonateState::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuildDonateState_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildDonateState_ProtoFunID_descriptor_;
}
bool stGuildDonateState_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 56:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildDonateState_ProtoFunID stGuildDonateState::FunID;
const stGuildDonateState_ProtoFunID stGuildDonateState::ProtoFunID_MIN;
const stGuildDonateState_ProtoFunID stGuildDonateState::ProtoFunID_MAX;
const int stGuildDonateState::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuildDonateState::kHasDonateFieldNumber;
#endif  // !_MSC_VER

stGuildDonateState::stGuildDonateState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuildDonateState::InitAsDefaultInstance() {
}

stGuildDonateState::stGuildDonateState(const stGuildDonateState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuildDonateState::SharedCtor() {
  _cached_size_ = 0;
  hasdonate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuildDonateState::~stGuildDonateState() {
  SharedDtor();
}

void stGuildDonateState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuildDonateState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuildDonateState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildDonateState_descriptor_;
}

const stGuildDonateState& stGuildDonateState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stGuildDonateState* stGuildDonateState::default_instance_ = NULL;

stGuildDonateState* stGuildDonateState::New() const {
  return new stGuildDonateState;
}

void stGuildDonateState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hasdonate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuildDonateState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hasDonate = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hasdonate_)));
          set_has_hasdonate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuildDonateState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hasDonate = 1;
  if (has_hasdonate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->hasdonate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuildDonateState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hasDonate = 1;
  if (has_hasdonate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->hasdonate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuildDonateState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hasDonate = 1;
    if (has_hasdonate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuildDonateState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuildDonateState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuildDonateState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuildDonateState::MergeFrom(const stGuildDonateState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hasdonate()) {
      set_hasdonate(from.hasdonate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuildDonateState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuildDonateState::CopyFrom(const stGuildDonateState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuildDonateState::IsInitialized() const {

  return true;
}

void stGuildDonateState::Swap(stGuildDonateState* other) {
  if (other != this) {
    std::swap(hasdonate_, other->hasdonate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuildDonateState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuildDonateState_descriptor_;
  metadata.reflection = stGuildDonateState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stGuildPrayState_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildPrayState_ProtoModID_descriptor_;
}
bool stGuildPrayState_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildPrayState_ProtoModID stGuildPrayState::ModID;
const stGuildPrayState_ProtoModID stGuildPrayState::ProtoModID_MIN;
const stGuildPrayState_ProtoModID stGuildPrayState::ProtoModID_MAX;
const int stGuildPrayState::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stGuildPrayState_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildPrayState_ProtoFunID_descriptor_;
}
bool stGuildPrayState_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 57:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stGuildPrayState_ProtoFunID stGuildPrayState::FunID;
const stGuildPrayState_ProtoFunID stGuildPrayState::ProtoFunID_MIN;
const stGuildPrayState_ProtoFunID stGuildPrayState::ProtoFunID_MAX;
const int stGuildPrayState::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stGuildPrayState::kHasPrayFieldNumber;
#endif  // !_MSC_VER

stGuildPrayState::stGuildPrayState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stGuildPrayState::InitAsDefaultInstance() {
}

stGuildPrayState::stGuildPrayState(const stGuildPrayState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stGuildPrayState::SharedCtor() {
  _cached_size_ = 0;
  haspray_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stGuildPrayState::~stGuildPrayState() {
  SharedDtor();
}

void stGuildPrayState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stGuildPrayState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stGuildPrayState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stGuildPrayState_descriptor_;
}

const stGuildPrayState& stGuildPrayState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stGuildPrayState* stGuildPrayState::default_instance_ = NULL;

stGuildPrayState* stGuildPrayState::New() const {
  return new stGuildPrayState;
}

void stGuildPrayState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    haspray_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stGuildPrayState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool hasPray = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &haspray_)));
          set_has_haspray();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stGuildPrayState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool hasPray = 1;
  if (has_haspray()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->haspray(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stGuildPrayState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool hasPray = 1;
  if (has_haspray()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->haspray(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stGuildPrayState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool hasPray = 1;
    if (has_haspray()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stGuildPrayState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stGuildPrayState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stGuildPrayState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stGuildPrayState::MergeFrom(const stGuildPrayState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_haspray()) {
      set_haspray(from.haspray());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stGuildPrayState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stGuildPrayState::CopyFrom(const stGuildPrayState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stGuildPrayState::IsInitialized() const {

  return true;
}

void stGuildPrayState::Swap(stGuildPrayState* other) {
  if (other != this) {
    std::swap(haspray_, other->haspray_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stGuildPrayState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stGuildPrayState_descriptor_;
  metadata.reflection = stGuildPrayState_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChangeBadge_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeBadge_ProtoModID_descriptor_;
}
bool stReqChangeBadge_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangeBadge_ProtoModID stReqChangeBadge::ModID;
const stReqChangeBadge_ProtoModID stReqChangeBadge::ProtoModID_MIN;
const stReqChangeBadge_ProtoModID stReqChangeBadge::ProtoModID_MAX;
const int stReqChangeBadge::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChangeBadge_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeBadge_ProtoFunID_descriptor_;
}
bool stReqChangeBadge_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 58:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChangeBadge_ProtoFunID stReqChangeBadge::FunID;
const stReqChangeBadge_ProtoFunID stReqChangeBadge::ProtoFunID_MIN;
const stReqChangeBadge_ProtoFunID stReqChangeBadge::ProtoFunID_MAX;
const int stReqChangeBadge::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChangeBadge::kBadgeIDFieldNumber;
#endif  // !_MSC_VER

stReqChangeBadge::stReqChangeBadge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChangeBadge::InitAsDefaultInstance() {
}

stReqChangeBadge::stReqChangeBadge(const stReqChangeBadge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChangeBadge::SharedCtor() {
  _cached_size_ = 0;
  badgeid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChangeBadge::~stReqChangeBadge() {
  SharedDtor();
}

void stReqChangeBadge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqChangeBadge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChangeBadge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChangeBadge_descriptor_;
}

const stReqChangeBadge& stReqChangeBadge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqChangeBadge* stReqChangeBadge::default_instance_ = NULL;

stReqChangeBadge* stReqChangeBadge::New() const {
  return new stReqChangeBadge;
}

void stReqChangeBadge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    badgeid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChangeBadge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 badgeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badgeid_)));
          set_has_badgeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChangeBadge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 badgeID = 1;
  if (has_badgeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->badgeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChangeBadge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 badgeID = 1;
  if (has_badgeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->badgeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChangeBadge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 badgeID = 1;
    if (has_badgeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badgeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChangeBadge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChangeBadge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChangeBadge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChangeBadge::MergeFrom(const stReqChangeBadge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_badgeid()) {
      set_badgeid(from.badgeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChangeBadge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChangeBadge::CopyFrom(const stReqChangeBadge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChangeBadge::IsInitialized() const {

  return true;
}

void stReqChangeBadge::Swap(stReqChangeBadge* other) {
  if (other != this) {
    std::swap(badgeid_, other->badgeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChangeBadge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChangeBadge_descriptor_;
  metadata.reflection = stReqChangeBadge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChangeBadge_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeBadge_eResult_descriptor_;
}
bool stChangeBadge_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeBadge_eResult stChangeBadge::eSuccess;
const stChangeBadge_eResult stChangeBadge::eNot_Enough_Diamond;
const stChangeBadge_eResult stChangeBadge::eResult_MIN;
const stChangeBadge_eResult stChangeBadge::eResult_MAX;
const int stChangeBadge::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangeBadge_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeBadge_ProtoModID_descriptor_;
}
bool stChangeBadge_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeBadge_ProtoModID stChangeBadge::ModID;
const stChangeBadge_ProtoModID stChangeBadge::ProtoModID_MIN;
const stChangeBadge_ProtoModID stChangeBadge::ProtoModID_MAX;
const int stChangeBadge::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChangeBadge_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeBadge_ProtoFunID_descriptor_;
}
bool stChangeBadge_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 59:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChangeBadge_ProtoFunID stChangeBadge::FunID;
const stChangeBadge_ProtoFunID stChangeBadge::ProtoFunID_MIN;
const stChangeBadge_ProtoFunID stChangeBadge::ProtoFunID_MAX;
const int stChangeBadge::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChangeBadge::kBadgeIDFieldNumber;
const int stChangeBadge::kResultFieldNumber;
#endif  // !_MSC_VER

stChangeBadge::stChangeBadge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChangeBadge::InitAsDefaultInstance() {
}

stChangeBadge::stChangeBadge(const stChangeBadge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChangeBadge::SharedCtor() {
  _cached_size_ = 0;
  badgeid_ = 0u;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChangeBadge::~stChangeBadge() {
  SharedDtor();
}

void stChangeBadge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChangeBadge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChangeBadge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChangeBadge_descriptor_;
}

const stChangeBadge& stChangeBadge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stChangeBadge* stChangeBadge::default_instance_ = NULL;

stChangeBadge* stChangeBadge::New() const {
  return new stChangeBadge;
}

void stChangeBadge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    badgeid_ = 0u;
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChangeBadge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 badgeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &badgeid_)));
          set_has_badgeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_result;
        break;
      }

      // optional .GuildProto.stChangeBadge.eResult result = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_result:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stChangeBadge_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stChangeBadge_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChangeBadge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 badgeID = 1;
  if (has_badgeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->badgeid(), output);
  }

  // optional .GuildProto.stChangeBadge.eResult result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChangeBadge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 badgeID = 1;
  if (has_badgeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->badgeid(), target);
  }

  // optional .GuildProto.stChangeBadge.eResult result = 2;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChangeBadge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 badgeID = 1;
    if (has_badgeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->badgeid());
    }

    // optional .GuildProto.stChangeBadge.eResult result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChangeBadge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChangeBadge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChangeBadge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChangeBadge::MergeFrom(const stChangeBadge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_badgeid()) {
      set_badgeid(from.badgeid());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChangeBadge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChangeBadge::CopyFrom(const stChangeBadge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChangeBadge::IsInitialized() const {

  return true;
}

void stChangeBadge::Swap(stChangeBadge* other) {
  if (other != this) {
    std::swap(badgeid_, other->badgeid_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChangeBadge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChangeBadge_descriptor_;
  metadata.reflection = stChangeBadge_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stIntoGuildCopymap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntoGuildCopymap_ProtoModID_descriptor_;
}
bool stIntoGuildCopymap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIntoGuildCopymap_ProtoModID stIntoGuildCopymap::ModID;
const stIntoGuildCopymap_ProtoModID stIntoGuildCopymap::ProtoModID_MIN;
const stIntoGuildCopymap_ProtoModID stIntoGuildCopymap::ProtoModID_MAX;
const int stIntoGuildCopymap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stIntoGuildCopymap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntoGuildCopymap_ProtoFunID_descriptor_;
}
bool stIntoGuildCopymap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 60:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIntoGuildCopymap_ProtoFunID stIntoGuildCopymap::FunID;
const stIntoGuildCopymap_ProtoFunID stIntoGuildCopymap::ProtoFunID_MIN;
const stIntoGuildCopymap_ProtoFunID stIntoGuildCopymap::ProtoFunID_MAX;
const int stIntoGuildCopymap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stIntoGuildCopymap::kCharIDFieldNumber;
#endif  // !_MSC_VER

stIntoGuildCopymap::stIntoGuildCopymap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stIntoGuildCopymap::InitAsDefaultInstance() {
}

stIntoGuildCopymap::stIntoGuildCopymap(const stIntoGuildCopymap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stIntoGuildCopymap::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stIntoGuildCopymap::~stIntoGuildCopymap() {
  SharedDtor();
}

void stIntoGuildCopymap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stIntoGuildCopymap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stIntoGuildCopymap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntoGuildCopymap_descriptor_;
}

const stIntoGuildCopymap& stIntoGuildCopymap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stIntoGuildCopymap* stIntoGuildCopymap::default_instance_ = NULL;

stIntoGuildCopymap* stIntoGuildCopymap::New() const {
  return new stIntoGuildCopymap;
}

void stIntoGuildCopymap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stIntoGuildCopymap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stIntoGuildCopymap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stIntoGuildCopymap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stIntoGuildCopymap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stIntoGuildCopymap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stIntoGuildCopymap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stIntoGuildCopymap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stIntoGuildCopymap::MergeFrom(const stIntoGuildCopymap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stIntoGuildCopymap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stIntoGuildCopymap::CopyFrom(const stIntoGuildCopymap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stIntoGuildCopymap::IsInitialized() const {

  return true;
}

void stIntoGuildCopymap::Swap(stIntoGuildCopymap* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stIntoGuildCopymap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stIntoGuildCopymap_descriptor_;
  metadata.reflection = stIntoGuildCopymap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stIntoGuildCopymapError_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntoGuildCopymapError_eResult_descriptor_;
}
bool stIntoGuildCopymapError_eResult_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIntoGuildCopymapError_eResult stIntoGuildCopymapError::eHAS_NOT_GUILD;
const stIntoGuildCopymapError_eResult stIntoGuildCopymapError::eResult_MIN;
const stIntoGuildCopymapError_eResult stIntoGuildCopymapError::eResult_MAX;
const int stIntoGuildCopymapError::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stIntoGuildCopymapError_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntoGuildCopymapError_ProtoModID_descriptor_;
}
bool stIntoGuildCopymapError_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIntoGuildCopymapError_ProtoModID stIntoGuildCopymapError::ModID;
const stIntoGuildCopymapError_ProtoModID stIntoGuildCopymapError::ProtoModID_MIN;
const stIntoGuildCopymapError_ProtoModID stIntoGuildCopymapError::ProtoModID_MAX;
const int stIntoGuildCopymapError::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stIntoGuildCopymapError_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntoGuildCopymapError_ProtoFunID_descriptor_;
}
bool stIntoGuildCopymapError_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 61:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stIntoGuildCopymapError_ProtoFunID stIntoGuildCopymapError::FunID;
const stIntoGuildCopymapError_ProtoFunID stIntoGuildCopymapError::ProtoFunID_MIN;
const stIntoGuildCopymapError_ProtoFunID stIntoGuildCopymapError::ProtoFunID_MAX;
const int stIntoGuildCopymapError::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stIntoGuildCopymapError::kResultFieldNumber;
#endif  // !_MSC_VER

stIntoGuildCopymapError::stIntoGuildCopymapError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stIntoGuildCopymapError::InitAsDefaultInstance() {
}

stIntoGuildCopymapError::stIntoGuildCopymapError(const stIntoGuildCopymapError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stIntoGuildCopymapError::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stIntoGuildCopymapError::~stIntoGuildCopymapError() {
  SharedDtor();
}

void stIntoGuildCopymapError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stIntoGuildCopymapError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stIntoGuildCopymapError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stIntoGuildCopymapError_descriptor_;
}

const stIntoGuildCopymapError& stIntoGuildCopymapError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stIntoGuildCopymapError* stIntoGuildCopymapError::default_instance_ = NULL;

stIntoGuildCopymapError* stIntoGuildCopymapError::New() const {
  return new stIntoGuildCopymapError;
}

void stIntoGuildCopymapError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stIntoGuildCopymapError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stIntoGuildCopymapError.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stIntoGuildCopymapError_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stIntoGuildCopymapError_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stIntoGuildCopymapError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stIntoGuildCopymapError.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stIntoGuildCopymapError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stIntoGuildCopymapError.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stIntoGuildCopymapError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stIntoGuildCopymapError.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stIntoGuildCopymapError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stIntoGuildCopymapError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stIntoGuildCopymapError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stIntoGuildCopymapError::MergeFrom(const stIntoGuildCopymapError& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stIntoGuildCopymapError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stIntoGuildCopymapError::CopyFrom(const stIntoGuildCopymapError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stIntoGuildCopymapError::IsInitialized() const {

  return true;
}

void stIntoGuildCopymapError::Swap(stIntoGuildCopymapError* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stIntoGuildCopymapError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stIntoGuildCopymapError_descriptor_;
  metadata.reflection = stIntoGuildCopymapError_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSearchGuild_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSearchGuild_ProtoModID_descriptor_;
}
bool stSearchGuild_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSearchGuild_ProtoModID stSearchGuild::ModID;
const stSearchGuild_ProtoModID stSearchGuild::ProtoModID_MIN;
const stSearchGuild_ProtoModID stSearchGuild::ProtoModID_MAX;
const int stSearchGuild::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSearchGuild_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSearchGuild_ProtoFunID_descriptor_;
}
bool stSearchGuild_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 62:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSearchGuild_ProtoFunID stSearchGuild::FunID;
const stSearchGuild_ProtoFunID stSearchGuild::ProtoFunID_MIN;
const stSearchGuild_ProtoFunID stSearchGuild::ProtoFunID_MAX;
const int stSearchGuild::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSearchGuild::kGuildNameFieldNumber;
#endif  // !_MSC_VER

stSearchGuild::stSearchGuild()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSearchGuild::InitAsDefaultInstance() {
}

stSearchGuild::stSearchGuild(const stSearchGuild& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSearchGuild::SharedCtor() {
  _cached_size_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSearchGuild::~stSearchGuild() {
  SharedDtor();
}

void stSearchGuild::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void stSearchGuild::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSearchGuild::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSearchGuild_descriptor_;
}

const stSearchGuild& stSearchGuild::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSearchGuild* stSearchGuild::default_instance_ = NULL;

stSearchGuild* stSearchGuild::New() const {
  return new stSearchGuild;
}

void stSearchGuild::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSearchGuild::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string guildName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSearchGuild::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string guildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->guildname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSearchGuild::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string guildName = 1;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->guildname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSearchGuild::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string guildName = 1;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSearchGuild::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSearchGuild* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSearchGuild*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSearchGuild::MergeFrom(const stSearchGuild& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSearchGuild::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSearchGuild::CopyFrom(const stSearchGuild& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSearchGuild::IsInitialized() const {

  return true;
}

void stSearchGuild::Swap(stSearchGuild* other) {
  if (other != this) {
    std::swap(guildname_, other->guildname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSearchGuild::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSearchGuild_descriptor_;
  metadata.reflection = stSearchGuild_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetSearchGuildResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSearchGuildResult_ProtoModID_descriptor_;
}
bool stRetSearchGuildResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetSearchGuildResult_ProtoModID stRetSearchGuildResult::ModID;
const stRetSearchGuildResult_ProtoModID stRetSearchGuildResult::ProtoModID_MIN;
const stRetSearchGuildResult_ProtoModID stRetSearchGuildResult::ProtoModID_MAX;
const int stRetSearchGuildResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetSearchGuildResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSearchGuildResult_ProtoFunID_descriptor_;
}
bool stRetSearchGuildResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 63:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetSearchGuildResult_ProtoFunID stRetSearchGuildResult::FunID;
const stRetSearchGuildResult_ProtoFunID stRetSearchGuildResult::ProtoFunID_MIN;
const stRetSearchGuildResult_ProtoFunID stRetSearchGuildResult::ProtoFunID_MAX;
const int stRetSearchGuildResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetSearchGuildResult::kListInfoFieldNumber;
#endif  // !_MSC_VER

stRetSearchGuildResult::stRetSearchGuildResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetSearchGuildResult::InitAsDefaultInstance() {
}

stRetSearchGuildResult::stRetSearchGuildResult(const stRetSearchGuildResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetSearchGuildResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetSearchGuildResult::~stRetSearchGuildResult() {
  SharedDtor();
}

void stRetSearchGuildResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetSearchGuildResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetSearchGuildResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetSearchGuildResult_descriptor_;
}

const stRetSearchGuildResult& stRetSearchGuildResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetSearchGuildResult* stRetSearchGuildResult::default_instance_ = NULL;

stRetSearchGuildResult* stRetSearchGuildResult::New() const {
  return new stRetSearchGuildResult;
}

void stRetSearchGuildResult::Clear() {
  listinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetSearchGuildResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuildProto.stGuildListInfo listInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_listInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_listinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_listInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetSearchGuildResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuildProto.stGuildListInfo listInfo = 1;
  for (int i = 0; i < this->listinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->listinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetSearchGuildResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuildProto.stGuildListInfo listInfo = 1;
  for (int i = 0; i < this->listinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->listinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetSearchGuildResult::ByteSize() const {
  int total_size = 0;

  // repeated .GuildProto.stGuildListInfo listInfo = 1;
  total_size += 1 * this->listinfo_size();
  for (int i = 0; i < this->listinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->listinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetSearchGuildResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetSearchGuildResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetSearchGuildResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetSearchGuildResult::MergeFrom(const stRetSearchGuildResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  listinfo_.MergeFrom(from.listinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetSearchGuildResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetSearchGuildResult::CopyFrom(const stRetSearchGuildResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetSearchGuildResult::IsInitialized() const {

  return true;
}

void stRetSearchGuildResult::Swap(stRetSearchGuildResult* other) {
  if (other != this) {
    listinfo_.Swap(&other->listinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetSearchGuildResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetSearchGuildResult_descriptor_;
  metadata.reflection = stRetSearchGuildResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynMemberContribute_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberContribute_ProtoModID_descriptor_;
}
bool stSynMemberContribute_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMemberContribute_ProtoModID stSynMemberContribute::ModID;
const stSynMemberContribute_ProtoModID stSynMemberContribute::ProtoModID_MIN;
const stSynMemberContribute_ProtoModID stSynMemberContribute::ProtoModID_MAX;
const int stSynMemberContribute::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynMemberContribute_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberContribute_ProtoFunID_descriptor_;
}
bool stSynMemberContribute_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 64:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMemberContribute_ProtoFunID stSynMemberContribute::FunID;
const stSynMemberContribute_ProtoFunID stSynMemberContribute::ProtoFunID_MIN;
const stSynMemberContribute_ProtoFunID stSynMemberContribute::ProtoFunID_MAX;
const int stSynMemberContribute::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynMemberContribute::kCharIDFieldNumber;
const int stSynMemberContribute::kNumFieldNumber;
#endif  // !_MSC_VER

stSynMemberContribute::stSynMemberContribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMemberContribute::InitAsDefaultInstance() {
}

stSynMemberContribute::stSynMemberContribute(const stSynMemberContribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMemberContribute::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMemberContribute::~stSynMemberContribute() {
  SharedDtor();
}

void stSynMemberContribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynMemberContribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMemberContribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberContribute_descriptor_;
}

const stSynMemberContribute& stSynMemberContribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynMemberContribute* stSynMemberContribute::default_instance_ = NULL;

stSynMemberContribute* stSynMemberContribute::New() const {
  return new stSynMemberContribute;
}

void stSynMemberContribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMemberContribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMemberContribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMemberContribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMemberContribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMemberContribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMemberContribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMemberContribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMemberContribute::MergeFrom(const stSynMemberContribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMemberContribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMemberContribute::CopyFrom(const stSynMemberContribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMemberContribute::IsInitialized() const {

  return true;
}

void stSynMemberContribute::Swap(stSynMemberContribute* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMemberContribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMemberContribute_descriptor_;
  metadata.reflection = stSynMemberContribute_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenGuildCopymapWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenGuildCopymapWin_ProtoModID_descriptor_;
}
bool stReqOpenGuildCopymapWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenGuildCopymapWin_ProtoModID stReqOpenGuildCopymapWin::ModID;
const stReqOpenGuildCopymapWin_ProtoModID stReqOpenGuildCopymapWin::ProtoModID_MIN;
const stReqOpenGuildCopymapWin_ProtoModID stReqOpenGuildCopymapWin::ProtoModID_MAX;
const int stReqOpenGuildCopymapWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenGuildCopymapWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenGuildCopymapWin_ProtoFunID_descriptor_;
}
bool stReqOpenGuildCopymapWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 65:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenGuildCopymapWin_ProtoFunID stReqOpenGuildCopymapWin::FunID;
const stReqOpenGuildCopymapWin_ProtoFunID stReqOpenGuildCopymapWin::ProtoFunID_MIN;
const stReqOpenGuildCopymapWin_ProtoFunID stReqOpenGuildCopymapWin::ProtoFunID_MAX;
const int stReqOpenGuildCopymapWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenGuildCopymapWin::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenGuildCopymapWin::stReqOpenGuildCopymapWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenGuildCopymapWin::InitAsDefaultInstance() {
}

stReqOpenGuildCopymapWin::stReqOpenGuildCopymapWin(const stReqOpenGuildCopymapWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenGuildCopymapWin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenGuildCopymapWin::~stReqOpenGuildCopymapWin() {
  SharedDtor();
}

void stReqOpenGuildCopymapWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenGuildCopymapWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenGuildCopymapWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenGuildCopymapWin_descriptor_;
}

const stReqOpenGuildCopymapWin& stReqOpenGuildCopymapWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqOpenGuildCopymapWin* stReqOpenGuildCopymapWin::default_instance_ = NULL;

stReqOpenGuildCopymapWin* stReqOpenGuildCopymapWin::New() const {
  return new stReqOpenGuildCopymapWin;
}

void stReqOpenGuildCopymapWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenGuildCopymapWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenGuildCopymapWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenGuildCopymapWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenGuildCopymapWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenGuildCopymapWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenGuildCopymapWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenGuildCopymapWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenGuildCopymapWin::MergeFrom(const stReqOpenGuildCopymapWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenGuildCopymapWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenGuildCopymapWin::CopyFrom(const stReqOpenGuildCopymapWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenGuildCopymapWin::IsInitialized() const {

  return true;
}

void stReqOpenGuildCopymapWin::Swap(stReqOpenGuildCopymapWin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenGuildCopymapWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenGuildCopymapWin_descriptor_;
  metadata.reflection = stReqOpenGuildCopymapWin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCopymapOpenInfo::kCopymapIDFieldNumber;
const int stCopymapOpenInfo::kOpenTimeFieldNumber;
const int stCopymapOpenInfo::kStepIDFieldNumber;
const int stCopymapOpenInfo::kIsStartedFieldNumber;
const int stCopymapOpenInfo::kKillerIDFieldNumber;
#endif  // !_MSC_VER

stCopymapOpenInfo::stCopymapOpenInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCopymapOpenInfo::InitAsDefaultInstance() {
}

stCopymapOpenInfo::stCopymapOpenInfo(const stCopymapOpenInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCopymapOpenInfo::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  opentime_ = 0u;
  stepid_ = 0u;
  isstarted_ = false;
  killerid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCopymapOpenInfo::~stCopymapOpenInfo() {
  SharedDtor();
}

void stCopymapOpenInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stCopymapOpenInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCopymapOpenInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopymapOpenInfo_descriptor_;
}

const stCopymapOpenInfo& stCopymapOpenInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stCopymapOpenInfo* stCopymapOpenInfo::default_instance_ = NULL;

stCopymapOpenInfo* stCopymapOpenInfo::New() const {
  return new stCopymapOpenInfo;
}

void stCopymapOpenInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
    opentime_ = 0u;
    stepid_ = 0u;
    isstarted_ = false;
    killerid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCopymapOpenInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_openTime;
        break;
      }

      // optional uint32 openTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_openTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &opentime_)));
          set_has_opentime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_stepID;
        break;
      }

      // optional uint32 stepID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stepID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &stepid_)));
          set_has_stepid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isStarted;
        break;
      }

      // optional bool isStarted = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isStarted:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isstarted_)));
          set_has_isstarted();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_killerID;
        break;
      }

      // optional uint32 killerID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killerid_)));
          set_has_killerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCopymapOpenInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  // optional uint32 openTime = 2;
  if (has_opentime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->opentime(), output);
  }

  // optional uint32 stepID = 3;
  if (has_stepid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->stepid(), output);
  }

  // optional bool isStarted = 4;
  if (has_isstarted()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isstarted(), output);
  }

  // optional uint32 killerID = 5;
  if (has_killerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->killerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCopymapOpenInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  // optional uint32 openTime = 2;
  if (has_opentime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->opentime(), target);
  }

  // optional uint32 stepID = 3;
  if (has_stepid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->stepid(), target);
  }

  // optional bool isStarted = 4;
  if (has_isstarted()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isstarted(), target);
  }

  // optional uint32 killerID = 5;
  if (has_killerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->killerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCopymapOpenInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional uint32 openTime = 2;
    if (has_opentime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->opentime());
    }

    // optional uint32 stepID = 3;
    if (has_stepid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->stepid());
    }

    // optional bool isStarted = 4;
    if (has_isstarted()) {
      total_size += 1 + 1;
    }

    // optional uint32 killerID = 5;
    if (has_killerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCopymapOpenInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCopymapOpenInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCopymapOpenInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCopymapOpenInfo::MergeFrom(const stCopymapOpenInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_opentime()) {
      set_opentime(from.opentime());
    }
    if (from.has_stepid()) {
      set_stepid(from.stepid());
    }
    if (from.has_isstarted()) {
      set_isstarted(from.isstarted());
    }
    if (from.has_killerid()) {
      set_killerid(from.killerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCopymapOpenInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCopymapOpenInfo::CopyFrom(const stCopymapOpenInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCopymapOpenInfo::IsInitialized() const {

  return true;
}

void stCopymapOpenInfo::Swap(stCopymapOpenInfo* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(opentime_, other->opentime_);
    std::swap(stepid_, other->stepid_);
    std::swap(isstarted_, other->isstarted_);
    std::swap(killerid_, other->killerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCopymapOpenInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCopymapOpenInfo_descriptor_;
  metadata.reflection = stCopymapOpenInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGuildCopymapInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildCopymapInfo_ProtoModID_descriptor_;
}
bool stRetGuildCopymapInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildCopymapInfo_ProtoModID stRetGuildCopymapInfo::ModID;
const stRetGuildCopymapInfo_ProtoModID stRetGuildCopymapInfo::ProtoModID_MIN;
const stRetGuildCopymapInfo_ProtoModID stRetGuildCopymapInfo::ProtoModID_MAX;
const int stRetGuildCopymapInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGuildCopymapInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildCopymapInfo_ProtoFunID_descriptor_;
}
bool stRetGuildCopymapInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 66:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildCopymapInfo_ProtoFunID stRetGuildCopymapInfo::FunID;
const stRetGuildCopymapInfo_ProtoFunID stRetGuildCopymapInfo::ProtoFunID_MIN;
const stRetGuildCopymapInfo_ProtoFunID stRetGuildCopymapInfo::ProtoFunID_MAX;
const int stRetGuildCopymapInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGuildCopymapInfo::kOpenInfoFieldNumber;
const int stRetGuildCopymapInfo::kChallengeNumFieldNumber;
const int stRetGuildCopymapInfo::kAssistNumFieldNumber;
#endif  // !_MSC_VER

stRetGuildCopymapInfo::stRetGuildCopymapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGuildCopymapInfo::InitAsDefaultInstance() {
}

stRetGuildCopymapInfo::stRetGuildCopymapInfo(const stRetGuildCopymapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGuildCopymapInfo::SharedCtor() {
  _cached_size_ = 0;
  challengenum_ = 0u;
  assistnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGuildCopymapInfo::~stRetGuildCopymapInfo() {
  SharedDtor();
}

void stRetGuildCopymapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetGuildCopymapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGuildCopymapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildCopymapInfo_descriptor_;
}

const stRetGuildCopymapInfo& stRetGuildCopymapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetGuildCopymapInfo* stRetGuildCopymapInfo::default_instance_ = NULL;

stRetGuildCopymapInfo* stRetGuildCopymapInfo::New() const {
  return new stRetGuildCopymapInfo;
}

void stRetGuildCopymapInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    challengenum_ = 0u;
    assistnum_ = 0u;
  }
  openinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGuildCopymapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuildProto.stCopymapOpenInfo openInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_openinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_openInfo;
        if (input->ExpectTag(16)) goto parse_challengeNum;
        break;
      }

      // optional uint32 challengeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_assistNum;
        break;
      }

      // optional uint32 assistNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assistNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistnum_)));
          set_has_assistnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGuildCopymapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuildProto.stCopymapOpenInfo openInfo = 1;
  for (int i = 0; i < this->openinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->openinfo(i), output);
  }

  // optional uint32 challengeNum = 2;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challengenum(), output);
  }

  // optional uint32 assistNum = 3;
  if (has_assistnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->assistnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGuildCopymapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuildProto.stCopymapOpenInfo openInfo = 1;
  for (int i = 0; i < this->openinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->openinfo(i), target);
  }

  // optional uint32 challengeNum = 2;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challengenum(), target);
  }

  // optional uint32 assistNum = 3;
  if (has_assistnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->assistnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGuildCopymapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 challengeNum = 2;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

    // optional uint32 assistNum = 3;
    if (has_assistnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistnum());
    }

  }
  // repeated .GuildProto.stCopymapOpenInfo openInfo = 1;
  total_size += 1 * this->openinfo_size();
  for (int i = 0; i < this->openinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->openinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGuildCopymapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGuildCopymapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGuildCopymapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGuildCopymapInfo::MergeFrom(const stRetGuildCopymapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  openinfo_.MergeFrom(from.openinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_assistnum()) {
      set_assistnum(from.assistnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGuildCopymapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGuildCopymapInfo::CopyFrom(const stRetGuildCopymapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGuildCopymapInfo::IsInitialized() const {

  return true;
}

void stRetGuildCopymapInfo::Swap(stRetGuildCopymapInfo* other) {
  if (other != this) {
    openinfo_.Swap(&other->openinfo_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(assistnum_, other->assistnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGuildCopymapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGuildCopymapInfo_descriptor_;
  metadata.reflection = stRetGuildCopymapInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqDamageSortlist_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDamageSortlist_ProtoModID_descriptor_;
}
bool stReqDamageSortlist_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDamageSortlist_ProtoModID stReqDamageSortlist::ModID;
const stReqDamageSortlist_ProtoModID stReqDamageSortlist::ProtoModID_MIN;
const stReqDamageSortlist_ProtoModID stReqDamageSortlist::ProtoModID_MAX;
const int stReqDamageSortlist::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqDamageSortlist_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDamageSortlist_ProtoFunID_descriptor_;
}
bool stReqDamageSortlist_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 67:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqDamageSortlist_ProtoFunID stReqDamageSortlist::FunID;
const stReqDamageSortlist_ProtoFunID stReqDamageSortlist::ProtoFunID_MIN;
const stReqDamageSortlist_ProtoFunID stReqDamageSortlist::ProtoFunID_MAX;
const int stReqDamageSortlist::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqDamageSortlist::kBeginRankFieldNumber;
#endif  // !_MSC_VER

stReqDamageSortlist::stReqDamageSortlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqDamageSortlist::InitAsDefaultInstance() {
}

stReqDamageSortlist::stReqDamageSortlist(const stReqDamageSortlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqDamageSortlist::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqDamageSortlist::~stReqDamageSortlist() {
  SharedDtor();
}

void stReqDamageSortlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqDamageSortlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqDamageSortlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqDamageSortlist_descriptor_;
}

const stReqDamageSortlist& stReqDamageSortlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqDamageSortlist* stReqDamageSortlist::default_instance_ = NULL;

stReqDamageSortlist* stReqDamageSortlist::New() const {
  return new stReqDamageSortlist;
}

void stReqDamageSortlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqDamageSortlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqDamageSortlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqDamageSortlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqDamageSortlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqDamageSortlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqDamageSortlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqDamageSortlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqDamageSortlist::MergeFrom(const stReqDamageSortlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqDamageSortlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqDamageSortlist::CopyFrom(const stReqDamageSortlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqDamageSortlist::IsInitialized() const {

  return true;
}

void stReqDamageSortlist::Swap(stReqDamageSortlist* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqDamageSortlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqDamageSortlist_descriptor_;
  metadata.reflection = stReqDamageSortlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stDamageSortItemInfo::kCharIDFieldNumber;
const int stDamageSortItemInfo::kDamageFieldNumber;
#endif  // !_MSC_VER

stDamageSortItemInfo::stDamageSortItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stDamageSortItemInfo::InitAsDefaultInstance() {
}

stDamageSortItemInfo::stDamageSortItemInfo(const stDamageSortItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stDamageSortItemInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  damage_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stDamageSortItemInfo::~stDamageSortItemInfo() {
  SharedDtor();
}

void stDamageSortItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stDamageSortItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stDamageSortItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stDamageSortItemInfo_descriptor_;
}

const stDamageSortItemInfo& stDamageSortItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stDamageSortItemInfo* stDamageSortItemInfo::default_instance_ = NULL;

stDamageSortItemInfo* stDamageSortItemInfo::New() const {
  return new stDamageSortItemInfo;
}

void stDamageSortItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    damage_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stDamageSortItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_damage;
        break;
      }

      // optional uint32 damage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stDamageSortItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stDamageSortItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 damage = 2;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stDamageSortItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 damage = 2;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stDamageSortItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stDamageSortItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stDamageSortItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stDamageSortItemInfo::MergeFrom(const stDamageSortItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stDamageSortItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stDamageSortItemInfo::CopyFrom(const stDamageSortItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stDamageSortItemInfo::IsInitialized() const {

  return true;
}

void stDamageSortItemInfo::Swap(stDamageSortItemInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stDamageSortItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stDamageSortItemInfo_descriptor_;
  metadata.reflection = stDamageSortItemInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetDamageSortlist_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDamageSortlist_ProtoModID_descriptor_;
}
bool stRetDamageSortlist_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDamageSortlist_ProtoModID stRetDamageSortlist::ModID;
const stRetDamageSortlist_ProtoModID stRetDamageSortlist::ProtoModID_MIN;
const stRetDamageSortlist_ProtoModID stRetDamageSortlist::ProtoModID_MAX;
const int stRetDamageSortlist::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetDamageSortlist_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDamageSortlist_ProtoFunID_descriptor_;
}
bool stRetDamageSortlist_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 68:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetDamageSortlist_ProtoFunID stRetDamageSortlist::FunID;
const stRetDamageSortlist_ProtoFunID stRetDamageSortlist::ProtoFunID_MIN;
const stRetDamageSortlist_ProtoFunID stRetDamageSortlist::ProtoFunID_MAX;
const int stRetDamageSortlist::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetDamageSortlist::kBeginRankFieldNumber;
const int stRetDamageSortlist::kSortItemFieldNumber;
const int stRetDamageSortlist::kMyRankFieldNumber;
#endif  // !_MSC_VER

stRetDamageSortlist::stRetDamageSortlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetDamageSortlist::InitAsDefaultInstance() {
}

stRetDamageSortlist::stRetDamageSortlist(const stRetDamageSortlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetDamageSortlist::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetDamageSortlist::~stRetDamageSortlist() {
  SharedDtor();
}

void stRetDamageSortlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetDamageSortlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetDamageSortlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetDamageSortlist_descriptor_;
}

const stRetDamageSortlist& stRetDamageSortlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetDamageSortlist* stRetDamageSortlist::default_instance_ = NULL;

stRetDamageSortlist* stRetDamageSortlist::New() const {
  return new stRetDamageSortlist;
}

void stRetDamageSortlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
    myrank_ = 0u;
  }
  sortitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetDamageSortlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sortItem;
        break;
      }

      // repeated .GuildProto.stDamageSortItemInfo sortItem = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sortItem;
        if (input->ExpectTag(24)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetDamageSortlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // repeated .GuildProto.stDamageSortItemInfo sortItem = 2;
  for (int i = 0; i < this->sortitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sortitem(i), output);
  }

  // optional uint32 myRank = 3;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetDamageSortlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // repeated .GuildProto.stDamageSortItemInfo sortItem = 2;
  for (int i = 0; i < this->sortitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sortitem(i), target);
  }

  // optional uint32 myRank = 3;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetDamageSortlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

    // optional uint32 myRank = 3;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .GuildProto.stDamageSortItemInfo sortItem = 2;
  total_size += 1 * this->sortitem_size();
  for (int i = 0; i < this->sortitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetDamageSortlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetDamageSortlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetDamageSortlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetDamageSortlist::MergeFrom(const stRetDamageSortlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortitem_.MergeFrom(from.sortitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetDamageSortlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetDamageSortlist::CopyFrom(const stRetDamageSortlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetDamageSortlist::IsInitialized() const {

  return true;
}

void stRetDamageSortlist::Swap(stRetDamageSortlist* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    sortitem_.Swap(&other->sortitem_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetDamageSortlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetDamageSortlist_descriptor_;
  metadata.reflection = stRetDamageSortlist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stCopymapScoreSortItem::kGuildIDFieldNumber;
const int stCopymapScoreSortItem::kNameFieldNumber;
const int stCopymapScoreSortItem::kScoreFieldNumber;
#endif  // !_MSC_VER

stCopymapScoreSortItem::stCopymapScoreSortItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stCopymapScoreSortItem::InitAsDefaultInstance() {
}

stCopymapScoreSortItem::stCopymapScoreSortItem(const stCopymapScoreSortItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stCopymapScoreSortItem::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  score_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stCopymapScoreSortItem::~stCopymapScoreSortItem() {
  SharedDtor();
}

void stCopymapScoreSortItem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stCopymapScoreSortItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stCopymapScoreSortItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stCopymapScoreSortItem_descriptor_;
}

const stCopymapScoreSortItem& stCopymapScoreSortItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stCopymapScoreSortItem* stCopymapScoreSortItem::default_instance_ = NULL;

stCopymapScoreSortItem* stCopymapScoreSortItem::New() const {
  return new stCopymapScoreSortItem;
}

void stCopymapScoreSortItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    score_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stCopymapScoreSortItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_score;
        break;
      }

      // optional uint32 score = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stCopymapScoreSortItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stCopymapScoreSortItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 score = 3;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stCopymapScoreSortItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 score = 3;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stCopymapScoreSortItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stCopymapScoreSortItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stCopymapScoreSortItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stCopymapScoreSortItem::MergeFrom(const stCopymapScoreSortItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stCopymapScoreSortItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stCopymapScoreSortItem::CopyFrom(const stCopymapScoreSortItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stCopymapScoreSortItem::IsInitialized() const {

  return true;
}

void stCopymapScoreSortItem::Swap(stCopymapScoreSortItem* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(name_, other->name_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stCopymapScoreSortItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stCopymapScoreSortItem_descriptor_;
  metadata.reflection = stCopymapScoreSortItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGuildCopymapScoreSortlist_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildCopymapScoreSortlist_ProtoModID_descriptor_;
}
bool stReqGuildCopymapScoreSortlist_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildCopymapScoreSortlist_ProtoModID stReqGuildCopymapScoreSortlist::ModID;
const stReqGuildCopymapScoreSortlist_ProtoModID stReqGuildCopymapScoreSortlist::ProtoModID_MIN;
const stReqGuildCopymapScoreSortlist_ProtoModID stReqGuildCopymapScoreSortlist::ProtoModID_MAX;
const int stReqGuildCopymapScoreSortlist::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGuildCopymapScoreSortlist_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildCopymapScoreSortlist_ProtoFunID_descriptor_;
}
bool stReqGuildCopymapScoreSortlist_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 69:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildCopymapScoreSortlist_ProtoFunID stReqGuildCopymapScoreSortlist::FunID;
const stReqGuildCopymapScoreSortlist_ProtoFunID stReqGuildCopymapScoreSortlist::ProtoFunID_MIN;
const stReqGuildCopymapScoreSortlist_ProtoFunID stReqGuildCopymapScoreSortlist::ProtoFunID_MAX;
const int stReqGuildCopymapScoreSortlist::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGuildCopymapScoreSortlist::kBeginRankFieldNumber;
const int stReqGuildCopymapScoreSortlist::kCopymapIDFieldNumber;
#endif  // !_MSC_VER

stReqGuildCopymapScoreSortlist::stReqGuildCopymapScoreSortlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGuildCopymapScoreSortlist::InitAsDefaultInstance() {
}

stReqGuildCopymapScoreSortlist::stReqGuildCopymapScoreSortlist(const stReqGuildCopymapScoreSortlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGuildCopymapScoreSortlist::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGuildCopymapScoreSortlist::~stReqGuildCopymapScoreSortlist() {
  SharedDtor();
}

void stReqGuildCopymapScoreSortlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGuildCopymapScoreSortlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGuildCopymapScoreSortlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildCopymapScoreSortlist_descriptor_;
}

const stReqGuildCopymapScoreSortlist& stReqGuildCopymapScoreSortlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqGuildCopymapScoreSortlist* stReqGuildCopymapScoreSortlist::default_instance_ = NULL;

stReqGuildCopymapScoreSortlist* stReqGuildCopymapScoreSortlist::New() const {
  return new stReqGuildCopymapScoreSortlist;
}

void stReqGuildCopymapScoreSortlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGuildCopymapScoreSortlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapID;
        break;
      }

      // optional uint32 copymapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGuildCopymapScoreSortlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // optional uint32 copymapID = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGuildCopymapScoreSortlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // optional uint32 copymapID = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGuildCopymapScoreSortlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

    // optional uint32 copymapID = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGuildCopymapScoreSortlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGuildCopymapScoreSortlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGuildCopymapScoreSortlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGuildCopymapScoreSortlist::MergeFrom(const stReqGuildCopymapScoreSortlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGuildCopymapScoreSortlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGuildCopymapScoreSortlist::CopyFrom(const stReqGuildCopymapScoreSortlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGuildCopymapScoreSortlist::IsInitialized() const {

  return true;
}

void stReqGuildCopymapScoreSortlist::Swap(stReqGuildCopymapScoreSortlist* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGuildCopymapScoreSortlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGuildCopymapScoreSortlist_descriptor_;
  metadata.reflection = stReqGuildCopymapScoreSortlist_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGuildCopymapScoreSortlist_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildCopymapScoreSortlist_ProtoModID_descriptor_;
}
bool stRetGuildCopymapScoreSortlist_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildCopymapScoreSortlist_ProtoModID stRetGuildCopymapScoreSortlist::ModID;
const stRetGuildCopymapScoreSortlist_ProtoModID stRetGuildCopymapScoreSortlist::ProtoModID_MIN;
const stRetGuildCopymapScoreSortlist_ProtoModID stRetGuildCopymapScoreSortlist::ProtoModID_MAX;
const int stRetGuildCopymapScoreSortlist::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGuildCopymapScoreSortlist_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildCopymapScoreSortlist_ProtoFunID_descriptor_;
}
bool stRetGuildCopymapScoreSortlist_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 70:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildCopymapScoreSortlist_ProtoFunID stRetGuildCopymapScoreSortlist::FunID;
const stRetGuildCopymapScoreSortlist_ProtoFunID stRetGuildCopymapScoreSortlist::ProtoFunID_MIN;
const stRetGuildCopymapScoreSortlist_ProtoFunID stRetGuildCopymapScoreSortlist::ProtoFunID_MAX;
const int stRetGuildCopymapScoreSortlist::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGuildCopymapScoreSortlist::kBeginRankFieldNumber;
const int stRetGuildCopymapScoreSortlist::kCopymapIDFieldNumber;
const int stRetGuildCopymapScoreSortlist::kSortItemFieldNumber;
const int stRetGuildCopymapScoreSortlist::kMyRankFieldNumber;
#endif  // !_MSC_VER

stRetGuildCopymapScoreSortlist::stRetGuildCopymapScoreSortlist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGuildCopymapScoreSortlist::InitAsDefaultInstance() {
}

stRetGuildCopymapScoreSortlist::stRetGuildCopymapScoreSortlist(const stRetGuildCopymapScoreSortlist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGuildCopymapScoreSortlist::SharedCtor() {
  _cached_size_ = 0;
  beginrank_ = 0u;
  copymapid_ = 0u;
  myrank_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGuildCopymapScoreSortlist::~stRetGuildCopymapScoreSortlist() {
  SharedDtor();
}

void stRetGuildCopymapScoreSortlist::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetGuildCopymapScoreSortlist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGuildCopymapScoreSortlist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildCopymapScoreSortlist_descriptor_;
}

const stRetGuildCopymapScoreSortlist& stRetGuildCopymapScoreSortlist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetGuildCopymapScoreSortlist* stRetGuildCopymapScoreSortlist::default_instance_ = NULL;

stRetGuildCopymapScoreSortlist* stRetGuildCopymapScoreSortlist::New() const {
  return new stRetGuildCopymapScoreSortlist;
}

void stRetGuildCopymapScoreSortlist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginrank_ = 0u;
    copymapid_ = 0u;
    myrank_ = 0u;
  }
  sortitem_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGuildCopymapScoreSortlist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 beginRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &beginrank_)));
          set_has_beginrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_copymapID;
        break;
      }

      // optional uint32 copymapID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortItem;
        break;
      }

      // repeated .GuildProto.stCopymapScoreSortItem sortItem = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sortItem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sortitem()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sortItem;
        if (input->ExpectTag(32)) goto parse_myRank;
        break;
      }

      // optional uint32 myRank = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_myRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &myrank_)));
          set_has_myrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGuildCopymapScoreSortlist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->beginrank(), output);
  }

  // optional uint32 copymapID = 2;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->copymapid(), output);
  }

  // repeated .GuildProto.stCopymapScoreSortItem sortItem = 3;
  for (int i = 0; i < this->sortitem_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sortitem(i), output);
  }

  // optional uint32 myRank = 4;
  if (has_myrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->myrank(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGuildCopymapScoreSortlist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 beginRank = 1;
  if (has_beginrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->beginrank(), target);
  }

  // optional uint32 copymapID = 2;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->copymapid(), target);
  }

  // repeated .GuildProto.stCopymapScoreSortItem sortItem = 3;
  for (int i = 0; i < this->sortitem_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sortitem(i), target);
  }

  // optional uint32 myRank = 4;
  if (has_myrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->myrank(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGuildCopymapScoreSortlist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 beginRank = 1;
    if (has_beginrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->beginrank());
    }

    // optional uint32 copymapID = 2;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

    // optional uint32 myRank = 4;
    if (has_myrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->myrank());
    }

  }
  // repeated .GuildProto.stCopymapScoreSortItem sortItem = 3;
  total_size += 1 * this->sortitem_size();
  for (int i = 0; i < this->sortitem_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sortitem(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGuildCopymapScoreSortlist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGuildCopymapScoreSortlist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGuildCopymapScoreSortlist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGuildCopymapScoreSortlist::MergeFrom(const stRetGuildCopymapScoreSortlist& from) {
  GOOGLE_CHECK_NE(&from, this);
  sortitem_.MergeFrom(from.sortitem_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginrank()) {
      set_beginrank(from.beginrank());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
    if (from.has_myrank()) {
      set_myrank(from.myrank());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGuildCopymapScoreSortlist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGuildCopymapScoreSortlist::CopyFrom(const stRetGuildCopymapScoreSortlist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGuildCopymapScoreSortlist::IsInitialized() const {

  return true;
}

void stRetGuildCopymapScoreSortlist::Swap(stRetGuildCopymapScoreSortlist* other) {
  if (other != this) {
    std::swap(beginrank_, other->beginrank_);
    std::swap(copymapid_, other->copymapid_);
    sortitem_.Swap(&other->sortitem_);
    std::swap(myrank_, other->myrank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGuildCopymapScoreSortlist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGuildCopymapScoreSortlist_descriptor_;
  metadata.reflection = stRetGuildCopymapScoreSortlist_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynGuildActivityDegree_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildActivityDegree_ProtoModID_descriptor_;
}
bool stSynGuildActivityDegree_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildActivityDegree_ProtoModID stSynGuildActivityDegree::ModID;
const stSynGuildActivityDegree_ProtoModID stSynGuildActivityDegree::ProtoModID_MIN;
const stSynGuildActivityDegree_ProtoModID stSynGuildActivityDegree::ProtoModID_MAX;
const int stSynGuildActivityDegree::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynGuildActivityDegree_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildActivityDegree_ProtoFunID_descriptor_;
}
bool stSynGuildActivityDegree_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 71:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynGuildActivityDegree_ProtoFunID stSynGuildActivityDegree::FunID;
const stSynGuildActivityDegree_ProtoFunID stSynGuildActivityDegree::ProtoFunID_MIN;
const stSynGuildActivityDegree_ProtoFunID stSynGuildActivityDegree::ProtoFunID_MAX;
const int stSynGuildActivityDegree::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynGuildActivityDegree::kValueFieldNumber;
#endif  // !_MSC_VER

stSynGuildActivityDegree::stSynGuildActivityDegree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynGuildActivityDegree::InitAsDefaultInstance() {
}

stSynGuildActivityDegree::stSynGuildActivityDegree(const stSynGuildActivityDegree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynGuildActivityDegree::SharedCtor() {
  _cached_size_ = 0;
  value_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynGuildActivityDegree::~stSynGuildActivityDegree() {
  SharedDtor();
}

void stSynGuildActivityDegree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynGuildActivityDegree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynGuildActivityDegree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynGuildActivityDegree_descriptor_;
}

const stSynGuildActivityDegree& stSynGuildActivityDegree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynGuildActivityDegree* stSynGuildActivityDegree::default_instance_ = NULL;

stSynGuildActivityDegree* stSynGuildActivityDegree::New() const {
  return new stSynGuildActivityDegree;
}

void stSynGuildActivityDegree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    value_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynGuildActivityDegree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynGuildActivityDegree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 value = 1;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynGuildActivityDegree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 value = 1;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynGuildActivityDegree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 value = 1;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynGuildActivityDegree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynGuildActivityDegree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynGuildActivityDegree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynGuildActivityDegree::MergeFrom(const stSynGuildActivityDegree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynGuildActivityDegree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynGuildActivityDegree::CopyFrom(const stSynGuildActivityDegree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynGuildActivityDegree::IsInitialized() const {

  return true;
}

void stSynGuildActivityDegree::Swap(stSynGuildActivityDegree* other) {
  if (other != this) {
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynGuildActivityDegree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynGuildActivityDegree_descriptor_;
  metadata.reflection = stSynGuildActivityDegree_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynMemberChallengeNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberChallengeNum_ProtoModID_descriptor_;
}
bool stSynMemberChallengeNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMemberChallengeNum_ProtoModID stSynMemberChallengeNum::ModID;
const stSynMemberChallengeNum_ProtoModID stSynMemberChallengeNum::ProtoModID_MIN;
const stSynMemberChallengeNum_ProtoModID stSynMemberChallengeNum::ProtoModID_MAX;
const int stSynMemberChallengeNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynMemberChallengeNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberChallengeNum_ProtoFunID_descriptor_;
}
bool stSynMemberChallengeNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 72:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMemberChallengeNum_ProtoFunID stSynMemberChallengeNum::FunID;
const stSynMemberChallengeNum_ProtoFunID stSynMemberChallengeNum::ProtoFunID_MIN;
const stSynMemberChallengeNum_ProtoFunID stSynMemberChallengeNum::ProtoFunID_MAX;
const int stSynMemberChallengeNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynMemberChallengeNum::kCharIDFieldNumber;
const int stSynMemberChallengeNum::kChallengeNumFieldNumber;
#endif  // !_MSC_VER

stSynMemberChallengeNum::stSynMemberChallengeNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMemberChallengeNum::InitAsDefaultInstance() {
}

stSynMemberChallengeNum::stSynMemberChallengeNum(const stSynMemberChallengeNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMemberChallengeNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  challengenum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMemberChallengeNum::~stSynMemberChallengeNum() {
  SharedDtor();
}

void stSynMemberChallengeNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynMemberChallengeNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMemberChallengeNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberChallengeNum_descriptor_;
}

const stSynMemberChallengeNum& stSynMemberChallengeNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynMemberChallengeNum* stSynMemberChallengeNum::default_instance_ = NULL;

stSynMemberChallengeNum* stSynMemberChallengeNum::New() const {
  return new stSynMemberChallengeNum;
}

void stSynMemberChallengeNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    challengenum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMemberChallengeNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_challengeNum;
        break;
      }

      // optional uint32 challengeNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMemberChallengeNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 challengeNum = 2;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->challengenum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMemberChallengeNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 challengeNum = 2;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->challengenum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMemberChallengeNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 challengeNum = 2;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->challengenum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMemberChallengeNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMemberChallengeNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMemberChallengeNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMemberChallengeNum::MergeFrom(const stSynMemberChallengeNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMemberChallengeNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMemberChallengeNum::CopyFrom(const stSynMemberChallengeNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMemberChallengeNum::IsInitialized() const {

  return true;
}

void stSynMemberChallengeNum::Swap(stSynMemberChallengeNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMemberChallengeNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMemberChallengeNum_descriptor_;
  metadata.reflection = stSynMemberChallengeNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynMemberAssistNum_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberAssistNum_ProtoModID_descriptor_;
}
bool stSynMemberAssistNum_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMemberAssistNum_ProtoModID stSynMemberAssistNum::ModID;
const stSynMemberAssistNum_ProtoModID stSynMemberAssistNum::ProtoModID_MIN;
const stSynMemberAssistNum_ProtoModID stSynMemberAssistNum::ProtoModID_MAX;
const int stSynMemberAssistNum::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynMemberAssistNum_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberAssistNum_ProtoFunID_descriptor_;
}
bool stSynMemberAssistNum_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 73:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynMemberAssistNum_ProtoFunID stSynMemberAssistNum::FunID;
const stSynMemberAssistNum_ProtoFunID stSynMemberAssistNum::ProtoFunID_MIN;
const stSynMemberAssistNum_ProtoFunID stSynMemberAssistNum::ProtoFunID_MAX;
const int stSynMemberAssistNum::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynMemberAssistNum::kCharIDFieldNumber;
const int stSynMemberAssistNum::kAssistNumFieldNumber;
#endif  // !_MSC_VER

stSynMemberAssistNum::stSynMemberAssistNum()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynMemberAssistNum::InitAsDefaultInstance() {
}

stSynMemberAssistNum::stSynMemberAssistNum(const stSynMemberAssistNum& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynMemberAssistNum::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  assistnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynMemberAssistNum::~stSynMemberAssistNum() {
  SharedDtor();
}

void stSynMemberAssistNum::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynMemberAssistNum::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynMemberAssistNum::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynMemberAssistNum_descriptor_;
}

const stSynMemberAssistNum& stSynMemberAssistNum::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynMemberAssistNum* stSynMemberAssistNum::default_instance_ = NULL;

stSynMemberAssistNum* stSynMemberAssistNum::New() const {
  return new stSynMemberAssistNum;
}

void stSynMemberAssistNum::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    assistnum_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynMemberAssistNum::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_assistNum;
        break;
      }

      // optional uint32 assistNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assistNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &assistnum_)));
          set_has_assistnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynMemberAssistNum::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 assistNum = 2;
  if (has_assistnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->assistnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynMemberAssistNum::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 assistNum = 2;
  if (has_assistnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->assistnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynMemberAssistNum::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 assistNum = 2;
    if (has_assistnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->assistnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynMemberAssistNum::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynMemberAssistNum* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynMemberAssistNum*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynMemberAssistNum::MergeFrom(const stSynMemberAssistNum& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_assistnum()) {
      set_assistnum(from.assistnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynMemberAssistNum::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynMemberAssistNum::CopyFrom(const stSynMemberAssistNum& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynMemberAssistNum::IsInitialized() const {

  return true;
}

void stSynMemberAssistNum::Swap(stSynMemberAssistNum* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(assistnum_, other->assistnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynMemberAssistNum::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynMemberAssistNum_descriptor_;
  metadata.reflection = stSynMemberAssistNum_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqEnterGuildCopymap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterGuildCopymap_ProtoModID_descriptor_;
}
bool stReqEnterGuildCopymap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterGuildCopymap_ProtoModID stReqEnterGuildCopymap::ModID;
const stReqEnterGuildCopymap_ProtoModID stReqEnterGuildCopymap::ProtoModID_MIN;
const stReqEnterGuildCopymap_ProtoModID stReqEnterGuildCopymap::ProtoModID_MAX;
const int stReqEnterGuildCopymap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqEnterGuildCopymap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterGuildCopymap_ProtoFunID_descriptor_;
}
bool stReqEnterGuildCopymap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 74:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqEnterGuildCopymap_ProtoFunID stReqEnterGuildCopymap::FunID;
const stReqEnterGuildCopymap_ProtoFunID stReqEnterGuildCopymap::ProtoFunID_MIN;
const stReqEnterGuildCopymap_ProtoFunID stReqEnterGuildCopymap::ProtoFunID_MAX;
const int stReqEnterGuildCopymap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqEnterGuildCopymap::kCopymapIDFieldNumber;
#endif  // !_MSC_VER

stReqEnterGuildCopymap::stReqEnterGuildCopymap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqEnterGuildCopymap::InitAsDefaultInstance() {
}

stReqEnterGuildCopymap::stReqEnterGuildCopymap(const stReqEnterGuildCopymap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqEnterGuildCopymap::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqEnterGuildCopymap::~stReqEnterGuildCopymap() {
  SharedDtor();
}

void stReqEnterGuildCopymap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqEnterGuildCopymap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqEnterGuildCopymap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqEnterGuildCopymap_descriptor_;
}

const stReqEnterGuildCopymap& stReqEnterGuildCopymap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqEnterGuildCopymap* stReqEnterGuildCopymap::default_instance_ = NULL;

stReqEnterGuildCopymap* stReqEnterGuildCopymap::New() const {
  return new stReqEnterGuildCopymap;
}

void stReqEnterGuildCopymap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqEnterGuildCopymap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqEnterGuildCopymap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqEnterGuildCopymap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqEnterGuildCopymap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqEnterGuildCopymap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqEnterGuildCopymap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqEnterGuildCopymap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqEnterGuildCopymap::MergeFrom(const stReqEnterGuildCopymap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqEnterGuildCopymap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqEnterGuildCopymap::CopyFrom(const stReqEnterGuildCopymap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqEnterGuildCopymap::IsInitialized() const {

  return true;
}

void stReqEnterGuildCopymap::Swap(stReqEnterGuildCopymap* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqEnterGuildCopymap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqEnterGuildCopymap_descriptor_;
  metadata.reflection = stReqEnterGuildCopymap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetEnterGuildCopymapResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnterGuildCopymapResult_eResult_descriptor_;
}
bool stRetEnterGuildCopymapResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetEnterGuildCopymapResult_eResult stRetEnterGuildCopymapResult::eHas_Member_timeout;
const stRetEnterGuildCopymapResult_eResult stRetEnterGuildCopymapResult::eHas_Not_Start;
const stRetEnterGuildCopymapResult_eResult stRetEnterGuildCopymapResult::eHas_No_Team;
const stRetEnterGuildCopymapResult_eResult stRetEnterGuildCopymapResult::eNot_Leader;
const stRetEnterGuildCopymapResult_eResult stRetEnterGuildCopymapResult::eResult_MIN;
const stRetEnterGuildCopymapResult_eResult stRetEnterGuildCopymapResult::eResult_MAX;
const int stRetEnterGuildCopymapResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetEnterGuildCopymapResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnterGuildCopymapResult_ProtoModID_descriptor_;
}
bool stRetEnterGuildCopymapResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetEnterGuildCopymapResult_ProtoModID stRetEnterGuildCopymapResult::ModID;
const stRetEnterGuildCopymapResult_ProtoModID stRetEnterGuildCopymapResult::ProtoModID_MIN;
const stRetEnterGuildCopymapResult_ProtoModID stRetEnterGuildCopymapResult::ProtoModID_MAX;
const int stRetEnterGuildCopymapResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetEnterGuildCopymapResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnterGuildCopymapResult_ProtoFunID_descriptor_;
}
bool stRetEnterGuildCopymapResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 75:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetEnterGuildCopymapResult_ProtoFunID stRetEnterGuildCopymapResult::FunID;
const stRetEnterGuildCopymapResult_ProtoFunID stRetEnterGuildCopymapResult::ProtoFunID_MIN;
const stRetEnterGuildCopymapResult_ProtoFunID stRetEnterGuildCopymapResult::ProtoFunID_MAX;
const int stRetEnterGuildCopymapResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetEnterGuildCopymapResult::kResultFieldNumber;
#endif  // !_MSC_VER

stRetEnterGuildCopymapResult::stRetEnterGuildCopymapResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetEnterGuildCopymapResult::InitAsDefaultInstance() {
}

stRetEnterGuildCopymapResult::stRetEnterGuildCopymapResult(const stRetEnterGuildCopymapResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetEnterGuildCopymapResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetEnterGuildCopymapResult::~stRetEnterGuildCopymapResult() {
  SharedDtor();
}

void stRetEnterGuildCopymapResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetEnterGuildCopymapResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetEnterGuildCopymapResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetEnterGuildCopymapResult_descriptor_;
}

const stRetEnterGuildCopymapResult& stRetEnterGuildCopymapResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetEnterGuildCopymapResult* stRetEnterGuildCopymapResult::default_instance_ = NULL;

stRetEnterGuildCopymapResult* stRetEnterGuildCopymapResult::New() const {
  return new stRetEnterGuildCopymapResult;
}

void stRetEnterGuildCopymapResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetEnterGuildCopymapResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stRetEnterGuildCopymapResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stRetEnterGuildCopymapResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stRetEnterGuildCopymapResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetEnterGuildCopymapResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stRetEnterGuildCopymapResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetEnterGuildCopymapResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stRetEnterGuildCopymapResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetEnterGuildCopymapResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stRetEnterGuildCopymapResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetEnterGuildCopymapResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetEnterGuildCopymapResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetEnterGuildCopymapResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetEnterGuildCopymapResult::MergeFrom(const stRetEnterGuildCopymapResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetEnterGuildCopymapResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetEnterGuildCopymapResult::CopyFrom(const stRetEnterGuildCopymapResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetEnterGuildCopymapResult::IsInitialized() const {

  return true;
}

void stRetEnterGuildCopymapResult::Swap(stRetEnterGuildCopymapResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetEnterGuildCopymapResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetEnterGuildCopymapResult_descriptor_;
  metadata.reflection = stRetEnterGuildCopymapResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stStartGuildCopymap_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStartGuildCopymap_ProtoModID_descriptor_;
}
bool stStartGuildCopymap_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStartGuildCopymap_ProtoModID stStartGuildCopymap::ModID;
const stStartGuildCopymap_ProtoModID stStartGuildCopymap::ProtoModID_MIN;
const stStartGuildCopymap_ProtoModID stStartGuildCopymap::ProtoModID_MAX;
const int stStartGuildCopymap::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stStartGuildCopymap_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStartGuildCopymap_ProtoFunID_descriptor_;
}
bool stStartGuildCopymap_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 76:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStartGuildCopymap_ProtoFunID stStartGuildCopymap::FunID;
const stStartGuildCopymap_ProtoFunID stStartGuildCopymap::ProtoFunID_MIN;
const stStartGuildCopymap_ProtoFunID stStartGuildCopymap::ProtoFunID_MAX;
const int stStartGuildCopymap::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stStartGuildCopymap::kCopymapIDFieldNumber;
#endif  // !_MSC_VER

stStartGuildCopymap::stStartGuildCopymap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stStartGuildCopymap::InitAsDefaultInstance() {
}

stStartGuildCopymap::stStartGuildCopymap(const stStartGuildCopymap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stStartGuildCopymap::SharedCtor() {
  _cached_size_ = 0;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stStartGuildCopymap::~stStartGuildCopymap() {
  SharedDtor();
}

void stStartGuildCopymap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stStartGuildCopymap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stStartGuildCopymap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStartGuildCopymap_descriptor_;
}

const stStartGuildCopymap& stStartGuildCopymap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stStartGuildCopymap* stStartGuildCopymap::default_instance_ = NULL;

stStartGuildCopymap* stStartGuildCopymap::New() const {
  return new stStartGuildCopymap;
}

void stStartGuildCopymap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stStartGuildCopymap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 copymapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stStartGuildCopymap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stStartGuildCopymap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 copymapID = 1;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stStartGuildCopymap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 copymapID = 1;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stStartGuildCopymap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stStartGuildCopymap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stStartGuildCopymap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stStartGuildCopymap::MergeFrom(const stStartGuildCopymap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stStartGuildCopymap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stStartGuildCopymap::CopyFrom(const stStartGuildCopymap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stStartGuildCopymap::IsInitialized() const {

  return true;
}

void stStartGuildCopymap::Swap(stStartGuildCopymap* other) {
  if (other != this) {
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stStartGuildCopymap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stStartGuildCopymap_descriptor_;
  metadata.reflection = stStartGuildCopymap_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stStartGuildCopymapResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStartGuildCopymapResult_eResult_descriptor_;
}
bool stStartGuildCopymapResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStartGuildCopymapResult_eResult stStartGuildCopymapResult::eSuccess;
const stStartGuildCopymapResult_eResult stStartGuildCopymapResult::eNot_Enough_Activity;
const stStartGuildCopymapResult_eResult stStartGuildCopymapResult::eHas_Open;
const stStartGuildCopymapResult_eResult stStartGuildCopymapResult::eHas_No_Right;
const stStartGuildCopymapResult_eResult stStartGuildCopymapResult::eLevel_Not_Meet;
const stStartGuildCopymapResult_eResult stStartGuildCopymapResult::eResult_MIN;
const stStartGuildCopymapResult_eResult stStartGuildCopymapResult::eResult_MAX;
const int stStartGuildCopymapResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stStartGuildCopymapResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStartGuildCopymapResult_ProtoModID_descriptor_;
}
bool stStartGuildCopymapResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStartGuildCopymapResult_ProtoModID stStartGuildCopymapResult::ModID;
const stStartGuildCopymapResult_ProtoModID stStartGuildCopymapResult::ProtoModID_MIN;
const stStartGuildCopymapResult_ProtoModID stStartGuildCopymapResult::ProtoModID_MAX;
const int stStartGuildCopymapResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stStartGuildCopymapResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStartGuildCopymapResult_ProtoFunID_descriptor_;
}
bool stStartGuildCopymapResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 77:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stStartGuildCopymapResult_ProtoFunID stStartGuildCopymapResult::FunID;
const stStartGuildCopymapResult_ProtoFunID stStartGuildCopymapResult::ProtoFunID_MIN;
const stStartGuildCopymapResult_ProtoFunID stStartGuildCopymapResult::ProtoFunID_MAX;
const int stStartGuildCopymapResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stStartGuildCopymapResult::kResultFieldNumber;
const int stStartGuildCopymapResult::kStartTimeFieldNumber;
const int stStartGuildCopymapResult::kCopymapIDFieldNumber;
#endif  // !_MSC_VER

stStartGuildCopymapResult::stStartGuildCopymapResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stStartGuildCopymapResult::InitAsDefaultInstance() {
}

stStartGuildCopymapResult::stStartGuildCopymapResult(const stStartGuildCopymapResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stStartGuildCopymapResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  starttime_ = 0u;
  copymapid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stStartGuildCopymapResult::~stStartGuildCopymapResult() {
  SharedDtor();
}

void stStartGuildCopymapResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stStartGuildCopymapResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stStartGuildCopymapResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stStartGuildCopymapResult_descriptor_;
}

const stStartGuildCopymapResult& stStartGuildCopymapResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stStartGuildCopymapResult* stStartGuildCopymapResult::default_instance_ = NULL;

stStartGuildCopymapResult* stStartGuildCopymapResult::New() const {
  return new stStartGuildCopymapResult;
}

void stStartGuildCopymapResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    starttime_ = 0u;
    copymapid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stStartGuildCopymapResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stStartGuildCopymapResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stStartGuildCopymapResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stStartGuildCopymapResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startTime;
        break;
      }

      // optional uint32 startTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_copymapID;
        break;
      }

      // optional uint32 copymapID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_copymapID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &copymapid_)));
          set_has_copymapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stStartGuildCopymapResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stStartGuildCopymapResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 startTime = 2;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->starttime(), output);
  }

  // optional uint32 copymapID = 3;
  if (has_copymapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->copymapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stStartGuildCopymapResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stStartGuildCopymapResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 startTime = 2;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->starttime(), target);
  }

  // optional uint32 copymapID = 3;
  if (has_copymapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->copymapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stStartGuildCopymapResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stStartGuildCopymapResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->starttime());
    }

    // optional uint32 copymapID = 3;
    if (has_copymapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->copymapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stStartGuildCopymapResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stStartGuildCopymapResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stStartGuildCopymapResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stStartGuildCopymapResult::MergeFrom(const stStartGuildCopymapResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_copymapid()) {
      set_copymapid(from.copymapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stStartGuildCopymapResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stStartGuildCopymapResult::CopyFrom(const stStartGuildCopymapResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stStartGuildCopymapResult::IsInitialized() const {

  return true;
}

void stStartGuildCopymapResult::Swap(stStartGuildCopymapResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(starttime_, other->starttime_);
    std::swap(copymapid_, other->copymapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stStartGuildCopymapResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stStartGuildCopymapResult_descriptor_;
  metadata.reflection = stStartGuildCopymapResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stInviteTeamInGuildChannel_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteTeamInGuildChannel_ProtoModID_descriptor_;
}
bool stInviteTeamInGuildChannel_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteTeamInGuildChannel_ProtoModID stInviteTeamInGuildChannel::ModID;
const stInviteTeamInGuildChannel_ProtoModID stInviteTeamInGuildChannel::ProtoModID_MIN;
const stInviteTeamInGuildChannel_ProtoModID stInviteTeamInGuildChannel::ProtoModID_MAX;
const int stInviteTeamInGuildChannel::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stInviteTeamInGuildChannel_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteTeamInGuildChannel_ProtoFunID_descriptor_;
}
bool stInviteTeamInGuildChannel_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 78:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stInviteTeamInGuildChannel_ProtoFunID stInviteTeamInGuildChannel::FunID;
const stInviteTeamInGuildChannel_ProtoFunID stInviteTeamInGuildChannel::ProtoFunID_MIN;
const stInviteTeamInGuildChannel_ProtoFunID stInviteTeamInGuildChannel::ProtoFunID_MAX;
const int stInviteTeamInGuildChannel::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stInviteTeamInGuildChannel::kCharIDFieldNumber;
#endif  // !_MSC_VER

stInviteTeamInGuildChannel::stInviteTeamInGuildChannel()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stInviteTeamInGuildChannel::InitAsDefaultInstance() {
}

stInviteTeamInGuildChannel::stInviteTeamInGuildChannel(const stInviteTeamInGuildChannel& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stInviteTeamInGuildChannel::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stInviteTeamInGuildChannel::~stInviteTeamInGuildChannel() {
  SharedDtor();
}

void stInviteTeamInGuildChannel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stInviteTeamInGuildChannel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stInviteTeamInGuildChannel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stInviteTeamInGuildChannel_descriptor_;
}

const stInviteTeamInGuildChannel& stInviteTeamInGuildChannel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stInviteTeamInGuildChannel* stInviteTeamInGuildChannel::default_instance_ = NULL;

stInviteTeamInGuildChannel* stInviteTeamInGuildChannel::New() const {
  return new stInviteTeamInGuildChannel;
}

void stInviteTeamInGuildChannel::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stInviteTeamInGuildChannel::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stInviteTeamInGuildChannel::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stInviteTeamInGuildChannel::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stInviteTeamInGuildChannel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stInviteTeamInGuildChannel::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stInviteTeamInGuildChannel* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stInviteTeamInGuildChannel*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stInviteTeamInGuildChannel::MergeFrom(const stInviteTeamInGuildChannel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stInviteTeamInGuildChannel::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stInviteTeamInGuildChannel::CopyFrom(const stInviteTeamInGuildChannel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stInviteTeamInGuildChannel::IsInitialized() const {

  return true;
}

void stInviteTeamInGuildChannel::Swap(stInviteTeamInGuildChannel* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stInviteTeamInGuildChannel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stInviteTeamInGuildChannel_descriptor_;
  metadata.reflection = stInviteTeamInGuildChannel_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyGuildMemContribute_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuildMemContribute_ProtoModID_descriptor_;
}
bool stNotifyGuildMemContribute_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuildMemContribute_ProtoModID stNotifyGuildMemContribute::ModID;
const stNotifyGuildMemContribute_ProtoModID stNotifyGuildMemContribute::ProtoModID_MIN;
const stNotifyGuildMemContribute_ProtoModID stNotifyGuildMemContribute::ProtoModID_MAX;
const int stNotifyGuildMemContribute::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyGuildMemContribute_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuildMemContribute_ProtoFunID_descriptor_;
}
bool stNotifyGuildMemContribute_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 79:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuildMemContribute_ProtoFunID stNotifyGuildMemContribute::FunID;
const stNotifyGuildMemContribute_ProtoFunID stNotifyGuildMemContribute::ProtoFunID_MIN;
const stNotifyGuildMemContribute_ProtoFunID stNotifyGuildMemContribute::ProtoFunID_MAX;
const int stNotifyGuildMemContribute::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyGuildMemContribute::kCharIDFieldNumber;
const int stNotifyGuildMemContribute::kCurValFieldNumber;
#endif  // !_MSC_VER

stNotifyGuildMemContribute::stNotifyGuildMemContribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyGuildMemContribute::InitAsDefaultInstance() {
}

stNotifyGuildMemContribute::stNotifyGuildMemContribute(const stNotifyGuildMemContribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyGuildMemContribute::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  curval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyGuildMemContribute::~stNotifyGuildMemContribute() {
  SharedDtor();
}

void stNotifyGuildMemContribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyGuildMemContribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyGuildMemContribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuildMemContribute_descriptor_;
}

const stNotifyGuildMemContribute& stNotifyGuildMemContribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stNotifyGuildMemContribute* stNotifyGuildMemContribute::default_instance_ = NULL;

stNotifyGuildMemContribute* stNotifyGuildMemContribute::New() const {
  return new stNotifyGuildMemContribute;
}

void stNotifyGuildMemContribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    curval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyGuildMemContribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curVal;
        break;
      }

      // optional uint32 curVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curval_)));
          set_has_curval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyGuildMemContribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 curVal = 2;
  if (has_curval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyGuildMemContribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 curVal = 2;
  if (has_curval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyGuildMemContribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 curVal = 2;
    if (has_curval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyGuildMemContribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyGuildMemContribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyGuildMemContribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyGuildMemContribute::MergeFrom(const stNotifyGuildMemContribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_curval()) {
      set_curval(from.curval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyGuildMemContribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyGuildMemContribute::CopyFrom(const stNotifyGuildMemContribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyGuildMemContribute::IsInitialized() const {

  return true;
}

void stNotifyGuildMemContribute::Swap(stNotifyGuildMemContribute* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(curval_, other->curval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyGuildMemContribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyGuildMemContribute_descriptor_;
  metadata.reflection = stNotifyGuildMemContribute_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyGuildMemActivityDegree_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuildMemActivityDegree_ProtoModID_descriptor_;
}
bool stNotifyGuildMemActivityDegree_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuildMemActivityDegree_ProtoModID stNotifyGuildMemActivityDegree::ModID;
const stNotifyGuildMemActivityDegree_ProtoModID stNotifyGuildMemActivityDegree::ProtoModID_MIN;
const stNotifyGuildMemActivityDegree_ProtoModID stNotifyGuildMemActivityDegree::ProtoModID_MAX;
const int stNotifyGuildMemActivityDegree::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyGuildMemActivityDegree_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuildMemActivityDegree_ProtoFunID_descriptor_;
}
bool stNotifyGuildMemActivityDegree_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 80:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyGuildMemActivityDegree_ProtoFunID stNotifyGuildMemActivityDegree::FunID;
const stNotifyGuildMemActivityDegree_ProtoFunID stNotifyGuildMemActivityDegree::ProtoFunID_MIN;
const stNotifyGuildMemActivityDegree_ProtoFunID stNotifyGuildMemActivityDegree::ProtoFunID_MAX;
const int stNotifyGuildMemActivityDegree::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyGuildMemActivityDegree::kCharIDFieldNumber;
const int stNotifyGuildMemActivityDegree::kCurValFieldNumber;
#endif  // !_MSC_VER

stNotifyGuildMemActivityDegree::stNotifyGuildMemActivityDegree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyGuildMemActivityDegree::InitAsDefaultInstance() {
}

stNotifyGuildMemActivityDegree::stNotifyGuildMemActivityDegree(const stNotifyGuildMemActivityDegree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyGuildMemActivityDegree::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  curval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyGuildMemActivityDegree::~stNotifyGuildMemActivityDegree() {
  SharedDtor();
}

void stNotifyGuildMemActivityDegree::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyGuildMemActivityDegree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyGuildMemActivityDegree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyGuildMemActivityDegree_descriptor_;
}

const stNotifyGuildMemActivityDegree& stNotifyGuildMemActivityDegree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stNotifyGuildMemActivityDegree* stNotifyGuildMemActivityDegree::default_instance_ = NULL;

stNotifyGuildMemActivityDegree* stNotifyGuildMemActivityDegree::New() const {
  return new stNotifyGuildMemActivityDegree;
}

void stNotifyGuildMemActivityDegree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    curval_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyGuildMemActivityDegree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_curVal;
        break;
      }

      // optional uint32 curVal = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curVal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curval_)));
          set_has_curval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyGuildMemActivityDegree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 curVal = 2;
  if (has_curval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->curval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyGuildMemActivityDegree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 curVal = 2;
  if (has_curval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->curval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyGuildMemActivityDegree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 curVal = 2;
    if (has_curval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyGuildMemActivityDegree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyGuildMemActivityDegree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyGuildMemActivityDegree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyGuildMemActivityDegree::MergeFrom(const stNotifyGuildMemActivityDegree& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_curval()) {
      set_curval(from.curval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyGuildMemActivityDegree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyGuildMemActivityDegree::CopyFrom(const stNotifyGuildMemActivityDegree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyGuildMemActivityDegree::IsInitialized() const {

  return true;
}

void stNotifyGuildMemActivityDegree::Swap(stNotifyGuildMemActivityDegree* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(curval_, other->curval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyGuildMemActivityDegree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyGuildMemActivityDegree_descriptor_;
  metadata.reflection = stNotifyGuildMemActivityDegree_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqGuildManorFightWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildManorFightWin_ProtoModID_descriptor_;
}
bool stReqGuildManorFightWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildManorFightWin_ProtoModID stReqGuildManorFightWin::ModID;
const stReqGuildManorFightWin_ProtoModID stReqGuildManorFightWin::ProtoModID_MIN;
const stReqGuildManorFightWin_ProtoModID stReqGuildManorFightWin::ProtoModID_MAX;
const int stReqGuildManorFightWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqGuildManorFightWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildManorFightWin_ProtoFunID_descriptor_;
}
bool stReqGuildManorFightWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 81:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqGuildManorFightWin_ProtoFunID stReqGuildManorFightWin::FunID;
const stReqGuildManorFightWin_ProtoFunID stReqGuildManorFightWin::ProtoFunID_MIN;
const stReqGuildManorFightWin_ProtoFunID stReqGuildManorFightWin::ProtoFunID_MAX;
const int stReqGuildManorFightWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqGuildManorFightWin::kCharIDFieldNumber;
#endif  // !_MSC_VER

stReqGuildManorFightWin::stReqGuildManorFightWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqGuildManorFightWin::InitAsDefaultInstance() {
}

stReqGuildManorFightWin::stReqGuildManorFightWin(const stReqGuildManorFightWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqGuildManorFightWin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqGuildManorFightWin::~stReqGuildManorFightWin() {
  SharedDtor();
}

void stReqGuildManorFightWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqGuildManorFightWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqGuildManorFightWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqGuildManorFightWin_descriptor_;
}

const stReqGuildManorFightWin& stReqGuildManorFightWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqGuildManorFightWin* stReqGuildManorFightWin::default_instance_ = NULL;

stReqGuildManorFightWin* stReqGuildManorFightWin::New() const {
  return new stReqGuildManorFightWin;
}

void stReqGuildManorFightWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqGuildManorFightWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqGuildManorFightWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqGuildManorFightWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqGuildManorFightWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqGuildManorFightWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqGuildManorFightWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqGuildManorFightWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqGuildManorFightWin::MergeFrom(const stReqGuildManorFightWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqGuildManorFightWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqGuildManorFightWin::CopyFrom(const stReqGuildManorFightWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqGuildManorFightWin::IsInitialized() const {

  return true;
}

void stReqGuildManorFightWin::Swap(stReqGuildManorFightWin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqGuildManorFightWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqGuildManorFightWin_descriptor_;
  metadata.reflection = stReqGuildManorFightWin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynManorInfo::kManorIDFieldNumber;
const int stSynManorInfo::kOwnerGuildIDFieldNumber;
const int stSynManorInfo::kOwnerGuildNameFieldNumber;
const int stSynManorInfo::kSideAGuildIDFieldNumber;
const int stSynManorInfo::kSideBGuildIDFieldNumber;
#endif  // !_MSC_VER

stSynManorInfo::stSynManorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynManorInfo::InitAsDefaultInstance() {
}

stSynManorInfo::stSynManorInfo(const stSynManorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynManorInfo::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ownerguildid_ = 0u;
  ownerguildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sideaguildid_ = 0u;
  sidebguildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynManorInfo::~stSynManorInfo() {
  SharedDtor();
}

void stSynManorInfo::SharedDtor() {
  if (ownerguildname_ != &::google::protobuf::internal::kEmptyString) {
    delete ownerguildname_;
  }
  if (this != default_instance_) {
  }
}

void stSynManorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynManorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynManorInfo_descriptor_;
}

const stSynManorInfo& stSynManorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynManorInfo* stSynManorInfo::default_instance_ = NULL;

stSynManorInfo* stSynManorInfo::New() const {
  return new stSynManorInfo;
}

void stSynManorInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    ownerguildid_ = 0u;
    if (has_ownerguildname()) {
      if (ownerguildname_ != &::google::protobuf::internal::kEmptyString) {
        ownerguildname_->clear();
      }
    }
    sideaguildid_ = 0u;
    sidebguildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynManorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ownerGuildID;
        break;
      }

      // optional uint32 ownerGuildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ownerguildid_)));
          set_has_ownerguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ownerGuildName;
        break;
      }

      // optional string ownerGuildName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ownerGuildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ownerguildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ownerguildname().data(), this->ownerguildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sideAGuildID;
        break;
      }

      // optional uint32 sideAGuildID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sideAGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sideaguildid_)));
          set_has_sideaguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sideBGuildID;
        break;
      }

      // optional uint32 sideBGuildID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sideBGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sidebguildid_)));
          set_has_sidebguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynManorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  // optional uint32 ownerGuildID = 2;
  if (has_ownerguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->ownerguildid(), output);
  }

  // optional string ownerGuildName = 3;
  if (has_ownerguildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownerguildname().data(), this->ownerguildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ownerguildname(), output);
  }

  // optional uint32 sideAGuildID = 4;
  if (has_sideaguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sideaguildid(), output);
  }

  // optional uint32 sideBGuildID = 5;
  if (has_sidebguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sidebguildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynManorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  // optional uint32 ownerGuildID = 2;
  if (has_ownerguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->ownerguildid(), target);
  }

  // optional string ownerGuildName = 3;
  if (has_ownerguildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ownerguildname().data(), this->ownerguildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ownerguildname(), target);
  }

  // optional uint32 sideAGuildID = 4;
  if (has_sideaguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sideaguildid(), target);
  }

  // optional uint32 sideBGuildID = 5;
  if (has_sidebguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sidebguildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynManorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional uint32 ownerGuildID = 2;
    if (has_ownerguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ownerguildid());
    }

    // optional string ownerGuildName = 3;
    if (has_ownerguildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ownerguildname());
    }

    // optional uint32 sideAGuildID = 4;
    if (has_sideaguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sideaguildid());
    }

    // optional uint32 sideBGuildID = 5;
    if (has_sidebguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sidebguildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynManorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynManorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynManorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynManorInfo::MergeFrom(const stSynManorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_ownerguildid()) {
      set_ownerguildid(from.ownerguildid());
    }
    if (from.has_ownerguildname()) {
      set_ownerguildname(from.ownerguildname());
    }
    if (from.has_sideaguildid()) {
      set_sideaguildid(from.sideaguildid());
    }
    if (from.has_sidebguildid()) {
      set_sidebguildid(from.sidebguildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynManorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynManorInfo::CopyFrom(const stSynManorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynManorInfo::IsInitialized() const {

  return true;
}

void stSynManorInfo::Swap(stSynManorInfo* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(ownerguildid_, other->ownerguildid_);
    std::swap(ownerguildname_, other->ownerguildname_);
    std::swap(sideaguildid_, other->sideaguildid_);
    std::swap(sidebguildid_, other->sidebguildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynManorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynManorInfo_descriptor_;
  metadata.reflection = stSynManorInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetGuildManorFightInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildManorFightInfo_ProtoModID_descriptor_;
}
bool stRetGuildManorFightInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildManorFightInfo_ProtoModID stRetGuildManorFightInfo::ModID;
const stRetGuildManorFightInfo_ProtoModID stRetGuildManorFightInfo::ProtoModID_MIN;
const stRetGuildManorFightInfo_ProtoModID stRetGuildManorFightInfo::ProtoModID_MAX;
const int stRetGuildManorFightInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetGuildManorFightInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildManorFightInfo_ProtoFunID_descriptor_;
}
bool stRetGuildManorFightInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 82:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetGuildManorFightInfo_ProtoFunID stRetGuildManorFightInfo::FunID;
const stRetGuildManorFightInfo_ProtoFunID stRetGuildManorFightInfo::ProtoFunID_MIN;
const stRetGuildManorFightInfo_ProtoFunID stRetGuildManorFightInfo::ProtoFunID_MAX;
const int stRetGuildManorFightInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetGuildManorFightInfo::kManorInfosFieldNumber;
const int stRetGuildManorFightInfo::kApplyManorIDFieldNumber;
#endif  // !_MSC_VER

stRetGuildManorFightInfo::stRetGuildManorFightInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetGuildManorFightInfo::InitAsDefaultInstance() {
}

stRetGuildManorFightInfo::stRetGuildManorFightInfo(const stRetGuildManorFightInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetGuildManorFightInfo::SharedCtor() {
  _cached_size_ = 0;
  applymanorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetGuildManorFightInfo::~stRetGuildManorFightInfo() {
  SharedDtor();
}

void stRetGuildManorFightInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetGuildManorFightInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetGuildManorFightInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetGuildManorFightInfo_descriptor_;
}

const stRetGuildManorFightInfo& stRetGuildManorFightInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetGuildManorFightInfo* stRetGuildManorFightInfo::default_instance_ = NULL;

stRetGuildManorFightInfo* stRetGuildManorFightInfo::New() const {
  return new stRetGuildManorFightInfo;
}

void stRetGuildManorFightInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    applymanorid_ = 0u;
  }
  manorinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetGuildManorFightInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuildProto.stSynManorInfo manorInfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_manorInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_manorinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_manorInfos;
        if (input->ExpectTag(16)) goto parse_applyManorID;
        break;
      }

      // optional uint32 applyManorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_applyManorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &applymanorid_)));
          set_has_applymanorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetGuildManorFightInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuildProto.stSynManorInfo manorInfos = 1;
  for (int i = 0; i < this->manorinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->manorinfos(i), output);
  }

  // optional uint32 applyManorID = 2;
  if (has_applymanorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->applymanorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetGuildManorFightInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuildProto.stSynManorInfo manorInfos = 1;
  for (int i = 0; i < this->manorinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->manorinfos(i), target);
  }

  // optional uint32 applyManorID = 2;
  if (has_applymanorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->applymanorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetGuildManorFightInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional uint32 applyManorID = 2;
    if (has_applymanorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->applymanorid());
    }

  }
  // repeated .GuildProto.stSynManorInfo manorInfos = 1;
  total_size += 1 * this->manorinfos_size();
  for (int i = 0; i < this->manorinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->manorinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetGuildManorFightInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetGuildManorFightInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetGuildManorFightInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetGuildManorFightInfo::MergeFrom(const stRetGuildManorFightInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  manorinfos_.MergeFrom(from.manorinfos_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_applymanorid()) {
      set_applymanorid(from.applymanorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetGuildManorFightInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetGuildManorFightInfo::CopyFrom(const stRetGuildManorFightInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetGuildManorFightInfo::IsInitialized() const {

  return true;
}

void stRetGuildManorFightInfo::Swap(stRetGuildManorFightInfo* other) {
  if (other != this) {
    manorinfos_.Swap(&other->manorinfos_);
    std::swap(applymanorid_, other->applymanorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetGuildManorFightInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetGuildManorFightInfo_descriptor_;
  metadata.reflection = stRetGuildManorFightInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqOpenApplyManorFightWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenApplyManorFightWin_ProtoModID_descriptor_;
}
bool stReqOpenApplyManorFightWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenApplyManorFightWin_ProtoModID stReqOpenApplyManorFightWin::ModID;
const stReqOpenApplyManorFightWin_ProtoModID stReqOpenApplyManorFightWin::ProtoModID_MIN;
const stReqOpenApplyManorFightWin_ProtoModID stReqOpenApplyManorFightWin::ProtoModID_MAX;
const int stReqOpenApplyManorFightWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqOpenApplyManorFightWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenApplyManorFightWin_ProtoFunID_descriptor_;
}
bool stReqOpenApplyManorFightWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 83:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqOpenApplyManorFightWin_ProtoFunID stReqOpenApplyManorFightWin::FunID;
const stReqOpenApplyManorFightWin_ProtoFunID stReqOpenApplyManorFightWin::ProtoFunID_MIN;
const stReqOpenApplyManorFightWin_ProtoFunID stReqOpenApplyManorFightWin::ProtoFunID_MAX;
const int stReqOpenApplyManorFightWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqOpenApplyManorFightWin::kManorIDFieldNumber;
#endif  // !_MSC_VER

stReqOpenApplyManorFightWin::stReqOpenApplyManorFightWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqOpenApplyManorFightWin::InitAsDefaultInstance() {
}

stReqOpenApplyManorFightWin::stReqOpenApplyManorFightWin(const stReqOpenApplyManorFightWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqOpenApplyManorFightWin::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqOpenApplyManorFightWin::~stReqOpenApplyManorFightWin() {
  SharedDtor();
}

void stReqOpenApplyManorFightWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqOpenApplyManorFightWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqOpenApplyManorFightWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqOpenApplyManorFightWin_descriptor_;
}

const stReqOpenApplyManorFightWin& stReqOpenApplyManorFightWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqOpenApplyManorFightWin* stReqOpenApplyManorFightWin::default_instance_ = NULL;

stReqOpenApplyManorFightWin* stReqOpenApplyManorFightWin::New() const {
  return new stReqOpenApplyManorFightWin;
}

void stReqOpenApplyManorFightWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqOpenApplyManorFightWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqOpenApplyManorFightWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqOpenApplyManorFightWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqOpenApplyManorFightWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqOpenApplyManorFightWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqOpenApplyManorFightWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqOpenApplyManorFightWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqOpenApplyManorFightWin::MergeFrom(const stReqOpenApplyManorFightWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqOpenApplyManorFightWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqOpenApplyManorFightWin::CopyFrom(const stReqOpenApplyManorFightWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqOpenApplyManorFightWin::IsInitialized() const {

  return true;
}

void stReqOpenApplyManorFightWin::Swap(stReqOpenApplyManorFightWin* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqOpenApplyManorFightWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqOpenApplyManorFightWin_descriptor_;
  metadata.reflection = stReqOpenApplyManorFightWin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynManoryApplyInfo::kGuildIDFieldNumber;
const int stSynManoryApplyInfo::kGuildNameFieldNumber;
const int stSynManoryApplyInfo::kContributeFieldNumber;
#endif  // !_MSC_VER

stSynManoryApplyInfo::stSynManoryApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynManoryApplyInfo::InitAsDefaultInstance() {
}

stSynManoryApplyInfo::stSynManoryApplyInfo(const stSynManoryApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynManoryApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynManoryApplyInfo::~stSynManoryApplyInfo() {
  SharedDtor();
}

void stSynManoryApplyInfo::SharedDtor() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void stSynManoryApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynManoryApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynManoryApplyInfo_descriptor_;
}

const stSynManoryApplyInfo& stSynManoryApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynManoryApplyInfo* stSynManoryApplyInfo::default_instance_ = NULL;

stSynManoryApplyInfo* stSynManoryApplyInfo::New() const {
  return new stSynManoryApplyInfo;
}

void stSynManoryApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    contribute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynManoryApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_guildName;
        break;
      }

      // optional string guildName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribute;
        break;
      }

      // optional uint32 contribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynManoryApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  // optional string guildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->guildname(), output);
  }

  // optional uint32 contribute = 3;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynManoryApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  // optional string guildName = 2;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->guildname(), target);
  }

  // optional uint32 contribute = 3;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynManoryApplyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional string guildName = 2;
    if (has_guildname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional uint32 contribute = 3;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynManoryApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynManoryApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynManoryApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynManoryApplyInfo::MergeFrom(const stSynManoryApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynManoryApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynManoryApplyInfo::CopyFrom(const stSynManoryApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynManoryApplyInfo::IsInitialized() const {

  return true;
}

void stSynManoryApplyInfo::Swap(stSynManoryApplyInfo* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(guildname_, other->guildname_);
    std::swap(contribute_, other->contribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynManoryApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynManoryApplyInfo_descriptor_;
  metadata.reflection = stSynManoryApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stApplyManorWinInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorWinInfo_ProtoModID_descriptor_;
}
bool stApplyManorWinInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stApplyManorWinInfo_ProtoModID stApplyManorWinInfo::ModID;
const stApplyManorWinInfo_ProtoModID stApplyManorWinInfo::ProtoModID_MIN;
const stApplyManorWinInfo_ProtoModID stApplyManorWinInfo::ProtoModID_MAX;
const int stApplyManorWinInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stApplyManorWinInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorWinInfo_ProtoFunID_descriptor_;
}
bool stApplyManorWinInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 84:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stApplyManorWinInfo_ProtoFunID stApplyManorWinInfo::FunID;
const stApplyManorWinInfo_ProtoFunID stApplyManorWinInfo::ProtoFunID_MIN;
const stApplyManorWinInfo_ProtoFunID stApplyManorWinInfo::ProtoFunID_MAX;
const int stApplyManorWinInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stApplyManorWinInfo::kManorIDFieldNumber;
const int stApplyManorWinInfo::kApplyInfoFieldNumber;
#endif  // !_MSC_VER

stApplyManorWinInfo::stApplyManorWinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stApplyManorWinInfo::InitAsDefaultInstance() {
}

stApplyManorWinInfo::stApplyManorWinInfo(const stApplyManorWinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stApplyManorWinInfo::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stApplyManorWinInfo::~stApplyManorWinInfo() {
  SharedDtor();
}

void stApplyManorWinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stApplyManorWinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stApplyManorWinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorWinInfo_descriptor_;
}

const stApplyManorWinInfo& stApplyManorWinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stApplyManorWinInfo* stApplyManorWinInfo::default_instance_ = NULL;

stApplyManorWinInfo* stApplyManorWinInfo::New() const {
  return new stApplyManorWinInfo;
}

void stApplyManorWinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  applyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stApplyManorWinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applyInfo;
        break;
      }

      // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stApplyManorWinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
  for (int i = 0; i < this->applyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->applyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stApplyManorWinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
  for (int i = 0; i < this->applyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->applyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stApplyManorWinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

  }
  // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
  total_size += 1 * this->applyinfo_size();
  for (int i = 0; i < this->applyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stApplyManorWinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stApplyManorWinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stApplyManorWinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stApplyManorWinInfo::MergeFrom(const stApplyManorWinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyinfo_.MergeFrom(from.applyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stApplyManorWinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stApplyManorWinInfo::CopyFrom(const stApplyManorWinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stApplyManorWinInfo::IsInitialized() const {

  return true;
}

void stApplyManorWinInfo::Swap(stApplyManorWinInfo* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    applyinfo_.Swap(&other->applyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stApplyManorWinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stApplyManorWinInfo_descriptor_;
  metadata.reflection = stApplyManorWinInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRefreshManorApplyInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshManorApplyInfo_ProtoModID_descriptor_;
}
bool stRefreshManorApplyInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshManorApplyInfo_ProtoModID stRefreshManorApplyInfo::ModID;
const stRefreshManorApplyInfo_ProtoModID stRefreshManorApplyInfo::ProtoModID_MIN;
const stRefreshManorApplyInfo_ProtoModID stRefreshManorApplyInfo::ProtoModID_MAX;
const int stRefreshManorApplyInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRefreshManorApplyInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshManorApplyInfo_ProtoFunID_descriptor_;
}
bool stRefreshManorApplyInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 85:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRefreshManorApplyInfo_ProtoFunID stRefreshManorApplyInfo::FunID;
const stRefreshManorApplyInfo_ProtoFunID stRefreshManorApplyInfo::ProtoFunID_MIN;
const stRefreshManorApplyInfo_ProtoFunID stRefreshManorApplyInfo::ProtoFunID_MAX;
const int stRefreshManorApplyInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRefreshManorApplyInfo::kManorIDFieldNumber;
#endif  // !_MSC_VER

stRefreshManorApplyInfo::stRefreshManorApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRefreshManorApplyInfo::InitAsDefaultInstance() {
}

stRefreshManorApplyInfo::stRefreshManorApplyInfo(const stRefreshManorApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRefreshManorApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRefreshManorApplyInfo::~stRefreshManorApplyInfo() {
  SharedDtor();
}

void stRefreshManorApplyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRefreshManorApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRefreshManorApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRefreshManorApplyInfo_descriptor_;
}

const stRefreshManorApplyInfo& stRefreshManorApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRefreshManorApplyInfo* stRefreshManorApplyInfo::default_instance_ = NULL;

stRefreshManorApplyInfo* stRefreshManorApplyInfo::New() const {
  return new stRefreshManorApplyInfo;
}

void stRefreshManorApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRefreshManorApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRefreshManorApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRefreshManorApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRefreshManorApplyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRefreshManorApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRefreshManorApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRefreshManorApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRefreshManorApplyInfo::MergeFrom(const stRefreshManorApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRefreshManorApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRefreshManorApplyInfo::CopyFrom(const stRefreshManorApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRefreshManorApplyInfo::IsInitialized() const {

  return true;
}

void stRefreshManorApplyInfo::Swap(stRefreshManorApplyInfo* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRefreshManorApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRefreshManorApplyInfo_descriptor_;
  metadata.reflection = stRefreshManorApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetManorApplyInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetManorApplyInfo_ProtoModID_descriptor_;
}
bool stRetManorApplyInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetManorApplyInfo_ProtoModID stRetManorApplyInfo::ModID;
const stRetManorApplyInfo_ProtoModID stRetManorApplyInfo::ProtoModID_MIN;
const stRetManorApplyInfo_ProtoModID stRetManorApplyInfo::ProtoModID_MAX;
const int stRetManorApplyInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetManorApplyInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetManorApplyInfo_ProtoFunID_descriptor_;
}
bool stRetManorApplyInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 86:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetManorApplyInfo_ProtoFunID stRetManorApplyInfo::FunID;
const stRetManorApplyInfo_ProtoFunID stRetManorApplyInfo::ProtoFunID_MIN;
const stRetManorApplyInfo_ProtoFunID stRetManorApplyInfo::ProtoFunID_MAX;
const int stRetManorApplyInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetManorApplyInfo::kManorIDFieldNumber;
const int stRetManorApplyInfo::kApplyInfoFieldNumber;
#endif  // !_MSC_VER

stRetManorApplyInfo::stRetManorApplyInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetManorApplyInfo::InitAsDefaultInstance() {
}

stRetManorApplyInfo::stRetManorApplyInfo(const stRetManorApplyInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetManorApplyInfo::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetManorApplyInfo::~stRetManorApplyInfo() {
  SharedDtor();
}

void stRetManorApplyInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetManorApplyInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetManorApplyInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetManorApplyInfo_descriptor_;
}

const stRetManorApplyInfo& stRetManorApplyInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetManorApplyInfo* stRetManorApplyInfo::default_instance_ = NULL;

stRetManorApplyInfo* stRetManorApplyInfo::New() const {
  return new stRetManorApplyInfo;
}

void stRetManorApplyInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  applyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetManorApplyInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applyInfo;
        break;
      }

      // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_applyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetManorApplyInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
  for (int i = 0; i < this->applyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->applyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetManorApplyInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
  for (int i = 0; i < this->applyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->applyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetManorApplyInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

  }
  // repeated .GuildProto.stSynManoryApplyInfo applyInfo = 2;
  total_size += 1 * this->applyinfo_size();
  for (int i = 0; i < this->applyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetManorApplyInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetManorApplyInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetManorApplyInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetManorApplyInfo::MergeFrom(const stRetManorApplyInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  applyinfo_.MergeFrom(from.applyinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetManorApplyInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetManorApplyInfo::CopyFrom(const stRetManorApplyInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetManorApplyInfo::IsInitialized() const {

  return true;
}

void stRetManorApplyInfo::Swap(stRetManorApplyInfo* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    applyinfo_.Swap(&other->applyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetManorApplyInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetManorApplyInfo_descriptor_;
  metadata.reflection = stRetManorApplyInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stApplyManorFight_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorFight_ProtoModID_descriptor_;
}
bool stApplyManorFight_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stApplyManorFight_ProtoModID stApplyManorFight::ModID;
const stApplyManorFight_ProtoModID stApplyManorFight::ProtoModID_MIN;
const stApplyManorFight_ProtoModID stApplyManorFight::ProtoModID_MAX;
const int stApplyManorFight::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stApplyManorFight_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorFight_ProtoFunID_descriptor_;
}
bool stApplyManorFight_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 87:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stApplyManorFight_ProtoFunID stApplyManorFight::FunID;
const stApplyManorFight_ProtoFunID stApplyManorFight::ProtoFunID_MIN;
const stApplyManorFight_ProtoFunID stApplyManorFight::ProtoFunID_MAX;
const int stApplyManorFight::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stApplyManorFight::kManorIDFieldNumber;
const int stApplyManorFight::kContributeFieldNumber;
#endif  // !_MSC_VER

stApplyManorFight::stApplyManorFight()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stApplyManorFight::InitAsDefaultInstance() {
}

stApplyManorFight::stApplyManorFight(const stApplyManorFight& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stApplyManorFight::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  contribute_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stApplyManorFight::~stApplyManorFight() {
  SharedDtor();
}

void stApplyManorFight::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stApplyManorFight::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stApplyManorFight::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorFight_descriptor_;
}

const stApplyManorFight& stApplyManorFight::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stApplyManorFight* stApplyManorFight::default_instance_ = NULL;

stApplyManorFight* stApplyManorFight::New() const {
  return new stApplyManorFight;
}

void stApplyManorFight::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    contribute_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stApplyManorFight::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contribute;
        break;
      }

      // optional uint32 contribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stApplyManorFight::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  // optional uint32 contribute = 2;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->contribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stApplyManorFight::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  // optional uint32 contribute = 2;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->contribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stApplyManorFight::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional uint32 contribute = 2;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stApplyManorFight::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stApplyManorFight* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stApplyManorFight*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stApplyManorFight::MergeFrom(const stApplyManorFight& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stApplyManorFight::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stApplyManorFight::CopyFrom(const stApplyManorFight& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stApplyManorFight::IsInitialized() const {

  return true;
}

void stApplyManorFight::Swap(stApplyManorFight* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(contribute_, other->contribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stApplyManorFight::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stApplyManorFight_descriptor_;
  metadata.reflection = stApplyManorFight_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stApplyManorFightRet_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorFightRet_eResult_descriptor_;
}
bool stApplyManorFightRet_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stApplyManorFightRet_eResult stApplyManorFightRet::eSuccess;
const stApplyManorFightRet_eResult stApplyManorFightRet::eRes_Not_Enough;
const stApplyManorFightRet_eResult stApplyManorFightRet::eOut_Time;
const stApplyManorFightRet_eResult stApplyManorFightRet::eHas_No_Right;
const stApplyManorFightRet_eResult stApplyManorFightRet::eManor_ID_Error;
const stApplyManorFightRet_eResult stApplyManorFightRet::eManor_Has_Apply;
const stApplyManorFightRet_eResult stApplyManorFightRet::eResult_MIN;
const stApplyManorFightRet_eResult stApplyManorFightRet::eResult_MAX;
const int stApplyManorFightRet::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stApplyManorFightRet_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorFightRet_ProtoModID_descriptor_;
}
bool stApplyManorFightRet_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stApplyManorFightRet_ProtoModID stApplyManorFightRet::ModID;
const stApplyManorFightRet_ProtoModID stApplyManorFightRet::ProtoModID_MIN;
const stApplyManorFightRet_ProtoModID stApplyManorFightRet::ProtoModID_MAX;
const int stApplyManorFightRet::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stApplyManorFightRet_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorFightRet_ProtoFunID_descriptor_;
}
bool stApplyManorFightRet_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 88:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stApplyManorFightRet_ProtoFunID stApplyManorFightRet::FunID;
const stApplyManorFightRet_ProtoFunID stApplyManorFightRet::ProtoFunID_MIN;
const stApplyManorFightRet_ProtoFunID stApplyManorFightRet::ProtoFunID_MAX;
const int stApplyManorFightRet::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stApplyManorFightRet::kResultFieldNumber;
const int stApplyManorFightRet::kManorIDFieldNumber;
const int stApplyManorFightRet::kContributeFieldNumber;
const int stApplyManorFightRet::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stApplyManorFightRet::stApplyManorFightRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stApplyManorFightRet::InitAsDefaultInstance() {
}

stApplyManorFightRet::stApplyManorFightRet(const stApplyManorFightRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stApplyManorFightRet::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  manorid_ = 0u;
  contribute_ = 0u;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stApplyManorFightRet::~stApplyManorFightRet() {
  SharedDtor();
}

void stApplyManorFightRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stApplyManorFightRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stApplyManorFightRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stApplyManorFightRet_descriptor_;
}

const stApplyManorFightRet& stApplyManorFightRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stApplyManorFightRet* stApplyManorFightRet::default_instance_ = NULL;

stApplyManorFightRet* stApplyManorFightRet::New() const {
  return new stApplyManorFightRet;
}

void stApplyManorFightRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    manorid_ = 0u;
    contribute_ = 0u;
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stApplyManorFightRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stApplyManorFightRet.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stApplyManorFightRet_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stApplyManorFightRet_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_manorID;
        break;
      }

      // optional uint32 manorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribute;
        break;
      }

      // optional uint32 contribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guildID;
        break;
      }

      // optional uint32 guildID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stApplyManorFightRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stApplyManorFightRet.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 manorID = 2;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->manorid(), output);
  }

  // optional uint32 contribute = 3;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->contribute(), output);
  }

  // optional uint32 guildID = 4;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stApplyManorFightRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stApplyManorFightRet.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 manorID = 2;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->manorid(), target);
  }

  // optional uint32 contribute = 3;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->contribute(), target);
  }

  // optional uint32 guildID = 4;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stApplyManorFightRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stApplyManorFightRet.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 manorID = 2;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional uint32 contribute = 3;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->contribute());
    }

    // optional uint32 guildID = 4;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stApplyManorFightRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stApplyManorFightRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stApplyManorFightRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stApplyManorFightRet::MergeFrom(const stApplyManorFightRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stApplyManorFightRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stApplyManorFightRet::CopyFrom(const stApplyManorFightRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stApplyManorFightRet::IsInitialized() const {

  return true;
}

void stApplyManorFightRet::Swap(stApplyManorFightRet* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(manorid_, other->manorid_);
    std::swap(contribute_, other->contribute_);
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stApplyManorFightRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stApplyManorFightRet_descriptor_;
  metadata.reflection = stApplyManorFightRet_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqManorFightWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqManorFightWin_ProtoModID_descriptor_;
}
bool stReqManorFightWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqManorFightWin_ProtoModID stReqManorFightWin::ModID;
const stReqManorFightWin_ProtoModID stReqManorFightWin::ProtoModID_MIN;
const stReqManorFightWin_ProtoModID stReqManorFightWin::ProtoModID_MAX;
const int stReqManorFightWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqManorFightWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqManorFightWin_ProtoFunID_descriptor_;
}
bool stReqManorFightWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 89:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqManorFightWin_ProtoFunID stReqManorFightWin::FunID;
const stReqManorFightWin_ProtoFunID stReqManorFightWin::ProtoFunID_MIN;
const stReqManorFightWin_ProtoFunID stReqManorFightWin::ProtoFunID_MAX;
const int stReqManorFightWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqManorFightWin::kManorIDFieldNumber;
#endif  // !_MSC_VER

stReqManorFightWin::stReqManorFightWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqManorFightWin::InitAsDefaultInstance() {
}

stReqManorFightWin::stReqManorFightWin(const stReqManorFightWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqManorFightWin::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqManorFightWin::~stReqManorFightWin() {
  SharedDtor();
}

void stReqManorFightWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqManorFightWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqManorFightWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqManorFightWin_descriptor_;
}

const stReqManorFightWin& stReqManorFightWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqManorFightWin* stReqManorFightWin::default_instance_ = NULL;

stReqManorFightWin* stReqManorFightWin::New() const {
  return new stReqManorFightWin;
}

void stReqManorFightWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqManorFightWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqManorFightWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqManorFightWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqManorFightWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqManorFightWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqManorFightWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqManorFightWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqManorFightWin::MergeFrom(const stReqManorFightWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqManorFightWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqManorFightWin::CopyFrom(const stReqManorFightWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqManorFightWin::IsInitialized() const {

  return true;
}

void stReqManorFightWin::Swap(stReqManorFightWin* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqManorFightWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqManorFightWin_descriptor_;
  metadata.reflection = stReqManorFightWin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynFormationTeamInfo::kTeamIDFieldNumber;
const int stSynFormationTeamInfo::kNumFieldNumber;
#endif  // !_MSC_VER

stSynFormationTeamInfo::stSynFormationTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynFormationTeamInfo::InitAsDefaultInstance() {
}

stSynFormationTeamInfo::stSynFormationTeamInfo(const stSynFormationTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynFormationTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynFormationTeamInfo::~stSynFormationTeamInfo() {
  SharedDtor();
}

void stSynFormationTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynFormationTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynFormationTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynFormationTeamInfo_descriptor_;
}

const stSynFormationTeamInfo& stSynFormationTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynFormationTeamInfo* stSynFormationTeamInfo::default_instance_ = NULL;

stSynFormationTeamInfo* stSynFormationTeamInfo::New() const {
  return new stSynFormationTeamInfo;
}

void stSynFormationTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = 0u;
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynFormationTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 teamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional uint32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynFormationTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->teamid(), output);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynFormationTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 teamID = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->teamid(), target);
  }

  // optional uint32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynFormationTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 teamID = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynFormationTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynFormationTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynFormationTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynFormationTeamInfo::MergeFrom(const stSynFormationTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynFormationTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynFormationTeamInfo::CopyFrom(const stSynFormationTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynFormationTeamInfo::IsInitialized() const {

  return true;
}

void stSynFormationTeamInfo::Swap(stSynFormationTeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynFormationTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynFormationTeamInfo_descriptor_;
  metadata.reflection = stSynFormationTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetManorFightWinInfo_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetManorFightWinInfo_ProtoModID_descriptor_;
}
bool stRetManorFightWinInfo_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetManorFightWinInfo_ProtoModID stRetManorFightWinInfo::ModID;
const stRetManorFightWinInfo_ProtoModID stRetManorFightWinInfo::ProtoModID_MIN;
const stRetManorFightWinInfo_ProtoModID stRetManorFightWinInfo::ProtoModID_MAX;
const int stRetManorFightWinInfo::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetManorFightWinInfo_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetManorFightWinInfo_ProtoFunID_descriptor_;
}
bool stRetManorFightWinInfo_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 90:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetManorFightWinInfo_ProtoFunID stRetManorFightWinInfo::FunID;
const stRetManorFightWinInfo_ProtoFunID stRetManorFightWinInfo::ProtoFunID_MIN;
const stRetManorFightWinInfo_ProtoFunID stRetManorFightWinInfo::ProtoFunID_MAX;
const int stRetManorFightWinInfo::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetManorFightWinInfo::kMainJoinInNumFieldNumber;
const int stRetManorFightWinInfo::kLeftJoinInNumFieldNumber;
const int stRetManorFightWinInfo::kRightJoinInNumFieldNumber;
const int stRetManorFightWinInfo::kManorIDFieldNumber;
const int stRetManorFightWinInfo::kGuildANameFieldNumber;
const int stRetManorFightWinInfo::kGuildBNameFieldNumber;
const int stRetManorFightWinInfo::kMainWinGuildIDFieldNumber;
const int stRetManorFightWinInfo::kLeftWinGuildIDFieldNumber;
const int stRetManorFightWinInfo::kRightWinGuildIDFieldNumber;
#endif  // !_MSC_VER

stRetManorFightWinInfo::stRetManorFightWinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetManorFightWinInfo::InitAsDefaultInstance() {
}

stRetManorFightWinInfo::stRetManorFightWinInfo(const stRetManorFightWinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetManorFightWinInfo::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  guildaname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mainwinguildid_ = 0u;
  leftwinguildid_ = 0u;
  rightwinguildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetManorFightWinInfo::~stRetManorFightWinInfo() {
  SharedDtor();
}

void stRetManorFightWinInfo::SharedDtor() {
  if (guildaname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildaname_;
  }
  if (guildbname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildbname_;
  }
  if (this != default_instance_) {
  }
}

void stRetManorFightWinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetManorFightWinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetManorFightWinInfo_descriptor_;
}

const stRetManorFightWinInfo& stRetManorFightWinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetManorFightWinInfo* stRetManorFightWinInfo::default_instance_ = NULL;

stRetManorFightWinInfo* stRetManorFightWinInfo::New() const {
  return new stRetManorFightWinInfo;
}

void stRetManorFightWinInfo::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    manorid_ = 0u;
    if (has_guildaname()) {
      if (guildaname_ != &::google::protobuf::internal::kEmptyString) {
        guildaname_->clear();
      }
    }
    if (has_guildbname()) {
      if (guildbname_ != &::google::protobuf::internal::kEmptyString) {
        guildbname_->clear();
      }
    }
    mainwinguildid_ = 0u;
    leftwinguildid_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    rightwinguildid_ = 0u;
  }
  mainjoininnum_.Clear();
  leftjoininnum_.Clear();
  rightjoininnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetManorFightWinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuildProto.stSynFormationTeamInfo mainJoinInNum = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainJoinInNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mainjoininnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mainJoinInNum;
        if (input->ExpectTag(18)) goto parse_leftJoinInNum;
        break;
      }

      // repeated .GuildProto.stSynFormationTeamInfo leftJoinInNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leftJoinInNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_leftjoininnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_leftJoinInNum;
        if (input->ExpectTag(26)) goto parse_rightJoinInNum;
        break;
      }

      // repeated .GuildProto.stSynFormationTeamInfo rightJoinInNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rightJoinInNum:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rightjoininnum()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rightJoinInNum;
        if (input->ExpectTag(32)) goto parse_manorID;
        break;
      }

      // optional uint32 manorID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_guildAName;
        break;
      }

      // optional string guildAName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildAName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildaname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildaname().data(), this->guildaname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_guildBName;
        break;
      }

      // optional string guildBName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildBName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildbname().data(), this->guildbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mainWinGuildID;
        break;
      }

      // optional uint32 mainWinGuildID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mainWinGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mainwinguildid_)));
          set_has_mainwinguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_leftWinGuildID;
        break;
      }

      // optional uint32 leftWinGuildID = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftWinGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &leftwinguildid_)));
          set_has_leftwinguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_rightWinGuildID;
        break;
      }

      // optional uint32 rightWinGuildID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightWinGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rightwinguildid_)));
          set_has_rightwinguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetManorFightWinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuildProto.stSynFormationTeamInfo mainJoinInNum = 1;
  for (int i = 0; i < this->mainjoininnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mainjoininnum(i), output);
  }

  // repeated .GuildProto.stSynFormationTeamInfo leftJoinInNum = 2;
  for (int i = 0; i < this->leftjoininnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->leftjoininnum(i), output);
  }

  // repeated .GuildProto.stSynFormationTeamInfo rightJoinInNum = 3;
  for (int i = 0; i < this->rightjoininnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rightjoininnum(i), output);
  }

  // optional uint32 manorID = 4;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->manorid(), output);
  }

  // optional string guildAName = 5;
  if (has_guildaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildaname().data(), this->guildaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->guildaname(), output);
  }

  // optional string guildBName = 6;
  if (has_guildbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildbname().data(), this->guildbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->guildbname(), output);
  }

  // optional uint32 mainWinGuildID = 7;
  if (has_mainwinguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->mainwinguildid(), output);
  }

  // optional uint32 leftWinGuildID = 8;
  if (has_leftwinguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->leftwinguildid(), output);
  }

  // optional uint32 rightWinGuildID = 9;
  if (has_rightwinguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->rightwinguildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetManorFightWinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuildProto.stSynFormationTeamInfo mainJoinInNum = 1;
  for (int i = 0; i < this->mainjoininnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mainjoininnum(i), target);
  }

  // repeated .GuildProto.stSynFormationTeamInfo leftJoinInNum = 2;
  for (int i = 0; i < this->leftjoininnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->leftjoininnum(i), target);
  }

  // repeated .GuildProto.stSynFormationTeamInfo rightJoinInNum = 3;
  for (int i = 0; i < this->rightjoininnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rightjoininnum(i), target);
  }

  // optional uint32 manorID = 4;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->manorid(), target);
  }

  // optional string guildAName = 5;
  if (has_guildaname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildaname().data(), this->guildaname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->guildaname(), target);
  }

  // optional string guildBName = 6;
  if (has_guildbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildbname().data(), this->guildbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->guildbname(), target);
  }

  // optional uint32 mainWinGuildID = 7;
  if (has_mainwinguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->mainwinguildid(), target);
  }

  // optional uint32 leftWinGuildID = 8;
  if (has_leftwinguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->leftwinguildid(), target);
  }

  // optional uint32 rightWinGuildID = 9;
  if (has_rightwinguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->rightwinguildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetManorFightWinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional uint32 manorID = 4;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional string guildAName = 5;
    if (has_guildaname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildaname());
    }

    // optional string guildBName = 6;
    if (has_guildbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildbname());
    }

    // optional uint32 mainWinGuildID = 7;
    if (has_mainwinguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->mainwinguildid());
    }

    // optional uint32 leftWinGuildID = 8;
    if (has_leftwinguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->leftwinguildid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 rightWinGuildID = 9;
    if (has_rightwinguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rightwinguildid());
    }

  }
  // repeated .GuildProto.stSynFormationTeamInfo mainJoinInNum = 1;
  total_size += 1 * this->mainjoininnum_size();
  for (int i = 0; i < this->mainjoininnum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mainjoininnum(i));
  }

  // repeated .GuildProto.stSynFormationTeamInfo leftJoinInNum = 2;
  total_size += 1 * this->leftjoininnum_size();
  for (int i = 0; i < this->leftjoininnum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->leftjoininnum(i));
  }

  // repeated .GuildProto.stSynFormationTeamInfo rightJoinInNum = 3;
  total_size += 1 * this->rightjoininnum_size();
  for (int i = 0; i < this->rightjoininnum_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rightjoininnum(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetManorFightWinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetManorFightWinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetManorFightWinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetManorFightWinInfo::MergeFrom(const stRetManorFightWinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mainjoininnum_.MergeFrom(from.mainjoininnum_);
  leftjoininnum_.MergeFrom(from.leftjoininnum_);
  rightjoininnum_.MergeFrom(from.rightjoininnum_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_guildaname()) {
      set_guildaname(from.guildaname());
    }
    if (from.has_guildbname()) {
      set_guildbname(from.guildbname());
    }
    if (from.has_mainwinguildid()) {
      set_mainwinguildid(from.mainwinguildid());
    }
    if (from.has_leftwinguildid()) {
      set_leftwinguildid(from.leftwinguildid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rightwinguildid()) {
      set_rightwinguildid(from.rightwinguildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetManorFightWinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetManorFightWinInfo::CopyFrom(const stRetManorFightWinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetManorFightWinInfo::IsInitialized() const {

  return true;
}

void stRetManorFightWinInfo::Swap(stRetManorFightWinInfo* other) {
  if (other != this) {
    mainjoininnum_.Swap(&other->mainjoininnum_);
    leftjoininnum_.Swap(&other->leftjoininnum_);
    rightjoininnum_.Swap(&other->rightjoininnum_);
    std::swap(manorid_, other->manorid_);
    std::swap(guildaname_, other->guildaname_);
    std::swap(guildbname_, other->guildbname_);
    std::swap(mainwinguildid_, other->mainwinguildid_);
    std::swap(leftwinguildid_, other->leftwinguildid_);
    std::swap(rightwinguildid_, other->rightwinguildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetManorFightWinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetManorFightWinInfo_descriptor_;
  metadata.reflection = stRetManorFightWinInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqManorFightFormation_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqManorFightFormation_ProtoModID_descriptor_;
}
bool stReqManorFightFormation_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqManorFightFormation_ProtoModID stReqManorFightFormation::ModID;
const stReqManorFightFormation_ProtoModID stReqManorFightFormation::ProtoModID_MIN;
const stReqManorFightFormation_ProtoModID stReqManorFightFormation::ProtoModID_MAX;
const int stReqManorFightFormation::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqManorFightFormation_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqManorFightFormation_ProtoFunID_descriptor_;
}
bool stReqManorFightFormation_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 91:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqManorFightFormation_ProtoFunID stReqManorFightFormation::FunID;
const stReqManorFightFormation_ProtoFunID stReqManorFightFormation::ProtoFunID_MIN;
const stReqManorFightFormation_ProtoFunID stReqManorFightFormation::ProtoFunID_MAX;
const int stReqManorFightFormation::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqManorFightFormation::kManorIDFieldNumber;
const int stReqManorFightFormation::kFormationFieldNumber;
#endif  // !_MSC_VER

stReqManorFightFormation::stReqManorFightFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqManorFightFormation::InitAsDefaultInstance() {
}

stReqManorFightFormation::stReqManorFightFormation(const stReqManorFightFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqManorFightFormation::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  formation_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqManorFightFormation::~stReqManorFightFormation() {
  SharedDtor();
}

void stReqManorFightFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqManorFightFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqManorFightFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqManorFightFormation_descriptor_;
}

const stReqManorFightFormation& stReqManorFightFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqManorFightFormation* stReqManorFightFormation::default_instance_ = NULL;

stReqManorFightFormation* stReqManorFightFormation::New() const {
  return new stReqManorFightFormation;
}

void stReqManorFightFormation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    formation_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqManorFightFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_formation;
        break;
      }

      // optional .GuildProto.eFormation formation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eFormation_IsValid(value)) {
            set_formation(static_cast< ::GuildProto::eFormation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqManorFightFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  // optional .GuildProto.eFormation formation = 2;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->formation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqManorFightFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  // optional .GuildProto.eFormation formation = 2;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->formation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqManorFightFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional .GuildProto.eFormation formation = 2;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqManorFightFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqManorFightFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqManorFightFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqManorFightFormation::MergeFrom(const stReqManorFightFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_formation()) {
      set_formation(from.formation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqManorFightFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqManorFightFormation::CopyFrom(const stReqManorFightFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqManorFightFormation::IsInitialized() const {

  return true;
}

void stReqManorFightFormation::Swap(stReqManorFightFormation* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(formation_, other->formation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqManorFightFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqManorFightFormation_descriptor_;
  metadata.reflection = stReqManorFightFormation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynManorBattleMem::kCharIDFieldNumber;
const int stSynManorBattleMem::kNameFieldNumber;
const int stSynManorBattleMem::kJobFieldNumber;
const int stSynManorBattleMem::kSexFieldNumber;
const int stSynManorBattleMem::kLevelFieldNumber;
const int stSynManorBattleMem::kBattlePowerFieldNumber;
const int stSynManorBattleMem::kCurHPFieldNumber;
const int stSynManorBattleMem::kMaxHPFieldNumber;
const int stSynManorBattleMem::kPosFieldNumber;
const int stSynManorBattleMem::kTeamIDFieldNumber;
const int stSynManorBattleMem::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stSynManorBattleMem::stSynManorBattleMem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynManorBattleMem::InitAsDefaultInstance() {
}

stSynManorBattleMem::stSynManorBattleMem(const stSynManorBattleMem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynManorBattleMem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0u;
  sex_ = 0u;
  level_ = 0u;
  battlepower_ = 0u;
  curhp_ = 0u;
  maxhp_ = 0u;
  pos_ = 0u;
  teamid_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynManorBattleMem::~stSynManorBattleMem() {
  SharedDtor();
}

void stSynManorBattleMem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stSynManorBattleMem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynManorBattleMem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynManorBattleMem_descriptor_;
}

const stSynManorBattleMem& stSynManorBattleMem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynManorBattleMem* stSynManorBattleMem::default_instance_ = NULL;

stSynManorBattleMem* stSynManorBattleMem::New() const {
  return new stSynManorBattleMem;
}

void stSynManorBattleMem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    job_ = 0u;
    sex_ = 0u;
    level_ = 0u;
    battlepower_ = 0u;
    curhp_ = 0u;
    maxhp_ = 0u;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    pos_ = 0u;
    teamid_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynManorBattleMem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_job;
        break;
      }

      // optional uint32 job = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional uint32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_curHP;
        break;
      }

      // optional uint32 curHP = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curhp_)));
          set_has_curhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_maxHP;
        break;
      }

      // optional uint32 maxHP = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynManorBattleMem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->job(), output);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->sex(), output);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->level(), output);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->battlepower(), output);
  }

  // optional uint32 curHP = 7;
  if (has_curhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->curhp(), output);
  }

  // optional uint32 maxHP = 8;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->maxhp(), output);
  }

  // optional uint32 pos = 9;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->pos(), output);
  }

  // optional uint32 teamID = 10;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->teamid(), output);
  }

  // optional uint32 photoID = 11;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynManorBattleMem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional uint32 job = 3;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->job(), target);
  }

  // optional uint32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->sex(), target);
  }

  // optional uint32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->level(), target);
  }

  // optional uint32 battlePower = 6;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->battlepower(), target);
  }

  // optional uint32 curHP = 7;
  if (has_curhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->curhp(), target);
  }

  // optional uint32 maxHP = 8;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->maxhp(), target);
  }

  // optional uint32 pos = 9;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->pos(), target);
  }

  // optional uint32 teamID = 10;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->teamid(), target);
  }

  // optional uint32 photoID = 11;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynManorBattleMem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint32 job = 3;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 6;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 curHP = 7;
    if (has_curhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curhp());
    }

    // optional uint32 maxHP = 8;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 pos = 9;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 teamID = 10;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 photoID = 11;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynManorBattleMem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynManorBattleMem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynManorBattleMem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynManorBattleMem::MergeFrom(const stSynManorBattleMem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_curhp()) {
      set_curhp(from.curhp());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynManorBattleMem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynManorBattleMem::CopyFrom(const stSynManorBattleMem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynManorBattleMem::IsInitialized() const {

  return true;
}

void stSynManorBattleMem::Swap(stSynManorBattleMem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(curhp_, other->curhp_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(pos_, other->pos_);
    std::swap(teamid_, other->teamid_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynManorBattleMem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynManorBattleMem_descriptor_;
  metadata.reflection = stSynManorBattleMem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stRetManorFightFormation_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetManorFightFormation_ProtoModID_descriptor_;
}
bool stRetManorFightFormation_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetManorFightFormation_ProtoModID stRetManorFightFormation::ModID;
const stRetManorFightFormation_ProtoModID stRetManorFightFormation::ProtoModID_MIN;
const stRetManorFightFormation_ProtoModID stRetManorFightFormation::ProtoModID_MAX;
const int stRetManorFightFormation::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stRetManorFightFormation_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetManorFightFormation_ProtoFunID_descriptor_;
}
bool stRetManorFightFormation_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 92:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stRetManorFightFormation_ProtoFunID stRetManorFightFormation::FunID;
const stRetManorFightFormation_ProtoFunID stRetManorFightFormation::ProtoFunID_MIN;
const stRetManorFightFormation_ProtoFunID stRetManorFightFormation::ProtoFunID_MAX;
const int stRetManorFightFormation::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stRetManorFightFormation::kManorIDFieldNumber;
const int stRetManorFightFormation::kFormationFieldNumber;
const int stRetManorFightFormation::kSideATeamFieldNumber;
const int stRetManorFightFormation::kSideBTeamFieldNumber;
const int stRetManorFightFormation::kSideAGuildIDFieldNumber;
const int stRetManorFightFormation::kSideBGuildIDFieldNumber;
#endif  // !_MSC_VER

stRetManorFightFormation::stRetManorFightFormation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stRetManorFightFormation::InitAsDefaultInstance() {
}

stRetManorFightFormation::stRetManorFightFormation(const stRetManorFightFormation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stRetManorFightFormation::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  formation_ = 1;
  sideaguildid_ = 0u;
  sidebguildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stRetManorFightFormation::~stRetManorFightFormation() {
  SharedDtor();
}

void stRetManorFightFormation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stRetManorFightFormation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stRetManorFightFormation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stRetManorFightFormation_descriptor_;
}

const stRetManorFightFormation& stRetManorFightFormation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stRetManorFightFormation* stRetManorFightFormation::default_instance_ = NULL;

stRetManorFightFormation* stRetManorFightFormation::New() const {
  return new stRetManorFightFormation;
}

void stRetManorFightFormation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    formation_ = 1;
    sideaguildid_ = 0u;
    sidebguildid_ = 0u;
  }
  sideateam_.Clear();
  sidebteam_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stRetManorFightFormation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_formation;
        break;
      }

      // optional .GuildProto.eFormation formation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eFormation_IsValid(value)) {
            set_formation(static_cast< ::GuildProto::eFormation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sideATeam;
        break;
      }

      // repeated .GuildProto.stSynManorBattleMem sideATeam = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideATeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sideateam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sideATeam;
        if (input->ExpectTag(34)) goto parse_sideBTeam;
        break;
      }

      // repeated .GuildProto.stSynManorBattleMem sideBTeam = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideBTeam:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sidebteam()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sideBTeam;
        if (input->ExpectTag(40)) goto parse_sideAGuildID;
        break;
      }

      // optional uint32 sideAGuildID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sideAGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sideaguildid_)));
          set_has_sideaguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sideBGuildID;
        break;
      }

      // optional uint32 sideBGuildID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sideBGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sidebguildid_)));
          set_has_sidebguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stRetManorFightFormation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  // optional .GuildProto.eFormation formation = 2;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->formation(), output);
  }

  // repeated .GuildProto.stSynManorBattleMem sideATeam = 3;
  for (int i = 0; i < this->sideateam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->sideateam(i), output);
  }

  // repeated .GuildProto.stSynManorBattleMem sideBTeam = 4;
  for (int i = 0; i < this->sidebteam_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->sidebteam(i), output);
  }

  // optional uint32 sideAGuildID = 5;
  if (has_sideaguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sideaguildid(), output);
  }

  // optional uint32 sideBGuildID = 6;
  if (has_sidebguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sidebguildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stRetManorFightFormation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  // optional .GuildProto.eFormation formation = 2;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->formation(), target);
  }

  // repeated .GuildProto.stSynManorBattleMem sideATeam = 3;
  for (int i = 0; i < this->sideateam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->sideateam(i), target);
  }

  // repeated .GuildProto.stSynManorBattleMem sideBTeam = 4;
  for (int i = 0; i < this->sidebteam_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->sidebteam(i), target);
  }

  // optional uint32 sideAGuildID = 5;
  if (has_sideaguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sideaguildid(), target);
  }

  // optional uint32 sideBGuildID = 6;
  if (has_sidebguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sidebguildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stRetManorFightFormation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional .GuildProto.eFormation formation = 2;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation());
    }

    // optional uint32 sideAGuildID = 5;
    if (has_sideaguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sideaguildid());
    }

    // optional uint32 sideBGuildID = 6;
    if (has_sidebguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sidebguildid());
    }

  }
  // repeated .GuildProto.stSynManorBattleMem sideATeam = 3;
  total_size += 1 * this->sideateam_size();
  for (int i = 0; i < this->sideateam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sideateam(i));
  }

  // repeated .GuildProto.stSynManorBattleMem sideBTeam = 4;
  total_size += 1 * this->sidebteam_size();
  for (int i = 0; i < this->sidebteam_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidebteam(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stRetManorFightFormation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stRetManorFightFormation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stRetManorFightFormation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stRetManorFightFormation::MergeFrom(const stRetManorFightFormation& from) {
  GOOGLE_CHECK_NE(&from, this);
  sideateam_.MergeFrom(from.sideateam_);
  sidebteam_.MergeFrom(from.sidebteam_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_formation()) {
      set_formation(from.formation());
    }
    if (from.has_sideaguildid()) {
      set_sideaguildid(from.sideaguildid());
    }
    if (from.has_sidebguildid()) {
      set_sidebguildid(from.sidebguildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stRetManorFightFormation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stRetManorFightFormation::CopyFrom(const stRetManorFightFormation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stRetManorFightFormation::IsInitialized() const {

  return true;
}

void stRetManorFightFormation::Swap(stRetManorFightFormation* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(formation_, other->formation_);
    sideateam_.Swap(&other->sideateam_);
    sidebteam_.Swap(&other->sidebteam_);
    std::swap(sideaguildid_, other->sideaguildid_);
    std::swap(sidebguildid_, other->sidebguildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stRetManorFightFormation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stRetManorFightFormation_descriptor_;
  metadata.reflection = stRetManorFightFormation_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterManorFightTeam_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightTeam_ProtoModID_descriptor_;
}
bool stEnterManorFightTeam_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterManorFightTeam_ProtoModID stEnterManorFightTeam::ModID;
const stEnterManorFightTeam_ProtoModID stEnterManorFightTeam::ProtoModID_MIN;
const stEnterManorFightTeam_ProtoModID stEnterManorFightTeam::ProtoModID_MAX;
const int stEnterManorFightTeam::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterManorFightTeam_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightTeam_ProtoFunID_descriptor_;
}
bool stEnterManorFightTeam_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 93:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterManorFightTeam_ProtoFunID stEnterManorFightTeam::FunID;
const stEnterManorFightTeam_ProtoFunID stEnterManorFightTeam::ProtoFunID_MIN;
const stEnterManorFightTeam_ProtoFunID stEnterManorFightTeam::ProtoFunID_MAX;
const int stEnterManorFightTeam::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterManorFightTeam::kManorIDFieldNumber;
const int stEnterManorFightTeam::kFormationFieldNumber;
const int stEnterManorFightTeam::kTeamIDFieldNumber;
const int stEnterManorFightTeam::kPosFieldNumber;
const int stEnterManorFightTeam::kSideAGuildIDFieldNumber;
const int stEnterManorFightTeam::kSideBGuildIDFieldNumber;
const int stEnterManorFightTeam::kCharIDFieldNumber;
const int stEnterManorFightTeam::kNameFieldNumber;
const int stEnterManorFightTeam::kGuildIDFieldNumber;
const int stEnterManorFightTeam::kSexFieldNumber;
const int stEnterManorFightTeam::kJobFieldNumber;
const int stEnterManorFightTeam::kLevelFieldNumber;
const int stEnterManorFightTeam::kBattlePowerFieldNumber;
const int stEnterManorFightTeam::kMaxHPFieldNumber;
const int stEnterManorFightTeam::kPhotoIDFieldNumber;
#endif  // !_MSC_VER

stEnterManorFightTeam::stEnterManorFightTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterManorFightTeam::InitAsDefaultInstance() {
}

stEnterManorFightTeam::stEnterManorFightTeam(const stEnterManorFightTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterManorFightTeam::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  formation_ = 1;
  teamid_ = 0u;
  pos_ = 0u;
  sideaguildid_ = 0u;
  sidebguildid_ = 0u;
  charid_ = 0u;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildid_ = 0u;
  sex_ = 0u;
  job_ = 0u;
  level_ = 0u;
  battlepower_ = 0u;
  maxhp_ = 0u;
  photoid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterManorFightTeam::~stEnterManorFightTeam() {
  SharedDtor();
}

void stEnterManorFightTeam::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void stEnterManorFightTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterManorFightTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightTeam_descriptor_;
}

const stEnterManorFightTeam& stEnterManorFightTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stEnterManorFightTeam* stEnterManorFightTeam::default_instance_ = NULL;

stEnterManorFightTeam* stEnterManorFightTeam::New() const {
  return new stEnterManorFightTeam;
}

void stEnterManorFightTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    formation_ = 1;
    teamid_ = 0u;
    pos_ = 0u;
    sideaguildid_ = 0u;
    sidebguildid_ = 0u;
    charid_ = 0u;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    guildid_ = 0u;
    sex_ = 0u;
    job_ = 0u;
    level_ = 0u;
    battlepower_ = 0u;
    maxhp_ = 0u;
    photoid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterManorFightTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_formation;
        break;
      }

      // optional .GuildProto.eFormation formation = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eFormation_IsValid(value)) {
            set_formation(static_cast< ::GuildProto::eFormation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sideAGuildID;
        break;
      }

      // optional uint32 sideAGuildID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sideAGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sideaguildid_)));
          set_has_sideaguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sideBGuildID;
        break;
      }

      // optional uint32 sideBGuildID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sideBGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sidebguildid_)));
          set_has_sidebguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_charID;
        break;
      }

      // optional uint32 charID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_name;
        break;
      }

      // optional string name = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_guildID;
        break;
      }

      // optional uint32 guildID = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sex;
        break;
      }

      // optional uint32 sex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_job;
        break;
      }

      // optional uint32 job = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_level;
        break;
      }

      // optional uint32 level = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_maxHP;
        break;
      }

      // optional uint32 maxHP = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxHP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &maxhp_)));
          set_has_maxhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_photoID;
        break;
      }

      // optional uint32 photoID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_photoID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &photoid_)));
          set_has_photoid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterManorFightTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  // optional .GuildProto.eFormation formation = 2;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->formation(), output);
  }

  // optional uint32 teamID = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->teamid(), output);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->pos(), output);
  }

  // optional uint32 sideAGuildID = 5;
  if (has_sideaguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->sideaguildid(), output);
  }

  // optional uint32 sideBGuildID = 6;
  if (has_sidebguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sidebguildid(), output);
  }

  // optional uint32 charID = 7;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->charid(), output);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->name(), output);
  }

  // optional uint32 guildID = 9;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->guildid(), output);
  }

  // optional uint32 sex = 10;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->sex(), output);
  }

  // optional uint32 job = 11;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->job(), output);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->level(), output);
  }

  // optional uint32 battlePower = 13;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->battlepower(), output);
  }

  // optional uint32 maxHP = 14;
  if (has_maxhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(14, this->maxhp(), output);
  }

  // optional uint32 photoID = 15;
  if (has_photoid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(15, this->photoid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterManorFightTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  // optional .GuildProto.eFormation formation = 2;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->formation(), target);
  }

  // optional uint32 teamID = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->teamid(), target);
  }

  // optional uint32 pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->pos(), target);
  }

  // optional uint32 sideAGuildID = 5;
  if (has_sideaguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->sideaguildid(), target);
  }

  // optional uint32 sideBGuildID = 6;
  if (has_sidebguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sidebguildid(), target);
  }

  // optional uint32 charID = 7;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->charid(), target);
  }

  // optional string name = 8;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->name(), target);
  }

  // optional uint32 guildID = 9;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->guildid(), target);
  }

  // optional uint32 sex = 10;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->sex(), target);
  }

  // optional uint32 job = 11;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->job(), target);
  }

  // optional uint32 level = 12;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->level(), target);
  }

  // optional uint32 battlePower = 13;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->battlepower(), target);
  }

  // optional uint32 maxHP = 14;
  if (has_maxhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(14, this->maxhp(), target);
  }

  // optional uint32 photoID = 15;
  if (has_photoid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(15, this->photoid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterManorFightTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional .GuildProto.eFormation formation = 2;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation());
    }

    // optional uint32 teamID = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 sideAGuildID = 5;
    if (has_sideaguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sideaguildid());
    }

    // optional uint32 sideBGuildID = 6;
    if (has_sidebguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sidebguildid());
    }

    // optional uint32 charID = 7;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional string name = 8;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional uint32 guildID = 9;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 sex = 10;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sex());
    }

    // optional uint32 job = 11;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->job());
    }

    // optional uint32 level = 12;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 13;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 maxHP = 14;
    if (has_maxhp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->maxhp());
    }

    // optional uint32 photoID = 15;
    if (has_photoid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->photoid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterManorFightTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterManorFightTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterManorFightTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterManorFightTeam::MergeFrom(const stEnterManorFightTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_formation()) {
      set_formation(from.formation());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_sideaguildid()) {
      set_sideaguildid(from.sideaguildid());
    }
    if (from.has_sidebguildid()) {
      set_sidebguildid(from.sidebguildid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_maxhp()) {
      set_maxhp(from.maxhp());
    }
    if (from.has_photoid()) {
      set_photoid(from.photoid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterManorFightTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterManorFightTeam::CopyFrom(const stEnterManorFightTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterManorFightTeam::IsInitialized() const {

  return true;
}

void stEnterManorFightTeam::Swap(stEnterManorFightTeam* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(formation_, other->formation_);
    std::swap(teamid_, other->teamid_);
    std::swap(pos_, other->pos_);
    std::swap(sideaguildid_, other->sideaguildid_);
    std::swap(sidebguildid_, other->sidebguildid_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(guildid_, other->guildid_);
    std::swap(sex_, other->sex_);
    std::swap(job_, other->job_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(maxhp_, other->maxhp_);
    std::swap(photoid_, other->photoid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterManorFightTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterManorFightTeam_descriptor_;
  metadata.reflection = stEnterManorFightTeam_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stEnterManorFightTeamResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightTeamResult_eResult_descriptor_;
}
bool stEnterManorFightTeamResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterManorFightTeamResult_eResult stEnterManorFightTeamResult::eSuccess;
const stEnterManorFightTeamResult_eResult stEnterManorFightTeamResult::eNot_ChallengeGuildID;
const stEnterManorFightTeamResult_eResult stEnterManorFightTeamResult::ePos_Not_Empty;
const stEnterManorFightTeamResult_eResult stEnterManorFightTeamResult::eNot_In_Time;
const stEnterManorFightTeamResult_eResult stEnterManorFightTeamResult::eResult_MIN;
const stEnterManorFightTeamResult_eResult stEnterManorFightTeamResult::eResult_MAX;
const int stEnterManorFightTeamResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterManorFightTeamResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightTeamResult_ProtoModID_descriptor_;
}
bool stEnterManorFightTeamResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterManorFightTeamResult_ProtoModID stEnterManorFightTeamResult::ModID;
const stEnterManorFightTeamResult_ProtoModID stEnterManorFightTeamResult::ProtoModID_MIN;
const stEnterManorFightTeamResult_ProtoModID stEnterManorFightTeamResult::ProtoModID_MAX;
const int stEnterManorFightTeamResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stEnterManorFightTeamResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightTeamResult_ProtoFunID_descriptor_;
}
bool stEnterManorFightTeamResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 94:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stEnterManorFightTeamResult_ProtoFunID stEnterManorFightTeamResult::FunID;
const stEnterManorFightTeamResult_ProtoFunID stEnterManorFightTeamResult::ProtoFunID_MIN;
const stEnterManorFightTeamResult_ProtoFunID stEnterManorFightTeamResult::ProtoFunID_MAX;
const int stEnterManorFightTeamResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stEnterManorFightTeamResult::kResultFieldNumber;
const int stEnterManorFightTeamResult::kManorIDFieldNumber;
const int stEnterManorFightTeamResult::kFormationFieldNumber;
const int stEnterManorFightTeamResult::kTeamIDFieldNumber;
const int stEnterManorFightTeamResult::kPosFieldNumber;
const int stEnterManorFightTeamResult::kSideAGuildIDFieldNumber;
const int stEnterManorFightTeamResult::kSideBGuildIDFieldNumber;
#endif  // !_MSC_VER

stEnterManorFightTeamResult::stEnterManorFightTeamResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stEnterManorFightTeamResult::InitAsDefaultInstance() {
}

stEnterManorFightTeamResult::stEnterManorFightTeamResult(const stEnterManorFightTeamResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stEnterManorFightTeamResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  manorid_ = 0u;
  formation_ = 1;
  teamid_ = 0u;
  pos_ = 0u;
  sideaguildid_ = 0u;
  sidebguildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stEnterManorFightTeamResult::~stEnterManorFightTeamResult() {
  SharedDtor();
}

void stEnterManorFightTeamResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stEnterManorFightTeamResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stEnterManorFightTeamResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stEnterManorFightTeamResult_descriptor_;
}

const stEnterManorFightTeamResult& stEnterManorFightTeamResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stEnterManorFightTeamResult* stEnterManorFightTeamResult::default_instance_ = NULL;

stEnterManorFightTeamResult* stEnterManorFightTeamResult::New() const {
  return new stEnterManorFightTeamResult;
}

void stEnterManorFightTeamResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    manorid_ = 0u;
    formation_ = 1;
    teamid_ = 0u;
    pos_ = 0u;
    sideaguildid_ = 0u;
    sidebguildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stEnterManorFightTeamResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stEnterManorFightTeamResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stEnterManorFightTeamResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stEnterManorFightTeamResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_manorID;
        break;
      }

      // optional uint32 manorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_formation;
        break;
      }

      // optional .GuildProto.eFormation formation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::eFormation_IsValid(value)) {
            set_formation(static_cast< ::GuildProto::eFormation >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sideAGuildID;
        break;
      }

      // optional uint32 sideAGuildID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sideAGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sideaguildid_)));
          set_has_sideaguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sideBGuildID;
        break;
      }

      // optional uint32 sideBGuildID = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sideBGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sidebguildid_)));
          set_has_sidebguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stEnterManorFightTeamResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stEnterManorFightTeamResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 manorID = 2;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->manorid(), output);
  }

  // optional .GuildProto.eFormation formation = 3;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->formation(), output);
  }

  // optional uint32 teamID = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teamid(), output);
  }

  // optional uint32 pos = 5;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->pos(), output);
  }

  // optional uint32 sideAGuildID = 6;
  if (has_sideaguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sideaguildid(), output);
  }

  // optional uint32 sideBGuildID = 7;
  if (has_sidebguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->sidebguildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stEnterManorFightTeamResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stEnterManorFightTeamResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 manorID = 2;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->manorid(), target);
  }

  // optional .GuildProto.eFormation formation = 3;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->formation(), target);
  }

  // optional uint32 teamID = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teamid(), target);
  }

  // optional uint32 pos = 5;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->pos(), target);
  }

  // optional uint32 sideAGuildID = 6;
  if (has_sideaguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->sideaguildid(), target);
  }

  // optional uint32 sideBGuildID = 7;
  if (has_sidebguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->sidebguildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stEnterManorFightTeamResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stEnterManorFightTeamResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 manorID = 2;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional .GuildProto.eFormation formation = 3;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->formation());
    }

    // optional uint32 teamID = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 pos = 5;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

    // optional uint32 sideAGuildID = 6;
    if (has_sideaguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sideaguildid());
    }

    // optional uint32 sideBGuildID = 7;
    if (has_sidebguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sidebguildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stEnterManorFightTeamResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stEnterManorFightTeamResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stEnterManorFightTeamResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stEnterManorFightTeamResult::MergeFrom(const stEnterManorFightTeamResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_formation()) {
      set_formation(from.formation());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_sideaguildid()) {
      set_sideaguildid(from.sideaguildid());
    }
    if (from.has_sidebguildid()) {
      set_sidebguildid(from.sidebguildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stEnterManorFightTeamResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stEnterManorFightTeamResult::CopyFrom(const stEnterManorFightTeamResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stEnterManorFightTeamResult::IsInitialized() const {

  return true;
}

void stEnterManorFightTeamResult::Swap(stEnterManorFightTeamResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(manorid_, other->manorid_);
    std::swap(formation_, other->formation_);
    std::swap(teamid_, other->teamid_);
    std::swap(pos_, other->pos_);
    std::swap(sideaguildid_, other->sideaguildid_);
    std::swap(sidebguildid_, other->sidebguildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stEnterManorFightTeamResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stEnterManorFightTeamResult_descriptor_;
  metadata.reflection = stEnterManorFightTeamResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyLeaveManorFightWin_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLeaveManorFightWin_ProtoModID_descriptor_;
}
bool stNotifyLeaveManorFightWin_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyLeaveManorFightWin_ProtoModID stNotifyLeaveManorFightWin::ModID;
const stNotifyLeaveManorFightWin_ProtoModID stNotifyLeaveManorFightWin::ProtoModID_MIN;
const stNotifyLeaveManorFightWin_ProtoModID stNotifyLeaveManorFightWin::ProtoModID_MAX;
const int stNotifyLeaveManorFightWin::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyLeaveManorFightWin_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLeaveManorFightWin_ProtoFunID_descriptor_;
}
bool stNotifyLeaveManorFightWin_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 95:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyLeaveManorFightWin_ProtoFunID stNotifyLeaveManorFightWin::FunID;
const stNotifyLeaveManorFightWin_ProtoFunID stNotifyLeaveManorFightWin::ProtoFunID_MIN;
const stNotifyLeaveManorFightWin_ProtoFunID stNotifyLeaveManorFightWin::ProtoFunID_MAX;
const int stNotifyLeaveManorFightWin::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyLeaveManorFightWin::kCharIDFieldNumber;
const int stNotifyLeaveManorFightWin::kGuildIDFieldNumber;
const int stNotifyLeaveManorFightWin::kFormationFieldNumber;
const int stNotifyLeaveManorFightWin::kTeamIDFieldNumber;
#endif  // !_MSC_VER

stNotifyLeaveManorFightWin::stNotifyLeaveManorFightWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyLeaveManorFightWin::InitAsDefaultInstance() {
}

stNotifyLeaveManorFightWin::stNotifyLeaveManorFightWin(const stNotifyLeaveManorFightWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyLeaveManorFightWin::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  guildid_ = 0u;
  formation_ = 0u;
  teamid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyLeaveManorFightWin::~stNotifyLeaveManorFightWin() {
  SharedDtor();
}

void stNotifyLeaveManorFightWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyLeaveManorFightWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyLeaveManorFightWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyLeaveManorFightWin_descriptor_;
}

const stNotifyLeaveManorFightWin& stNotifyLeaveManorFightWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stNotifyLeaveManorFightWin* stNotifyLeaveManorFightWin::default_instance_ = NULL;

stNotifyLeaveManorFightWin* stNotifyLeaveManorFightWin::New() const {
  return new stNotifyLeaveManorFightWin;
}

void stNotifyLeaveManorFightWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    guildid_ = 0u;
    formation_ = 0u;
    teamid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyLeaveManorFightWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_guildID;
        break;
      }

      // optional uint32 guildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_formation;
        break;
      }

      // optional uint32 formation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formation_)));
          set_has_formation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyLeaveManorFightWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->guildid(), output);
  }

  // optional uint32 formation = 3;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->formation(), output);
  }

  // optional uint32 teamID = 4;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyLeaveManorFightWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 guildID = 2;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->guildid(), target);
  }

  // optional uint32 formation = 3;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->formation(), target);
  }

  // optional uint32 teamID = 4;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyLeaveManorFightWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 guildID = 2;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 formation = 3;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formation());
    }

    // optional uint32 teamID = 4;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyLeaveManorFightWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyLeaveManorFightWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyLeaveManorFightWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyLeaveManorFightWin::MergeFrom(const stNotifyLeaveManorFightWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_formation()) {
      set_formation(from.formation());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyLeaveManorFightWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyLeaveManorFightWin::CopyFrom(const stNotifyLeaveManorFightWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyLeaveManorFightWin::IsInitialized() const {

  return true;
}

void stNotifyLeaveManorFightWin::Swap(stNotifyLeaveManorFightWin* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(guildid_, other->guildid_);
    std::swap(formation_, other->formation_);
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyLeaveManorFightWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyLeaveManorFightWin_descriptor_;
  metadata.reflection = stNotifyLeaveManorFightWin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int stSynManorFightItem::kRoleNameFieldNumber;
const int stSynManorFightItem::kLevelFieldNumber;
const int stSynManorFightItem::kBattlePowerFieldNumber;
const int stSynManorFightItem::kKillNumFieldNumber;
const int stSynManorFightItem::kIsDieFieldNumber;
#endif  // !_MSC_VER

stSynManorFightItem::stSynManorFightItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynManorFightItem::InitAsDefaultInstance() {
}

stSynManorFightItem::stSynManorFightItem(const stSynManorFightItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynManorFightItem::SharedCtor() {
  _cached_size_ = 0;
  rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0u;
  battlepower_ = 0u;
  killnum_ = 0u;
  isdie_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynManorFightItem::~stSynManorFightItem() {
  SharedDtor();
}

void stSynManorFightItem::SharedDtor() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (this != default_instance_) {
  }
}

void stSynManorFightItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynManorFightItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynManorFightItem_descriptor_;
}

const stSynManorFightItem& stSynManorFightItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynManorFightItem* stSynManorFightItem::default_instance_ = NULL;

stSynManorFightItem* stSynManorFightItem::New() const {
  return new stSynManorFightItem;
}

void stSynManorFightItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_rolename()) {
      if (rolename_ != &::google::protobuf::internal::kEmptyString) {
        rolename_->clear();
      }
    }
    level_ = 0u;
    battlepower_ = 0u;
    killnum_ = 0u;
    isdie_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynManorFightItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string roleName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_rolename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->rolename().data(), this->rolename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional uint32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_battlePower;
        break;
      }

      // optional uint32 battlePower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlePower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &battlepower_)));
          set_has_battlepower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_killNum;
        break;
      }

      // optional uint32 killNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &killnum_)));
          set_has_killnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isDie;
        break;
      }

      // optional bool isDie = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isDie:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdie_)));
          set_has_isdie();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynManorFightItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->rolename(), output);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->level(), output);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->battlepower(), output);
  }

  // optional uint32 killNum = 4;
  if (has_killnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->killnum(), output);
  }

  // optional bool isDie = 5;
  if (has_isdie()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdie(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynManorFightItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string roleName = 1;
  if (has_rolename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->rolename().data(), this->rolename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->rolename(), target);
  }

  // optional uint32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->level(), target);
  }

  // optional uint32 battlePower = 3;
  if (has_battlepower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->battlepower(), target);
  }

  // optional uint32 killNum = 4;
  if (has_killnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->killnum(), target);
  }

  // optional bool isDie = 5;
  if (has_isdie()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdie(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynManorFightItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string roleName = 1;
    if (has_rolename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->rolename());
    }

    // optional uint32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->level());
    }

    // optional uint32 battlePower = 3;
    if (has_battlepower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->battlepower());
    }

    // optional uint32 killNum = 4;
    if (has_killnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->killnum());
    }

    // optional bool isDie = 5;
    if (has_isdie()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynManorFightItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynManorFightItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynManorFightItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynManorFightItem::MergeFrom(const stSynManorFightItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rolename()) {
      set_rolename(from.rolename());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_battlepower()) {
      set_battlepower(from.battlepower());
    }
    if (from.has_killnum()) {
      set_killnum(from.killnum());
    }
    if (from.has_isdie()) {
      set_isdie(from.isdie());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynManorFightItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynManorFightItem::CopyFrom(const stSynManorFightItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynManorFightItem::IsInitialized() const {

  return true;
}

void stSynManorFightItem::Swap(stSynManorFightItem* other) {
  if (other != this) {
    std::swap(rolename_, other->rolename_);
    std::swap(level_, other->level_);
    std::swap(battlepower_, other->battlepower_);
    std::swap(killnum_, other->killnum_);
    std::swap(isdie_, other->isdie_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynManorFightItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynManorFightItem_descriptor_;
  metadata.reflection = stSynManorFightItem_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stManorFightPKResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightPKResult_ProtoModID_descriptor_;
}
bool stManorFightPKResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightPKResult_ProtoModID stManorFightPKResult::ModID;
const stManorFightPKResult_ProtoModID stManorFightPKResult::ProtoModID_MIN;
const stManorFightPKResult_ProtoModID stManorFightPKResult::ProtoModID_MAX;
const int stManorFightPKResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stManorFightPKResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightPKResult_ProtoFunID_descriptor_;
}
bool stManorFightPKResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 96:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightPKResult_ProtoFunID stManorFightPKResult::FunID;
const stManorFightPKResult_ProtoFunID stManorFightPKResult::ProtoFunID_MIN;
const stManorFightPKResult_ProtoFunID stManorFightPKResult::ProtoFunID_MAX;
const int stManorFightPKResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stManorFightPKResult::kSideAFieldNumber;
const int stManorFightPKResult::kSideBFieldNumber;
#endif  // !_MSC_VER

stManorFightPKResult::stManorFightPKResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stManorFightPKResult::InitAsDefaultInstance() {
}

stManorFightPKResult::stManorFightPKResult(const stManorFightPKResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stManorFightPKResult::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stManorFightPKResult::~stManorFightPKResult() {
  SharedDtor();
}

void stManorFightPKResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stManorFightPKResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stManorFightPKResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightPKResult_descriptor_;
}

const stManorFightPKResult& stManorFightPKResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stManorFightPKResult* stManorFightPKResult::default_instance_ = NULL;

stManorFightPKResult* stManorFightPKResult::New() const {
  return new stManorFightPKResult;
}

void stManorFightPKResult::Clear() {
  sidea_.Clear();
  sideb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stManorFightPKResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuildProto.stSynManorFightItem sideA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sidea()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sideA;
        if (input->ExpectTag(18)) goto parse_sideB;
        break;
      }

      // repeated .GuildProto.stSynManorFightItem sideB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sideb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sideB;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stManorFightPKResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuildProto.stSynManorFightItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sidea(i), output);
  }

  // repeated .GuildProto.stSynManorFightItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sideb(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stManorFightPKResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuildProto.stSynManorFightItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sidea(i), target);
  }

  // repeated .GuildProto.stSynManorFightItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sideb(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stManorFightPKResult::ByteSize() const {
  int total_size = 0;

  // repeated .GuildProto.stSynManorFightItem sideA = 1;
  total_size += 1 * this->sidea_size();
  for (int i = 0; i < this->sidea_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidea(i));
  }

  // repeated .GuildProto.stSynManorFightItem sideB = 2;
  total_size += 1 * this->sideb_size();
  for (int i = 0; i < this->sideb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sideb(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stManorFightPKResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stManorFightPKResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stManorFightPKResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stManorFightPKResult::MergeFrom(const stManorFightPKResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  sidea_.MergeFrom(from.sidea_);
  sideb_.MergeFrom(from.sideb_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stManorFightPKResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stManorFightPKResult::CopyFrom(const stManorFightPKResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stManorFightPKResult::IsInitialized() const {

  return true;
}

void stManorFightPKResult::Swap(stManorFightPKResult* other) {
  if (other != this) {
    sidea_.Swap(&other->sidea_);
    sideb_.Swap(&other->sideb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stManorFightPKResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stManorFightPKResult_descriptor_;
  metadata.reflection = stManorFightPKResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stManorFightPKFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightPKFail_ProtoModID_descriptor_;
}
bool stManorFightPKFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightPKFail_ProtoModID stManorFightPKFail::ModID;
const stManorFightPKFail_ProtoModID stManorFightPKFail::ProtoModID_MIN;
const stManorFightPKFail_ProtoModID stManorFightPKFail::ProtoModID_MAX;
const int stManorFightPKFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stManorFightPKFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightPKFail_ProtoFunID_descriptor_;
}
bool stManorFightPKFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 97:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightPKFail_ProtoFunID stManorFightPKFail::FunID;
const stManorFightPKFail_ProtoFunID stManorFightPKFail::ProtoFunID_MIN;
const stManorFightPKFail_ProtoFunID stManorFightPKFail::ProtoFunID_MAX;
const int stManorFightPKFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stManorFightPKFail::kSideAFieldNumber;
const int stManorFightPKFail::kSideBFieldNumber;
#endif  // !_MSC_VER

stManorFightPKFail::stManorFightPKFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stManorFightPKFail::InitAsDefaultInstance() {
}

stManorFightPKFail::stManorFightPKFail(const stManorFightPKFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stManorFightPKFail::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stManorFightPKFail::~stManorFightPKFail() {
  SharedDtor();
}

void stManorFightPKFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stManorFightPKFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stManorFightPKFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightPKFail_descriptor_;
}

const stManorFightPKFail& stManorFightPKFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stManorFightPKFail* stManorFightPKFail::default_instance_ = NULL;

stManorFightPKFail* stManorFightPKFail::New() const {
  return new stManorFightPKFail;
}

void stManorFightPKFail::Clear() {
  sidea_.Clear();
  sideb_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stManorFightPKFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .GuildProto.stSynManorFightItem sideA = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideA:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sidea()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_sideA;
        if (input->ExpectTag(18)) goto parse_sideB;
        break;
      }

      // repeated .GuildProto.stSynManorFightItem sideB = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sideB:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sideb()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sideB;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stManorFightPKFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .GuildProto.stSynManorFightItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->sidea(i), output);
  }

  // repeated .GuildProto.stSynManorFightItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sideb(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stManorFightPKFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .GuildProto.stSynManorFightItem sideA = 1;
  for (int i = 0; i < this->sidea_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->sidea(i), target);
  }

  // repeated .GuildProto.stSynManorFightItem sideB = 2;
  for (int i = 0; i < this->sideb_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sideb(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stManorFightPKFail::ByteSize() const {
  int total_size = 0;

  // repeated .GuildProto.stSynManorFightItem sideA = 1;
  total_size += 1 * this->sidea_size();
  for (int i = 0; i < this->sidea_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sidea(i));
  }

  // repeated .GuildProto.stSynManorFightItem sideB = 2;
  total_size += 1 * this->sideb_size();
  for (int i = 0; i < this->sideb_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sideb(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stManorFightPKFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stManorFightPKFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stManorFightPKFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stManorFightPKFail::MergeFrom(const stManorFightPKFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  sidea_.MergeFrom(from.sidea_);
  sideb_.MergeFrom(from.sideb_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stManorFightPKFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stManorFightPKFail::CopyFrom(const stManorFightPKFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stManorFightPKFail::IsInitialized() const {

  return true;
}

void stManorFightPKFail::Swap(stManorFightPKFail* other) {
  if (other != this) {
    sidea_.Swap(&other->sidea_);
    sideb_.Swap(&other->sideb_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stManorFightPKFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stManorFightPKFail_descriptor_;
  metadata.reflection = stManorFightPKFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyWinerAfterApplyEnd_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyWinerAfterApplyEnd_ProtoModID_descriptor_;
}
bool stNotifyWinerAfterApplyEnd_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyWinerAfterApplyEnd_ProtoModID stNotifyWinerAfterApplyEnd::ModID;
const stNotifyWinerAfterApplyEnd_ProtoModID stNotifyWinerAfterApplyEnd::ProtoModID_MIN;
const stNotifyWinerAfterApplyEnd_ProtoModID stNotifyWinerAfterApplyEnd::ProtoModID_MAX;
const int stNotifyWinerAfterApplyEnd::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyWinerAfterApplyEnd_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyWinerAfterApplyEnd_ProtoFunID_descriptor_;
}
bool stNotifyWinerAfterApplyEnd_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 98:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyWinerAfterApplyEnd_ProtoFunID stNotifyWinerAfterApplyEnd::FunID;
const stNotifyWinerAfterApplyEnd_ProtoFunID stNotifyWinerAfterApplyEnd::ProtoFunID_MIN;
const stNotifyWinerAfterApplyEnd_ProtoFunID stNotifyWinerAfterApplyEnd::ProtoFunID_MAX;
const int stNotifyWinerAfterApplyEnd::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyWinerAfterApplyEnd::kGuildIDFieldNumber;
const int stNotifyWinerAfterApplyEnd::kManorIDFieldNumber;
#endif  // !_MSC_VER

stNotifyWinerAfterApplyEnd::stNotifyWinerAfterApplyEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyWinerAfterApplyEnd::InitAsDefaultInstance() {
}

stNotifyWinerAfterApplyEnd::stNotifyWinerAfterApplyEnd(const stNotifyWinerAfterApplyEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyWinerAfterApplyEnd::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyWinerAfterApplyEnd::~stNotifyWinerAfterApplyEnd() {
  SharedDtor();
}

void stNotifyWinerAfterApplyEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyWinerAfterApplyEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyWinerAfterApplyEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyWinerAfterApplyEnd_descriptor_;
}

const stNotifyWinerAfterApplyEnd& stNotifyWinerAfterApplyEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stNotifyWinerAfterApplyEnd* stNotifyWinerAfterApplyEnd::default_instance_ = NULL;

stNotifyWinerAfterApplyEnd* stNotifyWinerAfterApplyEnd::New() const {
  return new stNotifyWinerAfterApplyEnd;
}

void stNotifyWinerAfterApplyEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
    manorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyWinerAfterApplyEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_manorID;
        break;
      }

      // optional uint32 manorID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_manorID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyWinerAfterApplyEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  // optional uint32 manorID = 2;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->manorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyWinerAfterApplyEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  // optional uint32 manorID = 2;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->manorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyWinerAfterApplyEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

    // optional uint32 manorID = 2;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyWinerAfterApplyEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyWinerAfterApplyEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyWinerAfterApplyEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyWinerAfterApplyEnd::MergeFrom(const stNotifyWinerAfterApplyEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyWinerAfterApplyEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyWinerAfterApplyEnd::CopyFrom(const stNotifyWinerAfterApplyEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyWinerAfterApplyEnd::IsInitialized() const {

  return true;
}

void stNotifyWinerAfterApplyEnd::Swap(stNotifyWinerAfterApplyEnd* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyWinerAfterApplyEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyWinerAfterApplyEnd_descriptor_;
  metadata.reflection = stNotifyWinerAfterApplyEnd_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqChgManorFightTeamPos_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChgManorFightTeamPos_ProtoModID_descriptor_;
}
bool stReqChgManorFightTeamPos_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChgManorFightTeamPos_ProtoModID stReqChgManorFightTeamPos::ModID;
const stReqChgManorFightTeamPos_ProtoModID stReqChgManorFightTeamPos::ProtoModID_MIN;
const stReqChgManorFightTeamPos_ProtoModID stReqChgManorFightTeamPos::ProtoModID_MAX;
const int stReqChgManorFightTeamPos::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqChgManorFightTeamPos_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChgManorFightTeamPos_ProtoFunID_descriptor_;
}
bool stReqChgManorFightTeamPos_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 99:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqChgManorFightTeamPos_ProtoFunID stReqChgManorFightTeamPos::FunID;
const stReqChgManorFightTeamPos_ProtoFunID stReqChgManorFightTeamPos::ProtoFunID_MIN;
const stReqChgManorFightTeamPos_ProtoFunID stReqChgManorFightTeamPos::ProtoFunID_MAX;
const int stReqChgManorFightTeamPos::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqChgManorFightTeamPos::kCharIDFieldNumber;
const int stReqChgManorFightTeamPos::kDestTeamIDFieldNumber;
const int stReqChgManorFightTeamPos::kDestPosFieldNumber;
#endif  // !_MSC_VER

stReqChgManorFightTeamPos::stReqChgManorFightTeamPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqChgManorFightTeamPos::InitAsDefaultInstance() {
}

stReqChgManorFightTeamPos::stReqChgManorFightTeamPos(const stReqChgManorFightTeamPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqChgManorFightTeamPos::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  destteamid_ = 0u;
  destpos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqChgManorFightTeamPos::~stReqChgManorFightTeamPos() {
  SharedDtor();
}

void stReqChgManorFightTeamPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqChgManorFightTeamPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqChgManorFightTeamPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqChgManorFightTeamPos_descriptor_;
}

const stReqChgManorFightTeamPos& stReqChgManorFightTeamPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqChgManorFightTeamPos* stReqChgManorFightTeamPos::default_instance_ = NULL;

stReqChgManorFightTeamPos* stReqChgManorFightTeamPos::New() const {
  return new stReqChgManorFightTeamPos;
}

void stReqChgManorFightTeamPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    destteamid_ = 0u;
    destpos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqChgManorFightTeamPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destTeamID;
        break;
      }

      // optional uint32 destTeamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destTeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destteamid_)));
          set_has_destteamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_destPos;
        break;
      }

      // optional uint32 destPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &destpos_)));
          set_has_destpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqChgManorFightTeamPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 destTeamID = 2;
  if (has_destteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->destteamid(), output);
  }

  // optional uint32 destPos = 3;
  if (has_destpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->destpos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqChgManorFightTeamPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 destTeamID = 2;
  if (has_destteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->destteamid(), target);
  }

  // optional uint32 destPos = 3;
  if (has_destpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->destpos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqChgManorFightTeamPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 destTeamID = 2;
    if (has_destteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destteamid());
    }

    // optional uint32 destPos = 3;
    if (has_destpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->destpos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqChgManorFightTeamPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqChgManorFightTeamPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqChgManorFightTeamPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqChgManorFightTeamPos::MergeFrom(const stReqChgManorFightTeamPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_destteamid()) {
      set_destteamid(from.destteamid());
    }
    if (from.has_destpos()) {
      set_destpos(from.destpos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqChgManorFightTeamPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqChgManorFightTeamPos::CopyFrom(const stReqChgManorFightTeamPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqChgManorFightTeamPos::IsInitialized() const {

  return true;
}

void stReqChgManorFightTeamPos::Swap(stReqChgManorFightTeamPos* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(destteamid_, other->destteamid_);
    std::swap(destpos_, other->destpos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqChgManorFightTeamPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqChgManorFightTeamPos_descriptor_;
  metadata.reflection = stReqChgManorFightTeamPos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyChgManorFightTeamPos_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyChgManorFightTeamPos_ProtoModID_descriptor_;
}
bool stNotifyChgManorFightTeamPos_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyChgManorFightTeamPos_ProtoModID stNotifyChgManorFightTeamPos::ModID;
const stNotifyChgManorFightTeamPos_ProtoModID stNotifyChgManorFightTeamPos::ProtoModID_MIN;
const stNotifyChgManorFightTeamPos_ProtoModID stNotifyChgManorFightTeamPos::ProtoModID_MAX;
const int stNotifyChgManorFightTeamPos::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyChgManorFightTeamPos_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyChgManorFightTeamPos_ProtoFunID_descriptor_;
}
bool stNotifyChgManorFightTeamPos_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 100:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyChgManorFightTeamPos_ProtoFunID stNotifyChgManorFightTeamPos::FunID;
const stNotifyChgManorFightTeamPos_ProtoFunID stNotifyChgManorFightTeamPos::ProtoFunID_MIN;
const stNotifyChgManorFightTeamPos_ProtoFunID stNotifyChgManorFightTeamPos::ProtoFunID_MAX;
const int stNotifyChgManorFightTeamPos::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyChgManorFightTeamPos::kCharIDFieldNumber;
const int stNotifyChgManorFightTeamPos::kSrcTeamIDFieldNumber;
const int stNotifyChgManorFightTeamPos::kSrcPosFieldNumber;
const int stNotifyChgManorFightTeamPos::kDstTeamIDFieldNumber;
const int stNotifyChgManorFightTeamPos::kDstPosFieldNumber;
const int stNotifyChgManorFightTeamPos::kFormationFieldNumber;
#endif  // !_MSC_VER

stNotifyChgManorFightTeamPos::stNotifyChgManorFightTeamPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyChgManorFightTeamPos::InitAsDefaultInstance() {
}

stNotifyChgManorFightTeamPos::stNotifyChgManorFightTeamPos(const stNotifyChgManorFightTeamPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyChgManorFightTeamPos::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  srcteamid_ = 0u;
  srcpos_ = 0u;
  dstteamid_ = 0u;
  dstpos_ = 0u;
  formation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyChgManorFightTeamPos::~stNotifyChgManorFightTeamPos() {
  SharedDtor();
}

void stNotifyChgManorFightTeamPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyChgManorFightTeamPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyChgManorFightTeamPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyChgManorFightTeamPos_descriptor_;
}

const stNotifyChgManorFightTeamPos& stNotifyChgManorFightTeamPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stNotifyChgManorFightTeamPos* stNotifyChgManorFightTeamPos::default_instance_ = NULL;

stNotifyChgManorFightTeamPos* stNotifyChgManorFightTeamPos::New() const {
  return new stNotifyChgManorFightTeamPos;
}

void stNotifyChgManorFightTeamPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
    srcteamid_ = 0u;
    srcpos_ = 0u;
    dstteamid_ = 0u;
    dstpos_ = 0u;
    formation_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyChgManorFightTeamPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_srcTeamID;
        break;
      }

      // optional uint32 srcTeamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcTeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcteamid_)));
          set_has_srcteamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_srcPos;
        break;
      }

      // optional uint32 srcPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_srcPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &srcpos_)));
          set_has_srcpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dstTeamID;
        break;
      }

      // optional uint32 dstTeamID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstTeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstteamid_)));
          set_has_dstteamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dstPos;
        break;
      }

      // optional uint32 dstPos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dstPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dstpos_)));
          set_has_dstpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_formation;
        break;
      }

      // optional uint32 formation = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formation_)));
          set_has_formation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyChgManorFightTeamPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  // optional uint32 srcTeamID = 2;
  if (has_srcteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->srcteamid(), output);
  }

  // optional uint32 srcPos = 3;
  if (has_srcpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->srcpos(), output);
  }

  // optional uint32 dstTeamID = 4;
  if (has_dstteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->dstteamid(), output);
  }

  // optional uint32 dstPos = 5;
  if (has_dstpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->dstpos(), output);
  }

  // optional uint32 formation = 6;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->formation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyChgManorFightTeamPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  // optional uint32 srcTeamID = 2;
  if (has_srcteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->srcteamid(), target);
  }

  // optional uint32 srcPos = 3;
  if (has_srcpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->srcpos(), target);
  }

  // optional uint32 dstTeamID = 4;
  if (has_dstteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->dstteamid(), target);
  }

  // optional uint32 dstPos = 5;
  if (has_dstpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->dstpos(), target);
  }

  // optional uint32 formation = 6;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->formation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyChgManorFightTeamPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

    // optional uint32 srcTeamID = 2;
    if (has_srcteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcteamid());
    }

    // optional uint32 srcPos = 3;
    if (has_srcpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->srcpos());
    }

    // optional uint32 dstTeamID = 4;
    if (has_dstteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstteamid());
    }

    // optional uint32 dstPos = 5;
    if (has_dstpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dstpos());
    }

    // optional uint32 formation = 6;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyChgManorFightTeamPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyChgManorFightTeamPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyChgManorFightTeamPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyChgManorFightTeamPos::MergeFrom(const stNotifyChgManorFightTeamPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_srcteamid()) {
      set_srcteamid(from.srcteamid());
    }
    if (from.has_srcpos()) {
      set_srcpos(from.srcpos());
    }
    if (from.has_dstteamid()) {
      set_dstteamid(from.dstteamid());
    }
    if (from.has_dstpos()) {
      set_dstpos(from.dstpos());
    }
    if (from.has_formation()) {
      set_formation(from.formation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyChgManorFightTeamPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyChgManorFightTeamPos::CopyFrom(const stNotifyChgManorFightTeamPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyChgManorFightTeamPos::IsInitialized() const {

  return true;
}

void stNotifyChgManorFightTeamPos::Swap(stNotifyChgManorFightTeamPos* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(srcteamid_, other->srcteamid_);
    std::swap(srcpos_, other->srcpos_);
    std::swap(dstteamid_, other->dstteamid_);
    std::swap(dstpos_, other->dstpos_);
    std::swap(formation_, other->formation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyChgManorFightTeamPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyChgManorFightTeamPos_descriptor_;
  metadata.reflection = stNotifyChgManorFightTeamPos_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stChgManorFightTeamPosResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgManorFightTeamPosResult_eResult_descriptor_;
}
bool stChgManorFightTeamPosResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChgManorFightTeamPosResult_eResult stChgManorFightTeamPosResult::eSuccess;
const stChgManorFightTeamPosResult_eResult stChgManorFightTeamPosResult::eHas_Not_Enter;
const stChgManorFightTeamPosResult_eResult stChgManorFightTeamPosResult::eDest_Pos_Was_Occupied;
const stChgManorFightTeamPosResult_eResult stChgManorFightTeamPosResult::eResult_MIN;
const stChgManorFightTeamPosResult_eResult stChgManorFightTeamPosResult::eResult_MAX;
const int stChgManorFightTeamPosResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChgManorFightTeamPosResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgManorFightTeamPosResult_ProtoModID_descriptor_;
}
bool stChgManorFightTeamPosResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChgManorFightTeamPosResult_ProtoModID stChgManorFightTeamPosResult::ModID;
const stChgManorFightTeamPosResult_ProtoModID stChgManorFightTeamPosResult::ProtoModID_MIN;
const stChgManorFightTeamPosResult_ProtoModID stChgManorFightTeamPosResult::ProtoModID_MAX;
const int stChgManorFightTeamPosResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stChgManorFightTeamPosResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgManorFightTeamPosResult_ProtoFunID_descriptor_;
}
bool stChgManorFightTeamPosResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 101:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stChgManorFightTeamPosResult_ProtoFunID stChgManorFightTeamPosResult::FunID;
const stChgManorFightTeamPosResult_ProtoFunID stChgManorFightTeamPosResult::ProtoFunID_MIN;
const stChgManorFightTeamPosResult_ProtoFunID stChgManorFightTeamPosResult::ProtoFunID_MAX;
const int stChgManorFightTeamPosResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stChgManorFightTeamPosResult::kResultFieldNumber;
const int stChgManorFightTeamPosResult::kTeamIDFieldNumber;
const int stChgManorFightTeamPosResult::kPosFieldNumber;
#endif  // !_MSC_VER

stChgManorFightTeamPosResult::stChgManorFightTeamPosResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stChgManorFightTeamPosResult::InitAsDefaultInstance() {
}

stChgManorFightTeamPosResult::stChgManorFightTeamPosResult(const stChgManorFightTeamPosResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stChgManorFightTeamPosResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  teamid_ = 0u;
  pos_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stChgManorFightTeamPosResult::~stChgManorFightTeamPosResult() {
  SharedDtor();
}

void stChgManorFightTeamPosResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stChgManorFightTeamPosResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stChgManorFightTeamPosResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stChgManorFightTeamPosResult_descriptor_;
}

const stChgManorFightTeamPosResult& stChgManorFightTeamPosResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stChgManorFightTeamPosResult* stChgManorFightTeamPosResult::default_instance_ = NULL;

stChgManorFightTeamPosResult* stChgManorFightTeamPosResult::New() const {
  return new stChgManorFightTeamPosResult;
}

void stChgManorFightTeamPosResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
    teamid_ = 0u;
    pos_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stChgManorFightTeamPosResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stChgManorFightTeamPosResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stChgManorFightTeamPosResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stChgManorFightTeamPosResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_teamID;
        break;
      }

      // optional uint32 teamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pos;
        break;
      }

      // optional uint32 pos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stChgManorFightTeamPosResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stChgManorFightTeamPosResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->teamid(), output);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stChgManorFightTeamPosResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stChgManorFightTeamPosResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // optional uint32 teamID = 2;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->teamid(), target);
  }

  // optional uint32 pos = 3;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stChgManorFightTeamPosResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stChgManorFightTeamPosResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

    // optional uint32 teamID = 2;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->teamid());
    }

    // optional uint32 pos = 3;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stChgManorFightTeamPosResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stChgManorFightTeamPosResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stChgManorFightTeamPosResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stChgManorFightTeamPosResult::MergeFrom(const stChgManorFightTeamPosResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stChgManorFightTeamPosResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stChgManorFightTeamPosResult::CopyFrom(const stChgManorFightTeamPosResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stChgManorFightTeamPosResult::IsInitialized() const {

  return true;
}

void stChgManorFightTeamPosResult::Swap(stChgManorFightTeamPosResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(teamid_, other->teamid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stChgManorFightTeamPosResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stChgManorFightTeamPosResult_descriptor_;
  metadata.reflection = stChgManorFightTeamPosResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyManorFightFail_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyManorFightFail_ProtoModID_descriptor_;
}
bool stNotifyManorFightFail_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyManorFightFail_ProtoModID stNotifyManorFightFail::ModID;
const stNotifyManorFightFail_ProtoModID stNotifyManorFightFail::ProtoModID_MIN;
const stNotifyManorFightFail_ProtoModID stNotifyManorFightFail::ProtoModID_MAX;
const int stNotifyManorFightFail::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyManorFightFail_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyManorFightFail_ProtoFunID_descriptor_;
}
bool stNotifyManorFightFail_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 102:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyManorFightFail_ProtoFunID stNotifyManorFightFail::FunID;
const stNotifyManorFightFail_ProtoFunID stNotifyManorFightFail::ProtoFunID_MIN;
const stNotifyManorFightFail_ProtoFunID stNotifyManorFightFail::ProtoFunID_MAX;
const int stNotifyManorFightFail::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyManorFightFail::kManorIDFieldNumber;
#endif  // !_MSC_VER

stNotifyManorFightFail::stNotifyManorFightFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyManorFightFail::InitAsDefaultInstance() {
}

stNotifyManorFightFail::stNotifyManorFightFail(const stNotifyManorFightFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyManorFightFail::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyManorFightFail::~stNotifyManorFightFail() {
  SharedDtor();
}

void stNotifyManorFightFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyManorFightFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyManorFightFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyManorFightFail_descriptor_;
}

const stNotifyManorFightFail& stNotifyManorFightFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stNotifyManorFightFail* stNotifyManorFightFail::default_instance_ = NULL;

stNotifyManorFightFail* stNotifyManorFightFail::New() const {
  return new stNotifyManorFightFail;
}

void stNotifyManorFightFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyManorFightFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyManorFightFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyManorFightFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyManorFightFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyManorFightFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyManorFightFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyManorFightFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyManorFightFail::MergeFrom(const stNotifyManorFightFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyManorFightFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyManorFightFail::CopyFrom(const stNotifyManorFightFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyManorFightFail::IsInitialized() const {

  return true;
}

void stNotifyManorFightFail::Swap(stNotifyManorFightFail* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyManorFightFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyManorFightFail_descriptor_;
  metadata.reflection = stNotifyManorFightFail_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stManorFightHasNotMatch_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightHasNotMatch_ProtoModID_descriptor_;
}
bool stManorFightHasNotMatch_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightHasNotMatch_ProtoModID stManorFightHasNotMatch::ModID;
const stManorFightHasNotMatch_ProtoModID stManorFightHasNotMatch::ProtoModID_MIN;
const stManorFightHasNotMatch_ProtoModID stManorFightHasNotMatch::ProtoModID_MAX;
const int stManorFightHasNotMatch::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stManorFightHasNotMatch_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightHasNotMatch_ProtoFunID_descriptor_;
}
bool stManorFightHasNotMatch_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 103:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightHasNotMatch_ProtoFunID stManorFightHasNotMatch::FunID;
const stManorFightHasNotMatch_ProtoFunID stManorFightHasNotMatch::ProtoFunID_MIN;
const stManorFightHasNotMatch_ProtoFunID stManorFightHasNotMatch::ProtoFunID_MAX;
const int stManorFightHasNotMatch::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stManorFightHasNotMatch::kManorIDFieldNumber;
#endif  // !_MSC_VER

stManorFightHasNotMatch::stManorFightHasNotMatch()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stManorFightHasNotMatch::InitAsDefaultInstance() {
}

stManorFightHasNotMatch::stManorFightHasNotMatch(const stManorFightHasNotMatch& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stManorFightHasNotMatch::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stManorFightHasNotMatch::~stManorFightHasNotMatch() {
  SharedDtor();
}

void stManorFightHasNotMatch::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stManorFightHasNotMatch::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stManorFightHasNotMatch::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightHasNotMatch_descriptor_;
}

const stManorFightHasNotMatch& stManorFightHasNotMatch::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stManorFightHasNotMatch* stManorFightHasNotMatch::default_instance_ = NULL;

stManorFightHasNotMatch* stManorFightHasNotMatch::New() const {
  return new stManorFightHasNotMatch;
}

void stManorFightHasNotMatch::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stManorFightHasNotMatch::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stManorFightHasNotMatch::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stManorFightHasNotMatch::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stManorFightHasNotMatch::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stManorFightHasNotMatch::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stManorFightHasNotMatch* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stManorFightHasNotMatch*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stManorFightHasNotMatch::MergeFrom(const stManorFightHasNotMatch& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stManorFightHasNotMatch::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stManorFightHasNotMatch::CopyFrom(const stManorFightHasNotMatch& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stManorFightHasNotMatch::IsInitialized() const {

  return true;
}

void stManorFightHasNotMatch::Swap(stManorFightHasNotMatch* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stManorFightHasNotMatch::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stManorFightHasNotMatch_descriptor_;
  metadata.reflection = stManorFightHasNotMatch_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stManorFightFormationResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightFormationResult_ProtoModID_descriptor_;
}
bool stManorFightFormationResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightFormationResult_ProtoModID stManorFightFormationResult::ModID;
const stManorFightFormationResult_ProtoModID stManorFightFormationResult::ProtoModID_MIN;
const stManorFightFormationResult_ProtoModID stManorFightFormationResult::ProtoModID_MAX;
const int stManorFightFormationResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stManorFightFormationResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightFormationResult_ProtoFunID_descriptor_;
}
bool stManorFightFormationResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 104:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightFormationResult_ProtoFunID stManorFightFormationResult::FunID;
const stManorFightFormationResult_ProtoFunID stManorFightFormationResult::ProtoFunID_MIN;
const stManorFightFormationResult_ProtoFunID stManorFightFormationResult::ProtoFunID_MAX;
const int stManorFightFormationResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stManorFightFormationResult::kManorIDFieldNumber;
const int stManorFightFormationResult::kWinGuildIDFieldNumber;
const int stManorFightFormationResult::kFormationFieldNumber;
#endif  // !_MSC_VER

stManorFightFormationResult::stManorFightFormationResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stManorFightFormationResult::InitAsDefaultInstance() {
}

stManorFightFormationResult::stManorFightFormationResult(const stManorFightFormationResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stManorFightFormationResult::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  winguildid_ = 0u;
  formation_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stManorFightFormationResult::~stManorFightFormationResult() {
  SharedDtor();
}

void stManorFightFormationResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stManorFightFormationResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stManorFightFormationResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightFormationResult_descriptor_;
}

const stManorFightFormationResult& stManorFightFormationResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stManorFightFormationResult* stManorFightFormationResult::default_instance_ = NULL;

stManorFightFormationResult* stManorFightFormationResult::New() const {
  return new stManorFightFormationResult;
}

void stManorFightFormationResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
    winguildid_ = 0u;
    formation_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stManorFightFormationResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_winGuildID;
        break;
      }

      // optional uint32 winGuildID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winGuildID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &winguildid_)));
          set_has_winguildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_formation;
        break;
      }

      // optional uint32 formation = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &formation_)));
          set_has_formation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stManorFightFormationResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  // optional uint32 winGuildID = 2;
  if (has_winguildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->winguildid(), output);
  }

  // optional uint32 formation = 3;
  if (has_formation()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->formation(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stManorFightFormationResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  // optional uint32 winGuildID = 2;
  if (has_winguildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->winguildid(), target);
  }

  // optional uint32 formation = 3;
  if (has_formation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->formation(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stManorFightFormationResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

    // optional uint32 winGuildID = 2;
    if (has_winguildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->winguildid());
    }

    // optional uint32 formation = 3;
    if (has_formation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->formation());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stManorFightFormationResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stManorFightFormationResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stManorFightFormationResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stManorFightFormationResult::MergeFrom(const stManorFightFormationResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
    if (from.has_winguildid()) {
      set_winguildid(from.winguildid());
    }
    if (from.has_formation()) {
      set_formation(from.formation());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stManorFightFormationResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stManorFightFormationResult::CopyFrom(const stManorFightFormationResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stManorFightFormationResult::IsInitialized() const {

  return true;
}

void stManorFightFormationResult::Swap(stManorFightFormationResult* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(winguildid_, other->winguildid_);
    std::swap(formation_, other->formation_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stManorFightFormationResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stManorFightFormationResult_descriptor_;
  metadata.reflection = stManorFightFormationResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stManorFightFinish_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightFinish_ProtoModID_descriptor_;
}
bool stManorFightFinish_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightFinish_ProtoModID stManorFightFinish::ModID;
const stManorFightFinish_ProtoModID stManorFightFinish::ProtoModID_MIN;
const stManorFightFinish_ProtoModID stManorFightFinish::ProtoModID_MAX;
const int stManorFightFinish::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stManorFightFinish_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightFinish_ProtoFunID_descriptor_;
}
bool stManorFightFinish_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 105:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stManorFightFinish_ProtoFunID stManorFightFinish::FunID;
const stManorFightFinish_ProtoFunID stManorFightFinish::ProtoFunID_MIN;
const stManorFightFinish_ProtoFunID stManorFightFinish::ProtoFunID_MAX;
const int stManorFightFinish::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stManorFightFinish::kManorIDFieldNumber;
#endif  // !_MSC_VER

stManorFightFinish::stManorFightFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stManorFightFinish::InitAsDefaultInstance() {
}

stManorFightFinish::stManorFightFinish(const stManorFightFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stManorFightFinish::SharedCtor() {
  _cached_size_ = 0;
  manorid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stManorFightFinish::~stManorFightFinish() {
  SharedDtor();
}

void stManorFightFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stManorFightFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stManorFightFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stManorFightFinish_descriptor_;
}

const stManorFightFinish& stManorFightFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stManorFightFinish* stManorFightFinish::default_instance_ = NULL;

stManorFightFinish* stManorFightFinish::New() const {
  return new stManorFightFinish;
}

void stManorFightFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    manorid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stManorFightFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 manorID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &manorid_)));
          set_has_manorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stManorFightFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->manorid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stManorFightFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 manorID = 1;
  if (has_manorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->manorid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stManorFightFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 manorID = 1;
    if (has_manorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->manorid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stManorFightFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stManorFightFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stManorFightFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stManorFightFinish::MergeFrom(const stManorFightFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_manorid()) {
      set_manorid(from.manorid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stManorFightFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stManorFightFinish::CopyFrom(const stManorFightFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stManorFightFinish::IsInitialized() const {

  return true;
}

void stManorFightFinish::Swap(stManorFightFinish* other) {
  if (other != this) {
    std::swap(manorid_, other->manorid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stManorFightFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stManorFightFinish_descriptor_;
  metadata.reflection = stManorFightFinish_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stReqLevelUpBlackMarketLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelUpBlackMarketLv_ProtoModID_descriptor_;
}
bool stReqLevelUpBlackMarketLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelUpBlackMarketLv_ProtoModID stReqLevelUpBlackMarketLv::ModID;
const stReqLevelUpBlackMarketLv_ProtoModID stReqLevelUpBlackMarketLv::ProtoModID_MIN;
const stReqLevelUpBlackMarketLv_ProtoModID stReqLevelUpBlackMarketLv::ProtoModID_MAX;
const int stReqLevelUpBlackMarketLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stReqLevelUpBlackMarketLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelUpBlackMarketLv_ProtoFunID_descriptor_;
}
bool stReqLevelUpBlackMarketLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 106:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stReqLevelUpBlackMarketLv_ProtoFunID stReqLevelUpBlackMarketLv::FunID;
const stReqLevelUpBlackMarketLv_ProtoFunID stReqLevelUpBlackMarketLv::ProtoFunID_MIN;
const stReqLevelUpBlackMarketLv_ProtoFunID stReqLevelUpBlackMarketLv::ProtoFunID_MAX;
const int stReqLevelUpBlackMarketLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stReqLevelUpBlackMarketLv::kGuildIDFieldNumber;
#endif  // !_MSC_VER

stReqLevelUpBlackMarketLv::stReqLevelUpBlackMarketLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stReqLevelUpBlackMarketLv::InitAsDefaultInstance() {
}

stReqLevelUpBlackMarketLv::stReqLevelUpBlackMarketLv(const stReqLevelUpBlackMarketLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stReqLevelUpBlackMarketLv::SharedCtor() {
  _cached_size_ = 0;
  guildid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stReqLevelUpBlackMarketLv::~stReqLevelUpBlackMarketLv() {
  SharedDtor();
}

void stReqLevelUpBlackMarketLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stReqLevelUpBlackMarketLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stReqLevelUpBlackMarketLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stReqLevelUpBlackMarketLv_descriptor_;
}

const stReqLevelUpBlackMarketLv& stReqLevelUpBlackMarketLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stReqLevelUpBlackMarketLv* stReqLevelUpBlackMarketLv::default_instance_ = NULL;

stReqLevelUpBlackMarketLv* stReqLevelUpBlackMarketLv::New() const {
  return new stReqLevelUpBlackMarketLv;
}

void stReqLevelUpBlackMarketLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    guildid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stReqLevelUpBlackMarketLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 guildID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &guildid_)));
          set_has_guildid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stReqLevelUpBlackMarketLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->guildid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stReqLevelUpBlackMarketLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 guildID = 1;
  if (has_guildid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->guildid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stReqLevelUpBlackMarketLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 guildID = 1;
    if (has_guildid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->guildid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stReqLevelUpBlackMarketLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stReqLevelUpBlackMarketLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stReqLevelUpBlackMarketLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stReqLevelUpBlackMarketLv::MergeFrom(const stReqLevelUpBlackMarketLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_guildid()) {
      set_guildid(from.guildid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stReqLevelUpBlackMarketLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stReqLevelUpBlackMarketLv::CopyFrom(const stReqLevelUpBlackMarketLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stReqLevelUpBlackMarketLv::IsInitialized() const {

  return true;
}

void stReqLevelUpBlackMarketLv::Swap(stReqLevelUpBlackMarketLv* other) {
  if (other != this) {
    std::swap(guildid_, other->guildid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stReqLevelUpBlackMarketLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stReqLevelUpBlackMarketLv_descriptor_;
  metadata.reflection = stReqLevelUpBlackMarketLv_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLevelUpBlackMarketLvResult_eResult_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpBlackMarketLvResult_eResult_descriptor_;
}
bool stLevelUpBlackMarketLvResult_eResult_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult::eSUCCESS;
const stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult::eHAS_NO_RIGHT;
const stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult::eCONTRIBUTE_NOT_ENOUGH;
const stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult::eINNER_ERROR;
const stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult::eHALL_LV_TOO_LOW;
const stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult::eResult_MIN;
const stLevelUpBlackMarketLvResult_eResult stLevelUpBlackMarketLvResult::eResult_MAX;
const int stLevelUpBlackMarketLvResult::eResult_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelUpBlackMarketLvResult_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpBlackMarketLvResult_ProtoModID_descriptor_;
}
bool stLevelUpBlackMarketLvResult_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelUpBlackMarketLvResult_ProtoModID stLevelUpBlackMarketLvResult::ModID;
const stLevelUpBlackMarketLvResult_ProtoModID stLevelUpBlackMarketLvResult::ProtoModID_MIN;
const stLevelUpBlackMarketLvResult_ProtoModID stLevelUpBlackMarketLvResult::ProtoModID_MAX;
const int stLevelUpBlackMarketLvResult::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLevelUpBlackMarketLvResult_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpBlackMarketLvResult_ProtoFunID_descriptor_;
}
bool stLevelUpBlackMarketLvResult_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 107:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLevelUpBlackMarketLvResult_ProtoFunID stLevelUpBlackMarketLvResult::FunID;
const stLevelUpBlackMarketLvResult_ProtoFunID stLevelUpBlackMarketLvResult::ProtoFunID_MIN;
const stLevelUpBlackMarketLvResult_ProtoFunID stLevelUpBlackMarketLvResult::ProtoFunID_MAX;
const int stLevelUpBlackMarketLvResult::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLevelUpBlackMarketLvResult::kResultFieldNumber;
#endif  // !_MSC_VER

stLevelUpBlackMarketLvResult::stLevelUpBlackMarketLvResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLevelUpBlackMarketLvResult::InitAsDefaultInstance() {
}

stLevelUpBlackMarketLvResult::stLevelUpBlackMarketLvResult(const stLevelUpBlackMarketLvResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLevelUpBlackMarketLvResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLevelUpBlackMarketLvResult::~stLevelUpBlackMarketLvResult() {
  SharedDtor();
}

void stLevelUpBlackMarketLvResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stLevelUpBlackMarketLvResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLevelUpBlackMarketLvResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLevelUpBlackMarketLvResult_descriptor_;
}

const stLevelUpBlackMarketLvResult& stLevelUpBlackMarketLvResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stLevelUpBlackMarketLvResult* stLevelUpBlackMarketLvResult::default_instance_ = NULL;

stLevelUpBlackMarketLvResult* stLevelUpBlackMarketLvResult::New() const {
  return new stLevelUpBlackMarketLvResult;
}

void stLevelUpBlackMarketLvResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLevelUpBlackMarketLvResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .GuildProto.stLevelUpBlackMarketLvResult.eResult result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::GuildProto::stLevelUpBlackMarketLvResult_eResult_IsValid(value)) {
            set_result(static_cast< ::GuildProto::stLevelUpBlackMarketLvResult_eResult >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLevelUpBlackMarketLvResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .GuildProto.stLevelUpBlackMarketLvResult.eResult result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLevelUpBlackMarketLvResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .GuildProto.stLevelUpBlackMarketLvResult.eResult result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLevelUpBlackMarketLvResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .GuildProto.stLevelUpBlackMarketLvResult.eResult result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLevelUpBlackMarketLvResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLevelUpBlackMarketLvResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLevelUpBlackMarketLvResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLevelUpBlackMarketLvResult::MergeFrom(const stLevelUpBlackMarketLvResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLevelUpBlackMarketLvResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLevelUpBlackMarketLvResult::CopyFrom(const stLevelUpBlackMarketLvResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLevelUpBlackMarketLvResult::IsInitialized() const {

  return true;
}

void stLevelUpBlackMarketLvResult::Swap(stLevelUpBlackMarketLvResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLevelUpBlackMarketLvResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLevelUpBlackMarketLvResult_descriptor_;
  metadata.reflection = stLevelUpBlackMarketLvResult_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stSynBlackMarketBuildingLv_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynBlackMarketBuildingLv_ProtoModID_descriptor_;
}
bool stSynBlackMarketBuildingLv_ProtoModID_IsValid(int value) {
  switch(value) {
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynBlackMarketBuildingLv_ProtoModID stSynBlackMarketBuildingLv::ModID;
const stSynBlackMarketBuildingLv_ProtoModID stSynBlackMarketBuildingLv::ProtoModID_MIN;
const stSynBlackMarketBuildingLv_ProtoModID stSynBlackMarketBuildingLv::ProtoModID_MAX;
const int stSynBlackMarketBuildingLv::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stSynBlackMarketBuildingLv_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynBlackMarketBuildingLv_ProtoFunID_descriptor_;
}
bool stSynBlackMarketBuildingLv_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 108:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stSynBlackMarketBuildingLv_ProtoFunID stSynBlackMarketBuildingLv::FunID;
const stSynBlackMarketBuildingLv_ProtoFunID stSynBlackMarketBuildingLv::ProtoFunID_MIN;
const stSynBlackMarketBuildingLv_ProtoFunID stSynBlackMarketBuildingLv::ProtoFunID_MAX;
const int stSynBlackMarketBuildingLv::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stSynBlackMarketBuildingLv::kLvFieldNumber;
#endif  // !_MSC_VER

stSynBlackMarketBuildingLv::stSynBlackMarketBuildingLv()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stSynBlackMarketBuildingLv::InitAsDefaultInstance() {
}

stSynBlackMarketBuildingLv::stSynBlackMarketBuildingLv(const stSynBlackMarketBuildingLv& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stSynBlackMarketBuildingLv::SharedCtor() {
  _cached_size_ = 0;
  lv_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stSynBlackMarketBuildingLv::~stSynBlackMarketBuildingLv() {
  SharedDtor();
}

void stSynBlackMarketBuildingLv::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stSynBlackMarketBuildingLv::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stSynBlackMarketBuildingLv::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stSynBlackMarketBuildingLv_descriptor_;
}

const stSynBlackMarketBuildingLv& stSynBlackMarketBuildingLv::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GuildProto_2eproto();
  return *default_instance_;
}

stSynBlackMarketBuildingLv* stSynBlackMarketBuildingLv::default_instance_ = NULL;

stSynBlackMarketBuildingLv* stSynBlackMarketBuildingLv::New() const {
  return new stSynBlackMarketBuildingLv;
}

void stSynBlackMarketBuildingLv::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lv_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stSynBlackMarketBuildingLv::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 lv = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stSynBlackMarketBuildingLv::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stSynBlackMarketBuildingLv::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 lv = 1;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stSynBlackMarketBuildingLv::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 lv = 1;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stSynBlackMarketBuildingLv::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stSynBlackMarketBuildingLv* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stSynBlackMarketBuildingLv*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stSynBlackMarketBuildingLv::MergeFrom(const stSynBlackMarketBuildingLv& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stSynBlackMarketBuildingLv::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stSynBlackMarketBuildingLv::CopyFrom(const stSynBlackMarketBuildingLv& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stSynBlackMarketBuildingLv::IsInitialized() const {

  return true;
}

void stSynBlackMarketBuildingLv::Swap(stSynBlackMarketBuildingLv* other) {
  if (other != this) {
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stSynBlackMarketBuildingLv::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stSynBlackMarketBuildingLv_descriptor_;
  metadata.reflection = stSynBlackMarketBuildingLv_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GuildProto

// @@protoc_insertion_point(global_scope)
