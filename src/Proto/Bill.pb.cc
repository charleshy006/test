// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Bill.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Bill.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Bill {

namespace {

const ::google::protobuf::Descriptor* stLoginBill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stLoginBill_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginBill_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stLoginBill_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::Descriptor* stNotifyUserRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  stNotifyUserRecharge_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserRecharge_ProtoModID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* stNotifyUserRecharge_ProtoFunID_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* BillModID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Bill_2eproto() {
  protobuf_AddDesc_Bill_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Bill.proto");
  GOOGLE_CHECK(file != NULL);
  stLoginBill_descriptor_ = file->message_type(0);
  static const int stLoginBill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginBill, svrtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginBill, svrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginBill, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginBill, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginBill, zoneid_),
  };
  stLoginBill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stLoginBill_descriptor_,
      stLoginBill::default_instance_,
      stLoginBill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginBill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stLoginBill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stLoginBill));
  stLoginBill_ProtoModID_descriptor_ = stLoginBill_descriptor_->enum_type(0);
  stLoginBill_ProtoFunID_descriptor_ = stLoginBill_descriptor_->enum_type(1);
  stNotifyUserRecharge_descriptor_ = file->message_type(1);
  static const int stNotifyUserRecharge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserRecharge, charid_),
  };
  stNotifyUserRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      stNotifyUserRecharge_descriptor_,
      stNotifyUserRecharge::default_instance_,
      stNotifyUserRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(stNotifyUserRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(stNotifyUserRecharge));
  stNotifyUserRecharge_ProtoModID_descriptor_ = stNotifyUserRecharge_descriptor_->enum_type(0);
  stNotifyUserRecharge_ProtoFunID_descriptor_ = stNotifyUserRecharge_descriptor_->enum_type(1);
  BillModID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Bill_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stLoginBill_descriptor_, &stLoginBill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    stNotifyUserRecharge_descriptor_, &stNotifyUserRecharge::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Bill_2eproto() {
  delete stLoginBill::default_instance_;
  delete stLoginBill_reflection_;
  delete stNotifyUserRecharge::default_instance_;
  delete stNotifyUserRecharge_reflection_;
}

void protobuf_AddDesc_Bill_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nBill.proto\022\004Bill\"\211\001\n\013stLoginBill\022\017\n\007sv"
    "rType\030\001 \001(\r\022\r\n\005svrID\030\002 \001(\r\022\n\n\002ip\030\003 \001(\t\022\014"
    "\n\004port\030\004 \001(\r\022\016\n\006zoneID\030\005 \001(\r\"\027\n\nProtoMod"
    "ID\022\t\n\005ModID\020\001\"\027\n\nProtoFunID\022\t\n\005FunID\020\001\"X"
    "\n\024stNotifyUserRecharge\022\016\n\006charID\030\001 \001(\r\"\027"
    "\n\nProtoModID\022\t\n\005ModID\020\002\"\027\n\nProtoFunID\022\t\n"
    "\005FunID\020\001*/\n\tBillModID\022\r\n\tLOGIN_MOD\020\001\022\023\n\017"
    "GLOBAL2BILL_MOD\020\002", 297);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Bill.proto", &protobuf_RegisterTypes);
  stLoginBill::default_instance_ = new stLoginBill();
  stNotifyUserRecharge::default_instance_ = new stNotifyUserRecharge();
  stLoginBill::default_instance_->InitAsDefaultInstance();
  stNotifyUserRecharge::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Bill_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Bill_2eproto {
  StaticDescriptorInitializer_Bill_2eproto() {
    protobuf_AddDesc_Bill_2eproto();
  }
} static_descriptor_initializer_Bill_2eproto_;
const ::google::protobuf::EnumDescriptor* BillModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BillModID_descriptor_;
}
bool BillModID_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stLoginBill_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginBill_ProtoModID_descriptor_;
}
bool stLoginBill_ProtoModID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginBill_ProtoModID stLoginBill::ModID;
const stLoginBill_ProtoModID stLoginBill::ProtoModID_MIN;
const stLoginBill_ProtoModID stLoginBill::ProtoModID_MAX;
const int stLoginBill::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stLoginBill_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginBill_ProtoFunID_descriptor_;
}
bool stLoginBill_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stLoginBill_ProtoFunID stLoginBill::FunID;
const stLoginBill_ProtoFunID stLoginBill::ProtoFunID_MIN;
const stLoginBill_ProtoFunID stLoginBill::ProtoFunID_MAX;
const int stLoginBill::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stLoginBill::kSvrTypeFieldNumber;
const int stLoginBill::kSvrIDFieldNumber;
const int stLoginBill::kIpFieldNumber;
const int stLoginBill::kPortFieldNumber;
const int stLoginBill::kZoneIDFieldNumber;
#endif  // !_MSC_VER

stLoginBill::stLoginBill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stLoginBill::InitAsDefaultInstance() {
}

stLoginBill::stLoginBill(const stLoginBill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stLoginBill::SharedCtor() {
  _cached_size_ = 0;
  svrtype_ = 0u;
  svrid_ = 0u;
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0u;
  zoneid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stLoginBill::~stLoginBill() {
  SharedDtor();
}

void stLoginBill::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void stLoginBill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stLoginBill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stLoginBill_descriptor_;
}

const stLoginBill& stLoginBill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Bill_2eproto();
  return *default_instance_;
}

stLoginBill* stLoginBill::default_instance_ = NULL;

stLoginBill* stLoginBill::New() const {
  return new stLoginBill;
}

void stLoginBill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    svrtype_ = 0u;
    svrid_ = 0u;
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0u;
    zoneid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stLoginBill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 svrType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrtype_)));
          set_has_svrtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_svrID;
        break;
      }

      // optional uint32 svrID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_svrID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &svrid_)));
          set_has_svrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // optional string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_port;
        break;
      }

      // optional uint32 port = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_zoneID;
        break;
      }

      // optional uint32 zoneID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_zoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &zoneid_)));
          set_has_zoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stLoginBill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 svrType = 1;
  if (has_svrtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->svrtype(), output);
  }

  // optional uint32 svrID = 2;
  if (has_svrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->svrid(), output);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->port(), output);
  }

  // optional uint32 zoneID = 5;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stLoginBill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 svrType = 1;
  if (has_svrtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->svrtype(), target);
  }

  // optional uint32 svrID = 2;
  if (has_svrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->svrid(), target);
  }

  // optional string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // optional uint32 port = 4;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->port(), target);
  }

  // optional uint32 zoneID = 5;
  if (has_zoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stLoginBill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 svrType = 1;
    if (has_svrtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrtype());
    }

    // optional uint32 svrID = 2;
    if (has_svrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->svrid());
    }

    // optional string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional uint32 port = 4;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 zoneID = 5;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stLoginBill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stLoginBill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stLoginBill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stLoginBill::MergeFrom(const stLoginBill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_svrtype()) {
      set_svrtype(from.svrtype());
    }
    if (from.has_svrid()) {
      set_svrid(from.svrid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stLoginBill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stLoginBill::CopyFrom(const stLoginBill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stLoginBill::IsInitialized() const {

  return true;
}

void stLoginBill::Swap(stLoginBill* other) {
  if (other != this) {
    std::swap(svrtype_, other->svrtype_);
    std::swap(svrid_, other->svrid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stLoginBill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stLoginBill_descriptor_;
  metadata.reflection = stLoginBill_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* stNotifyUserRecharge_ProtoModID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserRecharge_ProtoModID_descriptor_;
}
bool stNotifyUserRecharge_ProtoModID_IsValid(int value) {
  switch(value) {
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserRecharge_ProtoModID stNotifyUserRecharge::ModID;
const stNotifyUserRecharge_ProtoModID stNotifyUserRecharge::ProtoModID_MIN;
const stNotifyUserRecharge_ProtoModID stNotifyUserRecharge::ProtoModID_MAX;
const int stNotifyUserRecharge::ProtoModID_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* stNotifyUserRecharge_ProtoFunID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserRecharge_ProtoFunID_descriptor_;
}
bool stNotifyUserRecharge_ProtoFunID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const stNotifyUserRecharge_ProtoFunID stNotifyUserRecharge::FunID;
const stNotifyUserRecharge_ProtoFunID stNotifyUserRecharge::ProtoFunID_MIN;
const stNotifyUserRecharge_ProtoFunID stNotifyUserRecharge::ProtoFunID_MAX;
const int stNotifyUserRecharge::ProtoFunID_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int stNotifyUserRecharge::kCharIDFieldNumber;
#endif  // !_MSC_VER

stNotifyUserRecharge::stNotifyUserRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void stNotifyUserRecharge::InitAsDefaultInstance() {
}

stNotifyUserRecharge::stNotifyUserRecharge(const stNotifyUserRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void stNotifyUserRecharge::SharedCtor() {
  _cached_size_ = 0;
  charid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

stNotifyUserRecharge::~stNotifyUserRecharge() {
  SharedDtor();
}

void stNotifyUserRecharge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void stNotifyUserRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* stNotifyUserRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return stNotifyUserRecharge_descriptor_;
}

const stNotifyUserRecharge& stNotifyUserRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Bill_2eproto();
  return *default_instance_;
}

stNotifyUserRecharge* stNotifyUserRecharge::default_instance_ = NULL;

stNotifyUserRecharge* stNotifyUserRecharge::New() const {
  return new stNotifyUserRecharge;
}

void stNotifyUserRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool stNotifyUserRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void stNotifyUserRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* stNotifyUserRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional uint32 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int stNotifyUserRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void stNotifyUserRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const stNotifyUserRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const stNotifyUserRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void stNotifyUserRecharge::MergeFrom(const stNotifyUserRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void stNotifyUserRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void stNotifyUserRecharge::CopyFrom(const stNotifyUserRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool stNotifyUserRecharge::IsInitialized() const {

  return true;
}

void stNotifyUserRecharge::Swap(stNotifyUserRecharge* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata stNotifyUserRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = stNotifyUserRecharge_descriptor_;
  metadata.reflection = stNotifyUserRecharge_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Bill

// @@protoc_insertion_point(global_scope)
